{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "SSD: Single Shot MultiBox Object Detector",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "zhreshold",
                "owner_type": "User",
                "name": "mxnet-ssd",
                "url": "https://github.com/zhreshold/mxnet-ssd",
                "stars": 765,
                "pushed_at": "2021-10-03 00:53:21+00:00",
                "created_at": "2016-09-28 23:20:20+00:00",
                "language": "Python",
                "description": "MXNet port of SSD: Single Shot MultiBox Object Detector.  Reimplementation of https://github.com/weiliu89/caffe/tree/ssd",
                "license": "MIT License",
                "frameworks": [
                    "Caffe",
                    "MXNet"
                ]
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "1c19f616f9d94c41668ff893149964091ba0c5c8",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/blob/master/.gitignore"
                    }
                },
                "size": 1616
            },
            {
                "type": "code",
                "name": ".gitmodules",
                "sha": "6fd270294e34e560ce39a0f33aeca31f4dc67641",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/blob/master/.gitmodules"
                    }
                },
                "size": 80
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "221ba51ff6dd288da8070ea13512d447f1e087c5",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/blob/master/LICENSE"
                    }
                },
                "size": 1072
            },
            {
                "type": "code",
                "name": "__init__.py",
                "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/blob/master/__init__.py"
                    }
                },
                "size": 0
            },
            {
                "type": "code",
                "name": "config",
                "sha": "38537ace62b186fd04362a32560ba21d4fc83526",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/tree/master/config"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "data",
                "sha": "71445c86e86f4a7c2effb030271419f33b91f9cf",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/tree/master/data"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "dataset",
                "sha": "7c5a1c54ebbf67d438ac4d6e23a1adb54938f27b",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/tree/master/dataset"
                    }
                },
                "num_files": 10
            },
            {
                "type": "code",
                "name": "demo.py",
                "sha": "bda4606543d77eb35e9794199788ac1ed2ca1f91",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/blob/master/demo.py"
                    }
                },
                "size": 5682
            },
            {
                "type": "code",
                "name": "deploy.py",
                "sha": "58e6813f4b9bc688f995ff0c6558c9675998bd3d",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/blob/master/deploy.py"
                    }
                },
                "size": 2261
            },
            {
                "type": "code",
                "name": "detect",
                "sha": "bd35d35ce054124c7ad0d42d32344c401e531280",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/tree/master/detect"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "docker",
                "sha": "bf4ea005f883cf8b3bbe01ed7be4922ba11582dc",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/tree/master/docker"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "evaluate.py",
                "sha": "912eee6b979ac6287e7e751f9bac96bdc6a1cfed",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/blob/master/evaluate.py"
                    }
                },
                "size": 4901
            },
            {
                "type": "code",
                "name": "evaluate",
                "sha": "54ec91cd285a692f758557e987b87c8bc2ba632b",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/tree/master/evaluate"
                    }
                },
                "num_files": 5
            },
            {
                "type": "code",
                "name": "model",
                "sha": "749ba241ce3c3d1c01c3c2094851b853e67e3ddd",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/tree/master/model"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "scripts",
                "sha": "b8d2a2bf66ae140d1356e1b89f3afa70dd684766",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/tree/master/scripts"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "symbol",
                "sha": "d881f9a56f5754c15ae9f39d1955d638c204abe6",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/tree/master/symbol"
                    }
                },
                "num_files": 12
            },
            {
                "type": "code",
                "name": "tools",
                "sha": "b996d6b8a38e5295809deef133a5011b3b174556",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/tree/master/tools"
                    }
                },
                "num_files": 9
            },
            {
                "type": "code",
                "name": "train.py",
                "sha": "f2bb46567b329d11c50a9de5d1583072d4c457ff",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/blob/master/train.py"
                    }
                },
                "size": 8678
            },
            {
                "type": "code",
                "name": "train",
                "sha": "adede40cc0af1d12cec62e786053c7fd8088ef31",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/zhreshold/mxnet-ssd/tree/master/train"
                    }
                },
                "num_files": 3
            }
        ]
    },
    "authors": [
        {
            "name": "Joshua Z. Zhang",
            "github_id": "zhreshold"
        },
        {
            "name": "David Solomon",
            "email": "solomond78@gmail.com",
            "github_id": "davsol"
        },
        {
            "name": "Kenta Kubo",
            "github_id": "kkk669"
        },
        {
            "name": "Andrey Dudin",
            "email": "dudin.andrey@gmail.com",
            "github_id": "Tri0L"
        },
        {
            "name": "Artem Vasenin",
            "email": "vasart169@gmail.com",
            "github_id": "Rizhiy"
        },
        {
            "name": "BunnyShan",
            "github_id": "BunnyShan"
        },
        {
            "name": "Tony Zhao",
            "github_id": "touchdown"
        }
    ],
    "tags": [
        "object-detection"
    ],
    "description": "MXNet port of SSD: Single Shot MultiBox Object Detector.  Reimplementation of https://github.com/weiliu89/caffe/tree/ssd",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/zhreshold/mxnet-ssd",
            "stars": 765,
            "issues": true,
            "readme": "# SSD: Single Shot MultiBox Object Detector\n\nSSD is an unified framework for object detection with a single network.\n\nYou can use the code to train/evaluate/test for object detection task.\n\n### Disclaimer\nThis is a re-implementation of original SSD which is based on caffe. The official\nrepository is available [here](https://github.com/weiliu89/caffe/tree/ssd).\nThe arXiv paper is available [here](http://arxiv.org/abs/1512.02325).\n\nThis example is intended for reproducing the nice detector while fully utilize the\nremarkable traits of MXNet.\n* The model is fully compatible with caffe version.\n* Model [converter](#convert-caffemodel) from caffe is available now!\n* The result is almost identical to the original version. However, due to different implementation details, the results might differ slightly.\n\n### What's new\n* **This repo is now deprecated, I am migrating to the latest [Gluon-CV](https://github.com/dmlc/gluon-cv) which is more user friendly and has a lot more algorithms in development. This repo will not receive active development, however, you can continue use it with the mxnet 1.1.0(probably 1.2.0).**\n* Now this repo is internally synchronized up to data with offical mxnet backend. `pip install mxnet` will work for this repo as well in most cases.\n* MobileNet pretrained model now provided.\n* Added multiple trained models.\n* Added a much simpler way to compose network from mainstream classification networks (resnet, inception...) and [Guide](symbol/README.md).\n* Update to the latest version according to caffe version, with 5% mAP increase.\n* Use C++ record iterator based on back-end multi-thread engine to achieve huge speed up on multi-gpu environments.\n* Monitor validation mAP during training.\n* More network symbols under development and test.\n* Extra operators are now in `mxnet/src/operator/contrib`, symbols are modified. Please use [Release-v0.2-beta](https://github.com/zhreshold/mxnet-ssd/releases/tag/v0.2-beta) for old models.\n* added Docker support for this repository, prebuilt & including all packages and dependencies. (linux only)\n* added tensorboard support, allowing a more convenient way of research. (linux only)\n\n### Demo results\n![demo1](https://cloud.githubusercontent.com/assets/3307514/19171057/8e1a0cc4-8be0-11e6-9d8f-088c25353b40.png)\n![demo2](https://cloud.githubusercontent.com/assets/3307514/19171063/91ec2792-8be0-11e6-983c-773bd6868fa8.png)\n![demo3](https://cloud.githubusercontent.com/assets/3307514/19171086/a9346842-8be0-11e6-8011-c17716b22ad3.png)\n\n### mAP\n|        Model          | Training data    | Test data |  mAP | Note |\n|:-----------------:|:----------------:|:---------:|:----:|:-----|\n| [VGG16_reduced 300x300](https://github.com/zhreshold/mxnet-ssd/releases/download/v0.5-beta/vgg16_ssd_300_voc0712_trainval.zip) | VOC07+12 trainval| VOC07 test| 77.8| fast |\n| [VGG16_reduced 512x512](https://github.com/zhreshold/mxnet-ssd/releases/download/v0.5-beta/vgg16_ssd_512_voc0712_trainval.zip) | VOC07+12 trainval | VOC07 test| 79.9| slow |\n| [Inception-v3 512x512](https://github.com/zhreshold/mxnet-ssd/releases/download/v0.7-alpha/ssd_inceptionv3_512_voc0712trainval.zip) | VOC07+12 trainval| VOC07 test| 78.9 | fastest |\n| [Resnet-50 512x512](https://github.com/zhreshold/mxnet-ssd/releases/download/v0.7-alpha/ssd_resnet50_512_voc0712trainval.zip) | VOC07+12 trainval| VOC07 test| 79.1 | fast |\n| [MobileNet 512x512](https://github.com/zhreshold/mxnet-ssd/releases/download/v0.7-alpha/mobilenet-ssd-512.zip) | VOC07+12 trainval| VOC07 test| 72.5 | super fast |\n| [MobileNet 608x608](https://github.com/zhreshold/mxnet-ssd/releases/download/v0.7-alpha/mobilenet-ssd-608.zip) | VOC07+12 trainval| VOC07 test| 74.7 | super fast |\n\n\n*More to be added*\n\n### Speed\n|         Model         |   GPU            | CUDNN | Batch-size | FPS* |\n|:---------------------:|:----------------:|:-----:|:----------:|:----:|\n| VGG16_reduced 300x300 | TITAN X(Maxwell) | v5.1  |     16     | 95   |\n| VGG16_reduced 300x300 | TITAN X(Maxwell) | v5.1  |     8      | 95   |\n| VGG16_reduced 300x300 | TITAN X(Maxwell) | v5.1  |     1      | 64   |\n| VGG16_reduced 300x300 | TITAN X(Maxwell) |  N/A  |     8      | 36   |\n| VGG16_reduced 300x300 | TITAN X(Maxwell) |  N/A  |     1      | 28   |\n\n*Forward time only, data loading and drawing excluded.*\n\n### Getting started\n* Option #1 - install using 'Docker'. if you are not familiar with this technology, there is a 'Docker' section below.\nyou can get the latest image:\n```\ndocker pull daviddocker78/mxnet-ssd:gpu_0.12.0_cuda9\n```\n* You will need python modules: `cv2`, `matplotlib` and `numpy`.\nIf you use mxnet-python api, you probably have already got them.\nYou can install them via pip or package manegers, such as `apt-get`:\n```\nsudo apt-get install python-opencv python-matplotlib python-numpy\n```\n* Clone this repo:\n```\n# if you don't have git, install it via apt or homebrew/yum based on your system\nsudo apt-get install git\n# cd where you would like to clone this repo\ncd ~\ngit clone --recursive https://github.com/zhreshold/mxnet-ssd.git\n# make sure you clone this with --recursive\n# if not done correctly or you are using downloaded repo, pull them all via:\n# git submodule update --recursive --init\ncd mxnet-ssd/mxnet\n```\n* (Skip this step if you have offcial MXNet installed.) Build MXNet: `cd /path/to/mxnet-ssd/mxnet`. Follow the official instructions [here](http://mxnet.io/get_started/install.html).\n```\n# for Ubuntu/Debian\ncp make/config.mk ./config.mk\n# modify it if necessary\n```\nRemember to enable CUDA if you want to be able to train, since CPU training is\ninsanely slow. Using CUDNN is optional, but highly recommanded.\n\n### Try the demo\n* Download the pretrained model: [`ssd_resnet50_0712.zip`](https://github.com/zhreshold/mxnet-ssd/releases/download/v0.6/resnet50_ssd_512_voc0712_trainval.zip), and extract to `model/` directory.\n* Run\n```\n# cd /path/to/mxnet-ssd\npython demo.py --gpu 0\n# play with examples:\npython demo.py --epoch 0 --images ./data/demo/dog.jpg --thresh 0.5\npython demo.py --cpu --network resnet50 --data-shape 512\n# wait for library to load for the first time\n```\n* Check `python demo.py --help` for more options.\n\n### Train the model\nThis example only covers training on Pascal VOC dataset. Other datasets should\nbe easily supported by adding subclass derived from class `Imdb` in `dataset/imdb.py`.\nSee example of `dataset/pascal_voc.py` for details.\n* Download the converted pretrained `vgg16_reduced` model [here](https://github.com/zhreshold/mxnet-ssd/releases/download/v0.2-beta/vgg16_reduced.zip), unzip `.param` and `.json` files\ninto `model/` directory by default.\n* Download the PASCAL VOC dataset, skip this step if you already have one.\n```\ncd /path/to/where_you_store_datasets/\nwget http://host.robots.ox.ac.uk/pascal/VOC/voc2012/VOCtrainval_11-May-2012.tar\nwget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtrainval_06-Nov-2007.tar\nwget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtest_06-Nov-2007.tar\n# Extract the data.\ntar -xvf VOCtrainval_11-May-2012.tar\ntar -xvf VOCtrainval_06-Nov-2007.tar\ntar -xvf VOCtest_06-Nov-2007.tar\n```\n* We are going to use `trainval` set in VOC2007/2012 as a common strategy.\nThe suggested directory structure is to store `VOC2007` and `VOC2012` directories\nin the same `VOCdevkit` folder.\n* Then link `VOCdevkit` folder to `data/VOCdevkit` by default:\n```\nln -s /path/to/VOCdevkit /path/to/this_example/data/VOCdevkit\n```\nUse hard link instead of copy could save us a bit disk space.\n* Create packed binary file for faster training:\n```\n# cd /path/to/mxnet-ssd\nbash tools/prepare_pascal.sh\n# or if you are using windows\npython tools/prepare_dataset.py --dataset pascal --year 2007,2012 --set trainval --target ./data/train.lst\npython tools/prepare_dataset.py --dataset pascal --year 2007 --set test --target ./data/val.lst --shuffle False\n```\n* Start training:\n```\npython train.py\n```\n* By default, this example will use `batch-size=32` and `learning_rate=0.004`.\nYou might need to change the parameters a bit if you have different configurations.\nCheck `python train.py --help` for more training options. For example, if you have 4 GPUs, use:\n```\n# note that a perfect training parameter set is yet to be discovered for multi-gpu\npython train.py --gpus 0,1,2,3 --batch-size 128 --lr 0.001\n```\n* Memory usage: MXNet is very memory efficient, training on `VGG16_reduced` model with `batch-size` 32 takes around 4684MB without CUDNN(conv1_x and conv2_x fixed).\n\n### Evalute trained model\nUse:\n```\n# cd /path/to/mxnet-ssd\npython evaluate.py --gpus 0,1 --batch-size 128 --epoch 0\n```\n### Convert model to deploy mode\nThis simply removes all loss layers, and attach a layer for merging results and non-maximum suppression.\nUseful when loading python symbol is not available.\n```\n# cd /path/to/mxnet-ssd\npython deploy.py --num-class 20\n# then you can run demo with new model without loading python symbol\npython demo.py --prefix model/ssd_300_deploy --epoch 0 --deploy\n```\n\n### Convert caffemodel\nConverter from caffe is available at `/path/to/mxnet-ssd/tools/caffe_converter`\n\nThis is specifically modified to handle custom layer in caffe-ssd. Usage:\n```\ncd /path/to/mxnet-ssd/tools/caffe_converter\nmake\npython convert_model.py deploy.prototxt name_of_pretrained_caffe_model.caffemodel ssd_converted\n# you will use this model in deploy mode without loading from python symbol\npython demo.py --prefix ssd_converted --epoch 1 --deploy\n```\nThere is no guarantee that conversion will always work, but at least it's good for now.\n\n### Legacy models\nSince the new interface for composing network is introduced, the old models have inconsistent names for weights.\nYou can still load the previous model by rename the symbol to `legacy_xxx.py`\nand call with `python train/demo.py --network legacy_xxx `\nFor example:\n```\npython demo.py --network 'legacy_vgg16_ssd_300.py' --prefix model/ssd_300 --epoch 0\n```\n\n### Docker \nFirst make sure [docker](https://docs.docker.com/engine/installation/) is\ninstalled. The docker plugin\n[nvidia-docker](https://github.com/NVIDIA/nvidia-docker) is required to run on\nNvidia GPUs.\n\n* pre-built docker images are available at https://hub.docker.com/r/daviddocker78/mxnet-ssd/\nto download a pre-built image, run:\n```\ndocker pull daviddocker78/mxnet-ssd:gpu_0.12.0_cuda9\n```\nOtherwise, if you wish to build it yourself, you have the Dockerfiles available in this repo, under the 'docker' folder.\n* to run a container instance:\n```\nnvidia-docker run -it --rm myImageName:tag\n```\nnow you can execute commands the same way as you would, if you'd install mxnet on your own computer.\nfor more information, see the [Guide](docker/README.md).\n\n### Tensorboard\n* There has been some great effort to bring tensorboard to mxnet.\nIf you chose to work with dockers, you have it installed in the pre-built image you've downloaded. otherwise, follow [here](https://github.com/dmlc/tensorboard) for installation steps.\n* To save training loss graphs, validation AP per class, and validation ROC graphs to tensorboard while training, you can specify:\n```\npython train.py --gpus 0,1,2,3 --batch-size 128 --lr 0.001 --tensorboard True\n```\n* To save also the distributions of layers (actually, the variance of them), you can specify:\n```\npython train.py --gpus 0,1,2,3 --batch-size 128 --lr 0.001 --tensorboard True --monitor 40\n```\n* Visualization with Docker: the UI of tensorboard has changed over time. to get the best experience, download the new tensorflow docker-image:\n```\n# download the built image from Dockerhub\ndocker pull tensorflow/tensorflow:1.4.0-devel-gpu\n# run a container and open a port using '-p' flag. \n# attach a volume from where you stored your logs, to a directory inside the container\nnvidia-docker run -it --rm -p 0.0.0.0:6006:6006 -v /my/full/experiment/path:/res tensorflow/tensorflow:1.4.0-devel-gpu\ncd /res\ntensorboard --logdir=.\n```\nTo launch tensorboard without docker, simply run the last command\nNow tensorboard is loading the tensorEvents of your experiment. open your browser under '0.0.0.0:6006' and you will have tensorboard!\n\n### Tensorboard visualizations\n![loss](https://user-images.githubusercontent.com/12379769/32689844-5e26ca0c-c6f4-11e7-9a09-a63da1a53b43.PNG)\n![AP](https://user-images.githubusercontent.com/12379769/32689857-89aa967c-c6f4-11e7-8c2b-6ebce88467b4.PNG)\n![ROC](https://user-images.githubusercontent.com/12379769/32689860-ada24e44-c6f4-11e7-99b7-75c78db4025d.PNG)\n\n",
            "readme_url": "https://github.com/zhreshold/mxnet-ssd",
            "frameworks": [
                "Caffe",
                "MXNet"
            ]
        }
    ],
    "references": [
        {
            "title": "SSD: Single Shot MultiBox Detector",
            "arxiv": "1512.02325",
            "year": 2015,
            "url": "http://arxiv.org/abs/1512.02325v5",
            "abstract": "We present a method for detecting objects in images using a single deep\nneural network. Our approach, named SSD, discretizes the output space of\nbounding boxes into a set of default boxes over different aspect ratios and\nscales per feature map location. At prediction time, the network generates\nscores for the presence of each object category in each default box and\nproduces adjustments to the box to better match the object shape. Additionally,\nthe network combines predictions from multiple feature maps with different\nresolutions to naturally handle objects of various sizes. Our SSD model is\nsimple relative to methods that require object proposals because it completely\neliminates proposal generation and subsequent pixel or feature resampling stage\nand encapsulates all computation in a single network. This makes SSD easy to\ntrain and straightforward to integrate into systems that require a detection\ncomponent. Experimental results on the PASCAL VOC, MS COCO, and ILSVRC datasets\nconfirm that SSD has comparable accuracy to methods that utilize an additional\nobject proposal step and is much faster, while providing a unified framework\nfor both training and inference. Compared to other single stage methods, SSD\nhas much better accuracy, even with a smaller input image size. For $300\\times\n300$ input, SSD achieves 72.1% mAP on VOC2007 test at 58 FPS on a Nvidia Titan\nX and for $500\\times 500$ input, SSD achieves 75.1% mAP, outperforming a\ncomparable state of the art Faster R-CNN model. Code is available at\nhttps://github.com/weiliu89/caffe/tree/ssd .",
            "authors": [
                "Wei Liu",
                "Dragomir Anguelov",
                "Dumitru Erhan",
                "Christian Szegedy",
                "Scott Reed",
                "Cheng-Yang Fu",
                "Alexander C. Berg"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "IMDb"
            },
            {
                "name": "COCO"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9998226888929816,
        "task": "Object Detection",
        "task_prob": 0.9874587634196216
    }
}