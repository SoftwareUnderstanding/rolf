{
    "visibility": {
        "visibility": "public"
    },
    "name": "Deep Reinforcement Learning in Pytorch",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "meg965",
                "owner_type": "User",
                "name": "pytorch-rl",
                "url": "https://github.com/meg965/pytorch-rl",
                "stars": 2,
                "pushed_at": "2018-09-09 12:06:09+00:00",
                "created_at": "2018-09-09 12:04:09+00:00",
                "language": "Python",
                "frameworks": [
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": ".DS_Store",
                "sha": "f29f883d7ec37386c016d6befa76a7ff32d60e08",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/blob/master/.DS_Store"
                    }
                },
                "size": 10244
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "f7275bbbd035b827023cbae18954c0703b200c34",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/blob/master/.gitignore"
                    }
                },
                "size": 6
            },
            {
                "type": "code",
                "name": ".idea",
                "sha": "56c5feefc6b28036a506ad3a367ad8e074d9f65d",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/tree/master/.idea"
                    }
                },
                "num_files": 5
            },
            {
                "type": "code",
                "name": "Distributions",
                "sha": "74e9b8abb8a0843be8ef6a88e648669b16f2d147",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/tree/master/Distributions"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "Environments",
                "sha": "3ebefeeb47095c13abf9680838d6295478289d3b",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/tree/master/Environments"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "Layers",
                "sha": "ea4afb1c5764f7eba42691e8fcac7ca22472de0e",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/tree/master/Layers"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "MUJOCO_LOG.TXT",
                "sha": "935d0b8f5be66cc28dc01285675e4f57d2fb378e",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/blob/master/MUJOCO_LOG.TXT"
                    }
                },
                "size": 702
            },
            {
                "type": "code",
                "name": "Memory",
                "sha": "98afc80db08dd24b27e9de7b73ca01a0b077adc2",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/tree/master/Memory"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "Training",
                "sha": "569725922a2691720b523b576ef0ebe827004261",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/tree/master/Training"
                    }
                },
                "num_files": 103
            },
            {
                "type": "code",
                "name": "Utils",
                "sha": "9da9e559e22367da0e9f602da935c5da63005869",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/tree/master/Utils"
                    }
                },
                "num_files": 7
            },
            {
                "type": "code",
                "name": "assets",
                "sha": "c4c2ff621017763362aaf214df7c31a74313c3a3",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/tree/master/assets"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "dist",
                "sha": "12d24e42f7790c8c7ea0a98fbc1ef83cf8761b0e",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/tree/master/dist"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "distributed",
                "sha": "f8e654b43fe416700768ee8e24e355bfaf48972a",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/tree/master/distributed"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "models",
                "sha": "0978df8186c62b3c19270e4d6bc23722de9963ba",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/tree/master/models"
                    }
                },
                "num_files": 19
            },
            {
                "type": "code",
                "name": "setup.py",
                "sha": "43d92b7011604a403e192d1f57da52f7a58d4c43",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/blob/master/setup.py"
                    }
                },
                "size": 534
            },
            {
                "type": "code",
                "name": "train_ddpg.py",
                "sha": "5d21e166ea749134cb142799514e03402c765522",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/blob/master/train_ddpg.py"
                    }
                },
                "size": 2510
            },
            {
                "type": "code",
                "name": "train_dqn.py",
                "sha": "7417052408a7042aedb465f7880e73effa57176f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/blob/master/train_dqn.py"
                    }
                },
                "size": 8145
            },
            {
                "type": "code",
                "name": "train_infogan.py",
                "sha": "a37ddaedc275a92007cc4d09482159c142717fd7",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/meg965/pytorch-rl/blob/master/train_infogan.py"
                    }
                },
                "size": 3294
            }
        ]
    },
    "authors": [
        {
            "name": "meg965",
            "github_id": "meg965"
        }
    ],
    "tags": [],
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/meg965/pytorch-rl",
            "stars": 2,
            "issues": true,
            "readme": "# Deep Reinforcement Learning in Pytorch\n<img width=\"160px\" height=\"22px\" href=\"https://github.com/pytorch/pytorch\" src=\"https://pp.userapi.com/c847120/v847120960/82b4/xGBK9pXAkw8.jpg\">\n\n\n<table>\n  <tr>\n    <td><img src=\"/assets/r_her.gif?raw=true\" width=\"200\"></td>\n    <td><img src=\"/assets/goal-3.png?raw=true\" width=\"200\"></td>\n    <td><img src=\"/assets/virtual-goal.png?raw=true\" width=\"200\"></td>\n  </tr>\n</table>\n\nThis repository contains all standard model-free and model-based(coming) RL algorithms in Pytorch. (May also contain some research ideas I am working on currently)\n\n# What is it?\npytorch-rl implements some state-of-the art deep reinforcement learning algorithms in Pytorch, especially those concerned with continuous action spaces. You can train your algorithm efficiently either on CPU or GPU. Furthermore, pytorch-rl works with OpenAI Gym out of the box. This means that evaluating and playing around with different algorithms is easy. Of course you can extend pytorch-rl according to your own needs.\nTL:DR : pytorch-rl makes it really easy to run state-of-the-art deep reinforcement learning algorithms.\n\n# Installation\n\nInstall Pytorch-rl from Pypi (recommended):\n\npip install pytorch-policy\n\n# Dependencies\n1. Pytorch\n2. Gym (OpenAI)\n3. mujoco-py (For the physics simulation and the robotics env in gym)\n4. Pybullet (Coming Soon)\n5. MPI (Only supported with mpi backend Pytorch installation)\n6. Tensorboardx (https://github.com/lanpa/tensorboardX)\n\n# RL algorithms\n1. DQN (with Double Q learning)\n2. DDPG \n3. DDPG with HER (For the OpenAI Fetch Environments)\n4. Heirarchical Reinforcement Learning\n5. Prioritized Experience Replay + DDPG\n6. DDPG with Prioritized Hindsight experience replay (Research)\n7. Neural Map with A3C (Coming Soon)\n8. Rainbow DQN (Coming Soon)\n9. PPO (https://github.com/ikostrikov/pytorch-a2c-ppo-acktr)\n10. HER with self attention for goal substitution (Research)\n11. A3C (Coming Soon)\n12. ACER (Coming Soon)\n13. DARLA\n14. TDM\n15. World Models\n16. Soft Actor-Critic\n\n# Environments\n1. Breakout \n2. Pong (coming soon)\n3. Hand Manipulation Robotic Task\n4. Fetch-Reach Robotic Task\n5. Hand-Reach Robotic Task \n6. Block Manipulation Robotic Task\n7. Montezuma's Revenge (Current Research)\n8. Pitfall\n9. Gravitar\n10. CarRacing\n11. Super Mario Bros (Follow instructions to install gym-retro https://github.com/openai/retro)\n12. OpenSim Prosthetics Nips Challenge (https://www.crowdai.org/challenges/nips-2018-ai-for-prosthetics-challenge)\n\n# Environment Modelling (For exploration and domain adaptation)\n\nMultiple GAN training tricks have been used because of the instability in training the generators and discriminators.\nPlease refer to https://github.com/soumith/ganhacks for more information.\n\nEven after using the tricks, it was really hard to train a GAN to convergence. \nHowever, after using Spectral Normalization (https://arxiv.org/abs/1802.05957) the infogan was trained to convergence.\n\nFor image to image translation tasks with GANs and for VAEs in general, training with Skip Connection really helps the training.\n\n1. beta-VAE\n2. InfoGAN\n3. CVAE-GAN\n4. Flow based generative models (Research)\n5. SAGAN\n6. Sequential Attend, Infer, Repeat\n7. Curiosity driven exploration\n6. Parameter Space Noise for Exploration\n7. Noisy Network\n\n# References\n1. Playing Atari with Deep Reinforcement Learning, Mnih et al., 2013\n2. Human-level control through deep reinforcement learning, Mnih et al., 2015\n3. Deep Reinforcement Learning with Double Q-learning, van Hasselt et al., 2015\n4. Continuous control with deep reinforcement learning, Lillicrap et al., 2015\n5. CVAE-GAN: Fine-Grained Image Generation through Asymmetric Training, Bao et al., 2017\n6. beta-VAE: Learning Basic Visual Concepts with a Constrained Variational Framework, Higgins et al., 2017\n7. Hindsight Experience Replay, Andrychowicz et al., 2017\n8. InfoGAN: Interpretable Representation Learning by Information Maximizing Generative Adversarial Nets, Chen et al., 2016\n9. World Models, Ha et al., 2018\n10. Spectral Normalization for Generative Adversarial Networks, Miyato et al., 2018\n11. Self-Attention Generative Adversarial Networks, Zhang et al., 2018\n12. Curiosity-driven Exploration by Self-supervised Prediction, Pathak et al., 2017\n13. Soft Actor-Critic: Off-Policy Maximum Entropy Deep Reinforcement Learning with a Stochastic Actor, Haarnoja et al., 2018\n14. Parameter Space Noise for Exploration, Plappert et al., 2018\n15. Noisy Network for Exploration, Fortunato et al., 2018\n16. Proximal Policy Optimization Algorithms, Schulman et al., 2017\n17. Unsupervised Real-Time Control through Variational Empowerment, Karl et al., 2017\n18. Mutual Information Neural Estimation, Belghazi et al., 2018\n",
            "readme_url": "https://github.com/meg965/pytorch-rl",
            "frameworks": [
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "Spectral Normalization for Generative Adversarial Networks",
            "arxiv": "1802.05957",
            "year": 2018,
            "url": "http://arxiv.org/abs/1802.05957v1",
            "abstract": "One of the challenges in the study of generative adversarial networks is the\ninstability of its training. In this paper, we propose a novel weight\nnormalization technique called spectral normalization to stabilize the training\nof the discriminator. Our new normalization technique is computationally light\nand easy to incorporate into existing implementations. We tested the efficacy\nof spectral normalization on CIFAR10, STL-10, and ILSVRC2012 dataset, and we\nexperimentally confirmed that spectrally normalized GANs (SN-GANs) is capable\nof generating images of better or equal quality relative to the previous\ntraining stabilization techniques.",
            "authors": [
                "Takeru Miyato",
                "Toshiki Kataoka",
                "Masanori Koyama",
                "Yuichi Yoshida"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "OpenAI Gym"
            },
            {
                "name": "STL-10"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9981317413983093,
        "task": "Image Generation",
        "task_prob": 0.9894229668934985
    }
}