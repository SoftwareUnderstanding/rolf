{
    "visibility": {
        "visibility": "public",
        "license": "Other"
    },
    "name": "Unity-OpenPose-Edutable",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "jreisam",
                "owner_type": "User",
                "name": "Unity-OpenPose-Edutable",
                "url": "https://github.com/jreisam/Unity-OpenPose-Edutable",
                "stars": 4,
                "pushed_at": "2020-04-07 02:15:28+00:00",
                "created_at": "2020-03-05 17:54:14+00:00",
                "language": "C#",
                "description": "Projeto que usa input de uma c\u00e2mera normal RGB e processa detec\u00e7\u00f5es via API OpenPose e passa para o frontEnd via Socket.io. ",
                "license": "Other",
                "frameworks": []
            },
            {
                "type": "code",
                "name": ".github",
                "sha": "dc9049678766e079be2101142947468de14a8aef",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/jreisam/Unity-OpenPose-Edutable/tree/master/.github"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "bdff73b79e82bb475cac58adc28790a86a297c2a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/jreisam/Unity-OpenPose-Edutable/blob/master/.gitignore"
                    }
                },
                "size": 34
            },
            {
                "type": "code",
                "name": "3rdparty",
                "sha": "4870a2a58560dbe80ee0fbbd9289b803d942d66d",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/jreisam/Unity-OpenPose-Edutable/tree/master/3rdparty"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "71739cad8355a58f3f64aa31e8863bf1416d7ac8",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/jreisam/Unity-OpenPose-Edutable/blob/master/LICENSE"
                    }
                },
                "size": 9686
            },
            {
                "type": "code",
                "name": "OpenPosePlugin",
                "sha": "a45928764cf818bea61c06202b691b19d2709afa",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/jreisam/Unity-OpenPose-Edutable/tree/master/OpenPosePlugin"
                    }
                },
                "num_files": 8
            },
            {
                "type": "code",
                "name": "doc",
                "sha": "fa382b765eb4248a41cffa034a21f756bd5c0658",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/jreisam/Unity-OpenPose-Edutable/tree/master/doc"
                    }
                },
                "num_files": 8
            },
            {
                "type": "code",
                "name": "getModels.bat",
                "sha": "ef6b06826a523c259be41ea3ba0e9859a34422f4",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/jreisam/Unity-OpenPose-Edutable/blob/master/getModels.bat"
                    }
                },
                "size": 1759
            },
            {
                "type": "code",
                "name": "getPlugins.bat",
                "sha": "feeba8d82443260716dbe1273b21a4bc2c364f86",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/jreisam/Unity-OpenPose-Edutable/blob/master/getPlugins.bat"
                    }
                },
                "size": 1147
            },
            {
                "type": "code",
                "name": "imageDB.unitypackage",
                "sha": "3b6471209693e6067fc9438592bb0b886ef7a10f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/jreisam/Unity-OpenPose-Edutable/blob/master/imageDB.unitypackage"
                    }
                },
                "size": 955326
            },
            {
                "type": "code",
                "name": "testBinary.bat",
                "sha": "0169f618ad237c7c6cd8610166365af568d3a52f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/jreisam/Unity-OpenPose-Edutable/blob/master/testBinary.bat"
                    }
                },
                "size": 937
            },
            {
                "type": "code",
                "name": "xcopy_exclude.txt",
                "sha": "5a12c2a008b3a388c34752ddfdeaddf00bb0f065",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/jreisam/Unity-OpenPose-Edutable/blob/master/xcopy_exclude.txt"
                    }
                },
                "size": 4
            }
        ]
    },
    "authors": [
        {
            "name": "jreisam",
            "github_id": "jreisam"
        }
    ],
    "tags": [],
    "description": "Projeto que usa input de uma c\u00e2mera normal RGB e processa detec\u00e7\u00f5es via API OpenPose e passa para o frontEnd via Socket.io. ",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/jreisam/Unity-OpenPose-Edutable",
            "stars": 4,
            "issues": true,
            "readme": "<div align=\"center\">\n    <img src=\".github/Logo_main_black.png\", width=\"300\">\n</div>\n\n-----------------\n\n**OpenPose Unity Plugin** is a **wrapper of the [OpenPose](https://github.com/CMU-Perceptual-Computing-Lab/openpose) library for Unity users**. It provides formatted OpenPose output and some examples. [OpenPose](https://github.com/CMU-Perceptual-Computing-Lab/openpose) is a real-time multi-person system able to jointly detect human body, hand, facial, and foot keypoints (in total 135 keypoints) on single images.\n\nThe OpenPose Unity Plugin project is **authored by [Tianyi Zhao](http://tianyizhao.com), [Gines Hidalgo](https://www.gineshidalgo.com/), and [Yaser Sheikh](http://www.cs.cmu.edu/~yaser/)**. Currently, it is being **maintained by [Tianyi Zhao](http://tianyizhao.com) and [Gines Hidalgo](https://www.gineshidalgo.com/)**.\n\n[**Demo/tutorial video**](https://youtu.be/Jrcak4n6PG4) of the working system.\n\n<p align=\"center\">\n    <img src=\"doc/media/main.png\", width=\"480\">\n    <br>\n    <sup><a href=\"http://tianyizhao.com\" target=\"_blank\">Tianyi Zhao</a> (left) and <a href=\"https://www.gineshidalgo.com\" target=\"_blank\">Gines Hidalgo</a> (right) testing the OpenPose Unity Plugin</sup>\n</p>\n\n\n\n## NOTICE\nThis is an alpha release, everything is subject to change. The plugin will finally be available in Unity Assets store in the future.\n\n\n\n## Contents\n1. [Results](#results)\n2. [Installation, Reinstallation and Uninstallation](#installation-reinstallation-and-uninstallation)\n3. [Citation](#citation)\n4. [License](#license)\n\n\n\n## Results\n### Body and Foot Estimation\n<p align=\"center\">\n    <img src=\"doc/media/body_foot.png\", width=\"360\">\n    <br>\n    <sup>Testing the OpenPose Unity Plugin for body and foot detection</sup>\n</p>\n\n### Body, Foot, Face, and Hands Estimation\n<p align=\"center\">\n    <img src=\"doc/media/hand_face.png\", width=\"360\">\n    <br>\n    <sup>Testing the OpenPose Unity Plugin for body, foot, face, and hand detection</sup>\n</p>\n\n\n\n## Installation, Reinstallation and Uninstallation\nFollow the steps in the installation documentation in [doc/installation.md](doc/installation.md).\n\n\n\n## Citation\nPlease cite these papers in your publications if it helps your research (the face keypoint detector was trained using the procedure described in [Simon et al. 2017] for hands):\n\n    @inproceedings{cao2018openpose,\n      author = {Zhe Cao and Gines Hidalgo and Tomas Simon and Shih-En Wei and Yaser Sheikh},\n      booktitle = {arXiv preprint arXiv:1812.08008},\n      title = {Open{P}ose: realtime multi-person 2{D} pose estimation using {P}art {A}ffinity {F}ields},\n      year = {2018}\n    }\n\n    @inproceedings{cao2017realtime,\n      author = {Zhe Cao and Tomas Simon and Shih-En Wei and Yaser Sheikh},\n      booktitle = {CVPR},\n      title = {Realtime Multi-Person 2D Pose Estimation using Part Affinity Fields},\n      year = {2017}\n    }\n\n    @inproceedings{simon2017hand,\n      author = {Tomas Simon and Hanbyul Joo and Iain Matthews and Yaser Sheikh},\n      booktitle = {CVPR},\n      title = {Hand Keypoint Detection in Single Images using Multiview Bootstrapping},\n      year = {2017}\n    }\n\n    @inproceedings{wei2016cpm,\n      author = {Shih-En Wei and Varun Ramakrishna and Takeo Kanade and Yaser Sheikh},\n      booktitle = {CVPR},\n      title = {Convolutional pose machines},\n      year = {2016}\n    }\n\nLinks to the papers:\n\n- [OpenPose: Realtime Multi-Person 2D Pose Estimation using Part Affinity Fields](https://arxiv.org/abs/1812.08008)\n- [Realtime Multi-Person 2D Pose Estimation using Part Affinity Fields](https://arxiv.org/abs/1611.08050)\n- [Hand Keypoint Detection in Single Images using Multiview Bootstrapping](https://arxiv.org/abs/1704.07809)\n- [Convolutional Pose Machines](https://arxiv.org/abs/1602.00134)\n\n\n\n## License\nOpenPose Unity Plugin is freely available for free non-commercial use, and may be redistributed under these conditions. Please, see the [license](LICENSE) for further details. Interested in a commercial license? Check this [FlintBox link](https://flintbox.com/public/project/47343/). For commercial queries, use the `Directly Contact Organization` section from the [FlintBox link](https://flintbox.com/public/project/47343/) and also send a copy of that message to [Yaser Sheikh](http://www.cs.cmu.edu/~yaser/).\n\n",
            "readme_url": "https://github.com/jreisam/Unity-OpenPose-Edutable",
            "frameworks": []
        }
    ],
    "references": [
        {
            "title": "Hand Keypoint Detection in Single Images using Multiview Bootstrapping",
            "arxiv": "1704.07809",
            "year": 2017,
            "url": "http://arxiv.org/abs/1704.07809v1",
            "abstract": "We present an approach that uses a multi-camera system to train fine-grained\ndetectors for keypoints that are prone to occlusion, such as the joints of a\nhand. We call this procedure multiview bootstrapping: first, an initial\nkeypoint detector is used to produce noisy labels in multiple views of the\nhand. The noisy detections are then triangulated in 3D using multiview geometry\nor marked as outliers. Finally, the reprojected triangulations are used as new\nlabeled training data to improve the detector. We repeat this process,\ngenerating more labeled data in each iteration. We derive a result analytically\nrelating the minimum number of views to achieve target true and false positive\nrates for a given detector. The method is used to train a hand keypoint\ndetector for single images. The resulting keypoint detector runs in realtime on\nRGB images and has accuracy comparable to methods that use depth sensors. The\nsingle view detector, triangulated over multiple views, enables 3D markerless\nhand motion capture with complex object interactions.",
            "authors": [
                "Tomas Simon",
                "Hanbyul Joo",
                "Iain Matthews",
                "Yaser Sheikh"
            ]
        },
        {
            "title": "Convolutional Pose Machines",
            "arxiv": "1602.00134",
            "year": 2016,
            "url": "http://arxiv.org/abs/1602.00134v4",
            "abstract": "Pose Machines provide a sequential prediction framework for learning rich\nimplicit spatial models. In this work we show a systematic design for how\nconvolutional networks can be incorporated into the pose machine framework for\nlearning image features and image-dependent spatial models for the task of pose\nestimation. The contribution of this paper is to implicitly model long-range\ndependencies between variables in structured prediction tasks such as\narticulated pose estimation. We achieve this by designing a sequential\narchitecture composed of convolutional networks that directly operate on belief\nmaps from previous stages, producing increasingly refined estimates for part\nlocations, without the need for explicit graphical model-style inference. Our\napproach addresses the characteristic difficulty of vanishing gradients during\ntraining by providing a natural learning objective function that enforces\nintermediate supervision, thereby replenishing back-propagated gradients and\nconditioning the learning procedure. We demonstrate state-of-the-art\nperformance and outperform competing methods on standard benchmarks including\nthe MPII, LSP, and FLIC datasets.",
            "authors": [
                "Shih-En Wei",
                "Varun Ramakrishna",
                "Takeo Kanade",
                "Yaser Sheikh"
            ]
        },
        {
            "title": "OpenPose: Realtime Multi-Person 2D Pose Estimation using Part Affinity Fields",
            "arxiv": "1812.08008",
            "year": 2018,
            "url": "http://arxiv.org/abs/1812.08008v2",
            "abstract": "Realtime multi-person 2D pose estimation is a key component in enabling\nmachines to have an understanding of people in images and videos. In this work,\nwe present a realtime approach to detect the 2D pose of multiple people in an\nimage. The proposed method uses a nonparametric representation, which we refer\nto as Part Affinity Fields (PAFs), to learn to associate body parts with\nindividuals in the image. This bottom-up system achieves high accuracy and\nrealtime performance, regardless of the number of people in the image. In\nprevious work, PAFs and body part location estimation were refined\nsimultaneously across training stages. We demonstrate that a PAF-only\nrefinement rather than both PAF and body part location refinement results in a\nsubstantial increase in both runtime performance and accuracy. We also present\nthe first combined body and foot keypoint detector, based on an internal\nannotated foot dataset that we have publicly released. We show that the\ncombined detector not only reduces the inference time compared to running them\nsequentially, but also maintains the accuracy of each component individually.\nThis work has culminated in the release of OpenPose, the first open-source\nrealtime system for multi-person 2D pose detection, including body, foot, hand,\nand facial keypoints.",
            "authors": [
                "Zhe Cao",
                "Gines Hidalgo",
                "Tomas Simon",
                "Shih-En Wei",
                "Yaser Sheikh"
            ]
        },
        {
            "title": "Realtime Multi-Person 2D Pose Estimation using Part Affinity Fields",
            "arxiv": "1611.08050",
            "year": 2016,
            "url": "http://arxiv.org/abs/1611.08050v2",
            "abstract": "We present an approach to efficiently detect the 2D pose of multiple people\nin an image. The approach uses a nonparametric representation, which we refer\nto as Part Affinity Fields (PAFs), to learn to associate body parts with\nindividuals in the image. The architecture encodes global context, allowing a\ngreedy bottom-up parsing step that maintains high accuracy while achieving\nrealtime performance, irrespective of the number of people in the image. The\narchitecture is designed to jointly learn part locations and their association\nvia two branches of the same sequential prediction process. Our method placed\nfirst in the inaugural COCO 2016 keypoints challenge, and significantly exceeds\nthe previous state-of-the-art result on the MPII Multi-Person benchmark, both\nin performance and efficiency.",
            "authors": [
                "Zhe Cao",
                "Tomas Simon",
                "Shih-En Wei",
                "Yaser Sheikh"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9999905429718872,
        "task": "Pose Estimation",
        "task_prob": 0.9891013428608255
    },
    "training": {
        "datasets": [
            {
                "name": "OCCLUSION"
            },
            {
                "name": "MPII Multi-Person"
            },
            {
                "name": "COCO"
            }
        ]
    }
}