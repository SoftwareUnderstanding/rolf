{
    "visibility": {
        "visibility": "public",
        "license": "Apache License 2.0"
    },
    "name": "SPIRAL++",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "urw7rs",
                "owner_type": "User",
                "name": "spiralpp",
                "url": "https://github.com/urw7rs/spiralpp",
                "stars": 10,
                "pushed_at": "2022-03-08 10:22:12+00:00",
                "created_at": "2020-05-07 16:38:48+00:00",
                "language": "Python",
                "description": "A pytorch implementation of spiral++",
                "license": "Apache License 2.0",
                "frameworks": [
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": ".clang-format",
                "sha": "b03b407580a4dc90363b01243b6ef32457d1b4ab",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/blob/master/.clang-format"
                    }
                },
                "size": 4031
            },
            {
                "type": "code",
                "name": ".flake8",
                "sha": "edfbc8dd6257d3981d47a3b7115122f7267af21b",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/blob/master/.flake8"
                    }
                },
                "size": 158
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "fb4cc1a2eb3963c13d24b462e0379b1aabe8b54a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/blob/master/.gitignore"
                    }
                },
                "size": 1561
            },
            {
                "type": "code",
                "name": ".gitmodules",
                "sha": "f548a61fe128fe85d4dc56b3c0e2fc93f64f638c",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/blob/master/.gitmodules"
                    }
                },
                "size": 191
            },
            {
                "type": "code",
                "name": ".pre-commit-config.yaml",
                "sha": "b268b628d2ec325e7b842ee69e1f75f6c15b322e",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/blob/master/.pre-commit-config.yaml"
                    }
                },
                "size": 124
            },
            {
                "type": "code",
                "name": "CODE_OF_CONDUCT.md",
                "sha": "0f7ad8bfc173eac554f0b6ef7c684861e8014bbe",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/blob/master/CODE_OF_CONDUCT.md"
                    }
                },
                "size": 244
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "7a4a3ea2424c09fbe48d455aed1eaa94d9124835",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/blob/master/LICENSE"
                    }
                },
                "size": 11357
            },
            {
                "type": "code",
                "name": "demo.ipynb",
                "sha": "4503ca05e1194e8f09463b52418c14cc1034f7a6",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/blob/master/demo.ipynb"
                    }
                },
                "size": 10623
            },
            {
                "type": "code",
                "name": "libtorchbeast",
                "sha": "e067c5bd086d28822b74e868e64097b1ef3a8d45",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/tree/master/libtorchbeast"
                    }
                },
                "num_files": 6
            },
            {
                "type": "code",
                "name": "nest",
                "sha": "8820713038cce4838a18b31fff481103e31dfe4e",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/tree/master/nest"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "plot.ipynb",
                "sha": "c8f55c090a81e727b9f6279d1c922808658a08a1",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/blob/master/plot.ipynb"
                    }
                },
                "size": 3635
            },
            {
                "type": "code",
                "name": "pyproject.toml",
                "sha": "fb84b3a08c710276a307d2421a4300b24c18d43c",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/blob/master/pyproject.toml"
                    }
                },
                "size": 120
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "b7ea8db6b2638edc259e1612c25d4d34287af956",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/blob/master/requirements.txt"
                    }
                },
                "size": 291
            },
            {
                "type": "code",
                "name": "scripts",
                "sha": "5819ac4acee0151e79392b3363ef8c04f777e72e",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/tree/master/scripts"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "setup.py",
                "sha": "0961cf1ac7877a6ad0b41d186825cdd0d1cebe46",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/blob/master/setup.py"
                    }
                },
                "size": 3827
            },
            {
                "type": "code",
                "name": "tests",
                "sha": "7dc3effa56c39541b8734423c636bed90e095912",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/tree/master/tests"
                    }
                },
                "num_files": 15
            },
            {
                "type": "code",
                "name": "third_party",
                "sha": "9c30d858237a3fecc15df3fa7f9f516f12833140",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/tree/master/third_party"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "torchbeast",
                "sha": "b968f7483c9925f3e21778d34709eb35e3395ae6",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/tree/master/torchbeast"
                    }
                },
                "num_files": 6
            }
        ]
    },
    "trained_model": {
        "binaries": [
            {
                "type": "binary",
                "name": "Dockerfile",
                "sha": "547b2a070a6e7d071a802af9aa370915267c859f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/urw7rs/spiralpp/blob/master/Dockerfile"
                    }
                },
                "size": 3201
            }
        ]
    },
    "authors": [
        {
            "name": "Chanhyuk Jung",
            "email": "urw.7rs@icloud.com",
            "github_id": "urw7rs"
        },
        {
            "name": "Christian Pehle",
            "github_id": "cpehle"
        },
        {
            "name": "Denis Yarats",
            "github_id": "denisyarats"
        }
    ],
    "tags": [
        "reinforcement-learning",
        "gan",
        "deep-reinforcement-learning",
        "pytorch-implementation"
    ],
    "description": "A pytorch implementation of spiral++",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/urw7rs/spiralpp",
            "stars": 10,
            "issues": true,
            "readme": "# SPIRAL++\r\n\r\nA PyTorch implementation of [Unsupervised Doodling and Painting with Improved SPIRAL\r\nby Mellor, Park, Ganin et al.](https://arxiv.org/abs/1910.01007)\r\n\r\nFor further details, see https://learning-to-paint.github.io for paper with generation videos.\r\n\r\n### Installing\r\n\r\nThe easiest way to build and install all of PolyBeast's dependencies\r\nand run it is to use Docker:\r\n\r\n```shell\r\n$ docker build -t spiralpp .\r\n$ docker run --name spiralpp -it -p 8888:8888 spiralpp /bin/bash\r\n```\r\n\r\nor \r\n\r\n```shell\r\n$ docker run -it -p 8888:8888 urw7rs/spiralpp:latest /bin/bash\r\n```\r\n\r\nTo run PolyBeast directly on Linux, follow this guide.\r\n\r\n#### Linux\r\n\r\nCreate a new Conda environment, and install PolyBeast's requirements:\r\n\r\n```shell\r\n$ conda create -n spiralpp python=3.7\r\n$ conda activate spiralpp\r\n$ pip install -r requirements.txt\r\n```\r\n\r\nInstall spiral-envs\r\n\r\nInstall required packages:\r\n\r\n```shell\r\n$ apt-get install cmake pkg-config protobuf-compiler libjson-c-dev intltool\r\n$ pip install six setuptools numpy scipy gym\r\n```\r\n\r\n**WARNING:** Make sure that you have `cmake` **3.14** or later since we rely\r\non its capability to find `numpy` libraries.\r\n\r\nInstall cmake by running:\r\n```shell\r\n$ conda install cmake\r\n```\r\n\r\nFinally, run the following command to install the spiral-gym package itself:\r\n\r\n```shell\r\n$ git submodule update --init --recursive\r\n$ pip install -e spiral-envs/\r\n```\r\n\r\nYou will also need to obtain the brush files for the `libmypaint` environment\r\nto work properly. These can be found\r\n[here](https://github.com/mypaint/mypaint-brushes). For example, you can\r\nplace them in `third_party` folder like this:\r\n\r\n```shell\r\n$ wget -c https://github.com/mypaint/mypaint-brushes/archive/v1.3.0.tar.gz -O - | tar -xz -C third_party\r\n```\r\n\r\nFinally, the `Fluid Paint` environment depends on the shaders from the original\r\n`javascript` [implementation](https://github.com/dli/paint). You can obtain\r\nthem by running the following commands:\r\n\r\n```shell\r\n$ git clone https://github.com/dli/paint third_party/paint\r\n$ patch third_party/paint/shaders/setbristles.frag third_party/paint-setbristles.patch\r\n```\r\n\r\nPolyBeast requires installing PyTorch\r\n[from source](https://github.com/pytorch/pytorch#from-source).\r\n\r\nPolyBeast also requires gRPC, which can be installed by running:\r\n\r\n```shell\r\n$ conda install -c anaconda protobuf\r\n$ ./scripts/install_grpc.sh\r\n```\r\n\r\nCompile the C++ parts of PolyBeast:\r\n\r\n```\r\n$ pip install nest/\r\n$ export LD_LIBRARY_PATH=${CONDA_PREFIX:-\"$(dirname $(which conda))/../\"}/lib:${LD_LIBRARY_PATH}\r\n$ python setup.py build develop\r\n```\r\n\r\n### Running PolyBeast\r\n\r\nTo start both the environment servers and the learner process, run\r\n```shell\r\n$ python -m torchbeast.polybeast \\\r\n     --dataset celeba-hq \\\r\n     --env_type libmypaint \\\r\n     --canvas_width 64 \\\r\n     --use_pressure \\\r\n     --use_tca \\\r\n     --num_actors 64 \\\r\n     --total_steps 30000000 \\\r\n     --policy_learning_rate 0.0004 \\\r\n     --entropy_cost 0.01 \\\r\n     --batch_size 64 \\\r\n     --episode_length 40 \\\r\n     --xpid example\r\n```\r\n\r\nResults are logged to `~/logs/torchbeast/latest` and a checkpoint file is\r\nwritten to `~/logs/torchbeast/latest/model.tar`.\r\n\r\nThe environment servers can also be started separately:\r\n\r\n```shell\r\n$ python -m torchbeast.polybeast_env --num_actors 10\r\n```\r\n\r\nStart another terminal and run:\r\n\r\n```shell\r\n$ python -m torchbeast.polybeast --no_start_servers\r\n```\r\n\r\n### Testing trained models\r\n\r\nThe provided [jupyter notebook](notebooks/demo.ipynb) will load checkpoints at a specified path to draw a single sample.\r\n\r\nIf you're using docker run \r\n\r\n```shell\r\n$ jupyter notebook --ip 0.0.0.0 --no-browser --allow-root\r\n```\r\n\r\nmake sure you opened a port for the container.\r\n\r\n## Repository contents\r\n\r\n`libtorchbeast`: C++ library that allows efficient learner-actor\r\ncommunication via queueing and batching mechanisms. Some functions are\r\nexported to Python using pybind11. For PolyBeast only.\r\n\r\n`nest`: C++ library that allows to manipulate complex\r\nnested structures. Some functions are exported to Python using\r\npybind11.\r\n\r\n`third_party`: Collection of third-party dependencies as Git\r\nsubmodules. Includes [gRPC](https://grpc.io/).\r\n\r\n`torchbeast`: Contains `monobeast.py`, and `polybeast.py` and\r\n`polybeast_env.py`. (`monobeast.py` is currently unavailable)\r\n\r\n`spiral-envs`: [spiral-envs](https://github.com/urw7rs/spiral-envs/tree/f4deb68b867a5688eb597902b7086f6914c33901) is a libmypaint and fluidpaint based environments. ported to openai\r\ngym from [spiral](https://github.com/deepmind/spiral/tree/master/spiral/environments).\r\n\r\n## License\r\n\r\nspiralpp is released under the Apache 2.0 license.\r\n",
            "readme_url": "https://github.com/urw7rs/spiralpp",
            "frameworks": [
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "Unsupervised Doodling and Painting with Improved SPIRAL",
            "arxiv": "1910.01007",
            "year": 2019,
            "url": "http://arxiv.org/abs/1910.01007v1",
            "abstract": "We investigate using reinforcement learning agents as generative models of\nimages (extending arXiv:1804.01118). A generative agent controls a simulated\npainting environment, and is trained with rewards provided by a discriminator\nnetwork simultaneously trained to assess the realism of the agent's samples,\neither unconditional or reconstructions. Compared to prior work, we make a\nnumber of improvements to the architectures of the agents and discriminators\nthat lead to intriguing and at times surprising results. We find that when\nsufficiently constrained, generative agents can learn to produce images with a\ndegree of visual abstraction, despite having only ever seen real photographs\n(no human brush strokes). And given enough time with the painting environment,\nthey can produce images with considerable realism. These results show that,\nunder the right circumstances, some aspects of human drawing can emerge from\nsimulated embodiment, without the need for external supervision, imitation or\nsocial cues. Finally, we note the framework's potential for use in creative\napplications.",
            "authors": [
                "John F. J. Mellor",
                "Eunbyung Park",
                "Yaroslav Ganin",
                "Igor Babuschkin",
                "Tejas Kulkarni",
                "Dan Rosenbaum",
                "Andy Ballard",
                "Theophane Weber",
                "Oriol Vinyals",
                "S. M. Ali Eslami"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "CelebA"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.5347362285301773,
        "task": "Object Detection",
        "task_prob": 0.8255162159154803
    }
}