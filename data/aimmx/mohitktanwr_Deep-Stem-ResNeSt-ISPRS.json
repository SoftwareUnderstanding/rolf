{
    "visibility": {
        "visibility": "public",
        "license": "Apache License 2.0"
    },
    "name": "ResNeSt",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "mohitktanwr",
                "owner_type": "User",
                "name": "Deep-Stem-ResNeSt-ISPRS",
                "url": "https://github.com/mohitktanwr/Deep-Stem-ResNeSt-ISPRS",
                "stars": 0,
                "pushed_at": "2021-06-13 12:10:59+00:00",
                "created_at": "2021-06-13 11:59:06+00:00",
                "language": "Python",
                "license": "Apache License 2.0",
                "frameworks": [
                    "MXNet",
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": ".github",
                "sha": "91d6c13d077a6ff15b17c49fc6c669a75fc66d66",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohitktanwr/Deep-Stem-ResNeSt-ISPRS/tree/master/.github"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "0db19f23629364894b5a37ffafd4acfb36e7e79e",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohitktanwr/Deep-Stem-ResNeSt-ISPRS/blob/master/.gitignore"
                    }
                },
                "size": 1827
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "261eeb9e9f8b2b4b0d119366dda99c6fd7d35c64",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohitktanwr/Deep-Stem-ResNeSt-ISPRS/blob/master/LICENSE"
                    }
                },
                "size": 11357
            },
            {
                "type": "code",
                "name": "ablation.md",
                "sha": "125db4fe861e5b908ae3f552ee3af9fb39d61094",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohitktanwr/Deep-Stem-ResNeSt-ISPRS/blob/master/ablation.md"
                    }
                },
                "size": 1281
            },
            {
                "type": "code",
                "name": "configs",
                "sha": "9962e77b6d7520e10b8c778dc6d493ccdad7e3f3",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohitktanwr/Deep-Stem-ResNeSt-ISPRS/tree/master/configs"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "d2",
                "sha": "ebfb630c714f14d8611f92d1f0823af208d9fda2",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohitktanwr/Deep-Stem-ResNeSt-ISPRS/tree/master/d2"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "hubconf.py",
                "sha": "813c6e80da96cd694ce0dd2e24d7486c5d1277d6",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohitktanwr/Deep-Stem-ResNeSt-ISPRS/blob/master/hubconf.py"
                    }
                },
                "size": 403
            },
            {
                "type": "code",
                "name": "miscs",
                "sha": "84e813670f63ed6518f4058f896f9670a800ae7f",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohitktanwr/Deep-Stem-ResNeSt-ISPRS/tree/master/miscs"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "resnest",
                "sha": "19111eae5c9630e833b97cfe26dcf8ba1004ae7a",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohitktanwr/Deep-Stem-ResNeSt-ISPRS/tree/master/resnest"
                    }
                },
                "num_files": 5
            },
            {
                "type": "code",
                "name": "scripts",
                "sha": "c64cdad2338665b28b8f74214398d8aabe477012",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohitktanwr/Deep-Stem-ResNeSt-ISPRS/tree/master/scripts"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "setup.py",
                "sha": "654b3394f91d79e88d1cdebdad43b4699b4d9ce2",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohitktanwr/Deep-Stem-ResNeSt-ISPRS/blob/master/setup.py"
                    }
                },
                "size": 1702
            },
            {
                "type": "code",
                "name": "tests",
                "sha": "93b28009958b8b1155c4a68c550e8eba96ce25f0",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohitktanwr/Deep-Stem-ResNeSt-ISPRS/tree/master/tests"
                    }
                },
                "num_files": 3
            }
        ]
    },
    "authors": [
        {
            "name": "Hang Zhang",
            "email": "zhanghang@fb.com",
            "github_id": "zhanghang1989"
        },
        {
            "name": "Mohit Kumar",
            "github_id": "mohitktanwr"
        },
        {
            "name": "Chongruo Wu",
            "email": "chongruo@gmail.com",
            "github_id": "chongruo"
        },
        {
            "name": "Dominik Hintersdorf",
            "email": "d0mih.github@gmail.com",
            "github_id": "D0miH"
        },
        {
            "name": "Yi Zhu",
            "github_id": "bryanyzhu"
        },
        {
            "name": "zhoujun",
            "email": "zjwenmu@gmail.com",
            "github_id": "WenmuZhou"
        }
    ],
    "tags": [],
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/mohitktanwr/Deep-Stem-ResNeSt-ISPRS",
            "stars": 0,
            "issues": true,
            "readme": "[![PyPI](https://img.shields.io/pypi/v/resnest.svg)](https://pypi.python.org/pypi/resnest)\n[![PyPI Pre-release](https://img.shields.io/badge/pypi--prerelease-v0.0.6-ff69b4.svg)](https://pypi.org/project/resnest/#history)\n[![PyPI Nightly](https://github.com/zhanghang1989/ResNeSt/workflows/Pypi%20Nightly/badge.svg)](https://github.com/zhanghang1989/ResNeSt/actions)\n[![Downloads](http://pepy.tech/badge/resnest)](http://pepy.tech/project/resnest)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Unit Test](https://github.com/zhanghang1989/ResNeSt/workflows/Unit%20Test/badge.svg)](https://github.com/zhanghang1989/ResNeSt/actions)\n[![arXiv](http://img.shields.io/badge/cs.CV-arXiv%3A2004.08955-B31B1B.svg)](https://arxiv.org/abs/2004.08955)\n\n[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/resnest-split-attention-networks/instance-segmentation-on-coco)](https://paperswithcode.com/sota/instance-segmentation-on-coco?p=resnest-split-attention-networks)\n[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/resnest-split-attention-networks/object-detection-on-coco)](https://paperswithcode.com/sota/object-detection-on-coco?p=resnest-split-attention-networks)\n[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/resnest-split-attention-networks/panoptic-segmentation-on-coco-panoptic)](https://paperswithcode.com/sota/panoptic-segmentation-on-coco-panoptic?p=resnest-split-attention-networks)\n[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/resnest-split-attention-networks/semantic-segmentation-on-ade20k)](https://paperswithcode.com/sota/semantic-segmentation-on-ade20k?p=resnest-split-attention-networks)\n[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/resnest-split-attention-networks/semantic-segmentation-on-cityscapes-val)](https://paperswithcode.com/sota/semantic-segmentation-on-cityscapes-val?p=resnest-split-attention-networks)\n[![PWC](https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/resnest-split-attention-networks/semantic-segmentation-on-pascal-context)](https://paperswithcode.com/sota/semantic-segmentation-on-pascal-context?p=resnest-split-attention-networks)\n\n\n# ResNeSt\nSplit-Attention Network, A New ResNet Variant. It significantly boosts the performance of downstream models such as Mask R-CNN, Cascade R-CNN and DeepLabV3.\n\n![](./miscs/abstract.jpg)\n\n### Table of Contents\n0. [Pretrained Models](#pretrained-models)\n0. [Transfer Learning Models](#transfer-learning-models)\n0. [Verify  ImageNet Results](#verify-imagenet-results)\n0. [How to Train](#how-to-train)\n0. [Reference](#reference)\n\n\n### Pypi / GitHub Install\n\n0. Install this package repo, note that you only need to choose one of the options\n\n```bash\n# using github url\npip install git+https://github.com/zhanghang1989/ResNeSt\n\n# using pypi\npip install resnest --pre\n```\n\n## Pretrained Models\n\n|             | crop size | PyTorch | Gluon |\n|-------------|-----------|---------|-------|\n| ResNeSt-50  | 224       | 81.03   | 81.04 |\n| ResNeSt-101 | 256       | 82.83   | 82.81 |\n| ResNeSt-200 | 320       | 83.84   | 83.88 |\n| ResNeSt-269 | 416       | 84.54   | 84.53 |\n\n- **3rd party implementations** are available: [Tensorflow](https://github.com/QiaoranC/tf_ResNeSt_RegNet_model), [Caffe](https://github.com/NetEase-GameAI/ResNeSt-caffe).\n\n- Extra ablation study models are available in [link](./ablation.md)\n\n### PyTorch Models\n\n- Load using Torch Hub\n\n```python\nimport torch\n# get list of models\ntorch.hub.list('zhanghang1989/ResNeSt', force_reload=True)\n\n# load pretrained models, using ResNeSt-50 as an example\nnet = torch.hub.load('zhanghang1989/ResNeSt', 'resnest50', pretrained=True)\n```\n\n\n- Load using python package\n\n```python\n# using ResNeSt-50 as an example\nfrom resnest.torch import resnest50\nnet = resnest50(pretrained=True)\n```\n\n\n### Gluon Models\n\n- Load pretrained model:\n\n```python\n# using ResNeSt-50 as an example\nfrom resnest.gluon import resnest50\nnet = resnest50(pretrained=True)\n```\n\n## Transfer Learning Models\n\n### Detectron2\n\nWe provide a wrapper for training Detectron2 models with ResNeSt backbone at [d2](./d2). Training configs and pretrained models are released. See details in [d2](./d2).\n\n### MMDetection\n\nThe ResNeSt backbone has been adopted by [MMDetection](https://github.com/open-mmlab/mmdetection/tree/master/configs/resnest).\n\n### Semantic Segmentation\n\n- PyTorch models and training: Please visit [PyTorch Encoding Toolkit](https://hangzhang.org/PyTorch-Encoding/model_zoo/segmentation.html).\n- Gluon models and training: Please visit [GluonCV Toolkit](https://gluon-cv.mxnet.io/model_zoo/segmentation.html#ade20k-dataset).\n\n\n## Verify ImageNet Results:\n\n**Note:** the inference speed reported in the paper are tested using Gluon implementation with RecordIO data.\n\n### Prepare ImageNet dataset:\n\nHere we use raw image data format for simplicity, please follow [GluonCV tutorial](https://gluon-cv.mxnet.io/build/examples_datasets/recordio.html) if you would like to use RecordIO format.\n\n```bash\ncd scripts/dataset/\n# assuming you have downloaded the dataset in the current folder\npython prepare_imagenet.py --download-dir ./\n```\n\n### Torch Model\n\n```bash\n# use resnest50 as an example\ncd scripts/torch/\npython verify.py --model resnest50 --crop-size 224\n```\n\n### Gluon Model\n\n```bash\n# use resnest50 as an example\ncd scripts/gluon/\npython verify.py --model resnest50 --crop-size 224\n```\n\n## How to Train\n\n### ImageNet Models\n\n- Training with MXNet Gluon: Please visit [Gluon folder](./scripts/gluon/).\n- Training with PyTorch: Please visit [PyTorch Encoding Toolkit](https://hangzhang.org/PyTorch-Encoding/model_zoo/imagenet.html) (slightly worse than Gluon implementation).\n\n### Detectron Models\n\nFor object detection and instance segmentation models, please visit our [detectron2-ResNeSt fork](https://github.com/zhanghang1989/detectron2-ResNeSt).\n\n### Semantic Segmentation\n\n- Training with PyTorch: [Encoding Toolkit](https://hangzhang.org/PyTorch-Encoding/model_zoo/segmentation.html).\n- Training with MXNet: [GluonCV Toolkit](https://gluon-cv.mxnet.io/model_zoo/segmentation.html#ade20k-dataset).\n\n## Reference\n\n**ResNeSt: Split-Attention Networks** [[arXiv](https://arxiv.org/pdf/2004.08955.pdf)]\n\nHang Zhang, Chongruo Wu, Zhongyue Zhang, Yi Zhu, Zhi Zhang, Haibin Lin, Yue Sun, Tong He, Jonas Muller, R. Manmatha, Mu Li and Alex Smola\n\n```\n@article{zhang2020resnest,\ntitle={ResNeSt: Split-Attention Networks},\nauthor={Zhang, Hang and Wu, Chongruo and Zhang, Zhongyue and Zhu, Yi and Zhang, Zhi and Lin, Haibin and Sun, Yue and He, Tong and Muller, Jonas and Manmatha, R. and Li, Mu and Smola, Alexander},\njournal={arXiv preprint arXiv:2004.08955},\nyear={2020}\n}\n```\n\n### Major Contributors\n\n- ResNeSt Backbone ([Hang Zhang](https://hangzhang.org/))\n- Detectron Models ([Chongruo Wu](https://github.com/chongruo), [Zhongyue Zhang](http://zhongyuezhang.com/))\n- Semantic Segmentation ([Yi Zhu](https://sites.google.com/view/yizhu/home))\n- Distributed Training ([Haibin Lin](https://sites.google.com/view/haibinlin/))\n",
            "readme_url": "https://github.com/mohitktanwr/Deep-Stem-ResNeSt-ISPRS",
            "frameworks": [
                "MXNet",
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "ResNeSt: Split-Attention Networks",
            "arxiv": "2004.08955",
            "year": 2020,
            "url": "http://arxiv.org/abs/2004.08955v2",
            "abstract": "It is well known that featuremap attention and multi-path representation are\nimportant for visual recognition. In this paper, we present a modularized\narchitecture, which applies the channel-wise attention on different network\nbranches to leverage their success in capturing cross-feature interactions and\nlearning diverse representations. Our design results in a simple and unified\ncomputation block, which can be parameterized using only a few variables. Our\nmodel, named ResNeSt, outperforms EfficientNet in accuracy and latency\ntrade-off on image classification. In addition, ResNeSt has achieved superior\ntransfer learning results on several public benchmarks serving as the backbone,\nand has been adopted by the winning entries of COCO-LVIS challenge. The source\ncode for complete system and pretrained models are publicly available.",
            "authors": [
                "Hang Zhang",
                "Chongruo Wu",
                "Zhongyue Zhang",
                "Yi Zhu",
                "Haibin Lin",
                "Zhi Zhang",
                "Yue Sun",
                "Tong He",
                "Jonas Mueller",
                "R. Manmatha",
                "Mu Li",
                "Alexander Smola"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "ADE20K"
            },
            {
                "name": "Cityscapes"
            },
            {
                "name": "COCO"
            },
            {
                "name": "ImageNet"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9988630601819026,
        "task": "Object Detection",
        "task_prob": 0.5743440814385827
    }
}