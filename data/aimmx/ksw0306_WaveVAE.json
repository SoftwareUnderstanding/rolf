{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "WaveVAE",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "ksw0306",
                "owner_type": "User",
                "name": "WaveVAE",
                "url": "https://github.com/ksw0306/WaveVAE",
                "stars": 115,
                "pushed_at": "2019-05-23 08:48:55+00:00",
                "created_at": "2019-05-23 03:30:10+00:00",
                "language": "Python",
                "description": "A Pytorch implementation of WaveVAE (\"Parallel Neural Text-to-Speech\")",
                "license": "MIT License",
                "frameworks": [
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "0157353c0fd26ee4f43cb3fd9eceeac2345ec372",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ksw0306/WaveVAE/blob/master/LICENSE"
                    }
                },
                "size": 1068
            },
            {
                "type": "code",
                "name": "data.py",
                "sha": "9e46b42ae38eab77be003980e28348e2c69af31a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ksw0306/WaveVAE/blob/master/data.py"
                    }
                },
                "size": 5934
            },
            {
                "type": "code",
                "name": "model.py",
                "sha": "8636772cb3c6f8d7718ef02d57c00dc85c75c7c0",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ksw0306/WaveVAE/blob/master/model.py"
                    }
                },
                "size": 2168
            },
            {
                "type": "code",
                "name": "modules.py",
                "sha": "ab82bb05981b863bd7eb5161bfc608c067d091fb",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ksw0306/WaveVAE/blob/master/modules.py"
                    }
                },
                "size": 3973
            },
            {
                "type": "code",
                "name": "preprocessing.py",
                "sha": "aa362c7993a1998d83df3162d8da931a9be174f5",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ksw0306/WaveVAE/blob/master/preprocessing.py"
                    }
                },
                "size": 3774
            },
            {
                "type": "code",
                "name": "synthesize.py",
                "sha": "6047682efc5d97c20823e0cdaafa73304854c177",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ksw0306/WaveVAE/blob/master/synthesize.py"
                    }
                },
                "size": 4221
            },
            {
                "type": "code",
                "name": "train.py",
                "sha": "d95cf4760da78ca1952b10a735f034b99ed605ea",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ksw0306/WaveVAE/blob/master/train.py"
                    }
                },
                "size": 14469
            },
            {
                "type": "code",
                "name": "wavenet.py",
                "sha": "a5ee12b57ecfd0aa538212eb9f5becd6d32cf6d1",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ksw0306/WaveVAE/blob/master/wavenet.py"
                    }
                },
                "size": 2985
            },
            {
                "type": "code",
                "name": "wavenet_iaf.py",
                "sha": "40665e1c58be6db40c3e5c0613a58755896c8a6f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ksw0306/WaveVAE/blob/master/wavenet_iaf.py"
                    }
                },
                "size": 4366
            }
        ]
    },
    "authors": [
        {
            "name": "Sungwon Kim",
            "email": "ksw930306@gmail.com",
            "github_id": "ksw0306"
        }
    ],
    "tags": [
        "wavevae",
        "pytorch"
    ],
    "description": "A Pytorch implementation of WaveVAE (\"Parallel Neural Text-to-Speech\")",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/ksw0306/WaveVAE",
            "stars": 115,
            "issues": true,
            "readme": "# WaveVAE\n\nwork in progress\n\nNote that my implementation isn't stable yet. \n\nA Pytorch Implementation of WaveVAE (Mel Spectrogram --> Waveform)\n\npart of \"Parallel Neural Text-to-Speech\"\n\n\n# Requirements\n\nPyTorch 0.4.1 & python 3.6 & Librosa\n\n# Examples\n\n#### Step 1. Download Dataset\n\n- LJSpeech : [https://keithito.com/LJ-Speech-Dataset/](https://keithito.com/LJ-Speech-Dataset/)\n\n#### Step 2. Preprocessing (Preparing Mel Spectrogram)\n\n`python preprocessing.py --in_dir ljspeech --out_dir DATASETS/ljspeech`\n\n#### Step 3. Train Model\n\n`python train.py --model_name wavevae_1 --batch_size 4 --num_gpu 2`\n\n#### Step 4. Synthesize\n\n`--load_step CHECKPOINT` : the # of the model's global training step (also depicted in the trained weight file)\n\n`python synthesize.py --model_name wavevae_1 --load_step 10000 --num_samples 5`\n\n# References\n\n- WaveNet vocoder : [https://github.com/r9y9/wavenet_vocoder](https://github.com/r9y9/wavenet_vocoder)\n- Parallel Neural Text-to-Speech : [https://arxiv.org/abs/1905.08459](https://arxiv.org/abs/1905.08459)\n",
            "readme_url": "https://github.com/ksw0306/WaveVAE",
            "frameworks": [
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "Non-Autoregressive Neural Text-to-Speech",
            "arxiv": "1905.08459",
            "year": 2019,
            "url": "http://arxiv.org/abs/1905.08459v3",
            "abstract": "In this work, we propose ParaNet, a non-autoregressive seq2seq model that\nconverts text to spectrogram. It is fully convolutional and brings 46.7 times\nspeed-up over the lightweight Deep Voice 3 at synthesis, while obtaining\nreasonably good speech quality. ParaNet also produces stable alignment between\ntext and speech on the challenging test sentences by iteratively improving the\nattention in a layer-by-layer manner. Furthermore, we build the parallel\ntext-to-speech system and test various parallel neural vocoders, which can\nsynthesize speech from text through a single feed-forward pass. We also explore\na novel VAE-based approach to train the inverse autoregressive flow (IAF) based\nparallel vocoder from scratch, which avoids the need for distillation from a\nseparately trained WaveNet as previous work.",
            "authors": [
                "Kainan Peng",
                "Wei Ping",
                "Zhao Song",
                "Kexin Zhao"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "https://keithito.com/LJ-Speech-Dataset/",
                "connection": {
                    "name": "url",
                    "source": {
                        "url": "https://keithito.com/LJ-Speech-Dataset/"
                    }
                }
            }
        ]
    },
    "domain": {
        "domain_type": "Speech",
        "domain_prob": 0.9811139388449772
    }
}