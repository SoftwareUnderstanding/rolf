{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "Modeling Heterogeneous Hierarchies with Relation-specific Hyperbolic Cones",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "snap-stanford",
                "owner_type": "Organization",
                "name": "ConE",
                "url": "https://github.com/snap-stanford/ConE",
                "stars": 7,
                "pushed_at": "2021-11-03 03:08:23+00:00",
                "created_at": "2021-10-31 00:19:53+00:00",
                "language": "Python",
                "license": "MIT License",
                "frameworks": [
                    "scikit-learn",
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "ddff3eddb5e622a95af0e9187b96f9ed685d9c38",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/snap-stanford/ConE/blob/main/LICENSE"
                    }
                },
                "size": 1064
            },
            {
                "type": "code",
                "name": "codes",
                "sha": "f038a2399fa797eba4222280148f4a8a41c0074e",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/snap-stanford/ConE/tree/main/codes"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "data",
                "sha": "2dae15aea5034f6bd915b2fc5a38fbc3235b344c",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/snap-stanford/ConE/tree/main/data"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "examples",
                "sha": "a7d007a9d9eece1cb488c973d3eec7c4e86ca994",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/snap-stanford/ConE/tree/main/examples"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "figure",
                "sha": "e84abdbfbc106bd33ab2b381c02a616bae76be80",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/snap-stanford/ConE/tree/main/figure"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "7ff64685b5293b658d748a7e4cd48462eb6342b5",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/snap-stanford/ConE/blob/main/requirements.txt"
                    }
                },
                "size": 97
            },
            {
                "type": "code",
                "name": "run.sh",
                "sha": "7fe616446686d76e03b4735444c42fb01ff563a2",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/snap-stanford/ConE/blob/main/run.sh"
                    }
                },
                "size": 2930
            }
        ]
    },
    "authors": [
        {
            "name": "Yushi Bai",
            "github_id": "bys0318"
        }
    ],
    "tags": [],
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/snap-stanford/ConE",
            "stars": 7,
            "issues": true,
            "readme": "## Modeling Heterogeneous Hierarchies with Relation-specific Hyperbolic Cones\n\nThis is the official codebase for the paper [Modeling Heterogeneous Hierarchies with Relation-specific Hyperbolic Cones](https://arxiv.org/abs/2110.14923).\n\n## Overview\nWe present **ConE** (**Con**e **E**mbedding for knowledge graphs), the first knowledge graph (KG) embedding method that can capture the transitive closure properties of heterogeneous hierarchical relations as well as other non-hierarchical properties. The figure below shows an illustration of our model.\n\n![](figure/model.png)\n\nThis is the PyTorch implementation of our proposed ConE model based on the code framework provided by [RotatE](https://arxiv.org/abs/1902.10197)' [repo](https://github.com/DeepGraphLearning/KnowledgeGraphEmbedding) for knowledge graph embedding.\n\n## Implemented features\n\n#### Datasets\n - [x] WN18RR\n - [x] DDB14\n - [x] GO21\n - [x] FB15k-237\n\n**Notice**: We propose **GO21**, a hierarchical biological knowledge graph containing genes, proteins, drugs and diseases as entities. Please cite our paper if you use this dataset.\n\n#### Models:\n - [x] RotatE\n - [x] pRotatE\n - [x] TransE\n - [x] ComplEx\n - [x] DistMult\n - [x] RotC (our)\n - [x] ConE (our)\n\n**Notice**: RotC is the degenerate version of ConE that uses empty relation-specific subspace. RotC is utilized to initialize the embedding for ConE, to stabilize the training procedure.\n\n#### Tasks and Evaluation Metrics:\n\n - Knowledge graph completion:\n    - [x] MRR, MR, HITS@1, HITS@3, HITS@10 (filtered)\n - Ancestor-descendant prediction:\n    - [x] mAP, AUROC\n - LCA prediction:\n    - [x] HITS@1, HITS@3, HITS@10\n\n#### Loss Function:\n\n - [x] Uniform Negative Sampling\n - [x] Self-Adversarial Negative Sampling\n - [x] Cone angle loss (our)\n\n## Usage\n\nKnowledge Graph Data:\n - `entities.dict`: a dictionary mapping entities to unique ids\n - `relations.dict`: a dictionary mapping relations to unique ids\n - `train.txt`: the KGE model is trained to fit this data set\n - `valid.txt`: create a blank file if no validation data is available\n - `test.txt`: the KGE model is evaluated on this data set\n - `relation_category.txt`: a dictionary mapping relations to their type (1-1 indicates non-hierarchical, 1-M indicates hyponym, M-1 indicates hypernym), required for ConE model\n - `class_test_X.txt`: Test data for ancestor-descendant prediction task, *X*=easy: 0% inferred descendant pairs, *X*=medium: 50% inferred descendant pairs, *X*=hard: 100% inferred descendant pairs\n - `lca_test_X.txt`: LCA prediction under *X*-hop is evaluated on this data set\n\n## Training and Evaluation of ConE\n#### Train\n\nThe `run.sh` script provides an easy way to search hyper-parameters (such as batch size, learning rate, etc) during training. For example, this command train a ConE model on WN18RR dataset with GPU 0.\n```\nbash run.sh train ConE wn18rr 0 1 1024 50 500 10 0.5 0.001 40000 4 -de \\\n    --tail_batch_only --do_valid --valid_steps 20000 --save_checkpoint 40000 \\\n    --train_with_relation_category --uni_weight --lr_decay_epoch \"30000\" \\\n    --do_test_relation_category --cone_penalty --fix_att 100 \\\n    --w 0.5 --pretrained \"./models/RotC_wn18rr_1/checkpoint/ckpt_39999\"\n```\nCheck argparse configuration at `codes/run.py` for more arguments and more details.\n\nMoreover, we provide example training scripts for ConE in folder `examples/` to reproduce our results.\n\n#### Test\n\nTrained model is automatically saved in folder `models/`, evaluations can be conducted using the following commands.\n\n```\nbash run.sh category ConE wn18rr 0 1 1024 50 500 0.1 0.5 0.001 20000 4 -de \\\n    -init models/ConE_wn18rr_1 -ckpt \"ckpt_39999\"  --fix_att 100 \\\n    --do_test_relation_category --do_classification --do_lca 1 \\\n    --pretrained \"./models/RotC_wn18rr_1/checkpoint/ckpt_39999\"\n```\nThe model will be evaluated on three tasks: KG completion task, ancestor-descendant prediction task and LCA prediction task.\n\n#### Extend to more datasets\nFor hierarchical KG datasets, the training of ConE requires a pretrained RotC model to initialize the embedding. We refer to `examples/WN18RR.sh` for an example.\n\nFor non-hierarchical KG datasets, RotC model is comparable to many strong baseline models. We refer to `examples/FB15k237.sh` for an example.\n\n## Citation\n\nPlease cite our paper if you use our method or dataset in your work (Bibtex below).\n\n```bibtex\n@inproceedings{bai2021cone,\n   title={Modeling Heterogeneous Hierarchies with Relation-specific Hyperbolic Cones},\n   author={Bai, Yushi and Ying, Rex and Ren, Hongyu and Leskovec, Jure},\n   booktitle={Advances in Neural Information Processing Systems (NeurIPS)},\n   year={2021}\n}\n```",
            "readme_url": "https://github.com/snap-stanford/ConE",
            "frameworks": [
                "scikit-learn",
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "RotatE: Knowledge Graph Embedding by Relational Rotation in Complex Space",
            "arxiv": "1902.10197",
            "year": 2019,
            "url": "http://arxiv.org/abs/1902.10197v1",
            "abstract": "We study the problem of learning representations of entities and relations in\nknowledge graphs for predicting missing links. The success of such a task\nheavily relies on the ability of modeling and inferring the patterns of (or\nbetween) the relations. In this paper, we present a new approach for knowledge\ngraph embedding called RotatE, which is able to model and infer various\nrelation patterns including: symmetry/antisymmetry, inversion, and composition.\nSpecifically, the RotatE model defines each relation as a rotation from the\nsource entity to the target entity in the complex vector space. In addition, we\npropose a novel self-adversarial negative sampling technique for efficiently\nand effectively training the RotatE model. Experimental results on multiple\nbenchmark knowledge graphs show that the proposed RotatE model is not only\nscalable, but also able to infer and model various relation patterns and\nsignificantly outperform existing state-of-the-art models for link prediction.",
            "authors": [
                "Zhiqing Sun",
                "Zhi-Hong Deng",
                "Jian-Yun Nie",
                "Jian Tang"
            ]
        },
        {
            "title": "Modeling Heterogeneous Hierarchies with Relation-specific Hyperbolic Cones",
            "arxiv": "2110.14923",
            "year": 2021,
            "url": "http://arxiv.org/abs/2110.14923v2",
            "abstract": "Hierarchical relations are prevalent and indispensable for organizing human\nknowledge captured by a knowledge graph (KG). The key property of hierarchical\nrelations is that they induce a partial ordering over the entities, which needs\nto be modeled in order to allow for hierarchical reasoning. However, current KG\nembeddings can model only a single global hierarchy (single global partial\nordering) and fail to model multiple heterogeneous hierarchies that exist in a\nsingle KG. Here we present ConE (Cone Embedding), a KG embedding model that is\nable to simultaneously model multiple hierarchical as well as non-hierarchical\nrelations in a knowledge graph. ConE embeds entities into hyperbolic cones and\nmodels relations as transformations between the cones. In particular, ConE uses\ncone containment constraints in different subspaces of the hyperbolic embedding\nspace to capture multiple heterogeneous hierarchies. Experiments on standard\nknowledge graph benchmarks show that ConE obtains state-of-the-art performance\non hierarchical reasoning tasks as well as knowledge graph completion task on\nhierarchical graphs. In particular, our approach yields new state-of-the-art\nHits@1 of 45.3% on WN18RR and 16.1% on DDB14 (0.231 MRR). As for hierarchical\nreasoning task, our approach outperforms previous best results by an average of\n20% across the three datasets.",
            "authors": [
                "Yushi Bai",
                "Rex Ying",
                "Hongyu Ren",
                "Jure Leskovec"
            ]
        },
        {
            "year": "2021",
            "booktitle": "Advances in Neural Information Processing Systems (NeurIPS)",
            "author": [
                "Bai, Yushi",
                "Ying, Rex",
                "Ren, Hongyu",
                "Leskovec, Jure"
            ],
            "title": "Modeling Heterogeneous Hierarchies with Relation-specific Hyperbolic Cones",
            "ENTRYTYPE": "inproceedings",
            "ID": "bai2021cone",
            "authors": [
                "Bai, Yushi",
                "Ying, Rex",
                "Ren, Hongyu",
                "Leskovec, Jure"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "PROTEINS"
            },
            {
                "name": "FB15k-237"
            },
            {
                "name": "MR"
            },
            {
                "name": "MRR"
            },
            {
                "name": "FB15k"
            },
            {
                "name": "WN18RR"
            }
        ]
    },
    "domain": {
        "domain_type": "Unknown"
    }
}