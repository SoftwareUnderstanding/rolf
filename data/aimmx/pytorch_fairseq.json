{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "fairseq",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "pytorch",
                "owner_type": "Organization",
                "name": "fairseq",
                "url": "https://github.com/pytorch/fairseq",
                "stars": 16482,
                "pushed_at": "2022-03-26 17:01:30+00:00",
                "created_at": "2017-08-29 16:26:12+00:00",
                "language": "Python",
                "description": "Facebook AI Research Sequence-to-Sequence Toolkit written in Python.",
                "license": "MIT License",
                "frameworks": [
                    "PyTorch",
                    "NLTK",
                    "scikit-learn",
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": ".circleci",
                "sha": "73ebd4e8ed0b3097889a7f26f7fdaf8c965b568c",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/tree/main/.circleci"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": ".github",
                "sha": "270b2dd59bd4e760668dd92f3640dcc60c65a4c2",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/tree/main/.github"
                    }
                },
                "num_files": 5
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "4be13638de637fe994e601f3de8e215109b30322",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/blob/main/.gitignore"
                    }
                },
                "size": 1742
            },
            {
                "type": "code",
                "name": ".gitmodules",
                "sha": "07a55d45d4f0bed755dbfc1f440f214ed43d206a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/blob/main/.gitmodules"
                    }
                },
                "size": 162
            },
            {
                "type": "code",
                "name": ".isort.cfg",
                "sha": "aed482f47e5b14e541ad6c5c9cadf60cc6ee93fa",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/blob/main/.isort.cfg"
                    }
                },
                "size": 645
            },
            {
                "type": "code",
                "name": ".pre-commit-config.yaml",
                "sha": "e8f7a8bfc63352a744d7f6bfe34e8b08405f31f4",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/blob/main/.pre-commit-config.yaml"
                    }
                },
                "size": 935
            },
            {
                "type": "code",
                "name": "CODE_OF_CONDUCT.md",
                "sha": "a0cbeaab7650bf08267fbdbc9bb54e845c88f392",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/blob/main/CODE_OF_CONDUCT.md"
                    }
                },
                "size": 3350
            },
            {
                "type": "code",
                "name": "CONTRIBUTING.md",
                "sha": "60e90258877423bb458fafbc9d35781484dbe9c6",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/blob/main/CONTRIBUTING.md"
                    }
                },
                "size": 3329
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "b96dcb0480a0b0be0727976e5202a1e7b23edc3f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/blob/main/LICENSE"
                    }
                },
                "size": 1086
            },
            {
                "type": "code",
                "name": "docs",
                "sha": "594adc0c3c5cf55d5139beb6cee10e49a3f92db5",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/tree/main/docs"
                    }
                },
                "num_files": 22
            },
            {
                "type": "code",
                "name": "examples",
                "sha": "7e7df4c0cbab8ab27e2fe02cdc6108184fa618a0",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/tree/main/examples"
                    }
                },
                "num_files": 61
            },
            {
                "type": "code",
                "name": "fairseq",
                "sha": "5f8b1f977f35e9590c7b3f1626041f8fa34b7906",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/tree/main/fairseq"
                    }
                },
                "num_files": 38
            },
            {
                "type": "code",
                "name": "fairseq_cli",
                "sha": "da1a4086b314b23ca3d16d8de7d224ba791431a9",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/tree/main/fairseq_cli"
                    }
                },
                "num_files": 9
            },
            {
                "type": "code",
                "name": "hubconf.py",
                "sha": "5949e274edd02e86cb323331211641ce0d0b9b93",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/blob/main/hubconf.py"
                    }
                },
                "size": 2099
            },
            {
                "type": "code",
                "name": "pyproject.toml",
                "sha": "6d1b4c5b6fb56a63069147e3a1de922ce71a45d8",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/blob/main/pyproject.toml"
                    }
                },
                "size": 100
            },
            {
                "type": "code",
                "name": "scripts",
                "sha": "86d33c227e899f0c60d6921d617a0bd717c8e460",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/tree/main/scripts"
                    }
                },
                "num_files": 18
            },
            {
                "type": "code",
                "name": "setup.cfg",
                "sha": "3fa679ddf1dd8dc4aa4045e0ac1f0a8bdc842e27",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/blob/main/setup.cfg"
                    }
                },
                "size": 107
            },
            {
                "type": "code",
                "name": "setup.py",
                "sha": "c5591915fac27f359cd39869ac128255bdf0effd",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/blob/main/setup.py"
                    }
                },
                "size": 8377
            },
            {
                "type": "code",
                "name": "tests",
                "sha": "5da2c7e2ce6d1b3d559157484583564d8d2d37b1",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/tree/main/tests"
                    }
                },
                "num_files": 56
            },
            {
                "type": "code",
                "name": "train.py",
                "sha": "321de3d9b53f8194b58c26f5cb2c03281afc2bb1",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pytorch/fairseq/blob/main/train.py"
                    }
                },
                "size": 366
            }
        ]
    },
    "authors": [
        {
            "name": "Myle Ott",
            "email": "myleott@gmail.com",
            "github_id": "myleott"
        },
        {
            "name": "Alexei Baevski",
            "github_id": "alexeib"
        },
        {
            "name": "Changhan Wang",
            "email": "wangchanghan@gmail.com",
            "github_id": "kahne"
        },
        {
            "name": "Sergey Edunov",
            "github_id": "edunov"
        },
        {
            "name": "Ning",
            "github_id": "cndn"
        },
        {
            "name": "Yuqing Tang",
            "email": "ytang.cs@gmail.com",
            "github_id": "tangyuq"
        },
        {
            "name": "Sam Shleifer",
            "email": "sshleifer@gmail.com",
            "github_id": "sshleifer"
        },
        {
            "name": "theweiho",
            "github_id": "theweiho"
        },
        {
            "name": "Louis Martin",
            "github_id": "louismartin"
        },
        {
            "name": "Liezl",
            "github_id": "liezl200"
        },
        {
            "name": "Angela Fan",
            "email": "angela.h.fan@gmail.com",
            "github_id": "huihuifan"
        },
        {
            "name": "Yiming Wang",
            "email": "freewym@gmail.com",
            "github_id": "freewym"
        },
        {
            "name": "sravyapopuri388",
            "github_id": "sravyapopuri388"
        },
        {
            "name": "Xutai Ma",
            "email": "xutai_ma@jhu.edu",
            "github_id": "xutaima"
        },
        {
            "name": "Xu Song",
            "email": "xusong.vip@gmail.com",
            "github_id": "xu-song"
        },
        {
            "name": "Yun Wang (Maigo)",
            "email": "maigoakisame@gmail.com",
            "github_id": "MaigoAkisame"
        },
        {
            "name": "pipibjc",
            "github_id": "pipibjc"
        },
        {
            "name": "Wei-Ning Hsu",
            "github_id": "wnhsu"
        },
        {
            "name": "liuchen9494",
            "github_id": "liuchen9494"
        },
        {
            "name": "jhcross",
            "github_id": "jhcross"
        },
        {
            "name": "Joshua Meier",
            "github_id": "joshim5"
        },
        {
            "name": "Pierre Andrews",
            "github_id": "Mortimerp9"
        },
        {
            "name": "Matt Le",
            "email": "lematt1991@gmail.com",
            "github_id": "lematt1991"
        },
        {
            "name": "Elijah Rippeth",
            "github_id": "erip"
        },
        {
            "name": "jingfeidu",
            "github_id": "jingfeidu"
        },
        {
            "name": "Kartikay Khandelwal",
            "github_id": "kartikayk"
        },
        {
            "name": "Jiatao Gu",
            "github_id": "MultiPath"
        },
        {
            "name": "Davide Caroselli",
            "email": "davide@modernmt.eu",
            "github_id": "davidecaroselli"
        },
        {
            "name": "Jerry Ma",
            "github_id": "jma127"
        },
        {
            "name": "Kritika",
            "github_id": "skritika"
        },
        {
            "name": "Dmytro Okhonko",
            "github_id": "okhonko"
        },
        {
            "name": "halilakin",
            "github_id": "halilakin"
        },
        {
            "name": "jmp84",
            "github_id": "jmp84"
        },
        {
            "name": "Nathan Ng",
            "email": "n.ng555@gmail.com",
            "github_id": "nng555"
        },
        {
            "name": "Shruti Bhosale",
            "github_id": "shruti-bh"
        },
        {
            "name": "Stephen Roller",
            "email": "me@stephenroller.com",
            "github_id": "stephenroller"
        },
        {
            "name": "ngoyal2707",
            "github_id": "ngoyal2707"
        },
        {
            "name": "dianaml0",
            "github_id": "dianaml0"
        },
        {
            "name": "Xian Li",
            "github_id": "xianxl"
        },
        {
            "name": "yuntang",
            "github_id": "yuntang"
        },
        {
            "name": "Runqi Yang",
            "email": "runqiyang@gmail.com",
            "github_id": "hitvoice"
        },
        {
            "name": "Taylan Bilal",
            "email": "taylanbil@google.com",
            "github_id": "taylanbil"
        },
        {
            "name": "Chau Tran",
            "github_id": "chtran"
        },
        {
            "name": "I2304",
            "github_id": "I2304"
        },
        {
            "name": "rutyrinott",
            "github_id": "rutyrinott"
        },
        {
            "name": "Ann Lee",
            "github_id": "an918tw"
        },
        {
            "name": "msbaines",
            "github_id": "msbaines"
        },
        {
            "name": "sujitoc",
            "github_id": "sujitoc"
        },
        {
            "name": "Marco Gaido",
            "email": "marcogaido91@gmail.com",
            "github_id": "mgaido91"
        },
        {
            "name": "Edan Sneh",
            "email": "edan.sneh@gmail.com",
            "github_id": "EdanSneh"
        },
        {
            "name": "henryhu6",
            "github_id": "henryhu6"
        },
        {
            "name": "Mike Ruberry",
            "github_id": "mruberry"
        },
        {
            "name": "Guillaume Wenzek",
            "github_id": "gwenzek"
        },
        {
            "name": "Hongyu Gong",
            "github_id": "hygong-fb"
        },
        {
            "name": "Victoria X Lin",
            "email": "victorialin@fb.com",
            "github_id": "todpole3"
        },
        {
            "name": "Aditya Pillai",
            "email": "dev@pillai.io",
            "github_id": "pilleye"
        },
        {
            "name": "Deepak Gopinath",
            "email": "dgopinath@fb.com",
            "github_id": "dpacgopinath"
        },
        {
            "name": "Michael Auli",
            "github_id": "michaelauli"
        },
        {
            "name": "Omry Yadan",
            "email": "omry@yadan.net",
            "github_id": "omry"
        },
        {
            "name": "Patrick von Platen",
            "email": "patrick.v.platen@gmail.com",
            "github_id": "patrickvonplaten"
        },
        {
            "name": "Qiantong Xu",
            "github_id": "xuqiantong"
        },
        {
            "name": "Zeming Lin",
            "github_id": "ebetica"
        },
        {
            "name": "Zhanghao Wu",
            "email": "zhanghao.wu@outlook.com",
            "github_id": "Michaelvll"
        },
        {
            "name": "arbabu123",
            "github_id": "arbabu123"
        },
        {
            "name": "Mehdi Drissi",
            "github_id": "hmc-cs-mdrissi"
        },
        {
            "name": "Sai",
            "email": "sai.r.prasanna@gmail.com",
            "github_id": "sai-prasanna"
        },
        {
            "name": "Aapo Kyrola",
            "email": "akyrola@cs.cmu.edu",
            "github_id": "akyrola"
        },
        {
            "name": "Art Matsak",
            "github_id": "artmatsak"
        },
        {
            "name": "Arya McCarthy",
            "github_id": "aryamccarthy"
        },
        {
            "name": "David P\u0159\u00edhoda",
            "github_id": "prihoda"
        },
        {
            "name": "Elizabeth Salesky",
            "github_id": "esalesky"
        },
        {
            "name": "Eric Lou",
            "github_id": "EricZLou"
        },
        {
            "name": "gaganbahga",
            "github_id": "gaganbahga"
        },
        {
            "name": "0xjc",
            "github_id": "0xjc"
        },
        {
            "name": "Jongsoo Park",
            "email": "jongsoo.park@gmail.com",
            "github_id": "jspark1105"
        },
        {
            "name": "Kaushik Rangadurai",
            "email": "kaushik.me88@gmail.com",
            "github_id": "kaushik88"
        },
        {
            "name": "Liam",
            "email": "liangding.liam@gmail.com",
            "github_id": "alphadl"
        },
        {
            "name": "Matt Post",
            "email": "post@cs.jhu.edu",
            "github_id": "mjpost"
        },
        {
            "name": "Neeyanth Kopparapu",
            "email": "neeyanthkvk@gmail.com",
            "github_id": "neeyanthkvk"
        },
        {
            "name": "Nicola De Cao",
            "email": "nicola.decao@gmail.com",
            "github_id": "nicola-decao"
        },
        {
            "name": "Oren Amsalem",
            "github_id": "orena1"
        },
        {
            "name": "Rengan Xu",
            "github_id": "renganxu"
        },
        {
            "name": "robert-verkuil",
            "github_id": "robert-verkuil"
        },
        {
            "name": "Seppo Enarvi",
            "github_id": "senarvi"
        },
        {
            "name": "StanislavGlebik",
            "github_id": "StanislavGlebik"
        },
        {
            "name": "Jiayi Weng",
            "email": "trinkle23897@gmail.com",
            "github_id": "Trinkle23897"
        },
        {
            "name": "Vaibhav Singh",
            "github_id": "ultrons"
        },
        {
            "name": "alvations",
            "github_id": "alvations"
        },
        {
            "name": "Marina Fomicheva",
            "github_id": "mfomicheva"
        },
        {
            "name": "Danlu Chen",
            "github_id": "taineleau"
        },
        {
            "name": "Vineet Kumar",
            "github_id": "vineetk1"
        },
        {
            "name": "Zhiqiang Wang",
            "email": "zhiqwang@outlook.com",
            "github_id": "zhiqwang"
        },
        {
            "name": "Muhammad Khalifa",
            "email": "muhammad.e.khalifa@gmail.com",
            "github_id": "mukhal"
        },
        {
            "name": "Ronan Riochet",
            "github_id": "rronan"
        },
        {
            "name": "Stefan Schweter",
            "github_id": "stefan-it"
        },
        {
            "name": "Tim Dettmers",
            "github_id": "TimDettmers"
        },
        {
            "name": "Vinayak Tantia",
            "email": "tantia.vinayak1@gmail.com",
            "github_id": "vtantia"
        },
        {
            "name": "Aditya Chetan",
            "email": "aditya16217@iiitd.ac.in",
            "github_id": "justachetan"
        },
        {
            "name": "Akhilesh Gotmare",
            "email": "dg.akhilesh@gmail.com",
            "github_id": "akhileshgotmare"
        },
        {
            "name": "albanD",
            "github_id": "albanD"
        },
        {
            "name": "Alex Conneau",
            "email": "alexis.conneau@gmail.com",
            "github_id": "aconneau"
        },
        {
            "name": "Alex Gaziev",
            "email": "alex.gaziev@gmail.com",
            "github_id": "gazay"
        },
        {
            "name": "Alexander H. Liu",
            "github_id": "Alexander-H-Liu"
        },
        {
            "name": "Alex Mathai",
            "email": "alexmathai98@gmail.com",
            "github_id": "Alex-Mathai-98"
        },
        {
            "name": "alexrives",
            "github_id": "alexrives"
        },
        {
            "name": "Anchit Gupta",
            "github_id": "anchit"
        },
        {
            "name": "andrewjcg",
            "github_id": "andrewjcg"
        },
        {
            "name": "anuroopsriram",
            "github_id": "anuroopsriram"
        },
        {
            "name": "Armen",
            "email": "armen.ag@live.com",
            "github_id": "ArmenAg"
        },
        {
            "name": "Bairen Yi",
            "email": "yibairen.byron@bytedance.com",
            "github_id": "byronyi"
        },
        {
            "name": "Bao-Yu",
            "email": "nlp.baoy@gmail.com",
            "github_id": "baoy-nlp"
        },
        {
            "name": "Belinda Li",
            "github_id": "belindal"
        },
        {
            "name": "Benjamin Bolte",
            "github_id": "codekansas"
        },
        {
            "name": "Biao Lu",
            "github_id": "blufb"
        },
        {
            "name": "ycy",
            "github_id": "chenyangyu1988"
        },
        {
            "name": "Christian Clauss",
            "email": "cclauss@me.com",
            "github_id": "cclauss"
        },
        {
            "name": "Chunting Zhou",
            "github_id": "violet-zct"
        },
        {
            "name": "Astariul",
            "github_id": "astariul"
        },
        {
            "name": "Colin Clement",
            "github_id": "colinclement"
        },
        {
            "name": "Dario Pavllo",
            "github_id": "dariopavllo"
        },
        {
            "name": "Dexter Ju",
            "github_id": "dexterju27"
        },
        {
            "name": "Dmitry Vinnik",
            "github_id": "dmitryvinn"
        },
        {
            "name": "Dongjin Na",
            "email": "dongjin.na@samsung.com",
            "github_id": "nadongguri"
        },
        {
            "name": "Edresson Casanova",
            "email": "edresson1@gmail.com",
            "github_id": "Edresson"
        },
        {
            "name": "Emanuele Bugliarello",
            "github_id": "e-bug"
        },
        {
            "name": "Facebook Community Bot",
            "github_id": "facebook-github-bot"
        },
        {
            "name": "Fady Essam",
            "email": "fadyesam1996@gmail.com",
            "github_id": "FadyEssam"
        },
        {
            "name": "felixgwu",
            "github_id": "felixgwu"
        },
        {
            "name": "Frank Seide",
            "github_id": "frankseide"
        },
        {
            "name": "Frankie Robertson",
            "github_id": "frankier"
        },
        {
            "name": "Gerard I. G\u00e1llego",
            "email": "gerard.gaol@gmail.com",
            "github_id": "gegallego"
        },
        {
            "name": "Hafiz Shafruddin",
            "github_id": "gmhafiz"
        },
        {
            "name": "Haoming Jiang",
            "email": "jianghm.ustc@gmail.com",
            "github_id": "HMJiangGatech"
        },
        {
            "name": "Harveen Singh Chadha",
            "github_id": "harveenchadha"
        },
        {
            "name": "Helen Craig",
            "github_id": "hlncrg"
        },
        {
            "name": "Henry Dashwood",
            "email": "hcndashwood@gmail.com",
            "github_id": "HenryDashwood"
        },
        {
            "name": "Hetarth Chopra",
            "github_id": "choprahetarth"
        },
        {
            "name": "Hiromu Yakura",
            "email": "hiromu1996@gmail.com",
            "github_id": "hiromu"
        },
        {
            "name": "Hiroyuki Deguchi",
            "email": "deguchi.hiroyuki.db0@is.naist.jp",
            "github_id": "de9uch1"
        },
        {
            "name": "Hongfei Xu",
            "github_id": "anoidgit"
        },
        {
            "name": "Hu Xu",
            "github_id": "howardhsu"
        },
        {
            "name": "ilia-cher",
            "github_id": "ilia-cher"
        },
        {
            "name": "Ilia Kulikov",
            "email": "kulikov@cs.nyu.edu",
            "github_id": "uralik"
        },
        {
            "name": "iurii zdebskyi",
            "github_id": "izdeby"
        },
        {
            "name": "Jun Wang",
            "github_id": "lfthwjx"
        },
        {
            "name": "asmvolatile",
            "github_id": "asmvolatile"
        },
        {
            "name": "James Reed",
            "github_id": "jamesr66a"
        },
        {
            "name": "Jamie Morton",
            "github_id": "mortonjt"
        },
        {
            "name": "Jason Fried",
            "email": "me@jasonfried.info",
            "github_id": "fried"
        },
        {
            "name": "Jerry Zhang",
            "email": "jerryzh168@gmail.com",
            "github_id": "jerryzh168"
        },
        {
            "name": "Jiajun Shen",
            "email": "shenjiajun90@gmail.com",
            "github_id": "jiajunshen"
        },
        {
            "name": "JingboWang1997",
            "email": "wjbjimmy@gmail.com",
            "github_id": "JingboWang1997"
        },
        {
            "name": "Jo Chuang",
            "github_id": "josephch405"
        },
        {
            "name": "Johannes Villmow",
            "github_id": "villmow"
        },
        {
            "name": "John D. Pope",
            "email": "jp@bellgeorge.com",
            "github_id": "johndpope"
        },
        {
            "name": "timcheck",
            "github_id": "timcheck"
        },
        {
            "name": "Jose Fonollosa",
            "email": "jarfo@yahoo.com",
            "github_id": "jarfo"
        },
        {
            "name": "Joseph Spisak",
            "github_id": "jspisak"
        },
        {
            "name": "Kenneth Heafield",
            "github_id": "kpuatfb"
        },
        {
            "name": "Khoa Ho",
            "github_id": "khoa-ho"
        },
        {
            "name": "Koustuv Sinha",
            "email": "koustuv.sinha@mail.mcgill.ca",
            "github_id": "koustuvsinha"
        },
        {
            "name": "Kushal Lakhotia",
            "email": "lakhotia.kushal@gmail.com",
            "github_id": "hikushalhere"
        },
        {
            "name": "Li Dong",
            "email": "donglixp@gmail.com",
            "github_id": "donglixp"
        },
        {
            "name": "liangluofb",
            "github_id": "liangluofb"
        },
        {
            "name": "Liang Wang",
            "email": "wangliangpeking@gmail.com",
            "github_id": "intfloat"
        },
        {
            "name": "sliorde",
            "github_id": "sliorde"
        },
        {
            "name": "luciodery",
            "github_id": "luciodery"
        },
        {
            "name": "Maggie Li",
            "github_id": "MaggieMeow"
        },
        {
            "name": "MAKSYM DEL",
            "email": "max.del.edu@gmail.com",
            "github_id": "maksym-del"
        },
        {
            "name": "Mary Williamson",
            "github_id": "mwillwork"
        },
        {
            "name": "Mathias M\u00fcller",
            "github_id": "bricksdont"
        },
        {
            "name": "Max Ryabinin",
            "github_id": "mryab"
        },
        {
            "name": "Miguel Del-Agua",
            "github_id": "madelagua"
        },
        {
            "name": "Mohammad Sadegh Rasooli",
            "github_id": "rasoolims"
        },
        {
            "name": "Monideep De",
            "email": "monideep.de@gmail.com",
            "github_id": "MonideepDe"
        },
        {
            "name": "Nelson Liu",
            "github_id": "nelson-liu"
        },
        {
            "name": "Nithin Holla",
            "email": "nithin.holla7@gmail.com",
            "github_id": "Nithin-Holla"
        },
        {
            "name": "Noe Casas",
            "email": "contact@noecasas.com",
            "github_id": "noe"
        },
        {
            "name": "Oleksiy Syvokon",
            "email": "oleksiy.syvokon@gmail.com",
            "github_id": "asivokon"
        },
        {
            "name": "Onur \u00c7elebi",
            "github_id": "Celebio"
        },
        {
            "name": "Francisco Guzman",
            "github_id": "guzmanhe"
        },
        {
            "name": "Paul Michel",
            "email": "pmichel31415@gmail.Com",
            "github_id": "pmichel31415"
        },
        {
            "name": "Paul O\u2019Shannessy",
            "email": "paul@oshannessy.com",
            "github_id": "zpao"
        },
        {
            "name": "Pavel Soriano",
            "github_id": "psorianom"
        },
        {
            "name": "Peng LI",
            "email": "pengli09@gmail.com",
            "github_id": "pengli09"
        },
        {
            "name": "Pengcheng YIN",
            "email": "pcyin@cs.cmu.edu",
            "github_id": "pcyin"
        },
        {
            "name": "Pengzhi Gao",
            "email": "gpengzhi@gmail.com",
            "github_id": "gpengzhi"
        },
        {
            "name": "pichuang1984",
            "github_id": "pichuang1984"
        },
        {
            "name": "Bernie Huang",
            "email": "poyaoh@andrew.cmu.edu",
            "github_id": "berniebear"
        },
        {
            "name": "pd21989",
            "github_id": "pd21989"
        },
        {
            "name": "Qian Wang",
            "email": "wangqian5730@gmail.com",
            "github_id": "voidmagic"
        },
        {
            "name": "Qing Sun",
            "email": "sunqingtju@gmail.com",
            "github_id": "qingerVT"
        },
        {
            "name": "Rakesh Chada",
            "github_id": "rakeshchada"
        },
        {
            "name": "Raphael Scheible",
            "github_id": "scheiblr"
        },
        {
            "name": "Roman R\u00e4dle",
            "email": "roman.raedle@gmail.com",
            "github_id": "raedle"
        },
        {
            "name": "Sam Gross",
            "github_id": "colesbury"
        },
        {
            "name": "Samuel Marks",
            "github_id": "SamuelMarks"
        },
        {
            "name": "Sarthak Garg",
            "github_id": "sarthakgarg"
        },
        {
            "name": "Sathish Indurthi",
            "github_id": "sathishreddy"
        },
        {
            "name": "Sepehr Sameni",
            "email": "Sepehr.Sameni@gmail.com",
            "github_id": "Separius"
        },
        {
            "name": "Shagun Sodhani",
            "github_id": "shagunsodhani"
        },
        {
            "name": "Sharad Duwal",
            "email": "sharad.duwal@gmail.com",
            "github_id": "sharad461"
        },
        {
            "name": "Sharvil Nanavati",
            "github_id": "sharvil"
        },
        {
            "name": "gandalf2390",
            "github_id": "gandalf2390"
        },
        {
            "name": "Shiyan Deng",
            "github_id": "842974287"
        },
        {
            "name": "Shreyan B",
            "github_id": "shreyanb98"
        },
        {
            "name": "Shun Kiyono",
            "email": "shunk52@gmail.com",
            "github_id": "butsugiri"
        },
        {
            "name": "Siddharth Dalmia",
            "email": "sdalmia@andrew.cmu.edu",
            "github_id": "siddalmia"
        },
        {
            "name": "Simone Francia",
            "github_id": "simonefrancia"
        },
        {
            "name": "Sosuke Kobayashi",
            "github_id": "soskek"
        },
        {
            "name": "Stas Bekman",
            "github_id": "stas00"
        },
        {
            "name": "Stephan Peitz",
            "github_id": "stephanpeitz"
        },
        {
            "name": "h-sugi",
            "github_id": "h-sugi"
        },
        {
            "name": "Teng Li",
            "github_id": "teng-li"
        },
        {
            "name": "Tim Gates",
            "github_id": "timgates42"
        },
        {
            "name": "Tom\u00e1\u0161 Sou\u010dek",
            "email": "soucek.gns@gmail.com",
            "github_id": "soCzech"
        },
        {
            "name": "tonybruguier-fb",
            "github_id": "tonybruguier-fb"
        },
        {
            "name": "tonylekhtman",
            "github_id": "tonylekhtman"
        },
        {
            "name": "Uri Shaham",
            "github_id": "UriSha"
        },
        {
            "name": "Valentin Malykh",
            "github_id": "madrugado"
        },
        {
            "name": "Vasiliy",
            "email": "alvasian@yandex.ru",
            "github_id": "Alvant"
        },
        {
            "name": "Vincent QB, PhD",
            "github_id": "vincentqb"
        },
        {
            "name": "Vineel Pratap",
            "email": "vineelkpratap@gmail.com",
            "github_id": "vineelpratap"
        },
        {
            "name": "Vlad Lialin",
            "email": "Guitaricet@gmail.com",
            "github_id": "Guitaricet"
        },
        {
            "name": "vlad-karpukhin",
            "email": "vlad.karpuhin@gmail.com",
            "github_id": "vlad-karpukhin"
        },
        {
            "name": "Vladimir Smirnov",
            "email": "smivvla@gmail.com",
            "github_id": "smivv"
        },
        {
            "name": "xu3kev",
            "email": "kvlxu3@gmail.com",
            "github_id": "xu3kev"
        },
        {
            "name": "Xing Han Lu",
            "github_id": "xhlulu"
        },
        {
            "name": "Xing Zhou",
            "github_id": "xingz9"
        },
        {
            "name": "Yann N. Dauphin",
            "email": "yann@dauphin.io",
            "github_id": "ynd"
        },
        {
            "name": "Yash Kumar Atri",
            "email": "yashkumaratri@gmail.com",
            "github_id": "yashkumaratri"
        },
        {
            "name": "Yiding Tian",
            "email": "jaytin1218@hotmail.com",
            "github_id": "killa1218"
        },
        {
            "name": "Yossi Adi",
            "email": "yossiadidrum@gmail.com",
            "github_id": "adiyoss"
        },
        {
            "name": "Yu Yan",
            "email": "yuyan2do@gmail.com",
            "github_id": "yuyan2do"
        },
        {
            "name": "yunhongxu",
            "github_id": "yunhongxu"
        },
        {
            "name": "Yuriy Nazarov",
            "email": "nazarov.yuriy.pavlovich@gmail.com",
            "github_id": "nazarov-yuriy"
        },
        {
            "name": "Zihao Fu",
            "github_id": "fuzihaofzh"
        },
        {
            "name": "Zhiyi Ma",
            "github_id": "mazhiyi"
        },
        {
            "name": "Zrachel",
            "github_id": "Zrachel"
        },
        {
            "name": "Hikari",
            "email": "extsuioku@gmail.com",
            "github_id": "altale"
        },
        {
            "name": "ankur6ue",
            "github_id": "ankur6ue"
        },
        {
            "name": "Renren Jin",
            "email": "rrjin@outlook.com",
            "github_id": "cordercorder"
        },
        {
            "name": "dan_the_3rd",
            "github_id": "danthe3rd"
        },
        {
            "name": "DikshaMeghwal",
            "github_id": "DikshaMeghwal"
        },
        {
            "name": "Jiajia Ding",
            "email": "jiajia.ding@hotmail.com",
            "github_id": "djshowtime"
        },
        {
            "name": "erichan1",
            "github_id": "erichan1"
        },
        {
            "name": "eugene-kharitonov",
            "github_id": "eugene-kharitonov"
        },
        {
            "name": "frankang",
            "github_id": "frankang"
        },
        {
            "name": "Jiatong",
            "email": "jiatongs@andrew.cmu.edu",
            "github_id": "ftshijt"
        },
        {
            "name": "Kalyan Gvs",
            "github_id": "gvskalyan"
        },
        {
            "name": "Henry Zhou",
            "github_id": "HenryZhou7"
        },
        {
            "name": "higgsfield",
            "github_id": "higgsfield"
        },
        {
            "name": "devfon",
            "github_id": "Huffon"
        },
        {
            "name": "josephsuh357",
            "github_id": "josephsuh357"
        },
        {
            "name": "linkerr",
            "github_id": "linkerr"
        },
        {
            "name": "Kyoungmin Lee",
            "email": "k.lee@aitrics.com",
            "github_id": "strx2322"
        },
        {
            "name": "Denis",
            "github_id": "lukovnikov"
        },
        {
            "name": "Alexander Markovich",
            "github_id": "markovka17"
        },
        {
            "name": "michaelsalam",
            "github_id": "masonreznov"
        },
        {
            "name": "MichalTurski",
            "github_id": "MichalTurski"
        },
        {
            "name": "phantomcoder1996",
            "github_id": "phantomcoder1996"
        },
        {
            "name": "pritamdamania",
            "github_id": "pritamdamania"
        },
        {
            "name": "sarapapi",
            "github_id": "sarapapi"
        },
        {
            "name": "adamjosephjensen",
            "github_id": "adamjosephjensen"
        },
        {
            "name": "Nguyen Tu Anh",
            "email": "nguyentuanh208@gmail.com",
            "github_id": "tuanh208"
        },
        {
            "name": "vufg",
            "github_id": "vufg"
        },
        {
            "name": "wei zhao",
            "email": "zhaoweisjtuer@163.com",
            "github_id": "zhawe01"
        },
        {
            "name": "Yilin Yang",
            "github_id": "yilinyang7"
        },
        {
            "name": "zaemyung",
            "github_id": "zaemyung"
        },
        {
            "name": "zzxn",
            "email": "zzxnhackman@foxmail.com",
            "github_id": "zzxn"
        },
        {
            "name": "Aalok | \u0906\u0932\u094b\u0915 ",
            "github_id": "aalok-sathe"
        }
    ],
    "tags": [
        "python",
        "pytorch",
        "artificial-intelligence"
    ],
    "description": "Facebook AI Research Sequence-to-Sequence Toolkit written in Python.",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/pytorch/fairseq",
            "stars": 16482,
            "issues": true,
            "readme": "<p align=\"center\">\n  <img src=\"docs/fairseq_logo.png\" width=\"150\">\n  <br />\n  <br />\n  <a href=\"https://opensource.fb.com/support-ukraine\"><img alt=\"Support Ukraine\" src=\"https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&labelColor=005BBB\" /></a>\n  <a href=\"https://github.com/pytorch/fairseq/blob/main/LICENSE\"><img alt=\"MIT License\" src=\"https://img.shields.io/badge/license-MIT-blue.svg\" /></a>\n  <a href=\"https://github.com/pytorch/fairseq/releases\"><img alt=\"Latest Release\" src=\"https://img.shields.io/github/release/pytorch/fairseq.svg\" /></a>\n  <a href=\"https://github.com/pytorch/fairseq/actions?query=workflow:build\"><img alt=\"Build Status\" src=\"https://github.com/pytorch/fairseq/workflows/build/badge.svg\" /></a>\n  <a href=\"https://fairseq.readthedocs.io/en/latest/?badge=latest\"><img alt=\"Documentation Status\" src=\"https://readthedocs.org/projects/fairseq/badge/?version=latest\" /></a>\n</p>\n\n--------------------------------------------------------------------------------\n\nFairseq(-py) is a sequence modeling toolkit that allows researchers and\ndevelopers to train custom models for translation, summarization, language\nmodeling and other text generation tasks.\n\nWe provide reference implementations of various sequence modeling papers:\n\n<details><summary>List of implemented papers</summary><p>\n\n* **Convolutional Neural Networks (CNN)**\n  + [Language Modeling with Gated Convolutional Networks (Dauphin et al., 2017)](examples/language_model/conv_lm/README.md)\n  + [Convolutional Sequence to Sequence Learning (Gehring et al., 2017)](examples/conv_seq2seq/README.md)\n  + [Classical Structured Prediction Losses for Sequence to Sequence Learning (Edunov et al., 2018)](https://github.com/pytorch/fairseq/tree/classic_seqlevel)\n  + [Hierarchical Neural Story Generation (Fan et al., 2018)](examples/stories/README.md)\n  + [wav2vec: Unsupervised Pre-training for Speech Recognition (Schneider et al., 2019)](examples/wav2vec/README.md)\n* **LightConv and DynamicConv models**\n  + [Pay Less Attention with Lightweight and Dynamic Convolutions (Wu et al., 2019)](examples/pay_less_attention_paper/README.md)\n* **Long Short-Term Memory (LSTM) networks**\n  + Effective Approaches to Attention-based Neural Machine Translation (Luong et al., 2015)\n* **Transformer (self-attention) networks**\n  + Attention Is All You Need (Vaswani et al., 2017)\n  + [Scaling Neural Machine Translation (Ott et al., 2018)](examples/scaling_nmt/README.md)\n  + [Understanding Back-Translation at Scale (Edunov et al., 2018)](examples/backtranslation/README.md)\n  + [Adaptive Input Representations for Neural Language Modeling (Baevski and Auli, 2018)](examples/language_model/README.adaptive_inputs.md)\n  + [Lexically constrained decoding with dynamic beam allocation (Post & Vilar, 2018)](examples/constrained_decoding/README.md)\n  + [Transformer-XL: Attentive Language Models Beyond a Fixed-Length Context (Dai et al., 2019)](examples/truncated_bptt/README.md)\n  + [Adaptive Attention Span in Transformers (Sukhbaatar et al., 2019)](examples/adaptive_span/README.md)\n  + [Mixture Models for Diverse Machine Translation: Tricks of the Trade (Shen et al., 2019)](examples/translation_moe/README.md)\n  + [RoBERTa: A Robustly Optimized BERT Pretraining Approach (Liu et al., 2019)](examples/roberta/README.md)\n  + [Facebook FAIR's WMT19 News Translation Task Submission (Ng et al., 2019)](examples/wmt19/README.md)\n  + [Jointly Learning to Align and Translate with Transformer Models (Garg et al., 2019)](examples/joint_alignment_translation/README.md )\n  + [Multilingual Denoising Pre-training for Neural Machine Translation (Liu et at., 2020)](examples/mbart/README.md)\n  + [Neural Machine Translation with Byte-Level Subwords (Wang et al., 2020)](examples/byte_level_bpe/README.md)\n  + [Unsupervised Quality Estimation for Neural Machine Translation (Fomicheva et al., 2020)](examples/unsupervised_quality_estimation/README.md)\n  + [wav2vec 2.0: A Framework for Self-Supervised Learning of Speech Representations (Baevski et al., 2020)](examples/wav2vec/README.md)\n  + [Generating Medical Reports from Patient-Doctor Conversations Using Sequence-to-Sequence Models (Enarvi et al., 2020)](examples/pointer_generator/README.md)\n  + [Linformer: Self-Attention with Linear Complexity (Wang et al., 2020)](examples/linformer/README.md)\n  + [Cross-lingual Retrieval for Iterative Self-Supervised Training (Tran et al., 2020)](examples/criss/README.md)\n  + [Deep Transformers with Latent Depth (Li et al., 2020)](examples/latent_depth/README.md)\n  + [Unsupervised Cross-lingual Representation Learning for Speech Recognition (Conneau et al., 2020)](https://arxiv.org/abs/2006.13979)\n  + [Self-training and Pre-training are Complementary for Speech Recognition (Xu et al., 2020)](https://arxiv.org/abs/2010.11430)\n  + [Robust wav2vec 2.0: Analyzing Domain Shift in Self-Supervised Pre-Training (Hsu, et al., 2021)](https://arxiv.org/abs/2104.01027)\n  + [Unsupervised Speech Recognition (Baevski, et al., 2021)](https://arxiv.org/abs/2105.11084)\n  + [Simple and Effective Zero-shot Cross-lingual Phoneme Recognition (Xu et al., 2021)](https://arxiv.org/abs/2109.11680)\n  + [VideoCLIP: Contrastive Pre-training for Zero-shot Video-Text Understanding (Xu et. al., 2021)](https://arxiv.org/pdf/2109.14084.pdf)\n  + [VLM: Task-agnostic Video-Language Model Pre-training for Video Understanding (Xu et. al., 2021)](https://aclanthology.org/2021.findings-acl.370.pdf)\n  + [NormFormer: Improved Transformer Pretraining with Extra Normalization (Shleifer et. al, 2021)](examples/normformer/README.md)\n* **Non-autoregressive Transformers**\n  + Non-Autoregressive Neural Machine Translation (Gu et al., 2017)\n  + Deterministic Non-Autoregressive Neural Sequence Modeling by Iterative Refinement (Lee et al. 2018)\n  + Insertion Transformer: Flexible Sequence Generation via Insertion Operations (Stern et al. 2019)\n  + Mask-Predict: Parallel Decoding of Conditional Masked Language Models (Ghazvininejad et al., 2019)\n  + [Levenshtein Transformer (Gu et al., 2019)](examples/nonautoregressive_translation/README.md)\n* **Finetuning**\n  + [Better Fine-Tuning by Reducing Representational Collapse (Aghajanyan et al. 2020)](examples/rxf/README.md)\n\n</p></details>\n\n### What's New:\n* December 2021 [Released Direct speech-to-speech translation code](examples/speech_to_speech/README.md)\n* October 2021 [Released VideoCLIP and VLM models](examples/MMPT/README.md)\n* October 2021 [Released multilingual finetuned XLSR-53 model](examples/wav2vec/README.md)\n* September 2021 [`master` branch renamed to `main`](https://github.com/github/renaming).\n* July 2021 [Released DrNMT code](examples/discriminative_reranking_nmt/README.md)\n* July 2021 [Released Robust wav2vec 2.0 model](examples/wav2vec/README.md)\n* June 2021 [Released XLMR-XL and XLMR-XXL models](examples/xlmr/README.md)\n* May 2021 [Released Unsupervised Speech Recognition code](examples/wav2vec/unsupervised/README.md)\n* March 2021 [Added full parameter and optimizer state sharding + CPU offloading](examples/fully_sharded_data_parallel/README.md)\n* February 2021 [Added LASER training code](examples/laser/README.md)\n* December 2020: [Added Adaptive Attention Span code](examples/adaptive_span/README.md)\n* December 2020: [GottBERT model and code released](examples/gottbert/README.md)\n* November 2020: Adopted the [Hydra](https://github.com/facebookresearch/hydra) configuration framework\n  * [see documentation explaining how to use it for new and existing projects](docs/hydra_integration.md)\n* November 2020: [fairseq 0.10.0 released](https://github.com/pytorch/fairseq/releases/tag/v0.10.0)\n* October 2020: [Added R3F/R4F (Better Fine-Tuning) code](examples/rxf/README.md)\n* October 2020: [Deep Transformer with Latent Depth code released](examples/latent_depth/README.md)\n* October 2020: [Added CRISS models and code](examples/criss/README.md)\n\n<details><summary>Previous updates</summary><p>\n\n* September 2020: [Added Linformer code](examples/linformer/README.md)\n* September 2020: [Added pointer-generator networks](examples/pointer_generator/README.md)\n* August 2020: [Added lexically constrained decoding](examples/constrained_decoding/README.md)\n* August 2020: [wav2vec2 models and code released](examples/wav2vec/README.md)\n* July 2020: [Unsupervised Quality Estimation code released](examples/unsupervised_quality_estimation/README.md)\n* May 2020: [Follow fairseq on Twitter](https://twitter.com/fairseq)\n* April 2020: [Monotonic Multihead Attention code released](examples/simultaneous_translation/README.md)\n* April 2020: [Quant-Noise code released](examples/quant_noise/README.md)\n* April 2020: [Initial model parallel support and 11B parameters unidirectional LM released](examples/megatron_11b/README.md)\n* March 2020: [Byte-level BPE code released](examples/byte_level_bpe/README.md)\n* February 2020: [mBART model and code released](examples/mbart/README.md)\n* February 2020: [Added tutorial for back-translation](https://github.com/pytorch/fairseq/tree/main/examples/backtranslation#training-your-own-model-wmt18-english-german)\n* December 2019: [fairseq 0.9.0 released](https://github.com/pytorch/fairseq/releases/tag/v0.9.0)\n* November 2019: [VizSeq released (a visual analysis toolkit for evaluating fairseq models)](https://facebookresearch.github.io/vizseq/docs/getting_started/fairseq_example)\n* November 2019: [CamemBERT model and code released](examples/camembert/README.md)\n* November 2019: [BART model and code released](examples/bart/README.md)\n* November 2019: [XLM-R models and code released](examples/xlmr/README.md)\n* September 2019: [Nonautoregressive translation code released](examples/nonautoregressive_translation/README.md)\n* August 2019: [WMT'19 models released](examples/wmt19/README.md)\n* July 2019: fairseq relicensed under MIT license\n* July 2019: [RoBERTa models and code released](examples/roberta/README.md)\n* June 2019: [wav2vec models and code released](examples/wav2vec/README.md)\n\n</p></details>\n\n### Features:\n\n* multi-GPU training on one machine or across multiple machines (data and model parallel)\n* fast generation on both CPU and GPU with multiple search algorithms implemented:\n  + beam search\n  + Diverse Beam Search ([Vijayakumar et al., 2016](https://arxiv.org/abs/1610.02424))\n  + sampling (unconstrained, top-k and top-p/nucleus)\n  + [lexically constrained decoding](examples/constrained_decoding/README.md) (Post & Vilar, 2018)\n* [gradient accumulation](https://fairseq.readthedocs.io/en/latest/getting_started.html#large-mini-batch-training-with-delayed-updates) enables training with large mini-batches even on a single GPU\n* [mixed precision training](https://fairseq.readthedocs.io/en/latest/getting_started.html#training-with-half-precision-floating-point-fp16) (trains faster with less GPU memory on [NVIDIA tensor cores](https://developer.nvidia.com/tensor-cores))\n* [extensible](https://fairseq.readthedocs.io/en/latest/overview.html): easily register new models, criterions, tasks, optimizers and learning rate schedulers\n* [flexible configuration](docs/hydra_integration.md) based on [Hydra](https://github.com/facebookresearch/hydra) allowing a combination of code, command-line and file based configuration\n* [full parameter and optimizer state sharding](examples/fully_sharded_data_parallel/README.md)\n* [offloading parameters to CPU](examples/fully_sharded_data_parallel/README.md)\n\nWe also provide [pre-trained models for translation and language modeling](#pre-trained-models-and-examples)\nwith a convenient `torch.hub` interface:\n\n``` python\nen2de = torch.hub.load('pytorch/fairseq', 'transformer.wmt19.en-de.single_model')\nen2de.translate('Hello world', beam=5)\n# 'Hallo Welt'\n```\n\nSee the PyTorch Hub tutorials for [translation](https://pytorch.org/hub/pytorch_fairseq_translation/)\nand [RoBERTa](https://pytorch.org/hub/pytorch_fairseq_roberta/) for more examples.\n\n# Requirements and Installation\n\n* [PyTorch](http://pytorch.org/) version >= 1.5.0\n* Python version >= 3.6\n* For training new models, you'll also need an NVIDIA GPU and [NCCL](https://github.com/NVIDIA/nccl)\n* **To install fairseq** and develop locally:\n\n``` bash\ngit clone https://github.com/pytorch/fairseq\ncd fairseq\npip install --editable ./\n\n# on MacOS:\n# CFLAGS=\"-stdlib=libc++\" pip install --editable ./\n\n# to install the latest stable release (0.10.x)\n# pip install fairseq\n```\n\n* **For faster training** install NVIDIA's [apex](https://github.com/NVIDIA/apex) library:\n\n``` bash\ngit clone https://github.com/NVIDIA/apex\ncd apex\npip install -v --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" \\\n  --global-option=\"--deprecated_fused_adam\" --global-option=\"--xentropy\" \\\n  --global-option=\"--fast_multihead_attn\" ./\n```\n\n* **For large datasets** install [PyArrow](https://arrow.apache.org/docs/python/install.html#using-pip): `pip install pyarrow`\n* If you use Docker make sure to increase the shared memory size either with `--ipc=host` or `--shm-size`\n as command line options to `nvidia-docker run` .\n\n# Getting Started\n\nThe [full documentation](https://fairseq.readthedocs.io/) contains instructions\nfor getting started, training new models and extending fairseq with new model\ntypes and tasks.\n\n# Pre-trained models and examples\n\nWe provide pre-trained models and pre-processed, binarized test sets for several tasks listed below,\nas well as example training and evaluation commands.\n\n* [Translation](examples/translation/README.md): convolutional and transformer models are available\n* [Language Modeling](examples/language_model/README.md): convolutional and transformer models are available\n\nWe also have more detailed READMEs to reproduce results from specific papers:\n\n* [XLS-R: Self-supervised Cross-lingual Speech Representation Learning at Scale (Babu et al., 2021)](examples/wav2vec/xlsr/README.md)\n* [Cross-lingual Retrieval for Iterative Self-Supervised Training (Tran et al., 2020)](examples/criss/README.md)\n* [wav2vec 2.0: A Framework for Self-Supervised Learning of Speech Representations (Baevski et al., 2020)](examples/wav2vec/README.md)\n* [Unsupervised Quality Estimation for Neural Machine Translation (Fomicheva et al., 2020)](examples/unsupervised_quality_estimation/README.md)\n* [Training with Quantization Noise for Extreme Model Compression ({Fan*, Stock*} et al., 2020)](examples/quant_noise/README.md)\n* [Neural Machine Translation with Byte-Level Subwords (Wang et al., 2020)](examples/byte_level_bpe/README.md)\n* [Multilingual Denoising Pre-training for Neural Machine Translation (Liu et at., 2020)](examples/mbart/README.md)\n* [Reducing Transformer Depth on Demand with Structured Dropout (Fan et al., 2019)](examples/layerdrop/README.md)\n* [Jointly Learning to Align and Translate with Transformer Models (Garg et al., 2019)](examples/joint_alignment_translation/README.md)\n* [Levenshtein Transformer (Gu et al., 2019)](examples/nonautoregressive_translation/README.md)\n* [Facebook FAIR's WMT19 News Translation Task Submission (Ng et al., 2019)](examples/wmt19/README.md)\n* [RoBERTa: A Robustly Optimized BERT Pretraining Approach (Liu et al., 2019)](examples/roberta/README.md)\n* [wav2vec: Unsupervised Pre-training for Speech Recognition (Schneider et al., 2019)](examples/wav2vec/README.md)\n* [Mixture Models for Diverse Machine Translation: Tricks of the Trade (Shen et al., 2019)](examples/translation_moe/README.md)\n* [Pay Less Attention with Lightweight and Dynamic Convolutions (Wu et al., 2019)](examples/pay_less_attention_paper/README.md)\n* [Understanding Back-Translation at Scale (Edunov et al., 2018)](examples/backtranslation/README.md)\n* [Classical Structured Prediction Losses for Sequence to Sequence Learning (Edunov et al., 2018)](https://github.com/pytorch/fairseq/tree/classic_seqlevel)\n* [Hierarchical Neural Story Generation (Fan et al., 2018)](examples/stories/README.md)\n* [Scaling Neural Machine Translation (Ott et al., 2018)](examples/scaling_nmt/README.md)\n* [Convolutional Sequence to Sequence Learning (Gehring et al., 2017)](examples/conv_seq2seq/README.md)\n* [Language Modeling with Gated Convolutional Networks (Dauphin et al., 2017)](examples/language_model/README.conv.md)\n\n# Join the fairseq community\n\n* Twitter: https://twitter.com/fairseq\n* Facebook page: https://www.facebook.com/groups/fairseq.users\n* Google group: https://groups.google.com/forum/#!forum/fairseq-users\n\n# License\n\nfairseq(-py) is MIT-licensed.\nThe license applies to the pre-trained models as well.\n\n# Citation\n\nPlease cite as:\n\n``` bibtex\n@inproceedings{ott2019fairseq,\n  title = {fairseq: A Fast, Extensible Toolkit for Sequence Modeling},\n  author = {Myle Ott and Sergey Edunov and Alexei Baevski and Angela Fan and Sam Gross and Nathan Ng and David Grangier and Michael Auli},\n  booktitle = {Proceedings of NAACL-HLT 2019: Demonstrations},\n  year = {2019},\n}\n```\n",
            "readme_url": "https://github.com/pytorch/fairseq",
            "frameworks": [
                "PyTorch",
                "NLTK",
                "scikit-learn",
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "Unsupervised Cross-lingual Representation Learning for Speech Recognition",
            "arxiv": "2006.13979",
            "year": 2020,
            "url": "http://arxiv.org/abs/2006.13979v2",
            "abstract": "This paper presents XLSR which learns cross-lingual speech representations by\npretraining a single model from the raw waveform of speech in multiple\nlanguages. We build on wav2vec 2.0 which is trained by solving a contrastive\ntask over masked latent speech representations and jointly learns a\nquantization of the latents shared across languages. The resulting model is\nfine-tuned on labeled data and experiments show that cross-lingual pretraining\nsignificantly outperforms monolingual pretraining. On the CommonVoice\nbenchmark, XLSR shows a relative phoneme error rate reduction of 72% compared\nto the best known results. On BABEL, our approach improves word error rate by\n16% relative compared to a comparable system. Our approach enables a single\nmultilingual speech recognition model which is competitive to strong individual\nmodels. Analysis shows that the latent discrete speech representations are\nshared across languages with increased sharing for related languages. We hope\nto catalyze research in low-resource speech understanding by releasing XLSR-53,\na large model pretrained in 53 languages.",
            "authors": [
                "Alexis Conneau",
                "Alexei Baevski",
                "Ronan Collobert",
                "Abdelrahman Mohamed",
                "Michael Auli"
            ]
        },
        {
            "title": "Robust wav2vec 2.0: Analyzing Domain Shift in Self-Supervised Pre-Training",
            "arxiv": "2104.01027",
            "year": 2021,
            "url": "http://arxiv.org/abs/2104.01027v2",
            "abstract": "Self-supervised learning of speech representations has been a very active\nresearch area but most work is focused on a single domain such as read audio\nbooks for which there exist large quantities of labeled and unlabeled data. In\nthis paper, we explore more general setups where the domain of the unlabeled\ndata for pre-training data differs from the domain of the labeled data for\nfine-tuning, which in turn may differ from the test data domain. Our\nexperiments show that using target domain data during pre-training leads to\nlarge performance improvements across a variety of setups. On a large-scale\ncompetitive setup, we show that pre-training on unlabeled in-domain data\nreduces the gap between models trained on in-domain and out-of-domain labeled\ndata by 66%-73%. This has obvious practical implications since it is much\neasier to obtain unlabeled target domain data than labeled data. Moreover, we\nfind that pre-training on multiple domains improves generalization performance\non domains not seen during training. Code and models will be made available at\nhttps://github.com/pytorch/fairseq.",
            "authors": [
                "Wei-Ning Hsu",
                "Anuroop Sriram",
                "Alexei Baevski",
                "Tatiana Likhomanenko",
                "Qiantong Xu",
                "Vineel Pratap",
                "Jacob Kahn",
                "Ann Lee",
                "Ronan Collobert",
                "Gabriel Synnaeve",
                "Michael Auli"
            ]
        },
        {
            "title": "Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence Models",
            "arxiv": "1610.02424",
            "year": 2016,
            "url": "http://arxiv.org/abs/1610.02424v2",
            "abstract": "Neural sequence models are widely used to model time-series data. Equally\nubiquitous is the usage of beam search (BS) as an approximate inference\nalgorithm to decode output sequences from these models. BS explores the search\nspace in a greedy left-right fashion retaining only the top-B candidates -\nresulting in sequences that differ only slightly from each other. Producing\nlists of nearly identical sequences is not only computationally wasteful but\nalso typically fails to capture the inherent ambiguity of complex AI tasks. To\novercome this problem, we propose Diverse Beam Search (DBS), an alternative to\nBS that decodes a list of diverse outputs by optimizing for a\ndiversity-augmented objective. We observe that our method finds better top-1\nsolutions by controlling for the exploration and exploitation of the search\nspace - implying that DBS is a better search algorithm. Moreover, these gains\nare achieved with minimal computational or memory over- head as compared to\nbeam search. To demonstrate the broad applicability of our method, we present\nresults on image captioning, machine translation and visual question generation\nusing both standard quantitative metrics and qualitative human studies.\nFurther, we study the role of diversity for image-grounded language generation\ntasks as the complexity of the image changes. We observe that our method\nconsistently outperforms BS and previously proposed techniques for diverse\ndecoding from neural sequence models.",
            "authors": [
                "Ashwin K Vijayakumar",
                "Michael Cogswell",
                "Ramprasath R. Selvaraju",
                "Qing Sun",
                "Stefan Lee",
                "David Crandall",
                "Dhruv Batra"
            ]
        },
        {
            "title": "Unsupervised Speech Recognition",
            "arxiv": "2105.11084",
            "year": 2021,
            "url": "http://arxiv.org/abs/2105.11084v2",
            "abstract": "Despite rapid progress in the recent past, current speech recognition systems\nstill require labeled training data which limits this technology to a small\nfraction of the languages spoken around the globe. This paper describes\nwav2vec-U, short for wav2vec Unsupervised, a method to train speech recognition\nmodels without any labeled data. We leverage self-supervised speech\nrepresentations to segment unlabeled audio and learn a mapping from these\nrepresentations to phonemes via adversarial training. The right representations\nare key to the success of our method. Compared to the best previous\nunsupervised work, wav2vec-U reduces the phoneme error rate on the TIMIT\nbenchmark from 26.1 to 11.3. On the larger English Librispeech benchmark,\nwav2vec-U achieves a word error rate of 5.9 on test-other, rivaling some of the\nbest published systems trained on 960 hours of labeled data from only two years\nago. We also experiment on nine other languages, including low-resource\nlanguages such as Kyrgyz, Swahili and Tatar.",
            "authors": [
                "Alexei Baevski",
                "Wei-Ning Hsu",
                "Alexis Conneau",
                "Michael Auli"
            ]
        },
        {
            "title": "VideoCLIP: Contrastive Pre-training for Zero-shot Video-Text Understanding",
            "arxiv": "2109.14084",
            "year": 2021,
            "url": "http://arxiv.org/abs/2109.14084v2",
            "abstract": "We present VideoCLIP, a contrastive approach to pre-train a unified model for\nzero-shot video and text understanding, without using any labels on downstream\ntasks. VideoCLIP trains a transformer for video and text by contrasting\ntemporally overlapping positive video-text pairs with hard negatives from\nnearest neighbor retrieval. Our experiments on a diverse series of downstream\ntasks, including sequence-level text-video retrieval, VideoQA, token-level\naction localization, and action segmentation reveal state-of-the-art\nperformance, surpassing prior work, and in some cases even outperforming\nsupervised approaches. Code is made available at\nhttps://github.com/pytorch/fairseq/tree/main/examples/MMPT.",
            "authors": [
                "Hu Xu",
                "Gargi Ghosh",
                "Po-Yao Huang",
                "Dmytro Okhonko",
                "Armen Aghajanyan",
                "Florian Metze",
                "Luke Zettlemoyer",
                "Christoph Feichtenhofer"
            ]
        },
        {
            "title": "Simple and Effective Zero-shot Cross-lingual Phoneme Recognition",
            "arxiv": "2109.11680",
            "year": 2021,
            "url": "http://arxiv.org/abs/2109.11680v1",
            "abstract": "Recent progress in self-training, self-supervised pretraining and\nunsupervised learning enabled well performing speech recognition systems\nwithout any labeled data. However, in many cases there is labeled data\navailable for related languages which is not utilized by these methods. This\npaper extends previous work on zero-shot cross-lingual transfer learning by\nfine-tuning a multilingually pretrained wav2vec 2.0 model to transcribe unseen\nlanguages. This is done by mapping phonemes of the training languages to the\ntarget language using articulatory features. Experiments show that this simple\nmethod significantly outperforms prior work which introduced task-specific\narchitectures and used only part of a monolingually pretrained model.",
            "authors": [
                "Qiantong Xu",
                "Alexei Baevski",
                "Michael Auli"
            ]
        },
        {
            "title": "Self-training and Pre-training are Complementary for Speech Recognition",
            "arxiv": "2010.11430",
            "year": 2020,
            "url": "http://arxiv.org/abs/2010.11430v1",
            "abstract": "Self-training and unsupervised pre-training have emerged as effective\napproaches to improve speech recognition systems using unlabeled data. However,\nit is not clear whether they learn similar patterns or if they can be\neffectively combined. In this paper, we show that pseudo-labeling and\npre-training with wav2vec 2.0 are complementary in a variety of labeled data\nsetups. Using just 10 minutes of labeled data from Libri-light as well as 53k\nhours of unlabeled data from LibriVox achieves WERs of 3.0%/5.2% on the clean\nand other test sets of Librispeech - rivaling the best published systems\ntrained on 960 hours of labeled data only a year ago. Training on all labeled\ndata of Librispeech achieves WERs of 1.5%/3.1%.",
            "authors": [
                "Qiantong Xu",
                "Alexei Baevski",
                "Tatiana Likhomanenko",
                "Paden Tomasello",
                "Alexis Conneau",
                "Ronan Collobert",
                "Gabriel Synnaeve",
                "Michael Auli"
            ]
        },
        {
            "year": "2019",
            "booktitle": "Proceedings of NAACL-HLT 2019: Demonstrations",
            "author": [
                "Ott, Myle",
                "Edunov, Sergey",
                "Baevski, Alexei",
                "Fan, Angela",
                "Gross, Sam",
                "Ng, Nathan",
                "Grangier, David",
                "Auli, Michael"
            ],
            "title": "fairseq: A Fast, Extensible Toolkit for Sequence Modeling",
            "ENTRYTYPE": "inproceedings",
            "ID": "ott2019fairseq",
            "authors": [
                "Ott, Myle",
                "Edunov, Sergey",
                "Baevski, Alexei",
                "Fan, Angela",
                "Gross, Sam",
                "Ng, Nathan",
                "Grangier, David",
                "Auli, Michael"
            ]
        },
        {
            "title": "gradient accumulation",
            "url": "https://fairseq.readthedocs.io/en/latest/getting_started.html#large-mini-batch-training-with-delayed-updates"
        },
        {
            "title": "mixed precision training",
            "url": "https://fairseq.readthedocs.io/en/latest/getting_started.html#training-with-half-precision-floating-point-fp16"
        },
        {
            "title": "extensible",
            "url": "https://fairseq.readthedocs.io/en/latest/overview.html"
        },
        {
            "title": "PyTorch",
            "url": "http://pytorch.org/"
        },
        {
            "title": "Classical Structured Prediction Losses for Sequence to Sequence Learning (Edunov et al., 2018)",
            "url": "https://github.com/pytorch/fairseq/tree/classic_seqlevel"
        }
    ],
    "domain": {
        "domain_type": "Natural Language Processing",
        "domain_prob": 0.9996204719099889,
        "task": "Machine Translation",
        "task_prob": 0.9806863356852246
    },
    "training": {
        "datasets": [
            {
                "name": "TIMIT"
            },
            {
                "name": "Librispeech"
            }
        ]
    }
}