{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "Interpolating high granularity solar generation and load consumption power data using SRGAN",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "tomtrac",
                "owner_type": "User",
                "name": "SRGAN_power_data_generation",
                "url": "https://github.com/tomtrac/SRGAN_power_data_generation",
                "stars": 0,
                "pushed_at": "2021-07-25 03:57:50+00:00",
                "created_at": "2021-01-13 23:51:30+00:00",
                "language": "Python",
                "description": "The code implementation for interpolating high granularity solar generation and load consumption power data using super resolution generative adversarial network (SRGAN)",
                "license": "MIT License",
                "frameworks": [
                    "Keras",
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "e539ce7ffeba31ee3f738645fdd0afdca9b2b952",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/tomtrac/SRGAN_power_data_generation/blob/main/LICENSE"
                    }
                },
                "size": 1065
            },
            {
                "type": "code",
                "name": "SRGAN_test.py",
                "sha": "247b1e1c70b81a08754569ef18073bb999fc6ef5",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/tomtrac/SRGAN_power_data_generation/blob/main/SRGAN_test.py"
                    }
                },
                "size": 2355
            },
            {
                "type": "code",
                "name": "SRGAN_train.py",
                "sha": "ae5bb47eb3139dae0dee0d3ac1d2dad65358a484",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/tomtrac/SRGAN_power_data_generation/blob/main/SRGAN_train.py"
                    }
                },
                "size": 8788
            },
            {
                "type": "code",
                "name": "datasets.py",
                "sha": "cbc30fb030ae22ee748bc4d8c6461b547486656f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/tomtrac/SRGAN_power_data_generation/blob/main/datasets.py"
                    }
                },
                "size": 658
            },
            {
                "type": "code",
                "name": "networks.py",
                "sha": "6c8b617dd7852ae294e104e8164126536779a43b",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/tomtrac/SRGAN_power_data_generation/blob/main/networks.py"
                    }
                },
                "size": 3863
            },
            {
                "type": "code",
                "name": "pre_trained_models",
                "sha": "af045ee80bf60934b8805ee06c42ecbc2ea723c4",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/tomtrac/SRGAN_power_data_generation/tree/main/pre_trained_models"
                    }
                },
                "num_files": 4
            }
        ]
    },
    "authors": [
        {
            "name": "Rui Tang",
            "email": "tomtrac@hotmail.com",
            "github_id": "tomtrac"
        }
    ],
    "tags": [],
    "description": "The code implementation for interpolating high granularity solar generation and load consumption power data using super resolution generative adversarial network (SRGAN)",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/tomtrac/SRGAN_power_data_generation",
            "stars": 0,
            "issues": true,
            "readme": "# Interpolating high granularity solar generation and load consumption power data using SRGAN\nThe code implementation for interpolating high granularity solar generation and load consumption power data using super resolution generative adversarial network (SRGAN). This work has been published on Applied Energy: http://dx.doi.org/10.1016/j.apenergy.2021.117297.\nThe original SRGAN work can be found here: https://arxiv.org/abs/1609.04802.\n## Introduction\nTo date, most open access public smart meter datasets are still at 30-minute or hourly temporal resolution. While this level of granularity could be sufficient for billing or deriving aggregated generation or consumption patterns, it may not fully capture the weather transients or consumption spikes. One potential solution is to synthetically interpolate high resolution data from commonly accessible lower resolution data, for this work, the SRGAN model is used for this purpose.\n## Requirements\n* Python 2.7.13 \n* tensorflow==1.9.0\n* Keras==2.2.4\n* numpy==1.15.2\n* pandas==0.23.4\n## Datasets\nThe pretrained models are trained using one year of PV & consumption power data of 2340 Australian households, collected by Solar Analytics (https://www.solaranalytics.com/au/) via Wattwatcher energy monitors (https://wattwatchers.com.au/).\n## Files\n* pre_trained_models/: directory for the four pre-trained models which interpolate PV & load from 30-minute & hourly measurements.\n* datasets.py: functions to load training/evaluation datasets.\n* networks.py: model architectures for the generator and discriminator.\n* SRGAN_train.py: script to train a SRGAN model.\n* SRGAN_test.py: script to generate 5-minute PV or load data using a trained SRGAN model.\n## Code References\nThe codes are built upon the SRGAN implementation from https://github.com/deepak112/Keras-SRGAN and the DCGAN implementation from https://github.com/eriklindernoren/Keras-GAN.\n",
            "readme_url": "https://github.com/tomtrac/SRGAN_power_data_generation",
            "frameworks": [
                "Keras",
                "TensorFlow"
            ]
        }
    ],
    "references": [
        {
            "title": "Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network",
            "arxiv": "1609.04802",
            "year": 2016,
            "url": "http://arxiv.org/abs/1609.04802v5",
            "abstract": "Despite the breakthroughs in accuracy and speed of single image\nsuper-resolution using faster and deeper convolutional neural networks, one\ncentral problem remains largely unsolved: how do we recover the finer texture\ndetails when we super-resolve at large upscaling factors? The behavior of\noptimization-based super-resolution methods is principally driven by the choice\nof the objective function. Recent work has largely focused on minimizing the\nmean squared reconstruction error. The resulting estimates have high peak\nsignal-to-noise ratios, but they are often lacking high-frequency details and\nare perceptually unsatisfying in the sense that they fail to match the fidelity\nexpected at the higher resolution. In this paper, we present SRGAN, a\ngenerative adversarial network (GAN) for image super-resolution (SR). To our\nknowledge, it is the first framework capable of inferring photo-realistic\nnatural images for 4x upscaling factors. To achieve this, we propose a\nperceptual loss function which consists of an adversarial loss and a content\nloss. The adversarial loss pushes our solution to the natural image manifold\nusing a discriminator network that is trained to differentiate between the\nsuper-resolved images and original photo-realistic images. In addition, we use\na content loss motivated by perceptual similarity instead of similarity in\npixel space. Our deep residual network is able to recover photo-realistic\ntextures from heavily downsampled images on public benchmarks. An extensive\nmean-opinion-score (MOS) test shows hugely significant gains in perceptual\nquality using SRGAN. The MOS scores obtained with SRGAN are closer to those of\nthe original high-resolution images than to those obtained with any\nstate-of-the-art method.",
            "authors": [
                "Christian Ledig",
                "Lucas Theis",
                "Ferenc Huszar",
                "Jose Caballero",
                "Andrew Cunningham",
                "Alejandro Acosta",
                "Andrew Aitken",
                "Alykhan Tejani",
                "Johannes Totz",
                "Zehan Wang",
                "Wenzhe Shi"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.999534603741273,
        "task": "Image Generation",
        "task_prob": 0.9489039054026005
    }
}