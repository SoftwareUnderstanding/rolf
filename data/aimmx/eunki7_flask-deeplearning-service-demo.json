{
    "visibility": {
        "visibility": "public",
        "license": "GNU General Public License v3.0"
    },
    "name": "Deploy Deeplearning Model with Flask-Restplus, Swagger as Demo app",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "eunki7",
                "owner_type": "User",
                "name": "flask-deeplearning-service-demo",
                "url": "https://github.com/eunki7/flask-deeplearning-service-demo",
                "stars": 1,
                "pushed_at": "2021-05-29 03:09:16+00:00",
                "created_at": "2021-04-20 07:33:25+00:00",
                "language": "Python",
                "description": "Deep Learning model(Image classfication, BeautyGAN) using Flask Swagger Based flask-restplus",
                "license": "GNU General Public License v3.0",
                "frameworks": [
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "964444e2aef515ae7fa63d7814167b06e8881f3c",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/eunki7/flask-deeplearning-service-demo/blob/master/.gitignore"
                    }
                },
                "size": 343
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "8df43b95305cb53fe98039bf83046ec0c957ab93",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/eunki7/flask-deeplearning-service-demo/blob/master/LICENSE"
                    }
                },
                "size": 34599
            },
            {
                "type": "code",
                "name": "app.py",
                "sha": "943ad1ceab3e495e5b4911bb34a148c50c7dc633",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/eunki7/flask-deeplearning-service-demo/blob/master/app.py"
                    }
                },
                "size": 2546
            },
            {
                "type": "code",
                "name": "app_rest.py",
                "sha": "6a5e5a9d7b2e77d581da5838d24cb9539cd497d7",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/eunki7/flask-deeplearning-service-demo/blob/master/app_rest.py"
                    }
                },
                "size": 4488
            },
            {
                "type": "code",
                "name": "docs",
                "sha": "f7e331ea4347e8fcfe1295548349ff2c6af74fc8",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/eunki7/flask-deeplearning-service-demo/tree/master/docs"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "mlib",
                "sha": "e67e18417fdbee9e7aaaaff44033ad92718dae95",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/eunki7/flask-deeplearning-service-demo/tree/master/mlib"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "models",
                "sha": "1464842cdd1d121e02e74cffbf68d5b6440bf985",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/eunki7/flask-deeplearning-service-demo/tree/master/models"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "f081b1420f97997645d8a9a19aa8d727b00c13b6",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/eunki7/flask-deeplearning-service-demo/blob/master/requirements.txt"
                    }
                },
                "size": 106
            },
            {
                "type": "code",
                "name": "static",
                "sha": "9774bfebf24897f4c422c3f38e0e31821f9e7cbb",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/eunki7/flask-deeplearning-service-demo/tree/master/static"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "templates",
                "sha": "ac5717181e4b2a68e86c26c467959d0eaed0c49e",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/eunki7/flask-deeplearning-service-demo/tree/master/templates"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "utils",
                "sha": "5b2f649c2c104c342ee9505201cc2b63fc914bc4",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/eunki7/flask-deeplearning-service-demo/tree/master/utils"
                    }
                },
                "num_files": 1
            }
        ]
    },
    "authors": [
        {
            "name": "EUNKI,KIM",
            "email": "outsider7224@hanmail.net",
            "github_id": "eunki7"
        }
    ],
    "tags": [],
    "description": "Deep Learning model(Image classfication, BeautyGAN) using Flask Swagger Based flask-restplus",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/eunki7/flask-deeplearning-service-demo",
            "stars": 1,
            "issues": true,
            "readme": "# Deploy Deeplearning Model with Flask-Restplus, Swagger as Demo app\n[![Apache license](https://img.shields.io/badge/license-Apache-blue)](http://perso.crans.org/besson/LICENSE.html)\n[![](https://img.shields.io/badge/python-3.6%2B-green.svg)]()\n\n> A BeautyGAN and MobileNet model using web demo based flask, flask-restplus, swagger\n\n## Introduction\n------------------\n*BeautyGAN*: Instance-level Facial Makeup Transfer with Deep Generative Adversarial Network\n\n- Website: [http://liusi-group.com/projects/BeautyGAN](http://liusi-group.com/projects/BeautyGAN)\n\n*MobileNetV2*: Computer Vision and PatternRecognition\n\n- Website: [https://arxiv.org/abs/1801.04381](https://arxiv.org/abs/1801.04381)\n\nUsage\n\n- Python 3.6+\n- Tensorflow 1.x\n\nDownload pretrained models\n\n- [https://pan.baidu.com/s/1wngvgT0qzcKJ5LfLMO7m8A](https://pan.baidu.com/s/1wngvgT0qzcKJ5LfLMO7m8A)\n- [https://drive.google.com/drive/folders/1pgVqnF2-rnOxcUQ3SO4JwHUFTdiSe5t9](https://drive.google.com/drive/folders/1pgVqnF2-rnOxcUQ3SO4JwHUFTdiSe5t9)\n\nSave pretrained model, index, checkpoint to `models/model_p2`\n\n```\n.\n+--docs\n+--mlib\n+--models\n|   +-- model_dlib\n|   +-- model_p2 -> make folder, here save models\n+--static\n...\n```\n## Screenshots\n------------------\nSwagger main\n\n![intro1](docs/intro1.png \"intro1\")\n\nBeautyGAN main\n\n![intro2](docs/intro2.png \"intro2\")\n\n\n## Getting Started\n------------------\n\n#### 1.Download or clone source code from github.\n```shell\n$ cd flask-deeplearning-service-demo\n```\n#### 2.Install Python packages\n```shell\n$ pip install -r requirements.txt\n```\n#### 3. Run(flask nomarl mode or flask-restapi mode)\n```shell\n$ python app.py\nor\n$ python app_rest.py\n```\nIt will deploy :\n\n- Flask app running in [http://localhost:8080](http://localhost:8080)\n- Flask normal mode(optional)\n- Flask rest-plus mode with swagger(optional)\n\n## Features\n------------------\n- Responsible UI\n- Support image drag-and-drop\n- Use vanilla JavaScript, HTML and CSS\n- RestAPI exception handling\n- Dlib facing shape predictor landmark\n\n## Demos\n------------------\nImage classification demo\n\n![demo1](docs/demo1.gif \"demo1\")\n\nImage beautyGAN demo\n\n![demo2](docs/demo2.gif \"demo2\")\n\n## Dependencies:\n------------------\n- [BeautyGAN](http://liusi-group.com/projects/BeautyGAN)\n- [MobileNetV2](https://arxiv.org/abs/1801.04381)\n- [dlib](http://dlib.net/)  \n- [opencv-python](http://docs.opencv.org/3.0-beta/doc/py_tutorials/py_tutorials.html)\n\n## License\n------------------\n[GPL License](LICENSE)",
            "readme_url": "https://github.com/eunki7/flask-deeplearning-service-demo",
            "frameworks": [
                "TensorFlow"
            ]
        }
    ],
    "references": [
        {
            "title": "MobileNetV2: Inverted Residuals and Linear Bottlenecks",
            "arxiv": "1801.04381",
            "year": 2018,
            "url": "http://arxiv.org/abs/1801.04381v4",
            "abstract": "In this paper we describe a new mobile architecture, MobileNetV2, that\nimproves the state of the art performance of mobile models on multiple tasks\nand benchmarks as well as across a spectrum of different model sizes. We also\ndescribe efficient ways of applying these mobile models to object detection in\na novel framework we call SSDLite. Additionally, we demonstrate how to build\nmobile semantic segmentation models through a reduced form of DeepLabv3 which\nwe call Mobile DeepLabv3.\n  The MobileNetV2 architecture is based on an inverted residual structure where\nthe input and output of the residual block are thin bottleneck layers opposite\nto traditional residual models which use expanded representations in the input\nan MobileNetV2 uses lightweight depthwise convolutions to filter features in\nthe intermediate expansion layer. Additionally, we find that it is important to\nremove non-linearities in the narrow layers in order to maintain\nrepresentational power. We demonstrate that this improves performance and\nprovide an intuition that led to this design. Finally, our approach allows\ndecoupling of the input/output domains from the expressiveness of the\ntransformation, which provides a convenient framework for further analysis. We\nmeasure our performance on Imagenet classification, COCO object detection, VOC\nimage segmentation. We evaluate the trade-offs between accuracy, and number of\noperations measured by multiply-adds (MAdd), as well as the number of\nparameters",
            "authors": [
                "Mark Sandler",
                "Andrew Howard",
                "Menglong Zhu",
                "Andrey Zhmoginov",
                "Liang-Chieh Chen"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9989517515071243,
        "task": "Object Detection",
        "task_prob": 0.5638902936966482
    },
    "training": {
        "datasets": [
            {
                "name": "ImageNet"
            },
            {
                "name": "COCO"
            }
        ]
    }
}