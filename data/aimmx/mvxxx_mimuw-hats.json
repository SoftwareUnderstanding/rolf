{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": " MIMUW-Hats",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "mvxxx",
                "owner_type": "User",
                "name": "mimuw-hats",
                "url": "https://github.com/mvxxx/mimuw-hats",
                "stars": 2,
                "pushed_at": "2022-02-13 17:48:49+00:00",
                "created_at": "2020-03-03 07:52:22+00:00",
                "language": "TypeScript",
                "description": "Hats. Redefined. No more hat spam on your social media.",
                "license": "MIT License",
                "frameworks": [
                    "Keras",
                    "scikit-learn",
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "b6e47617de110dea7ca47e087ff1347cc2646eda",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mvxxx/mimuw-hats/blob/master/.gitignore"
                    }
                },
                "size": 1799
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "3a09aef54107ab3f704add5a6bb3c695ca30f90a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mvxxx/mimuw-hats/blob/master/LICENSE"
                    }
                },
                "size": 1073
            },
            {
                "type": "code",
                "name": "client",
                "sha": "34870ce47b23d1b0c12911d97469b567658b0928",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mvxxx/mimuw-hats/tree/master/client"
                    }
                },
                "num_files": 13
            },
            {
                "type": "code",
                "name": "docker-compose.yml",
                "sha": "71686de269df2d53fcd4805b4b53b14fa8907cb8",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mvxxx/mimuw-hats/blob/master/docker-compose.yml"
                    }
                },
                "size": 533
            },
            {
                "type": "code",
                "name": "heroku.yml",
                "sha": "794702b40a1851643e11281b4784b819f265d986",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mvxxx/mimuw-hats/blob/master/heroku.yml"
                    }
                },
                "size": 49
            },
            {
                "type": "code",
                "name": "model",
                "sha": "2d6f2a22f34c75d358131d9a66a20322c7e6c767",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mvxxx/mimuw-hats/tree/master/model"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "server",
                "sha": "6d4411d71feb867e742251fbc5e2c44934ae8687",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mvxxx/mimuw-hats/tree/master/server"
                    }
                },
                "num_files": 16
            },
            {
                "type": "code",
                "name": "specs",
                "sha": "30532bd0afa8772ce7e635999c84aec2c262076f",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mvxxx/mimuw-hats/tree/master/specs"
                    }
                },
                "num_files": 2
            }
        ]
    },
    "authors": [
        {
            "name": "Michal Tyrolski",
            "github_id": "mvxxx"
        },
        {
            "name": "Szymon Tworkowski",
            "github_id": "syzymon"
        },
        {
            "name": "dependabot[bot]",
            "github_id": "dependabot[bot]"
        }
    ],
    "tags": [
        "deep-learning",
        "transfer-learning",
        "tensorflow"
    ],
    "description": "Hats. Redefined. No more hat spam on your social media.",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/mvxxx/mimuw-hats",
            "stars": 2,
            "issues": true,
            "readme": "<img src=\"client/public/android-chrome-384x384.png\" width=\"75\" height=\"75\" /> MIMUW-Hats\n=======\nMIMUW-hats is a project meant to help fight against the plague of hats and other items lost in the MIMUW building. It incorporates novel solutions such as Machine Learning, REST APIs and responsive web design to tackle this issue.\n<br>\nhttps://mimuw-hats.herokuapp.com/\n## <img src=\"client/public/images/sumport.png\" width=\"35\" height=\"35\" /> Software Architecture Introduction\n\nThe project provides a web app which allows users to post found hats as well as report their finds. <br> <br> The system automatically matches images and/or textual descriptions, notifying the owners of the lost items. There is the option to register their hats to be automatically matched if they are found. There is an element of gamification by means of awarding productive users with experience points as well as a very simple feed for viewing, bumping and reacting to posts about lost and found items. The project can also be modified to suit current market demand, for example handling face masks in addition to hats.\n\n## <img src=\"client/public/images/sumport_2.png\" width=\"35\" height=\"35\" /> Technical Details\n\nThe project is composed of three major parts: a responsive web client interface written in React, a REST API backend utilizing Express.js and Node.js, and Machine Learning infrastructure built with Keras in Python.\n\n### Frontend\nThe frontend is based on React.js version 16. It is responsive and function both on mobile and desktop.\n\n### Backend\nThe backend is entirely REST-based, including authentication. All HTML rendering is done client-side in React. A SQLite relational database coupled with TypeORM is used for persistence.\n<br> <br>\nAuthentication is done with JWT. In order to limit the app\u2019s usage to MIMUW students, a MIMUW email address is connected to each account (Nodemailer).\n<br> <br>\nNotification of users is primarily be done by email and push notification done with web-push library.\n\n### Machine Learning\nWe use convolutional neural networks (CNNs) to solve the problem of detecting hats in pictures. To be more specific, our neural network (NN) is able to find bounding box of potential hat. Currently there is used MobileNet (https://arxiv.org/abs/1704.04861). If increased detail is needed, we move to another type of CNN, namely the YOLO v3 (https://arxiv.org/abs/1804.02767) model from the well-known scientific article. \n<br> <br>\nThe implementation is carried out in keras 2.3.1 (python3) in a version with tensorflow 2.0 backend. We don't have 100% certainty about NN correctness. If prediction fails, posts can be still verified by moderators.\nFor rapid testing, Proofs-of-Concept (PoC-s) provided by the fast.ai\nlibrary is used.\n<br> <br>\nDatasets come from two sources: 1) photos from MIMUW groups on\nFacebook about missing things 2) scraping Google images using simple\nscripts (in JavaScript and Python). Dataset size is about n 10k <=\n100k images.\n<br> <br>\nDue to the complexity of the problem, the training takes place on\nGoogle Colab - the free version gives access to NVIDIA Tesla K80, P4,\nT4, P100, and V100 GPUs (Google Colab assigns specific models\nwithout the possibility of choosing them by us).\n\n### Deployment\nThe current deployment setup consists of two Heroku apps - the one visible to the user (frontend) is powered by a nginx\nserver which serves the React app through static files as well as acts as a (reverse) proxy to the actual backend, which is another\nHeroku app, not visible directly to the user. The backend is connected to a MongoDB cluster. Both frontend and backend run\nas Docker containers (on Heroku they are deployed through heroku.yml). Machine learning backend is easily configurable \nand can run on any provided infrastructure.\n\n## <img src=\"client/public/images/sumport_3.png\" width=\"35\" height=\"35\" /> Additional constraints\n\n### Security \u2013 Moderation\nTo limit malicious usage, each account is linked to a MIMUW email\nby sending a confirmation. The system will automatically detect posts not\nrelated to hats. Users designated as moderators have the ability to\ndelete inappropriate posts not detected by the system as well as allow\nposts flagged by mistake.\n### Speed\nSince information is sent to users mostly by notification, speed of\nmatching items does not have to be very high. Notifying a user of their\nimage being removed due to being inappropriate should be reasonably\nfast as to provide a better user experience.\n### User rewards\nUser participation is encouraged by awarding active players with\nexperience points. When accumulated, they allow users to gain\nranks. Ranks will be named by MIMUW courses according to their\ndifficulty, e.g. Rank 1 - PO, Rank 5 - MD, Rank 10 - WPI.\n",
            "readme_url": "https://github.com/mvxxx/mimuw-hats",
            "frameworks": [
                "Keras",
                "scikit-learn",
                "TensorFlow"
            ]
        }
    ],
    "references": [
        {
            "title": "MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications",
            "arxiv": "1704.04861",
            "year": 2017,
            "url": "http://arxiv.org/abs/1704.04861v1",
            "abstract": "We present a class of efficient models called MobileNets for mobile and\nembedded vision applications. MobileNets are based on a streamlined\narchitecture that uses depth-wise separable convolutions to build light weight\ndeep neural networks. We introduce two simple global hyper-parameters that\nefficiently trade off between latency and accuracy. These hyper-parameters\nallow the model builder to choose the right sized model for their application\nbased on the constraints of the problem. We present extensive experiments on\nresource and accuracy tradeoffs and show strong performance compared to other\npopular models on ImageNet classification. We then demonstrate the\neffectiveness of MobileNets across a wide range of applications and use cases\nincluding object detection, finegrain classification, face attributes and large\nscale geo-localization.",
            "authors": [
                "Andrew G. Howard",
                "Menglong Zhu",
                "Bo Chen",
                "Dmitry Kalenichenko",
                "Weijun Wang",
                "Tobias Weyand",
                "Marco Andreetto",
                "Hartwig Adam"
            ]
        },
        {
            "title": "YOLOv3: An Incremental Improvement",
            "arxiv": "1804.02767",
            "year": 2018,
            "url": "http://arxiv.org/abs/1804.02767v1",
            "abstract": "We present some updates to YOLO! We made a bunch of little design changes to\nmake it better. We also trained this new network that's pretty swell. It's a\nlittle bigger than last time but more accurate. It's still fast though, don't\nworry. At 320x320 YOLOv3 runs in 22 ms at 28.2 mAP, as accurate as SSD but\nthree times faster. When we look at the old .5 IOU mAP detection metric YOLOv3\nis quite good. It achieves 57.9 mAP@50 in 51 ms on a Titan X, compared to 57.5\nmAP@50 in 198 ms by RetinaNet, similar performance but 3.8x faster. As always,\nall the code is online at https://pjreddie.com/yolo/",
            "authors": [
                "Joseph Redmon",
                "Ali Farhadi"
            ]
        }
    ],
    "domain": {
        "domain_type": "Unknown"
    },
    "training": {
        "datasets": [
            {
                "name": "ImageNet"
            }
        ]
    }
}