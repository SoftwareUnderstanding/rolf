{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "pix2pix-tensorflow",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "BrookInternSOMA",
                "owner_type": "Organization",
                "name": "pix2pix-barcode",
                "url": "https://github.com/BrookInternSOMA/pix2pix-barcode",
                "stars": 0,
                "pushed_at": "2019-02-08 00:14:54+00:00",
                "created_at": "2019-02-06 20:09:40+00:00",
                "language": "JavaScript",
                "license": "MIT License",
                "frameworks": [
                    "Caffe",
                    "TensorFlow",
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "57ae841554198eee422590243e3c271a4100225e",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/BrookInternSOMA/pix2pix-barcode/blob/master/.gitignore"
                    }
                },
                "size": 159
            },
            {
                "type": "code",
                "name": "LICENSE.txt",
                "sha": "b61525cbe82fcf8de0fa24765c9278ebc1575b38",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/BrookInternSOMA/pix2pix-barcode/blob/master/LICENSE.txt"
                    }
                },
                "size": 1074
            },
            {
                "type": "code",
                "name": "docker",
                "sha": "a0c00d3b5adcd88f4dea5241c9055068033bc90f",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/BrookInternSOMA/pix2pix-barcode/tree/master/docker"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "docs",
                "sha": "b05aa2be4b112dd625888a42a4b37ad46eeb78b1",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/BrookInternSOMA/pix2pix-barcode/tree/master/docs"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "pix2pix.py",
                "sha": "0edfbde79b19b66fc3a8ec5e64f4949cf7f09062",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/BrookInternSOMA/pix2pix-barcode/blob/master/pix2pix.py"
                    }
                },
                "size": 35695
            },
            {
                "type": "code",
                "name": "server",
                "sha": "78ae61328b996961da139dc94598a4fc1a91a9a6",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/BrookInternSOMA/pix2pix-barcode/tree/master/server"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "tools",
                "sha": "18748a414a667361c0fe872c040d503034bbafaa",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/BrookInternSOMA/pix2pix-barcode/tree/master/tools"
                    }
                },
                "num_files": 6
            }
        ]
    },
    "authors": [
        {
            "name": "TaeJoong Yoon",
            "email": "tryump225@gmail.com",
            "github_id": "TaeJoongYoon"
        }
    ],
    "tags": [],
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/BrookInternSOMA/pix2pix-barcode",
            "stars": 0,
            "issues": true,
            "readme": "# pix2pix-tensorflow\n\nBased on [pix2pix](https://phillipi.github.io/pix2pix/) by Isola et al.\n\n[Article about this implemention](https://affinelayer.com/pix2pix/)\n\n[Interactive Demo](https://affinelayer.com/pixsrv/)\n\nTensorflow implementation of pix2pix.  Learns a mapping from input images to output images, like these examples from the original paper:\n\n<img src=\"docs/examples.jpg\" width=\"900px\"/>\n\nThis port is based directly on the torch implementation, and not on an existing Tensorflow implementation.  It is meant to be a faithful implementation of the original work and so does not add anything.  The processing speed on a GPU with cuDNN was equivalent to the Torch implementation in testing.\n\n## Setup\n\n### Prerequisites\n- Tensorflow 1.12.0\n\n### Recommended\n- Linux with Tensorflow GPU edition + cuDNN\n\n### Getting Started\n\n```sh\n# clone this repo\ngit clone https://github.com/BrookInternSOMA/pix2pix-tensorflow.git\ncd pix2pix-tensorflow\n# train the model (this may take 1-8 hours depending on GPU, on CPU you will be waiting for a bit)\npython pix2pix.py \\\n  --mode train \\\n  --output_dir barcode_train \\\n  --max_epochs 1000 \\\n  --input_dir barcode/train \\\n  --which_direction BtoA\n\n# load checkpoint\n  --checkpoint ./barcode_train\n\n# test the model\npython pix2pix.py \\\n  --mode test \\\n  --output_dir barcode_test \\\n  --input_dir barcode/val \\\n  --checkpoint barcode_train\n```\n\n### Creating your own dataset\n\n```sh\n# Resize source images\npython tools/process.py \\\n  --input_dir photos/original \\\n  --operation resize \\\n  --output_dir photos/resized\n\npython tools/process.py \\\n  --input_dir photos/blank \\\n  --operation resize \\\n  --output_dir photos/blank\n  \n# Create images with blank centers\npython tools/process.py \\\n  --input_dir photos/resized \\\n  --operation blank \\\n  --output_dir photos/blank\n  \n# Combine resized images with blanked images\npython tools/process.py \\\n  --input_dir photos/resized \\\n  --b_dir photos/blank \\\n  --operation combine \\\n  --output_dir photos/combined\n  \n# Split into train/val set\npython tools/split.py \\\n  --dir photos/combined\n```\n\nThe folder `photos/combined` will now have `train` and `val` subfolders that you can use for training and testing.\n\n#### Creating image pairs from existing images\n\nIf you have two directories `a` and `b`, with corresponding images (same name, same dimensions, different data) you can combine them with `process.py`:\n\n```sh\npython tools/process.py \\\n  --input_dir a \\\n  --b_dir b \\\n  --operation combine \\\n  --output_dir c\n```\n\nThis puts the images in a side-by-side combined image that `pix2pix.py` expects.\n\n#### Colorization\n\nFor colorization, your images should ideally all be the same aspect ratio.  You can resize and crop them with the resize command:\n```sh\npython tools/process.py \\\n  --input_dir photos/original \\\n  --operation resize \\\n  --output_dir photos/resized\n```\n\nNo other processing is required, the colorization mode (see Training section below) uses single images instead of image pairs.\n\n## Training\n\n### Image Pairs\n\nFor normal training with image pairs, you need to specify which directory contains the training images, and which direction to train on.  The direction options are `AtoB` or `BtoA`\n```sh\npython pix2pix.py \\\n  --mode train \\\n  --output_dir barcode_train \\\n  --max_epochs 200 \\\n  --input_dir barcode/train \\\n  --which_direction BtoA\n```\n\n### Tips\n\nYou can look at the loss and computation graph using tensorboard:\n```sh\ntensorboard --logdir=barcode_train\n```\n\n<img src=\"docs/tensorboard-scalar.png\" width=\"250px\"/>\n\nIf you wish to write in-progress pictures as the network is training, use `--display_freq 50`.  This will update `barcode_train/index.html` every 50 steps with the current training inputs and outputs.\n\n## Testing\n\nTesting is done with `--mode test`.  You should specify the checkpoint to use with `--checkpoint`, this should point to the `output_dir` that you created previously with `--mode train`:\n\n```sh\npython pix2pix.py \\\n  --mode test \\\n  --output_dir barcode_test \\\n  --input_dir barcode/val \\\n  --checkpoint barcode_train\n```\n\nThe testing mode will load some of the configuration options from the checkpoint provided so you do not need to specify `which_direction` for instance.\n\nThe test run will output an HTML file at `barcode_test/index.html` that shows input/output/target image sets:\n\n<img src=\"docs/test-index-html.png\" width=\"300px\"/>\n\n## Exporting\n\nExporting is done with `--mode export`.  You should specify the export directory to use with `--model_dir`:\n\n```sh\npython pix2pix.py \\\n  --mode export \\\n  --output_dir your_export \\\n  --checkpoint your_checkpoint\n```\n\nYou use this exporting model by below command \n\n```sh\npython server/tools/process-local.py \\\n  --model_dir your_export_dir \\\n  --input_file your_input_image_filename \\\n  --output_file output_filename \\\n```\n\nYou can use this for many inputs\n\n```sh\npython server/tools/process-local-dir.py \\\n  --model_dir your_export_dir \\\n  --input_dir directory_containing_your_input_images \\\n  --output_dir output_directory \\\n```\n\n## Citation\nIf you use this code for your research, please cite the paper this code is based on: <a href=\"https://arxiv.org/pdf/1611.07004v1.pdf\">Image-to-Image Translation Using Conditional Adversarial Networks</a>:\n\n```\n@article{pix2pix2016,\n  title={Image-to-Image Translation with Conditional Adversarial Networks},\n  author={Isola, Phillip and Zhu, Jun-Yan and Zhou, Tinghui and Efros, Alexei A},\n  journal={arxiv},\n  year={2016}\n}\n```\n\n## Reference\n- [affinelayer/pix2pix-tensorflow](https://github.com/affinelayer/pix2pix-tensorflow)\n\n## Acknowledgments\nThis is a port of [pix2pix](https://github.com/phillipi/pix2pix) from Torch to Tensorflow.  It also contains colorspace conversion code ported from Torch.  Thanks to the Tensorflow team for making such a quality library!  And special thanks to Phillip Isola for answering my questions about the pix2pix code.\n",
            "readme_url": "https://github.com/BrookInternSOMA/pix2pix-barcode",
            "frameworks": [
                "Caffe",
                "TensorFlow",
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "year": "2016",
            "journal": "arxiv",
            "author": [
                "Isola, Phillip",
                "Zhu, Jun-Yan",
                "Zhou, Tinghui",
                "Efros, Alexei A"
            ],
            "title": "Image-to-Image Translation with Conditional Adversarial Networks",
            "ENTRYTYPE": "article",
            "ID": "pix2pix2016",
            "authors": [
                "Isola, Phillip",
                "Zhu, Jun-Yan",
                "Zhou, Tinghui",
                "Efros, Alexei A"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9997966065838888,
        "task": "Image-to-Image Translation",
        "task_prob": 0.9886620436865187
    }
}