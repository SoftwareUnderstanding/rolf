{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "This is a repository for implementations of",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "mits58",
                "owner_type": "User",
                "name": "Pointer-Networks",
                "url": "https://github.com/mits58/Pointer-Networks",
                "stars": 0,
                "pushed_at": "2020-01-07 08:47:43+00:00",
                "created_at": "2019-11-03 05:56:29+00:00",
                "language": "Python",
                "description": "Implementations of Pointer Networks and Seq2Seq in chainer",
                "license": "MIT License",
                "frameworks": []
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "894a44cc066a027465cd26d634948d56d13af9af",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mits58/Pointer-Networks/blob/master/.gitignore"
                    }
                },
                "size": 1203
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "f22f7271ebb8d120458da3e5703095b2ba7fa462",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mits58/Pointer-Networks/blob/master/LICENSE"
                    }
                },
                "size": 1068
            },
            {
                "type": "code",
                "name": "data",
                "sha": "0554d5b3f216ae3ed6cbaf519fe5c7412e1f6340",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mits58/Pointer-Networks/tree/master/data"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "ptrnet.py",
                "sha": "a2fc6e5b5c14af33a43396355f61e5478f0b4985",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mits58/Pointer-Networks/blob/master/ptrnet.py"
                    }
                },
                "size": 7886
            },
            {
                "type": "code",
                "name": "result",
                "sha": "110f21bff9bd4d4bf2cab49304deda81af9b9bc7",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mits58/Pointer-Networks/tree/master/result"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "seq2seq.py",
                "sha": "d9face5fe4784ec015315c97f1e2a2ef2d9a4ff6",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mits58/Pointer-Networks/blob/master/seq2seq.py"
                    }
                },
                "size": 5622
            },
            {
                "type": "code",
                "name": "util.py",
                "sha": "110751dbf801d8b86bc2d2b28d85b6c4411dc386",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mits58/Pointer-Networks/blob/master/util.py"
                    }
                },
                "size": 1493
            }
        ]
    },
    "authors": [
        {
            "name": "Yuta Nakano",
            "email": "ynakano927@gmail.com",
            "github_id": "mits58"
        }
    ],
    "tags": [],
    "description": "Implementations of Pointer Networks and Seq2Seq in chainer",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/mits58/Pointer-Networks",
            "stars": 0,
            "issues": true,
            "readme": "This is a repository for implementations of \n- Sequence to Sequence [arXiv](https://arxiv.org/abs/1409.3215)\n- Pointer Networks [arXiv](https://arxiv.org/abs/1506.03134)\n\nin chainer with trainer.\n\n### Dependencies\nI was running this code under \n\n- python 3.7\n- chainer \n\nI included requirements.txt in repository, so you can install all dependencies by running below script.\n\n```\npip install -r requirements.\n```\n\n### How to use\nUnder construction...\n\n### (Optional) How to prepare dataset\nUnder construction...\n\n### Links\n- Dataset for Pointer Networks\n  - https://drive.google.com/drive/folders/0B2fg8yPGn2TCMzBtS0o4Q2RJaEU\n\n---\n\n### Todo\n- \u8ad6\u6587\u5b9f\u9a13\u306e\u518d\u73fe\n  - \u8ad6\u6587\u3067\u7528\u3044\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5229\u7528\u3057\u305f\u5b9f\u9a13\u306e\u5b9f\u65bd\n    - beam search\u3092\u3059\u308b\u306b\u306fEncoder\u3068Decoder\u90e8\u5206\u3092\u5206\u3051\u306a\u3044\u3068\u3060\u3081\u304b\u3082\n  - Seq2Seq\u30e2\u30c7\u30eb\u3067\u3082\u540c\u3058\u3053\u3068\u3059\u308b\n\n- Seq2Seq\u90e8\u5206\u306e\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\n  - Decoder\u306e\u69cb\u6210\u3092\u5c11\u3057\u304d\u3061\u3093\u3068\u8003\u3048\u305f\u307b\u3046\u304c\u3088\u3044\n  \n- Pointer Networks\u90e8\u5206\u306e\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\n  - for\u6587\u3092\u4f7f\u3063\u3066\u56de\u3057\u3066\u3044\u308b\u90e8\u5206\u304c\u3042\u308b\u306e\u3067\u306a\u3093\u3068\u304b\u3067\u304d\u305f\u3089\u5b09\u3057\u3044\uff08\u304c\u7121\u7406\u305d\u3046\uff09\n    - Attention\u30af\u30e9\u30b9\u306e\u3001__call__\u90e8\u5206\u304c\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u306a\u3044\uff1f\n",
            "readme_url": "https://github.com/mits58/Pointer-Networks",
            "frameworks": []
        }
    ],
    "references": [
        {
            "title": "Pointer Networks",
            "arxiv": "1506.03134",
            "year": 2015,
            "url": "http://arxiv.org/abs/1506.03134v2",
            "abstract": "We introduce a new neural architecture to learn the conditional probability\nof an output sequence with elements that are discrete tokens corresponding to\npositions in an input sequence. Such problems cannot be trivially addressed by\nexistent approaches such as sequence-to-sequence and Neural Turing Machines,\nbecause the number of target classes in each step of the output depends on the\nlength of the input, which is variable. Problems such as sorting variable sized\nsequences, and various combinatorial optimization problems belong to this\nclass. Our model solves the problem of variable size output dictionaries using\na recently proposed mechanism of neural attention. It differs from the previous\nattention attempts in that, instead of using attention to blend hidden units of\nan encoder to a context vector at each decoder step, it uses attention as a\npointer to select a member of the input sequence as the output. We call this\narchitecture a Pointer Net (Ptr-Net). We show Ptr-Nets can be used to learn\napproximate solutions to three challenging geometric problems -- finding planar\nconvex hulls, computing Delaunay triangulations, and the planar Travelling\nSalesman Problem -- using training examples alone. Ptr-Nets not only improve\nover sequence-to-sequence with input attention, but also allow us to generalize\nto variable size output dictionaries. We show that the learnt models generalize\nbeyond the maximum lengths they were trained on. We hope our results on these\ntasks will encourage a broader exploration of neural learning for discrete\nproblems.",
            "authors": [
                "Oriol Vinyals",
                "Meire Fortunato",
                "Navdeep Jaitly"
            ]
        },
        {
            "title": "Sequence to Sequence Learning with Neural Networks",
            "arxiv": "1409.3215",
            "year": 2014,
            "url": "http://arxiv.org/abs/1409.3215v3",
            "abstract": "Deep Neural Networks (DNNs) are powerful models that have achieved excellent\nperformance on difficult learning tasks. Although DNNs work well whenever large\nlabeled training sets are available, they cannot be used to map sequences to\nsequences. In this paper, we present a general end-to-end approach to sequence\nlearning that makes minimal assumptions on the sequence structure. Our method\nuses a multilayered Long Short-Term Memory (LSTM) to map the input sequence to\na vector of a fixed dimensionality, and then another deep LSTM to decode the\ntarget sequence from the vector. Our main result is that on an English to\nFrench translation task from the WMT'14 dataset, the translations produced by\nthe LSTM achieve a BLEU score of 34.8 on the entire test set, where the LSTM's\nBLEU score was penalized on out-of-vocabulary words. Additionally, the LSTM did\nnot have difficulty on long sentences. For comparison, a phrase-based SMT\nsystem achieves a BLEU score of 33.3 on the same dataset. When we used the LSTM\nto rerank the 1000 hypotheses produced by the aforementioned SMT system, its\nBLEU score increases to 36.5, which is close to the previous best result on\nthis task. The LSTM also learned sensible phrase and sentence representations\nthat are sensitive to word order and are relatively invariant to the active and\nthe passive voice. Finally, we found that reversing the order of the words in\nall source sentences (but not target sentences) improved the LSTM's performance\nmarkedly, because doing so introduced many short term dependencies between the\nsource and the target sentence which made the optimization problem easier.",
            "authors": [
                "Ilya Sutskever",
                "Oriol Vinyals",
                "Quoc V. Le"
            ]
        }
    ],
    "domain": {
        "domain_type": "Natural Language Processing",
        "domain_prob": 0.9999972394035846,
        "task": "Machine Translation",
        "task_prob": 0.978954286173531
    }
}