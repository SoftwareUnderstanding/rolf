{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "ClariNet",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "rickyHong",
                "owner_type": "User",
                "name": "ClariNet-WaveNet-repl",
                "url": "https://github.com/rickyHong/ClariNet-WaveNet-repl",
                "stars": 0,
                "pushed_at": "2019-02-08 06:03:19+00:00",
                "created_at": "2019-02-08 06:03:01+00:00",
                "language": "Python",
                "license": "MIT License",
                "frameworks": [
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "3e203246164a0cdb6041965de3db767411007fab",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/rickyHong/ClariNet-WaveNet-repl/blob/master/.gitignore"
                    }
                },
                "size": 54
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "c272c689959f615e1245037b06bb0d8e47f65f7c",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/rickyHong/ClariNet-WaveNet-repl/blob/master/LICENSE"
                    }
                },
                "size": 1068
            },
            {
                "type": "code",
                "name": "data.py",
                "sha": "ad8fb29c78e8fc1b57e4710ba2ee9c6b344e1af8",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/rickyHong/ClariNet-WaveNet-repl/blob/master/data.py"
                    }
                },
                "size": 5933
            },
            {
                "type": "code",
                "name": "loss.py",
                "sha": "9cf362329181faf770b5a7de0f7cd1c4727f0464",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/rickyHong/ClariNet-WaveNet-repl/blob/master/loss.py"
                    }
                },
                "size": 1406
            },
            {
                "type": "code",
                "name": "modules.py",
                "sha": "41b1f09c4d1676fe63fc6eca2fa644120446e0b9",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/rickyHong/ClariNet-WaveNet-repl/blob/master/modules.py"
                    }
                },
                "size": 6462
            },
            {
                "type": "code",
                "name": "preprocessing.py",
                "sha": "e3a7c70fa31f4c425c50dfbb74772ef014e4465a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/rickyHong/ClariNet-WaveNet-repl/blob/master/preprocessing.py"
                    }
                },
                "size": 3765
            },
            {
                "type": "code",
                "name": "synthesize.py",
                "sha": "ff7718852b85ae3dc9e27b930dc711fc467af64d",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/rickyHong/ClariNet-WaveNet-repl/blob/master/synthesize.py"
                    }
                },
                "size": 4774
            },
            {
                "type": "code",
                "name": "synthesize_student.py",
                "sha": "d02b62c0557f730cff529e4e2d9becbb2f434d65",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/rickyHong/ClariNet-WaveNet-repl/blob/master/synthesize_student.py"
                    }
                },
                "size": 6104
            },
            {
                "type": "code",
                "name": "train.py",
                "sha": "700d83a2968159750065e5ccf52de9d5b8fb67bd",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/rickyHong/ClariNet-WaveNet-repl/blob/master/train.py"
                    }
                },
                "size": 10752
            },
            {
                "type": "code",
                "name": "train_student.py",
                "sha": "974764c5efc237f81f4554a3dde5d7f495f943d2",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/rickyHong/ClariNet-WaveNet-repl/blob/master/train_student.py"
                    }
                },
                "size": 16393
            },
            {
                "type": "code",
                "name": "wavenet.py",
                "sha": "a0cd06a80547b7fbab573cc7cb44790cc0450e59",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/rickyHong/ClariNet-WaveNet-repl/blob/master/wavenet.py"
                    }
                },
                "size": 3846
            },
            {
                "type": "code",
                "name": "wavenet_iaf.py",
                "sha": "e8c4b322db2b838d86b3a5bde09949f8ff4d0ade",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/rickyHong/ClariNet-WaveNet-repl/blob/master/wavenet_iaf.py"
                    }
                },
                "size": 4169
            }
        ]
    },
    "authors": [
        {
            "name": "Sungwon Kim",
            "email": "ksw930306@gmail.com",
            "github_id": "ksw0306"
        }
    ],
    "tags": [],
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/rickyHong/ClariNet-WaveNet-repl",
            "stars": 0,
            "issues": true,
            "readme": "# ClariNet\nA Pytorch Implementation of ClariNet (Mel Spectrogram --> Waveform)\n\n\n# Requirements\n\nPyTorch 0.4.0 & python 3.6 & Librosa\n\n# Examples\n\n#### Step 1. Download Dataset\n\n- LJSpeech : [https://keithito.com/LJ-Speech-Dataset/](https://keithito.com/LJ-Speech-Dataset/)\n\n#### Step 2. Preprocessing (Preparing Mel Spectrogram)\n\n`python preprocessing.py --in_dir ljspeech --out_dir DATASETS/ljspeech`\n\n#### Step 3. Train Gaussian Autoregressive WaveNet (Teacher)\n\n`python train.py --model_name wavenet_gaussian --batch_size 8 --num_blocks 4 --num_layers 6`\n\n#### Step 4. Synthesize (Teacher)\n\n`--load_step CHECKPOINT` : the # of the pre-trained *teacher* model's global training step (also depicted in the trained weight file)\n\n`python synthesize.py --model_name wavenet_gaussian --num_blocks 4 --num_layers 6 --load_step 10000`\n\n#### Step 5. Train Gaussian Inverse Autoregressive Flow (Student)\n\n`--teacher_name (YOUR TEACHER MODEL'S NAME)`\n\n`--teacher_load_step CHECKPOINT` : the # of the pre-trained *teacher* model's global training step (also depicted in the trained weight file)\n\n`--KL_type qp` : Reversed KL divegence KL(q||p)  or `--KL_type pq` : Forward KL divergence KL(p||q)\n\n`python train_student.py --model_name wavenet_gaussian_student --teacher_name wavenet_gaussian --teacher_load_step 10000 --batch_size 4 --num_blocks_t 4 --num_layers_t 6 --num_layers_s 6 --KL_type qp`\n\n#### Step 6. Synthesize (Student)\n\n`--model_name (YOUR STUDENT MODEL'S NAME)`\n\n`--load_step CHECKPOINT` : the # of the pre-trained *student* model's global training step (also depicted in the trained weight file)\n\n`--teacher_name (YOUR TEACHER MODEL'S NAME)`\n\n`--teacher_load_step CHECKPOINT` :  the # of the pre-trained *teacher* model's global training step (also depicted in the trained weight file)\n\n`--KL_type qp` : Reversed KL divegence KL(q||p)  or `--KL_type pq` : Forward KL divergence KL(p||q)\n\n`--temp TEMPERATURE` : Temperature (standard deviation) value implemented as z ~ N(0, 1 * TEMPERATURE)\n\n`python synthesize_student.py --model_name wavenet_gaussian_student --load_step 10000 --teacher_name wavenet_gaussian --teacher_load_step 10000 --batch_size 4 --num_blocks_t 4 --num_layers_t 6 --num_layers_s 6 --KL_type qp --num_blocks_t 4 --num_layers_t 6 --num_layers_s 6 --num_samples 5 --temp 0.7`\n\n# References\n\n- WaveNet vocoder : [https://github.com/r9y9/wavenet_vocoder](https://github.com/r9y9/wavenet_vocoder)\n- ClariNet : [https://arxiv.org/abs/1807.07281](https://arxiv.org/abs/1807.07281)\n",
            "readme_url": "https://github.com/rickyHong/ClariNet-WaveNet-repl",
            "frameworks": [
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "ClariNet: Parallel Wave Generation in End-to-End Text-to-Speech",
            "arxiv": "1807.07281",
            "year": 2018,
            "url": "http://arxiv.org/abs/1807.07281v3",
            "abstract": "In this work, we propose a new solution for parallel wave generation by\nWaveNet. In contrast to parallel WaveNet (van den Oord et al., 2018), we\ndistill a Gaussian inverse autoregressive flow from the autoregressive WaveNet\nby minimizing a regularized KL divergence between their highly-peaked output\ndistributions. Our method computes the KL divergence in closed-form, which\nsimplifies the training algorithm and provides very efficient distillation. In\naddition, we introduce the first text-to-wave neural architecture for speech\nsynthesis, which is fully convolutional and enables fast end-to-end training\nfrom scratch. It significantly outperforms the previous pipeline that connects\na text-to-spectrogram model to a separately trained WaveNet (Ping et al.,\n2018). We also successfully distill a parallel waveform synthesizer conditioned\non the hidden representation in this end-to-end model.",
            "authors": [
                "Wei Ping",
                "Kainan Peng",
                "Jitong Chen"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "https://keithito.com/LJ-Speech-Dataset/",
                "connection": {
                    "name": "url",
                    "source": {
                        "url": "https://keithito.com/LJ-Speech-Dataset/"
                    }
                }
            }
        ]
    },
    "domain": {
        "domain_type": "Unknown"
    }
}