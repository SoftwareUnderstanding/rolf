{
    "visibility": {
        "visibility": "public",
        "license": "Other"
    },
    "name": "py-faster-rcnn has been deprecated. Please see Detectron, which includes an implementation of [Mask R-CNN](https://arxiv.org/abs/1703.06870).",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "GAOwy123",
                "owner_type": "User",
                "name": "py-faster-rcnn",
                "url": "https://github.com/GAOwy123/py-faster-rcnn",
                "stars": 0,
                "pushed_at": "2019-10-23 07:22:16+00:00",
                "created_at": "2019-10-23 06:46:25+00:00",
                "language": "Python",
                "license": "Other",
                "frameworks": [
                    "Caffe",
                    "scikit-learn"
                ]
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "99a5d09ebcec66b9580afadcfca0c4d29fceb3a4",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/GAOwy123/py-faster-rcnn/blob/master/.gitignore"
                    }
                },
                "size": 84
            },
            {
                "type": "code",
                "name": ".gitmodules",
                "sha": "28e6d5be2e1ab70a604d366f9ff8f257ac93a350",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/GAOwy123/py-faster-rcnn/blob/master/.gitmodules"
                    }
                },
                "size": 131
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "1ab42b27a3ac66e841a94d6f568be493efcde274",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/GAOwy123/py-faster-rcnn/blob/master/LICENSE"
                    }
                },
                "size": 3745
            },
            {
                "type": "code",
                "name": "data",
                "sha": "1bd19c1506c69d17097987b0bdff0a088ae08737",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/GAOwy123/py-faster-rcnn/tree/master/data"
                    }
                },
                "num_files": 5
            },
            {
                "type": "code",
                "name": "experiments",
                "sha": "d8a4d657fddea88ce9b24b2e0b72b5ca2631158f",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/GAOwy123/py-faster-rcnn/tree/master/experiments"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "lib",
                "sha": "e82316b473cac060852e13e1561ab64978e5ba65",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/GAOwy123/py-faster-rcnn/tree/master/lib"
                    }
                },
                "num_files": 10
            },
            {
                "type": "code",
                "name": "models",
                "sha": "4e093d75e44213ada752bf15a9d5e5b100dee315",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/GAOwy123/py-faster-rcnn/tree/master/models"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "tools",
                "sha": "aba95966bd1a9625a0e50efa8f8f05cc1f71b3da",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/GAOwy123/py-faster-rcnn/tree/master/tools"
                    }
                },
                "num_files": 11
            }
        ]
    },
    "authors": [
        {
            "name": "Ross Girshick",
            "github_id": "rbgirshick"
        },
        {
            "name": "Dectinc Chen",
            "github_id": "Dectinc"
        },
        {
            "name": "Vadym",
            "email": "drozdvadym@gmail.com",
            "github_id": "drozdvadym"
        },
        {
            "name": "LoneStar",
            "email": "wangdelp@gmail.com",
            "github_id": "wangdelp"
        },
        {
            "name": "Max Ehrlich",
            "github_id": "Queuecumber"
        }
    ],
    "tags": [],
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/GAOwy123/py-faster-rcnn",
            "stars": 0,
            "issues": true,
            "readme": "# py-faster-rcnn has been deprecated. Please see [Detectron](https://github.com/facebookresearch/Detectron), which includes an implementation of [Mask R-CNN](https://arxiv.org/abs/1703.06870).\n\n### Disclaimer\n\nThe official Faster R-CNN code (written in MATLAB) is available [here](https://github.com/ShaoqingRen/faster_rcnn).\nIf your goal is to reproduce the results in our NIPS 2015 paper, please use the [official code](https://github.com/ShaoqingRen/faster_rcnn).\n\nThis repository contains a Python *reimplementation* of the MATLAB code.\nThis Python implementation is built on a fork of [Fast R-CNN](https://github.com/rbgirshick/fast-rcnn).\nThere are slight differences between the two implementations.\nIn particular, this Python port\n - is ~10% slower at test-time, because some operations execute on the CPU in Python layers (e.g., 220ms / image vs. 200ms / image for VGG16)\n - gives similar, but not exactly the same, mAP as the MATLAB version\n - is *not compatible* with models trained using the MATLAB code due to the minor implementation differences\n - **includes approximate joint training** that is 1.5x faster than alternating optimization (for VGG16) -- see these [slides](https://www.dropbox.com/s/xtr4yd4i5e0vw8g/iccv15_tutorial_training_rbg.pdf?dl=0) for more information\n\n# *Faster* R-CNN: Towards Real-Time Object Detection with Region Proposal Networks\n\nBy Shaoqing Ren, Kaiming He, Ross Girshick, Jian Sun (Microsoft Research)\n\nThis Python implementation contains contributions from Sean Bell (Cornell) written during an MSR internship.\n\nPlease see the official [README.md](https://github.com/ShaoqingRen/faster_rcnn/blob/master/README.md) for more details.\n\nFaster R-CNN was initially described in an [arXiv tech report](http://arxiv.org/abs/1506.01497) and was subsequently published in NIPS 2015.\n\n### License\n\nFaster R-CNN is released under the MIT License (refer to the LICENSE file for details).\n\n### Citing Faster R-CNN\n\nIf you find Faster R-CNN useful in your research, please consider citing:\n\n    @inproceedings{renNIPS15fasterrcnn,\n        Author = {Shaoqing Ren and Kaiming He and Ross Girshick and Jian Sun},\n        Title = {Faster {R-CNN}: Towards Real-Time Object Detection\n                 with Region Proposal Networks},\n        Booktitle = {Advances in Neural Information Processing Systems ({NIPS})},\n        Year = {2015}\n    }\n\n### Contents\n1. [Requirements: software](#requirements-software)\n2. [Requirements: hardware](#requirements-hardware)\n3. [Basic installation](#installation-sufficient-for-the-demo)\n4. [Demo](#demo)\n5. [Beyond the demo: training and testing](#beyond-the-demo-installation-for-training-and-testing-models)\n6. [Usage](#usage)\n\n### Requirements: software\n\n**NOTE** If you are having issues compiling and you are using a recent version of CUDA/cuDNN, please consult [this issue](https://github.com/rbgirshick/py-faster-rcnn/issues/509?_pjax=%23js-repo-pjax-container#issuecomment-284133868) for a workaround\n\n1. Requirements for `Caffe` and `pycaffe` (see: [Caffe installation instructions](http://caffe.berkeleyvision.org/installation.html))\n\n  **Note:** Caffe *must* be built with support for Python layers!\n\n  ```make\n  # In your Makefile.config, make sure to have this line uncommented\n  WITH_PYTHON_LAYER := 1\n  # Unrelatedly, it's also recommended that you use CUDNN\n  USE_CUDNN := 1\n  ```\n\n  You can download my [Makefile.config](https://dl.dropboxusercontent.com/s/6joa55k64xo2h68/Makefile.config?dl=0) for reference.\n2. Python packages you might not have: `cython`, `python-opencv`, `easydict`\n3. [Optional] MATLAB is required for **official** PASCAL VOC evaluation only. The code now includes unofficial Python evaluation code.\n\n### Requirements: hardware\n\n1. For training smaller networks (ZF, VGG_CNN_M_1024) a good GPU (e.g., Titan, K20, K40, ...) with at least 3G of memory suffices\n2. For training Fast R-CNN with VGG16, you'll need a K40 (~11G of memory)\n3. For training the end-to-end version of Faster R-CNN with VGG16, 3G of GPU memory is sufficient (using CUDNN)\n\n### Installation (sufficient for the demo)\n\n1. Clone the Faster R-CNN repository\n  ```Shell\n  # Make sure to clone with --recursive\n  git clone --recursive https://github.com/rbgirshick/py-faster-rcnn.git\n  ```\n\n2. We'll call the directory that you cloned Faster R-CNN into `FRCN_ROOT`\n\n   *Ignore notes 1 and 2 if you followed step 1 above.*\n\n   **Note 1:** If you didn't clone Faster R-CNN with the `--recursive` flag, then you'll need to manually clone the `caffe-fast-rcnn` submodule:\n    ```Shell\n    git submodule update --init --recursive\n    ```\n    **Note 2:** The `caffe-fast-rcnn` submodule needs to be on the `faster-rcnn` branch (or equivalent detached state). This will happen automatically *if you followed step 1 instructions*.\n\n3. Build the Cython modules\n    ```Shell\n    cd $FRCN_ROOT/lib\n    make\n    ```\n\n4. Build Caffe and pycaffe\n    ```Shell\n    cd $FRCN_ROOT/caffe-fast-rcnn\n    # Now follow the Caffe installation instructions here:\n    #   http://caffe.berkeleyvision.org/installation.html\n\n    # If you're experienced with Caffe and have all of the requirements installed\n    # and your Makefile.config in place, then simply do:\n    make -j8 && make pycaffe\n    ```\n\n5. Download pre-computed Faster R-CNN detectors\n    ```Shell\n    cd $FRCN_ROOT\n    ./data/scripts/fetch_faster_rcnn_models.sh\n    ```\n\n    This will populate the `$FRCN_ROOT/data` folder with `faster_rcnn_models`. See `data/README.md` for details.\n    These models were trained on VOC 2007 trainval.\n\n### Demo\n\n*After successfully completing [basic installation](#installation-sufficient-for-the-demo)*, you'll be ready to run the demo.\n\nTo run the demo\n```Shell\ncd $FRCN_ROOT\n./tools/demo.py\n```\nThe demo performs detection using a VGG16 network trained for detection on PASCAL VOC 2007.\n\n### Beyond the demo: installation for training and testing models\n1. Download the training, validation, test data and VOCdevkit\n\n\t```Shell\n\twget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtrainval_06-Nov-2007.tar\n\twget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtest_06-Nov-2007.tar\n\twget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCdevkit_08-Jun-2007.tar\n\t```\n\n2. Extract all of these tars into one directory named `VOCdevkit`\n\n\t```Shell\n\ttar xvf VOCtrainval_06-Nov-2007.tar\n\ttar xvf VOCtest_06-Nov-2007.tar\n\ttar xvf VOCdevkit_08-Jun-2007.tar\n\t```\n\n3. It should have this basic structure\n\n\t```Shell\n  \t$VOCdevkit/                           # development kit\n  \t$VOCdevkit/VOCcode/                   # VOC utility code\n  \t$VOCdevkit/VOC2007                    # image sets, annotations, etc.\n  \t# ... and several other directories ...\n  \t```\n\n4. Create symlinks for the PASCAL VOC dataset\n\n\t```Shell\n    cd $FRCN_ROOT/data\n    ln -s $VOCdevkit VOCdevkit2007\n    ```\n    Using symlinks is a good idea because you will likely want to share the same PASCAL dataset installation between multiple projects.\n5. [Optional] follow similar steps to get PASCAL VOC 2010 and 2012\n6. [Optional] If you want to use COCO, please see some notes under `data/README.md`\n7. Follow the next sections to download pre-trained ImageNet models\n\n### Download pre-trained ImageNet models\n\nPre-trained ImageNet models can be downloaded for the three networks described in the paper: ZF and VGG16.\n\n```Shell\ncd $FRCN_ROOT\n./data/scripts/fetch_imagenet_models.sh\n```\nVGG16 comes from the [Caffe Model Zoo](https://github.com/BVLC/caffe/wiki/Model-Zoo), but is provided here for your convenience.\nZF was trained at MSRA.\n\n### Usage\n\nTo train and test a Faster R-CNN detector using the **alternating optimization** algorithm from our NIPS 2015 paper, use `experiments/scripts/faster_rcnn_alt_opt.sh`.\nOutput is written underneath `$FRCN_ROOT/output`.\n\n```Shell\ncd $FRCN_ROOT\n./experiments/scripts/faster_rcnn_alt_opt.sh [GPU_ID] [NET] [--set ...]\n# GPU_ID is the GPU you want to train on\n# NET in {ZF, VGG_CNN_M_1024, VGG16} is the network arch to use\n# --set ... allows you to specify fast_rcnn.config options, e.g.\n#   --set EXP_DIR seed_rng1701 RNG_SEED 1701\n```\n\n(\"alt opt\" refers to the alternating optimization training algorithm described in the NIPS paper.)\n\nTo train and test a Faster R-CNN detector using the **approximate joint training** method, use `experiments/scripts/faster_rcnn_end2end.sh`.\nOutput is written underneath `$FRCN_ROOT/output`.\n\n```Shell\ncd $FRCN_ROOT\n./experiments/scripts/faster_rcnn_end2end.sh [GPU_ID] [NET] [--set ...]\n# GPU_ID is the GPU you want to train on\n# NET in {ZF, VGG_CNN_M_1024, VGG16} is the network arch to use\n# --set ... allows you to specify fast_rcnn.config options, e.g.\n#   --set EXP_DIR seed_rng1701 RNG_SEED 1701\n```\n\nThis method trains the RPN module jointly with the Fast R-CNN network, rather than alternating between training the two. It results in faster (~ 1.5x speedup) training times and similar detection accuracy. See these [slides](https://www.dropbox.com/s/xtr4yd4i5e0vw8g/iccv15_tutorial_training_rbg.pdf?dl=0) for more details.\n\nArtifacts generated by the scripts in `tools` are written in this directory.\n\nTrained Fast R-CNN networks are saved under:\n\n```\noutput/<experiment directory>/<dataset name>/\n```\n\nTest outputs are saved under:\n\n```\noutput/<experiment directory>/<dataset name>/<network snapshot name>/\n```\n",
            "readme_url": "https://github.com/GAOwy123/py-faster-rcnn",
            "frameworks": [
                "Caffe",
                "scikit-learn"
            ]
        }
    ],
    "references": [
        {
            "title": "Mask R-CNN",
            "arxiv": "1703.06870",
            "year": 2017,
            "url": "http://arxiv.org/abs/1703.06870v3",
            "abstract": "We present a conceptually simple, flexible, and general framework for object\ninstance segmentation. Our approach efficiently detects objects in an image\nwhile simultaneously generating a high-quality segmentation mask for each\ninstance. The method, called Mask R-CNN, extends Faster R-CNN by adding a\nbranch for predicting an object mask in parallel with the existing branch for\nbounding box recognition. Mask R-CNN is simple to train and adds only a small\noverhead to Faster R-CNN, running at 5 fps. Moreover, Mask R-CNN is easy to\ngeneralize to other tasks, e.g., allowing us to estimate human poses in the\nsame framework. We show top results in all three tracks of the COCO suite of\nchallenges, including instance segmentation, bounding-box object detection, and\nperson keypoint detection. Without bells and whistles, Mask R-CNN outperforms\nall existing, single-model entries on every task, including the COCO 2016\nchallenge winners. We hope our simple and effective approach will serve as a\nsolid baseline and help ease future research in instance-level recognition.\nCode has been made available at: https://github.com/facebookresearch/Detectron",
            "authors": [
                "Kaiming He",
                "Georgia Gkioxari",
                "Piotr Doll\u00e1r",
                "Ross Girshick"
            ]
        },
        {
            "title": "Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks",
            "arxiv": "1506.01497",
            "year": 2015,
            "url": "http://arxiv.org/abs/1506.01497v3",
            "abstract": "State-of-the-art object detection networks depend on region proposal\nalgorithms to hypothesize object locations. Advances like SPPnet and Fast R-CNN\nhave reduced the running time of these detection networks, exposing region\nproposal computation as a bottleneck. In this work, we introduce a Region\nProposal Network (RPN) that shares full-image convolutional features with the\ndetection network, thus enabling nearly cost-free region proposals. An RPN is a\nfully convolutional network that simultaneously predicts object bounds and\nobjectness scores at each position. The RPN is trained end-to-end to generate\nhigh-quality region proposals, which are used by Fast R-CNN for detection. We\nfurther merge RPN and Fast R-CNN into a single network by sharing their\nconvolutional features---using the recently popular terminology of neural\nnetworks with 'attention' mechanisms, the RPN component tells the unified\nnetwork where to look. For the very deep VGG-16 model, our detection system has\na frame rate of 5fps (including all steps) on a GPU, while achieving\nstate-of-the-art object detection accuracy on PASCAL VOC 2007, 2012, and MS\nCOCO datasets with only 300 proposals per image. In ILSVRC and COCO 2015\ncompetitions, Faster R-CNN and RPN are the foundations of the 1st-place winning\nentries in several tracks. Code has been made publicly available.",
            "authors": [
                "Shaoqing Ren",
                "Kaiming He",
                "Ross Girshick",
                "Jian Sun"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "MSRA"
            },
            {
                "name": "COCO"
            },
            {
                "name": "PASCAL VOC 2007"
            },
            {
                "name": "ImageNet"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9999992233941029,
        "task": "Object Detection",
        "task_prob": 0.9944286249656371
    }
}