{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "SRGAN",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "junhocho",
                "owner_type": "User",
                "name": "SRGAN",
                "url": "https://github.com/junhocho/SRGAN",
                "stars": 81,
                "pushed_at": "2016-11-24 09:25:57+00:00",
                "created_at": "2016-10-13 06:16:59+00:00",
                "language": "Lua",
                "description": "Implementation of [Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network arXiv:1609.04802v2]",
                "license": "MIT License",
                "frameworks": []
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "fe69d38a548cbb538dad929ca6fbfc8b29af9f28",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/blob/master/.gitignore"
                    }
                },
                "size": 454
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "48da5f9818208f3ab10b9d05a3933199939df7ed",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/blob/master/LICENSE"
                    }
                },
                "size": 1066
            },
            {
                "type": "code",
                "name": "VGG",
                "sha": "6409daaadd163484071410927f3242208c963b84",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/tree/master/VGG"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "demo_results",
                "sha": "a9e5c852d2e0bfe602228f671443bce42160b65b",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/tree/master/demo_results"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "imgs",
                "sha": "2274dcf0e1d630a662d91c94345d61fedcf6933e",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/tree/master/imgs"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "misc",
                "sha": "5b89ec0648e5defe2ecc035d0e5f936d8a4b325e",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/tree/master/misc"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "models",
                "sha": "c8c9b98d652b6ec3c6967c00850a0afebd1aba9b",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/tree/master/models"
                    }
                },
                "num_files": 11
            },
            {
                "type": "code",
                "name": "opts.lua",
                "sha": "b53de414b13144b6080b2c8c48b786b6127f0e79",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/blob/master/opts.lua"
                    }
                },
                "size": 1185
            },
            {
                "type": "code",
                "name": "prepImageNet.lua",
                "sha": "9c472c7a9f49d53f694ac6f59f6dbc7f34d41dda",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/blob/master/prepImageNet.lua"
                    }
                },
                "size": 253
            },
            {
                "type": "code",
                "name": "profile-model.lua",
                "sha": "8f9096cf8a2453414e36835968b512785906145a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/blob/master/profile-model.lua"
                    }
                },
                "size": 5741
            },
            {
                "type": "code",
                "name": "results_9x9-LR24_700K",
                "sha": "e50c80b3993efb0ad8b5cfa0b78789f47a2de7b5",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/tree/master/results_9x9-LR24_700K"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "results_preactivation_150K",
                "sha": "bcaf05c8ce556144755978010f716817705788de",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/tree/master/results_preactivation_150K"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "results_preactivation_300K",
                "sha": "4357d0b3ce7de7c19779a10fb41be085876008f0",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/tree/master/results_preactivation_300K"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "results_vggloss",
                "sha": "f49ecca6a44a862818653ab2018664d3a7fb07bc",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/tree/master/results_vggloss"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "run-SRResNet.lua",
                "sha": "b5111c17a69761351f0b969db343263e545e2c0d",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/blob/master/run-SRResNet.lua"
                    }
                },
                "size": 3175
            },
            {
                "type": "code",
                "name": "src",
                "sha": "2baac7aa7b87fb21ec53a23a39092f933cebe855",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/tree/master/src"
                    }
                },
                "num_files": 5
            },
            {
                "type": "code",
                "name": "train-SRResNet-VGGloss.lua",
                "sha": "12baee2107142ece6a16274df22f8e303310de88",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/blob/master/train-SRResNet-VGGloss.lua"
                    }
                },
                "size": 5164
            },
            {
                "type": "code",
                "name": "train-SRResNet.lua",
                "sha": "b0c9813638adf21e7382f65eda1f13429499e6a1",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/junhocho/SRGAN/blob/master/train-SRResNet.lua"
                    }
                },
                "size": 3396
            }
        ]
    },
    "authors": [
        {
            "name": "Berin Martini",
            "email": "berin.martini@gmail.com",
            "github_id": "bmartini"
        },
        {
            "name": "Junho Cho",
            "email": "junhocho@snu.ac.kr",
            "github_id": "junhocho"
        },
        {
            "name": "Eugenio Culurciello ",
            "github_id": "culurciello"
        },
        {
            "name": "Alfredo Canziani",
            "email": "alfredo.canziani@gmail.com",
            "github_id": "Atcold"
        },
        {
            "name": "Abhishek Chaurasia",
            "email": "abhishek.chaurasia29@hotmail.com",
            "github_id": "codeAC29"
        },
        {
            "name": "Syed Tousif Ahmed",
            "github_id": "syed-ahmed"
        },
        {
            "name": "Jonghoon Jin",
            "email": "jhjin0@gmail.com",
            "github_id": "jhjin"
        },
        {
            "name": "Sangpil Kim",
            "github_id": "spk921"
        }
    ],
    "tags": [],
    "description": "Implementation of [Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network arXiv:1609.04802v2]",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/junhocho/SRGAN",
            "stars": 81,
            "issues": true,
            "readme": "# SRGAN\n\nThis is implementation of SRGAN **under working**.\n\n**Currently only generator part is implemented. SRResNet is implemented but not benchmarked yet.**\nSRGAN is hopefully implementation soon.\nI can't reproduce PSNR of bicubic in the paper, thus haven't measured the PSNR.\n\nThe paper is [Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network](https://arxiv.org/abs/1609.04802).\n\nThese images are generated from LR images into 4x SR with trained with with the code. Check [23K results](./demo_results/)\n![Reproduce result](demo_results/Set14/img_005_SRF_4_LR.png_SRResnet.png)\n![2](demo_results/Set5/img_003_SRF_4_LR.png_SRResnet.png)\n![3](demo_results/Set5/img_005_SRF_4_LR.png_SRResnet.png)\n\nThere more experiments going on. For ex, using preactivation ResNet, 4x4 deconvolution layer to [remove artifacts](http://distill.pub/2016/deconv-checkerboard/).\n\t\n\nThis repository started from altering [Torch7-Network Profiler](https://github.com/e-lab/Torch7-profiling).\nUsed ResNet but changed a lot from original. Final using model is `models/resnet-deconv2.lua`.\nThe model trained uses 9x9 conv for first and last Conv layers and 15 residual blocks.\n\nLR Patch is 3x24x24 and SR Patch is 3x96x96. It was vague in the paper that 96x96x is either LR or SR but LR96 was untrainable because of not enough memory (GTX1080).\n\nTrained with ImageNet (50 images from 1000 classes that have 3 channel and bigger than 3x288x288).\nFor first time, just uncomment `prepImageNet` to have paths to images. Save it as `imgBatch.t7`\nAfter then, comment these as original code and load it.\n\n**Only supports, cuda/cudnn backend.**\n\n### To profile network, \n\n`th profile-model.lua -m models/resnet-deconv2.lua -r 16x3x24x24 -p cuda`\n\n### To train network,\n\nFirst, parse ImageNet dataset. Manually set `datasetPath` variable as your ImageNet path. The path is expected to have 1000 sub category folders.\n\n`th prepImageNet.lua`\n\nThen, start train with\n\n   `th train-SRResNet.lua -model_name 9x9-15res-LR24`\n   It will save checkpoints in `model_name` directory.\n   \n### To resume training, \n\n   `th train-SRResNet.lua -model_name 9x9-15res-LR24 -checkpoint_start_from models/9x9-15res-LR24/230000.t7`\n\n### To run/test model,\n\n\n   `th run-SRResNet.lua -checkpoint_path models/9x9-15res-LR24/230000.t7 -dataset BSD100 -result_path results_23K`\n\n   -dataset can be `BSD100|Set5|Set14.`\n   \n   If memory is not big enough, will print 'oom' and move on.\n\n### Model weight\n   \nFor those who need weight, download this weight in your \n\n`./checkpoints/9x9-15res-LR24` : [700K iter](https://www.dropbox.com/s/pvq5plly148brpy/700000.t7?dl=0)\n`./checkpoints/VGGloss-4x4deconv` : [24K iter](: https://www.dropbox.com/s/ngru09rhfjzfos0/24000.t7?dl=0)\n\n\n# Currently Doing\n\n1. I've tried training in [preactviation resnet](https://arxiv.org/abs/1603.05027) and [removing artifacts by deconv](http://distill.pub/2016/deconv-checkerboard/). So far, analyzing what are pros and cons.\n\n2. ContentLoss. Inlcuded `VGG/saveVGG19.sh` to build VGG loss.\n\n- `luarocks install loadcaffe`\n- Download VGG : `cd VGG; ./saveVGG19`\n- `luarocks install https://raw.githubusercontent.com/szym/display/master/display-scm-0.rockspec` \n\t- Install [display: a browser-based graphics server](https://github.com/szym/display)\n- `th -ldisplay.start 8000 0.0.0.0`\n- `th train-SRResNet-VGGloss.lua -arch models/resnet-4x4deconv-preact.lua  -model_name VGGloss-4x4deconv -checkpoint_save_iter 1000`\n- localhost:8000 shows training visualization\n![vis](imgs/vis_training.png)\n\n3. PSNR\n\n",
            "readme_url": "https://github.com/junhocho/SRGAN",
            "frameworks": []
        }
    ],
    "references": [
        {
            "title": "Identity Mappings in Deep Residual Networks",
            "arxiv": "1603.05027",
            "year": 2016,
            "url": "http://arxiv.org/abs/1603.05027v3",
            "abstract": "Deep residual networks have emerged as a family of extremely deep\narchitectures showing compelling accuracy and nice convergence behaviors. In\nthis paper, we analyze the propagation formulations behind the residual\nbuilding blocks, which suggest that the forward and backward signals can be\ndirectly propagated from one block to any other block, when using identity\nmappings as the skip connections and after-addition activation. A series of\nablation experiments support the importance of these identity mappings. This\nmotivates us to propose a new residual unit, which makes training easier and\nimproves generalization. We report improved results using a 1001-layer ResNet\non CIFAR-10 (4.62% error) and CIFAR-100, and a 200-layer ResNet on ImageNet.\nCode is available at: https://github.com/KaimingHe/resnet-1k-layers",
            "authors": [
                "Kaiming He",
                "Xiangyu Zhang",
                "Shaoqing Ren",
                "Jian Sun"
            ]
        },
        {
            "title": "Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network",
            "arxiv": "1609.04802",
            "year": 2016,
            "url": "http://arxiv.org/abs/1609.04802v5",
            "abstract": "Despite the breakthroughs in accuracy and speed of single image\nsuper-resolution using faster and deeper convolutional neural networks, one\ncentral problem remains largely unsolved: how do we recover the finer texture\ndetails when we super-resolve at large upscaling factors? The behavior of\noptimization-based super-resolution methods is principally driven by the choice\nof the objective function. Recent work has largely focused on minimizing the\nmean squared reconstruction error. The resulting estimates have high peak\nsignal-to-noise ratios, but they are often lacking high-frequency details and\nare perceptually unsatisfying in the sense that they fail to match the fidelity\nexpected at the higher resolution. In this paper, we present SRGAN, a\ngenerative adversarial network (GAN) for image super-resolution (SR). To our\nknowledge, it is the first framework capable of inferring photo-realistic\nnatural images for 4x upscaling factors. To achieve this, we propose a\nperceptual loss function which consists of an adversarial loss and a content\nloss. The adversarial loss pushes our solution to the natural image manifold\nusing a discriminator network that is trained to differentiate between the\nsuper-resolved images and original photo-realistic images. In addition, we use\na content loss motivated by perceptual similarity instead of similarity in\npixel space. Our deep residual network is able to recover photo-realistic\ntextures from heavily downsampled images on public benchmarks. An extensive\nmean-opinion-score (MOS) test shows hugely significant gains in perceptual\nquality using SRGAN. The MOS scores obtained with SRGAN are closer to those of\nthe original high-resolution images than to those obtained with any\nstate-of-the-art method.",
            "authors": [
                "Christian Ledig",
                "Lucas Theis",
                "Ferenc Huszar",
                "Jose Caballero",
                "Andrew Cunningham",
                "Alejandro Acosta",
                "Andrew Aitken",
                "Alykhan Tejani",
                "Johannes Totz",
                "Zehan Wang",
                "Wenzhe Shi"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "ImageNet"
            },
            {
                "name": "CIFAR-100"
            },
            {
                "name": "CIFAR-10"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9999999384403024,
        "task": "Image Generation",
        "task_prob": 0.855633981924424
    }
}