{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "German Traffic Sign Classification Using TensorFlow",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "mohamedameen93",
                "owner_type": "User",
                "name": "German-Traffic-Sign-Classification-Using-TensorFlow",
                "url": "https://github.com/mohamedameen93/German-Traffic-Sign-Classification-Using-TensorFlow",
                "stars": 59,
                "pushed_at": "2019-12-03 09:20:16+00:00",
                "created_at": "2017-11-22 09:40:49+00:00",
                "language": "HTML",
                "description": "In this project, I used Python and TensorFlow to classify traffic signs. Dataset used: German Traffic Sign Dataset. This dataset has more than 50,000 images of 43 classes. I was able to reach a +99% validation accuracy, and a 97.3% testing accuracy.",
                "license": "MIT License",
                "frameworks": [
                    "scikit-learn",
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "2bba0668d07b0ee9aac0be8c021a28a65629dc89",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohamedameen93/German-Traffic-Sign-Classification-Using-TensorFlow/blob/master/.gitignore"
                    }
                },
                "size": 42
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "42307894e5e224083d637ee856780ee7ce00f31b",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohamedameen93/German-Traffic-Sign-Classification-Using-TensorFlow/blob/master/LICENSE"
                    }
                },
                "size": 1070
            },
            {
                "type": "code",
                "name": "LeNet.png",
                "sha": "b013abff8d5c80ba23fea9a9ca0e59bc3eff4bdc",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohamedameen93/German-Traffic-Sign-Classification-Using-TensorFlow/blob/master/LeNet.png"
                    }
                },
                "size": 73118
            },
            {
                "type": "code",
                "name": "Pipeline architecture.png",
                "sha": "9155db7e9ac794c62e0cc4ed58b0c73ee98ad976",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohamedameen93/German-Traffic-Sign-Classification-Using-TensorFlow/blob/master/Pipeline architecture.png"
                    }
                },
                "size": 128610
            },
            {
                "type": "code",
                "name": "Saved_Models",
                "sha": "60eb3c030b2756bfa23b714c67124494bd4617d1",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohamedameen93/German-Traffic-Sign-Classification-Using-TensorFlow/tree/master/Saved_Models"
                    }
                },
                "num_files": 7
            },
            {
                "type": "code",
                "name": "Traffic_Sign_Classifier.html",
                "sha": "5bdb2cc0751bff9df2f48e85d7595db90a577c31",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohamedameen93/German-Traffic-Sign-Classification-Using-TensorFlow/blob/master/Traffic_Sign_Classifier.html"
                    }
                },
                "size": 785332
            },
            {
                "type": "code",
                "name": "Traffic_Sign_Classifier.ipynb",
                "sha": "1468c6bcf393cf0ebd3f6dcc633ac527f5fbb29f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohamedameen93/German-Traffic-Sign-Classification-Using-TensorFlow/blob/master/Traffic_Sign_Classifier.ipynb"
                    }
                },
                "size": 436145
            },
            {
                "type": "code",
                "name": "VGGNet.png",
                "sha": "54f5d614fd8674a5af46cd88cb4558db1fb74d36",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohamedameen93/German-Traffic-Sign-Classification-Using-TensorFlow/blob/master/VGGNet.png"
                    }
                },
                "size": 20120
            },
            {
                "type": "code",
                "name": "_config.yml",
                "sha": "c4192631f25b34d77a7f159aa0da0e3ae99c4ef4",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohamedameen93/German-Traffic-Sign-Classification-Using-TensorFlow/blob/master/_config.yml"
                    }
                },
                "size": 26
            },
            {
                "type": "code",
                "name": "signnames.csv",
                "sha": "51e6b97501cb7986cf185450991923a65ae1cc24",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohamedameen93/German-Traffic-Sign-Classification-Using-TensorFlow/blob/master/signnames.csv"
                    }
                },
                "size": 999
            },
            {
                "type": "code",
                "name": "traffic-signs-data",
                "sha": "f355c3a28ad6a7336c8d4c6e698b4bcae3fb5218",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mohamedameen93/German-Traffic-Sign-Classification-Using-TensorFlow/tree/master/traffic-signs-data"
                    }
                },
                "num_files": 2
            }
        ]
    },
    "authors": [
        {
            "name": "Mohamed Ameen",
            "email": "mohamed.a.ameen93@gmail.com",
            "github_id": "mohamedameen93"
        },
        {
            "name": "Imam Digmi",
            "email": "imam.digmi@gmail.com",
            "github_id": "imamdigmi"
        },
        {
            "name": "Aysu Sayin",
            "email": "aysusayin@gmail.com",
            "github_id": "aysusayin"
        },
        {
            "name": "Rudra Roy",
            "email": "rudraroy_17132@aitpune.edu.in",
            "github_id": "Rud09"
        }
    ],
    "tags": [
        "python",
        "tensorflow",
        "machine-learning",
        "deep-learning",
        "deep-neural-networks",
        "image-classification",
        "german-traffic-sign-classifier",
        "autonomous-vehicles",
        "autonomous-driving"
    ],
    "description": "In this project, I used Python and TensorFlow to classify traffic signs. Dataset used: German Traffic Sign Dataset. This dataset has more than 50,000 images of 43 classes. I was able to reach a +99% validation accuracy, and a 97.3% testing accuracy.",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/mohamedameen93/German-Traffic-Sign-Classification-Using-TensorFlow",
            "stars": 59,
            "issues": true,
            "readme": "# German Traffic Sign Classification Using TensorFlow\n**In this project, I used Python and TensorFlow to classify traffic signs.**\n\n**Dataset used: [German Traffic Sign Dataset](http://benchmark.ini.rub.de/?section=gtsrb&subsection=dataset).\nThis dataset has more than 50,000 images of 43 classes.**\n\n**I was able to reach a +99% validation accuracy, and a 97.6% testing accuracy.**\n\n## Pipeline architecture:\n- **Load The Data.**\n- **Dataset Summary & Exploration**\n- **Data Preprocessing**.\n    - Shuffling.\n    - Grayscaling.\n    - Local Histogram Equalization.\n    - Normalization.\n- **Design a Model Architecture.**\n    - LeNet-5.\n    - VGGNet.\n- **Model Training and Evaluation.**\n- **Testing the Model Using the Test Set.**\n- **Testing the Model on New Images.**\n\nI'll explain each step in details below.\n\n#### Environement:\n-  Ubuntu 16.04\n-  Anaconda 5.0.1\n-  Python 3.6.2\n-  TensorFlow 0.12.1 (GPU support)\n\n---\n## Step 1: Load The Data\n\nDownload the dataset from [here](https://d17h27t6h515a5.cloudfront.net/topher/2017/February/5898cd6f_traffic-signs-data/traffic-signs-data.zip). This is a pickled dataset in which we've already resized the images to 32x32.\n\nWe already have three `.p` files of 32x32 resized images:\n- `train.p`: The training set.\n- `test.p`: The testing set.\n- `valid.p`: The validation set.\n\nWe will use Python `pickle` to load the data.\n\n---\n\n## Step 2: Dataset Summary & Exploration\n\nThe pickled data is a dictionary with 4 key/value pairs:\n\n- `'features'` is a 4D array containing raw pixel data of the traffic sign images, (num examples, width, height, channels).\n- `'labels'` is a 1D array containing the label/class id of the traffic sign. The file `signnames.csv` contains id -> name mappings for each id.\n- `'sizes'` is a list containing tuples, (width, height) representing the original width and height the image.\n- `'coords'` is a list containing tuples, (x1, y1, x2, y2) representing coordinates of a bounding box around the sign in the image.\n\n**First, we will use `numpy` provide the number of images in each subset, in addition to the image size, and the number of unique classes.**\nNumber of training examples:  34799\nNumber of testing examples:  12630\nNumber of validation examples:  4410\nImage data shape = (32, 32, 3)\nNumber of classes = 43\n\n**Then, we used `matplotlib` plot sample images from each subset.**\n\n\n<figure>\n <img src=\"./traffic-signs-data/Screenshots/Train.png\" width=\"1072\" alt=\"Combined Image\" />\n <figcaption>\n <p></p> \n </figcaption>\n</figure>\n\n\n<figure>\n <img src=\"./traffic-signs-data/Screenshots/Test.png\" width=\"1072\" alt=\"Combined Image\" />\n <figcaption>\n <p></p> \n </figcaption>\n</figure>\n\n<figure>\n <img src=\"./traffic-signs-data/Screenshots/Valid.png\" width=\"1072\" alt=\"Combined Image\" />\n <figcaption>\n <p></p> \n </figcaption>\n</figure>\n\n\n**And finally, we will use `numpy` to plot a histogram of the count of images in each unique class.**\n\n\n<figure>\n <img src=\"./traffic-signs-data/Screenshots/TrainHist.png\" width=\"1072\" alt=\"Combined Image\" />\n <figcaption>\n <p></p> \n </figcaption>\n</figure>\n\n<figure>\n <img src=\"./traffic-signs-data/Screenshots/TestHist.png\" width=\"1072\" alt=\"Combined Image\" />\n <figcaption>\n <p></p> \n </figcaption>\n</figure>\n\n<figure>\n <img src=\"./traffic-signs-data/Screenshots/ValidHist.png\" width=\"1072\" alt=\"Combined Image\" />\n <figcaption>\n <p></p> \n </figcaption>\n</figure>\n\n---\n\n## Step 3: Data Preprocessing\n\nIn this step, we will apply several preprocessing steps to the input images to achieve the best possible results.\n\n**We will use the following preprocessing techniques:**\n1. Shuffling.\n2. Grayscaling.\n3. Local Histogram Equalization.\n4. Normalization.\n\n1. **Shuffling**: In general, we shuffle the training data to increase randomness and variety in training dataset, in order for the model to be more stable. We will use `sklearn` to shuffle our data.\n\n2. **Grayscaling**: In their paper [\"Traffic Sign Recognition with Multi-Scale Convolutional Networks\"](http://yann.lecun.com/exdb/publis/pdf/sermanet-ijcnn-11.pdf) published in 2011, P. Sermanet and Y. LeCun stated that using grayscale images instead of color improves the ConvNet's accuracy. We will use `OpenCV` to convert the training images into grey scale.\n\n<figure>\n <img src=\"./traffic-signs-data/Screenshots/Gray.png\" width=\"1072\" alt=\"Combined Image\" />\n <figcaption>\n <p></p> \n </figcaption>\n</figure>\n\n3. **Local Histogram Equalization**: This technique simply spreads out the most frequent intensity values in an image, resulting in enhancing images with low contrast. Applying this technique will be very helpfull in our case since the dataset in hand has real world images, and many of them has low contrast. We will use `skimage` to apply local histogram equalization to the training images.\n\n<figure>\n <img src=\"./traffic-signs-data/Screenshots/Equalized.png\" width=\"1072\" alt=\"Combined Image\" />\n <figcaption>\n <p></p> \n </figcaption>\n</figure>\n\n4. **Normalization**: Normalization is a process that changes the range of pixel intensity values. Usually the image data should be normalized so that the data has mean zero and equal variance.\n\n<figure>\n <img src=\"./traffic-signs-data/Screenshots/Normalized.png\" width=\"1072\" alt=\"Combined Image\" />\n <figcaption>\n <p></p> \n </figcaption>\n</figure>\n\n---\n\n## Step 3: Design a Model Architecture\n\nIn this step, we will design and implement a deep learning model that learns to recognize traffic signs from our dataset [German Traffic Sign Dataset](http://benchmark.ini.rub.de/?section=gtsrb&subsection=dataset).\n\nWe'll use Convolutional Neural Networks to classify the images in this dataset. The reason behind choosing ConvNets is that they are designed to recognize visual patterns directly from pixel images with minimal preprocessing. They automatically learn hierarchies of invariant features at every level from data.\nWe will implement two of the most famous ConvNets. Our goal is to reach an accuracy of +95% on the validation set.\n\nI'll start by explaining each network architecture, then implement it using TensorFlow.\n\n**Notes**:\n1. We specify the learning rate of 0.001, which tells the network how quickly to update the weights.\n2. We minimize the loss function using the Adaptive Moment Estimation (Adam) Algorithm. Adam is an optimization algorithm introduced by D. Kingma and J. Lei Ba in a 2015 paper named [Adam: A Method for Stochastic Optimization](https://arxiv.org/abs/1412.6980). Adam algorithm computes adaptive learning rates for each parameter. In addition to storing an exponentially decaying average of past squared gradients like [Adadelta](https://arxiv.org/pdf/1212.5701.pdf) and [RMSprop](https://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf) algorithms, Adam also keeps an exponentially decaying average of past gradients mtmt, similar to [momentum algorithm](http://www.sciencedirect.com/science/article/pii/S0893608098001166?via%3Dihub), which in turn produce better results.\n3. we will run `minimize()` function on the optimizer which use backprobagation to update the network and minimize our training loss.\n\n\n### 1.  LeNet-5\nLeNet-5 is a convolutional network designed for handwritten and machine-printed character recognition. It was introduced by the famous [Yann LeCun](https://en.wikipedia.org/wiki/Yann_LeCun) in his paper [Gradient-Based Learning Applied to Document Recognition](http://yann.lecun.com/exdb/publis/pdf/lecun-01a.pdf) in 1998. Although this ConvNet is intended to classify hand-written digits, we're confident it have a very high accuracy when dealing with traffic signs, given that both hand-written digits and traffic signs are given to the computer in the form of pixel images.\n\n**LeNet-5 architecture:**\n<figure>\n <img src=\"LeNet.png\" width=\"1072\" alt=\"Combined Image\" />\n <figcaption>\n <p></p> \n </figcaption>\n</figure>\n\nThis ConvNet follows these steps:\n\nInput => Convolution => ReLU => Pooling => Convolution => ReLU => Pooling => FullyConnected => ReLU => FullyConnected\n\n**Layer 1 (Convolutional):** The output shape should be 28x28x6.\n\n**Activation.** Your choice of activation function.\n\n**Pooling.** The output shape should be 14x14x6.\n\n**Layer 2 (Convolutional):** The output shape should be 10x10x16.\n\n**Activation.** Your choice of activation function.\n\n**Pooling.** The output shape should be 5x5x16.\n\n**Flattening:** Flatten the output shape of the final pooling layer such that it's 1D instead of 3D.\n\n**Layer 3 (Fully Connected):** This should have 120 outputs.\n\n**Activation.** Your choice of activation function.\n\n**Layer 4 (Fully Connected):** This should have 84 outputs.\n\n**Activation.** Your choice of activation function.\n\n**Layer 5 (Fully Connected):** This should have 10 outputs.\n\n### 2.  VGGNet\nVGGNet was first introduced in 2014 by K. Simonyan and A. Zisserman from the University of Oxford in a paper called [Very Deep Convolutional Networks for Large-Scale Image Recognition](https://arxiv.org/pdf/1409.1556.pdf). They were investigating the convolutional network depth on its accuracy in the large-scale image recognition setting. Their main contribution is a thorough evaluation of networks of increasing depth using an architecture with very small (3x3) convolution filters, which shows that a significant improvement on the prior-art configurations can be achieved by pushing the depth to 16-19 weight layers.\n\n**VGGNet architecture:**\n<figure>\n <img src=\"VGGNet.png\" width=\"1072\" alt=\"Combined Image\" />\n <figcaption>\n <p></p> \n </figcaption>\n</figure>\n\nThe original VGGNet architecture has 16-19 layers, but I've excluded some of them and implemented a modified version of only 12 layers to save computational resources.\n\nThis ConvNet follows these steps:\n\nInput => Convolution => ReLU => Convolution => ReLU => Pooling => Convolution => ReLU => Convolution => ReLU => Pooling => Convolution => ReLU => Convolution => ReLU => Pooling => FullyConnected => ReLU => FullyConnected => ReLU => FullyConnected\n\n**Layer 1 (Convolutional):** The output shape should be 32x32x32.\n\n**Activation.** Your choice of activation function.\n\n**Layer 2 (Convolutional):** The output shape should be 32x32x32.\n\n**Activation.** Your choice of activation function.\n\n**Layer 3 (Pooling)** The output shape should be 16x16x32.\n\n**Layer 4 (Convolutional):** The output shape should be 16x16x64.\n\n**Activation.** Your choice of activation function.\n\n**Layer 5 (Convolutional):** The output shape should be 16x16x64.\n\n**Activation.** Your choice of activation function.\n\n**Layer 6 (Pooling)** The output shape should be 8x8x64.\n\n**Layer 7 (Convolutional):** The output shape should be 8x8x128.\n\n**Activation.** Your choice of activation function.\n\n**Layer 8 (Convolutional):** The output shape should be 8x8x128.\n\n**Activation.** Your choice of activation function.\n\n**Layer 9 (Pooling)** The output shape should be 4x4x128.\n\n**Flattening:** Flatten the output shape of the final pooling layer such that it's 1D instead of 3D.\n\n**Layer 10 (Fully Connected):** This should have 128 outputs.\n\n**Activation.** Your choice of activation function.\n\n**Layer 11 (Fully Connected):** This should have 128 outputs.\n\n**Activation.** Your choice of activation function.\n\n**Layer 12 (Fully Connected):** This should have 43 outputs.\n\n---\n\n## Step 4: Model Training and Evaluation\n\nIn this step, we will train our model using `normalized_images`, then we'll compute softmax cross entropy between `logits` and `labels` to measure the model's error probability.\n\nThe `keep_prob` and `keep_prob_conv` variables will be used to control the dropout rate when training the neural network.\nOverfitting is a serious problem in deep nural networks. Dropout is a technique for addressing this problem.\nThe key idea is to randomly drop units (along with their connections) from the neural network during training. This prevents units from co-adapting too much. During training, dropout samples from an exponential number of different \u201cthinned\u201d networks. At test time, it is easy to approximate the effect of averaging the predictions of all these thinned networks by simply using a single unthinned network that has smaller weights. This significantly reduces overfitting and gives major improvements over other regularization methods. This technique was introduced by N. Srivastava, G. Hinton, A. Krizhevsky I. Sutskever, and R. Salakhutdinov in their paper [Dropout: A Simple Way to Prevent Neural Networks from Overfitting](https://www.cs.toronto.edu/~hinton/absps/JMLRdropout.pdf).\n\nNow, we'll run the training data through the training pipeline to train the model.\n- Before each epoch, we'll shuffle the training set.\n- After each epoch, we measure the loss and accuracy of the validation set.\n- And after training, we will save the model.\n- A low accuracy on the training and validation sets imply underfitting. A high accuracy on the training set but low accuracy on the validation set implies overfitting.\n\n### LeNet Model\n```\nEPOCH 1 : Validation Accuracy = 81.451%\nEPOCH 2 : Validation Accuracy = 87.755%\nEPOCH 3 : Validation Accuracy = 90.113%\nEPOCH 4 : Validation Accuracy = 91.519%\nEPOCH 5 : Validation Accuracy = 90.658%\nEPOCH 6 : Validation Accuracy = 92.608%\nEPOCH 7 : Validation Accuracy = 92.902%\nEPOCH 8 : Validation Accuracy = 92.585%\nEPOCH 9 : Validation Accuracy = 92.993%\nEPOCH 10 : Validation Accuracy = 92.766%\nEPOCH 11 : Validation Accuracy = 93.356%\nEPOCH 12 : Validation Accuracy = 93.469%\nEPOCH 13 : Validation Accuracy = 93.832%\nEPOCH 14 : Validation Accuracy = 94.603%\nEPOCH 15 : Validation Accuracy = 93.333%\nEPOCH 16 : Validation Accuracy = 93.787%\nEPOCH 17 : Validation Accuracy = 94.263%\nEPOCH 18 : Validation Accuracy = 92.857%\nEPOCH 19 : Validation Accuracy = 93.832%\nEPOCH 20 : Validation Accuracy = 93.605%\nEPOCH 21 : Validation Accuracy = 93.447%\nEPOCH 22 : Validation Accuracy = 94.286%\nEPOCH 23 : Validation Accuracy = 94.671%\nEPOCH 24 : Validation Accuracy = 94.172%\nEPOCH 25 : Validation Accuracy = 94.399%\nEPOCH 26 : Validation Accuracy = 95.057%\nEPOCH 27 : Validation Accuracy = 95.329%\nEPOCH 28 : Validation Accuracy = 94.218%\nEPOCH 29 : Validation Accuracy = 94.286%\nEPOCH 30 : Validation Accuracy = 94.853%\n```\nWe've been able to reach a maximum accuracy of **95.3%** on the validation set over 30 epochs, using a learning rate of 0.001.\n\nNow, we'll train the VGGNet model and evaluate it's accuracy.\n\n### VGGNet Model\n```\nEPOCH 1 : Validation Accuracy = 31.655%\nEPOCH 2 : Validation Accuracy = 59.592%\nEPOCH 3 : Validation Accuracy = 78.639%\nEPOCH 4 : Validation Accuracy = 88.617%\nEPOCH 5 : Validation Accuracy = 92.812%\nEPOCH 6 : Validation Accuracy = 95.601%\nEPOCH 7 : Validation Accuracy = 96.667%\nEPOCH 8 : Validation Accuracy = 97.528%\nEPOCH 9 : Validation Accuracy = 98.390%\nEPOCH 10 : Validation Accuracy = 98.322%\nEPOCH 11 : Validation Accuracy = 98.776%\nEPOCH 12 : Validation Accuracy = 98.730%\nEPOCH 13 : Validation Accuracy = 98.617%\nEPOCH 14 : Validation Accuracy = 98.571%\nEPOCH 15 : Validation Accuracy = 99.025%\nEPOCH 16 : Validation Accuracy = 99.116%\nEPOCH 17 : Validation Accuracy = 98.776%\nEPOCH 18 : Validation Accuracy = 98.707%\nEPOCH 19 : Validation Accuracy = 98.526%\nEPOCH 20 : Validation Accuracy = 98.685%\nEPOCH 21 : Validation Accuracy = 99.297%\nEPOCH 22 : Validation Accuracy = 99.320%\nEPOCH 23 : Validation Accuracy = 99.297%\nEPOCH 24 : Validation Accuracy = 99.161%\nEPOCH 25 : Validation Accuracy = 98.798%\nEPOCH 26 : Validation Accuracy = 98.707%\nEPOCH 27 : Validation Accuracy = 99.048%\nEPOCH 28 : Validation Accuracy = 99.116%\nEPOCH 29 : Validation Accuracy = 98.458%\nEPOCH 30 : Validation Accuracy = 99.161%\n```\n\nUsing VGGNet, we've been able to reach a maximum **validation accuracy of 99.3%**. As you can observe, the model has nearly saturated after only 10 epochs, so we can reduce the epochs to 10 and save computational resources.\n\nWe'll use this model to predict the labels of the test set.\n\n\n---\n\n## Step 5: Testing the Model using the Test Set\n\nNow, we'll use the testing set to measure the accuracy of the model over unknown examples.\nWe've been able to reach a **Test accuracy of 97.6%**. A remarkable performance.\n\nNow we'll plot the confusion matrix to see where the model actually fails.\n\n<figure>\n <img src=\"./traffic-signs-data/Screenshots/cm.png\" width=\"1072\" alt=\"Combined Image\" />\n <figcaption>\n <p></p> \n </figcaption>\n</figure>\n\nWe observe some clusters in the confusion matrix above. It turns out that the various speed limits are sometimes misclassified among themselves. Similarly, traffic signs with traingular shape are misclassified among themselves. We can further improve on the model using hierarchical CNNs to first identify broader groups (like speed signs) and then have CNNs to classify finer features (such as the actual speed limit).\n\n---\n\n## Step 6: Testing the Model on New Images\n\nIn this step, we will use the model to predict traffic signs type of 5 random images of German traffic signs from the web our model's performance on these images.\nNumber of new testing examples:  5\n\n<figure>\n <img src=\"./traffic-signs-data/Screenshots/NewImg.png\" width=\"1072\" alt=\"Combined Image\" />\n <figcaption>\n <p></p> \n </figcaption>\n</figure>\n\nThese test images include some easy to predict signs, and other signs are considered hard for the model to predict.\n\nFor instance, we have easy to predict signs like the \"Stop\" and the \"No entry\". The two signs are clear and belong to classes where the model can predict with  high accuracy.\n\nOn the other hand, we have signs belong to classes where has poor accuracy, like the \"Speed limit\" sign, because as stated above it turns out that the various speed limits are sometimes misclassified among themselves, and the \"Pedestrians\" sign, because traffic signs with traingular shape are misclassified among themselves.\n\n<figure>\n <img src=\"./traffic-signs-data/Screenshots/TopSoft.png\" width=\"1072\" alt=\"Combined Image\" />\n <figcaption>\n <p></p> \n </figcaption>\n</figure>\n\nAs we can notice from the top 5 softmax probabilities, the model has very high confidence (100%) when it comes to predict simple signs, like the \"Stop\" and the \"No entry\" sign, and even high confidence when predicting simple triangular signs in a very clear image, like the \"Yield\" sign.\n\nOn the other hand, the model's confidence slightly reduces with more complex triangular sign in a \"pretty noisy\" image, in the \"Pedestrian\" sign image, we have a triangular sign with a shape inside it, and the images copyrights adds some noise to the image, the model was able to predict the true class, but with 80% confidence.\n\nAnd in the \"Speed limit\" sign, we can observe that the model accurately predicted that it's a \"Speed limit\" sign, but was somehow confused between the different speed limits. However, it predicted the true class at the end.\n\nThe VGGNet model was able to predict the right class for each of the 5 new test images. Test Accuracy = 100.0%.\nIn all cases, the model was very certain (80% - 100%).\n\n\n---\n\n## Conclusion\n\nUsing VGGNet, we've been able to reach a very high accuracy rate. We can observe that the models saturate after nearly 10 epochs, so we can save some computational resources and reduce the number of epochs to 10.\nWe can also try other preprocessing techniques to further improve the model's accuracy..\nWe can further improve on the model using hierarchical CNNs to first identify broader groups (like speed signs) and then have CNNs to classify finer features (such as the actual speed limit)\nThis model will only work on input examples where the traffic signs are centered in the middle of the image. It doesn't have the capability to detect signs in the image corners.\n",
            "readme_url": "https://github.com/mohamedameen93/German-Traffic-Sign-Classification-Using-TensorFlow",
            "frameworks": [
                "scikit-learn",
                "TensorFlow"
            ]
        }
    ],
    "references": [
        {
            "title": "Adam: A Method for Stochastic Optimization",
            "arxiv": "1412.6980",
            "year": 2014,
            "url": "http://arxiv.org/abs/1412.6980v9",
            "abstract": "We introduce Adam, an algorithm for first-order gradient-based optimization\nof stochastic objective functions, based on adaptive estimates of lower-order\nmoments. The method is straightforward to implement, is computationally\nefficient, has little memory requirements, is invariant to diagonal rescaling\nof the gradients, and is well suited for problems that are large in terms of\ndata and/or parameters. The method is also appropriate for non-stationary\nobjectives and problems with very noisy and/or sparse gradients. The\nhyper-parameters have intuitive interpretations and typically require little\ntuning. Some connections to related algorithms, on which Adam was inspired, are\ndiscussed. We also analyze the theoretical convergence properties of the\nalgorithm and provide a regret bound on the convergence rate that is comparable\nto the best known results under the online convex optimization framework.\nEmpirical results demonstrate that Adam works well in practice and compares\nfavorably to other stochastic optimization methods. Finally, we discuss AdaMax,\na variant of Adam based on the infinity norm.",
            "authors": [
                "Diederik P. Kingma",
                "Jimmy Ba"
            ]
        },
        {
            "title": "ADADELTA: An Adaptive Learning Rate Method",
            "arxiv": "1212.5701",
            "year": 2012,
            "url": "http://arxiv.org/abs/1212.5701v1",
            "abstract": "We present a novel per-dimension learning rate method for gradient descent\ncalled ADADELTA. The method dynamically adapts over time using only first order\ninformation and has minimal computational overhead beyond vanilla stochastic\ngradient descent. The method requires no manual tuning of a learning rate and\nappears robust to noisy gradient information, different model architecture\nchoices, various data modalities and selection of hyperparameters. We show\npromising results compared to other methods on the MNIST digit classification\ntask using a single machine and on a large scale voice dataset in a distributed\ncluster environment.",
            "authors": [
                "Matthew D. Zeiler"
            ]
        },
        {
            "title": "Very Deep Convolutional Networks for Large-Scale Image Recognition",
            "arxiv": "1409.1556",
            "year": 2014,
            "url": "http://arxiv.org/abs/1409.1556v6",
            "abstract": "In this work we investigate the effect of the convolutional network depth on\nits accuracy in the large-scale image recognition setting. Our main\ncontribution is a thorough evaluation of networks of increasing depth using an\narchitecture with very small (3x3) convolution filters, which shows that a\nsignificant improvement on the prior-art configurations can be achieved by\npushing the depth to 16-19 weight layers. These findings were the basis of our\nImageNet Challenge 2014 submission, where our team secured the first and the\nsecond places in the localisation and classification tracks respectively. We\nalso show that our representations generalise well to other datasets, where\nthey achieve state-of-the-art results. We have made our two best-performing\nConvNet models publicly available to facilitate further research on the use of\ndeep visual representations in computer vision.",
            "authors": [
                "Karen Simonyan",
                "Andrew Zisserman"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "German Traffic Sign Dataset",
                "connection": {
                    "name": "url",
                    "source": {
                        "url": "http://benchmark.ini.rub.de/?section=gtsrb&subsection=dataset"
                    }
                }
            },
            {
                "name": "German Traffic Sign Dataset",
                "connection": {
                    "name": "url",
                    "source": {
                        "url": "http://benchmark.ini.rub.de/?section=gtsrb&subsection=dataset"
                    }
                }
            },
            {
                "name": "GTSRB"
            },
            {
                "name": "Wikipedia"
            },
            {
                "name": "MNIST"
            },
            {
                "name": "ImageNet"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9999165591143215,
        "task": "Image Classification",
        "task_prob": 0.9814113291830993
    }
}