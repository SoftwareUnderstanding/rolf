{
    "visibility": {
        "visibility": "public"
    },
    "name": "Machine Learning Engineer Nanodegree",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "sparvangada",
                "owner_type": "User",
                "name": "capstone_project",
                "url": "https://github.com/sparvangada/capstone_project",
                "stars": 0,
                "pushed_at": "2019-04-29 14:28:05+00:00",
                "created_at": "2019-04-26 17:53:11+00:00",
                "language": "Jupyter Notebook",
                "description": "The final capstone project.",
                "frameworks": [
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": "Machine learning capstone project proposal2.pdf",
                "sha": "be1eb11a069f28f9bf7816d2fbcfe4c91f3527da",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/sparvangada/capstone_project/blob/master/Machine learning capstone project proposal2.pdf"
                    }
                },
                "size": 265430
            },
            {
                "type": "code",
                "name": "Machine learning capstone project report.docx",
                "sha": "8632a370711cbe5c394deaa516b4ee05b4cbc428",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/sparvangada/capstone_project/blob/master/Machine learning capstone project report.docx"
                    }
                },
                "size": 1350548
            },
            {
                "type": "code",
                "name": "Machine learning capstone project report.pdf",
                "sha": "f2386560c5e350e833941fe336b16b05922bd156",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/sparvangada/capstone_project/blob/master/Machine learning capstone project report.pdf"
                    }
                },
                "size": 829751
            },
            {
                "type": "code",
                "name": "capstone-project_review_v1.docx",
                "sha": "f083847e754bad26294c495185e8c86a761e642e",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/sparvangada/capstone_project/blob/master/capstone-project_review_v1.docx"
                    }
                },
                "size": 226960
            },
            {
                "type": "code",
                "name": "capstone-project_review_v2.docx",
                "sha": "94bd1caf31051e2de3d3d4217f3bc48fbddad01e",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/sparvangada/capstone_project/blob/master/capstone-project_review_v2.docx"
                    }
                },
                "size": 18770
            },
            {
                "type": "code",
                "name": "capstone-windows-gpu.yml",
                "sha": "f47a0ff423461263f518ce77b9d5151f3f0c359b",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/sparvangada/capstone_project/blob/master/capstone-windows-gpu.yml"
                    }
                },
                "size": 2348
            },
            {
                "type": "code",
                "name": "mura.ipynb",
                "sha": "5e4f1f5dfb0eb018a96a846bfbdd5f985b6721cb",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/sparvangada/capstone_project/blob/master/mura.ipynb"
                    }
                },
                "size": 89093
            },
            {
                "type": "code",
                "name": "train.py",
                "sha": "2f6a296846f5dd729d08c6d4e40e50f3cb25dc75",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/sparvangada/capstone_project/blob/master/train.py"
                    }
                },
                "size": 8946
            }
        ]
    },
    "authors": [
        {
            "name": "sparvangada",
            "github_id": "sparvangada"
        }
    ],
    "tags": [],
    "description": "The final capstone project.",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/sparvangada/capstone_project",
            "stars": 0,
            "issues": true,
            "readme": "# Machine Learning Engineer Nanodegree\r\n## Specializations\r\n## Project: Capstone Proposal and Capstone Project\r\n\r\nRun the project\r\n\r\n1. activate conda capstone-project( in my case)\r\n2. jupyter notebook mura.ipynb.\r\n\r\nSome of the important packages used are\r\n\r\n1. pandas\r\n2. tqdm\r\n3. matplotlib\r\n4. numpy\r\n5. Dataset, DataLoader from torch.utils.data \r\n   transforms, utils,pil_loader from torchvision.* \r\n   torch,torch.nn,torch.nn.functional,torch.utils.model_zoo\r\n   torch.autograd\r\n\r\n\r\nReferences:\r\n1. MURA Paper:   https://arxiv.org/pdf/1712.06957.pdf\r\n2. Cohen's Kappa statiscs: https://stats.stackexchange.com/questions/82162/cohens-kappa-in-plain-english\r\n3. DenseNet-169 is defined by the paper:  https://arxiv.org/abs/1608.06993\r\n4. pytorch dataloading :\r\n\thttps://pytorch.org/tutorials/beginner/data_loading_tutorial.html\r\n5. Stack tensor: https://www.aiworkbox.com/lessons/turn-a-list-of-pytorch-tensors-into-one-tensor\r\n6. datasets/dataloaders: https://stanford.edu/~shervine/blog/pytorch-how-to-generate-data-parallel\r\n7. DenseNet-169: https://pytorch.org/docs/master_modules/torchvision/models/densenet.html\r\n8. Training Model: https://github.com/pyaf/\r\n\r\nDataFiles can be gotten from : https://stanfordmlgroup.github.io/competitions/mura/\r\n",
            "readme_url": "https://github.com/sparvangada/capstone_project",
            "frameworks": [
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "MURA: Large Dataset for Abnormality Detection in Musculoskeletal Radiographs",
            "arxiv": "1712.06957",
            "year": 2017,
            "url": "http://arxiv.org/abs/1712.06957v4",
            "abstract": "We introduce MURA, a large dataset of musculoskeletal radiographs containing\n40,561 images from 14,863 studies, where each study is manually labeled by\nradiologists as either normal or abnormal. To evaluate models robustly and to\nget an estimate of radiologist performance, we collect additional labels from\nsix board-certified Stanford radiologists on the test set, consisting of 207\nmusculoskeletal studies. On this test set, the majority vote of a group of\nthree radiologists serves as gold standard. We train a 169-layer DenseNet\nbaseline model to detect and localize abnormalities. Our model achieves an\nAUROC of 0.929, with an operating point of 0.815 sensitivity and 0.887\nspecificity. We compare our model and radiologists on the Cohen's kappa\nstatistic, which expresses the agreement of our model and of each radiologist\nwith the gold standard. Model performance is comparable to the best radiologist\nperformance in detecting abnormalities on finger and wrist studies. However,\nmodel performance is lower than best radiologist performance in detecting\nabnormalities on elbow, forearm, hand, humerus, and shoulder studies. We\nbelieve that the task is a good challenge for future research. To encourage\nadvances, we have made our dataset freely available at\nhttps://stanfordmlgroup.github.io/competitions/mura .",
            "authors": [
                "Pranav Rajpurkar",
                "Jeremy Irvin",
                "Aarti Bagul",
                "Daisy Ding",
                "Tony Duan",
                "Hershel Mehta",
                "Brandon Yang",
                "Kaylie Zhu",
                "Dillon Laird",
                "Robyn L. Ball",
                "Curtis Langlotz",
                "Katie Shpanskaya",
                "Matthew P. Lungren",
                "Andrew Y. Ng"
            ]
        },
        {
            "title": "Densely Connected Convolutional Networks",
            "arxiv": "1608.06993",
            "year": 2016,
            "url": "http://arxiv.org/abs/1608.06993v5",
            "abstract": "Recent work has shown that convolutional networks can be substantially\ndeeper, more accurate, and efficient to train if they contain shorter\nconnections between layers close to the input and those close to the output. In\nthis paper, we embrace this observation and introduce the Dense Convolutional\nNetwork (DenseNet), which connects each layer to every other layer in a\nfeed-forward fashion. Whereas traditional convolutional networks with L layers\nhave L connections - one between each layer and its subsequent layer - our\nnetwork has L(L+1)/2 direct connections. For each layer, the feature-maps of\nall preceding layers are used as inputs, and its own feature-maps are used as\ninputs into all subsequent layers. DenseNets have several compelling\nadvantages: they alleviate the vanishing-gradient problem, strengthen feature\npropagation, encourage feature reuse, and substantially reduce the number of\nparameters. We evaluate our proposed architecture on four highly competitive\nobject recognition benchmark tasks (CIFAR-10, CIFAR-100, SVHN, and ImageNet).\nDenseNets obtain significant improvements over the state-of-the-art on most of\nthem, whilst requiring less computation to achieve high performance. Code and\npre-trained models are available at https://github.com/liuzhuang13/DenseNet .",
            "authors": [
                "Gao Huang",
                "Zhuang Liu",
                "Laurens van der Maaten",
                "Kilian Q. Weinberger"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9986856696334981,
        "task": "Image Classification",
        "task_prob": 0.6830226658808558
    },
    "training": {
        "datasets": [
            {
                "name": "ImageNet"
            },
            {
                "name": "SVHN"
            },
            {
                "name": "CIFAR-100"
            },
            {
                "name": "CIFAR-10"
            }
        ]
    }
}