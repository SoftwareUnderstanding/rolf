{
    "visibility": {
        "visibility": "public",
        "license": "Apache License 2.0"
    },
    "name": "gan",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "catalyst-team",
                "owner_type": "Organization",
                "name": "gan",
                "url": "https://github.com/catalyst-team/gan",
                "stars": 6,
                "pushed_at": "2021-09-13 06:01:04+00:00",
                "created_at": "2020-01-27 11:11:41+00:00",
                "language": "Python",
                "description": "Catalyst.GAN",
                "license": "Apache License 2.0",
                "frameworks": [
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "eaa382f6b2728946e6b1e1259717c99598dfd4fb",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/catalyst-team/gan/blob/master/.gitignore"
                    }
                },
                "size": 1792
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "dc0873a513187ff6ed27ed0f87408b42d738fa18",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/catalyst-team/gan/blob/master/LICENSE"
                    }
                },
                "size": 11414
            },
            {
                "type": "code",
                "name": "catalyst_gan",
                "sha": "1f8e0a9650c50e43ff655482eaef07eca4d54cde",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/catalyst-team/gan/tree/master/catalyst_gan"
                    }
                },
                "num_files": 12
            },
            {
                "type": "code",
                "name": "examples",
                "sha": "70d2d5671731d6974deac234b6856aa8fa657d82",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/catalyst-team/gan/tree/master/examples"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "112fcf9875f5805a4aa165b557c67ff4c3a39d6c",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/catalyst-team/gan/blob/master/requirements.txt"
                    }
                },
                "size": 42
            }
        ]
    },
    "authors": [
        {
            "name": "Andrey Zharkov",
            "email": "andrey.zharkov@phystech.edu",
            "github_id": "asmekal"
        },
        {
            "name": "Sergey Kolesnikov",
            "email": "scitator@gmail.com",
            "github_id": "Scitator"
        }
    ],
    "tags": [],
    "description": "Catalyst.GAN",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/catalyst-team/gan",
            "stars": 6,
            "issues": true,
            "readme": "<div align=\"center\">\n\n[![Catalyst logo](https://raw.githubusercontent.com/catalyst-team/catalyst-pics/master/pics/catalyst_logo.png)](https://github.com/catalyst-team/catalyst)\n\n**Accelerated DL & RL**\n\n[![Build Status](http://66.248.205.49:8111/app/rest/builds/buildType:id:Catalyst_Deploy/statusIcon.svg)](http://66.248.205.49:8111/project.html?projectId=Catalyst&tab=projectOverview&guest=1)\n[![CodeFactor](https://www.codefactor.io/repository/github/catalyst-team/catalyst/badge)](https://www.codefactor.io/repository/github/catalyst-team/catalyst)\n[![Pipi version](https://img.shields.io/pypi/v/catalyst.svg)](https://pypi.org/project/catalyst/)\n[![Docs](https://img.shields.io/badge/dynamic/json.svg?label=docs&url=https%3A%2F%2Fpypi.org%2Fpypi%2Fcatalyst%2Fjson&query=%24.info.version&colorB=brightgreen&prefix=v)](https://catalyst-team.github.io/catalyst/index.html)\n[![PyPI Status](https://pepy.tech/badge/catalyst)](https://pepy.tech/project/catalyst)\n\n[![Twitter](https://img.shields.io/badge/news-twitter-499feb)](https://twitter.com/CatalystTeam)\n[![Telegram](https://img.shields.io/badge/channel-telegram-blue)](https://t.me/catalyst_team)\n[![Slack](https://img.shields.io/badge/Catalyst-slack-success)](https://join.slack.com/t/catalyst-team-devs/shared_invite/zt-d9miirnn-z86oKDzFMKlMG4fgFdZafw)\n[![Github contributors](https://img.shields.io/github/contributors/catalyst-team/catalyst.svg?logo=github&logoColor=white)](https://github.com/catalyst-team/catalyst/graphs/contributors)\n\n\n</div>\n\nPyTorch framework for Deep Learning research and development.\nIt was developed with a focus on reproducibility,\nfast experimentation and code/ideas reusing.\nBeing able to research/develop something new,\nrather than write another regular train loop. <br/>\nBreak the cycle - use the Catalyst!\n\nProject [manifest](https://github.com/catalyst-team/catalyst/blob/master/MANIFEST.md). Part of [PyTorch Ecosystem](https://pytorch.org/ecosystem/). Part of [Catalyst Ecosystem](https://docs.google.com/presentation/d/1D-yhVOg6OXzjo9K_-IS5vSHLPIUxp1PEkFGnpRcNCNU/edit?usp=sharing):\n- [Alchemy](https://github.com/catalyst-team/alchemy) - Experiments logging & visualization\n- [Catalyst](https://github.com/catalyst-team/catalyst) - Accelerated Deep Learning Research and Development\n- [Reaction](https://github.com/catalyst-team/reaction) - Convenient Deep Learning models serving\n\n[Catalyst at AI Landscape](https://landscape.lfai.foundation/selected=catalyst).\n\n---\n\n# Catalyst.Gan [WIP]  [![Github contributors](https://img.shields.io/github/contributors/catalyst-team/segmentation.svg?logo=github&logoColor=white)](https://github.com/catalyst-team/gan/graphs/contributors)\n\n> *Note: this repo uses advanced Catalyst Config API and could be a bit out-of-day right now. \n> Use [Catalyst's minimal examples section](https://github.com/catalyst-team/catalyst#minimal-examples) for a starting point and up-to-day use cases, please.*\n\nYou will learn how to train your GAN using the Catalyst framework.\nThe main advantage is to customize your experiments in the yaml config instead of the code.\n\n# Installation\n\n```bash\npip install -r requirements.txt\n```\n\n# Run examples\n\n## MNIST\n\n```bash\n# (Goodfellow et. al., 2014: https://arxiv.org/pdf/1406.2661.pdf)\ncatalyst-dl run -C examples/mnist/configs/vanilla_gan.yml\n# (Arjovsky et. al., 2017: https://arxiv.org/abs/1701.07875)\ncatalyst-dl run -C examples/mnist/configs/wasserstein_gan.yml\n# (Gulrahani et. al., 2017: https://arxiv.org/abs/1704.00028)\ncatalyst-dl run -C examples/mnist/configs/wasserstein_gan_gp.yml\n# (Mirza and Osindero, 2014: https://arxiv.org/abs/1411.1784)\ncatalyst-dl run -C examples/mnist/configs/conditional_gan.yml\n```\n\n## Advanced [under construction]\n\nIf you want to try right now run from console\n\n(you should download FFHQ dataset before that and specify path in `examples/advanced/tconfigs/data/FFHQ.yml`)\n```bash\n./examples/advanced/experiments_setup/run.sh\n```\n",
            "readme_url": "https://github.com/catalyst-team/gan",
            "frameworks": [
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "Conditional Generative Adversarial Nets",
            "arxiv": "1411.1784",
            "year": 2014,
            "url": "http://arxiv.org/abs/1411.1784v1",
            "abstract": "Generative Adversarial Nets [8] were recently introduced as a novel way to\ntrain generative models. In this work we introduce the conditional version of\ngenerative adversarial nets, which can be constructed by simply feeding the\ndata, y, we wish to condition on to both the generator and discriminator. We\nshow that this model can generate MNIST digits conditioned on class labels. We\nalso illustrate how this model could be used to learn a multi-modal model, and\nprovide preliminary examples of an application to image tagging in which we\ndemonstrate how this approach can generate descriptive tags which are not part\nof training labels.",
            "authors": [
                "Mehdi Mirza",
                "Simon Osindero"
            ]
        },
        {
            "title": "Wasserstein GAN",
            "arxiv": "1701.07875",
            "year": 2017,
            "url": "http://arxiv.org/abs/1701.07875v3",
            "abstract": "We introduce a new algorithm named WGAN, an alternative to traditional GAN\ntraining. In this new model, we show that we can improve the stability of\nlearning, get rid of problems like mode collapse, and provide meaningful\nlearning curves useful for debugging and hyperparameter searches. Furthermore,\nwe show that the corresponding optimization problem is sound, and provide\nextensive theoretical work highlighting the deep connections to other distances\nbetween distributions.",
            "authors": [
                "Martin Arjovsky",
                "Soumith Chintala",
                "L\u00e9on Bottou"
            ]
        },
        {
            "title": "Generative Adversarial Networks",
            "arxiv": "1406.2661",
            "year": 2014,
            "url": "http://arxiv.org/abs/1406.2661v1",
            "abstract": "We propose a new framework for estimating generative models via an\nadversarial process, in which we simultaneously train two models: a generative\nmodel G that captures the data distribution, and a discriminative model D that\nestimates the probability that a sample came from the training data rather than\nG. The training procedure for G is to maximize the probability of D making a\nmistake. This framework corresponds to a minimax two-player game. In the space\nof arbitrary functions G and D, a unique solution exists, with G recovering the\ntraining data distribution and D equal to 1/2 everywhere. In the case where G\nand D are defined by multilayer perceptrons, the entire system can be trained\nwith backpropagation. There is no need for any Markov chains or unrolled\napproximate inference networks during either training or generation of samples.\nExperiments demonstrate the potential of the framework through qualitative and\nquantitative evaluation of the generated samples.",
            "authors": [
                "Ian J. Goodfellow",
                "Jean Pouget-Abadie",
                "Mehdi Mirza",
                "Bing Xu",
                "David Warde-Farley",
                "Sherjil Ozair",
                "Aaron Courville",
                "Yoshua Bengio"
            ]
        },
        {
            "title": "Improved Training of Wasserstein GANs",
            "arxiv": "1704.00028",
            "year": 2017,
            "url": "http://arxiv.org/abs/1704.00028v3",
            "abstract": "Generative Adversarial Networks (GANs) are powerful generative models, but\nsuffer from training instability. The recently proposed Wasserstein GAN (WGAN)\nmakes progress toward stable training of GANs, but sometimes can still generate\nonly low-quality samples or fail to converge. We find that these problems are\noften due to the use of weight clipping in WGAN to enforce a Lipschitz\nconstraint on the critic, which can lead to undesired behavior. We propose an\nalternative to clipping weights: penalize the norm of gradient of the critic\nwith respect to its input. Our proposed method performs better than standard\nWGAN and enables stable training of a wide variety of GAN architectures with\nalmost no hyperparameter tuning, including 101-layer ResNets and language\nmodels over discrete data. We also achieve high quality generations on CIFAR-10\nand LSUN bedrooms.",
            "authors": [
                "Ishaan Gulrajani",
                "Faruk Ahmed",
                "Martin Arjovsky",
                "Vincent Dumoulin",
                "Aaron Courville"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "MNIST"
            },
            {
                "name": "FFHQ"
            },
            {
                "name": "CIFAR-10"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9998501728754048,
        "task": "Image Generation",
        "task_prob": 0.9689849380972626
    }
}