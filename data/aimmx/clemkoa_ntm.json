{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "ntm - Neural Turing Machines in pytorch",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "clemkoa",
                "owner_type": "User",
                "name": "ntm",
                "url": "https://github.com/clemkoa/ntm",
                "stars": 38,
                "pushed_at": "2021-12-30 19:54:59+00:00",
                "created_at": "2019-11-13 20:57:34+00:00",
                "language": "Python",
                "description": "Neural Turing Machines in pytorch",
                "license": "MIT License",
                "frameworks": [
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "324b7702fa51384465b6503449c6cdf52307fe30",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/clemkoa/ntm/blob/master/.gitignore"
                    }
                },
                "size": 1216
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "ebc13c39592ff5d9b43b1d83a727bae0a06ddc17",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/clemkoa/ntm/blob/master/LICENSE"
                    }
                },
                "size": 1071
            },
            {
                "type": "code",
                "name": "__init__.py",
                "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/clemkoa/ntm/blob/master/__init__.py"
                    }
                },
                "size": 0
            },
            {
                "type": "code",
                "name": "copy_task.py",
                "sha": "f973191184e5c1a8cc14e793bbe17d1a2426f0cd",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/clemkoa/ntm/blob/master/copy_task.py"
                    }
                },
                "size": 5360
            },
            {
                "type": "code",
                "name": "images",
                "sha": "a9f1c92e4b111a49f86c2f6cba06ac3f5262ee09",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/clemkoa/ntm/tree/master/images"
                    }
                },
                "num_files": 7
            },
            {
                "type": "code",
                "name": "ntm",
                "sha": "875a9df45e6b85c8591a3706799d6a3bb0bb9e53",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/clemkoa/ntm/tree/master/ntm"
                    }
                },
                "num_files": 6
            },
            {
                "type": "code",
                "name": "repeat_task.py",
                "sha": "48620dfbb54c2ad387b3ff1fbdddc80aaed12a07",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/clemkoa/ntm/blob/master/repeat_task.py"
                    }
                },
                "size": 6115
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "db1f0a1bdf7d9e75c43c927235e074555a6f60a7",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/clemkoa/ntm/blob/master/requirements.txt"
                    }
                },
                "size": 24
            },
            {
                "type": "code",
                "name": "tests",
                "sha": "c720d40a371ff3a79f58bcf7744765d5279f859a",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/clemkoa/ntm/tree/master/tests"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "trained_models",
                "sha": "253cff6b6c1bda7d4a2d329c7b3a73da98b7a9d6",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/clemkoa/ntm/tree/master/trained_models"
                    }
                },
                "num_files": 2
            }
        ]
    },
    "trained_model": {
        "binaries": [
            {
                "type": "binary",
                "name": "Dockerfile",
                "sha": "31a57d778ad9db5debfaf9fff4a2f2099f00c30a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/clemkoa/ntm/blob/master/Dockerfile"
                    }
                },
                "size": 181
            }
        ]
    },
    "authors": [
        {
            "name": "Clement Joudet",
            "github_id": "clemkoa"
        }
    ],
    "tags": [
        "neural-turing-machines",
        "deep-learning",
        "pytorch",
        "turing",
        "neural-networks"
    ],
    "description": "Neural Turing Machines in pytorch",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/clemkoa/ntm",
            "stars": 38,
            "issues": true,
            "readme": "# ntm - Neural Turing Machines in pytorch\n\nA [Neural Turing Machines](https://arxiv.org/abs/1410.5401) implementation in pytorch.\n\nThe goal was to implement a simple NTM with 1 read head and 1 write head, to reproduce the original paper's results.\n\n\n## Copy task\n\nThe copy task tests whether NTM can store and recall a long sequence of arbitrary information. The network is presented with an input sequence of random binary vectors followed by a delimiter flag. The target sequence is a copy of the input sequence. No inputs are presented to the model while it receives the targets, to ensure that there is no assistance.\n\nThe model is trained on sequences of 1 to 20 8-bit random vectors. In less than 50k iterations, the model usually becomes really accurate.\n\nHere is the net output compared to the target for a sequence of 20.\n![](images/copy_20.png)\n\nHere is the net output compared to the target for a sequence of 100. Note that the network was only trained with sequences of 20 or less.\n![](images/copy_100.png)\n\nHere is an example (seed=1) of loss during training, with a batch size of 8.\n![](images/loss_copy_batch8_seed1.png)\n\n## Repeat copy task\n\nAs said in the paper, \"the repeat copy task extends copy by requiring the network to output the copied sequence a specified number of times and then emit an end-of-sequence marker. [...]\nThe network receives random-length sequences of random binary vectors, followed by a scalar value indicating the desired number of copies, which appears on a separate input channel. To emit the end marker at the correct time the network must be both able to interpret the extra input and keep count of the number of copies it has performed so far. As with the copy task, no inputs are provided to the network after the initial sequence and repeat number.\"\n\nThe model is trained on sequences of 1 to 10 8-bit random vectors, with a repeat between 1 and 10.\n\nHere is the model output for a sequence of 10 and a repeat of 10.\n![](images/repeat_10_10.png)\n\nHere it is for a sequence of 10 and a repeat of 20. Note that the network was trained with a repeat of 10 max.\n![](images/repeat_10_20.png)\n\nHere it is for a sequence of 20 and a repeat of 10. Maybe it needs a bit more training here! Note that the network was trained on sequences of 10 or less.\n![](images/repeat_20_10.png)\n\nTraining on the repeat copy task takes substantially longer than the copy task. It usually takes at least 100k iterations to start seeing good results.\n\n## Usage\n\n```bash\n# installation\npip install -r requirements.txt\n# to train\npython copy_task.py --train\n# to evaluate\npython copy_task.py --eval\n\n```\n\n### References\n\n1. Graves, Alex, Greg Wayne, and Ivo Danihelka. \"Neural turing machines.\" arXiv preprint arXiv:1410.5401 (2014).\n1. https://github.com/loudinthecloud/pytorch-ntm/\n2. https://github.com/MarkPKCollier/NeuralTuringMachine\n",
            "readme_url": "https://github.com/clemkoa/ntm",
            "frameworks": [
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "Neural Turing Machines",
            "arxiv": "1410.5401",
            "year": 2014,
            "url": "http://arxiv.org/abs/1410.5401v2",
            "abstract": "We extend the capabilities of neural networks by coupling them to external\nmemory resources, which they can interact with by attentional processes. The\ncombined system is analogous to a Turing Machine or Von Neumann architecture\nbut is differentiable end-to-end, allowing it to be efficiently trained with\ngradient descent. Preliminary results demonstrate that Neural Turing Machines\ncan infer simple algorithms such as copying, sorting, and associative recall\nfrom input and output examples.",
            "authors": [
                "Alex Graves",
                "Greg Wayne",
                "Ivo Danihelka"
            ]
        }
    ],
    "domain": {
        "domain_type": "Natural Language Processing",
        "domain_prob": 0.9481217745828681,
        "task": "Machine Translation",
        "task_prob": 0.6062257829691389
    }
}