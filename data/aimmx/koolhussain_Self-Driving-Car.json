{
    "visibility": {
        "visibility": "public"
    },
    "name": "Self-Driving-Car",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "koolhussain",
                "owner_type": "User",
                "name": "Self-Driving-Car",
                "url": "https://github.com/koolhussain/Self-Driving-Car",
                "stars": 3,
                "pushed_at": "2018-08-14 14:28:13+00:00",
                "created_at": "2018-03-26 15:35:54+00:00",
                "language": "Python",
                "description": "Final Year Project on Self Driving Car using Udacity's Self Driving Car Simulator",
                "frameworks": [
                    "Keras",
                    "scikit-learn"
                ]
            },
            {
                "type": "code",
                "name": "Testing",
                "sha": "28279b1c0b38976babc290e3eb5eff4236b23f99",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/koolhussain/Self-Driving-Car/tree/master/Testing"
                    }
                },
                "num_files": 7
            },
            {
                "type": "code",
                "name": "aotunomous.py",
                "sha": "4aac30ddeb72fd52dfd92fc90280c8d17549d954",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/koolhussain/Self-Driving-Car/blob/master/aotunomous.py"
                    }
                },
                "size": 3036
            },
            {
                "type": "code",
                "name": "augment.py",
                "sha": "ac63980bf93485fb436e768e09503a5c70150872",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/koolhussain/Self-Driving-Car/blob/master/augment.py"
                    }
                },
                "size": 3594
            },
            {
                "type": "code",
                "name": "model.py",
                "sha": "75398b4d596ee6cb554833dc0327cd1143a0250f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/koolhussain/Self-Driving-Car/blob/master/model.py"
                    }
                },
                "size": 2643
            }
        ]
    },
    "trained_model": {
        "binaries": [
            {
                "type": "binary",
                "name": "model-001-0.02.h5",
                "sha": "7e38e1251a420e45fb5d1868bd34bb70907fcc42",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/koolhussain/Self-Driving-Car/blob/master/model-001-0.02.h5"
                    }
                },
                "size": 26144448
            }
        ]
    },
    "authors": [
        {
            "name": "Ahmad Hussain",
            "github_id": "koolhussain"
        }
    ],
    "tags": [],
    "description": "Final Year Project on Self Driving Car using Udacity's Self Driving Car Simulator",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/koolhussain/Self-Driving-Car",
            "stars": 3,
            "issues": true,
            "readme": "# Self-Driving-Car\nFinal Year Project on Self Driving Car using Udacity's Self Driving Car Simulator\n\n# Based on:\n\n  End to End Learning for Self-Driving Cars  https://arxiv.org/abs/1604.07316\n  \n# Other important papers:\n  \n   Convolutional networks for images, speech, and time series https://www.researchgate.net/profile/Yann_Lecun/publication/2453996_Convolutional_Networks_for_Images_Speech_and_Time-Series/links/0deec519dfa2325502000000.pdf\n   \n   Dropout: A Simple Way to Prevent Neural Networks from Overfitting http://jmlr.org/papers/v15/srivastava14a.html\n   \n   Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift https://arxiv.org/abs/1502.03167\n\n   Download Simulator at https://github.com/udacity/self-driving-car-sim\n\n   Udacity's Self-Driving Car Simulator https://github.com/udacity/self-driving-car-sim\n\nDependency:-\n os\n \n cv2\n \n matplotlib\n \n numpy\n \n pandas\n \n sklearn\n \n keras\n \n tensorflow\n \n cv2\n \n base64\n \n flask-socketio\n \n eventlet\n \n PIL \n \n flask\n \n io\n \n Microsoft Visual C++ 2015 Redistributable Update 3 \n \n installing help :- pip install <dependency-name>\n \n # How to get it Working:\n  1. Download the simulator Extract it and run it\n  \n  2. Click Training Mode and Press R to record, select folder of choice(i prefer to chose the folder in which my py files will be)\n  \n  3. Atleast do 3-Laps the weight file provided is trained on 3 Laps od Data close to 12k Images\n  \n  4. Install dependencies and run model.py(use cmd not IDLE or any other IDE)\n  \n  5. After training is completed change the file name in load_model() in aotunomous.py\n  \n  6. Run simulator in Autonomous Mode and run aotunomous.py using cmd\n  \n  7. Done\n  \n  \nRecording the Run to create Data will produce Images taken from Virtual cameras situated on LEFT, CENTER & RIGHT of the Car.\nit will also create a driving_log.csv file containing information of:\n  1.Path of Image from Center Camera\n  \n        C:\\Users\\koolhussain\\Desktop\\beta_simulator_windows\\IMG\\center_2018_04_28_03_41_55_266.jpg\n        \n  2.Path of Image from Left Camera\n  \n        C:\\Users\\koolhussain\\Desktop\\beta_simulator_windows\\IMG\\left_2018_04_28_03_41_55_266.jpg\n        \n  3.Path of Image from Right Camera\n  \n        C:\\Users\\koolhussain\\Desktop\\beta_simulator_windows\\IMG\\right_2018_04_28_03_41_55_266.jpg\n        \n  4.Steering Angle(range -25.0 to 25.0)\n  \n        0\n        \n  5.Throttle(range 0 to 1)\n  \n        0\n        \n  6.Reverse(range 0 to 1)\n  \n        0\n        \n  7.Speed(range 0 to 30)\n  \n        1.423443E-05\n        \n",
            "readme_url": "https://github.com/koolhussain/Self-Driving-Car",
            "frameworks": [
                "Keras",
                "scikit-learn"
            ]
        }
    ],
    "references": [
        {
            "title": "End to End Learning for Self-Driving Cars",
            "arxiv": "1604.07316",
            "year": 2016,
            "url": "http://arxiv.org/abs/1604.07316v1",
            "abstract": "We trained a convolutional neural network (CNN) to map raw pixels from a\nsingle front-facing camera directly to steering commands. This end-to-end\napproach proved surprisingly powerful. With minimum training data from humans\nthe system learns to drive in traffic on local roads with or without lane\nmarkings and on highways. It also operates in areas with unclear visual\nguidance such as in parking lots and on unpaved roads.\n  The system automatically learns internal representations of the necessary\nprocessing steps such as detecting useful road features with only the human\nsteering angle as the training signal. We never explicitly trained it to\ndetect, for example, the outline of roads.\n  Compared to explicit decomposition of the problem, such as lane marking\ndetection, path planning, and control, our end-to-end system optimizes all\nprocessing steps simultaneously. We argue that this will eventually lead to\nbetter performance and smaller systems. Better performance will result because\nthe internal components self-optimize to maximize overall system performance,\ninstead of optimizing human-selected intermediate criteria, e.g., lane\ndetection. Such criteria understandably are selected for ease of human\ninterpretation which doesn't automatically guarantee maximum system\nperformance. Smaller networks are possible because the system learns to solve\nthe problem with the minimal number of processing steps.\n  We used an NVIDIA DevBox and Torch 7 for training and an NVIDIA DRIVE(TM) PX\nself-driving car computer also running Torch 7 for determining where to drive.\nThe system operates at 30 frames per second (FPS).",
            "authors": [
                "Mariusz Bojarski",
                "Davide Del Testa",
                "Daniel Dworakowski",
                "Bernhard Firner",
                "Beat Flepp",
                "Prasoon Goyal",
                "Lawrence D. Jackel",
                "Mathew Monfort",
                "Urs Muller",
                "Jiakai Zhang",
                "Xin Zhang",
                "Jake Zhao",
                "Karol Zieba"
            ]
        },
        {
            "title": "Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift",
            "arxiv": "1502.03167",
            "year": 2015,
            "url": "http://arxiv.org/abs/1502.03167v3",
            "abstract": "Training Deep Neural Networks is complicated by the fact that the\ndistribution of each layer's inputs changes during training, as the parameters\nof the previous layers change. This slows down the training by requiring lower\nlearning rates and careful parameter initialization, and makes it notoriously\nhard to train models with saturating nonlinearities. We refer to this\nphenomenon as internal covariate shift, and address the problem by normalizing\nlayer inputs. Our method draws its strength from making normalization a part of\nthe model architecture and performing the normalization for each training\nmini-batch. Batch Normalization allows us to use much higher learning rates and\nbe less careful about initialization. It also acts as a regularizer, in some\ncases eliminating the need for Dropout. Applied to a state-of-the-art image\nclassification model, Batch Normalization achieves the same accuracy with 14\ntimes fewer training steps, and beats the original model by a significant\nmargin. Using an ensemble of batch-normalized networks, we improve upon the\nbest published result on ImageNet classification: reaching 4.9% top-5\nvalidation error (and 4.8% test error), exceeding the accuracy of human raters.",
            "authors": [
                "Sergey Ioffe",
                "Christian Szegedy"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.998989662598888,
        "task": "Image Classification",
        "task_prob": 0.9577798645298876
    },
    "training": {
        "datasets": [
            {
                "name": "ImageNet"
            }
        ]
    }
}