{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "NanigoNet",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "mhagiwara",
                "owner_type": "User",
                "name": "nanigonet",
                "url": "https://github.com/mhagiwara/nanigonet",
                "stars": 59,
                "pushed_at": "2020-06-19 04:29:03+00:00",
                "created_at": "2019-09-27 23:54:45+00:00",
                "language": "Python",
                "description": "NanigoNet \u2014 Language detector for code-mixed input supporting 150+19 human+programming languages using deep neural networks",
                "license": "MIT License",
                "frameworks": []
            },
            {
                "type": "code",
                "name": ".github",
                "sha": "1ae7cedee694e2b8be688f9c00c4c4f16e9ef8f7",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mhagiwara/nanigonet/tree/master/.github"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "f717486415f1ed71c41caa32e7cacf5956b479e1",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mhagiwara/nanigonet/blob/master/.gitignore"
                    }
                },
                "size": 1724
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "93630d18bae2c18e6b0b3b93c65f20939546f278",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mhagiwara/nanigonet/blob/master/LICENSE"
                    }
                },
                "size": 1072
            },
            {
                "type": "code",
                "name": "architecture.png",
                "sha": "44072bd779d1e670a69027fd519f988d6394bae4",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mhagiwara/nanigonet/blob/master/architecture.png"
                    }
                },
                "size": 45795
            },
            {
                "type": "code",
                "name": "languages.tsv",
                "sha": "d16a8f47e44113e4516241bd2931159c6ade9250",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mhagiwara/nanigonet/blob/master/languages.tsv"
                    }
                },
                "size": 4197
            },
            {
                "type": "code",
                "name": "nanigonet",
                "sha": "bc5cf4ea85e7e8e7a546bc417761778ec1e1fa4a",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mhagiwara/nanigonet/tree/master/nanigonet"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "d4b23f688a1eca7c13ceb7a2d25cf7018e1a050a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mhagiwara/nanigonet/blob/master/requirements.txt"
                    }
                },
                "size": 68
            },
            {
                "type": "code",
                "name": "run.py",
                "sha": "84eb4050f272877e8de803844a8aac35d7234df9",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mhagiwara/nanigonet/blob/master/run.py"
                    }
                },
                "size": 1249
            },
            {
                "type": "code",
                "name": "scripts",
                "sha": "b40b1e5e96b91afe2ff9ac1adba2680e09357e3c",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mhagiwara/nanigonet/tree/master/scripts"
                    }
                },
                "num_files": 10
            }
        ]
    },
    "authors": [
        {
            "name": "Masato Hagiwara",
            "email": "hagisan@gmail.com",
            "github_id": "mhagiwara"
        },
        {
            "name": "Josh Tanner",
            "email": "mindful.jt@gmail.com",
            "github_id": "Mindful"
        }
    ],
    "tags": [],
    "description": "NanigoNet \u2014 Language detector for code-mixed input supporting 150+19 human+programming languages using deep neural networks",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/mhagiwara/nanigonet",
            "stars": 59,
            "issues": true,
            "readme": "# NanigoNet\n\n[Masato Hagiwara](http://masatohagiwara.net/)\n\nNanigoNet is a language detector for code-mixed input supporting 150 human and 19 programming languages implemented using [AllenNLP](https://allennlp.org)+[PyTorch](https://pytorch.org). \n\n![The architecture of NanigoNet](architecture.png)\n\nUnlike other language detectors, NanigoNet detects language per character using a [convolutional neural network](https://arxiv.org/abs/1612.08083)-based sequential labeling model, which makes it suitable for code-mixed input where the language changes within the text (such as source code with comments, documents with markups, etc.). It can also produce prediction results for the entire text.\n\nThere is another language detector, [LanideNN](https://ufal.mff.cuni.cz/tom-kocmi/lanidenn), which also makes a prediction per character. There are some notable differences between NanigoNet and LanideNN, including:\n\n* NanigoNet supports [more human languages](languages.tsv), including Esperanto and Hawaiian\n* NanigoNet detects 19 major programming languages\n* NanigoNet uses a more modern neural network architecture ([gated convolutional neural networks](https://arxiv.org/abs/1612.08083) with [residual connections](https://arxiv.org/abs/1512.03385))\n* NanigoNet is implemented on [AllenNLP](https://allennlp.org)+[PyTorch](https://pytorch.org) while LanideNN uses TensorFlow\n* NanigoNet detects Simplified and Traditional Chinese separately (very important for my use cases)\n* NanigoNet only uses CC-BY-SA resources, meaning you are free to use the code and the model for commercial purposes\n\nMany design decisions of NanigoNet, including the choice of the training data, are influenced by LanideNN. I hereby sincerely thank the authors of the software.\n\n\"Nanigo\" (\u4f55\u8a9e) means \"what language\" in Japanese.\n\n# Supported languages\n\nSee [languages.tsv](languages.tsv).\n\nNanigoNet uses a unified set of languages IDs both for human and programming languages. Human languages are identified by a prefix `h:` + 3-letter ISO 639-2 code (for example, `h:eng` for English). Only exception is `h:cmn-hans` for Simplified Chinese and `h:cmn-hant` for Traditional Chinese.\n\nFor programming languages, it uses a prefix `p:` + file extension most commonly used for that language (for example, `p:js` for JavaScript and `p:py` for Python). \n\n# Pre-requisites\n\n* Python 3.6.1+\n* AllenNLP 0.9.0+\n\n# Install\n\n* Clone the repository\n* Run `pip install -r requirements.txt` under a clean Python virtual environment\n* Download the [pre-trained model](https://nanigonet.s3.amazonaws.com/models/model.744k.256d.gcnn.11layers.tar.gz) and put it in the same directory\n\n# Usage\n\nFrom command line:\n\n```\n$ python run.py [path to model.tar.gz] < [input text file]\n```\n\nFrom Python code:\n```\nfrom nanigonet import NanigoNet\n\nnet = NanigoNet(model_path=[path to model.tar.gz])\ntexts = ['Hello!', '\u4f60\u597d!']\nresults = net.predict_batch(texts)\n```\n\nThis produces a JSON object (or a Python dictionary) per input instance. The keys of the object/dictionary are:\n\n* `char_probs`: list of per-char dictionaries of `{lang_id: prob}`    \n* `char_best`: list of per-char language IDs with the largest probability  \n* `text_probs`: dictionary of `{lang_id: prob}` for the input text\n* `text_best`: Language ID for the input text with the largest probability \n\nExample:\n\n```\n$ echo 'Hello!' | python run.py model.744k.256d.gcnn.11layers.tar.gz | jq .\n{\n  \"char_probs\": [\n    {\n      \"h:eng\": 0.9916031956672668,\n      \"h:mar\": 0.004953697789460421,\n      \"h:sco\": 0.0008433321490883827\n    },\n    ...\n  \"text_probs\": {\n    \"h:eng\": 0.9324732422828674,\n    \"h:ita\": 0.0068493434228003025,\n    \"h:spa\": 0.006260495167225599\n  },\n  \"char_best\": [\n    \"h:eng\",\n    \"h:eng\",\n    \"h:eng\",\n    \"h:eng\",\n    \"h:eng\",\n    \"h:eng\"\n  ],\n  \"text_best\": \"h:eng\"\n}\n```\n\nUsage of `run.py`:\n\n```\nusage: run.py [-h] [--top-k TOP_K] [--cuda-device CUDA_DEVICE]\n              [--batch-size BATCH_SIZE]\n              archive_file\n```\n\nParameters to the constructor of `NanigoNet`:\n\n* `model_path`: path to the pre-trained model ifle\n* `top_k`: number of predictions returned with results in `char_probs` and `text_probs`\n* `cuda_device`: GPU index to use for prediction (specify `-1` for CPU)\n\n# Notes\n\n* The training data for human languages comes mainly from Wikipedia ([Web To Corpus](http://ufal.mff.cuni.cz/w2c)) and [Tatoeba.org](https://tatoeba.org). For programming languages, I used randomly sampled code from Github repositories with permissive licenses (e.g., Apache 2.0) and file extensions.\n* More pre-trained models may be released in the future.\n* If you speak one of the supported languages and find weird results, let me know! In particular I'm interested in expanding Arabic to different dialects spoken in different regions and by social groups.\n",
            "readme_url": "https://github.com/mhagiwara/nanigonet",
            "frameworks": []
        }
    ],
    "references": [
        {
            "title": "Deep Residual Learning for Image Recognition",
            "arxiv": "1512.03385",
            "year": 2015,
            "url": "http://arxiv.org/abs/1512.03385v1",
            "abstract": "Deeper neural networks are more difficult to train. We present a residual\nlearning framework to ease the training of networks that are substantially\ndeeper than those used previously. We explicitly reformulate the layers as\nlearning residual functions with reference to the layer inputs, instead of\nlearning unreferenced functions. We provide comprehensive empirical evidence\nshowing that these residual networks are easier to optimize, and can gain\naccuracy from considerably increased depth. On the ImageNet dataset we evaluate\nresidual nets with a depth of up to 152 layers---8x deeper than VGG nets but\nstill having lower complexity. An ensemble of these residual nets achieves\n3.57% error on the ImageNet test set. This result won the 1st place on the\nILSVRC 2015 classification task. We also present analysis on CIFAR-10 with 100\nand 1000 layers.\n  The depth of representations is of central importance for many visual\nrecognition tasks. Solely due to our extremely deep representations, we obtain\na 28% relative improvement on the COCO object detection dataset. Deep residual\nnets are foundations of our submissions to ILSVRC & COCO 2015 competitions,\nwhere we also won the 1st places on the tasks of ImageNet detection, ImageNet\nlocalization, COCO detection, and COCO segmentation.",
            "authors": [
                "Kaiming He",
                "Xiangyu Zhang",
                "Shaoqing Ren",
                "Jian Sun"
            ]
        },
        {
            "title": "Language Modeling with Gated Convolutional Networks",
            "arxiv": "1612.08083",
            "year": 2016,
            "url": "http://arxiv.org/abs/1612.08083v3",
            "abstract": "The pre-dominant approach to language modeling to date is based on recurrent\nneural networks. Their success on this task is often linked to their ability to\ncapture unbounded context. In this paper we develop a finite context approach\nthrough stacked convolutions, which can be more efficient since they allow\nparallelization over sequential tokens. We propose a novel simplified gating\nmechanism that outperforms Oord et al (2016) and investigate the impact of key\narchitectural decisions. The proposed approach achieves state-of-the-art on the\nWikiText-103 benchmark, even though it features long-term dependencies, as well\nas competitive results on the Google Billion Words benchmark. Our model reduces\nthe latency to score a sentence by an order of magnitude compared to a\nrecurrent baseline. To our knowledge, this is the first time a non-recurrent\napproach is competitive with strong recurrent models on these large scale\nlanguage tasks.",
            "authors": [
                "Yann N. Dauphin",
                "Angela Fan",
                "Michael Auli",
                "David Grangier"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "Web To Corpus",
                "connection": {
                    "name": "url",
                    "source": {
                        "url": "http://ufal.mff.cuni.cz/w2c"
                    }
                }
            },
            {
                "name": "Wikipedia"
            },
            {
                "name": "ImageNet"
            },
            {
                "name": "ImageNet Detection"
            },
            {
                "name": "ILSVRC 2015"
            },
            {
                "name": "WikiText-103"
            },
            {
                "name": "CIFAR-10"
            },
            {
                "name": "COCO"
            }
        ]
    },
    "domain": {
        "domain_type": "Natural Language Processing",
        "domain_prob": 0.8730485094765332,
        "task": "Language Modelling",
        "task_prob": 0.39274228892580165
    }
}