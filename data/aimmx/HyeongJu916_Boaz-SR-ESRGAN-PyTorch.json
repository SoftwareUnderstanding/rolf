{
    "visibility": {
        "visibility": "public",
        "license": "Apache License 2.0"
    },
    "name": "\ufeff# Boaz-SR-ESRGAN-PyTorch",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "HyeongJu916",
                "owner_type": "User",
                "name": "Boaz-SR-ESRGAN-PyTorch",
                "url": "https://github.com/HyeongJu916/Boaz-SR-ESRGAN-PyTorch",
                "stars": 3,
                "pushed_at": "2021-01-20 06:26:45+00:00",
                "created_at": "2021-01-19 08:50:17+00:00",
                "language": "Python",
                "license": "Apache License 2.0",
                "frameworks": [
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "c0d1ed7e6b80ae898ec734e7fca19a2be8dd9936",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/HyeongJu916/Boaz-SR-ESRGAN-PyTorch/blob/master/.gitignore"
                    }
                },
                "size": 1851
            },
            {
                "type": "code",
                "name": "ESRGAN_4x.pth",
                "sha": "4444bb6633ac3d2b0ae6238e5083ba77de4d9f6d",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/HyeongJu916/Boaz-SR-ESRGAN-PyTorch/blob/master/ESRGAN_4x.pth"
                    }
                },
                "size": 13021045
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "261eeb9e9f8b2b4b0d119366dda99c6fd7d35c64",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/HyeongJu916/Boaz-SR-ESRGAN-PyTorch/blob/master/LICENSE"
                    }
                },
                "size": 11357
            },
            {
                "type": "code",
                "name": "esrgan_pytorch",
                "sha": "a9514142bb1a2989349f1e4a59ed192673fd9c73",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/HyeongJu916/Boaz-SR-ESRGAN-PyTorch/tree/master/esrgan_pytorch"
                    }
                },
                "num_files": 8
            },
            {
                "type": "code",
                "name": "hubconf.py",
                "sha": "48aec0971446e79969eeba5ea2b9d88f277abd98",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/HyeongJu916/Boaz-SR-ESRGAN-PyTorch/blob/master/hubconf.py"
                    }
                },
                "size": 2732
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "987bf43eae168d8371e0e3f32ad686f468e810a4",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/HyeongJu916/Boaz-SR-ESRGAN-PyTorch/blob/master/requirements.txt"
                    }
                },
                "size": 67
            },
            {
                "type": "code",
                "name": "test_image.py",
                "sha": "937a2331c40315b1d7e4998c6d2a45931775d451",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/HyeongJu916/Boaz-SR-ESRGAN-PyTorch/blob/master/test_image.py"
                    }
                },
                "size": 3927
            },
            {
                "type": "code",
                "name": "test_video.py",
                "sha": "264523589691f6dc9d0e9747d77032f4235dfa54",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/HyeongJu916/Boaz-SR-ESRGAN-PyTorch/blob/master/test_video.py"
                    }
                },
                "size": 6481
            },
            {
                "type": "code",
                "name": "train.py",
                "sha": "5e59c1265fad9659690417ce276a487c4feb6b10",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/HyeongJu916/Boaz-SR-ESRGAN-PyTorch/blob/master/train.py"
                    }
                },
                "size": 15480
            }
        ]
    },
    "authors": [
        {
            "name": "HyeongJu916",
            "github_id": "HyeongJu916"
        }
    ],
    "tags": [],
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/HyeongJu916/Boaz-SR-ESRGAN-PyTorch",
            "stars": 3,
            "issues": true,
            "readme": "\ufeff# Boaz-SR-ESRGAN-PyTorch\n- pre-trained model\uc744 \uc774\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n- pre-trained model\uc740 Game\uacfc Real World\uc758 \ucd95\uad6c\uc601\uc0c1\uc5d0\uc11c \ucd94\ucd9c\ud55c frame(\uc774\ubbf8\uc9c0)\ub97c \ud559\uc2b5\ud558\uc600\uc2b5\ub2c8\ub2e4.\n- `test_video.py`\ub294 \uae30\ubcf8\uc801\uc73c\ub85c w:h = 16:9 \ube44\uc728\uc774\uba70 h\uc758 size\uac00 180\uc778 video\ub97c input\uc73c\ub85c \ubc1b\ub3c4\ub85d \uc124\uc815\ud558\uc600\uc2b5\ub2c8\ub2e4. \n\n### Homepage\n- https://boazsr.herokuapp.com/index/\n\n### Result Videos\n- https://www.youtube.com/channel/UC7um5reD3yyAm0s8VLQ-iGw\n\n# Reference\nESRGAN-PyTorch\n- https://github.com/Lornatang/ESRGAN-PyTorch#about-enhanced-super-resolution-generative-adversarial-networks\n\n\n# ESRGAN-PyTorch\n\n### Overview\nThis repository contains an op-for-op PyTorch reimplementation of [ESRGAN: Enhanced Super-Resolution Generative Adversarial Networks](https://arxiv.org/abs/1809.00219).\n\n### Table of contents\n1. [About Enhanced Super-Resolution Generative Adversarial Networks](#about-enhanced-super-resolution-generative-adversarial-networks)\n2. [Model Description](#model-description)\n3. [Installation](#installation)\n    * [Clone and install requirements](#clone-and-install-requirements)\n    * [Download dataset](#download-dataset)\n4. [Test](#test)\n    * [Test benchmark](#test-benchmark)\n    * [Test image](#test-image)\n    * [Test video](#test-video)\n4. [Train](#train-eg-div2k)\n5. [Contributing](#contributing) \n6. [Credit](#credit)\n\n### About Enhanced Super-Resolution Generative Adversarial Networks\n\nIf you're new to ESRGAN, here's an abstract straight from the paper:\n\nThe Super-Resolution Generative Adversarial Network (SRGAN) is a seminal work that is capable of generating \nrealistic textures during single image super-resolution. However, the hallucinated details are often accompanied \nwith unpleasant artifacts. To further enhance the visual quality, we thoroughly study three key components of \nSRGAN - network architecture, adversarial loss and perceptual loss, and improve each of them to derive \nan Enhanced SRGAN (ESRGAN). In particular, we introduce the Residual-in-Residual Dense Block (RRDB) without \nbatch normalization as the basic network building unit. Moreover, we borrow the idea from relativistic GAN \nto let the discriminator predict relative realness instead of the absolute value. Finally, we improve the \nperceptual loss by using the features before activation, which could provide stronger supervision for brightness \nconsistency and texture recovery. Benefiting from these improvements, the proposed ESRGAN achieves consistently \nbetter visual quality with more realistic and natural textures than SRGAN and won the first place in \nthe PIRM2018-SR Challenge. The code is available at [this https URL](https://github.com/xinntao/ESRGAN) .\n\n### Model Description\n\nWe have two networks, G (Generator) and D (Discriminator).The Generator is a network for generating images. \nIt receives a random noise z and generates images from this noise, which is called G(z).Discriminator is \na discriminant network that discriminates whether an image is real. The input is x, x is a picture, \nand the output is D of x is the probability that x is a real picture, and if it's 1, it's 100% real, \nand if it's 0, it's not real.\n\n### Installation\n\n#### Clone and install requirements\n\n```bash\n$ git clone https://github.com/Lornatang/ESRGAN-PyTorch.git\n$ cd ESRGAN-PyTorch/\n$ pip3 install -r requirements.txt\n```\n\n#### Download dataset\n\n```bash\n$ cd data/\n$ bash download_dataset.sh\n```\n\n### Test\n\n#### Test benchmark\n\n```text\nusage: test_benchmark.py [-h] [--dataroot DATAROOT] [-j N]\n                         [--upscale-factor {2,4}] [--model-path PATH]\n                         [--device DEVICE]\n\nESRGAN: Enhanced Super-Resolution Generative Adversarial Networks.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --dataroot DATAROOT   Path to datasets. (default:`./data`)\n  -j N, --workers N     Number of data loading workers. (default:4)\n  --upscale-factor {2,4}\n                        Low to high resolution scaling factor. (default:4).\n  --model-path PATH     Path to latest checkpoint for model. (default:\n                        ``./weights/ESRGAN_4x.pth``).\n  --device DEVICE       device id i.e. `0` or `0,1` or `cpu`. (default:\n                        ``CUDA:0``).\n\n\n# Example\n$ python test_benchmark.py --dataroot ./data/DIV2K --upscale-factor 4 --model-path ./weight/ESRGAN_X4.pth --device 0\n```\n\n#### Test image\n\n```text\nusage: test_image.py [-h] [--lr LR] [--hr HR] [--upscale-factor {2,4}]\n                     [--model-path PATH] [--device DEVICE]\n\nESRGAN: Enhanced Super-Resolution Generative Adversarial Networks.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --lr LR               Test low resolution image name.\n  --hr HR               Raw high resolution image name.\n  --upscale-factor {2,4}\n                        Low to high resolution scaling factor. (default:4).\n  --model-path PATH     Path to latest checkpoint for model. (default:\n                        ``./weight/ESRGAN_4x.pth``).\n  --device DEVICE       device id i.e. `0` or `0,1` or `cpu`. (default:\n                        ``CUDA:0``).\n\n# Example\n$ python test_image.py --lr ./lr.png --hr ./hr.png --upscale-factor 4 --model-path ./weight/ESRGAN_X4.pth --device 0\n```\n\n#### Test video\n\n```text\nusage: test_video.py [-h] --file FILE [--upscale-factor {2,4}]\n                     [--model-path PATH] [--device DEVICE] [--view]\n\nESRGAN algorithm is applied to video files.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --file FILE           Test low resolution video name.\n  --upscale-factor {2,4}\n                        Low to high resolution scaling factor. (default:4).\n  --model-path PATH     Path to latest checkpoint for model. (default:\n                        ``./weight/ESRGAN_4x.pth``).\n  --device DEVICE       device id i.e. `0` or `0,1` or `cpu`. (default:\n                        ``CUDA:0``).\n  --view                Super resolution real time to show.\n\n# Example\n$ python test_video.py --file ./lr.mp4 --upscale-factor 4 --model-path ./weight/ESRGAN_X4.pth --device 0\n```\n\nLow resolution / Recovered High Resolution / Ground Truth\n\n<span align=\"center\"><img src=\"assets/result.png\" alt=\"\">\n</span>\n\n### Train (e.g DIV2K)\n\n```text\nusage: train.py [-h] [--dataroot DATAROOT] [-j N] [--start-epoch N]\n                [--psnr-iters N] [--iters N] [-b N] [--psnr-lr PSNR_LR]\n                [--lr LR] [--upscale-factor {2,4}] [--resume_PSNR] [--resume]\n                [--manualSeed MANUALSEED] [--device DEVICE]\n\nESRGAN: Enhanced Super-Resolution Generative Adversarial Networks.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --dataroot DATAROOT   Path to datasets. (default:`./data`)\n  -j N, --workers N     Number of data loading workers. (default:4)\n  --start-epoch N       manual epoch number (useful on restarts)\n  --psnr-iters N        The number of iterations is needed in the training of\n                        PSNR model. (default:1e6)\n  --iters N             The training of srgan model requires the number of\n                        iterations. (default:4e5)\n  -b N, --batch-size N  mini-batch size (default: 16), this is the total batch\n                        size of all GPUs on the current node when using Data\n                        Parallel or Distributed Data Parallel.\n  --psnr-lr PSNR_LR     Learning rate for PSNR model. (default:2e-4)\n  --lr LR               Learning rate. (default:1e-4)\n  --upscale-factor {2,4}\n                        Low to high resolution scaling factor. (default:4).\n  --resume_PSNR         Path to latest checkpoint for PSNR model.\n  --resume              Path to latest checkpoint for Generator.\n  --manualSeed MANUALSEED\n                        Seed for initializing training. (default:10000)\n  --device DEVICE       device id i.e. `0` or `0,1` or `cpu`. (default: ``).\n\n# Example (e.g DIV2K)\n$ python train.py --dataroot ./data/DIV2K --upscale-factor 4\n```\n\nIf you want to load weights that you've trained before, run the following command.\n\n```bash\n$ python train.py --dataroot ./data/DIV2K \\\n                  --upscale-factor 4        \\\n                  --resume_PSNR \\\n                  --resume\n```\n\n### Contributing\n\nIf you find a bug, create a GitHub issue, or even better, submit a pull request. Similarly, if you have questions, simply post them as GitHub issues.   \n\nI look forward to seeing what the community does with these models! \n\n### Credit\n\n#### ESRGAN: Enhanced Super-Resolution Generative Adversarial Networks\n_Xintao Wang, Ke Yu, Shixiang Wu, Jinjin Gu, Yihao Liu, Chao Dong, Chen Change Loy, Yu Qiao, Xiaoou Tang_ <br>\n\n**Abstract** <br>\nThe Super-Resolution Generative Adversarial Network (SRGAN) is a seminal work that is capable of generating \nrealistic textures during single image super-resolution. However, the hallucinated details are often accompanied \nwith unpleasant artifacts. To further enhance the visual quality, we thoroughly study three key components of \nSRGAN - network architecture, adversarial loss and perceptual loss, and improve each of them to derive \nan Enhanced SRGAN (ESRGAN). In particular, we introduce the Residual-in-Residual Dense Block (RRDB) without \nbatch normalization as the basic network building unit. Moreover, we borrow the idea from relativistic GAN \nto let the discriminator predict relative realness instead of the absolute value. Finally, we improve the \nperceptual loss by using the features before activation, which could provide stronger supervision for brightness \nconsistency and texture recovery. Benefiting from these improvements, the proposed ESRGAN achieves consistently \nbetter visual quality with more realistic and natural textures than SRGAN and won the first place in \nthe PIRM2018-SR Challenge. The code is available at [this https URL](https://github.com/xinntao/ESRGAN) .\n[[Paper]](https://arxiv.org/pdf/1609.04802)\n\n```\n@misc{wang2018esrgan,\n    title={ESRGAN: Enhanced Super-Resolution Generative Adversarial Networks},\n    author={Xintao Wang and Ke Yu and Shixiang Wu and Jinjin Gu and Yihao Liu and Chao Dong and Chen Change Loy and Yu Qiao and Xiaoou Tang},\n    year={2018},\n    eprint={1809.00219},\n    archivePrefix={arXiv},\n    primaryClass={cs.CV}\n}\n```\n",
            "readme_url": "https://github.com/HyeongJu916/Boaz-SR-ESRGAN-PyTorch",
            "frameworks": [
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "ESRGAN: Enhanced Super-Resolution Generative Adversarial Networks",
            "arxiv": "1809.00219",
            "year": 2018,
            "url": "http://arxiv.org/abs/1809.00219v2",
            "abstract": "The Super-Resolution Generative Adversarial Network (SRGAN) is a seminal work\nthat is capable of generating realistic textures during single image\nsuper-resolution. However, the hallucinated details are often accompanied with\nunpleasant artifacts. To further enhance the visual quality, we thoroughly\nstudy three key components of SRGAN - network architecture, adversarial loss\nand perceptual loss, and improve each of them to derive an Enhanced SRGAN\n(ESRGAN). In particular, we introduce the Residual-in-Residual Dense Block\n(RRDB) without batch normalization as the basic network building unit.\nMoreover, we borrow the idea from relativistic GAN to let the discriminator\npredict relative realness instead of the absolute value. Finally, we improve\nthe perceptual loss by using the features before activation, which could\nprovide stronger supervision for brightness consistency and texture recovery.\nBenefiting from these improvements, the proposed ESRGAN achieves consistently\nbetter visual quality with more realistic and natural textures than SRGAN and\nwon the first place in the PIRM2018-SR Challenge. The code is available at\nhttps://github.com/xinntao/ESRGAN .",
            "authors": [
                "Xintao Wang",
                "Ke Yu",
                "Shixiang Wu",
                "Jinjin Gu",
                "Yihao Liu",
                "Chao Dong",
                "Chen Change Loy",
                "Yu Qiao",
                "Xiaoou Tang"
            ]
        },
        {
            "primaryclass": "cs.CV",
            "archiveprefix": "arXiv",
            "eprint": "1809.00219",
            "year": "2018",
            "author": [
                "Wang, Xintao",
                "Yu, Ke",
                "Wu, Shixiang",
                "Gu, Jinjin",
                "Liu, Yihao",
                "Dong, Chao",
                "Loy, Chen Change",
                "Qiao, Yu",
                "Tang, Xiaoou"
            ],
            "title": "ESRGAN: Enhanced Super-Resolution Generative Adversarial Networks",
            "ENTRYTYPE": "misc",
            "ID": "wang2018esrgan",
            "authors": [
                "Wang, Xintao",
                "Yu, Ke",
                "Wu, Shixiang",
                "Gu, Jinjin",
                "Liu, Yihao",
                "Dong, Chao",
                "Loy, Chen Change",
                "Qiao, Yu",
                "Tang, Xiaoou"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.999952079163526,
        "task": "Image Generation",
        "task_prob": 0.9467664362215028
    }
}