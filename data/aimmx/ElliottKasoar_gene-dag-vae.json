{
    "visibility": {
        "visibility": "public"
    },
    "name": "GeneVAE",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "ElliottKasoar",
                "owner_type": "User",
                "name": "gene-dag-vae",
                "url": "https://github.com/ElliottKasoar/gene-dag-vae",
                "stars": 2,
                "pushed_at": "2020-12-07 01:16:28+00:00",
                "created_at": "2020-08-21 12:12:37+00:00",
                "language": "Jupyter Notebook",
                "frameworks": [
                    "Keras",
                    "scikit-learn",
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": ".gitattributes",
                "sha": "6a6ccf5d874fec134ee712572cc03a0f2dd7afec",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ElliottKasoar/gene-dag-vae/blob/master/.gitattributes"
                    }
                },
                "size": 42
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "3fb02d2d7605dc322aaba6e33bd6441b6af1c65c",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ElliottKasoar/gene-dag-vae/blob/master/.gitignore"
                    }
                },
                "size": 2147
            },
            {
                "type": "code",
                "name": "AE_test.py",
                "sha": "8cc5f946a88d48c624974297711e4f91100fef1a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ElliottKasoar/gene-dag-vae/blob/master/AE_test.py"
                    }
                },
                "size": 3580
            },
            {
                "type": "code",
                "name": "DAG_model.py",
                "sha": "f5a14f3be24cfdc601152cbff1d7490e83956589",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ElliottKasoar/gene-dag-vae/blob/master/DAG_model.py"
                    }
                },
                "size": 14718
            },
            {
                "type": "code",
                "name": "GeneAE.py",
                "sha": "6865c079ebc699974bcb3c1cc56cf06f4aa9fe23",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ElliottKasoar/gene-dag-vae/blob/master/GeneAE.py"
                    }
                },
                "size": 12162
            },
            {
                "type": "code",
                "name": "GeneVAE.py",
                "sha": "09ba895ae6e87cbb24e7f8249edf50207d412336",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ElliottKasoar/gene-dag-vae/blob/master/GeneVAE.py"
                    }
                },
                "size": 30874
            },
            {
                "type": "code",
                "name": "Notebooks",
                "sha": "b943bb39f0a8d991c65cfed1f0f1d8dfab1ea5cc",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ElliottKasoar/gene-dag-vae/tree/master/Notebooks"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "VAE_test.py",
                "sha": "e980c5efa61f69e86fd80024c7f3d968169ddbb5",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ElliottKasoar/gene-dag-vae/blob/master/VAE_test.py"
                    }
                },
                "size": 6796
            },
            {
                "type": "code",
                "name": "__init__.py",
                "sha": "f815d69b47229ebd605cb6eceff51e8d501bb74f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ElliottKasoar/gene-dag-vae/blob/master/__init__.py"
                    }
                },
                "size": 53
            },
            {
                "type": "code",
                "name": "cluster.py",
                "sha": "d60bd49a9aeb2c352c2b79349d6c724a8c801b9c",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ElliottKasoar/gene-dag-vae/blob/master/cluster.py"
                    }
                },
                "size": 4748
            },
            {
                "type": "code",
                "name": "create_graph.py",
                "sha": "bd8281265d0c9b504825da935adc7da154882e73",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ElliottKasoar/gene-dag-vae/blob/master/create_graph.py"
                    }
                },
                "size": 3940
            },
            {
                "type": "code",
                "name": "load.py",
                "sha": "801ddae298dd297a2154f6e23f5b47df312545b7",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ElliottKasoar/gene-dag-vae/blob/master/load.py"
                    }
                },
                "size": 4577
            },
            {
                "type": "code",
                "name": "tb_callback.py",
                "sha": "9178b6bfc26b8637f0d6e72b33d84d97352003dd",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ElliottKasoar/gene-dag-vae/blob/master/tb_callback.py"
                    }
                },
                "size": 17274
            },
            {
                "type": "code",
                "name": "temp.py",
                "sha": "6e8bab2e9758c008e25895b0dfc3f252c2b9ee7f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ElliottKasoar/gene-dag-vae/blob/master/temp.py"
                    }
                },
                "size": 9749
            }
        ]
    },
    "authors": [
        {
            "name": "ChiaraLeadbeater",
            "github_id": "ChiaraLeadbeater"
        },
        {
            "name": "ElliottKasoar",
            "github_id": "ElliottKasoar"
        }
    ],
    "tags": [],
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/ElliottKasoar/gene-dag-vae",
            "stars": 2,
            "issues": true,
            "readme": "## GeneVAE\n# Based on the following papers:\n* DCA: https://www.nature.com/articles/s41467-018-07931-2 , https://github.com/theislab/dca\n\n* VAE: https://arxiv.org/pdf/1312.6114.pdf\n* Beta-VAE: https://openreview.net/pdf?id=Sy2fzU9gl\n* Adversarial VAE: https://arxiv.org/pdf/2004.04467.pdf\n* scVI: https://www.nature.com/articles/s41592-018-0229-2 , https://github.com/YosefLab/scvi-tools\n\n* GCN https://arxiv.org/pdf/1609.02907.pdf , https://github.com/tkipf/keras-gcn\n* DAG: https://arxiv.org/pdf/1904.10098.pdf\n\n\n\n\n\n",
            "readme_url": "https://github.com/ElliottKasoar/gene-dag-vae",
            "frameworks": [
                "Keras",
                "scikit-learn",
                "TensorFlow"
            ]
        }
    ],
    "references": [
        {
            "title": "DAG-GNN: DAG Structure Learning with Graph Neural Networks",
            "arxiv": "1904.10098",
            "year": 2019,
            "url": "http://arxiv.org/abs/1904.10098v1",
            "abstract": "Learning a faithful directed acyclic graph (DAG) from samples of a joint\ndistribution is a challenging combinatorial problem, owing to the intractable\nsearch space superexponential in the number of graph nodes. A recent\nbreakthrough formulates the problem as a continuous optimization with a\nstructural constraint that ensures acyclicity (Zheng et al., 2018). The authors\napply the approach to the linear structural equation model (SEM) and the\nleast-squares loss function that are statistically well justified but\nnevertheless limited. Motivated by the widespread success of deep learning that\nis capable of capturing complex nonlinear mappings, in this work we propose a\ndeep generative model and apply a variant of the structural constraint to learn\nthe DAG. At the heart of the generative model is a variational autoencoder\nparameterized by a novel graph neural network architecture, which we coin\nDAG-GNN. In addition to the richer capacity, an advantage of the proposed model\nis that it naturally handles discrete variables as well as vector-valued ones.\nWe demonstrate that on synthetic data sets, the proposed method learns more\naccurate graphs for nonlinearly generated samples; and on benchmark data sets\nwith discrete variables, the learned graphs are reasonably close to the global\noptima. The code is available at \\url{https://github.com/fishmoon1234/DAG-GNN}.",
            "authors": [
                "Yue Yu",
                "Jie Chen",
                "Tian Gao",
                "Mo Yu"
            ]
        },
        {
            "title": "Semi-Supervised Classification with Graph Convolutional Networks",
            "arxiv": "1609.02907",
            "year": 2016,
            "url": "http://arxiv.org/abs/1609.02907v4",
            "abstract": "We present a scalable approach for semi-supervised learning on\ngraph-structured data that is based on an efficient variant of convolutional\nneural networks which operate directly on graphs. We motivate the choice of our\nconvolutional architecture via a localized first-order approximation of\nspectral graph convolutions. Our model scales linearly in the number of graph\nedges and learns hidden layer representations that encode both local graph\nstructure and features of nodes. In a number of experiments on citation\nnetworks and on a knowledge graph dataset we demonstrate that our approach\noutperforms related methods by a significant margin.",
            "authors": [
                "Thomas N. Kipf",
                "Max Welling"
            ]
        },
        {
            "title": "Auto-Encoding Variational Bayes",
            "arxiv": "1312.6114",
            "year": 2013,
            "url": "http://arxiv.org/abs/1312.6114v10",
            "abstract": "How can we perform efficient inference and learning in directed probabilistic\nmodels, in the presence of continuous latent variables with intractable\nposterior distributions, and large datasets? We introduce a stochastic\nvariational inference and learning algorithm that scales to large datasets and,\nunder some mild differentiability conditions, even works in the intractable\ncase. Our contributions is two-fold. First, we show that a reparameterization\nof the variational lower bound yields a lower bound estimator that can be\nstraightforwardly optimized using standard stochastic gradient methods. Second,\nwe show that for i.i.d. datasets with continuous latent variables per\ndatapoint, posterior inference can be made especially efficient by fitting an\napproximate inference model (also called a recognition model) to the\nintractable posterior using the proposed lower bound estimator. Theoretical\nadvantages are reflected in experimental results.",
            "authors": [
                "Diederik P Kingma",
                "Max Welling"
            ]
        },
        {
            "title": "Adversarial Latent Autoencoders",
            "arxiv": "2004.04467",
            "year": 2020,
            "url": "http://arxiv.org/abs/2004.04467v1",
            "abstract": "Autoencoder networks are unsupervised approaches aiming at combining\ngenerative and representational properties by learning simultaneously an\nencoder-generator map. Although studied extensively, the issues of whether they\nhave the same generative power of GANs, or learn disentangled representations,\nhave not been fully addressed. We introduce an autoencoder that tackles these\nissues jointly, which we call Adversarial Latent Autoencoder (ALAE). It is a\ngeneral architecture that can leverage recent improvements on GAN training\nprocedures. We designed two autoencoders: one based on a MLP encoder, and\nanother based on a StyleGAN generator, which we call StyleALAE. We verify the\ndisentanglement properties of both architectures. We show that StyleALAE can\nnot only generate 1024x1024 face images with comparable quality of StyleGAN,\nbut at the same resolution can also produce face reconstructions and\nmanipulations based on real images. This makes ALAE the first autoencoder able\nto compare with, and go beyond the capabilities of a generator-only type of\narchitecture.",
            "authors": [
                "Stanislav Pidhorskyi",
                "Donald Adjeroh",
                "Gianfranco Doretto"
            ]
        }
    ],
    "domain": {
        "domain_type": "Medical",
        "domain_prob": 0.5015747397081664
    }
}