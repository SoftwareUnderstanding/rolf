{
    "visibility": {
        "visibility": "public"
    },
    "name": "cellSTORM TENSORFLOW Files",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "bionanoimaging",
                "owner_type": "Organization",
                "name": "cellSTORM-Tensorflow",
                "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow",
                "stars": 4,
                "pushed_at": "2018-12-15 18:19:14+00:00",
                "created_at": "2018-05-16 07:33:36+00:00",
                "language": "Python",
                "description": "Image-to-Image network to localize dSTORM events in Tensorflow. Publication link: https://arxiv.org/abs/1804.06244",
                "frameworks": [
                    "scikit-learn",
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": ".DS_Store",
                "sha": "d22cacd27be8a097d6a0ff7357b8cf18d50977d0",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow/blob/master/.DS_Store"
                    }
                },
                "size": 6148
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "64220c2b585addb8498a669e7ae5622ca5e71dfd",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow/blob/master/.gitignore"
                    }
                },
                "size": 207
            },
            {
                "type": "code",
                "name": "OBSOLETE",
                "sha": "283fed1a131dc6115e556de6835bc743ae9e5e22",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow/tree/master/OBSOLETE"
                    }
                },
                "num_files": 14
            },
            {
                "type": "code",
                "name": "bash_pix2pix_tensorflow_CLUSTER.txt",
                "sha": "54b24fe61fe47e2f3bced9547f1e1ad51294f905",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow/blob/master/bash_pix2pix_tensorflow_CLUSTER.txt"
                    }
                },
                "size": 4305
            },
            {
                "type": "code",
                "name": "data.py",
                "sha": "601f89d84c6368298e23ca21f3e2c8f87c1f1264",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow/blob/master/data.py"
                    }
                },
                "size": 11762
            },
            {
                "type": "code",
                "name": "environment.yml",
                "sha": "aa7c68ec85e2a0e651866f57dc63753afa103c5e",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow/blob/master/environment.yml"
                    }
                },
                "size": 652
            },
            {
                "type": "code",
                "name": "images",
                "sha": "93b3195828fa2a0ce562cc8ab9b7897c965667d0",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow/tree/master/images"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "model.py",
                "sha": "d75ea02751f79502d81c46f06536d9a9e1330759",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow/blob/master/model.py"
                    }
                },
                "size": 13485
            },
            {
                "type": "code",
                "name": "model_bak.py",
                "sha": "659c71bd3f9350daf261842328a1a5154696d52b",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow/blob/master/model_bak.py"
                    }
                },
                "size": 16072
            },
            {
                "type": "code",
                "name": "pix2pix.py",
                "sha": "45733d0dc3019446c77af01aaba6a56501d9743a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow/blob/master/pix2pix.py"
                    }
                },
                "size": 19027
            },
            {
                "type": "code",
                "name": "pix2pix_exportcellphone.py",
                "sha": "2771a46c78bec6b6992b799c6c7db9c9a120fe09",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow/blob/master/pix2pix_exportcellphone.py"
                    }
                },
                "size": 8495
            },
            {
                "type": "code",
                "name": "pix2pix_exportcellphone_2.py",
                "sha": "5d2e924ccb759520eb65e6b92ad3c13bb5e064fe",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow/blob/master/pix2pix_exportcellphone_2.py"
                    }
                },
                "size": 8236
            },
            {
                "type": "code",
                "name": "pix2pix_exportcellphone_3.py",
                "sha": "0a7516a93d7d93c61df672ba9180076fca77f34a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow/blob/master/pix2pix_exportcellphone_3.py"
                    }
                },
                "size": 9143
            },
            {
                "type": "code",
                "name": "pix2pix_exportcellphone_4.py",
                "sha": "bfae6ef20da0fda17d22e6c7a5fac8f6762090e9",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow/blob/master/pix2pix_exportcellphone_4.py"
                    }
                },
                "size": 7407
            },
            {
                "type": "code",
                "name": "pix2pix_exportcellphone_6.py",
                "sha": "8b24b09c1a434c5631be131268a58573f22bd90f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow/blob/master/pix2pix_exportcellphone_6.py"
                    }
                },
                "size": 9181
            },
            {
                "type": "code",
                "name": "prep_model.py",
                "sha": "09ff02ede8923c82258265090a769d750666d199",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow/blob/master/prep_model.py"
                    }
                },
                "size": 2324
            }
        ]
    },
    "authors": [
        {
            "name": "Benedict Diederich",
            "github_id": "beniroquai"
        }
    ],
    "tags": [],
    "description": "Image-to-Image network to localize dSTORM events in Tensorflow. Publication link: https://arxiv.org/abs/1804.06244",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow",
            "stars": 4,
            "issues": true,
            "readme": "![cellSTORM APP](./images/ShotOnHuawei_4.png)\n\ncellSTORM TENSORFLOW Files\n==============================\n\nBased on paper by Benedict Diederich, Patrick Then, Alexander J\u00fcgler, Ronny F\u00f6rster, Rainer Heintzmann\n\n[Article about the implementation of cellSTORM](https://arxiv.org/abs/1804.06244)\n; Based on [pix2pix](https://phillipi.github.io/pix2pix/) by Isola et al.\n\n## Introduction\nThis is the repo for the Tensorflow implementation of cellSTORM based on the conditional generative adversarial network (cGAN) implmented by pix2pix-tensoflow. In this case it learns a mapping from input images (i.e. degraded, noisy, compressed video-sequences of dSTORM blinking events) to output images (i.e. localization maps/center of possible blinking fluorophore)\n\nThe repository has also a scipt to export a given Graph trained on GPU to a cellphone. The cellSTORM localizer APP can be found in another repo.\n\n\n## Setup (pix2pix related)\n\n### Prerequisites\n\nPrerequisites: This software was tested on a Ubuntu 16.04 LTS 64-bit operating system equipped with a NVidia TITAN X 12 GB, with the following packages:\n\n1. Fiji with ThunderSTORM plugin 1.3 installed\n2. MatlabR2016b with `dip_image` toolbox ([Details](https://github.com/bionanoimaging/cellSTORM-MATLAB))\n3. Anaconda distribution 5.1 for Ubuntu (64-bit) with Tensorflow 1.8.0\n\n#### Necessary packages\n`pip install sk-video`\n`pip install tifffile`\n`pip install tensorflow-gpu`\n`pip install opencv-python`\n`pip install sk-video`\n\n\n### Recommended\n- Linux with Tensorflow GPU edition + cuDNN\n\n### Getting Started\nMost of the steps are equivalent to Deep-Storm by Nehme et al. 2018. Please also look into their project. \n\nA detailed list with all dependecies will follow soon! \nSee also the `environmet.yml` file\n\n## Training\nBefore training, you should download the datapair files and place them into the ./data folder from our [GoogleDrive](https://drive.google.com/drive/folders/1dc1n7xVqvl5wu0Mui3TbSOfZdSqgrVZJ?usp=sharing). The code automatically looks for all `.h5`-files. \nFor normal training you can just use the code below:\n\n```\n# First change into the directory where you downloaded this Repo\ncd ./pix2pix-tensorflow\n\n# Then start the training process\npython pix2pix.py \\\n--mode train \\\n--batch_size 4 \\\n--display_freq 50 \\\n--ndf 32 --ngf 32 \\\n--beta1 0.5 --lr 0.0001 \\\n--output_dir test_tvreg \\\n--scale_size 256 \\\n--max_epochs 100 \\\n--l1_weight 100 \\\n--l1_sparse_weight 100 \\\n--save_freq 500 \\\n--gan_weight 1 \\\n--tv_weight 100\n\n```\n\n\n## Testing\n\nTesting is done with `--mode test`.  You should specify the checkpoint to use with `--checkpoint`, this should point to the `output_dir` that you created previously with `--mode train`. The `--input_dir` states the Video-file you want to process. The ratio of `--scale_size` and `--crop_size` gives the upsampling factor. `5` worked good in our experiments. \n \n- `--is_csv=1` will produce a list of localized events. \n- `--is_frc=1` will produce two TIF-files where one sums only over even, the other over odd frames (to measure the FRC in Fiji for example)\n- `--x_center` and `y_center` are set to `-1` you're asked to choose the center of the video where it gets cropped on screen.\n \n\n\n\n\n```sh\n\n# for videos - upsampling ~5\n# Change the directory where you'Ve downloaded the Repo\ncd /home/useradmin/Dropbox/Dokumente/Promotion/PROJECTS/STORM/PYTHON/pix2pix-tensorflow\n\npython pix2pix.py \\\n--mode test \\\n--input_dir ./STORM/DATASET_NN/ALL_VIDEOS/MOV_2018_05_09_15_09_17_ISO3200_texp_1_30_newsample.mp4 \\\n--batch_size 1 \\\n--output_dir ./dump \\\n--scale_size 1792 \\\n--checkpoint train_overnight_1_2_3_cluster_4_GANupdaterule_synthetic \\\n--roi_size 360 \\\n--is_csv 1 \\\n--is_tif 0 \\\n--is_frc 1 \\\n--x_center -1 \\\n--y_center -1 \\\n--max_steps 6000 \n```\n\nThe testing mode will load some of the configuration options from the checkpoint provided so you do not need to specify `which_direction` for instance.\n\n\n## Citation\nIf you use this code for your research, please cite the paper this code is based on: <a href=\"https://arxiv.org/abs/1804.06244\">cellSTORM - cost-effective super-resolution on a cellphone using dSTORM</a>:\n\n```\n@article{cellstorm2018,\n  title={cellSTORM - cost-effective super-resolution on a cellphone using dSTORM},\n  author={Benedict Diederich*, Patrick Then, Alexander J\u007f\u00fcgler, Ronny F\u007forster, Rainer Heintzmann},\n  journal={arxiv},\n  year={2018}\n}\n```\n\n## Acknowledgments\nThis is a port of [pix2pix](https://github.com/phillipi/pix2pix) from Torch to Tensorflow.  It also contains colorspace conversion code ported from Torch.  Thanks to the Tensorflow team for making such a quality library!  And special thanks to Phillip Isola for answering my questions about the pix2pix code.\n\nKudos to [Christopher Hesse](https://github.com/christopherhesse) for his amazing pix2pix TensorFlow implementation and [Gene Kogan](http://genekogan.com/) for his inspirational workshop. Many thanks to Ingo Fuchs for the help with the Android APP.\n\n\n",
            "readme_url": "https://github.com/bionanoimaging/cellSTORM-Tensorflow",
            "frameworks": [
                "scikit-learn",
                "TensorFlow"
            ]
        }
    ],
    "references": [
        {
            "title": "cellSTORM - Cost-effective Super-Resolution on a Cellphone using dSTORM",
            "arxiv": "1804.06244",
            "year": 2018,
            "url": "http://arxiv.org/abs/1804.06244v2",
            "abstract": "Expensive scientific camera hardware is amongst the main cost factors in\nmodern, high-performance microscopes. Recent technological advantages have,\nhowever, yielded consumer-grade camera devices that can provide surprisingly\ngood performance. The camera sensors of smartphones in particular have\nbenefited of this development. Combined with computing power and due to their\nubiquity, smartphones provide a fantastic opportunity for \"imaging on a\nbudget\". Here we show that a consumer cellphone is capable even of optical\nsuper-resolution imaging by (direct) Stochastic Optical Reconstruction\nMicroscopy (dSTORM), achieving optical resolution better than 80 nm. In\naddition to the use of standard reconstruction algorithms, we investigated an\napproach by a trained image-to-image generative adversarial network (GAN). This\nnot only serves as a versatile technique to reconstruct video sequences under\nconditions where traditional algorithms provide sub-optimal localization\nperformance, but also allows processing directly on the smartphone. We believe\nthat \"cellSTORM\" paves the way for affordable super-resolution microscopy\nsuitable for research and education, expanding access to cutting edge research\nto a large community.",
            "authors": [
                "Benedict Diederich",
                "Patrick Then",
                "Alexander J\u00fcgler",
                "Ronny F\u00f6rster",
                "Rainer Heintzmann"
            ]
        },
        {
            "year": "2018",
            "journal": "arxiv",
            "author": [
                "Benedict Diederich*, Patrick Then, Alexander J\u007f\u00fcgler, Ronny F\u007forster, Rainer Heintzmann"
            ],
            "title": "cellSTORM - cost-effective super-resolution on a cellphone using dSTORM",
            "ENTRYTYPE": "article",
            "ID": "cellstorm2018",
            "authors": [
                "Benedict Diederich*, Patrick Then, Alexander J\u007f\u00fcgler, Ronny F\u007forster, Rainer Heintzmann"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9998556240802767,
        "task": "Image-to-Image Translation",
        "task_prob": 0.9839849817946227
    }
}