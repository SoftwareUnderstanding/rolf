{
    "visibility": {
        "visibility": "public"
    },
    "name": "Densely Connected Convolutional Network (DenseNet)",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "liuzhuang13",
                "owner_type": "User",
                "name": "DenseNetCaffe",
                "url": "https://github.com/liuzhuang13/DenseNetCaffe",
                "stars": 270,
                "pushed_at": "2017-08-11 21:47:41+00:00",
                "created_at": "2016-09-05 03:58:02+00:00",
                "language": "Python",
                "description": "Caffe code for Densely Connected Convolutional Networks (DenseNets) ",
                "frameworks": [
                    "Caffe"
                ]
            },
            {
                "type": "code",
                "name": "make_densenet.py",
                "sha": "00e7ff056d7f8793cbd2f82701cfa50315973bff",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/liuzhuang13/DenseNetCaffe/blob/master/make_densenet.py"
                    }
                },
                "size": 4292
            },
            {
                "type": "code",
                "name": "train.sh",
                "sha": "51611e78ccc82a3f587c12bf0440c69880286863",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/liuzhuang13/DenseNetCaffe/blob/master/train.sh"
                    }
                },
                "size": 91
            }
        ]
    },
    "trained_model": {
        "binaries": [
            {
                "type": "binary",
                "name": "solver.prototxt",
                "sha": "98158f5f36db3049d32c7e497e5eb472ddf6ddb7",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/liuzhuang13/DenseNetCaffe/blob/master/solver.prototxt"
                    }
                },
                "size": 306
            },
            {
                "type": "binary",
                "name": "test_densenet.prototxt",
                "sha": "d210bea8bcdea23a330aabfe42937c9cb8938575",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/liuzhuang13/DenseNetCaffe/blob/master/test_densenet.prototxt"
                    }
                },
                "size": 43706
            },
            {
                "type": "binary",
                "name": "train_densenet.prototxt",
                "sha": "a0a2d2795dcbcc888bbc3ffe89ee07495d28294a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/liuzhuang13/DenseNetCaffe/blob/master/train_densenet.prototxt"
                    }
                },
                "size": 43707
            }
        ]
    },
    "authors": [
        {
            "name": "Zhuang Liu",
            "github_id": "liuzhuang13"
        }
    ],
    "tags": [],
    "description": "Caffe code for Densely Connected Convolutional Networks (DenseNets) ",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/liuzhuang13/DenseNetCaffe",
            "stars": 270,
            "issues": true,
            "readme": "# Densely Connected Convolutional Network (DenseNet)\nThis repository contains the caffe version code for the paper [Densely Connected Convolutional Networks](http://arxiv.org/abs/1608.06993). \n\nFor a brief introduction of DenseNet, see our original [Torch implementation](https://github.com/liuzhuang13/DenseNet).\n\n## ImageNet Pretrained Models\nSee https://github.com/shicai/DenseNet-Caffe for caffe prototxt and pre-trained models.\n\nSee https://github.com/liuzhuang13/DenseNet for Torch pre-trained models.\n\nSee http://pytorch.org/docs/torchvision/models.html?highlight=densenet for directly using the pretrained models in PyTorch.\n\n\n## Note\n0. The models in this repo are for CIFAR datasets only (input 32x32). If you feed images with larger resolution (e.g., ImageNet images), you need to use a different downsampling strategy to keep the memory usage reasonable. See our paper or Torch code for details on ImageNet models.\n0. The code in this repo doesn't support BC-structres. However, it should be easy to modify.\n0. This code is not the code we use to obtain the results in the original paper, the details (such as input preprocessing, data augmentation, training epochs) may be different. To reproduce the results reported in our paper, see our original [Torch implementation](https://github.com/liuzhuang13/DenseNet).\n\n## Results\nThe default setting (L=40, k=12, dropout=0.2) in the code yields a 7.09% error rate on CIFAR10 dataset (without any data augmentation).\n\n\n## Usage \n0. Get the CIFAR data prepared following the [Caffe's official CIFAR tutorial](http://caffe.berkeleyvision.org/gathered/examples/cifar10.html).\n1. make\\_densenet.py contains the code to generate the network and solver prototxt file. First change the data path in function make\\_net() and preprocessing mean file in function densenet() to your own path of corresponding data file.\n2. By default make\\_densenet.py generates a DenseNet with Depth L=40, Growth rate k=12 and Dropout=0.2. To experiment with different settings, change the code accordingly (see the comments in the code). Example prototxt files are already included. Use ```python densenet_make.py``` to generate new prototxt files.\n3. Change the caffe path in train.sh. Then use ```sh train.sh``` to train a DenseNet.\n\n## Contact\nliuzhuangthu at gmail.com  \ngh349 at cornell.edu   \nAny discussions, suggestions and questions are welcome!\n\n\n\n",
            "readme_url": "https://github.com/liuzhuang13/DenseNetCaffe",
            "frameworks": [
                "Caffe"
            ]
        }
    ],
    "references": [
        {
            "title": "Densely Connected Convolutional Networks",
            "arxiv": "1608.06993",
            "year": 2016,
            "url": "http://arxiv.org/abs/1608.06993v5",
            "abstract": "Recent work has shown that convolutional networks can be substantially\ndeeper, more accurate, and efficient to train if they contain shorter\nconnections between layers close to the input and those close to the output. In\nthis paper, we embrace this observation and introduce the Dense Convolutional\nNetwork (DenseNet), which connects each layer to every other layer in a\nfeed-forward fashion. Whereas traditional convolutional networks with L layers\nhave L connections - one between each layer and its subsequent layer - our\nnetwork has L(L+1)/2 direct connections. For each layer, the feature-maps of\nall preceding layers are used as inputs, and its own feature-maps are used as\ninputs into all subsequent layers. DenseNets have several compelling\nadvantages: they alleviate the vanishing-gradient problem, strengthen feature\npropagation, encourage feature reuse, and substantially reduce the number of\nparameters. We evaluate our proposed architecture on four highly competitive\nobject recognition benchmark tasks (CIFAR-10, CIFAR-100, SVHN, and ImageNet).\nDenseNets obtain significant improvements over the state-of-the-art on most of\nthem, whilst requiring less computation to achieve high performance. Code and\npre-trained models are available at https://github.com/liuzhuang13/DenseNet .",
            "authors": [
                "Gao Huang",
                "Zhuang Liu",
                "Laurens van der Maaten",
                "Kilian Q. Weinberger"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "ImageNet"
            },
            {
                "name": "SVHN"
            },
            {
                "name": "CIFAR-100"
            },
            {
                "name": "CIFAR-10"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9999991401945144,
        "task": "Image Classification",
        "task_prob": 0.9895766105628381
    }
}