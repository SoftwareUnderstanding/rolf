{
    "visibility": {
        "visibility": "public"
    },
    "name": "Dogs-and-cats-image-classification-CNN",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "sebsquire",
                "owner_type": "User",
                "name": "Dogs-and-cats-image-classification-CNN",
                "url": "https://github.com/sebsquire/Dogs-and-cats-image-classification-CNN",
                "stars": 2,
                "pushed_at": "2018-12-08 15:56:21+00:00",
                "created_at": "2018-11-21 12:15:50+00:00",
                "language": "Python",
                "description": "Binary Image Classification using CNN w/ residual layers (Dogs & Cats) (Tensorflow, TFLearn, OpenCV)",
                "frameworks": [
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": "CNN_model.py",
                "sha": "52a3b6d48ac2c2a56eb0a38340bc1580028b45c4",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/sebsquire/Dogs-and-cats-image-classification-CNN/blob/master/CNN_model.py"
                    }
                },
                "size": 4597
            },
            {
                "type": "code",
                "name": "custominput.py",
                "sha": "626fd0d13bcfd393e354a2739ee099c674d5047e",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/sebsquire/Dogs-and-cats-image-classification-CNN/blob/master/custominput.py"
                    }
                },
                "size": 1806
            },
            {
                "type": "code",
                "name": "kaggle_submission.py",
                "sha": "b5be5a235306a6bf40c197f09a184ee6075ce956",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/sebsquire/Dogs-and-cats-image-classification-CNN/blob/master/kaggle_submission.py"
                    }
                },
                "size": 676
            },
            {
                "type": "code",
                "name": "main.py",
                "sha": "edafa0ecefd4df582887194679d093a28dd75ed3",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/sebsquire/Dogs-and-cats-image-classification-CNN/blob/master/main.py"
                    }
                },
                "size": 4708
            },
            {
                "type": "code",
                "name": "modelresults_inspection.py",
                "sha": "27781e4a01e59d4dce1d33f2ab94ae89de882845",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/sebsquire/Dogs-and-cats-image-classification-CNN/blob/master/modelresults_inspection.py"
                    }
                },
                "size": 1020
            },
            {
                "type": "code",
                "name": "preprocessing.py",
                "sha": "46030ab10b0e436096c4a01f8db7b52197e34acb",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/sebsquire/Dogs-and-cats-image-classification-CNN/blob/master/preprocessing.py"
                    }
                },
                "size": 1384
            },
            {
                "type": "code",
                "name": "tensorboard_CNN_int_res_arch.png",
                "sha": "eedf4b9913c51fbe4f299a5544e6932d366028c0",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/sebsquire/Dogs-and-cats-image-classification-CNN/blob/master/tensorboard_CNN_int_res_arch.png"
                    }
                },
                "size": 574711
            }
        ]
    },
    "authors": [
        {
            "name": "sebsquire",
            "github_id": "sebsquire"
        }
    ],
    "tags": [],
    "description": "Binary Image Classification using CNN w/ residual layers (Dogs & Cats) (Tensorflow, TFLearn, OpenCV)",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/sebsquire/Dogs-and-cats-image-classification-CNN",
            "stars": 2,
            "issues": true,
            "readme": "# Dogs-and-cats-image-classification-CNN\nBinary Image Classification using CNN w/ residual layers (Dogs &amp; Cats)\n(Tensorflow-GPU, TFLearn, OpenCV)\n\nModules converted from Sentdex' tutorial (https://pythonprogramming.net/convolutional-neural-network-kats-vs-dogs-machine-learning-tutorial/). Now includes:\n - Improved accuracy through CNN architecture and hyperparameter modification featuring inclusion of residual blocks\n(Ref: https://arxiv.org/pdf/1512.03385.pdf)\n - Data Augmentation\n - Separated to callable functions for easier hyperparameter optimisation, debugging, and more readable code\n - Added custom image input function\n - Added commands while running to eliminate repeated image processing/model training\n\nModel attains ~90% accuracy on validation data and a log loss of ~0.32 on Kaggle's test data.\nResults analysed with tensorboard.\n\nData available at: https://www.kaggle.com/c/dogs-vs-cats-redux-kernels-edition\n\nModules:\n - Main.py: calls preprocessing.py and CNN_model.py to load and preprocess image data, set model parameters, augment the image collection, and train, test, and produce classification metrics for the model on the validation set.\n - preprocessing.py: Functions for creation of training and test data in .npy files.\n - CNN_model.py: Functions for CNN model creation. Model architecture and more complex hyperparameters can be modified here.\n - modelresults_inspection.py: loads model and test data and outputs images and predicted labels for user inspection.\n - custominput.py: predicts categories and displays images for images located in CustomImageInput directory (will need to be modified to wherever user creates this folder when used).\n - kaggle_submission: loads model to create kaggle submission file (.csv).\n",
            "readme_url": "https://github.com/sebsquire/Dogs-and-cats-image-classification-CNN",
            "frameworks": [
                "TensorFlow"
            ]
        }
    ],
    "references": [
        {
            "title": "Deep Residual Learning for Image Recognition",
            "arxiv": "1512.03385",
            "year": 2015,
            "url": "http://arxiv.org/abs/1512.03385v1",
            "abstract": "Deeper neural networks are more difficult to train. We present a residual\nlearning framework to ease the training of networks that are substantially\ndeeper than those used previously. We explicitly reformulate the layers as\nlearning residual functions with reference to the layer inputs, instead of\nlearning unreferenced functions. We provide comprehensive empirical evidence\nshowing that these residual networks are easier to optimize, and can gain\naccuracy from considerably increased depth. On the ImageNet dataset we evaluate\nresidual nets with a depth of up to 152 layers---8x deeper than VGG nets but\nstill having lower complexity. An ensemble of these residual nets achieves\n3.57% error on the ImageNet test set. This result won the 1st place on the\nILSVRC 2015 classification task. We also present analysis on CIFAR-10 with 100\nand 1000 layers.\n  The depth of representations is of central importance for many visual\nrecognition tasks. Solely due to our extremely deep representations, we obtain\na 28% relative improvement on the COCO object detection dataset. Deep residual\nnets are foundations of our submissions to ILSVRC & COCO 2015 competitions,\nwhere we also won the 1st places on the tasks of ImageNet detection, ImageNet\nlocalization, COCO detection, and COCO segmentation.",
            "authors": [
                "Kaiming He",
                "Xiangyu Zhang",
                "Shaoqing Ren",
                "Jian Sun"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9999941637224803,
        "task": "Object Detection",
        "task_prob": 0.8629297267472179
    },
    "training": {
        "datasets": [
            {
                "name": "ImageNet"
            },
            {
                "name": "ImageNet Detection"
            },
            {
                "name": "ILSVRC 2015"
            },
            {
                "name": "CIFAR-10"
            },
            {
                "name": "COCO"
            }
        ]
    }
}