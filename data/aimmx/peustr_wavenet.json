{
    "visibility": {
        "visibility": "public"
    },
    "name": "WaveNet Keras implementation",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "peustr",
                "owner_type": "User",
                "name": "wavenet",
                "url": "https://github.com/peustr/wavenet",
                "stars": 22,
                "pushed_at": "2018-07-04 07:35:23+00:00",
                "created_at": "2018-07-04 07:33:27+00:00",
                "language": "Python",
                "description": "Basic implementation of the WaveNet as described in the paper published by DeepMind",
                "frameworks": [
                    "Keras"
                ]
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "c7cb0e4ba8aa157bc5581a6af9521960eaa02304",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/peustr/wavenet/blob/master/.gitignore"
                    }
                },
                "size": 1596
            },
            {
                "type": "code",
                "name": "Makefile",
                "sha": "f4914cd4006c226a7d44e95988bb7f315524a951",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/peustr/wavenet/blob/master/Makefile"
                    }
                },
                "size": 36
            },
            {
                "type": "code",
                "name": "Pipfile",
                "sha": "bc564126527c578da989d4722f349f941f721586",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/peustr/wavenet/blob/master/Pipfile"
                    }
                },
                "size": 359
            },
            {
                "type": "code",
                "name": "Pipfile.lock",
                "sha": "0d40c1e920b1c45aa7681e18f69cca27918f3a1d",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/peustr/wavenet/blob/master/Pipfile.lock"
                    }
                },
                "size": 52855
            },
            {
                "type": "code",
                "name": "setup.py",
                "sha": "de24e5b5d0ff86e0bcfab6607661b5ebf4c533d0",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/peustr/wavenet/blob/master/setup.py"
                    }
                },
                "size": 433
            },
            {
                "type": "code",
                "name": "wavenet",
                "sha": "f27e4e0596505ea03d04a3cf8d4bf974b2671fe7",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/peustr/wavenet/tree/master/wavenet"
                    }
                },
                "num_files": 6
            }
        ]
    },
    "authors": [
        {
            "name": "Panagiotis Eustratiadis",
            "github_id": "peustr"
        }
    ],
    "tags": [],
    "description": "Basic implementation of the WaveNet as described in the paper published by DeepMind",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/peustr/wavenet",
            "stars": 22,
            "issues": true,
            "readme": "# WaveNet Keras implementation\n\nThis repository contains a basic implementation of the WaveNet as described in the paper published by DeepMind: [Oord, Aaron van den, et al. \"Wavenet: A generative model for raw audio.\" arXiv preprint arXiv:1609.03499 (2016).](https://arxiv.org/pdf/1609.03499.pdf)\n\n## Installation instructions\n\nThe code has only been tested and verified with Python 3.6. Assuming you have an installation of [pipenv](https://docs.pipenv.org/) for Python 3, you may clone the project, navigate to the root folder and run:\n\n```bash\nmake install\n```\n\nThis will most likely take care of the dependencies, unless you're using Windows.\n\n## Reproducibility: Running the examples\n\nIn the `examples` folder you will find a small sample of data, downloaded from the [LJ Speech Dataset](https://keithito.com/LJ-Speech-Dataset/). The dataset originally contains about 24 hours of speech, but I selected just a few files to create a small proof of concept, since I ran the training on my laptop and training such a complex architecture on a huge dataset was not viable for me. I used 50 files for training and 6 for validation.\n\n### Training\n\nTo train the network with the small amount of data provided in the package, navigate to the `examples` directory and run:\n\n```bash\npipenv run python train_small.py\n```\n\nFeel free to also tweak the parameters and add more data, if your computational resources allow it (e.g. use AWS spot instances with GPUs). For example, I see posts around the internet that use 1000-2000 epochs. I used 20, because an order of magnitude higher would take days to train. The filter size should also probably be larger (e.g. 64), and the residual blocks should be more (but keep in mind the paper recommends dilation rate `mod9`).\n\nIn the figure below, you may see a plot of the training loss, using the default parameters currently in `wavenet.examples.train_small`. It's obvious that the model is far from saturation.\n\n![Training Loss](wavenet/examples/training_loss.png)\n\n\n### Generating sound\n\nUsing the little network that I trained, the generated wavefile sounds like plain noise. However, if you'd like to generate your own wavefile, tweak the parameters accordingly (e.g. point to your own model) and run:\n\n```bash\npipenv run python generate_small.py\n```\n",
            "readme_url": "https://github.com/peustr/wavenet",
            "frameworks": [
                "Keras"
            ]
        }
    ],
    "references": [
        {
            "title": "WaveNet: A Generative Model for Raw Audio",
            "arxiv": "1609.03499",
            "year": 2016,
            "url": "http://arxiv.org/abs/1609.03499v2",
            "abstract": "This paper introduces WaveNet, a deep neural network for generating raw audio\nwaveforms. The model is fully probabilistic and autoregressive, with the\npredictive distribution for each audio sample conditioned on all previous ones;\nnonetheless we show that it can be efficiently trained on data with tens of\nthousands of samples per second of audio. When applied to text-to-speech, it\nyields state-of-the-art performance, with human listeners rating it as\nsignificantly more natural sounding than the best parametric and concatenative\nsystems for both English and Mandarin. A single WaveNet can capture the\ncharacteristics of many different speakers with equal fidelity, and can switch\nbetween them by conditioning on the speaker identity. When trained to model\nmusic, we find that it generates novel and often highly realistic musical\nfragments. We also show that it can be employed as a discriminative model,\nreturning promising results for phoneme recognition.",
            "authors": [
                "Aaron van den Oord",
                "Sander Dieleman",
                "Heiga Zen",
                "Karen Simonyan",
                "Oriol Vinyals",
                "Alex Graves",
                "Nal Kalchbrenner",
                "Andrew Senior",
                "Koray Kavukcuoglu"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "LJ Speech Dataset",
                "connection": {
                    "name": "url",
                    "source": {
                        "url": "https://keithito.com/LJ-Speech-Dataset/"
                    }
                }
            }
        ]
    },
    "domain": {
        "domain_type": "Speech",
        "domain_prob": 0.9823728831025904
    }
}