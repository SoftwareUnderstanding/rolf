{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "TD3-BipedalWalker-v2-PyTorch",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "nikhilbarhate99",
                "owner_type": "User",
                "name": "TD3-PyTorch-BipedalWalker-v2",
                "url": "https://github.com/nikhilbarhate99/TD3-PyTorch-BipedalWalker-v2",
                "stars": 80,
                "pushed_at": "2019-06-07 12:30:53+00:00",
                "created_at": "2018-11-29 04:28:48+00:00",
                "language": "Python",
                "description": "Twin Delayed DDPG (TD3) PyTorch solution for Roboschool and Box2d environment",
                "license": "MIT License",
                "frameworks": [
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "77775653d55ca7d2d50bf6f11c8439b63aa4c213",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/nikhilbarhate99/TD3-PyTorch-BipedalWalker-v2/blob/master/LICENSE"
                    }
                },
                "size": 1071
            },
            {
                "type": "code",
                "name": "TD3.py",
                "sha": "b80e019c45c5694a12bd1d34313bce912ba1ebf3",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/nikhilbarhate99/TD3-PyTorch-BipedalWalker-v2/blob/master/TD3.py"
                    }
                },
                "size": 7263
            },
            {
                "type": "code",
                "name": "gif",
                "sha": "d66701384b7a4e38fe27684ae7424e43eecc1596",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/nikhilbarhate99/TD3-PyTorch-BipedalWalker-v2/tree/master/gif"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "preTrained",
                "sha": "7f888e7c9d123cfd83a828ef1b6b2109c61bb694",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/nikhilbarhate99/TD3-PyTorch-BipedalWalker-v2/tree/master/preTrained"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "test.py",
                "sha": "8f0d70ea898d5c6dab0ab36a9dcae636d04a23e7",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/nikhilbarhate99/TD3-PyTorch-BipedalWalker-v2/blob/master/test.py"
                    }
                },
                "size": 1410
            },
            {
                "type": "code",
                "name": "train.py",
                "sha": "d278f4fa51e4ff8543cb3bed0129c48054d28792",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/nikhilbarhate99/TD3-PyTorch-BipedalWalker-v2/blob/master/train.py"
                    }
                },
                "size": 3299
            },
            {
                "type": "code",
                "name": "utils.py",
                "sha": "23b964050146f5a9da4a81e1cc7e8455cdadf7d3",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/nikhilbarhate99/TD3-PyTorch-BipedalWalker-v2/blob/master/utils.py"
                    }
                },
                "size": 1154
            }
        ]
    },
    "authors": [
        {
            "name": "Nikhil Barhate",
            "github_id": "nikhilbarhate99"
        }
    ],
    "tags": [
        "ddpg",
        "td3",
        "deep-reinforcement-learning",
        "openai-gym",
        "bipedalwalker",
        "pytorch",
        "pytorch-implmention",
        "reinforcement-learning",
        "openai-gym-environments",
        "lunar-lander"
    ],
    "description": "Twin Delayed DDPG (TD3) PyTorch solution for Roboschool and Box2d environment",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/nikhilbarhate99/TD3-PyTorch-BipedalWalker-v2",
            "stars": 80,
            "issues": true,
            "readme": "# TD3-BipedalWalker-v2-PyTorch\n\nPyTorch implementation of [Twin Delayed DDPG](https://arxiv.org/abs/1802.09477) (TD3) tested on the following environments:\n\n- [Bipedal Walker v2](http://gym.openai.com/envs/BipedalWalker-v2/) \n\n- [Lunar Lander Continuous v2](http://gym.openai.com/envs/LunarLanderContinuous-v2/) \n\n- [Walker2d v1 (Roboschool)](https://github.com/openai/roboschool)\n\n- [HalfCheetah v1 (Roboschool)](https://github.com/openai/roboschool)\n\n### Usage\n- To test a preTrained network : run `test.py`\n\n- To train a new network : run `train.py`\n\n## Dependencies\nTrained and tested on:\n```\nPython 3.6\nPyTorch 0.4.1\nNumPy 1.15.3\ngym 0.10.8\nRoboschool 1.0.46\nPillow 5.3.0\n```\n\n## Results\n\nBipedalWalker-v2 (800 episodes)            |  LunarLanderContinuous-v2 (1500 episodes)\n:-------------------------:|:-------------------------:\n![](https://github.com/nikhilbarhate99/TD3-BipedalWalker-v2-PyTorch/blob/master/gif/GIF-ONE.gif)  |  ![](https://github.com/nikhilbarhate99/TD3-PyTorch-BipedalWalker-v2/blob/master/gif/GIF-TWO.gif)   |\n\n\nRoboschoolWalker2d-v1 (lr=0.002, 1400 episodes)            |  HalfCheetah-v1 (lr=0.002, 1400 episodes)\n:-------------------------:|:-------------------------:\n![](https://github.com/nikhilbarhate99/TD3-BipedalWalker-v2-PyTorch/blob/master/gif/GIF-FOUR.gif)  |  ![](https://github.com/nikhilbarhate99/TD3-PyTorch-BipedalWalker-v2/blob/master/gif/GIF-FIVE.gif)   |\n\n\n*The results are not consistent for BipedalWalker-v2 env\n\n## References\n\n- Official [TD3 paper](https://arxiv.org/abs/1802.09477) and [code](https://github.com/sfujim/TD3)\n\n\n- [OpenAI SpinningUp in Deep RL](https://spinningup.openai.com/en/latest/algorithms/td3.html)\n\n",
            "readme_url": "https://github.com/nikhilbarhate99/TD3-PyTorch-BipedalWalker-v2",
            "frameworks": [
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "Addressing Function Approximation Error in Actor-Critic Methods",
            "arxiv": "1802.09477",
            "year": 2018,
            "url": "http://arxiv.org/abs/1802.09477v3",
            "abstract": "In value-based reinforcement learning methods such as deep Q-learning,\nfunction approximation errors are known to lead to overestimated value\nestimates and suboptimal policies. We show that this problem persists in an\nactor-critic setting and propose novel mechanisms to minimize its effects on\nboth the actor and the critic. Our algorithm builds on Double Q-learning, by\ntaking the minimum value between a pair of critics to limit overestimation. We\ndraw the connection between target networks and overestimation bias, and\nsuggest delaying policy updates to reduce per-update error and further improve\nperformance. We evaluate our method on the suite of OpenAI gym tasks,\noutperforming the state of the art in every environment tested.",
            "authors": [
                "Scott Fujimoto",
                "Herke van Hoof",
                "David Meger"
            ]
        }
    ],
    "domain": {
        "domain_type": "Unknown"
    },
    "training": {
        "datasets": [
            {
                "name": "OpenAI Gym"
            }
        ]
    }
}