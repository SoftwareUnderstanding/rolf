{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "DARTS: Differentiable Architecture Search",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "abcp4",
                "owner_type": "User",
                "name": "MyDarts",
                "url": "https://github.com/abcp4/MyDarts",
                "stars": 0,
                "pushed_at": "2019-12-24 04:45:31+00:00",
                "created_at": "2019-06-15 18:03:48+00:00",
                "language": "Python",
                "license": "MIT License",
                "frameworks": [
                    "scikit-learn",
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "cd6ecebd5619be57691bfa9301ccf558c2ede481",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/abcp4/MyDarts/blob/master/LICENSE"
                    }
                },
                "size": 1067
            },
            {
                "type": "code",
                "name": "architect.py",
                "sha": "71b1cb687050f82c1c7c3313c1dc4a7c243b4323",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/abcp4/MyDarts/blob/master/architect.py"
                    }
                },
                "size": 6121
            },
            {
                "type": "code",
                "name": "assets",
                "sha": "98a0d2b8caace188954f83e9b172429300be251c",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/abcp4/MyDarts/tree/master/assets"
                    }
                },
                "num_files": 10
            },
            {
                "type": "code",
                "name": "augment.py",
                "sha": "0a887fcc2a87732d113519c77e39e43ec8456463",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/abcp4/MyDarts/blob/master/augment.py"
                    }
                },
                "size": 11307
            },
            {
                "type": "code",
                "name": "config.py",
                "sha": "785058ce066e9e899c06cfef5c68d26af00176fa",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/abcp4/MyDarts/blob/master/config.py"
                    }
                },
                "size": 5712
            },
            {
                "type": "code",
                "name": "evaluate.py",
                "sha": "eaea31574b0843936cfea4bc0fd07695e5ca7561",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/abcp4/MyDarts/blob/master/evaluate.py"
                    }
                },
                "size": 16286
            },
            {
                "type": "code",
                "name": "genotypes.py",
                "sha": "87b37edce7ca37881fd39ac27dd5cc23d9bd188f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/abcp4/MyDarts/blob/master/genotypes.py"
                    }
                },
                "size": 3180
            },
            {
                "type": "code",
                "name": "models",
                "sha": "261f162853a8020dc22b4cf167f07365146ccd0d",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/abcp4/MyDarts/tree/master/models"
                    }
                },
                "num_files": 5
            },
            {
                "type": "code",
                "name": "preproc.py",
                "sha": "7465b3d253a701cb776f43324504de5d8cd604c7",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/abcp4/MyDarts/blob/master/preproc.py"
                    }
                },
                "size": 2459
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "78a68444b52237231b2bd112a5e0514daa462ac2",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/abcp4/MyDarts/blob/master/requirements.txt"
                    }
                },
                "size": 100
            },
            {
                "type": "code",
                "name": "scripts",
                "sha": "a217bbb46c16a17cff2e7c615c7e8ef85ea750e5",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/abcp4/MyDarts/tree/master/scripts"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "search.py",
                "sha": "00207b60a5a64047217edcd9426e424eb8ed39ec",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/abcp4/MyDarts/blob/master/search.py"
                    }
                },
                "size": 7366
            },
            {
                "type": "code",
                "name": "utils.py",
                "sha": "37941fa877d6b181e97ff0b6e2faaef1d83821d8",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/abcp4/MyDarts/blob/master/utils.py"
                    }
                },
                "size": 7820
            },
            {
                "type": "code",
                "name": "visualize.py",
                "sha": "923910ab4f06f4323fb87811083d2112633f6c51",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/abcp4/MyDarts/blob/master/visualize.py"
                    }
                },
                "size": 1920
            }
        ]
    },
    "trained_model": {
        "binaries": [
            {
                "type": "binary",
                "name": "Dockerfile",
                "sha": "24b288f4cd250a72df5df1f1559e2edb569ca317",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/abcp4/MyDarts/blob/master/Dockerfile"
                    }
                },
                "size": 149
            }
        ]
    },
    "authors": [
        {
            "name": "Ivan Pereira",
            "github_id": "abcp4"
        }
    ],
    "tags": [],
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/abcp4/MyDarts",
            "stars": 0,
            "issues": true,
            "readme": "# DARTS: Differentiable Architecture Search\n\nLiu, Hanxiao, Karen Simonyan, and Yiming Yang. \"Darts: Differentiable architecture search.\" arXiv preprint arXiv:1806.09055 (2018). [[arxiv](https://arxiv.org/abs/1806.09055)]\n\n## Requirements\n\n- python 3\n- pytorch >= 0.4.1\n- graphviz\n    - First install using `apt install` and then `pip install`.\n- numpy\n- tensorboardX\n\n## Run example\n\nAdjust the batch size if out of memory (OOM) occurs. It dependes on your gpu memory size and genotype.\n\n- Search\n\n```shell\npython search.py --name cifar10 --dataset cifar10\n```\n\n- Augment\n\n```shell\n# genotype from search results\npython augment.py --name cifar10 --dataset cifar10 --genotype \"Genotype(\n    normal=[[('sep_conv_3x3', 0), ('dil_conv_5x5', 1)], [('skip_connect', 0), ('dil_conv_3x3', 2)], [('sep_conv_3x3', 1), ('skip_connect', 0)], [('sep_conv_3x3', 1), ('skip_connect', 0)]],\n    normal_concat=range(2, 6),\n    reduce=[[('max_pool_3x3', 0), ('max_pool_3x3', 1)], [('max_pool_3x3', 0), ('skip_connect', 2)], [('skip_connect', 3), ('max_pool_3x3', 0)], [('skip_connect', 2), ('max_pool_3x3', 0)]],\n    reduce_concat=range(2, 6)\n)\"\n```\n\n- with docker\n\n```shell\n$ docker run --runtime=nvidia -it khanrc/pytorch-darts:0.2 bash\n\n# you can run directly also\n$ docker run --runtime=nvidia -it khanrc/pytorch-darts:0.2 python search.py --name cifar10 --dataset cifar10\n```\n\n## Multi-GPU\n\nThis project suppports multi-gpu. The larger batch size and learning rate are required to take advantage of multi-gpu.\n\n- Search\n\n```\npython search.py --name cifar10-mg --dataset cifar10 --gpus 0,1,2,3 \\\n    --batch_size 256 --workers 16 --print_freq 10 \\\n    --w_lr 0.1 --w_lr_min 0.004 --alpha_lr 0.0012\n```\n\n- Augment\n\n```\npython augment.py --name cifar10-mg --dataset cifar10 --gpus 0,1,2,3 \\\n    --batch_size 384 --workers 16 --print_freq 50 --lr 0.1 \\\n    --genotype \"Genotype(\n    normal=[[('sep_conv_3x3', 0), ('dil_conv_5x5', 1)], [('skip_connect', 0), ('dil_conv_3x3', 2)], [('sep_conv_3x3', 1), ('skip_connect', 0)], [('sep_conv_3x3', 1), ('skip_connect', 0)]],\n    normal_concat=range(2, 6),\n    reduce=[[('max_pool_3x3', 0), ('max_pool_3x3', 1)], [('max_pool_3x3', 0), ('skip_connect', 2)], [('skip_connect', 3), ('max_pool_3x3', 0)], [('skip_connect', 2), ('max_pool_3x3', 0)]],\n    reduce_concat=range(2, 6)\n)\"\n```\n\nSimply, `--gpus all` makes to use all gpus.\n\n### Cautions\n\nIt is well-known problem that the larger batch size causes the lower generalization.\nNote that although the [linear scaling rule](https://arxiv.org/pdf/1706.02677) prevents this problem somewhat, the generalization still could be bad.\n\nFurthermore, we do not know about the scalability of DARTS, where larger batch size could be more harmful.\nSo, please pay attention to the hyperparameters when using multi-gpu.\n\n## Results\n\nThe following results were obtained using the default arguments, except for the epochs. `--epochs 300` was used in MNIST and Fashion-MNIST.\n\n| Dataset | Final validation acc | Best validation acc |\n| ------- | -------------------- | ------------------- |\n| MNIST         | 99.75% | 99.81% |\n| Fashion-MNIST | 99.27% | 99.39% |\n| CIFAR-10       | 97.17% | 97.23% |\n\n97.17%, final validation accuracy in CIFAR-10, is the same number as the paper.\n\n### Found architectures\n\n```py\n# CIFAR10\nGenotype(\n    normal=[[('sep_conv_3x3', 0), ('dil_conv_5x5', 1)], [('skip_connect', 0), ('dil_conv_3x3', 2)], [('sep_conv_3x3', 1), ('skip_connect', 0)], [('sep_conv_3x3', 1), ('skip_connect', 0)]],\n    normal_concat=range(2, 6),\n    reduce=[[('max_pool_3x3', 0), ('max_pool_3x3', 1)], [('max_pool_3x3', 0), ('skip_connect', 2)], [('skip_connect', 3), ('max_pool_3x3', 0)], [('skip_connect', 2), ('max_pool_3x3', 0)]],\n    reduce_concat=range(2, 6)\n)\n\n# FashionMNIST\nGenotype(\n    normal=[[('max_pool_3x3', 0), ('dil_conv_5x5', 1)], [('max_pool_3x3', 0), ('sep_conv_3x3', 1)], [('sep_conv_5x5', 1), ('sep_conv_3x3', 3)], [('sep_conv_5x5', 4), ('dil_conv_5x5', 3)]],\n    normal_concat=range(2, 6),\n    reduce=[[('sep_conv_3x3', 1), ('avg_pool_3x3', 0)], [('avg_pool_3x3', 0), ('skip_connect', 2)], [('skip_connect', 3), ('avg_pool_3x3', 0)], [('sep_conv_3x3', 2), ('skip_connect', 3)]],\n    reduce_concat=range(2, 6)\n)\n\n# MNIST\nGenotype(\n    normal=[[('sep_conv_3x3', 0), ('dil_conv_5x5', 1)], [('sep_conv_3x3', 2), ('sep_conv_3x3', 1)], [('dil_conv_5x5', 3), ('sep_conv_3x3', 1)], [('sep_conv_5x5', 4), ('dil_conv_5x5', 3)]],\n    normal_concat=range(2, 6),\n    reduce=[[('dil_conv_3x3', 0), ('sep_conv_3x3', 1)], [('avg_pool_3x3', 0), ('skip_connect', 2)], [('dil_conv_5x5', 3), ('avg_pool_3x3', 0)], [('dil_conv_3x3', 1), ('max_pool_3x3', 0)]],\n    reduce_concat=range(2, 6)\n)\n```\n\n### Architecture progress\n\n<p align=\"center\">\n<img src=\"assets/cifar10-normal.gif\" alt=\"cifar10-progress-normal\" width=45% />\n<img src=\"assets/cifar10-reduce.gif\" alt=\"cifar10-progress-reduce\" width=45% />\n<br/> CIFAR-10 \n</p>\n\n<p align=\"center\">\n<img src=\"assets/mnist-normal.gif\" alt=\"mnist-progress-normal\" width=45% />\n<img src=\"assets/mnist-reduce.gif\" alt=\"mnist-progress-reduce\" width=45% />\n<br/> MNIST \n</p>\n\n<p align=\"center\">\n<img src=\"assets/fashionmnist-normal.gif\" alt=\"fashionmnist-progress-normal\" width=45% />\n<img src=\"assets/fashionmnist-reduce.gif\" alt=\"fashionmnist-progress-reduce\" width=45% />\n<br/> Fashion-MNIST \n</p>\n\n### Plots\n\n<p align=\"center\">\n<img src=\"assets/fashionmnist-search.png\" alt=\"fashionmnist-search\" width=80% />\n</p>\n<p align=\"center\"> Search-training phase of Fashion-MNIST </p>\n\n<p align=\"center\">\n<img src=\"assets/cifar10-val.png\" alt=\"cifar10-val\" width=48% />\n<img src=\"assets/fashionmnist-val.png\" alt=\"fashionmnist-val\" width=48% />\n</p>\n<p align=\"center\"> Augment-validation phase of CIFAR-10 and Fashion-MNIST </p>\n\n## Reference\n\nhttps://github.com/quark0/darts (official implementation)\n\n### Main differences to reference code\n\n- Supporting pytorch >= 0.4\n- Supporting multi-gpu\n- Code that is easy to read and commented.\n- Implemenation of architect\n    - Original implementation is very slow in pytorch >= 0.4.\n- Tested on FashionMNIST / MNIST\n- Tensorboard\n- No RNN\n\nand so on.\n",
            "readme_url": "https://github.com/abcp4/MyDarts",
            "frameworks": [
                "scikit-learn",
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "DARTS: Differentiable Architecture Search",
            "arxiv": "1806.09055",
            "year": 2018,
            "url": "http://arxiv.org/abs/1806.09055v2",
            "abstract": "This paper addresses the scalability challenge of architecture search by\nformulating the task in a differentiable manner. Unlike conventional approaches\nof applying evolution or reinforcement learning over a discrete and\nnon-differentiable search space, our method is based on the continuous\nrelaxation of the architecture representation, allowing efficient search of the\narchitecture using gradient descent. Extensive experiments on CIFAR-10,\nImageNet, Penn Treebank and WikiText-2 show that our algorithm excels in\ndiscovering high-performance convolutional architectures for image\nclassification and recurrent architectures for language modeling, while being\norders of magnitude faster than state-of-the-art non-differentiable techniques.\nOur implementation has been made publicly available to facilitate further\nresearch on efficient architecture search algorithms.",
            "authors": [
                "Hanxiao Liu",
                "Karen Simonyan",
                "Yiming Yang"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "MNIST"
            },
            {
                "name": "Fashion-MNIST"
            },
            {
                "name": "CIFAR-10"
            },
            {
                "name": "WikiText-2"
            },
            {
                "name": "Penn Treebank"
            },
            {
                "name": "ImageNet"
            }
        ]
    },
    "domain": {
        "domain_type": "Natural Language Processing",
        "domain_prob": 0.99118416460742,
        "task": "Language Modelling",
        "task_prob": 0.9788738483198487
    }
}