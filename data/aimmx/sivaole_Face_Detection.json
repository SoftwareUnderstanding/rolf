{
    "visibility": {
        "visibility": "public"
    },
    "name": "Face_Detection",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "sivaole",
                "owner_type": "User",
                "name": "Face_Detection",
                "url": "https://github.com/sivaole/Face_Detection",
                "stars": 0,
                "pushed_at": "2020-09-25 08:27:43+00:00",
                "created_at": "2020-09-25 08:22:44+00:00",
                "language": "Jupyter Notebook",
                "frameworks": [
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": "Face Detection Questions Notebook.ipynb",
                "sha": "f28abbc77a91c0fb4abd2f875095ee15c12a9245",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/sivaole/Face_Detection/blob/master/Face Detection Questions Notebook.ipynb"
                    }
                },
                "size": 229115
            },
            {
                "type": "code",
                "name": "Project Description - Face Detection.docx",
                "sha": "49f4066c6cb614de285bad8552f38f6850ebe3d0",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/sivaole/Face_Detection/blob/master/Project Description - Face Detection.docx"
                    }
                },
                "size": 7894
            }
        ]
    },
    "authors": [
        {
            "name": "sivaole",
            "github_id": "sivaole"
        }
    ],
    "tags": [],
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/sivaole/Face_Detection",
            "stars": 0,
            "issues": true,
            "readme": "# Face_Detection\n\n# Project Description\t\nIn this hands-on project, the goal is to build a face detection model which includes building a face detector to locate the position of a face in an image.\n\n\n# Dataset: WIDER Face Dataset\nWIDER FACE dataset is a face detection benchmark dataset, of which images are selected from the publicly available WIDER dataset. \nThis data have 32,203 images and 393,703 faces are labelled with a high degree of variability in scale, pose and occlusion as depicted in the sample images.\nIn this project, we are using  500 images and 1100 faces for ease of computation.\n\n\nWe will be using transfer learning on an already trained model to build our detector. We will perform transfer learning on Mobile Net model which is already trained to perform object detection. We will need to train the last 6-7 layers and freeze the remaining layers to train the model for face detection. To be able to train the Mobile Net model for face detection, we will be using WIDER FACE dataset which already has the bounding box data for various images with a single face and multiple faces. The output of the model is the bounding box data which gives the location of the face in an image. We learn to build a face detection model using Keras supported by Tensorflow.\n\n\n# Reference\t\nAcknowledgement for the datasets. http://mmlab.ie.cuhk.edu.hk/projects/WIDERFace/\nMobile Net paper: https://arxiv.org/pdf/1704.04861.pdf\n\n\n\n# Overview\nIn this problem, we use \"Transfer Learning\" of an Object Detector model to detect any object according to the problem in hand.\n\nHere, we are particularly interested in detecting faces in a given image. Below are the steps involved in the project.\n\u25cf\tLoad the dataset given in form .npy format.\n\u25cf\tCreate Features(images) and labels(mask) using that data.\n\u25cf\tLoad the pre-trained model and weights.\n\u25cf\tCreate model using the above model.\n\u25cf\tDefine Dice Coefficient and Loss function.\n\u25cf\tCompile and fit the model.\n\u25cf\tEvaluate the model.\n\n# Instructions for all the above steps are given in the notebook.\n",
            "readme_url": "https://github.com/sivaole/Face_Detection",
            "frameworks": [
                "TensorFlow"
            ]
        }
    ],
    "references": [
        {
            "title": "MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications",
            "arxiv": "1704.04861",
            "year": 2017,
            "url": "http://arxiv.org/abs/1704.04861v1",
            "abstract": "We present a class of efficient models called MobileNets for mobile and\nembedded vision applications. MobileNets are based on a streamlined\narchitecture that uses depth-wise separable convolutions to build light weight\ndeep neural networks. We introduce two simple global hyper-parameters that\nefficiently trade off between latency and accuracy. These hyper-parameters\nallow the model builder to choose the right sized model for their application\nbased on the constraints of the problem. We present extensive experiments on\nresource and accuracy tradeoffs and show strong performance compared to other\npopular models on ImageNet classification. We then demonstrate the\neffectiveness of MobileNets across a wide range of applications and use cases\nincluding object detection, finegrain classification, face attributes and large\nscale geo-localization.",
            "authors": [
                "Andrew G. Howard",
                "Menglong Zhu",
                "Bo Chen",
                "Dmitry Kalenichenko",
                "Weijun Wang",
                "Tobias Weyand",
                "Marco Andreetto",
                "Hartwig Adam"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "OCCLUSION"
            },
            {
                "name": "CUHK"
            },
            {
                "name": "ImageNet"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9999995670183502,
        "task": "Face Detection",
        "task_prob": 0.9174798998675092
    }
}