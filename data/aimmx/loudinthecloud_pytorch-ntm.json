{
    "visibility": {
        "visibility": "public",
        "license": "BSD 3-Clause \"New\" or \"Revised\" License"
    },
    "name": "PyTorch Neural Turing Machine (NTM)",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "loudinthecloud",
                "owner_type": "User",
                "name": "pytorch-ntm",
                "url": "https://github.com/loudinthecloud/pytorch-ntm",
                "stars": 501,
                "pushed_at": "2018-06-26 08:36:11+00:00",
                "created_at": "2017-09-24 05:13:53+00:00",
                "language": "Jupyter Notebook",
                "description": "Neural Turing Machines (NTM) - PyTorch Implementation",
                "license": "BSD 3-Clause \"New\" or \"Revised\" License",
                "frameworks": [
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "e53c3a25df73263a91da978f0195819227661a38",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/loudinthecloud/pytorch-ntm/blob/master/.gitignore"
                    }
                },
                "size": 42
            },
            {
                "type": "code",
                "name": "LICENSE.txt",
                "sha": "82a35c6bcf5fb4b17c3c33b261a08335955bfa30",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/loudinthecloud/pytorch-ntm/blob/master/LICENSE.txt"
                    }
                },
                "size": 1528
            },
            {
                "type": "code",
                "name": "images",
                "sha": "7b4b896f9bc7c5ef518b14607ae70acfa385a630",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/loudinthecloud/pytorch-ntm/tree/master/images"
                    }
                },
                "num_files": 11
            },
            {
                "type": "code",
                "name": "notebooks",
                "sha": "f69ad90fa0b21ee6bb41c595d6f2bd4bad7d482f",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/loudinthecloud/pytorch-ntm/tree/master/notebooks"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "ntm",
                "sha": "d891765100874dacc06603893863e5a07ca9d333",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/loudinthecloud/pytorch-ntm/tree/master/ntm"
                    }
                },
                "num_files": 6
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "514b5d9dc97372cc28d074a6e22a17c1b16c18e7",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/loudinthecloud/pytorch-ntm/blob/master/requirements.txt"
                    }
                },
                "size": 32
            },
            {
                "type": "code",
                "name": "tasks",
                "sha": "9c9fd4087ff67453324087350adb62749fe867b9",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/loudinthecloud/pytorch-ntm/tree/master/tasks"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "tests",
                "sha": "ea261d20a536e88ff6664690be242b6dbec8528c",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/loudinthecloud/pytorch-ntm/tree/master/tests"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "train.py",
                "sha": "68c7f8f949c5d9188f65f64d117dcbd788e86d2a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/loudinthecloud/pytorch-ntm/blob/master/train.py"
                    }
                },
                "size": 8100
            }
        ]
    },
    "authors": [
        {
            "name": "Guy Zana",
            "email": "guyzana@gmail.com",
            "github_id": "loudinthecloud"
        },
        {
            "name": "Jules Gagnon-Marchand",
            "email": "jgagnonmarchand@gmail.com",
            "github_id": "JulesGM"
        },
        {
            "name": "Mark Goldstein",
            "email": "goldstein@nyu.edu",
            "github_id": "marikgoldstein"
        }
    ],
    "tags": [
        "pytorch",
        "ntm",
        "python",
        "notebook",
        "neural-network",
        "neural-turing-machines",
        "lstm"
    ],
    "description": "Neural Turing Machines (NTM) - PyTorch Implementation",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/loudinthecloud/pytorch-ntm",
            "stars": 501,
            "issues": true,
            "readme": "# PyTorch Neural Turing Machine (NTM)\n\nPyTorch implementation of [Neural Turing Machines](https://arxiv.org/abs/1410.5401) (NTM).\n\nAn **NTM** is a memory augumented neural network (attached to external memory) where the interactions with the external memory (address, read, write) are done using differentiable transformations. Overall, the network is end-to-end differentiable and thus trainable by a gradient based optimizer.\n\nThe NTM is processing input in sequences, much like an LSTM, but with additional benfits: (1) The external memory allows the network to learn algorithmic tasks easier (2) Having larger capacity, without increasing the network's trainable parameters.\n\nThe external memory allows the NTM to learn algorithmic tasks, that are much harder for LSTM to learn, and to maintain an internal state much longer than traditional LSTMs.\n\n## A PyTorch Implementation\n\nThis repository implements a vanilla NTM in a straight forward way. The following architecture is used:\n\n![NTM Architecture](./images/ntm.png)\n\n### Features\n* Batch learning support\n* Numerically stable\n* Flexible head configuration - use X read heads and Y write heads and specify the order of operation\n* **copy** and **repeat-copy** experiments agree with the paper\n\n***\n\n## Copy Task\n\nThe **Copy** task tests the NTM's ability to store and recall a long sequence of arbitrary information. The input to the network is a random sequence of bits, ending with a delimiter. The sequence lengths are randomised between 1 to 20.\n\n### Training\n\nTraining convergence for the **copy task** using 4 different seeds (see the [notebook](./notebooks/copy-task-plots.ipynb) for details)\n\n![NTM Convergence](./images/copy-train.png)\n\n The following plot shows the cost per sequence length during training. The network was trained with `seed=10` and shows fast convergence. Other seeds may not perform as well but should converge in less than 30K iterations.\n\n![NTM Convergence](./images/copy-train2.png)\n\n### Evaluation\n\nHere is an animated GIF that shows how the model generalize. The model was evaluated after every 500 training samples, using the target sequence shown in the upper part of the image. The bottom part shows the network output at any given training stage.\n\n![Copy Task](./images/copy-train-20-fast.gif)\n\nThe following is the same, but with `sequence length = 80`. Note that the network was trained with sequences of lengths 1 to 20.\n\n![Copy Task](./images/copy-train-80-fast.gif)\n\n***\n## Repeat Copy Task\n\nThe **Repeat Copy** task tests whether the NTM can learn a simple nested function, and invoke it by learning to execute a __for loop__. The input to the network is a random sequence of bits, followed by a delimiter and a scalar value that represents the number of repetitions to output. The number of repetitions, was normalized to have zero mean and variance of one (as in the paper). Both the length of the sequence and the number of repetitions are randomised between 1 to 10.\n\n### Training\n\nTraining convergence for the **repeat-copy task** using 4 different seeds (see the [notebook](./notebooks/repeat-copy-task-plots.ipynb) for details)\n\n![NTM Convergence](./images/repeat-copy-train.png)\n\n### Evaluation\n\nThe following image shows the input presented to the network, a sequence of bits + delimiter + num-reps scalar. Specifically the sequence length here is eight and the number of repetitions is five.\n\n![Repeat Copy Task](./images/repeat-copy-ex-inp.png)\n\nAnd here's the output the network had predicted:\n\n![Repeat Copy Task](./images/repeat-copy-ex-outp.png)\n\nHere's an animated GIF that shows how the network learns to predict the targets. Specifically, the network was evaluated in each checkpoint saved during training with the same input sequence.\n\n![Repeat Copy Task](./images/repeat-copy-train-10.gif)\n\n## Installation\n\nThe NTM can be used as a reusable module, currently not packaged though.\n\n1. Clone repository\n2. Install [PyTorch](http://pytorch.org/)\n3. pip install -r requirements.txt\n\n## Usage\n\nExecute ./train.py\n\n```\nusage: train.py [-h] [--seed SEED] [--task {copy,repeat-copy}] [-p PARAM]\n                [--checkpoint-interval CHECKPOINT_INTERVAL]\n                [--checkpoint-path CHECKPOINT_PATH]\n                [--report-interval REPORT_INTERVAL]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --seed SEED           Seed value for RNGs\n  --task {copy,repeat-copy}\n                        Choose the task to train (default: copy)\n  -p PARAM, --param PARAM\n                        Override model params. Example: \"-pbatch_size=4\n                        -pnum_heads=2\"\n  --checkpoint-interval CHECKPOINT_INTERVAL\n                        Checkpoint interval (default: 1000). Use 0 to disable\n                        checkpointing\n  --checkpoint-path CHECKPOINT_PATH\n                        Path for saving checkpoint data (default: './')\n  --report-interval REPORT_INTERVAL\n                        Reporting interval\n```\n",
            "readme_url": "https://github.com/loudinthecloud/pytorch-ntm",
            "frameworks": [
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "Neural Turing Machines",
            "arxiv": "1410.5401",
            "year": 2014,
            "url": "http://arxiv.org/abs/1410.5401v2",
            "abstract": "We extend the capabilities of neural networks by coupling them to external\nmemory resources, which they can interact with by attentional processes. The\ncombined system is analogous to a Turing Machine or Von Neumann architecture\nbut is differentiable end-to-end, allowing it to be efficiently trained with\ngradient descent. Preliminary results demonstrate that Neural Turing Machines\ncan infer simple algorithms such as copying, sorting, and associative recall\nfrom input and output examples.",
            "authors": [
                "Alex Graves",
                "Greg Wayne",
                "Ivo Danihelka"
            ]
        }
    ],
    "domain": {
        "domain_type": "Natural Language Processing",
        "domain_prob": 0.846379299849874,
        "task": "Machine Translation",
        "task_prob": 0.7886376155345611
    }
}