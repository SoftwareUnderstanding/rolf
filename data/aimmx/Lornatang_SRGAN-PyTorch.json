{
    "visibility": {
        "visibility": "public",
        "license": "Apache License 2.0"
    },
    "name": "SRGAN-PyTorch",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "Lornatang",
                "owner_type": "User",
                "name": "SRGAN-PyTorch",
                "url": "https://github.com/Lornatang/SRGAN-PyTorch",
                "stars": 136,
                "pushed_at": "2022-03-21 06:47:08+00:00",
                "created_at": "2020-04-18 12:43:29+00:00",
                "language": "Python",
                "description": "A simple and complete implementation of super-resolution paper.",
                "license": "Apache License 2.0",
                "frameworks": [
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "b292029846d2b2cda76e58b680db82600973fd0f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Lornatang/SRGAN-PyTorch/blob/master/.gitignore"
                    }
                },
                "size": 1907
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "427417b60d598d0099a7d786078c983f9dd6bd02",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Lornatang/SRGAN-PyTorch/blob/master/LICENSE"
                    }
                },
                "size": 11358
            },
            {
                "type": "code",
                "name": "assets",
                "sha": "0a314727348e092e11437b90fd99898047cab55c",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Lornatang/SRGAN-PyTorch/tree/master/assets"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "config.py",
                "sha": "ea65336ab60acfb6b8f813c06e24d9caf424b94d",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Lornatang/SRGAN-PyTorch/blob/master/config.py"
                    }
                },
                "size": 2870
            },
            {
                "type": "code",
                "name": "data",
                "sha": "8ab9f64c53bbbf32e183eba1cc474f60d9ce25dc",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Lornatang/SRGAN-PyTorch/tree/master/data"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "dataset.py",
                "sha": "a622ffd834f9f442ac67efdfc813a1ba1b5f9b96",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Lornatang/SRGAN-PyTorch/blob/master/dataset.py"
                    }
                },
                "size": 8324
            },
            {
                "type": "code",
                "name": "imgproc.py",
                "sha": "76f89983daffb547730bc9678cfdc0953e1f5568",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Lornatang/SRGAN-PyTorch/blob/master/imgproc.py"
                    }
                },
                "size": 15829
            },
            {
                "type": "code",
                "name": "model.py",
                "sha": "1ab9616c9cdfb42b7ed6a808ab2fe592b62c0b23",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Lornatang/SRGAN-PyTorch/blob/master/model.py"
                    }
                },
                "size": 7636
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "f3f2e68e2a4ed02695ad60b2c0ac7f829dd58fe4",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Lornatang/SRGAN-PyTorch/blob/master/requirements.txt"
                    }
                },
                "size": 67
            },
            {
                "type": "code",
                "name": "results",
                "sha": "5bfad2b3f8e483b6b173d8aaff19597e84626f15",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Lornatang/SRGAN-PyTorch/tree/master/results"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "samples",
                "sha": "5bfad2b3f8e483b6b173d8aaff19597e84626f15",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Lornatang/SRGAN-PyTorch/tree/master/samples"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "scripts",
                "sha": "b46cf4f3c4ce3b155e9bbcf4c52666af8817089c",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Lornatang/SRGAN-PyTorch/tree/master/scripts"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "setup.py",
                "sha": "170ab98f7ce7b2eb490c098e1c2a398a80726917",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Lornatang/SRGAN-PyTorch/blob/master/setup.py"
                    }
                },
                "size": 3573
            },
            {
                "type": "code",
                "name": "train_srgan.py",
                "sha": "7441ee4b148008d4584959e273c600d4694a367c",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Lornatang/SRGAN-PyTorch/blob/master/train_srgan.py"
                    }
                },
                "size": 21348
            },
            {
                "type": "code",
                "name": "train_srresnet.py",
                "sha": "89ab086c3cbc3b79c28ab55fb1360e7d5458ac76",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Lornatang/SRGAN-PyTorch/blob/master/train_srresnet.py"
                    }
                },
                "size": 13901
            },
            {
                "type": "code",
                "name": "validate.py",
                "sha": "310a41403a7bcf2189d48cf3dab55d1109f62d9a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Lornatang/SRGAN-PyTorch/blob/master/validate.py"
                    }
                },
                "size": 3757
            }
        ]
    },
    "authors": [
        {
            "name": "Lorna",
            "email": "liuchangyu1111@gmail.com",
            "github_id": "Lornatang"
        },
        {
            "name": "Aleph Campos da Silveira",
            "email": "alephcampos@gmail.com",
            "github_id": "PhelaPoscam"
        },
        {
            "name": "Oktay Ozturk",
            "github_id": "ozturkoktay"
        }
    ],
    "tags": [
        "srgan-pytorch",
        "resolution",
        "aritificial-intelligence",
        "pytorch",
        "gan"
    ],
    "description": "A simple and complete implementation of super-resolution paper.",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/Lornatang/SRGAN-PyTorch",
            "stars": 136,
            "issues": true,
            "readme": "# SRGAN-PyTorch\n\n## Overview\n\nThis repository contains an op-for-op PyTorch reimplementation\nof [Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network](https://arxiv.org/abs/1609.04802v5).\n\n## Table of contents\n\n- [SRGAN-PyTorch](#srgan-pytorch)\n    - [Overview](#overview)\n    - [Table of contents](#table-of-contents)\n    - [Download weights](#download-weights)\n    - [Download datasets](#download-datasets)\n    - [Test](#test)\n    - [Train](#train)\n        - [Train SRResNet model](#train-srresnet-model)\n        - [Train SRGAN model](#train-srgan-model)\n    - [Result](#result)\n    - [Contributing](#contributing)\n    - [Credit](#credit)\n        - [Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network](#photo-realistic-single-image-super-resolution-using-a-generative-adversarial-network)\n\n## Download weights\n\n- [Google Driver](https://drive.google.com/drive/folders/17ju2HN7Y6pyPK2CC_AqnAfTOe9_3hCQ8?usp=sharing)\n- [Baidu Driver](https://pan.baidu.com/s/1yNs4rqIb004-NKEdKBJtYg?pwd=llot)\n\n## Download datasets\n\nContains DIV2K, DIV8K, Flickr2K, OST, T91, Set5, Set14, BSDS100 and BSDS200, etc.\n\n- [Google Driver](https://drive.google.com/drive/folders/1A6lzGeQrFMxPqJehK9s37ce-tPDj20mD?usp=sharing)\n- [Baidu Driver](https://pan.baidu.com/s/1o-8Ty_7q6DiS3ykLU09IVg?pwd=llot)\n\n## Test\n\nModify the contents of the file as follows.\n\n- line 29: `upscale_factor` change to the magnification you need to enlarge.\n- line 31: `mode` change Set to valid mode.\n- line 100: `model_path` change weight address after training.\n\n## Train\n\nModify the contents of the file as follows.\n\n- line 29: `upscale_factor` change to the magnification you need to enlarge.\n- line 31: `mode` change Set to train mode.\n\nIf you want to load weights that you've trained before, modify the contents of the file as follows.\n\n### Train SRResNet model\n\n- line 47: `start_epoch` change number of SRResNet training iterations in the previous round.\n- line 48: `resume` change to SRResNet weight address that needs to be loaded.\n\n### Train SRGAN model\n\n- line 71: `start_epoch` change number of SRGAN training iterations in the previous round.\n- line 72: `resume` change to RRDBNet weight address that needs to be loaded.\n- line 73: `resume_d` change to Discriminator weight address that needs to be loaded.\n- line 74: `resume_g` change to Generator weight address that needs to be loaded.\n\n## Result\n\nSource of original paper results: [https://arxiv.org/pdf/1609.04802v5.pdf](https://arxiv.org/pdf/1609.04802v5.pdf)\n\nIn the following table, the psnr value in `()` indicates the result of the project, and `-` indicates no test.\n\n| Dataset | Scale | SRResNet (PSNR)  |   SRGAN (PSNR)   |\n|:-------:|:-----:|:----------------:|:----------------:|\n|  Set5   |   4   | 32.05(**32.00**) | 29.40(**28.91**) |\n|  Set14  |   4   | 28.49(**28.28**) | 26.02(**25.70**) |\n\nLow resolution / Recovered High Resolution / Ground Truth\n<span align=\"center\"><img src=\"assets/result.png\"/></span>\n\n## Contributing\n\nIf you find a bug, create a GitHub issue, or even better, submit a pull request. Similarly, if you have questions, simply post them as GitHub issues.\n\nI look forward to seeing what the community does with these models!\n\n## Credit\n\n### Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network\n\n_Christian Ledig, Lucas Theis, Ferenc Huszar, Jose Caballero, Andrew Cunningham, Alejandro Acosta, Andrew Aitken, Alykhan Tejani, Johannes Totz, Zehan\nWang, Wenzhe Shi_ <br>\n\n**Abstract** <br>\nDespite the breakthroughs in accuracy and speed of single image super-resolution using faster and deeper convolutional neural networks, one central\nproblem remains largely unsolved: how do we recover the finer texture details when we super-resolve at large upscaling factors? The behavior of\noptimization-based super-resolution methods is principally driven by the choice of the objective function. Recent work has largely focused on\nminimizing the mean squared reconstruction error. The resulting estimates have high peak signal-to-noise ratios, but they are often lacking\nhigh-frequency details and are perceptually unsatisfying in the sense that they fail to match the fidelity expected at the higher resolution. In this\npaper, we present SRGAN, a generative adversarial network (GAN) for image super-resolution (SR). To our knowledge, it is the first framework capable\nof inferring photo-realistic natural images for 4x upscaling factors. To achieve this, we propose a perceptual loss function which consists of an\nadversarial loss and a content loss. The adversarial loss pushes our solution to the natural image manifold using a discriminator network that is\ntrained to differentiate between the super-resolved images and original photo-realistic images. In addition, we use a content loss motivated by\nperceptual similarity instead of similarity in pixel space. Our deep residual network is able to recover photo-realistic textures from heavily\ndownsampled images on public benchmarks. An extensive mean-opinion-score (MOS) test shows hugely significant gains in perceptual quality using SRGAN.\nThe MOS scores obtained with SRGAN are closer to those of the original high-resolution images than to those obtained with any state-of-the-art method.\n\n[[Paper]](https://arxiv.org/pdf/1609.04802)\n\n```bibtex\n@InProceedings{srgan,\n    author = {Christian Ledig, Lucas Theis, Ferenc Huszar, Jose Caballero, Andrew Cunningham, Alejandro Acosta, Andrew Aitken, Alykhan Tejani, Johannes Totz, Zehan Wang, Wenzhe Shi},\n    title = {Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network},\n    booktitle = {arXiv},\n    year = {2016}\n}\n```\n",
            "readme_url": "https://github.com/Lornatang/SRGAN-PyTorch",
            "frameworks": [
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network",
            "arxiv": "1609.04802",
            "year": 2016,
            "url": "http://arxiv.org/abs/1609.04802v5",
            "abstract": "Despite the breakthroughs in accuracy and speed of single image\nsuper-resolution using faster and deeper convolutional neural networks, one\ncentral problem remains largely unsolved: how do we recover the finer texture\ndetails when we super-resolve at large upscaling factors? The behavior of\noptimization-based super-resolution methods is principally driven by the choice\nof the objective function. Recent work has largely focused on minimizing the\nmean squared reconstruction error. The resulting estimates have high peak\nsignal-to-noise ratios, but they are often lacking high-frequency details and\nare perceptually unsatisfying in the sense that they fail to match the fidelity\nexpected at the higher resolution. In this paper, we present SRGAN, a\ngenerative adversarial network (GAN) for image super-resolution (SR). To our\nknowledge, it is the first framework capable of inferring photo-realistic\nnatural images for 4x upscaling factors. To achieve this, we propose a\nperceptual loss function which consists of an adversarial loss and a content\nloss. The adversarial loss pushes our solution to the natural image manifold\nusing a discriminator network that is trained to differentiate between the\nsuper-resolved images and original photo-realistic images. In addition, we use\na content loss motivated by perceptual similarity instead of similarity in\npixel space. Our deep residual network is able to recover photo-realistic\ntextures from heavily downsampled images on public benchmarks. An extensive\nmean-opinion-score (MOS) test shows hugely significant gains in perceptual\nquality using SRGAN. The MOS scores obtained with SRGAN are closer to those of\nthe original high-resolution images than to those obtained with any\nstate-of-the-art method.",
            "authors": [
                "Christian Ledig",
                "Lucas Theis",
                "Ferenc Huszar",
                "Jose Caballero",
                "Andrew Cunningham",
                "Alejandro Acosta",
                "Andrew Aitken",
                "Alykhan Tejani",
                "Johannes Totz",
                "Zehan Wang",
                "Wenzhe Shi"
            ]
        },
        {
            "year": "2016",
            "booktitle": "arXiv",
            "title": "Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network",
            "author": [
                "Christian Ledig, Lucas Theis, Ferenc Huszar, Jose Caballero, Andrew Cunningham, Alejandro Acosta, Andrew Aitken, Alykhan Tejani, Johannes Totz, Zehan Wang, Wenzhe Shi"
            ],
            "ENTRYTYPE": "inproceedings",
            "ID": "srgan",
            "authors": [
                "Christian Ledig, Lucas Theis, Ferenc Huszar, Jose Caballero, Andrew Cunningham, Alejandro Acosta, Andrew Aitken, Alykhan Tejani, Johannes Totz, Zehan Wang, Wenzhe Shi"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9999794635538802,
        "task": "Image Generation",
        "task_prob": 0.7904953799639992
    }
}