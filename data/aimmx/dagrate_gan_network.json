{
    "visibility": {
        "visibility": "public"
    },
    "name": "gan_network",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "dagrate",
                "owner_type": "User",
                "name": "gan_network",
                "url": "https://github.com/dagrate/gan_network",
                "stars": 0,
                "pushed_at": "2018-08-02 13:37:19+00:00",
                "created_at": "2018-07-26 11:57:24+00:00",
                "language": "Python",
                "frameworks": [
                    "Keras",
                    "scikit-learn"
                ]
            },
            {
                "type": "code",
                "name": "WGAN_gradientpenalty.py",
                "sha": "3dda70dbebcb1dd3d1cab001cde79f8533f4f50e",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/dagrate/gan_network/blob/master/WGAN_gradientpenalty.py"
                    }
                },
                "size": 6977
            },
            {
                "type": "code",
                "name": "WGAN_std.py",
                "sha": "9c99624ac977197ff4b04334ad7fa08f272472ce",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/dagrate/gan_network/blob/master/WGAN_std.py"
                    }
                },
                "size": 5306
            },
            {
                "type": "code",
                "name": "data",
                "sha": "ad3ae73c96a99f8d4352d2a54c4280a4fe4e45bc",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/dagrate/gan_network/tree/master/data"
                    }
                },
                "num_files": 8
            }
        ]
    },
    "authors": [
        {
            "name": "Jeremy",
            "github_id": "dagrate"
        }
    ],
    "tags": [
        "neural-networks",
        "artificial-intelligence",
        "gans"
    ],
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/dagrate/gan_network",
            "stars": 0,
            "issues": true,
            "readme": "# gan_network\n\nThe gan_network library is a Python library that proposes Wasserstein Generative Adversarial Network (WGAN) for numerical simulations. Two types of WGAN are implemented: \n- a standard WGAN as described in [1] and [2]\n- a gradient penalty GAN as described in [3]\n\n----------------------------\n\n## Dependencies\n\nThe library uses **Python 3** and the following modules:\n- numpy (pip install numpy)\n- keras (pip install numba)\n- pylab (pip install pylab)\n- functools (pip install pylab)\n- sklearn (pip install sklearn)\n\nIf running in Linux distribution, it is advised to install BLAS/LAPACK to increase the efficiency of the computations:  \nsudo apt-get install libblas-dev liblapack-dev gfortran\n\n----------------------------\n\n## Quick Start\n\nThe standard WGAN is available in the file WGAN_std.py\n\nThe gradient penalty WGAN is available in the file WGAN_gradientpenalty.py\n\n```python\n```\n\n----------------------------\n\n## References\n\n[1] Ian J. Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, and Yoshua Bengio. 2014. Generative adversarial nets. In Proceedings of the 27th International Conference on Neural Information Processing Systems - Volume 2 (NIPS'14), Vol. 2. MIT Press, Cambridge, MA, USA, 2672-2680.\n\n[2] Martin Arjovsky, Soumith Chintala, L\u00e9on Bottou. 2017, Wasserstein Generative Adversarial Networks. Proceedings of the 34th International Conference on Machine Learning, PMLR 70:214-223, 2017. Paper available at http://proceedings.mlr.press/v70/arjovsky17a/arjovsky17a.pdf\n\n[3] Gulrajani, Ishaan & Ahmed, Faruk & Arjovsky, Martin & Dumoulin, Vincent & Courville, Aaron. (2017). Improved Training of Wasserstein GANs. Paper available at https://arxiv.org/pdf/1704.00028.pdf\n\n----------------------------\n\n## Citing \n\nFurther to come\n",
            "readme_url": "https://github.com/dagrate/gan_network",
            "frameworks": [
                "Keras",
                "scikit-learn"
            ]
        }
    ],
    "references": [
        {
            "title": "Improved Training of Wasserstein GANs",
            "arxiv": "1704.00028",
            "year": 2017,
            "url": "http://arxiv.org/abs/1704.00028v3",
            "abstract": "Generative Adversarial Networks (GANs) are powerful generative models, but\nsuffer from training instability. The recently proposed Wasserstein GAN (WGAN)\nmakes progress toward stable training of GANs, but sometimes can still generate\nonly low-quality samples or fail to converge. We find that these problems are\noften due to the use of weight clipping in WGAN to enforce a Lipschitz\nconstraint on the critic, which can lead to undesired behavior. We propose an\nalternative to clipping weights: penalize the norm of gradient of the critic\nwith respect to its input. Our proposed method performs better than standard\nWGAN and enables stable training of a wide variety of GAN architectures with\nalmost no hyperparameter tuning, including 101-layer ResNets and language\nmodels over discrete data. We also achieve high quality generations on CIFAR-10\nand LSUN bedrooms.",
            "authors": [
                "Ishaan Gulrajani",
                "Faruk Ahmed",
                "Martin Arjovsky",
                "Vincent Dumoulin",
                "Aaron Courville"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.999897367949723,
        "task": "Image Generation",
        "task_prob": 0.9904574538524114
    },
    "training": {
        "datasets": [
            {
                "name": "CIFAR-10"
            }
        ]
    }
}