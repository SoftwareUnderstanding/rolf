{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "LBAM_inpainting",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "Vious",
                "owner_type": "User",
                "name": "LBAM_Pytorch",
                "url": "https://github.com/Vious/LBAM_Pytorch",
                "stars": 109,
                "pushed_at": "2020-12-03 13:07:55+00:00",
                "created_at": "2019-09-11 02:16:22+00:00",
                "language": "Python",
                "description": "Pytorch re-implementation of Paper: Image Inpainting with Learnable Bidirectional Attention Maps (ICCV 2019)",
                "license": "MIT License",
                "frameworks": [
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "a5e6438ec3118017408a27ad68a1c93a3359e15f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Vious/LBAM_Pytorch/blob/master/.gitignore"
                    }
                },
                "size": 52
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "4142de926eb79b6235abdca5abfb2d4c2743408e",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Vious/LBAM_Pytorch/blob/master/LICENSE"
                    }
                },
                "size": 1062
            },
            {
                "type": "code",
                "name": "data",
                "sha": "eec278be96e8bf8df276a9e9310930a0db18d6ff",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Vious/LBAM_Pytorch/tree/master/data"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "figs",
                "sha": "de98e8a7763be7da69585aac18108221240aa546",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Vious/LBAM_Pytorch/tree/master/figs"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "generateMask.py",
                "sha": "d5d3f714883d1322bc724ef568a59484e059d753",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Vious/LBAM_Pytorch/blob/master/generateMask.py"
                    }
                },
                "size": 2993
            },
            {
                "type": "code",
                "name": "loss",
                "sha": "284a92c1d079e1043fb55a9ee1a2e45fbb837ee0",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Vious/LBAM_Pytorch/tree/master/loss"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "models",
                "sha": "58f00d22f8ee35e7210af2eda27ae92d21b7f3cb",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Vious/LBAM_Pytorch/tree/master/models"
                    }
                },
                "num_files": 7
            },
            {
                "type": "code",
                "name": "pytorch_ssim",
                "sha": "fcacd81bcf3d0545e878a090fda4d6d1612f60d1",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Vious/LBAM_Pytorch/tree/master/pytorch_ssim"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "test.py",
                "sha": "07a4fa0b65021d26accfae1cc6c71b735dcc7a2f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Vious/LBAM_Pytorch/blob/master/test.py"
                    }
                },
                "size": 2459
            },
            {
                "type": "code",
                "name": "test_random_batch.py",
                "sha": "670604d5a9c3a220870b63f5400772785f71b749",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Vious/LBAM_Pytorch/blob/master/test_random_batch.py"
                    }
                },
                "size": 4640
            },
            {
                "type": "code",
                "name": "train.py",
                "sha": "4f458b6fa763b752db08108060fbd29c8c4af2f9",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/Vious/LBAM_Pytorch/blob/master/train.py"
                    }
                },
                "size": 3780
            }
        ]
    },
    "authors": [
        {
            "name": "Chaohao Xie",
            "github_id": "Vious"
        }
    ],
    "tags": [
        "image-inpainting",
        "iccv",
        "pytorch-implementation"
    ],
    "description": "Pytorch re-implementation of Paper: Image Inpainting with Learnable Bidirectional Attention Maps (ICCV 2019)",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/Vious/LBAM_Pytorch",
            "stars": 109,
            "issues": true,
            "readme": "# LBAM_inpainting\n\n## Introduction\nThis is the pytorch implementation of Paper: Image Inpainting With Learnable Bidirectional Attention Maps (ICCV 2019) [paper](http://openaccess.thecvf.com/content_ICCV_2019/papers/Xie_Image_Inpainting_With_Learnable_Bidirectional_Attention_Maps_ICCV_2019_paper.pdf) [suppl](http://openaccess.thecvf.com/content_ICCV_2019/supplemental/Xie_Image_Inpainting_With_ICCV_2019_supplemental.pdf)\n\n### Model Architecture\nWe propose a Bidirectional Attention model based on the [U-Net](https://arxiv.org/pdf/1611.07004.pdf) architecture.\n![model](./figs/model/model_architecture.png)\n\n### Bidrectional Attention Layer\n![Layer](./figs/model/BidAtentionLayer.png)\n\n## Prerequisites\n- Python 3.6\n- Pytorch >= 1.0 (tested on pytorch version 1.0.0, 1.2.0, 1.3.0)\n- CPU or NVIDIA GPU + Cuda + Cudnn\n\n### Training\nTo train the LBAM model:\n```bash\npython train.py --batchSize numOf_batch_size --dataRoot your_image_path \\\n--maskRoot your_mask_root --modelsSavePath path_to_save_your_model \\\n--logPath path_to_save_tensorboard_log --pretrain(optional) pretrained_model_path\n```\n\n### Testing\nTo test the model:\n```bash\npython test.py --input input_image --mask your_mask --output output_file_prefix --pretrain pretrained_model_path\n```\n\nTo test with random batch with random masks:\n```\npython test_random_batch.py --dataRoot your_image_path\n--maskRoot your_mask_path --batchSize numOf_batch_size --pretrain pretrained_model_path\n```\n\n### Some Results\nWe suggest that you train our model with a large batch size (>= 48 or so). We re-train our model with batch size 10, the results degrades a little bit, I guess it may be due to the batch-normalization opreation (I would try removing bn from LBAM and see how it affects).\n\nThe pretrained model can be found at [google drive](https://drive.google.com/drive/folders/17DJEp0APDcZoWPIHwMFs78ak59pYlDPw), or [baidu cloud](https://pan.baidu.com/share/init?surl=z9hNEpbhsK2r-TEJbYkuQw) with extract code: mvzh. I made a slight change by setting the bn to false and modify the last tanh from absolute value to (tanh() + 1) / 2.\n\nHere are some inpainting results that we train with batch size of 10 on Paris StreetView dataset:\n<table style='float:center'>\n <tr>\n  <th><B>Input</B></th> <th><B>Results</B></th> <th><B>Ground-Truth</B></th>\n </tr>\n\n<tr>\n    <td>\n     <img src=\"./figs/results/input/input_001.png\">\n    </td>\n    <td>\n     <img src=\"./figs/results/ours/ours_001.png\">\n    </td>\n    <td>\n     <img src=\"./figs/results/GT/GT_001.png\">\n    </td>\n\n</tr>\n\n<tr>\n    <td>\n     <img src=\"./figs/results/input/input_002.png\">\n    </td>\n    <td>\n     <img src=\"./figs/results/ours/ours_002.png\">\n    </td>\n    <td>\n     <img src=\"./figs/results/GT/GT_002.png\">\n    </td>\n\n</tr>\n\n<tr>\n    <td>\n     <img src=\"./figs/results/input/input_003.png\">\n    </td>\n    <td>\n     <img src=\"./figs/results/ours/ours_003.png\">\n    </td>\n    <td>\n     <img src=\"./figs/results/GT/GT_003.png\">\n    </td>\n\n</tr>\n\n<tr>\n    <td>\n     <img src=\"./figs/results/input/input_004.png\">\n    </td>\n    <td>\n     <img src=\"./figs/results/ours/ours_004.png\">\n    </td>\n    <td>\n     <img src=\"./figs/results/GT/GT_004.png\">\n    </td>\n\n</tr>\n\n<tr>\n    <td>\n     <img src=\"./figs/results/input/input_005.png\">\n    </td>\n    <td>\n     <img src=\"./figs/results/ours/ours_005.png\">\n    </td>\n    <td>\n     <img src=\"./figs/results/GT/GT_005.png\">\n    </td>\n\n</tr>\n\n\n</table>\n\n\n\n### If you find this code would be useful\nPlease cite our paper\n\n```\n@InProceedings{Xie_2019_ICCV,\nauthor = {Xie, Chaohao and Liu, Shaohui and Li, Chao and Cheng, Ming-Ming and Zuo, Wangmeng and Liu, Xiao and Wen, Shilei and Ding, Errui},\ntitle = {Image Inpainting With Learnable Bidirectional Attention Maps},\nbooktitle = {The IEEE International Conference on Computer Vision (ICCV)},\nmonth = {October},\nyear = {2019}\n}\n```\n\n\n### Acknowledgement\nWe benifit a lot from [NVIDIA-partialconv](https://github.com/NVIDIA/partialconv) and [naoto0804-pytorch-inpainting-with-partial-conv](https://github.com/naoto0804/pytorch-inpainting-with-partial-conv\n), thanks for their excellent work.\n",
            "readme_url": "https://github.com/Vious/LBAM_Pytorch",
            "frameworks": [
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "Image-to-Image Translation with Conditional Adversarial Networks",
            "arxiv": "1611.07004",
            "year": 2016,
            "url": "http://arxiv.org/abs/1611.07004v3",
            "abstract": "We investigate conditional adversarial networks as a general-purpose solution\nto image-to-image translation problems. These networks not only learn the\nmapping from input image to output image, but also learn a loss function to\ntrain this mapping. This makes it possible to apply the same generic approach\nto problems that traditionally would require very different loss formulations.\nWe demonstrate that this approach is effective at synthesizing photos from\nlabel maps, reconstructing objects from edge maps, and colorizing images, among\nother tasks. Indeed, since the release of the pix2pix software associated with\nthis paper, a large number of internet users (many of them artists) have posted\ntheir own experiments with our system, further demonstrating its wide\napplicability and ease of adoption without the need for parameter tweaking. As\na community, we no longer hand-engineer our mapping functions, and this work\nsuggests we can achieve reasonable results without hand-engineering our loss\nfunctions either.",
            "authors": [
                "Phillip Isola",
                "Jun-Yan Zhu",
                "Tinghui Zhou",
                "Alexei A. Efros"
            ]
        },
        {
            "year": "2019",
            "month": "October",
            "booktitle": "The IEEE International Conference on Computer Vision (ICCV)",
            "title": "Image Inpainting With Learnable Bidirectional Attention Maps",
            "author": [
                "Xie, Chaohao",
                "Liu, Shaohui",
                "Li, Chao",
                "Cheng, Ming-Ming",
                "Zuo, Wangmeng",
                "Liu, Xiao",
                "Wen, Shilei",
                "Ding, Errui"
            ],
            "ENTRYTYPE": "inproceedings",
            "ID": "Xie_2019_ICCV",
            "authors": [
                "Xie, Chaohao",
                "Liu, Shaohui",
                "Li, Chao",
                "Cheng, Ming-Ming",
                "Zuo, Wangmeng",
                "Liu, Xiao",
                "Wen, Shilei",
                "Ding, Errui"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9990128407502538,
        "task": "Image-to-Image Translation",
        "task_prob": 0.8290998582523619
    }
}