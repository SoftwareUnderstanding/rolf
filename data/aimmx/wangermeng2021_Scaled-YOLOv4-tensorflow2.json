{
    "visibility": {
        "visibility": "public",
        "license": "Apache License 2.0"
    },
    "name": "Scaled-YOLOv4-tensorflow2",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "wangermeng2021",
                "owner_type": "User",
                "name": "Scaled-YOLOv4-tensorflow2",
                "url": "https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2",
                "stars": 37,
                "pushed_at": "2022-01-17 10:19:26+00:00",
                "created_at": "2021-01-29 08:53:36+00:00",
                "language": "Python",
                "description": "A Tensorflow2.x implementation of Scaled-YOLOv4 as described in Scaled-YOLOv4: Scaling Cross Stage Partial Network",
                "license": "Apache License 2.0",
                "frameworks": [
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "c7b2cc2b5836f3eb50714f577c4f515db5847cd4",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2/blob/main/.gitignore"
                    }
                },
                "size": 80
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "261eeb9e9f8b2b4b0d119366dda99c6fd7d35c64",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2/blob/main/LICENSE"
                    }
                },
                "size": 11357
            },
            {
                "type": "code",
                "name": "checkpoints",
                "sha": "f3aa77a08ec6a50bb796b6454c28b7b3638a8afe",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2/tree/main/checkpoints"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "dataset",
                "sha": "30dd8a72f95b14528603d410179fe93eddb79cda",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2/tree/main/dataset"
                    }
                },
                "num_files": 10
            },
            {
                "type": "code",
                "name": "deployment",
                "sha": "f816f83bbbffd2029bbdb98bd2a12c7e7e89a94a",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2/tree/main/deployment"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "detect.py",
                "sha": "da986706e85d339c6b227de7819640c0ff74bcb8",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2/blob/main/detect.py"
                    }
                },
                "size": 5706
            },
            {
                "type": "code",
                "name": "generator",
                "sha": "9736b446d109dcd6a33676d505d4affe1eaec1d3",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2/tree/main/generator"
                    }
                },
                "num_files": 6
            },
            {
                "type": "code",
                "name": "images",
                "sha": "25abd863490d6c44db23f471121022dbb1e4cb23",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2/tree/main/images"
                    }
                },
                "num_files": 17
            },
            {
                "type": "code",
                "name": "model",
                "sha": "95d7ab002226c37cf310fecc1a1771ac7eb6dfc4",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2/tree/main/model"
                    }
                },
                "num_files": 12
            },
            {
                "type": "code",
                "name": "output_model",
                "sha": "f3aa77a08ec6a50bb796b6454c28b7b3638a8afe",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2/tree/main/output_model"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "pretrain",
                "sha": "a9a879a11cf0905022a987de043a3f1d5f3b1f58",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2/tree/main/pretrain"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "ac5925c361b3dd6b64120355225c5dffe897fe84",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2/blob/main/requirements.txt"
                    }
                },
                "size": 96
            },
            {
                "type": "code",
                "name": "train.py",
                "sha": "dd9e8424a2f20812e78b3466bcb87543ed1889dc",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2/blob/main/train.py"
                    }
                },
                "size": 19327
            },
            {
                "type": "code",
                "name": "utils",
                "sha": "84695cfb22c7ea4df9e6aa3b3a396d1a46a9256b",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2/tree/main/utils"
                    }
                },
                "num_files": 18
            }
        ]
    },
    "authors": [
        {
            "name": "wangermeng2021",
            "github_id": "wangermeng2021"
        },
        {
            "name": "wangermeng2020",
            "github_id": "wangermeng2020"
        }
    ],
    "tags": [
        "tensorflow2",
        "scaledyolov4",
        "yolov4",
        "object-detection",
        "yolo",
        "tf2",
        "tensorflow",
        "tensorflow-serving"
    ],
    "description": "A Tensorflow2.x implementation of Scaled-YOLOv4 as described in Scaled-YOLOv4: Scaling Cross Stage Partial Network",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2",
            "stars": 37,
            "issues": true,
            "readme": "\n# Scaled-YOLOv4-tensorflow2\n[![Python 3.7](https://img.shields.io/badge/Python-3.7-3776AB)](https://www.python.org/downloads/release/python-360/)\n[![TensorFlow 2.4](https://img.shields.io/badge/TensorFlow-2.4-FF6F00?logo=tensorflow)](https://github.com/tensorflow/tensorflow/releases/tag/v2.2.0)\n\nA Tensorflow2.x implementation of Scaled-YOLOv4 as described in [Scaled-YOLOv4: Scaling Cross Stage Partial Network](https://arxiv.org/abs/2011.08036)\n\n\n## Update Log\n[2021-07-02]:\n* Add support for: Exponential moving average decay for variables. Improve mAP from 0.985 to 0.990 on Chess Pieces dataset.\n\n[2021-06-29]:\n\nMajor Features and Improvements:\n* Add support for: Sharpness-Aware Minimization(SAM_sgd,SAM_adam).\n\nBug Fixes and Changes:\n* Fix the nan loss error when using adam optimizer\n* Set default optimizer as SAM_adam\n* Change default running mode from 'fit' to 'eager mode'\n\n[2021-06-27] Add support for: resuming training from checkpoints.<br><br>\n[2021-02-21] Add support for: model.fit(dramatic improvement in GPU utilization); online coco evaluation callback; change default optimizer from sgd to adam <br><br>\n[2021-02-11] Add support for: one-click deployment using tensorflow Serving(very fast)<br><br>\n[2021-01-29] Add support for: mosaic,ssd_random_crop<br><br>\n[2021-01-25] Add support for: ciou loss,hard-nms,DIoU-nms,label_smooth,transfer learning,tensorboard<br><br>\n[2021-01-23] Add support for: scales_x_y/eliminate grid sensitivity,accumulate gradients for using big batch size,focal loss,diou loss<br><br>\n[2021-01-16] Add support for: warmup,Cosine annealing scheduler,Eager mode training with tf.GradientTape,support voc/coco dataset format<br><br>\n[2021-01-10] Add support for: yolov4-tiny,yolov4-large p5/p6/p7,online coco evaluation,multi scale training<br><br>\n\n## Demo\nScaledYOLOv4_p5_detection_result:\n\n![pothole_p5_detection_3.png](https://github.com/wangermeng2021/ScaledYOLOv4-tensorflow2/blob/main/images/pothole_p5_detection_3.png)\n![chess_p5_detection.png](https://github.com/wangermeng2021/ScaledYOLOv4-tensorflow2/blob/main/images/chess_p5_detection.png)\n\nScaledYOLOv4_tiny_detection_result:\n\n![safehat_tiny_detection_1.png](https://github.com/wangermeng2021/ScaledYOLOv4-tensorflow2/blob/main/images/safehat_tiny_detection_1.png)\n![safehat_tiny_detection_2.png](https://github.com/wangermeng2021/ScaledYOLOv4-tensorflow2/blob/main/images/safehat_tiny_detection_2.png)\n\n## Installation\n###  1. Clone project\n  ``` \n  git clone https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2.git\n  cd Scaled-YOLOv4-tensorflow2\n  ```\n###   2. Install environment\n* install tesnorflow ( skip this step if it's already installed,test environment:tensorflow 2.4.0)\n*     pip install -r requirements.txt\n\n\n## Note:\nI strongly recommend using voc dataset type(default dataset type), because my GPU is old, so coco dataset type is not fully tested.\n\n## Training:\n* Download Pre-trained p5 coco pretrain models and place it under directory 'pretrained/ScaledYOLOV4_p5_coco_pretrain' :<br>\n   [https://drive.google.com/file/d/1glOCE3Y5Q5enW3rpVq3SmKDXzaKIw4YL/view?usp=sharing](https://drive.google.com/file/d/1glOCE3Y5Q5enW3rpVq3SmKDXzaKIw4YL/view?usp=sharing) <br>\n\n* Download Pre-trained p6 coco pretrain models and place it under directory 'pretrained/ScaledYOLOV4_p6_coco_pretrain' :<br>\n   [https://drive.google.com/file/d/1EymbpgiO6VkCCFdB0zSTv0B9yB6T9Fw1/view?usp=sharing](https://drive.google.com/file/d/1EymbpgiO6VkCCFdB0zSTv0B9yB6T9Fw1/view?usp=sharing) <br>\n\n* Download Pre-trained tiny coco pretrain models and place it under directory 'pretrained/ScaledYOLOV4_tiny_coco_pretrain' :<br>\n   [https://drive.google.com/file/d/1x15FN7jCAFwsntaMwmSkkgIzvHXUa7xT/view?usp=sharing](https://drive.google.com/file/d/1x15FN7jCAFwsntaMwmSkkgIzvHXUa7xT/view?usp=sharing) <br>\n\n\n\n\n* For training on [Pothole dataset](https://public.roboflow.com/object-detection/pothole)(No need to download dataset,it's already included in project): <br>\n  p5(single scale):\n  ```\n  python train.py --use-pretrain True --model-type p5 --dataset-type voc --dataset dataset/pothole_voc --num-classes 1 --class-names pothole.names  --voc-train-set dataset_1,train --voc-val-set dataset_1,val  --epochs 200 --batch-size 4 --multi-scale 416 --augment ssd_random_crop \n  ```\n  p5(multi scale):\n  ```\n  python train.py --use-pretrain True --model-type p5 --dataset-type voc --dataset dataset/pothole_voc --num-classes 1 --class-names pothole.names --voc-train-set dataset_1,train --voc-val-set dataset_1,val  --epochs 200 --batch-size 4 --multi-scale 320,352,384,416,448,480,512 --augment ssd_random_crop \n  ```\n* For training on [Chess Pieces dataset](https://public.roboflow.com/object-detection/chess-full)(No need to download dataset,it's already included in project): <br>\n  tiny(single scale):\n  ```\n  python train.py --use-pretrain True --model-type tiny --dataset-type voc --dataset dataset/chess_voc --num-classes 12 --class-names chess.names --voc-train-set dataset_1,train --voc-val-set dataset_1,val  --epochs 400 --batch-size 32 --multi-scale 416 --augment ssd_random_crop \n  ```\n  tiny(multi scale):\n  ```\n  python train.py --use-pretrain True --model-type tiny --dataset-type voc --dataset dataset/chess_voc --num-classes 12 --class-names chess.names --voc-train-set dataset_1,train --voc-val-set dataset_1,val  --epochs 400 --batch-size 32 --multi-scale 320,352,384,416,448,480,512 --augment ssd_random_crop\n\n* For training with SAM_sgd on [Chess Pieces dataset](https://public.roboflow.com/object-detection/chess-full): <br>\n  ```\n  python train.py --optimizer SAM_sgd --use-pretrain True --model-type tiny --dataset-type voc --dataset dataset/chess_voc --num-classes 12 --class-names chess.names --voc-train-set dataset_1,train --voc-val-set dataset_1,val  --epochs 400 --batch-size 32 --multi-scale 416 --augment ssd_random_crop \n  ```\n* For training with ema(Exponential Moving Average) on [Chess Pieces dataset](https://public.roboflow.com/object-detection/chess-full): <br>\n  ```\n  python train.py --ema True --use-pretrain True --model-type tiny --dataset-type voc --dataset dataset/chess_voc --num-classes 12 --class-names chess.names --voc-train-set dataset_1,train --voc-val-set dataset_1,val  --epochs 400 --batch-size 32 --multi-scale 416 --augment ssd_random_crop \n  ``` \n## Tensorboard visualization:\n  * Navigate to [http://0.0.0.0:6006](http://0.0.0.0:6006)\n\n## Evaluation results(GTX2080,mAP@0.5):\n\n| model                                               | Chess Pieces | pothole |  VOC  | COCO |\n|-----------------------------------------------------|--------------|---------|-------|------|\n| Scaled-YoloV4-tiny(416)                             |     0.985    |         |       |      |\n| Scaled-YoloV4-tiny(416)+ema                         |     0.990    |         |       |      |\n| AlexeyAB's YoloV4(416)                              |              |  0.814  |       |      |\n| Scaled-YoloV4-p5(416)                               |              |  0.826  |       |      |\n\n* Evaluation on Pothole dataset: \n![tensorboard_pothole_p5.png](https://github.com/wangermeng2021/ScaledYOLOv4-tensorflow2/blob/main/images/tensorboard_pothole_p5.png)\n* Evaluation on chess dataset: \n![tensorboard_chess_tiny.png](https://github.com/wangermeng2021/ScaledYOLOv4-tensorflow2/blob/main/images/tensorboard_chess_tiny.png)\n## Detection\n* For detection on Chess Pieces dataset:\n  ```\n  python3 detect.py --pic-dir images/chess_pictures --model-path output_model/best_model_tiny_0.985/1 --class-names dataset/chess.names --nms-score-threshold 0.1\n  ```\n  detection result:\n\n  ![chess_p5_detection.png](https://github.com/wangermeng2021/ScaledYOLOv4-tensorflow2/blob/main/images/chess_p5_detection.png)\n\n* For detection on Pothole dataset:\n  ```\n  python3 detect.py --pic-dir images/pothole_pictures --model-path output_model/best_model_p5_0.827/1 --class-names dataset/pothole.names --nms-score-threshold 0.1\n  ```\n  detection result:\n\n  ![pothole_p5_detection_2.png](https://github.com/wangermeng2021/ScaledYOLOv4-tensorflow2/blob/main/images/pothole_p5_detection_2.png)\n\n\n## Customzied training\n* Convert your dataset to Pascal VOC format(you can use labelImg to generate VOC format dataset)\n* Generate class names file(such as xxx.names)\n* \n  ```\n  python train.py --use-pretrain True --model-type p5 --dataset-type voc --dataset your_dataset_root_dir --num-classes num_of_classes --class-names path_of_xxx.names --voc-train-set dataset_1,train --voc-val-set dataset_1,val  --epochs 200 --batch-size 8 --multi-scale 416  --augment ssd_random_crop \n  ```\n## Deployment\nTensorFlow Serving is a flexible, high-performance serving system for machine learning models, designed for production environments.it include two parts:clients and server, we can run them on one machine.<br>\n* **Navigate to deployment directory:**\n```\n  cd  deployment/tfserving\n```\n* **Generate a docker image which contains your trained model (it will take minutes\uff0cyou only have to run it one time):**\n```\n  ./gen_image --model-dir ScaledYOLOv4-tensorflow2/output_model/pothole/best_model_p5_0.811\n```\n* **Deploy model:**<br>\n    * **Server side**( docker and nvidia-docker installed ):\n\t\n        ` ./run_image `\n\t\n    * **Client side**(no need to install tensorflow):<br>\n        1. install client package\n\n            `   pip install tfservingclient-1.0.0-cp37-cp37m-manylinux1_x86_64.whl   `\n\n\n        2. predict images\n\n            `   python demo.py --pic-dir xxxx --class-names xxx.names   `\n\n\n## References\n* [https://github.com/WongKinYiu/ScaledYOLOv4](https://github.com/WongKinYiu/ScaledYOLOv4)\n* [https://github.com/ultralytics/yolov5](https://github.com/ultralytics/yolov5)\n* [https://github.com/dmlc/gluon-cv](https://github.com/dmlc/gluon-cv)\n\n\n\n",
            "readme_url": "https://github.com/wangermeng2021/Scaled-YOLOv4-tensorflow2",
            "frameworks": [
                "TensorFlow"
            ]
        }
    ],
    "references": [
        {
            "title": "Scaled-YOLOv4: Scaling Cross Stage Partial Network",
            "arxiv": "2011.08036",
            "year": 2020,
            "url": "http://arxiv.org/abs/2011.08036v2",
            "abstract": "We show that the YOLOv4 object detection neural network based on the CSP\napproach, scales both up and down and is applicable to small and large networks\nwhile maintaining optimal speed and accuracy. We propose a network scaling\napproach that modifies not only the depth, width, resolution, but also\nstructure of the network. YOLOv4-large model achieves state-of-the-art results:\n55.5% AP (73.4% AP50) for the MS COCO dataset at a speed of ~16 FPS on Tesla\nV100, while with the test time augmentation, YOLOv4-large achieves 56.0% AP\n(73.3 AP50). To the best of our knowledge, this is currently the highest\naccuracy on the COCO dataset among any published work. The YOLOv4-tiny model\nachieves 22.0% AP (42.0% AP50) at a speed of 443 FPS on RTX 2080Ti, while by\nusing TensorRT, batch size = 4 and FP16-precision the YOLOv4-tiny achieves 1774\nFPS.",
            "authors": [
                "Chien-Yao Wang",
                "Alexey Bochkovskiy",
                "Hong-Yuan Mark Liao"
            ]
        },
        {
            "title": "https://github.com/WongKinYiu/ScaledYOLOv4",
            "url": "https://github.com/WongKinYiu/ScaledYOLOv4"
        },
        {
            "title": "https://github.com/ultralytics/yolov5",
            "url": "https://github.com/ultralytics/yolov5"
        },
        {
            "title": "https://github.com/dmlc/gluon-cv",
            "url": "https://github.com/dmlc/gluon-cv"
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "Pothole dataset",
                "connection": {
                    "name": "url",
                    "source": {
                        "url": "https://public.roboflow.com/object-detection/pothole"
                    }
                }
            },
            {
                "name": "Chess Pieces dataset",
                "connection": {
                    "name": "url",
                    "source": {
                        "url": "https://public.roboflow.com/object-detection/chess-full"
                    }
                }
            },
            {
                "name": "Chess Pieces dataset",
                "connection": {
                    "name": "url",
                    "source": {
                        "url": "https://public.roboflow.com/object-detection/chess-full"
                    }
                }
            },
            {
                "name": "Chess Pieces dataset",
                "connection": {
                    "name": "url",
                    "source": {
                        "url": "https://public.roboflow.com/object-detection/chess-full"
                    }
                }
            },
            {
                "name": "COCO"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9974920315728106,
        "task": "Object Detection",
        "task_prob": 0.9791151421980256
    }
}