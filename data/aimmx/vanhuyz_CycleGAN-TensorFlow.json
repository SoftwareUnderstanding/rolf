{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "CycleGAN-TensorFlow",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "vanhuyz",
                "owner_type": "User",
                "name": "CycleGAN-TensorFlow",
                "url": "https://github.com/vanhuyz/CycleGAN-TensorFlow",
                "stars": 1152,
                "pushed_at": "2021-07-29 17:53:15+00:00",
                "created_at": "2017-04-10 03:38:49+00:00",
                "language": "Python",
                "description": "An implementation of CycleGan using TensorFlow",
                "license": "MIT License",
                "frameworks": [
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "dda4b78b31694d3b14f54431d8c109687fb2764a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/vanhuyz/CycleGAN-TensorFlow/blob/master/.gitignore"
                    }
                },
                "size": 1134
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "f406ad860b85cb7da87bdaa90848101b76f81db5",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/vanhuyz/CycleGAN-TensorFlow/blob/master/LICENSE"
                    }
                },
                "size": 1064
            },
            {
                "type": "code",
                "name": "Makefile",
                "sha": "7cae321b4e7c7099c5a08524c1401bb2453c0e1e",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/vanhuyz/CycleGAN-TensorFlow/blob/master/Makefile"
                    }
                },
                "size": 1462
            },
            {
                "type": "code",
                "name": "build_data.py",
                "sha": "fb4f2eb67d4eb57451bf36ffe5f32846c754085b",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/vanhuyz/CycleGAN-TensorFlow/blob/master/build_data.py"
                    }
                },
                "size": 3508
            },
            {
                "type": "code",
                "name": "discriminator.py",
                "sha": "162ec6d445833e89c85fdc660dabe7cf54c398fe",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/vanhuyz/CycleGAN-TensorFlow/blob/master/discriminator.py"
                    }
                },
                "size": 1575
            },
            {
                "type": "code",
                "name": "download_dataset.sh",
                "sha": "043ef8afa82c207b15382c3a931dce8a133b971e",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/vanhuyz/CycleGAN-TensorFlow/blob/master/download_dataset.sh"
                    }
                },
                "size": 891
            },
            {
                "type": "code",
                "name": "export_graph.py",
                "sha": "7f94a6f2985313be72d886625f5bb4a7fb29dddb",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/vanhuyz/CycleGAN-TensorFlow/blob/master/export_graph.py"
                    }
                },
                "size": 2427
            },
            {
                "type": "code",
                "name": "generator.py",
                "sha": "ecb715b5203587760e66e27d443d4f23425f7334",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/vanhuyz/CycleGAN-TensorFlow/blob/master/generator.py"
                    }
                },
                "size": 2346
            },
            {
                "type": "code",
                "name": "inference.py",
                "sha": "490c763e90701b23ee4d19d2f1309a3d48784121",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/vanhuyz/CycleGAN-TensorFlow/blob/master/inference.py"
                    }
                },
                "size": 1693
            },
            {
                "type": "code",
                "name": "model.py",
                "sha": "98a9af19b27bb76cdbaff9dfd2d25a63b84907da",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/vanhuyz/CycleGAN-TensorFlow/blob/master/model.py"
                    }
                },
                "size": 6811
            },
            {
                "type": "code",
                "name": "ops.py",
                "sha": "9becd248d76b5022aab7ed113dfa1991d9ad3dd8",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/vanhuyz/CycleGAN-TensorFlow/blob/master/ops.py"
                    }
                },
                "size": 7553
            },
            {
                "type": "code",
                "name": "reader.py",
                "sha": "f61e28516c7d842722b4c1c995e8288a1423e67c",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/vanhuyz/CycleGAN-TensorFlow/blob/master/reader.py"
                    }
                },
                "size": 3092
            },
            {
                "type": "code",
                "name": "samples",
                "sha": "133fcfda78bb839d1f822b2d3dba4b8204f1fdab",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/vanhuyz/CycleGAN-TensorFlow/tree/master/samples"
                    }
                },
                "num_files": 17
            },
            {
                "type": "code",
                "name": "train.py",
                "sha": "0b0cc2724225cc5a61094cf094645d9a83bf87d7",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/vanhuyz/CycleGAN-TensorFlow/blob/master/train.py"
                    }
                },
                "size": 5177
            },
            {
                "type": "code",
                "name": "utils.py",
                "sha": "b0aab6e730b3cb3212fa52d422d4e95cae3a8ce8",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/vanhuyz/CycleGAN-TensorFlow/blob/master/utils.py"
                    }
                },
                "size": 1496
            }
        ]
    },
    "authors": [
        {
            "name": "Van Huy",
            "github_id": "vanhuyz"
        },
        {
            "name": "Adrian Kretz",
            "email": "me@akretz.com",
            "github_id": "akretz"
        },
        {
            "name": "Dandelion Man\u00e9",
            "email": "decentralion@dandelion.io",
            "github_id": "decentralion"
        },
        {
            "name": "George Ogden",
            "github_id": "George-Ogden"
        },
        {
            "name": "Ivan Ukhov",
            "email": "ivan.ukhov@gmail.com",
            "github_id": "IvanUkhov"
        },
        {
            "name": "John Hany",
            "email": "johnhany@163.com",
            "github_id": "johnhany"
        },
        {
            "name": "Max",
            "github_id": "cpury"
        },
        {
            "name": "timwintle",
            "github_id": "timwintle"
        },
        {
            "name": "Junming Zhang",
            "email": "junming@umich.edu",
            "github_id": "junming259"
        },
        {
            "name": "Mike",
            "github_id": "nanfengpo"
        },
        {
            "name": "rkfg",
            "email": "rkfg@rkfg.me",
            "github_id": "rkfg"
        },
        {
            "name": "fzyzcjy",
            "github_id": "fzyzcjy"
        }
    ],
    "tags": [
        "tensorflow",
        "generative-adversarial-network",
        "cyclegan",
        "gan"
    ],
    "description": "An implementation of CycleGan using TensorFlow",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/vanhuyz/CycleGAN-TensorFlow",
            "stars": 1152,
            "issues": true,
            "readme": "# CycleGAN-TensorFlow\nAn implementation of CycleGan using TensorFlow (work in progress).\n\nOriginal paper: https://arxiv.org/abs/1703.10593\n\n## Results on test data\n\n### apple -> orange\n\n| Input | Output | | Input | Output | | Input | Output |\n|-------|--------|-|-------|--------|-|-------|--------|\n|![apple2orange_1](samples/real_apple2orange_1.jpg) | ![apple2orange_1](samples/fake_apple2orange_1.jpg)| |![apple2orange_2](samples/real_apple2orange_2.jpg) | ![apple2orange_2](samples/fake_apple2orange_2.jpg)| |![apple2orange_3](samples/real_apple2orange_3.jpg) | ![apple2orange_3](samples/fake_apple2orange_3.jpg)|\n\n\n### orange -> apple\n\n| Input | Output | | Input | Output | | Input | Output |\n|-------|--------|-|-------|--------|-|-------|--------|\n|![orange2apple_1](samples/real_orange2apple_1.jpg) | ![orange2apple_1](samples/fake_orange2apple_1.jpg)| |![orange2apple_2](samples/real_orange2apple_2.jpg) | ![orange2apple_2](samples/fake_orange2apple_2.jpg)| |![orange2apple_3](samples/real_orange2apple_3.jpg) | ![orange2apple_3](samples/fake_orange2apple_3.jpg)|\n\n## Environment\n\n* TensorFlow 1.0.0\n* Python 3.6.0\n\n## Data preparing\n\n* First, download a dataset, e.g. apple2orange\n\n```bash\n$ bash download_dataset.sh apple2orange\n```\n\n* Write the dataset to tfrecords\n\n```bash\n$ python3 build_data.py\n```\n\nCheck `$ python3 build_data.py --help` for more details.\n\n## Training\n\n```bash\n$ python3 train.py\n```\n\nIf you want to change some default settings, you can pass those to the command line, such as:\n\n```bash\n$ python3 train.py  \\\n    --X=data/tfrecords/horse.tfrecords \\\n    --Y=data/tfrecords/zebra.tfrecords\n```\n\nHere is the list of arguments:\n```\nusage: train.py [-h] [--batch_size BATCH_SIZE] [--image_size IMAGE_SIZE]\n                [--use_lsgan [USE_LSGAN]] [--nouse_lsgan]\n                [--norm NORM] [--lambda1 LAMBDA1] [--lambda2 LAMBDA2]\n                [--learning_rate LEARNING_RATE] [--beta1 BETA1]\n                [--pool_size POOL_SIZE] [--ngf NGF] [--X X] [--Y Y]\n                [--load_model LOAD_MODEL]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --batch_size BATCH_SIZE\n                        batch size, default: 1\n  --image_size IMAGE_SIZE\n                        image size, default: 256\n  --use_lsgan [USE_LSGAN]\n                        use lsgan (mean squared error) or cross entropy loss,\n                        default: True\n  --nouse_lsgan\n  --norm NORM           [instance, batch] use instance norm or batch norm,\n                        default: instance\n  --lambda1 LAMBDA1     weight for forward cycle loss (X->Y->X), default: 10.0\n  --lambda2 LAMBDA2     weight for backward cycle loss (Y->X->Y), default:\n                        10.0\n  --learning_rate LEARNING_RATE\n                        initial learning rate for Adam, default: 0.0002\n  --beta1 BETA1         momentum term of Adam, default: 0.5\n  --pool_size POOL_SIZE\n                        size of image buffer that stores previously generated\n                        images, default: 50\n  --ngf NGF             number of gen filters in first conv layer, default: 64\n  --X X                 X tfrecords file for training, default:\n                        data/tfrecords/apple.tfrecords\n  --Y Y                 Y tfrecords file for training, default:\n                        data/tfrecords/orange.tfrecords\n  --load_model LOAD_MODEL\n                        folder of saved model that you wish to continue\n                        training (e.g. 20170602-1936), default: None\n```\n\nCheck TensorBoard to see training progress and generated images.\n\n```\n$ tensorboard --logdir checkpoints/${datetime}\n```\n\nIf you halted the training process and want to continue training, then you can set the `load_model` parameter like this.\n\n```bash\n$ python3 train.py  \\\n    --load_model 20170602-1936\n```\n\nHere are some funny screenshots from TensorBoard when training orange -> apple:\n\n![train_screenshot](samples/train_screenshot.png)\n\n\n### Notes\n* If high constrast background colors between input and generated images are observed (e.g. black becomes white), you should restart your training!\n* Train several times to get the best models.\n\n## Export model\nYou can export from a checkpoint to a standalone GraphDef file as follow:\n\n```bash\n$ python3 export_graph.py --checkpoint_dir checkpoints/${datetime} \\\n                          --XtoY_model apple2orange.pb \\\n                          --YtoX_model orange2apple.pb \\\n                          --image_size 256\n```\n\n\n## Inference\nAfter exporting model, you can use it for inference. For example:\n\n```bash\npython3 inference.py --model pretrained/apple2orange.pb \\\n                     --input input_sample.jpg \\\n                     --output output_sample.jpg \\\n                     --image_size 256\n```\n\n## Pretrained models\nMy pretrained models are available at https://github.com/vanhuyz/CycleGAN-TensorFlow/releases\n\n## Contributing\nPlease open an issue if you have any trouble or found anything incorrect in my code :)\n\n## License\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## References\n\n* CycleGAN paper: https://arxiv.org/abs/1703.10593\n* Official source code in Torch: https://github.com/junyanz/CycleGAN\n",
            "readme_url": "https://github.com/vanhuyz/CycleGAN-TensorFlow",
            "frameworks": [
                "TensorFlow"
            ]
        }
    ],
    "references": [
        {
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "arxiv": "1703.10593",
            "year": 2017,
            "url": "http://arxiv.org/abs/1703.10593v7",
            "abstract": "Image-to-image translation is a class of vision and graphics problems where\nthe goal is to learn the mapping between an input image and an output image\nusing a training set of aligned image pairs. However, for many tasks, paired\ntraining data will not be available. We present an approach for learning to\ntranslate an image from a source domain $X$ to a target domain $Y$ in the\nabsence of paired examples. Our goal is to learn a mapping $G: X \\rightarrow Y$\nsuch that the distribution of images from $G(X)$ is indistinguishable from the\ndistribution $Y$ using an adversarial loss. Because this mapping is highly\nunder-constrained, we couple it with an inverse mapping $F: Y \\rightarrow X$\nand introduce a cycle consistency loss to push $F(G(X)) \\approx X$ (and vice\nversa). Qualitative results are presented on several tasks where paired\ntraining data does not exist, including collection style transfer, object\ntransfiguration, season transfer, photo enhancement, etc. Quantitative\ncomparisons against several prior methods demonstrate the superiority of our\napproach.",
            "authors": [
                "Jun-Yan Zhu",
                "Taesung Park",
                "Phillip Isola",
                "Alexei A. Efros"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9989616986602476,
        "task": "Image-to-Image Translation",
        "task_prob": 0.9876375108834416
    }
}