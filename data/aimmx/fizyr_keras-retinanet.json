{
    "visibility": {
        "visibility": "public",
        "license": "Apache License 2.0"
    },
    "name": "Keras implementation of RetinaNet object detection as described in Focal Loss for Dense Object Detection",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "fizyr",
                "owner_type": "Organization",
                "name": "keras-retinanet",
                "url": "https://github.com/fizyr/keras-retinanet",
                "stars": 4283,
                "pushed_at": "2022-03-16 08:10:38+00:00",
                "created_at": "2017-08-14 09:14:29+00:00",
                "language": "Python",
                "description": "Keras implementation of RetinaNet object detection.",
                "license": "Apache License 2.0",
                "frameworks": [
                    "Keras",
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": ".codecov.yml",
                "sha": "4870d14421e7b462b9b4532cc3e82d714f021a7a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/fizyr/keras-retinanet/blob/main/.codecov.yml"
                    }
                },
                "size": 1209
            },
            {
                "type": "code",
                "name": ".github",
                "sha": "8adb4ef59633aa56e32d4ea2722194d260c1af89",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/fizyr/keras-retinanet/tree/main/.github"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": ".gitignore",
                "sha": "0293450db025a974321b705a9ac56bf55201d8f1",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/fizyr/keras-retinanet/blob/main/.gitignore"
                    }
                },
                "size": 273
            },
            {
                "type": "code",
                "name": ".gitmodules",
                "sha": "9d888370c556d9c9d5f6d802018678cb6d8e8e65",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/fizyr/keras-retinanet/blob/main/.gitmodules"
                    }
                },
                "size": 116
            },
            {
                "type": "code",
                "name": ".travis.yml",
                "sha": "a29a84af9a53ee877f8b792b7d672d16f30de476",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/fizyr/keras-retinanet/blob/main/.travis.yml"
                    }
                },
                "size": 439
            },
            {
                "type": "code",
                "name": "CONTRIBUTORS.md",
                "sha": "9d79dc925cee0ad43a7cd43a478a1e3e9601d072",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/fizyr/keras-retinanet/blob/main/CONTRIBUTORS.md"
                    }
                },
                "size": 1393
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "8dada3edaf50dbc082c9a125058f25def75e625a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/fizyr/keras-retinanet/blob/main/LICENSE"
                    }
                },
                "size": 11357
            },
            {
                "type": "code",
                "name": "examples",
                "sha": "d34f5c4774d0e8af7201234fbaf65251b6b10af5",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/fizyr/keras-retinanet/tree/main/examples"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "images",
                "sha": "e927e39ab9bcb36ed9733e5f1fa94cd5fba66825",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/fizyr/keras-retinanet/tree/main/images"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "keras_retinanet",
                "sha": "985ce9d5fe95b6bcb4524ee07b8f375f0f5fd354",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/fizyr/keras-retinanet/tree/main/keras_retinanet"
                    }
                },
                "num_files": 10
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "d70316cd413ce92ccda92d4c19cd1df355ec27c2",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/fizyr/keras-retinanet/blob/main/requirements.txt"
                    }
                },
                "size": 190
            },
            {
                "type": "code",
                "name": "setup.cfg",
                "sha": "354574e4477994b97991bd4a625b9a1b62f7b888",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/fizyr/keras-retinanet/blob/main/setup.cfg"
                    }
                },
                "size": 413
            },
            {
                "type": "code",
                "name": "setup.py",
                "sha": "226681e56eb083054f35164f6766619e77d8623e",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/fizyr/keras-retinanet/blob/main/setup.py"
                    }
                },
                "size": 2420
            },
            {
                "type": "code",
                "name": "snapshots",
                "sha": "a94f29a3cbca34c73ba7e45508d99a53b8900a1e",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/fizyr/keras-retinanet/tree/main/snapshots"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "tests",
                "sha": "d07adbe0618fa862b13efa412358e85ae98badfc",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/fizyr/keras-retinanet/tree/main/tests"
                    }
                },
                "num_files": 10
            }
        ]
    },
    "authors": [
        {
            "name": "Hans Gaiser",
            "email": "h.gaiser@fizyr.com",
            "github_id": "hgaiser"
        },
        {
            "name": "Maarten de Vries",
            "email": "maarten@de-vri.es",
            "github_id": "de-vri-es"
        },
        {
            "name": "vcarpani",
            "github_id": "vcarpani"
        },
        {
            "name": "Valeriu Lacatusu",
            "email": "lacatusu.valeriu@gmail.com",
            "github_id": "lvaleriu"
        },
        {
            "name": "Ashley Williamson",
            "email": "ashley@inp.io",
            "github_id": "awilliamson"
        },
        {
            "name": "Jeong Hansol",
            "github_id": "hansoli68"
        },
        {
            "name": "Jos\u00e9 Luis",
            "email": "alagunasalahaddin@live.com",
            "github_id": "SalahAdDin"
        },
        {
            "name": "Enrico Liscio",
            "github_id": "enricoliscio"
        },
        {
            "name": "Andr\u00e1s",
            "github_id": "vidosits"
        },
        {
            "name": "Yann Henon",
            "github_id": "yhenon"
        },
        {
            "name": "Cristian Gratie",
            "github_id": "cgratie"
        },
        {
            "name": "Jirka Borovec",
            "github_id": "Borda"
        },
        {
            "name": "prickly-u",
            "github_id": "prickly-u"
        },
        {
            "name": "Nikos Tsagkopoulos",
            "email": "n.tsagko@gmail.com",
            "github_id": "nikostsagk"
        },
        {
            "name": "jjiun",
            "github_id": "jjiunlin"
        },
        {
            "name": "Julin Maloof",
            "github_id": "jnmaloof"
        },
        {
            "name": "Roman Solovyev",
            "github_id": "ZFTurbo"
        },
        {
            "name": "\u53f6\u5929\u5947(Charles Ye) ",
            "email": "tianqiye@outlook.com",
            "github_id": "yecharlie"
        },
        {
            "name": "Mihai Morariu",
            "github_id": "mihaimorariu"
        },
        {
            "name": "Jakub Semri\u010d",
            "email": "jakubsemric@gmail.com",
            "github_id": "jsemric"
        },
        {
            "name": "Ben Weinstein",
            "github_id": "bw4sz"
        },
        {
            "name": "Martin Zlocha",
            "email": "zlocha.martin@gmail.com",
            "github_id": "martinzlocha"
        },
        {
            "name": "Raghav Bhardwaj",
            "email": "raghavbhardwaj1998@gmail.com",
            "github_id": "Raghav-B"
        },
        {
            "name": "Rodrigo Meira de Andrade",
            "email": "rodrigormda@hotmail.com",
            "github_id": "rodrigo2019"
        },
        {
            "name": "Alexander Pacha",
            "github_id": "apacha"
        },
        {
            "name": "Svan70",
            "github_id": "Svan70"
        },
        {
            "name": "Pedro Concei\u00e7\u00e3o",
            "github_id": "pedroconceicao"
        },
        {
            "name": "Andrea Panizza",
            "github_id": "AndreaPi"
        },
        {
            "name": "adreo00",
            "github_id": "adreo00"
        },
        {
            "name": "Aviad Moreshet",
            "email": "aviad10m@gmail.com",
            "github_id": "CodeJjang"
        },
        {
            "name": "Mike Clark",
            "email": "github@wassname.org",
            "github_id": "wassname"
        },
        {
            "name": "Wudi Fang",
            "github_id": "fangwudi"
        },
        {
            "name": "Daniyal Shahrokhian",
            "email": "daniyal@kth.se",
            "github_id": "dshahrokhian"
        },
        {
            "name": "hannesedvartsen",
            "github_id": "Muhannes"
        },
        {
            "name": "Richard Nagyfi",
            "github_id": "sedthh"
        },
        {
            "name": "Agastya Kalra",
            "github_id": "KalraA"
        },
        {
            "name": "Andrew Grigorev",
            "email": "andrew@ei-grad.ru",
            "github_id": "ei-grad"
        },
        {
            "name": "Etienne Meunier",
            "email": "etiennemeunier@live.fr",
            "github_id": "Etienne-Meunier"
        },
        {
            "name": "Jin",
            "github_id": "baek-jinoo"
        },
        {
            "name": "Lampros Mouselimis",
            "email": "mouselimislampros@gmail.com",
            "github_id": "mlampros"
        },
        {
            "name": "edwardyangxin",
            "email": "yx_yoyo@live.cn",
            "github_id": "edwardyangxin"
        },
        {
            "name": "fnobis",
            "github_id": "fnobis"
        },
        {
            "name": "Max Van Sande",
            "github_id": "mxvs"
        },
        {
            "name": "Iver Jordal",
            "github_id": "iver56"
        },
        {
            "name": "anilkens",
            "github_id": "anilkens"
        },
        {
            "name": "Anil Karaka",
            "github_id": "syllogismos"
        },
        {
            "name": "Bedapudi Praneeth",
            "email": "praneeth@bpraneeth.com",
            "github_id": "bedapudi6788"
        },
        {
            "name": "Denis Dowling",
            "github_id": "ddowling"
        },
        {
            "name": "Eduardo Ramos",
            "github_id": "eduramiba"
        },
        {
            "name": "Fausto Morales",
            "github_id": "faustomorales"
        },
        {
            "name": "Federico",
            "github_id": "iskorini"
        },
        {
            "name": "Guillaume Erhard",
            "github_id": "GuillaumeErhard"
        },
        {
            "name": "holyguacamole",
            "github_id": "holyguacamole"
        },
        {
            "name": "Hyuna Cho",
            "email": "hannah3767@gmail.com",
            "github_id": "Hannah37"
        },
        {
            "name": "Julius",
            "github_id": "juliussimonelli"
        },
        {
            "name": "Koen Vijverberg",
            "github_id": "srslynow"
        },
        {
            "name": "Laurens Hagendoorn",
            "github_id": "LaurensHagendoorn"
        },
        {
            "name": "Martin Genet",
            "github_id": "mrtgenet"
        },
        {
            "name": "Michael F.",
            "github_id": "penguinmenac3"
        },
        {
            "name": "Pablo Pizarro R.",
            "email": "pablo@ppizarror.com",
            "github_id": "ppizarror"
        },
        {
            "name": "Pasi Pyrr\u00f6",
            "email": "pasi_pyrro@hotmail.com",
            "github_id": "Hyper5phere"
        },
        {
            "name": "Paul",
            "github_id": "pauldes"
        },
        {
            "name": "Pierre D\u00e9rian",
            "email": "contact@pierrederian.net",
            "github_id": "pderian"
        },
        {
            "name": "Richard Higgins",
            "email": "richard@relh.net",
            "github_id": "relh"
        },
        {
            "name": "Rohit R",
            "github_id": "Gateway2745"
        },
        {
            "name": "UgoLouche",
            "github_id": "UgoLouche"
        },
        {
            "name": "Valentin",
            "email": "bickel@mps.mpg.de",
            "github_id": "bickelmps"
        },
        {
            "name": "Waylon Flinn",
            "email": "waylonflinn@gmail.com",
            "github_id": "waylonflinn"
        },
        {
            "name": "borakrc",
            "github_id": "borakrc"
        },
        {
            "name": "cbodenst",
            "github_id": "cbodenst"
        },
        {
            "name": "climbing_the_curve",
            "github_id": "bfialkoff"
        },
        {
            "name": "hello-program",
            "github_id": "hello-program"
        },
        {
            "name": "Ori Tal",
            "email": "ori226@gmail.com",
            "github_id": "Ori226"
        },
        {
            "name": "peacherwu",
            "github_id": "peacherwu"
        },
        {
            "name": "Philipp Marquardt",
            "github_id": "PhilippMarquardt"
        }
    ],
    "tags": [],
    "description": "Keras implementation of RetinaNet object detection.",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/fizyr/keras-retinanet",
            "stars": 4283,
            "issues": true,
            "readme": "# Keras RetinaNet [![Build Status](https://travis-ci.org/fizyr/keras-retinanet.svg?branch=master)](https://travis-ci.org/fizyr/keras-retinanet) [![DOI](https://zenodo.org/badge/100249425.svg)](https://zenodo.org/badge/latestdoi/100249425)\n\nKeras implementation of RetinaNet object detection as described in [Focal Loss for Dense Object Detection](https://arxiv.org/abs/1708.02002)\nby Tsung-Yi Lin, Priya Goyal, Ross Girshick, Kaiming He and Piotr Doll\u00e1r.\n\n## :warning: Deprecated\n\nThis repository is deprecated in favor of the [torchvision](https://github.com/pytorch/vision/) module.\nThis project should work with keras 2.4 and tensorflow 2.3.0, newer versions might break support.\nFor more information, check [here](https://github.com/fizyr/keras-retinanet/issues/1471#issuecomment-704187205).\n\n## Installation\n\n1) Clone this repository.\n2) In the repository, execute `pip install . --user`.\n   Note that due to inconsistencies with how `tensorflow` should be installed,\n   this package does not define a dependency on `tensorflow` as it will try to install that (which at least on Arch Linux results in an incorrect installation).\n   Please make sure `tensorflow` is installed as per your systems requirements.\n3) Alternatively, you can run the code directly from the cloned  repository, however you need to run `python setup.py build_ext --inplace` to compile Cython code first.\n4) Optionally, install `pycocotools` if you want to train / test on the MS COCO dataset by running `pip install --user git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI`.\n\n## Testing\nAn example of testing the network can be seen in [this Notebook](https://github.com/delftrobotics/keras-retinanet/blob/master/examples/ResNet50RetinaNet.ipynb).\nIn general, inference of the network works as follows:\n```python\nboxes, scores, labels = model.predict_on_batch(inputs)\n```\n\nWhere `boxes` are shaped `(None, None, 4)` (for `(x1, y1, x2, y2)`), scores is shaped `(None, None)` (classification score) and labels is shaped `(None, None)` (label corresponding to the score). In all three outputs, the first dimension represents the shape and the second dimension indexes the list of detections.\n\nLoading models can be done in the following manner:\n```python\nfrom keras_retinanet.models import load_model\nmodel = load_model('/path/to/model.h5', backbone_name='resnet50')\n```\n\nExecution time on NVIDIA Pascal Titan X is roughly 75msec for an image of shape `1000x800x3`.\n\n### Converting a training model to inference model\nThe training procedure of `keras-retinanet` works with *training models*. These are stripped down versions compared to the *inference model* and only contains the layers necessary for training (regression and classification values). If you wish to do inference on a model (perform object detection on an image), you need to convert the trained model to an inference model. This is done as follows:\n\n```shell\n# Running directly from the repository:\nkeras_retinanet/bin/convert_model.py /path/to/training/model.h5 /path/to/save/inference/model.h5\n\n# Using the installed script:\nretinanet-convert-model /path/to/training/model.h5 /path/to/save/inference/model.h5\n```\n\nMost scripts (like `retinanet-evaluate`) also support converting on the fly, using the `--convert-model` argument.\n\n\n## Training\n`keras-retinanet` can be trained using [this](https://github.com/fizyr/keras-retinanet/blob/master/keras_retinanet/bin/train.py) script.\nNote that the train script uses relative imports since it is inside the `keras_retinanet` package.\nIf you want to adjust the script for your own use outside of this repository,\nyou will need to switch it to use absolute imports.\n\nIf you installed `keras-retinanet` correctly, the train script will be installed as `retinanet-train`.\nHowever, if you make local modifications to the `keras-retinanet` repository, you should run the script directly from the repository.\nThat will ensure that your local changes will be used by the train script.\n\nThe default backbone is `resnet50`. You can change this using the `--backbone=xxx` argument in the running script.\n`xxx` can be one of the backbones in resnet models (`resnet50`, `resnet101`, `resnet152`), mobilenet models (`mobilenet128_1.0`, `mobilenet128_0.75`, `mobilenet160_1.0`, etc), densenet models or vgg models. The different options are defined by each model in their corresponding python scripts (`resnet.py`, `mobilenet.py`, etc).\n\nTrained models can't be used directly for inference. To convert a trained model to an inference model, check [here](https://github.com/fizyr/keras-retinanet#converting-a-training-model-to-inference-model).\n\n### Usage\nFor training on [Pascal VOC](http://host.robots.ox.ac.uk/pascal/VOC/), run:\n```shell\n# Running directly from the repository:\nkeras_retinanet/bin/train.py pascal /path/to/VOCdevkit/VOC2007\n\n# Using the installed script:\nretinanet-train pascal /path/to/VOCdevkit/VOC2007\n```\n\nFor training on [MS COCO](http://cocodataset.org/#home), run:\n```shell\n# Running directly from the repository:\nkeras_retinanet/bin/train.py coco /path/to/MS/COCO\n\n# Using the installed script:\nretinanet-train coco /path/to/MS/COCO\n```\n\nFor training on Open Images Dataset [OID](https://storage.googleapis.com/openimages/web/index.html)\nor taking place to the [OID challenges](https://storage.googleapis.com/openimages/web/challenge.html), run:\n```shell\n# Running directly from the repository:\nkeras_retinanet/bin/train.py oid /path/to/OID\n\n# Using the installed script:\nretinanet-train oid /path/to/OID\n\n# You can also specify a list of labels if you want to train on a subset\n# by adding the argument 'labels_filter':\nkeras_retinanet/bin/train.py oid /path/to/OID --labels-filter=Helmet,Tree\n\n# You can also specify a parent label if you want to train on a branch\n# from the semantic hierarchical tree (i.e a parent and all children)\n(https://storage.googleapis.com/openimages/challenge_2018/bbox_labels_500_hierarchy_visualizer/circle.html)\n# by adding the argument 'parent-label':\nkeras_retinanet/bin/train.py oid /path/to/OID --parent-label=Boat\n```\n\n\nFor training on [KITTI](http://www.cvlibs.net/datasets/kitti/eval_object.php), run:\n```shell\n# Running directly from the repository:\nkeras_retinanet/bin/train.py kitti /path/to/KITTI\n\n# Using the installed script:\nretinanet-train kitti /path/to/KITTI\n\nIf you want to prepare the dataset you can use the following script:\nhttps://github.com/NVIDIA/DIGITS/blob/master/examples/object-detection/prepare_kitti_data.py\n```\n\n\nFor training on a [custom dataset], a CSV file can be used as a way to pass the data.\nSee below for more details on the format of these CSV files.\nTo train using your CSV, run:\n```shell\n# Running directly from the repository:\nkeras_retinanet/bin/train.py csv /path/to/csv/file/containing/annotations /path/to/csv/file/containing/classes\n\n# Using the installed script:\nretinanet-train csv /path/to/csv/file/containing/annotations /path/to/csv/file/containing/classes\n```\n\nIn general, the steps to train on your own datasets are:\n1) Create a model by calling for instance `keras_retinanet.models.backbone('resnet50').retinanet(num_classes=80)` and compile it.\n   Empirically, the following compile arguments have been found to work well:\n```python\nmodel.compile(\n    loss={\n        'regression'    : keras_retinanet.losses.smooth_l1(),\n        'classification': keras_retinanet.losses.focal()\n    },\n    optimizer=keras.optimizers.Adam(lr=1e-5, clipnorm=0.001)\n)\n```\n2) Create generators for training and testing data (an example is show in [`keras_retinanet.preprocessing.pascal_voc.PascalVocGenerator`](https://github.com/fizyr/keras-retinanet/blob/master/keras_retinanet/preprocessing/pascal_voc.py)).\n3) Use `model.fit_generator` to start training.\n\n## Pretrained models\n\nAll models can be downloaded from the [releases page](https://github.com/fizyr/keras-retinanet/releases).\n\n### MS COCO\n\nResults using the `cocoapi` are shown below (note: according to the paper, this configuration should achieve a mAP of 0.357).\n\n```\n Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.350\n Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.537\n Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.374\n Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.191\n Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.383\n Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.472\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.306\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.491\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.533\n Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.345\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.577\n Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.681\n```\n\n### Open Images Dataset\nThere are 3 RetinaNet models based on ResNet50, ResNet101 and ResNet152 trained on all [500 classes](https://github.com/ZFTurbo/Keras-RetinaNet-for-Open-Images-Challenge-2018/blob/master/a00_utils_and_constants.py#L130) of the Open Images Dataset (thanks to @ZFTurbo).\n\n| Backbone  | Image Size (px) | Small validation mAP | LB (Public) |\n| --------- | --------------- | -------------------- | ----------- |\n| ResNet50  | 768 - 1024      | 0.4594               | 0.4223      |\n| ResNet101 | 768 - 1024      | 0.4986               | 0.4520      |\n| ResNet152 | 600 - 800       | 0.4991               | 0.4651      |\n\nFor more information, check [@ZFTurbo's](https://github.com/ZFTurbo/Keras-RetinaNet-for-Open-Images-Challenge-2018) repository.\n\n## CSV datasets\nThe `CSVGenerator` provides an easy way to define your own datasets.\nIt uses two CSV files: one file containing annotations and one file containing a class name to ID mapping.\n\n### Annotations format\nThe CSV file with annotations should contain one annotation per line.\nImages with multiple bounding boxes should use one row per bounding box.\nNote that indexing for pixel values starts at 0.\nThe expected format of each line is:\n```\npath/to/image.jpg,x1,y1,x2,y2,class_name\n```\nBy default the CSV generator will look for images relative to the directory of the annotations file.\n\nSome images may not contain any labeled objects.\nTo add these images to the dataset as negative examples,\nadd an annotation where `x1`, `y1`, `x2`, `y2` and `class_name` are all empty:\n```\npath/to/image.jpg,,,,,\n```\n\nA full example:\n```\n/data/imgs/img_001.jpg,837,346,981,456,cow\n/data/imgs/img_002.jpg,215,312,279,391,cat\n/data/imgs/img_002.jpg,22,5,89,84,bird\n/data/imgs/img_003.jpg,,,,,\n```\n\nThis defines a dataset with 3 images.\n`img_001.jpg` contains a cow.\n`img_002.jpg` contains a cat and a bird.\n`img_003.jpg` contains no interesting objects/animals.\n\n\n### Class mapping format\nThe class name to ID mapping file should contain one mapping per line.\nEach line should use the following format:\n```\nclass_name,id\n```\n\nIndexing for classes starts at 0.\nDo not include a background class as it is implicit.\n\nFor example:\n```\ncow,0\ncat,1\nbird,2\n```\n\n## Anchor optimization\n\nIn some cases, the default anchor configuration is not suitable for detecting objects in your dataset, for example, if your objects are smaller than the 32x32px (size of the smallest anchors). In this case, it might be suitable to modify the anchor configuration, this can be done automatically by following the steps in the [anchor-optimization](https://github.com/martinzlocha/anchor-optimization/) repository. To use the generated configuration check [here](https://github.com/fizyr/keras-retinanet-test-data/blob/master/config/config.ini) for an example config file and then pass it to `train.py` using the `--config` parameter.\n\n## Debugging\nCreating your own dataset does not always work out of the box. There is a [`debug.py`](https://github.com/fizyr/keras-retinanet/blob/master/keras_retinanet/bin/debug.py) tool to help find the most common mistakes.\n\nParticularly helpful is the `--annotations` flag which displays your annotations on the images from your dataset. Annotations are colored in green when there are anchors available and colored in red when there are no anchors available. If an annotation doesn't have anchors available, it means it won't contribute to training. It is normal for a small amount of annotations to show up in red, but if most or all annotations are red there is cause for concern. The most common issues are that the annotations are too small or too oddly shaped (stretched out).\n\n## Results\n\n### MS COCO\n\n## Status\nExample output images using `keras-retinanet` are shown below.\n\n<p align=\"center\">\n  <img src=\"https://github.com/delftrobotics/keras-retinanet/blob/master/images/coco1.png\" alt=\"Example result of RetinaNet on MS COCO\"/>\n  <img src=\"https://github.com/delftrobotics/keras-retinanet/blob/master/images/coco2.png\" alt=\"Example result of RetinaNet on MS COCO\"/>\n  <img src=\"https://github.com/delftrobotics/keras-retinanet/blob/master/images/coco3.png\" alt=\"Example result of RetinaNet on MS COCO\"/>\n</p>\n\n### Projects using keras-retinanet\n* [Improving Apple Detection and Counting Using RetinaNet](https://github.com/nikostsagk/Apple-detection). This work aims to investigate the apple detection problem through the deployment of the Keras RetinaNet.\n* [Improving RetinaNet for CT Lesion Detection with Dense Masks from Weak RECIST Labels](https://arxiv.org/abs/1906.02283). Research project for detecting lesions in CT using keras-retinanet.\n* [NudeNet](https://github.com/bedapudi6788/NudeNet). Project that focuses on detecting and censoring of nudity.\n* [Individual tree-crown detection in RGB imagery using self-supervised deep learning neural networks](https://www.biorxiv.org/content/10.1101/532952v1). Research project focused on improving the performance of remotely sensed tree surveys.\n* [ESRI Object Detection Challenge 2019](https://github.com/kunwar31/ESRI_Object_Detection). Winning implementation of the ESRI Object Detection Challenge 2019.\n* [Lunar Rockfall Detector Project](https://ieeexplore.ieee.org/document/8587120). The aim of this project is to [map lunar rockfalls on a global scale](https://www.nature.com/articles/s41467-020-16653-3) using the available > 2 million satellite images.\n* [Mars Rockfall Detector Project](https://ieeexplore.ieee.org/document/9103997). The aim of this project is to map rockfalls on Mars.\n* [NATO Innovation Challenge](https://medium.com/data-from-the-trenches/object-detection-with-deep-learning-on-aerial-imagery-2465078db8a9). The winning team of the NATO Innovation Challenge used keras-retinanet to detect cars in aerial images ([COWC dataset](https://gdo152.llnl.gov/cowc/)).\n* [Microsoft Research for Horovod on Azure](https://blogs.technet.microsoft.com/machinelearning/2018/06/20/how-to-do-distributed-deep-learning-for-object-detection-using-horovod-on-azure/). A research project by Microsoft, using keras-retinanet to distribute training over multiple GPUs using Horovod on Azure.\n* [Anno-Mage](https://virajmavani.github.io/saiat/). A tool that helps you annotate images, using input from the keras-retinanet COCO model as suggestions.\n* [Telenav.AI](https://github.com/Telenav/Telenav.AI/tree/master/retinanet). For the detection of traffic signs using keras-retinanet.\n* [Towards Deep Placental Histology Phenotyping](https://github.com/Nellaker-group/TowardsDeepPhenotyping). This research project uses keras-retinanet for analysing the placenta at a cellular level.\n* [4k video example](https://www.youtube.com/watch?v=KYueHEMGRos). This demo shows the use of keras-retinanet on a 4k input video.\n* [boring-detector](https://github.com/lexfridman/boring-detector). I suppose not all projects need to solve life's biggest questions. This project detects the \"The Boring Company\" hats in videos.\n* [comet.ml](https://towardsdatascience.com/how-i-monitor-and-track-my-machine-learning-experiments-from-anywhere-described-in-13-tweets-ec3d0870af99). Using keras-retinanet in combination with [comet.ml](https://comet.ml) to interactively inspect and compare experiments.\n* [Weights and Biases](https://app.wandb.ai/syllogismos/keras-retinanet/reports?view=carey%2FObject%20Detection%20with%20RetinaNet). Trained keras-retinanet on coco dataset from beginning on resnet50 and resnet101 backends.\n* [Google Open Images Challenge 2018 15th place solution](https://github.com/ZFTurbo/Keras-RetinaNet-for-Open-Images-Challenge-2018). Pretrained weights for keras-retinanet based on ResNet50, ResNet101 and ResNet152 trained on open images dataset.\n* [poke.AI](https://github.com/Raghav-B/poke.AI). An experimental AI that attempts to master the 3rd Generation Pokemon games. Using keras-retinanet for in-game mapping and localization.\n* [retinanetjs](https://github.com/faustomorales/retinanetjs). A wrapper to run RetinaNet inference in the browser / Node.js. You can also take a look at the [example app](https://faustomorales.github.io/retinanetjs-example-app/).\n* [CRFNet](https://github.com/TUMFTM/CameraRadarFusionNet). This network fuses radar and camera data to perform object detection for autonomous driving applications.\n* [LogoDet](https://github.com/notAI-tech/LogoDet). Project for detecting company logos in images.\n* [AIR: Aerial Inspection RetinaNet](https://github.com/Accenture/AIR). A deep learning solution for supporting land search and rescue missions with drones.\n\n\nIf you have a project based on `keras-retinanet` and would like to have it published here, shoot me a message on Slack.\n\n### Notes\n* This repository requires Tensorflow 2.3.0 or higher.\n* This repository is [tested](https://github.com/fizyr/keras-retinanet/blob/master/.travis.yml) using OpenCV 3.4.\n* This repository is [tested](https://github.com/fizyr/keras-retinanet/blob/master/.travis.yml) using Python 2.7 and 3.6.\n\nContributions to this project are welcome.\n\n### Discussions\nFeel free to join the `#keras-retinanet` [Keras Slack](https://keras-slack-autojoin.herokuapp.com/) channel for discussions and questions.\n\n## FAQ\n* **I get the warning `UserWarning: No training configuration found in save file: the model was not compiled. Compile it manually.`, should I be worried?** This warning can safely be ignored during inference.\n* **I get the error `ValueError: not enough values to unpack (expected 3, got 2)` during inference, what to do?**. This is because you are using a train model to do inference. See https://github.com/fizyr/keras-retinanet#converting-a-training-model-to-inference-model for more information.\n* **How do I do transfer learning?** The easiest solution is to use the `--weights` argument when training. Keras will load models, even if the number of classes don't match (it will simply skip loading of weights when there is a mismatch). Run for example `retinanet-train --weights snapshots/some_coco_model.h5 pascal /path/to/pascal` to transfer weights from a COCO model to a PascalVOC training session. If your dataset is small, you can also use the `--freeze-backbone` argument to freeze the backbone layers.\n* **How do I change the number / shape of the anchors?** The train tool allows to pass a configuration file, where the anchor parameters can be adjusted. Check [here](https://github.com/fizyr/keras-retinanet-test-data/blob/master/config/config.ini) for an example config file.\n* **I get a loss of `0`, what is going on?** This mostly happens when none of the anchors \"fit\" on your objects, because they are most likely too small or elongated. You can verify this using the [debug](https://github.com/fizyr/keras-retinanet#debugging) tool.\n* **I have an older model, can I use it after an update of keras-retinanet?** This depends on what has changed. If it is a change that doesn't affect the weights then you can \"update\" models by creating a new retinanet model, loading your old weights using `model.load_weights(weights_path, by_name=True)` and saving this model. If the change has been too significant, you should retrain your model (you can try to load in the weights from your old model when starting training, this might be a better starting position than ImageNet).\n* **I get the error `ModuleNotFoundError: No module named 'keras_retinanet.utils.compute_overlap'`, how do I fix this?** Most likely you are running the code from the cloned repository. This is fine, but you need to compile some extensions for this to work (`python setup.py build_ext --inplace`).\n* **How do I train on my own dataset?** The steps to train on your dataset are roughly as follows:\n* 1. Prepare your dataset in the CSV format (a training and validation split is advised).\n* 2. Check that your dataset is correct using `retinanet-debug`.\n* 3. Train retinanet, preferably using the pretrained COCO weights (this gives a **far** better starting point, making training much quicker and accurate). You can optionally perform evaluation of your validation set during training to keep track of how well it performs (advised).\n* 4. Convert your training model to an inference model.\n* 5. Evaluate your inference model on your test or validation set.\n* 6. Profit!\n",
            "readme_url": "https://github.com/fizyr/keras-retinanet",
            "frameworks": [
                "Keras",
                "TensorFlow"
            ]
        }
    ],
    "references": [
        {
            "title": "Focal Loss for Dense Object Detection",
            "arxiv": "1708.02002",
            "year": 2017,
            "url": "http://arxiv.org/abs/1708.02002v2",
            "abstract": "The highest accuracy object detectors to date are based on a two-stage\napproach popularized by R-CNN, where a classifier is applied to a sparse set of\ncandidate object locations. In contrast, one-stage detectors that are applied\nover a regular, dense sampling of possible object locations have the potential\nto be faster and simpler, but have trailed the accuracy of two-stage detectors\nthus far. In this paper, we investigate why this is the case. We discover that\nthe extreme foreground-background class imbalance encountered during training\nof dense detectors is the central cause. We propose to address this class\nimbalance by reshaping the standard cross entropy loss such that it\ndown-weights the loss assigned to well-classified examples. Our novel Focal\nLoss focuses training on a sparse set of hard examples and prevents the vast\nnumber of easy negatives from overwhelming the detector during training. To\nevaluate the effectiveness of our loss, we design and train a simple dense\ndetector we call RetinaNet. Our results show that when trained with the focal\nloss, RetinaNet is able to match the speed of previous one-stage detectors\nwhile surpassing the accuracy of all existing state-of-the-art two-stage\ndetectors. Code is at: https://github.com/facebookresearch/Detectron.",
            "authors": [
                "Tsung-Yi Lin",
                "Priya Goyal",
                "Ross Girshick",
                "Kaiming He",
                "Piotr Doll\u00e1r"
            ]
        },
        {
            "title": "Improving RetinaNet for CT Lesion Detection with Dense Masks from Weak RECIST Labels",
            "arxiv": "1906.02283",
            "year": 2019,
            "url": "http://arxiv.org/abs/1906.02283v1",
            "abstract": "Accurate, automated lesion detection in Computed Tomography (CT) is an\nimportant yet challenging task due to the large variation of lesion types,\nsizes, locations and appearances. Recent work on CT lesion detection employs\ntwo-stage region proposal based methods trained with centroid or bounding-box\nannotations. We propose a highly accurate and efficient one-stage lesion\ndetector, by re-designing a RetinaNet to meet the particular challenges in\nmedical imaging. Specifically, we optimize the anchor configurations using a\ndifferential evolution search algorithm. For training, we leverage the response\nevaluation criteria in solid tumors (RECIST) annotation which are measured in\nclinical routine. We incorporate dense masks from weak RECIST labels, obtained\nautomatically using GrabCut, into the training objective, which in combination\nwith other advancements yields new state-of-the-art performance. We evaluate\nour method on the public DeepLesion benchmark, consisting of 32,735 lesions\nacross the body. Our one-stage detector achieves a sensitivity of 90.77% at 4\nfalse positives per image, significantly outperforming the best reported\nmethods by over 5%.",
            "authors": [
                "Martin Zlocha",
                "Qi Dou",
                "Ben Glocker"
            ]
        },
        {
            "title": "Improving Apple Detection and Counting Using RetinaNet",
            "url": "https://github.com/nikostsagk/Apple-detection"
        },
        {
            "title": "NudeNet",
            "url": "https://github.com/bedapudi6788/NudeNet"
        },
        {
            "title": "Individual tree-crown detection in RGB imagery using self-supervised deep learning neural networks",
            "url": "https://www.biorxiv.org/content/10.1101/532952v1"
        },
        {
            "title": "ESRI Object Detection Challenge 2019",
            "url": "https://github.com/kunwar31/ESRI_Object_Detection"
        },
        {
            "title": "Lunar Rockfall Detector Project",
            "url": "https://ieeexplore.ieee.org/document/8587120"
        },
        {
            "title": "Mars Rockfall Detector Project",
            "url": "https://ieeexplore.ieee.org/document/9103997"
        },
        {
            "title": "NATO Innovation Challenge",
            "url": "https://medium.com/data-from-the-trenches/object-detection-with-deep-learning-on-aerial-imagery-2465078db8a9"
        },
        {
            "title": "Microsoft Research for Horovod on Azure",
            "url": "https://blogs.technet.microsoft.com/machinelearning/2018/06/20/how-to-do-distributed-deep-learning-for-object-detection-using-horovod-on-azure/"
        },
        {
            "title": "Anno-Mage",
            "url": "https://virajmavani.github.io/saiat/"
        },
        {
            "title": "Telenav.AI",
            "url": "https://github.com/Telenav/Telenav.AI/tree/master/retinanet"
        },
        {
            "title": "Towards Deep Placental Histology Phenotyping",
            "url": "https://github.com/Nellaker-group/TowardsDeepPhenotyping"
        },
        {
            "title": "4k video example",
            "url": "https://www.youtube.com/watch?v=KYueHEMGRos"
        },
        {
            "title": "boring-detector",
            "url": "https://github.com/lexfridman/boring-detector"
        },
        {
            "title": "comet.ml",
            "url": "https://towardsdatascience.com/how-i-monitor-and-track-my-machine-learning-experiments-from-anywhere-described-in-13-tweets-ec3d0870af99"
        },
        {
            "title": "Google Open Images Challenge 2018 15th place solution",
            "url": "https://github.com/ZFTurbo/Keras-RetinaNet-for-Open-Images-Challenge-2018"
        },
        {
            "title": "poke.AI",
            "url": "https://github.com/Raghav-B/poke.AI"
        },
        {
            "title": "retinanetjs",
            "url": "https://github.com/faustomorales/retinanetjs"
        },
        {
            "title": "CRFNet",
            "url": "https://github.com/TUMFTM/CameraRadarFusionNet"
        },
        {
            "title": "LogoDet",
            "url": "https://github.com/notAI-tech/LogoDet"
        },
        {
            "title": "AIR: Aerial Inspection RetinaNet",
            "url": "https://github.com/Accenture/AIR"
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "COWC dataset",
                "connection": {
                    "name": "url",
                    "source": {
                        "url": "https://gdo152.llnl.gov/cowc/"
                    }
                }
            },
            {
                "name": "Company*"
            },
            {
                "name": "COCO"
            },
            {
                "name": "ImageNet"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9999863924356569,
        "task": "Object Detection",
        "task_prob": 0.9892395411265745
    }
}