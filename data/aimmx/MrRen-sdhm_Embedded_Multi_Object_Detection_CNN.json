{
    "visibility": {
        "visibility": "public"
    },
    "name": "Multi-object detection by lightweight CNN on embedded system.",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "MrRen-sdhm",
                "owner_type": "User",
                "name": "Embedded_Multi_Object_Detection_CNN",
                "url": "https://github.com/MrRen-sdhm/Embedded_Multi_Object_Detection_CNN",
                "stars": 6,
                "pushed_at": "2018-08-04 14:36:32+00:00",
                "created_at": "2018-08-04 02:23:30+00:00",
                "language": "Python",
                "description": "Multi-object detection by lightweight CNN on embedded system",
                "frameworks": [
                    "Caffe"
                ]
            },
            {
                "type": "code",
                "name": "custom settings for caffe on PC",
                "sha": "e142a90c02df4f2e52432b4e90978a178d00c7d8",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/MrRen-sdhm/Embedded_Multi_Object_Detection_CNN/tree/master/custom settings for caffe on PC"
                    }
                },
                "num_files": 6
            },
            {
                "type": "code",
                "name": "model call scripts on raspberry",
                "sha": "d05bc25f1b96a36dba70a5388b40955496dd3ebb",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/MrRen-sdhm/Embedded_Multi_Object_Detection_CNN/tree/master/model call scripts on raspberry"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "movidius usage method",
                "sha": "65ff51fd7790c68d20045104c4f0d13c632de661",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/MrRen-sdhm/Embedded_Multi_Object_Detection_CNN/tree/master/movidius usage method"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "scripts for custom dataset create",
                "sha": "13406b3569ea1247e9a32c24a5063de9de4b2e46",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/MrRen-sdhm/Embedded_Multi_Object_Detection_CNN/tree/master/scripts for custom dataset create"
                    }
                },
                "num_files": 16
            },
            {
                "type": "code",
                "name": "training folder for caffe on PC",
                "sha": "01b08f8b4dce982f948bd1bcabfc43b5fc5f89fd",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/MrRen-sdhm/Embedded_Multi_Object_Detection_CNN/tree/master/training folder for caffe on PC"
                    }
                },
                "num_files": 6
            }
        ]
    },
    "authors": [
        {
            "name": "MrRen-sdhm",
            "github_id": "MrRen-sdhm"
        }
    ],
    "tags": [],
    "description": "Multi-object detection by lightweight CNN on embedded system",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/MrRen-sdhm/Embedded_Multi_Object_Detection_CNN",
            "stars": 6,
            "issues": true,
            "readme": "## Multi-object detection by lightweight CNN on embedded system.\n\n#### Project abstract:\n\n1. I mainly use those lightweight CNNs to detect hand pose on raspberry pi, but they can detect other objects easily too.\n2. Some lightweight CNNs In the table below are reference to github project and I improved them, and others are reference to some papers.\n3. I have created some scripts to generate voc formate dataset for caffe, it help me to extend dataset fast.\n\n\n\n| Lightweight CNNs | note                 | Supported System    |\n| ---------------- | -------------------- | ------------------- |\n| MobileNet-SSD    | Improved             | Ubuntu and Raspbian |\n| MobileNetV2-SSD  | Haven't improved yet | Ubuntu              |\n| SqueezeNet-SSD   | Significant improved | Ubuntu and Raspbian |\n| ShuffleNet-SSD   | Improved             | Ubuntu with cuda    |\n| Tiny-SSD         | Poor performance     | Ubuntu and Raspbian |\n\n\n\n- **Platform:** \n  - Training: Ubuntu\n  - Application: Raspbian\n\n\n\n- **CNN Framwork:** Caffe\n\n\n\n- **Dependencies:** Opencv\n\n\n\n- **Reference CNN:**\n\n  - SSD: \n    - Paper: https://arxiv.org/pdf/1512.02325.pdf\n    - Github: https://github.com/weiliu89/caffe/tree/ssd\n  - MobileNet:\n    - Paper: https://arxiv.org/pdf/1704.04861.pdf\n    - Github: https://github.com/tensorflow/models/tree/master/research/slim/nets\n  - MobileNetV2:\n    - Paper: https://128.84.21.199/pdf/1801.04381.pdf\n    - Github: https://github.com/tensorflow/models/tree/master/research/slim/nets/mobilenet\n    - Blog: https://ai.googleblog.com/2018/04/mobilenetv2-next-generation-of-on.html\n  - SqueezeNet:\n    - Paper: https://arxiv.org/pdf/1602.07360.pdf\n    - Code: https://github.com/DeepScale/SqueezeNet\n  - ShuffleNet:\n    - Paper: https://arxiv.org/pdf/1707.01083.pdf\n    - Code: https://github.com/farmingyard/ShuffleNet ; https://github.com/MG2033/ShuffleNet\n\n  \n\n- **Reference github:**\n\n  - https://github.com/weiliu89/caffe\n  - https://github.com/chuanqi305/MobileNet-SSD\n  - https://github.com/chuanqi305/MobileNetv2-SSDLite\n  - https://github.com/chuanqi305/SqueezeNet-SSD\n\n\n\n\n\n\n\n",
            "readme_url": "https://github.com/MrRen-sdhm/Embedded_Multi_Object_Detection_CNN",
            "frameworks": [
                "Caffe"
            ]
        }
    ],
    "references": [
        {
            "title": "SqueezeNet: AlexNet-level accuracy with 50x fewer parameters and <0.5MB model size",
            "arxiv": "1602.07360",
            "year": 2016,
            "url": "http://arxiv.org/abs/1602.07360v4",
            "abstract": "Recent research on deep neural networks has focused primarily on improving\naccuracy. For a given accuracy level, it is typically possible to identify\nmultiple DNN architectures that achieve that accuracy level. With equivalent\naccuracy, smaller DNN architectures offer at least three advantages: (1)\nSmaller DNNs require less communication across servers during distributed\ntraining. (2) Smaller DNNs require less bandwidth to export a new model from\nthe cloud to an autonomous car. (3) Smaller DNNs are more feasible to deploy on\nFPGAs and other hardware with limited memory. To provide all of these\nadvantages, we propose a small DNN architecture called SqueezeNet. SqueezeNet\nachieves AlexNet-level accuracy on ImageNet with 50x fewer parameters.\nAdditionally, with model compression techniques we are able to compress\nSqueezeNet to less than 0.5MB (510x smaller than AlexNet).\n  The SqueezeNet architecture is available for download here:\nhttps://github.com/DeepScale/SqueezeNet",
            "authors": [
                "Forrest N. Iandola",
                "Song Han",
                "Matthew W. Moskewicz",
                "Khalid Ashraf",
                "William J. Dally",
                "Kurt Keutzer"
            ]
        },
        {
            "title": "SSD: Single Shot MultiBox Detector",
            "arxiv": "1512.02325",
            "year": 2015,
            "url": "http://arxiv.org/abs/1512.02325v5",
            "abstract": "We present a method for detecting objects in images using a single deep\nneural network. Our approach, named SSD, discretizes the output space of\nbounding boxes into a set of default boxes over different aspect ratios and\nscales per feature map location. At prediction time, the network generates\nscores for the presence of each object category in each default box and\nproduces adjustments to the box to better match the object shape. Additionally,\nthe network combines predictions from multiple feature maps with different\nresolutions to naturally handle objects of various sizes. Our SSD model is\nsimple relative to methods that require object proposals because it completely\neliminates proposal generation and subsequent pixel or feature resampling stage\nand encapsulates all computation in a single network. This makes SSD easy to\ntrain and straightforward to integrate into systems that require a detection\ncomponent. Experimental results on the PASCAL VOC, MS COCO, and ILSVRC datasets\nconfirm that SSD has comparable accuracy to methods that utilize an additional\nobject proposal step and is much faster, while providing a unified framework\nfor both training and inference. Compared to other single stage methods, SSD\nhas much better accuracy, even with a smaller input image size. For $300\\times\n300$ input, SSD achieves 72.1% mAP on VOC2007 test at 58 FPS on a Nvidia Titan\nX and for $500\\times 500$ input, SSD achieves 75.1% mAP, outperforming a\ncomparable state of the art Faster R-CNN model. Code is available at\nhttps://github.com/weiliu89/caffe/tree/ssd .",
            "authors": [
                "Wei Liu",
                "Dragomir Anguelov",
                "Dumitru Erhan",
                "Christian Szegedy",
                "Scott Reed",
                "Cheng-Yang Fu",
                "Alexander C. Berg"
            ]
        },
        {
            "title": "ShuffleNet: An Extremely Efficient Convolutional Neural Network for Mobile Devices",
            "arxiv": "1707.01083",
            "year": 2017,
            "url": "http://arxiv.org/abs/1707.01083v2",
            "abstract": "We introduce an extremely computation-efficient CNN architecture named\nShuffleNet, which is designed specially for mobile devices with very limited\ncomputing power (e.g., 10-150 MFLOPs). The new architecture utilizes two new\noperations, pointwise group convolution and channel shuffle, to greatly reduce\ncomputation cost while maintaining accuracy. Experiments on ImageNet\nclassification and MS COCO object detection demonstrate the superior\nperformance of ShuffleNet over other structures, e.g. lower top-1 error\n(absolute 7.8%) than recent MobileNet on ImageNet classification task, under\nthe computation budget of 40 MFLOPs. On an ARM-based mobile device, ShuffleNet\nachieves ~13x actual speedup over AlexNet while maintaining comparable\naccuracy.",
            "authors": [
                "Xiangyu Zhang",
                "Xinyu Zhou",
                "Mengxiao Lin",
                "Jian Sun"
            ]
        },
        {
            "title": "MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications",
            "arxiv": "1704.04861",
            "year": 2017,
            "url": "http://arxiv.org/abs/1704.04861v1",
            "abstract": "We present a class of efficient models called MobileNets for mobile and\nembedded vision applications. MobileNets are based on a streamlined\narchitecture that uses depth-wise separable convolutions to build light weight\ndeep neural networks. We introduce two simple global hyper-parameters that\nefficiently trade off between latency and accuracy. These hyper-parameters\nallow the model builder to choose the right sized model for their application\nbased on the constraints of the problem. We present extensive experiments on\nresource and accuracy tradeoffs and show strong performance compared to other\npopular models on ImageNet classification. We then demonstrate the\neffectiveness of MobileNets across a wide range of applications and use cases\nincluding object detection, finegrain classification, face attributes and large\nscale geo-localization.",
            "authors": [
                "Andrew G. Howard",
                "Menglong Zhu",
                "Bo Chen",
                "Dmitry Kalenichenko",
                "Weijun Wang",
                "Tobias Weyand",
                "Marco Andreetto",
                "Hartwig Adam"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9999343766779589,
        "task": "Image Classification",
        "task_prob": 0.8588790459753906
    },
    "training": {
        "datasets": [
            {
                "name": "ImageNet"
            },
            {
                "name": "COCO"
            }
        ]
    }
}