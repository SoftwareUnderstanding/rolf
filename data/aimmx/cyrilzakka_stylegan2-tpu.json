{
    "visibility": {
        "visibility": "public",
        "license": "Other"
    },
    "name": "StyleGAN2 &mdash; Official TensorFlow Implementation",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "cyrilzakka",
                "owner_type": "User",
                "name": "stylegan2-tpu",
                "url": "https://github.com/cyrilzakka/stylegan2-tpu",
                "stars": 28,
                "pushed_at": "2022-03-12 00:29:17+00:00",
                "created_at": "2020-05-14 18:50:06+00:00",
                "language": "Python",
                "description": "StyleGAN2 but rewritten for TPUs.",
                "license": "Other",
                "frameworks": [
                    "TensorFlow",
                    "Keras",
                    "scikit-learn",
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": ".DS_Store",
                "sha": "c0b42672dcfb78a40606af549f844cec92a7c8be",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/.DS_Store"
                    }
                },
                "size": 8196
            },
            {
                "type": "code",
                "name": "LICENSE.txt",
                "sha": "d7e85075defbd96f9e7a9d756aa7db0e7e30ccf7",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/LICENSE.txt"
                    }
                },
                "size": 4767
            },
            {
                "type": "code",
                "name": "align_mammos.py",
                "sha": "4938205e1773117953d8d3ed88075edbb26713d1",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/align_mammos.py"
                    }
                },
                "size": 1419
            },
            {
                "type": "code",
                "name": "convert_ckpt_to_pkl.py",
                "sha": "465c9a338fe109688ded8b0d803244ed8399966b",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/convert_ckpt_to_pkl.py"
                    }
                },
                "size": 1673
            },
            {
                "type": "code",
                "name": "convert_pkl_to_ckpt.py",
                "sha": "4898fd4c13fb5afd555a5b5ed35895b77b375bbe",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/convert_pkl_to_ckpt.py"
                    }
                },
                "size": 1468
            },
            {
                "type": "code",
                "name": "dataset_tool.py",
                "sha": "e18123608d1967a883e5116010ecaf31236e661b",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/dataset_tool.py"
                    }
                },
                "size": 31413
            },
            {
                "type": "code",
                "name": "dnnlib",
                "sha": "e664e5bf06c51b5705d696590c9ae6382c63be9c",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/tree/master/dnnlib"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "docs",
                "sha": "4650dda812600fbda19d7704a0c1d12752a28dbe",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/tree/master/docs"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "encoder",
                "sha": "20a5063bcad170e35f7302d07d1f07e5cf016767",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/tree/master/encoder"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "ext.l",
                "sha": "f246165a56ac6a8d6db0a1bb5353e3959752770c",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/ext.l"
                    }
                },
                "size": 8755
            },
            {
                "type": "code",
                "name": "mammos.py",
                "sha": "0e946db62fd87e3d02e03a73075e90dab3edcd96",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/mammos.py"
                    }
                },
                "size": 4745
            },
            {
                "type": "code",
                "name": "metrics",
                "sha": "64e6ab4baca9cebbec471a4de309d6ced3efa608",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/tree/master/metrics"
                    }
                },
                "num_files": 8
            },
            {
                "type": "code",
                "name": "prepare_image.py",
                "sha": "6b458cc646b08c05a510532d99a7c2e9a5848163",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/prepare_image.py"
                    }
                },
                "size": 18842
            },
            {
                "type": "code",
                "name": "pretrained_networks.py",
                "sha": "40ccfd9eb70417149dd7e8ee77735b26c2f919d5",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/pretrained_networks.py"
                    }
                },
                "size": 7665
            },
            {
                "type": "code",
                "name": "projector.py",
                "sha": "cd1d82a76e11ab3d0b7205e134a0410b06897e0e",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/projector.py"
                    }
                },
                "size": 8984
            },
            {
                "type": "code",
                "name": "random_crops.py",
                "sha": "74780dbbad221d947980f78d060956eb1a34d9e2",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/random_crops.py"
                    }
                },
                "size": 1402
            },
            {
                "type": "code",
                "name": "repl.l",
                "sha": "afe30c7a8af285fd341d6eba58d15e57f7f10849",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/repl.l"
                    }
                },
                "size": 18711
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "9f25211ed4bd14deff806836a3357c9fa26bc645",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/requirements.txt"
                    }
                },
                "size": 485
            },
            {
                "type": "code",
                "name": "run_generator.py",
                "sha": "2f154143fa3755551212f8d953b1af76c801b56a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/run_generator.py"
                    }
                },
                "size": 8239
            },
            {
                "type": "code",
                "name": "run_metrics.py",
                "sha": "5043b100faf3f58273cdf00239611d950962324c",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/run_metrics.py"
                    }
                },
                "size": 3447
            },
            {
                "type": "code",
                "name": "run_projector.py",
                "sha": "bf18bd7348c469451dab7e720f43417b97cc7930",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/run_projector.py"
                    }
                },
                "size": 6957
            },
            {
                "type": "code",
                "name": "run_training.py",
                "sha": "0e9432a045012173297ea0d6ba8da7829636b137",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/run_training.py"
                    }
                },
                "size": 9717
            },
            {
                "type": "code",
                "name": "test_nvcc.cu",
                "sha": "8b4804120cc3fe71de8f643edeebe3989645feac",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/test_nvcc.cu"
                    }
                },
                "size": 715
            },
            {
                "type": "code",
                "name": "tflex.py",
                "sha": "629b1f9de26c6c8a93268f249280181df42400c6",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/tflex.py"
                    }
                },
                "size": 28888
            },
            {
                "type": "code",
                "name": "tflex_test.py",
                "sha": "aedf8802a0ef6e42421fe4cd33b697d0aacecdf8",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/tflex_test.py"
                    }
                },
                "size": 1843
            },
            {
                "type": "code",
                "name": "train_tpu.sh",
                "sha": "15239aa4e20738b45374e688077b5833b4981e58",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/train_tpu.sh"
                    }
                },
                "size": 727
            },
            {
                "type": "code",
                "name": "training",
                "sha": "440bcc582dc3f8fd9e0a1c686eb7e9b6a2a25065",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/tree/master/training"
                    }
                },
                "num_files": 9
            },
            {
                "type": "code",
                "name": "view.py",
                "sha": "0bbae3138fc949e7d1e057398109c63f3a4f6c4e",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/view.py"
                    }
                },
                "size": 7338
            }
        ]
    },
    "trained_model": {
        "binaries": [
            {
                "type": "binary",
                "name": "Dockerfile",
                "sha": "ab45a553e0d49878585054e690aba74f2ca939ff",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/cyrilzakka/stylegan2-tpu/blob/master/Dockerfile"
                    }
                },
                "size": 362
            }
        ]
    },
    "authors": [
        {
            "name": "Cyril Zakka",
            "github_id": "cyrilzakka"
        },
        {
            "name": "dependabot[bot]",
            "github_id": "dependabot[bot]"
        }
    ],
    "tags": [
        "deep-learning",
        "tensorflow"
    ],
    "description": "StyleGAN2 but rewritten for TPUs.",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/cyrilzakka/stylegan2-tpu",
            "stars": 28,
            "issues": true,
            "readme": "## StyleGAN2 &mdash; Official TensorFlow Implementation\n\n![Teaser image](./docs/stylegan2-teaser-1024x256.png)\n\n**Analyzing and Improving the Image Quality of StyleGAN**<br>\nTero Karras, Samuli Laine, Miika Aittala, Janne Hellsten, Jaakko Lehtinen, Timo Aila<br>\n\nPaper: http://arxiv.org/abs/1912.04958<br>\nVideo: https://youtu.be/c-NJtV9Jvp0<br>\n\nAbstract: *The style-based GAN architecture (StyleGAN) yields state-of-the-art results in data-driven unconditional generative image modeling. We expose and analyze several of its characteristic artifacts, and propose changes in both model architecture and training methods to address them. In particular, we redesign generator normalization, revisit progressive growing, and regularize the generator to encourage good conditioning in the mapping from latent vectors to images. In addition to improving image quality, this path length regularizer yields the additional benefit that the generator becomes significantly easier to invert. This makes it possible to reliably detect if an image is generated by a particular network. We furthermore visualize how well the generator utilizes its output resolution, and identify a capacity problem, motivating us to train larger models for additional quality improvements. Overall, our improved model redefines the state of the art in unconditional image modeling, both in terms of existing distribution quality metrics as well as perceived image quality.*\n\nFor business inquiries, please contact [researchinquiries@nvidia.com](mailto:researchinquiries@nvidia.com)<br>\nFor press and other inquiries, please contact Hector Marinez at [hmarinez@nvidia.com](mailto:hmarinez@nvidia.com)<br>\n\n| Additional material | &nbsp;\n| :--- | :----------\n| [StyleGAN2](https://drive.google.com/open?id=1QHc-yF5C3DChRwSdZKcx1w6K8JvSxQi7) | Main Google Drive folder\n| &boxvr;&nbsp; [stylegan2-paper.pdf](https://drive.google.com/open?id=1fnF-QsiQeKaxF-HbvFiGtzHF_Bf3CzJu) | High-quality version of the paper\n| &boxvr;&nbsp; [stylegan2-video.mp4](https://drive.google.com/open?id=1f_gbKW6FUUHKkUxciJ_lQx29mCq_fSBy) | High-quality version of the video\n| &boxvr;&nbsp; [images](https://drive.google.com/open?id=1Sak157_DLX84ytqHHqZaH_59HoEWzfB7) | Example images produced using our method\n| &boxv;&nbsp; &boxvr;&nbsp;  [curated-images](https://drive.google.com/open?id=1ydWb8xCHzDKMTW9kQ7sL-B1R0zATHVHp) | Hand-picked images showcasing our results\n| &boxv;&nbsp; &boxur;&nbsp;  [100k-generated-images](https://drive.google.com/open?id=1BA2OZ1GshdfFZGYZPob5QWOGBuJCdu5q) | Random images with and without truncation\n| &boxvr;&nbsp; [videos](https://drive.google.com/open?id=1yXDV96SFXoUiZKU7AyE6DyKgDpIk4wUZ) | Individual clips of the video as high-quality MP4\n| &boxur;&nbsp; [networks](https://drive.google.com/open?id=1yanUI9m4b4PWzR0eurKNq6JR1Bbfbh6L) | Pre-trained networks\n| &ensp;&ensp; &boxvr;&nbsp;  [stylegan2-ffhq-config-f.pkl](https://drive.google.com/open?id=1Mgh-jglZjgksupF0XLl0KzuOqd1LXcoE) | StyleGAN2 for <span style=\"font-variant:small-caps\">FFHQ</span> dataset at 1024&times;1024\n| &ensp;&ensp; &boxvr;&nbsp;  [stylegan2-car-config-f.pkl](https://drive.google.com/open?id=1MutzVf8XjNo6TUg03a6CUU_2Vlc0ltbV) | StyleGAN2 for <span style=\"font-variant:small-caps\">LSUN Car</span> dataset at 512&times;384\n| &ensp;&ensp; &boxvr;&nbsp;  [stylegan2-cat-config-f.pkl](https://drive.google.com/open?id=1MyowTZGvMDJCWuT7Yg2e_GnTLIzcSPCy) | StyleGAN2 for <span style=\"font-variant:small-caps\">LSUN Cat</span> dataset at 256&times;256\n| &ensp;&ensp; &boxvr;&nbsp;  [stylegan2-church-config-f.pkl](https://drive.google.com/open?id=1N3iaujGpwa6vmKCqRSHcD6GZ2HVV8h1f) | StyleGAN2 for <span style=\"font-variant:small-caps\">LSUN Church</span> dataset at 256&times;256\n| &ensp;&ensp; &boxvr;&nbsp;  [stylegan2-horse-config-f.pkl](https://drive.google.com/open?id=1N55ZtBhEyEbDn6uKBjCNAew1phD5ZAh-) | StyleGAN2 for <span style=\"font-variant:small-caps\">LSUN Horse</span> dataset at 256&times;256\n| &ensp;&ensp; &boxur;&nbsp;&#x22ef;  | Other training configurations used in the paper\n\n## Requirements\n\n* Both Linux and Windows are supported. Linux is recommended for performance and compatibility reasons.\n* 64-bit Python 3.6 installation. We recommend Anaconda3 with numpy 1.14.3 or newer.\n* TensorFlow 1.14 or 1.15 with GPU support. The code does not support TensorFlow 2.0.\n* On Windows, you need to use TensorFlow 1.14 &mdash; TensorFlow 1.15 will not work.\n* One or more high-end NVIDIA GPUs, NVIDIA drivers, CUDA 10.0 toolkit and cuDNN 7.5. To reproduce the results reported in the paper, you need an NVIDIA GPU with at least 16 GB of DRAM.\n* Docker users: use the [provided Dockerfile](./Dockerfile) to build an image with the required library dependencies.\n\nStyleGAN2 relies on custom TensorFlow ops that are compiled on the fly using [NVCC](https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html). To test that your NVCC installation is working correctly, run:\n\n```.bash\nnvcc test_nvcc.cu -o test_nvcc -run\n| CPU says hello.\n| GPU says hello.\n```\n\nOn Windows, the compilation requires Microsoft Visual Studio to be in `PATH`. We recommend installing [Visual Studio Community Edition](https://visualstudio.microsoft.com/vs/) and adding into `PATH` using `\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"`.\n\n## Preparing datasets\n\nDatasets are stored as multi-resolution TFRecords, similar to the [original StyleGAN](https://github.com/NVlabs/stylegan). Each dataset consists of multiple `*.tfrecords` files stored under a common directory, e.g., `~/datasets/ffhq/ffhq-r*.tfrecords`. In the following sections, the datasets are referenced using a combination of `--dataset` and `--data-dir` arguments, e.g., `--dataset=ffhq --data-dir=~/datasets`.\n\n**FFHQ**. To download the [Flickr-Faces-HQ](https://github.com/NVlabs/ffhq-dataset) dataset as multi-resolution TFRecords, run:\n\n```.bash\npushd ~\ngit clone https://github.com/NVlabs/ffhq-dataset.git\ncd ffhq-dataset\npython download_ffhq.py --tfrecords\npopd\npython dataset_tool.py display ~/ffhq-dataset/tfrecords/ffhq\n```\n\n**LSUN**. Download the desired LSUN categories in LMDB format from the [LSUN project page](https://www.yf.io/p/lsun). To convert the data to multi-resolution TFRecords, run:\n\n```.bash\npython dataset_tool.py create_lsun_wide ~/datasets/car ~/lsun/car_lmdb --width=512 --height=384\npython dataset_tool.py create_lsun ~/datasets/cat ~/lsun/cat_lmdb --resolution=256\npython dataset_tool.py create_lsun ~/datasets/church ~/lsun/church_outdoor_train_lmdb --resolution=256\npython dataset_tool.py create_lsun ~/datasets/horse ~/lsun/horse_lmdb --resolution=256\n```\n\n**Custom**. Create custom datasets by placing all training images under a single directory. The images must be square-shaped and they must all have the same power-of-two dimensions. To convert the images to multi-resolution TFRecords, run:\n\n```.bash\npython dataset_tool.py create_from_images ~/datasets/my-custom-dataset ~/my-custom-images\npython dataset_tool.py display ~/datasets/my-custom-dataset\n```\n\n## Using pre-trained networks\n\nPre-trained networks are stored as `*.pkl` files on the [StyleGAN2 Google Drive folder](https://drive.google.com/open?id=1QHc-yF5C3DChRwSdZKcx1w6K8JvSxQi7). Below, you can either reference them directly using the syntax `gdrive:networks/<filename>.pkl`, or download them manually and reference by filename.\n\n**Generating images**:\n\n```.bash\n# Generate uncurated ffhq images (matches paper Figure 12)\npython run_generator.py generate-images --network=gdrive:networks/stylegan2-ffhq-config-f.pkl \\\n  --seeds=6600-6625 --truncation-psi=0.5\n\n# Generate curated ffhq images (matches paper Figure 11)\npython run_generator.py generate-images --network=gdrive:networks/stylegan2-ffhq-config-f.pkl \\\n  --seeds=66,230,389,1518 --truncation-psi=1.0\n\n# Generate uncurated car images\npython run_generator.py generate-images --network=gdrive:networks/stylegan2-car-config-f.pkl \\\n  --seeds=6000-6025 --truncation-psi=0.5\n\n# Example of style mixing (matches the corresponding video clip)\npython run_generator.py style-mixing-example --network=gdrive:networks/stylegan2-ffhq-config-f.pkl \\\n  --row-seeds=85,100,75,458,1500 --col-seeds=55,821,1789,293 --truncation-psi=1.0\n```\n\nThe results are placed in `results/<RUNNING_ID>/*.png`. You can change the location with `--result-dir`. For example, `--result-dir=~/my-stylegan2-results`.\n\n**Projecting images to latent space**:\n\n```.bash\n# Project generated images\npython run_projector.py project-generated-images --network=gdrive:networks/stylegan2-car-config-f.pkl \\\n  --seeds=0,1,5\n\n# Project real images\npython run_projector.py project-real-images --network=gdrive:networks/stylegan2-car-config-f.pkl \\\n  --dataset=car --data-dir=~/datasets\n```\n\nYou can import the networks in your own Python code using `pickle.load()`. For this to work, you need to include the `dnnlib` source directory in `PYTHONPATH` and create a default TensorFlow session by calling `dnnlib.tflib.init_tf()`. See [run_generator.py](./run_generator.py) and [pretrained_networks.py](./pretrained_networks.py) for examples.\n\n## Training networks\n\nTo reproduce the training runs for config F in Tables 1 and 3, run:\n\n```.bash\npython run_training.py --num-gpus=8 --data-dir=~/datasets --config=config-f \\\n  --dataset=ffhq --mirror-augment=true\npython run_training.py --num-gpus=8 --data-dir=~/datasets --config=config-f \\\n  --dataset=car --total-kimg=57000\npython run_training.py --num-gpus=8 --data-dir=~/datasets --config=config-f \\\n  --dataset=cat --total-kimg=88000\npython run_training.py --num-gpus=8 --data-dir=~/datasets --config=config-f \\\n  --dataset=church --total-kimg 88000 --gamma=100\npython run_training.py --num-gpus=8 --data-dir=~/datasets --config=config-f \\\n  --dataset=horse --total-kimg 100000 --gamma=100\n```\n\nFor other configurations, see `python run_training.py --help`.\n\nWe have verified that the results match the paper when training with 1, 2, 4, or 8 GPUs. Note that training FFHQ at 1024&times;1024 resolution requires GPU(s) with at least 16 GB of memory. The following table lists typical training times using NVIDIA DGX-1 with 8 Tesla V100 GPUs:\n\n| Configuration | Resolution      | Total kimg | 1 GPU   | 2 GPUs  | 4 GPUs  | 8 GPUs | GPU mem |\n| :------------ | :-------------: | :--------: | :-----: | :-----: | :-----: | :----: | :-----: |\n| `config-f`    | 1024&times;1024 | 25000      | 69d 23h | 36d 4h  | 18d 14h | 9d 18h | 13.3 GB |\n| `config-f`    | 1024&times;1024 | 10000      | 27d 23h | 14d 11h | 7d 10h  | 3d 22h | 13.3 GB |\n| `config-e`    | 1024&times;1024 | 25000      | 35d 11h | 18d 15h | 9d 15h  | 5d 6h  | 8.6 GB  |\n| `config-e`    | 1024&times;1024 | 10000      | 14d 4h  | 7d 11h  | 3d 20h  | 2d 3h  | 8.6 GB  |\n| `config-f`    | 256&times;256   | 25000      | 32d 13h | 16d 23h | 8d 21h  | 4d 18h | 6.4 GB  |\n| `config-f`    | 256&times;256   | 10000      | 13d 0h  | 6d 19h  | 3d 13h  | 1d 22h | 6.4 GB  |\n\nTraining curves for FFHQ config F (StyleGAN2) compared to original StyleGAN using 8 GPUs:\n\n![Training curves](./docs/stylegan2-training-curves.png)\n\nAfter training, the resulting networks can be used the same way as the official pre-trained networks:\n\n```.bash\n# Generate 1000 random images without truncation\npython run_generator.py generate-images --seeds=0-999 --truncation-psi=1.0 \\\n  --network=results/00006-stylegan2-ffhq-8gpu-config-f/networks-final.pkl\n```\n\n## Evaluation metrics\n\nTo reproduce the numbers for config F in Tables 1 and 3, run:\n\n```.bash\npython run_metrics.py --data-dir=~/datasets --network=gdrive:networks/stylegan2-ffhq-config-f.pkl \\\n  --metrics=fid50k,ppl_wend --dataset=ffhq --mirror-augment=true\npython run_metrics.py --data-dir=~/datasets --network=gdrive:networks/stylegan2-car-config-f.pkl \\\n  --metrics=fid50k,ppl2_wend --dataset=car\npython run_metrics.py --data-dir=~/datasets --network=gdrive:networks/stylegan2-cat-config-f.pkl \\\n  --metrics=fid50k,ppl2_wend --dataset=cat\npython run_metrics.py --data-dir=~/datasets --network=gdrive:networks/stylegan2-church-config-f.pkl \\\n  --metrics=fid50k,ppl2_wend --dataset=church\npython run_metrics.py --data-dir=~/datasets --network=gdrive:networks/stylegan2-horse-config-f.pkl \\\n  --metrics=fid50k,ppl2_wend --dataset=horse\n```\n\nFor other configurations, see the [StyleGAN2 Google Drive folder](https://drive.google.com/open?id=1QHc-yF5C3DChRwSdZKcx1w6K8JvSxQi7).\n\nNote that the metrics are evaluated using a different random seed each time, so the results will vary between runs. In the paper, we reported the average result of running each metric 10 times. The following table lists the available metrics along with their expected runtimes and random variation:\n\n| Metric      | FFHQ config F  | 1 GPU  | 2 GPUs  | 4 GPUs | Description |\n| :---------- | :------------: | :----: | :-----: | :----: | :---------- |\n| `fid50k`    | 2.84 &pm; 0.03 | 22 min | 14 min  | 10 min | [Fr&eacute;chet Inception Distance](https://arxiv.org/abs/1706.08500)\n| `is50k`     | 5.13 &pm; 0.02 | 23 min | 14 min  | 8 min  | [Inception Score](https://arxiv.org/abs/1606.03498)\n| `ppl_zfull` | 348.0 &pm; 3.8 | 41 min | 22 min  | 14 min | [Perceptual Path Length](https://arxiv.org/abs/1812.04948) in Z, full paths\n| `ppl_wfull` | 126.9 &pm; 0.2 | 42 min | 22 min  | 13 min | [Perceptual Path Length](https://arxiv.org/abs/1812.04948) in W, full paths\n| `ppl_zend`  | 348.6 &pm; 3.0 | 41 min | 22 min  | 14 min | [Perceptual Path Length](https://arxiv.org/abs/1812.04948) in Z, path endpoints\n| `ppl_wend`  | 129.4 &pm; 0.8 | 40 min | 23 min  | 13 min | [Perceptual Path Length](https://arxiv.org/abs/1812.04948) in W, path endpoints\n| `ppl2_wend` | 145.0 &pm; 0.5 | 41 min | 23 min  | 14 min | [Perceptual Path Length](https://arxiv.org/abs/1812.04948) without center crop\n| `ls`        | 154.2 / 4.27   | 10 hrs | 6 hrs   | 4 hrs  | [Linear Separability](https://arxiv.org/abs/1812.04948)\n| `pr50k3`    | 0.689 / 0.492  | 26 min | 17 min  | 12 min | [Precision and Recall](https://arxiv.org/abs/1904.06991)\n\nNote that some of the metrics cache dataset-specific data on the disk, and they will take somewhat longer when run for the first time.\n\n## License\n\nCopyright &copy; 2019, NVIDIA Corporation. All rights reserved.\n\nThis work is made available under the Nvidia Source Code License-NC. To view a copy of this license, visit https://nvlabs.github.io/stylegan2/license.html\n\n## Citation\n\n```\n@article{Karras2019stylegan2,\n  title   = {Analyzing and Improving the Image Quality of {StyleGAN}},\n  author  = {Tero Karras and Samuli Laine and Miika Aittala and Janne Hellsten and Jaakko Lehtinen and Timo Aila},\n  journal = {CoRR},\n  volume  = {abs/1912.04958},\n  year    = {2019},\n}\n```\n\n## Acknowledgements\n\nWe thank Ming-Yu Liu for an early review, Timo Viitanen for his help with code release, and Tero Kuosmanen for compute infrastructure.\n",
            "readme_url": "https://github.com/cyrilzakka/stylegan2-tpu",
            "frameworks": [
                "TensorFlow",
                "Keras",
                "scikit-learn",
                "TensorFlow"
            ]
        }
    ],
    "references": [
        {
            "title": "Analyzing and Improving the Image Quality of StyleGAN",
            "arxiv": "1912.04958",
            "year": 2019,
            "url": "http://arxiv.org/abs/1912.04958v2",
            "abstract": "The style-based GAN architecture (StyleGAN) yields state-of-the-art results\nin data-driven unconditional generative image modeling. We expose and analyze\nseveral of its characteristic artifacts, and propose changes in both model\narchitecture and training methods to address them. In particular, we redesign\nthe generator normalization, revisit progressive growing, and regularize the\ngenerator to encourage good conditioning in the mapping from latent codes to\nimages. In addition to improving image quality, this path length regularizer\nyields the additional benefit that the generator becomes significantly easier\nto invert. This makes it possible to reliably attribute a generated image to a\nparticular network. We furthermore visualize how well the generator utilizes\nits output resolution, and identify a capacity problem, motivating us to train\nlarger models for additional quality improvements. Overall, our improved model\nredefines the state of the art in unconditional image modeling, both in terms\nof existing distribution quality metrics as well as perceived image quality.",
            "authors": [
                "Tero Karras",
                "Samuli Laine",
                "Miika Aittala",
                "Janne Hellsten",
                "Jaakko Lehtinen",
                "Timo Aila"
            ]
        },
        {
            "title": "Improved Techniques for Training GANs",
            "arxiv": "1606.03498",
            "year": 2016,
            "url": "http://arxiv.org/abs/1606.03498v1",
            "abstract": "We present a variety of new architectural features and training procedures\nthat we apply to the generative adversarial networks (GANs) framework. We focus\non two applications of GANs: semi-supervised learning, and the generation of\nimages that humans find visually realistic. Unlike most work on generative\nmodels, our primary goal is not to train a model that assigns high likelihood\nto test data, nor do we require the model to be able to learn well without\nusing any labels. Using our new techniques, we achieve state-of-the-art results\nin semi-supervised classification on MNIST, CIFAR-10 and SVHN. The generated\nimages are of high quality as confirmed by a visual Turing test: our model\ngenerates MNIST samples that humans cannot distinguish from real data, and\nCIFAR-10 samples that yield a human error rate of 21.3%. We also present\nImageNet samples with unprecedented resolution and show that our methods enable\nthe model to learn recognizable features of ImageNet classes.",
            "authors": [
                "Tim Salimans",
                "Ian Goodfellow",
                "Wojciech Zaremba",
                "Vicki Cheung",
                "Alec Radford",
                "Xi Chen"
            ]
        },
        {
            "title": "GANs Trained by a Two Time-Scale Update Rule Converge to a Local Nash Equilibrium",
            "arxiv": "1706.08500",
            "year": 2017,
            "url": "http://arxiv.org/abs/1706.08500v6",
            "abstract": "Generative Adversarial Networks (GANs) excel at creating realistic images\nwith complex models for which maximum likelihood is infeasible. However, the\nconvergence of GAN training has still not been proved. We propose a two\ntime-scale update rule (TTUR) for training GANs with stochastic gradient\ndescent on arbitrary GAN loss functions. TTUR has an individual learning rate\nfor both the discriminator and the generator. Using the theory of stochastic\napproximation, we prove that the TTUR converges under mild assumptions to a\nstationary local Nash equilibrium. The convergence carries over to the popular\nAdam optimization, for which we prove that it follows the dynamics of a heavy\nball with friction and thus prefers flat minima in the objective landscape. For\nthe evaluation of the performance of GANs at image generation, we introduce the\n\"Fr\\'echet Inception Distance\" (FID) which captures the similarity of generated\nimages to real ones better than the Inception Score. In experiments, TTUR\nimproves learning for DCGANs and Improved Wasserstein GANs (WGAN-GP)\noutperforming conventional GAN training on CelebA, CIFAR-10, SVHN, LSUN\nBedrooms, and the One Billion Word Benchmark.",
            "authors": [
                "Martin Heusel",
                "Hubert Ramsauer",
                "Thomas Unterthiner",
                "Bernhard Nessler",
                "Sepp Hochreiter"
            ]
        },
        {
            "title": "A Style-Based Generator Architecture for Generative Adversarial Networks",
            "arxiv": "1812.04948",
            "year": 2018,
            "url": "http://arxiv.org/abs/1812.04948v3",
            "abstract": "We propose an alternative generator architecture for generative adversarial\nnetworks, borrowing from style transfer literature. The new architecture leads\nto an automatically learned, unsupervised separation of high-level attributes\n(e.g., pose and identity when trained on human faces) and stochastic variation\nin the generated images (e.g., freckles, hair), and it enables intuitive,\nscale-specific control of the synthesis. The new generator improves the\nstate-of-the-art in terms of traditional distribution quality metrics, leads to\ndemonstrably better interpolation properties, and also better disentangles the\nlatent factors of variation. To quantify interpolation quality and\ndisentanglement, we propose two new, automated methods that are applicable to\nany generator architecture. Finally, we introduce a new, highly varied and\nhigh-quality dataset of human faces.",
            "authors": [
                "Tero Karras",
                "Samuli Laine",
                "Timo Aila"
            ]
        },
        {
            "title": "Improved Precision and Recall Metric for Assessing Generative Models",
            "arxiv": "1904.06991",
            "year": 2019,
            "url": "http://arxiv.org/abs/1904.06991v3",
            "abstract": "The ability to automatically estimate the quality and coverage of the samples\nproduced by a generative model is a vital requirement for driving algorithm\nresearch. We present an evaluation metric that can separately and reliably\nmeasure both of these aspects in image generation tasks by forming explicit,\nnon-parametric representations of the manifolds of real and generated data. We\ndemonstrate the effectiveness of our metric in StyleGAN and BigGAN by providing\nseveral illustrative examples where existing metrics yield uninformative or\ncontradictory results. Furthermore, we analyze multiple design variants of\nStyleGAN to better understand the relationships between the model architecture,\ntraining methods, and the properties of the resulting sample distribution. In\nthe process, we identify new variants that improve the state-of-the-art. We\nalso perform the first principled analysis of truncation methods and identify\nan improved method. Finally, we extend our metric to estimate the perceptual\nquality of individual samples, and use this to study latent space\ninterpolations.",
            "authors": [
                "Tuomas Kynk\u00e4\u00e4nniemi",
                "Tero Karras",
                "Samuli Laine",
                "Jaakko Lehtinen",
                "Timo Aila"
            ]
        },
        {
            "year": "2019",
            "volume": "abs/1912.04958",
            "journal": "CoRR",
            "author": [
                "Karras, Tero",
                "Laine, Samuli",
                "Aittala, Miika",
                "Hellsten, Janne",
                "Lehtinen, Jaakko",
                "Aila, Timo"
            ],
            "title": "Analyzing and Improving the Image Quality of {StyleGAN}",
            "ENTRYTYPE": "article",
            "ID": "Karras2019stylegan2",
            "authors": [
                "Karras, Tero",
                "Laine, Samuli",
                "Aittala, Miika",
                "Hellsten, Janne",
                "Lehtinen, Jaakko",
                "Aila, Timo"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "FFHQ"
            },
            {
                "name": "ImageNet"
            },
            {
                "name": "MNIST"
            },
            {
                "name": "CelebA"
            },
            {
                "name": "One Billion Word"
            },
            {
                "name": "SVHN"
            },
            {
                "name": "CIFAR-10"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9999793480794317,
        "task": "Image Generation",
        "task_prob": 0.9876669600317839
    }
}