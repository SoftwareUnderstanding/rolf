{
    "visibility": {
        "visibility": "public"
    },
    "name": "#tianchi",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "wangbinglin1995",
                "owner_type": "User",
                "name": "tianchi",
                "url": "https://github.com/wangbinglin1995/tianchi",
                "stars": 17,
                "pushed_at": "2018-10-28 13:47:36+00:00",
                "created_at": "2018-10-04 03:07:04+00:00",
                "language": "Python",
                "description": "tianchi \u5929\u6c60 \u5e7f\u4e1c\u5de5\u4e1a\u667a\u9020\u7b97\u6cd5\u8d5b \u5e7f\u4e1c\u5de5\u4e1a\u667a\u9020\u5927\u6570\u636e\u521b\u65b0\u7b97\u6cd5\u8d5b \u94dd\u6750\u8868\u9762\u7455\u75b5\u68c0\u6d4b",
                "frameworks": [
                    "Keras",
                    "scikit-learn",
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": "data_input.py",
                "sha": "e1dd037a761e71c24759514fb001a9c74e5fa353",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/wangbinglin1995/tianchi/blob/master/data_input.py"
                    }
                },
                "size": 6180
            },
            {
                "type": "code",
                "name": "predict.py",
                "sha": "e13e59eef0600c0d588d380ba881d6e706fe42ef",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/wangbinglin1995/tianchi/blob/master/predict.py"
                    }
                },
                "size": 4426
            },
            {
                "type": "code",
                "name": "train.py",
                "sha": "9d9fc363724e3017958aaf87b4405aa8fd7ae8a7",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/wangbinglin1995/tianchi/blob/master/train.py"
                    }
                },
                "size": 11298
            }
        ]
    },
    "authors": [
        {
            "name": "\u738b\u67c4\u6dcb",
            "email": "wangbinglin1995@outlook.com",
            "github_id": "wangbinglin1995"
        }
    ],
    "tags": [],
    "description": "tianchi \u5929\u6c60 \u5e7f\u4e1c\u5de5\u4e1a\u667a\u9020\u7b97\u6cd5\u8d5b \u5e7f\u4e1c\u5de5\u4e1a\u667a\u9020\u5927\u6570\u636e\u521b\u65b0\u7b97\u6cd5\u8d5b \u94dd\u6750\u8868\u9762\u7455\u75b5\u68c0\u6d4b",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/wangbinglin1995/tianchi",
            "stars": 17,
            "issues": true,
            "readme": "#tianchi\n\u5e7f\u4e1c\u5de5\u4e1a\u667a\u9020\u7b97\u6cd5\u8d5b-\u5e7f\u4e1c\u5de5\u4e1a\u667a\u9020\u5927\u6570\u636e\u521b\u65b0\u7b97\u6cd5\u8d5b-\u94dd\u6750\u8868\u9762\u7455\u75b5\u68c0\u6d4b-\u7b2c\u4e00\u8d5b\u5b63\n\n\u6b64\u4ee3\u7801\u9002\u5408\u5c0f\u767d\uff0c\u4f5c\u4e3a\u5165\u95e8\u53c2\u8003\uff0c\u5927\u795e\u8bf7\u7ed5\u8def (\u6c34\u5e73\u4e0d\u9ad8\uff0c\u671b\u52ff\u5632\u7b11), \u672c\u4ee3\u7801\u7b2c\u4e00\u8d5b\u5b63\u6392\u540d93, \u7ebf\u4e0a\u8bc6\u522b\u738794.3%\n\u6b64\u4ee3\u7801\u7684\u65b9\u6cd5\u8ddfHerbert95\u5927\u795e\u7684baseline\u5206\u4eab\u5dee\u4e0d\u591a\uff0c\u53ea\u662f\u6211\u8fd9\u91cc\u662fKeras\uff0c\u4ed6\u662f\u57fa\u4e8epytorch\uff1a https://github.com/Herbert95/tianchi_lvcai \n\n\n\u56e2\u961f\uff1a\u56fd\u7acb\u65b0\u5c4b\u718a\n\u7a0b\u5e8f\u8bf4\u660e\uff1a----------------------------------------------------------------------------------\n    \u64cd\u4f5c\u7cfb\u7edf\uff1awin10 \u6216 Ubuntu16.04\uff0c\n    python\u7248\u672c\uff1apython3\n    \u6846\u67b6\uff1aKeras (\u57fa\u4e8etensorflow)\n    \u4f9d\u8d56\u5e93\uff1a tensorflow, Keras, opencv, pillow, sklearn, scipy, numpy, matplotlib\n    \n    \u4f7f\u7528\u7684\u6a21\u578b\u4e3aImageNet\u9884\u8bad\u7ec3\u7684densenet169 (Keras\u81ea\u5e26)\n    \u53c2\u8003\u6587\u732e\uff1a https://arxiv.org/pdf/1608.06993.pdf\n  \n    \u6574\u4f53\u601d\u8def\uff1a\u6570\u636e\u589e\u5f3a\u4e4b\u540e\u76f4\u63a5\u5c06\u7f51\u7edc\u5168\u90e8\u5c42\u4e00\u8d77\u8bad\u7ec3,\u4f7f\u7528\u7ecf\u8fc7Imagenet\u9884\u8bad\u7ec3\u7684\u6a21\u578bdensenet169\u8fdb\u884c\u8fc1\u79fb\u5b66\u4e60\n        \u5206\u522b\u5bf9\u4e0d\u540c\u56fe\u7247\u5927\u5c0f(img_size\u5206\u522b\u4e3a\uff1a299,400,520)\u7684\u56fe\u7247\u6784\u5efa\u591a\u4e2a\u6a21\u578b\uff0c\u6700\u540e\u8fdb\u884c\u6a21\u578b\u878d\u5408(\u540e\u9a8c\u6982\u7387\u6c42\u548c)\n    \n    \u6570\u636e\u96c6\u6574\u7406: \u64e6\u82b120180901141803\u5bf9\u7167\u6837\u672c \u4e3a\u51f8\u7c89\n                \u64e6\u82b120180901141824\u5bf9\u7167\u6837\u672c \u4e3a\u51f8\u7c89\n                \u64e6\u82b120180830164545\u5bf9\u7167\u6837\u672c \u4e3a\u6854\u76ae                \n                \u64e6\u82b120180831160713\u5bf9\u7167\u6837\u672c \u4e0d\u786e\u5b9a\uff0c\u5220\u9664\n                \u64e6\u82b120180906093612\u5bf9\u7167\u6837\u672c \u4e0d\u786e\u5b9a\uff0c\u5220\u9664\n\n    \n\u4ee3\u7801\u8fd0\u884c\u65b9\u5f0f\uff1a    \n    python3 predict.py\n\n    \u6ce8\uff1apredict \u51fd\u6570\u5305\u542b\u8bad\u7ec3/\u6d4b\u8bd5 2\u4e2a\u8fc7\u7a0b\uff0c\n        \u8bad\u7ec3\u8fc7\u7a0b\u9700\u8981Keras\u81ea\u5e26\u7684\uff0cImagenet\u9884\u8bad\u7ec3\u7684 densenet-169 \u6a21\u578b\uff08\u8fc7\u7a0b\u9700\u8054\u7f51\uff09\n        \u6d4b\u8bd5/\u9884\u6d4b\u8fc7\u7a0b\u8bf7\u76f4\u63a5\u5229\u7528\u201cmodels\u201d\u6587\u4ef6\u5939\u4e2d\u4fdd\u5b58\u7684\uff1a*.h5 \u6a21\u578b\n        \u5982\u679c\u8981\u6d4b\u8bd5(predict), \u4fee\u6539 is_train = False (\u9ed8\u8ba4)\n        \u5982\u679c\u8981\u91cd\u65b0\u8bad\u7ec3\uff0c \u8bf7\u4fee\u6539 is_train = True\n        \n        \u4f8b\u5982\uff0c\u5982\u679c\u8981\u5229\u7528\u8bad\u7ec3\u597d\u7684model\u5bf9test\u6837\u672c\u8fdb\u884c\u9884\u6d4b\uff0c\u76f4\u63a5\uff1apython3 predict.py\n  \n  \n\n\u63d0\u4ea4\u4ee3\u7801\u6587\u4ef6\u5939\u7ed3\u6784\uff1a\n\n    project\n    |--README.md\n    |--data\n        |-- guangdong_round1_train2_20180916\n        |-- guangdong_round1_test_a_20180916\n        |-- guangdong_round1_test_b_20181009\n    |--code\n        |-- predict.py  \u4e3b\u51fd\u6570\uff0c\u5305\u542b\uff1a\u8bad\u7ec3/\u6d4b\u8bd5 2\u4e2a\u8fc7\u7a0b\n        |-- train.py  \u8bad\u7ec3\u51fd\u6570\uff1a\u6a21\u578b\u6784\u5efa\u3001\u6a21\u578b\u8bad\u7ec3\n        |-- data_input.py  \u6570\u636e\u5904\u7406\u51fd\u6570\uff0c\u7528\u4e8e\u5bfc\u5165\u8bad\u7ec3/\u6d4b\u8bd5\u6570\u636e\n    |--submit\n        |-- *.csv  \u63d0\u4ea4\u7684\u7ed3\u679c\n    |--models\n        |-- *.h5  \u4fdd\u5b58\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u7528\u4e8e\u9884\u6d4b\n\n\n",
            "readme_url": "https://github.com/wangbinglin1995/tianchi",
            "frameworks": [
                "Keras",
                "scikit-learn",
                "TensorFlow"
            ]
        }
    ],
    "references": [
        {
            "title": "Densely Connected Convolutional Networks",
            "arxiv": "1608.06993",
            "year": 2016,
            "url": "http://arxiv.org/abs/1608.06993v5",
            "abstract": "Recent work has shown that convolutional networks can be substantially\ndeeper, more accurate, and efficient to train if they contain shorter\nconnections between layers close to the input and those close to the output. In\nthis paper, we embrace this observation and introduce the Dense Convolutional\nNetwork (DenseNet), which connects each layer to every other layer in a\nfeed-forward fashion. Whereas traditional convolutional networks with L layers\nhave L connections - one between each layer and its subsequent layer - our\nnetwork has L(L+1)/2 direct connections. For each layer, the feature-maps of\nall preceding layers are used as inputs, and its own feature-maps are used as\ninputs into all subsequent layers. DenseNets have several compelling\nadvantages: they alleviate the vanishing-gradient problem, strengthen feature\npropagation, encourage feature reuse, and substantially reduce the number of\nparameters. We evaluate our proposed architecture on four highly competitive\nobject recognition benchmark tasks (CIFAR-10, CIFAR-100, SVHN, and ImageNet).\nDenseNets obtain significant improvements over the state-of-the-art on most of\nthem, whilst requiring less computation to achieve high performance. Code and\npre-trained models are available at https://github.com/liuzhuang13/DenseNet .",
            "authors": [
                "Gao Huang",
                "Zhuang Liu",
                "Laurens van der Maaten",
                "Kilian Q. Weinberger"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9998677001968999,
        "task": "Image Classification",
        "task_prob": 0.9762451030825201
    },
    "training": {
        "datasets": [
            {
                "name": "SVHN"
            },
            {
                "name": "CIFAR-10"
            },
            {
                "name": "CIFAR-100"
            },
            {
                "name": "ImageNet"
            }
        ]
    }
}