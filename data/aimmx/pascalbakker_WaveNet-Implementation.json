{
    "visibility": {
        "visibility": "public"
    },
    "name": "What is WaveNet?",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "pascalbakker",
                "owner_type": "User",
                "name": "WaveNet-Implementation",
                "url": "https://github.com/pascalbakker/WaveNet-Implementation",
                "stars": 1,
                "pushed_at": "2020-05-12 22:44:29+00:00",
                "created_at": "2020-05-05 16:59:36+00:00",
                "language": "Python",
                "description": "Tensorflow implementation of Wavenet architecture ",
                "frameworks": [
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": "CS541FinalProject.pdf",
                "sha": "e10ca4153f566dfe3ce7143b4cf753f2495c8187",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pascalbakker/WaveNet-Implementation/blob/master/CS541FinalProject.pdf"
                    }
                },
                "size": 284882
            },
            {
                "type": "code",
                "name": "audio.py",
                "sha": "4e7c3188160f990d0cc81a6cc8c6b884e836c7a6",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pascalbakker/WaveNet-Implementation/blob/master/audio.py"
                    }
                },
                "size": 5393
            },
            {
                "type": "code",
                "name": "main.py",
                "sha": "e7ab28db635833007e29d1b67e017796cd66c48d",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pascalbakker/WaveNet-Implementation/blob/master/main.py"
                    }
                },
                "size": 12979
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "d16e5045d7d6a09437bbff36600fd1ddbd37300a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pascalbakker/WaveNet-Implementation/blob/master/requirements.txt"
                    }
                },
                "size": 37
            },
            {
                "type": "code",
                "name": "runDocker.sh",
                "sha": "58130adea97a0e33e1b9e946c57e0814c2d7f53e",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pascalbakker/WaveNet-Implementation/blob/master/runDocker.sh"
                    }
                },
                "size": 148
            },
            {
                "type": "code",
                "name": "saved_data",
                "sha": "adf2564f44df466a250f02b3df62e5d72bdc9c26",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pascalbakker/WaveNet-Implementation/tree/master/saved_data"
                    }
                },
                "num_files": 5
            },
            {
                "type": "code",
                "name": "wavenet_model.py",
                "sha": "26b9e98063c9ee17c8a3b8907c42111dd41ccde2",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pascalbakker/WaveNet-Implementation/blob/master/wavenet_model.py"
                    }
                },
                "size": 2847
            }
        ]
    },
    "trained_model": {
        "binaries": [
            {
                "type": "binary",
                "name": "Dockerfile",
                "sha": "340602f35d591456c209ac9c2e9b4ac4cce00a49",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pascalbakker/WaveNet-Implementation/blob/master/Dockerfile"
                    }
                },
                "size": 240
            }
        ]
    },
    "authors": [
        {
            "name": "Pascal",
            "github_id": "pascalbakker"
        }
    ],
    "tags": [],
    "description": "Tensorflow implementation of Wavenet architecture ",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/pascalbakker/WaveNet-Implementation",
            "stars": 1,
            "issues": true,
            "readme": "# What is WaveNet?\n\nWaveNet is a machine learning architecture used for audio generation. Instead of utilizing RNNs, WaveNet uses dilated convolutions to train. \n\nThis project reimplements the paper in Tensorflow with Keras backend. \n\nSee paper and blog for more information:\nhttps://deepmind.com/blog/article/wavenet-generative-model-raw-audio\nhttps://arxiv.org/pdf/1609.03499.pdf\n\n## Necessary Tools:\n1. Python 3\n2. Docker (Docker Engine API v1.40 for gpu)\n\nWorks on all platforms but tested on Ubuntu 18\n\n## Building and Running\n\n#### Pull docker image\ndocker pull tensorflow/tensorflow:2.1.0-gpu-py3\n#### Build Code\ndocker build -t wavenet/latest .\n#### Run code\ndocker run -v $(pwd)/saved_data:/saved_data:rw --gpus all -it --rm --name wavenetbox wavenet/latest \n\n\n",
            "readme_url": "https://github.com/pascalbakker/WaveNet-Implementation",
            "frameworks": [
                "TensorFlow"
            ]
        }
    ],
    "references": [
        {
            "title": "WaveNet: A Generative Model for Raw Audio",
            "arxiv": "1609.03499",
            "year": 2016,
            "url": "http://arxiv.org/abs/1609.03499v2",
            "abstract": "This paper introduces WaveNet, a deep neural network for generating raw audio\nwaveforms. The model is fully probabilistic and autoregressive, with the\npredictive distribution for each audio sample conditioned on all previous ones;\nnonetheless we show that it can be efficiently trained on data with tens of\nthousands of samples per second of audio. When applied to text-to-speech, it\nyields state-of-the-art performance, with human listeners rating it as\nsignificantly more natural sounding than the best parametric and concatenative\nsystems for both English and Mandarin. A single WaveNet can capture the\ncharacteristics of many different speakers with equal fidelity, and can switch\nbetween them by conditioning on the speaker identity. When trained to model\nmusic, we find that it generates novel and often highly realistic musical\nfragments. We also show that it can be employed as a discriminative model,\nreturning promising results for phoneme recognition.",
            "authors": [
                "Aaron van den Oord",
                "Sander Dieleman",
                "Heiga Zen",
                "Karen Simonyan",
                "Oriol Vinyals",
                "Alex Graves",
                "Nal Kalchbrenner",
                "Andrew Senior",
                "Koray Kavukcuoglu"
            ]
        }
    ],
    "domain": {
        "domain_type": "Speech",
        "domain_prob": 0.984936815832784
    }
}