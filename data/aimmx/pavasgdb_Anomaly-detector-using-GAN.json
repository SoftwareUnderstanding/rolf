{
    "visibility": {
        "visibility": "public"
    },
    "name": "Unsupervised Anomaly Detection using Generative Adversarial Network on medical X-Ray image",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "pavasgdb",
                "owner_type": "User",
                "name": "Anomaly-detector-using-GAN",
                "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN",
                "stars": 1,
                "pushed_at": "2019-04-14 14:35:07+00:00",
                "created_at": "2019-04-02 11:28:39+00:00",
                "language": "Jupyter Notebook",
                "frameworks": [
                    "scikit-learn",
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": ".vscode",
                "sha": "65c6c46571d0870fad39ced3ccbbdfcadb658a11",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/tree/master/.vscode"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "__pycache__",
                "sha": "feb734780f60c2bb374ea0e0424da4462e67cf41",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/tree/master/__pycache__"
                    }
                },
                "num_files": 10
            },
            {
                "type": "code",
                "name": "alpha_trainer.py",
                "sha": "ef494b95c6b05d65127134e4a34e5e05195d9914",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/blob/master/alpha_trainer.py"
                    }
                },
                "size": 11397
            },
            {
                "type": "code",
                "name": "alphagan_models.py",
                "sha": "f5a979e250d7eec292e750910956222d04817efe",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/blob/master/alphagan_models.py"
                    }
                },
                "size": 7883
            },
            {
                "type": "code",
                "name": "data_loader.py",
                "sha": "0cfeb607393cb5c646895b44c26fc2410331fd0f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/blob/master/data_loader.py"
                    }
                },
                "size": 2838
            },
            {
                "type": "code",
                "name": "data_mura.py",
                "sha": "03150b04e146abdd0dc58623333bec033065eb46",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/blob/master/data_mura.py"
                    }
                },
                "size": 2195
            },
            {
                "type": "code",
                "name": "eval_SaBiGAN.ipynb",
                "sha": "51ac958da4c3f3f3fd818f78acd66041645c38ea",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/blob/master/eval_SaBiGAN.ipynb"
                    }
                },
                "size": 407471
            },
            {
                "type": "code",
                "name": "eval_alphaGAN.ipynb",
                "sha": "a08966610cb2bd29a51faf40fcf0d9c735d94dd5",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/blob/master/eval_alphaGAN.ipynb"
                    }
                },
                "size": 399960
            },
            {
                "type": "code",
                "name": "eval_train_SaBiGAN.ipynb",
                "sha": "f151678a0080817dbf7887afe2e391dfaa68e346",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/blob/master/eval_train_SaBiGAN.ipynb"
                    }
                },
                "size": 476605
            },
            {
                "type": "code",
                "name": "eval_train_alphaGAN.ipynb",
                "sha": "c9f543e75668bec0702e785d43ffc3890f3ec58a",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/blob/master/eval_train_alphaGAN.ipynb"
                    }
                },
                "size": 414613
            },
            {
                "type": "code",
                "name": "images",
                "sha": "488b3e97a15ffdda5929b5cf2d78617b52b2a9ec",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/tree/master/images"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "main.py",
                "sha": "3539bddee21463235713a7861ece1d39076f29e0",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/blob/master/main.py"
                    }
                },
                "size": 1386
            },
            {
                "type": "code",
                "name": "parameter.py",
                "sha": "bad15af81b22065e53e0aa55965b41243f77f06d",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/blob/master/parameter.py"
                    }
                },
                "size": 2767
            },
            {
                "type": "code",
                "name": "sagan_models.py",
                "sha": "db9e513811bacc146d269edb08000f36ff41f847",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/blob/master/sagan_models.py"
                    }
                },
                "size": 7930
            },
            {
                "type": "code",
                "name": "spectral.py",
                "sha": "e3b5540c5b02949a9fea0ca19f6e8b55b511d216",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/blob/master/spectral.py"
                    }
                },
                "size": 2317
            },
            {
                "type": "code",
                "name": "tester.py",
                "sha": "86daaa45f8bcc43a78c7cecc8d6c2537ee2b9306",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/blob/master/tester.py"
                    }
                },
                "size": 5736
            },
            {
                "type": "code",
                "name": "trainer.py",
                "sha": "d4e998ab60d1f5174b4bb2c0cdf3cbde69728b45",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/blob/master/trainer.py"
                    }
                },
                "size": 11230
            },
            {
                "type": "code",
                "name": "utils.py",
                "sha": "ab95a9d697d86d4be6634c88d00c5302a48c1003",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN/blob/master/utils.py"
                    }
                },
                "size": 522
            }
        ]
    },
    "authors": [
        {
            "name": "pavasgdb",
            "github_id": "pavasgdb"
        }
    ],
    "tags": [],
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN",
            "stars": 1,
            "issues": true,
            "readme": "# Unsupervised Anomaly Detection using Generative Adversarial Network on medical X-Ray image\r\n\r\nArticle: https://medium.com/vitalify-asia/gan-for-unsupervised-anomaly-detection-on-x-ray-images-6b9f678ca57d\r\n\r\n## Data\r\n- MURA data set https://stanfordmlgroup.github.io/competitions/mura/\r\n- Public, detect abnormality in X-Ray images.\r\n\r\n## Model \r\n- Bidirection GAN / ALI : https://arxiv.org/abs/1605.09782 / https://arxiv.org/abs/1606.00704\r\n- Alpha-GAN (VAE + GAN): https://arxiv.org/abs/1706.04987\r\n\r\n## Approach\r\nLeveraging the ability to unsupervisedly learned the structure of data to generate realisitic image, this experiments aims to use that ability to perform binary classification when only trained on one class.\r\n\r\n## Usage\r\nRun `python main.py --help` for full detail.\r\n\r\nExample:\r\n```\r\npython main.py --batch_size 128 --imsize 64 --dataset mura --adv_loss inverse --version sabigan_wrist --image_path ~/datasets/ --use_tensorboard true --mura_class XR_WRIST --mura_type negative\r\n```\r\n\r\n### How:\r\n- Train GAN model with the ability to inference on the latent variable (VAE+GAN / BiGAN) on only 'negative class'\r\n- Let the model learn until it can generate good looking images.\r\n- Use the Encoder, Generator, Discriminator outputs and hidden features to calculate 'Reconstruction loss' and 'Feature matching' loss.\r\n- Classify into 'negative' or 'positive' based on the score above.\r\n\r\n\r\n#### References:\r\n- Thank https://github.com/heykeetae/Self-Attention-GAN for great examples.\r\n",
            "readme_url": "https://github.com/pavasgdb/Anomaly-detector-using-GAN",
            "frameworks": [
                "scikit-learn",
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "Adversarially Learned Inference",
            "arxiv": "1606.00704",
            "year": 2016,
            "url": "http://arxiv.org/abs/1606.00704v3",
            "abstract": "We introduce the adversarially learned inference (ALI) model, which jointly\nlearns a generation network and an inference network using an adversarial\nprocess. The generation network maps samples from stochastic latent variables\nto the data space while the inference network maps training examples in data\nspace to the space of latent variables. An adversarial game is cast between\nthese two networks and a discriminative network is trained to distinguish\nbetween joint latent/data-space samples from the generative network and joint\nsamples from the inference network. We illustrate the ability of the model to\nlearn mutually coherent inference and generation networks through the\ninspections of model samples and reconstructions and confirm the usefulness of\nthe learned representations by obtaining a performance competitive with\nstate-of-the-art on the semi-supervised SVHN and CIFAR10 tasks.",
            "authors": [
                "Vincent Dumoulin",
                "Ishmael Belghazi",
                "Ben Poole",
                "Olivier Mastropietro",
                "Alex Lamb",
                "Martin Arjovsky",
                "Aaron Courville"
            ]
        },
        {
            "title": "Variational Approaches for Auto-Encoding Generative Adversarial Networks",
            "arxiv": "1706.04987",
            "year": 2017,
            "url": "http://arxiv.org/abs/1706.04987v2",
            "abstract": "Auto-encoding generative adversarial networks (GANs) combine the standard GAN\nalgorithm, which discriminates between real and model-generated data, with a\nreconstruction loss given by an auto-encoder. Such models aim to prevent mode\ncollapse in the learned generative model by ensuring that it is grounded in all\nthe available training data. In this paper, we develop a principle upon which\nauto-encoders can be combined with generative adversarial networks by\nexploiting the hierarchical structure of the generative model. The underlying\nprinciple shows that variational inference can be used a basic tool for\nlearning, but with the in- tractable likelihood replaced by a synthetic\nlikelihood, and the unknown posterior distribution replaced by an implicit\ndistribution; both synthetic likelihoods and implicit posterior distributions\ncan be learned using discriminators. This allows us to develop a natural fusion\nof variational auto-encoders and generative adversarial networks, combining the\nbest of both these methods. We describe a unified objective for optimization,\ndiscuss the constraints needed to guide learning, connect to the wide range of\nexisting work, and use a battery of tests to systematically and quantitatively\nassess the performance of our method.",
            "authors": [
                "Mihaela Rosca",
                "Balaji Lakshminarayanan",
                "David Warde-Farley",
                "Shakir Mohamed"
            ]
        },
        {
            "title": "Adversarial Feature Learning",
            "arxiv": "1605.09782",
            "year": 2016,
            "url": "http://arxiv.org/abs/1605.09782v7",
            "abstract": "The ability of the Generative Adversarial Networks (GANs) framework to learn\ngenerative models mapping from simple latent distributions to arbitrarily\ncomplex data distributions has been demonstrated empirically, with compelling\nresults showing that the latent space of such generators captures semantic\nvariation in the data distribution. Intuitively, models trained to predict\nthese semantic latent representations given data may serve as useful feature\nrepresentations for auxiliary problems where semantics are relevant. However,\nin their existing form, GANs have no means of learning the inverse mapping --\nprojecting data back into the latent space. We propose Bidirectional Generative\nAdversarial Networks (BiGANs) as a means of learning this inverse mapping, and\ndemonstrate that the resulting learned feature representation is useful for\nauxiliary supervised discrimination tasks, competitive with contemporary\napproaches to unsupervised and self-supervised feature learning.",
            "authors": [
                "Jeff Donahue",
                "Philipp Kr\u00e4henb\u00fchl",
                "Trevor Darrell"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9990163586928797,
        "task": "Image Generation",
        "task_prob": 0.9811942764558114
    },
    "training": {
        "datasets": [
            {
                "name": "SVHN"
            }
        ]
    }
}