{
    "visibility": {
        "visibility": "public",
        "license": "Apache License 2.0"
    },
    "name": "BoulderAreaDetector",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "pszemraj",
                "owner_type": "User",
                "name": "BoulderAreaDetector",
                "url": "https://github.com/pszemraj/BoulderAreaDetector",
                "stars": 3,
                "pushed_at": "2021-10-09 16:38:49+00:00",
                "created_at": "2021-07-01 04:22:06+00:00",
                "language": "Python",
                "description": "An app that uses a CNN to classify whether a satellite image shows an area would be a good rock climbing spot or not. On streamlit.",
                "license": "Apache License 2.0",
                "frameworks": []
            },
            {
                "type": "code",
                "name": ".gitattributes",
                "sha": "8b137891791fe96927ad78e64b0aad7bded08bdc",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pszemraj/BoulderAreaDetector/blob/master/.gitattributes"
                    }
                },
                "size": 1
            },
            {
                "type": "code",
                "name": ".idea",
                "sha": "fc3e29f31e9716f3533dd2276c39b7614aaa54c7",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pszemraj/BoulderAreaDetector/tree/master/.idea"
                    }
                },
                "num_files": 8
            },
            {
                "type": "code",
                "name": "LICENSE.txt",
                "sha": "261eeb9e9f8b2b4b0d119366dda99c6fd7d35c64",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pszemraj/BoulderAreaDetector/blob/master/LICENSE.txt"
                    }
                },
                "size": 11357
            },
            {
                "type": "code",
                "name": "info",
                "sha": "94843361b5d06d34549cfcfe6c8ca918ceac744f",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pszemraj/BoulderAreaDetector/tree/master/info"
                    }
                },
                "num_files": 5
            },
            {
                "type": "code",
                "name": "local_test.py",
                "sha": "a9a6a52a0ca471f986ab21ffdba59c3ce823d5bc",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pszemraj/BoulderAreaDetector/blob/master/local_test.py"
                    }
                },
                "size": 5011
            },
            {
                "type": "code",
                "name": "model-mixnetXL-20epoch_u.pil",
                "sha": "0e52d088905e1f27f74ce04ba3b3d4b3b29297e7",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pszemraj/BoulderAreaDetector/blob/master/model-mixnetXL-20epoch_u.pil"
                    }
                },
                "size": 48968013
            },
            {
                "type": "code",
                "name": "model-resnetv2_50x1_bigtransfer_u.zip",
                "sha": "94c0082f5577874c7cfb6675bcacb95d0df261ec",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pszemraj/BoulderAreaDetector/blob/master/model-resnetv2_50x1_bigtransfer_u.zip"
                    }
                },
                "size": 93023070
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "be0e72a23abc3a4a0c0f120fe8dea3940ed64329",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pszemraj/BoulderAreaDetector/blob/master/requirements.txt"
                    }
                },
                "size": 154
            },
            {
                "type": "code",
                "name": "streamlit_app.py",
                "sha": "ab71c2ddb634e5bc4ba79a7a26c3aed377d65812",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pszemraj/BoulderAreaDetector/blob/master/streamlit_app.py"
                    }
                },
                "size": 6253
            },
            {
                "type": "code",
                "name": "test_images",
                "sha": "ca9d7e1bd94bb435468986a1cfb05cde02122886",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pszemraj/BoulderAreaDetector/tree/master/test_images"
                    }
                },
                "num_files": 16
            }
        ]
    },
    "authors": [
        {
            "name": "Peter",
            "github_id": "pszemraj"
        }
    ],
    "tags": [
        "deep-learning",
        "cnn-classification",
        "gis",
        "satellite-imagery",
        "geospatial-analysis",
        "streamlit",
        "fastai",
        "pytorch",
        "resnet",
        "computer-vision",
        "remote-sensing",
        "cnn",
        "rock-climbing",
        "bouldering",
        "convolutional-neural-networks",
        "deep-neural-networks",
        "image-classification"
    ],
    "description": "An app that uses a CNN to classify whether a satellite image shows an area would be a good rock climbing spot or not. On streamlit.",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/pszemraj/BoulderAreaDetector",
            "stars": 3,
            "issues": true,
            "readme": "# BoulderAreaDetector\n\nDeploys a deep learning CNN classifying satellite imagery to [streamlit](https://share.streamlit.io/pszemraj/boulderareadetector) for user testing.\n\n-   The app is an MVP demo of [BoulderSpot](https://boulderspot.io/). The original idea for BoulderSpot originated in the June 2021 CASSINI Hackathon, that repo is [here](https://github.com/JonathanLehner/cassini_2021_nature_discoverer).\n-   [BoulderSpot](https://boulderspot.io/) uses a similar model to the one included here to classify whether aerial images are potential boulder areas or not. The class results are then used as part of a graph-like framework to analyze aerial imagery all across Switzerland. You can find more details on the website!\n\nAn example of model predictions on a holdout set:\n\n![Predicted Class-climb_area Examples](https://user-images.githubusercontent.com/74869040/124186053-0b1ba500-dabc-11eb-892d-5330deea51a5.png)\n\nA picture of some of the boulders the (full) model found after an in-person data validation trip:\n\n![Boulderspot-trip-03-Valhalla-06-min](https://user-images.githubusercontent.com/74869040/136666878-bfa590a2-9463-44c0-94b9-210d637ea22f.png)\n\n## Model Stats - CNN Classifier\n\nIn short, the predictor under-the-hood is: fastai library using a convolutional neural network\ntrained on a labeled dataset of several thousand images with two classes (climb_area, other).\nSource image data for training is mostly arial (possibly some satellite) sampled from Switzerland.\n\n**Note: the model deployed in the streamlit app has changed.** the original model used in this app\nwas [ResNet101](https://arxiv.org/abs/1512.03385) and the trained model file is ~170 MB. As GitHub\nhas limits / special rules around files greater than 100 mb in size, the model has been updated\nto [MixNet-XL](https://paperswithcode.com/method/mixconv), which exhibits similar performance but is\nsmaller (in parameters, and therefore file size).\n\n> Also included in the repo is a zipped model file of a trained [Big Transfer model](https://paperswithcode.com/lib/timm/big-transfer) that is more accurate than either of the\n> two. As this model is > 100 mb and streamlit unzipping+predicting performance is yet to be\n> tested, it is not deployed to the app yet, but can be used locally.\n\nA decent writeup on how to create, train, and save a fastai computer vision model is\nin [this Medium article](https://medium.com/analytics-vidhya/understanding-fastai-v2-training-with-a-computer-vision-example-part-1-the-resnet-model-dd9270450bb8). BoulderAreaDetector uses a decently\nsized labeled dataset (several thousand satellite images, each 256x256 in the two classes), but has\nnot had any significant level of hyperparameter optimization yet beyond fast. ai basics.\n\n### MixNet: Model itself\n\n-   [MixNet](https://github.com/rwightman/pytorch-image-models/blob/54a6cca27a9a3e092a07457f5d56709da56e3cf5/timm/models/efficientnet.py)\n    `*Note: the above links to timm source code as the MixNet paper is already linked above*`\n-   package: fast.ai (pytorch)\n-   trained for 20 epochs\n-   Loss:  FlattenedLoss of CrossEntropyLoss()\n-   Optimizer: Adam\n-   Total params: 11,940,824\n\n### MixNet:Confusion Matrix & Metrics\n\n![MixNet-XL Confusion Matrix](https://www.dropbox.com/s/yscr06wn03ikouo/mixnet_xl%20%20-%20CK%2BA%20-%2020epconfusion%20matrix.png?dl=1)\n\n                  precision    recall  f1-score   support\n\n      climb_area       0.84      0.57      0.68       206\n           other       0.98      0.99      0.99      3854\n\n        accuracy                           0.97      4060\n       macro avg       0.91      0.78      0.83      4060\n    weighted avg       0.97      0.97      0.97      4060\n\n**More details can be found in `/info`**\n\n### Probability Distributions (on a holdout set)\n\n`#TODO`\n\n## Examples / Inference\n\n`#TODO`\n\n### Highest Loss Images (test set)\n\nThe following images had the highest loss when evaluated as part of the test (not holdout) set\nduring training:\n\n![highest loss MixNet imgs](https://www.dropbox.com/s/7nlo210srtq9xwg/mixnet_xl%20%20-%20CK%2BA%20-%2020ephighest_loss_images.png?dl=1)\n\n* * *\n\n### Details on Original ResNet101 Fine-Tuned Model\n\nThis was the original model that was replaced as the file size was too large.\n\n-   [ResNet101](https://pytorch.org/vision/stable/_modules/torchvision/models/resnet.html#resnet101)\n-   package: fast.ai (pytorch)\n-   trained for 20 epochs\n-   Loss:  FlattenedLoss of CrossEntropyLoss()\n-   Optimizer: Adam\n\n![confusion matrix resnet101](https://user-images.githubusercontent.com/74869040/124186386-88dfb080-dabc-11eb-8699-91715f024458.png)\nMore details:\n\n                  precision    recall  f1-score   support\n\n      climb_area       0.79      0.76      0.77       101\n           other       0.97      0.97      0.97       800\n\n        accuracy                           0.95       901\n       macro avg       0.88      0.87      0.87       901\n    weighted avg       0.95      0.95      0.95       901\n\n* * *\n\n# Citations\n\nMixNet\n\n```bazaar\n@misc{tan2019mixconv,\n      title={MixConv: Mixed Depthwise Convolutional Kernels},\n      author={Mingxing Tan and Quoc V. Le},\n      year={2019},\n      eprint={1907.09595},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}\n```\n\nBig Transfer\n\n```bazaar\n@misc{kolesnikov2020big,\n      title={Big Transfer (BiT): General Visual Representation Learning},\n      author={Alexander Kolesnikov and Lucas Beyer and Xiaohua Zhai and Joan Puigcerver and\n      Jessica Yung and Sylvain Gelly and Neil Houlsby},\n      year={2020},\n      eprint={1912.11370},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}\n```\n\nResNet\n\n```bazaar\n@misc{he2015deep,\n      title={Deep Residual Learning for Image Recognition},\n      author={Kaiming He and Xiangyu Zhang and Shaoqing Ren and Jian Sun},\n      year={2015},\n      eprint={1512.03385},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}\n```\n",
            "readme_url": "https://github.com/pszemraj/BoulderAreaDetector",
            "frameworks": []
        }
    ],
    "references": [
        {
            "title": "Deep Residual Learning for Image Recognition",
            "arxiv": "1512.03385",
            "year": 2015,
            "url": "http://arxiv.org/abs/1512.03385v1",
            "abstract": "Deeper neural networks are more difficult to train. We present a residual\nlearning framework to ease the training of networks that are substantially\ndeeper than those used previously. We explicitly reformulate the layers as\nlearning residual functions with reference to the layer inputs, instead of\nlearning unreferenced functions. We provide comprehensive empirical evidence\nshowing that these residual networks are easier to optimize, and can gain\naccuracy from considerably increased depth. On the ImageNet dataset we evaluate\nresidual nets with a depth of up to 152 layers---8x deeper than VGG nets but\nstill having lower complexity. An ensemble of these residual nets achieves\n3.57% error on the ImageNet test set. This result won the 1st place on the\nILSVRC 2015 classification task. We also present analysis on CIFAR-10 with 100\nand 1000 layers.\n  The depth of representations is of central importance for many visual\nrecognition tasks. Solely due to our extremely deep representations, we obtain\na 28% relative improvement on the COCO object detection dataset. Deep residual\nnets are foundations of our submissions to ILSVRC & COCO 2015 competitions,\nwhere we also won the 1st places on the tasks of ImageNet detection, ImageNet\nlocalization, COCO detection, and COCO segmentation.",
            "authors": [
                "Kaiming He",
                "Xiangyu Zhang",
                "Shaoqing Ren",
                "Jian Sun"
            ]
        },
        {
            "primaryclass": "cs.CV",
            "archiveprefix": "arXiv",
            "eprint": "1907.09595",
            "year": "2019",
            "author": [
                "Tan, Mingxing",
                "Le, Quoc V."
            ],
            "title": "MixConv: Mixed Depthwise Convolutional Kernels",
            "ENTRYTYPE": "misc",
            "ID": "tan2019mixconv",
            "authors": [
                "Tan, Mingxing",
                "Le, Quoc V."
            ]
        },
        {
            "primaryclass": "cs.CV",
            "archiveprefix": "arXiv",
            "eprint": "1912.11370",
            "year": "2020",
            "author": [
                "Kolesnikov, Alexander",
                "Beyer, Lucas",
                "Zhai, Xiaohua",
                "Puigcerver, Joan",
                "Yung, Jessica",
                "Gelly, Sylvain",
                "Houlsby, Neil"
            ],
            "title": "Big Transfer (BiT): General Visual Representation Learning",
            "ENTRYTYPE": "misc",
            "ID": "kolesnikov2020big",
            "authors": [
                "Kolesnikov, Alexander",
                "Beyer, Lucas",
                "Zhai, Xiaohua",
                "Puigcerver, Joan",
                "Yung, Jessica",
                "Gelly, Sylvain",
                "Houlsby, Neil"
            ]
        },
        {
            "primaryclass": "cs.CV",
            "archiveprefix": "arXiv",
            "eprint": "1512.03385",
            "year": "2015",
            "author": [
                "He, Kaiming",
                "Zhang, Xiangyu",
                "Ren, Shaoqing",
                "Sun, Jian"
            ],
            "title": "Deep Residual Learning for Image Recognition",
            "ENTRYTYPE": "misc",
            "ID": "he2015deep",
            "authors": [
                "He, Kaiming",
                "Zhang, Xiangyu",
                "Ren, Shaoqing",
                "Sun, Jian"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.999893119306522,
        "task": "Object Detection",
        "task_prob": 0.9755552704942987
    },
    "training": {
        "datasets": [
            {
                "name": "ILSVRC 2015"
            },
            {
                "name": "COCO"
            },
            {
                "name": "ImageNet Detection"
            },
            {
                "name": "CIFAR-10"
            },
            {
                "name": "ImageNet"
            }
        ]
    }
}