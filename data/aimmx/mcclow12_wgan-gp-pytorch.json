{
    "visibility": {
        "visibility": "public"
    },
    "name": "wgan-gp-pytorch",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "mcclow12",
                "owner_type": "User",
                "name": "wgan-gp-pytorch",
                "url": "https://github.com/mcclow12/wgan-gp-pytorch",
                "stars": 0,
                "pushed_at": "2022-03-12 00:11:13+00:00",
                "created_at": "2020-01-03 19:52:54+00:00",
                "language": "Python",
                "frameworks": [
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": "generated_images",
                "sha": "abe34d227f0e6c1aad878714cb0bd83312497394",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mcclow12/wgan-gp-pytorch/tree/master/generated_images"
                    }
                },
                "num_files": 21
            },
            {
                "type": "code",
                "name": "main.py",
                "sha": "4dedbc51b48cc9218c7f74c0e2b6670e103c283d",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mcclow12/wgan-gp-pytorch/blob/master/main.py"
                    }
                },
                "size": 588
            },
            {
                "type": "code",
                "name": "models.py",
                "sha": "d946a745424bad1e79fa3f088780cbe5306a0327",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mcclow12/wgan-gp-pytorch/blob/master/models.py"
                    }
                },
                "size": 1336
            },
            {
                "type": "code",
                "name": "plots",
                "sha": "aa5ce9c072392cb71f5ba32d40d0a5ead5095944",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mcclow12/wgan-gp-pytorch/tree/master/plots"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "afb585c91e0afbccbbba79196a516a7222550c87",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mcclow12/wgan-gp-pytorch/blob/master/requirements.txt"
                    }
                },
                "size": 1005
            },
            {
                "type": "code",
                "name": "train.py",
                "sha": "6f9fb751742da089a78bd9ebb4e2120960a176ed",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mcclow12/wgan-gp-pytorch/blob/master/train.py"
                    }
                },
                "size": 5455
            },
            {
                "type": "code",
                "name": "utils.py",
                "sha": "97603ab91e9bc25adbb7013741a084d1f834134b",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/mcclow12/wgan-gp-pytorch/blob/master/utils.py"
                    }
                },
                "size": 2497
            }
        ]
    },
    "authors": [
        {
            "name": "mcclow12",
            "github_id": "mcclow12"
        }
    ],
    "tags": [],
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/mcclow12/wgan-gp-pytorch",
            "stars": 0,
            "issues": true,
            "readme": "# wgan-gp-pytorch\n\nThis repository contains a PyTorch implementation of the Wasserstein GAN with gradient penalty. \n\nWGAN works to minimize the Wasserstein-1 distance between the generated data distribution and the real data distribution. This technique offers more stability than the original GAN. \n\nWGAN-GP improves upon WGAN by using a gradient penalty heuristic rather than weight clipping to encourage the discriminator to be locally 1-Lipschitz near the data manifold.\n\nFor more details, see the original paper https://arxiv.org/pdf/1704.00028.pdf.\n\nSome direction was taken from these repositories: https://github.com/arturml/pytorch-wgan-gp, https://github.com/EmilienDupont/wgan-gp. In particular, the Generator and Discriminator architectures were taken from the first repository.\n\n## Usage\n\nTo run the code, adjust the hyperparameters in main.py and run\n\n```\npython3 main.py\n```\n\nThis will train the GAN on the MNIST dataset. The necessary dependencies are contained in requirements.txt.\n\n## Generated Images \n\nHere are some samples from the distribution of the generator:\n\n![alt text](./generated_images/epoch_180.png)\n\n## Plots\n\nThese are the plots for the generator loss, discriminator loss, and gradient penalty. These agree with the plots given in this repository: https://github.com/arturml/pytorch-wgan-gp. \n\n![alt text](./plots/losses.png)\n",
            "readme_url": "https://github.com/mcclow12/wgan-gp-pytorch",
            "frameworks": [
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "Improved Training of Wasserstein GANs",
            "arxiv": "1704.00028",
            "year": 2017,
            "url": "http://arxiv.org/abs/1704.00028v3",
            "abstract": "Generative Adversarial Networks (GANs) are powerful generative models, but\nsuffer from training instability. The recently proposed Wasserstein GAN (WGAN)\nmakes progress toward stable training of GANs, but sometimes can still generate\nonly low-quality samples or fail to converge. We find that these problems are\noften due to the use of weight clipping in WGAN to enforce a Lipschitz\nconstraint on the critic, which can lead to undesired behavior. We propose an\nalternative to clipping weights: penalize the norm of gradient of the critic\nwith respect to its input. Our proposed method performs better than standard\nWGAN and enables stable training of a wide variety of GAN architectures with\nalmost no hyperparameter tuning, including 101-layer ResNets and language\nmodels over discrete data. We also achieve high quality generations on CIFAR-10\nand LSUN bedrooms.",
            "authors": [
                "Ishaan Gulrajani",
                "Faruk Ahmed",
                "Martin Arjovsky",
                "Vincent Dumoulin",
                "Aaron Courville"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "MNIST"
            },
            {
                "name": "CIFAR-10"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9999949551101185,
        "task": "Image Generation",
        "task_prob": 0.992075084890013
    }
}