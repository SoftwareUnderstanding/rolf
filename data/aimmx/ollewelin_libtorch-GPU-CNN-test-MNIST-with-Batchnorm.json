{
    "visibility": {
        "visibility": "public"
    },
    "name": "libtorch-GPU-CNN-test-MNIST-with-Batchnorm",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "ollewelin",
                "owner_type": "User",
                "name": "libtorch-GPU-CNN-test-MNIST-with-Batchnorm",
                "url": "https://github.com/ollewelin/libtorch-GPU-CNN-test-MNIST-with-Batchnorm",
                "stars": 2,
                "pushed_at": "2021-10-24 10:11:51+00:00",
                "created_at": "2021-03-29 16:07:44+00:00",
                "language": "C++",
                "frameworks": []
            },
            {
                "type": "code",
                "name": "5_classes_flowers.png",
                "sha": "5f71317d1d27ebcff298360d397f24a27e017015",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ollewelin/libtorch-GPU-CNN-test-MNIST-with-Batchnorm/blob/main/5_classes_flowers.png"
                    }
                },
                "size": 604862
            },
            {
                "type": "code",
                "name": "CMakeLists.txt",
                "sha": "e7e70d929e8b20f0e93a800d7f16072ec54c1bdf",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ollewelin/libtorch-GPU-CNN-test-MNIST-with-Batchnorm/blob/main/CMakeLists.txt"
                    }
                },
                "size": 543
            },
            {
                "type": "code",
                "name": "Experiment_files_not_work_well",
                "sha": "bfcae4ede17ace9cf6f5266940050abda7d4cc87",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ollewelin/libtorch-GPU-CNN-test-MNIST-with-Batchnorm/tree/main/Experiment_files_not_work_well"
                    }
                },
                "num_files": 26
            },
            {
                "type": "code",
                "name": "Prepare_1_3_224_224_tensor_from_test_jpg.png",
                "sha": "d85f4303bddbc6d211b83c7bea559bb7b43f8c78",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ollewelin/libtorch-GPU-CNN-test-MNIST-with-Batchnorm/blob/main/Prepare_1_3_224_224_tensor_from_test_jpg.png"
                    }
                },
                "size": 569988
            },
            {
                "type": "code",
                "name": "Screenshot from 2021-04-09 22-15-18.png",
                "sha": "579ad2b056d4f5c38c3dc9fbdde0ac93d78db95c",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ollewelin/libtorch-GPU-CNN-test-MNIST-with-Batchnorm/blob/main/Screenshot from 2021-04-09 22-15-18.png"
                    }
                },
                "size": 412362
            },
            {
                "type": "code",
                "name": "develop backup main (copy).cpp",
                "sha": "dca8e8bb1266f009e08590861ad7b68288d49b19",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ollewelin/libtorch-GPU-CNN-test-MNIST-with-Batchnorm/blob/main/develop backup main (copy).cpp"
                    }
                },
                "size": 11562
            },
            {
                "type": "code",
                "name": "file_names.csv",
                "sha": "7f867fc157fd92c7116ca9e84ea8edc854fbf333",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ollewelin/libtorch-GPU-CNN-test-MNIST-with-Batchnorm/blob/main/file_names.csv"
                    }
                },
                "size": 2963
            },
            {
                "type": "code",
                "name": "file_names_5_classes_500_jpg_img.csv",
                "sha": "1eed2c7d4d9019de0c90feb970e65e2e7db5ba0c",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ollewelin/libtorch-GPU-CNN-test-MNIST-with-Batchnorm/blob/main/file_names_5_classes_500_jpg_img.csv"
                    }
                },
                "size": 65460
            },
            {
                "type": "code",
                "name": "main (3 classes OK copy).cpp",
                "sha": "76bd12ebf986630cf8262a03c773396aef5e9667",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ollewelin/libtorch-GPU-CNN-test-MNIST-with-Batchnorm/blob/main/main (3 classes OK copy).cpp"
                    }
                },
                "size": 13763
            },
            {
                "type": "code",
                "name": "main 5_classes.cpp",
                "sha": "1a523eb1082a56869f2119980df3dc36206653fe",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ollewelin/libtorch-GPU-CNN-test-MNIST-with-Batchnorm/blob/main/main 5_classes.cpp"
                    }
                },
                "size": 14852
            },
            {
                "type": "code",
                "name": "main color 56x56.cpp",
                "sha": "4d53e16a3a39952a8284086227cadf878be8e6f6",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ollewelin/libtorch-GPU-CNN-test-MNIST-with-Batchnorm/blob/main/main color 56x56.cpp"
                    }
                },
                "size": 14774
            },
            {
                "type": "code",
                "name": "main.cpp",
                "sha": "3e1a6807f7aff85b0a0f6c03a92515da801c7378",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ollewelin/libtorch-GPU-CNN-test-MNIST-with-Batchnorm/blob/main/main.cpp"
                    }
                },
                "size": 5806
            },
            {
                "type": "code",
                "name": "under construction main.cpp",
                "sha": "567a4df25af1081346e1b73346c3af3eb6ddc373",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ollewelin/libtorch-GPU-CNN-test-MNIST-with-Batchnorm/blob/main/under construction main.cpp"
                    }
                },
                "size": 8718
            }
        ]
    },
    "authors": [
        {
            "name": "Olle Welin",
            "github_id": "ollewelin"
        }
    ],
    "tags": [],
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/ollewelin/libtorch-GPU-CNN-test-MNIST-with-Batchnorm",
            "stars": 2,
            "issues": true,
            "readme": "# libtorch-GPU-CNN-test-MNIST-with-Batchnorm\nTest add batchnorm layers.\n\nWas modifyed this code with adding batchnorm layer between each convolution layers\n\nhttps://github.com/goldsborough/examples/tree/cpp/cpp/mnist\n\n### Youtube video\nhttps://www.youtube.com/watch?v=wLQbXEORgFA\n\n### MNIST datasets\n\n#### MNIST Fashion dataset\n\nhttps://github.com/zalandoresearch/fashion-mnist\n\n#### Or use the old MNIST digits dataset\n\nhttp://yann.lecun.com/exdb/mnist/\n\n### Without batch norm layers connected (on MNIST digits dataset)\n\n    Train Epoch: 10 [59584/60000] Loss: 0.0165\n    Test set: Average loss: 0.0429 | Accuracy: 0.987\n\n### With batch norm layer attached (on MNIST digits dataset)\n\n    Train Epoch: 10 [59584/60000] Loss: 0.0120\n    Test set: Average loss: 0.0315 | Accuracy: 0.989\n\n\n\nExample print out\n\n    Train Epoch: 10 [59584/60000] Loss: 0.0120\n    Test set: Average loss: 0.0315 | Accuracy: 0.989\n    Print Model weights parts of conv1 weights kernels\n    0.0714 -0.0887 -0.2127 -0.1545 -0.0813\n    0.1184  0.1395  0.0606  0.0129  0.0564\n    -0.0033  0.1634  0.2492  0.1134  0.0322\n    -0.0914 -0.0334  0.0359  0.1716  0.1377\n    -0.1568 -0.1173 -0.1753 -0.1878 -0.0052\n    [ CUDAFloatType{5,5} ]\n\n## To be continue.... code under development..\n### Continue exploring Libtorch C++ with OpenCV towards a plane simple ResNet-34 training from scrach with custom image dataset.\n\nThe code snippet :\n\n        under construction main.cpp\n        develop backup main (copy).cpp\n        ..\n\nI will try to do a (mid level programming) of a fix plain ResNet-34 (hardcoded ResNet-34 not generic ResNet-X with bottlenecks etc).\nToghether with custom data set using OpenCV for a classification of color images or video stream. Not need using torchvision for this yet.\n\n#### Prepare dataset tensor from abriarity size of test.jpg input image\n\nThe read_data() function adapt the test.jpg to a tensor with shape \n\n       Tensor [1, 3, 224, 224]\n        \nTo fit as input for the future ResNet-34 classification model\n\n![](Prepare_1_3_224_224_tensor_from_test_jpg.png)\n\n#### Flowers datasets from kaggle\n\nhttps://www.kaggle.com/alxmamaev/flowers-recognition\n\n#### Resnet paper\n\nPaper :\nFigure 3, resnet-34\n\nhttps://arxiv.org/pdf/1512.03385.pdf\n\n#### Excellent explanation of ResNet in general\n\nhttps://erikgaas.medium.com/resnet-torchvision-bottlenecks-and-layers-not-as-they-seem-145620f93096#_=_\n\n#### Disscusion regarding dataloader\n\nhttps://discuss.pytorch.org/t/libtorch-how-to-use-torch-datasets-for-custom-dataset/34221/2\n\nhttps://krshrimali.github.io/Training-Network-Using-Custom-Dataset-PyTorch-CPP/\n\nhttps://krshrimali.github.io/Custom-Data-Loading-Using-PyTorch-CPP-API/\n\n#### Disscusion regarding OpenCV -> Tensor and Tensor -> OpenCV\n\nhttps://discuss.pytorch.org/t/libtorch-c-convert-a-tensor-to-cv-mat-single-channel/47701/5\n\n### 5 classes test 5 diffrent flowers (4-conv layer network)\n\n![](5_classes_flowers.png)\n\n        main 5_classes.cpp\n        \n        file_names_5_classes_500_jpg_img.csv\n\n#### other links\n\nhttps://discuss.pytorch.org/t/libtorch-how-to-save-model-in-mnist-cpp-example/34234\n   \n   \n",
            "readme_url": "https://github.com/ollewelin/libtorch-GPU-CNN-test-MNIST-with-Batchnorm",
            "frameworks": []
        }
    ],
    "references": [
        {
            "title": "Deep Residual Learning for Image Recognition",
            "arxiv": "1512.03385",
            "year": 2015,
            "url": "http://arxiv.org/abs/1512.03385v1",
            "abstract": "Deeper neural networks are more difficult to train. We present a residual\nlearning framework to ease the training of networks that are substantially\ndeeper than those used previously. We explicitly reformulate the layers as\nlearning residual functions with reference to the layer inputs, instead of\nlearning unreferenced functions. We provide comprehensive empirical evidence\nshowing that these residual networks are easier to optimize, and can gain\naccuracy from considerably increased depth. On the ImageNet dataset we evaluate\nresidual nets with a depth of up to 152 layers---8x deeper than VGG nets but\nstill having lower complexity. An ensemble of these residual nets achieves\n3.57% error on the ImageNet test set. This result won the 1st place on the\nILSVRC 2015 classification task. We also present analysis on CIFAR-10 with 100\nand 1000 layers.\n  The depth of representations is of central importance for many visual\nrecognition tasks. Solely due to our extremely deep representations, we obtain\na 28% relative improvement on the COCO object detection dataset. Deep residual\nnets are foundations of our submissions to ILSVRC & COCO 2015 competitions,\nwhere we also won the 1st places on the tasks of ImageNet detection, ImageNet\nlocalization, COCO detection, and COCO segmentation.",
            "authors": [
                "Kaiming He",
                "Xiangyu Zhang",
                "Shaoqing Ren",
                "Jian Sun"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "MNIST"
            },
            {
                "name": "Fashion-MNIST"
            },
            {
                "name": "ImageNet"
            },
            {
                "name": "ImageNet Detection"
            },
            {
                "name": "ILSVRC 2015"
            },
            {
                "name": "CIFAR-10"
            },
            {
                "name": "COCO"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9999999597169958,
        "task": "Object Detection",
        "task_prob": 0.9825333181803099
    }
}