{
    "visibility": {
        "visibility": "public",
        "license": "GNU General Public License v3.0"
    },
    "name": "Simple StyleGan2 for Pytorch",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "ShreyasArthur",
                "owner_type": "User",
                "name": "StyleGAN-2-with-Urban-Plans",
                "url": "https://github.com/ShreyasArthur/StyleGAN-2-with-Urban-Plans",
                "stars": 0,
                "pushed_at": "2020-07-02 01:55:31+00:00",
                "created_at": "2020-07-02 01:48:36+00:00",
                "language": "Python",
                "license": "GNU General Public License v3.0",
                "frameworks": [
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "f288702d2fa16d3cdf0035b15a9fcbc552cd88e7",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ShreyasArthur/StyleGAN-2-with-Urban-Plans/blob/master/LICENSE"
                    }
                },
                "size": 35149
            },
            {
                "type": "code",
                "name": "bin",
                "sha": "9fbd482e730f7fc270a1e8fe665145925c28dac6",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ShreyasArthur/StyleGAN-2-with-Urban-Plans/tree/master/bin"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "build",
                "sha": "409b70afc7c661b57cb53692ec2711515b1b8e32",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ShreyasArthur/StyleGAN-2-with-Urban-Plans/tree/master/build"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "dist",
                "sha": "a635b130f8d886db7a6374aab7d35063f7b41810",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ShreyasArthur/StyleGAN-2-with-Urban-Plans/tree/master/dist"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "results",
                "sha": "cc6855765d8899d447a0af6a4d034084d070863d",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ShreyasArthur/StyleGAN-2-with-Urban-Plans/tree/master/results"
                    }
                },
                "num_files": 1
            },
            {
                "type": "code",
                "name": "samples",
                "sha": "337916746d9b737221ea7f0050e155cb8b468953",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ShreyasArthur/StyleGAN-2-with-Urban-Plans/tree/master/samples"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "setup.cfg",
                "sha": "9d5f797981b69a755547e7cf592e33a87675ad45",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ShreyasArthur/StyleGAN-2-with-Urban-Plans/blob/master/setup.cfg"
                    }
                },
                "size": 61
            },
            {
                "type": "code",
                "name": "setup.py",
                "sha": "7d594bae64403c4b9b8d65dd38c87be1b8aded9f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ShreyasArthur/StyleGAN-2-with-Urban-Plans/blob/master/setup.py"
                    }
                },
                "size": 1044
            },
            {
                "type": "code",
                "name": "stylegan2_pytorch.egg-info",
                "sha": "105bb80e773cf4fb8a28ac53169c66a5fb971a40",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ShreyasArthur/StyleGAN-2-with-Urban-Plans/tree/master/stylegan2_pytorch.egg-info"
                    }
                },
                "num_files": 5
            },
            {
                "type": "code",
                "name": "stylegan2_pytorch",
                "sha": "4167229e6394d6d4538678c81811a53da9f8f448",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/ShreyasArthur/StyleGAN-2-with-Urban-Plans/tree/master/stylegan2_pytorch"
                    }
                },
                "num_files": 2
            }
        ]
    },
    "authors": [
        {
            "name": "Shreyas Bhat",
            "github_id": "ShreyasArthur"
        }
    ],
    "tags": [],
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/ShreyasArthur/StyleGAN-2-with-Urban-Plans",
            "stars": 0,
            "issues": true,
            "readme": "## Simple StyleGan2 for Pytorch\n[![PyPI version](https://badge.fury.io/py/stylegan2-pytorch.svg)](https://badge.fury.io/py/stylegan2-pytorch)\n\nSimple working Pytorch implementation of Stylegan2 based on https://arxiv.org/abs/1912.04958\n\n## Install\n\nYou will need a machine with a GPU and CUDA installed. Then pip install the package like this\n\n```bash\n$ pip install stylegan2_pytorch\n```\n\nIf you are using a windows machine, the following commands reportedly works.\n\n```bash\n$ conda install pytorch torchvision -c python\n$ pip install stylegan2_pytorch\n```\n\n## Use\n\n```bash\n$ stylegan2_pytorch --data /path/to/images\n```\n\nThat's it. Sample images will be saved to `results/default` and models will be saved periodically to `models/default`.\n\n## Advanced Use\n\nYou can specify the name of your project with\n\n```bash\n$ stylegan2_pytorch --data /path/to/images --name my-project-name\n```\n\nYou can also specify the location where intermediate results and model checkpoints should be stored with\n\n```bash\n$ stylegan2_pytorch --data /path/to/images --name my-project-name --results_dir /path/to/results/dir --models_dir /path/to/models/dir\n```\n\nBy default, if the training gets cut off, it will automatically resume from the last checkpointed file. If you want to restart with new settings, just add a `new` flag\n\n```bash\n$ stylegan2_pytorch --new --data /path/to/images --name my-project-name --image-size 512 --batch-size 1 --gradient-accumulate-every 16 --network-capacity 10\n```\n\nOnce you have finished training, you can generate images from your latest checkpoint like so.\n\n```bash\n$ stylegan2_pytorch  --generate\n```\n\nTo generate a video of a interpolation through two random points in latent space.\n\n```bash\n$ stylegan2_pytorch --generate-interpolation\n```\n\nTo save each individual frame of the interpolation\n\n```bash\n$ stylegan2_pytorch --generate-interpolation --save-frames\n```\n\nIf a previous checkpoint contained a better generator, (which often happens as generators start degrading towards the end of training), you can load from a previous checkpoint with another flag\n\n```bash\n$ stylegan2_pytorch --generate --load-from {checkpoint number}\n```\n\n## Low amounts of Training Data\n\nIn the past, GANs needed a lot of data to learn how to generate well. The faces model took **70k** high quality images from Flickr, as an example.\n\nHowever, in the month of May 2020, researchers all across the world independently converged on a simple technique to reduce that number to as low as **1-2k**. That simple idea was to differentiably augment all images, generated or real, going into the discriminator during training.\n\nIf one were to augment at a low enough probability, the augmentations will not 'leak' into the generations.\n\nIn the setting of low data, you can use the feature with a simple flag.\n\n```bash\n# find a suitable probability between 0. -> 0.7 at maximum\n$ stylegan2_pytorch --data ./data --aug-prob 0.25\n```\n\n## Attention\n\nThis framework also allows for you to add an efficient form of self-attention to the designated layers of the discriminator (and the symmetric layer of the generator), which will greatly improve results. The more attention you can afford, the better!\n\n```python\n# add self attention after the output of layer 1\n$ stylegan2_pytorch --data ./data --attn-layers 1\n```\n\n```python\n# add self attention after the output of layers 1 and 2\n# do not put a space after the comma in the list!\n$ stylegan2_pytorch --data ./data --attn-layers [1,2]\n```\n\n## Bonus\n\nTraining on transparent images\n\n```bash\n$ stylegan2_pytorch --data ./transparent/images/path --transparent\n```\n\nUsing half precision for greater memory savings\n\n```bash\n$ stylegan2_pytorch --data ./data --image-size 256 --fp16\n```\n\n## Memory considerations\n\nThe more GPU memory you have, the bigger and better the image generation will be. Nvidia recommended having up to 16GB for training 1024x1024 images. If you have less than that, there are a couple settings you can play with so that the model fits.\n\n```bash\n$ stylegan2_pytorch --data /path/to/data \\\n    --batch-size 3 \\\n    --gradient-accumulate-every 5 \\\n    --network-capacity 16\n```\n\n1. Batch size - You can decrease the `batch-size` down to 1, but you should increase the `gradient-accumulate-every` correspondingly so that the mini-batch the network sees is not too small. This may be confusing to a layperson, so I'll think about how I would automate the choice of `gradient-accumulate-every` going forward.\n\n2. Network capacity - You can decrease the neural network capacity to lessen the memory requirements. Just be aware that this has been shown to degrade generation performance.\n\n## Deployment on AWS\n\nBelow are some steps which may be helpful for deployment using Amazon Web Services. In order to use this, you will have\nto provision a GPU-backed EC2 instance. An appropriate instance type would be from a p2 or p3 series. I (iboates) tried\na p2.xlarge (the cheapest option) and it was quite slow, slower in fact than using Google Colab. More powerful instance\ntypes may be better but they are more expensive. You can read more about them\n[here](https://aws.amazon.com/ec2/instance-types/#Accelerated_Computing).\n\n### Setup steps\n\n1. Archive your training data and upload it to an S3 bucket\n2. Provision your EC2 instance (I used an Ubuntu AMI)\n3. Log into your EC2 instance via SSH\n4. Install the aws CLI client and configure it:\n\n```bash\nsudo snap install aws-cli --classic\naws configure\n```\n\nYou will then have to enter your AWS access keys, which you can retrieve from the management console under AWS\nManagement Console > Profile > My Security Credentials > Access Keys\n\nThen, run these commands, or maybe put them in a shell script and execute that:\n\n```bash\nmkdir data\ncurl -O https://bootstrap.pypa.io/get-pip.py\nsudo apt-get install python3-distutils\npython3 get-pip.py\npip3 install stylegan2_pytorch\nexport PATH=$PATH:/home/ubuntu/.local/bin\naws s3 sync s3://<Your bucket name> ~/data\ncd data\ntar -xf ../train.tar.gz\n```\n\nNow you should be able to train by simplying calling `stylegan2_pytorch [args]`.\n\nNotes:\n\n* If you have a lot of training data, you may need to provision extra block storage via EBS.\n* Also, you may need to spread your data across multiple archives.\n* You should run this on a `screen` window so it won't terminate once you log out of the SSH session.\n\n## Experimental\n\n### Feature Quantization\n\nA recent paper reported improved results if intermediate representations of the discriminator are vector quantized. Although I have not noticed any dramatic changes, I have decided to add this as a feature, so other minds out there can investigate. To use, you have to specify which layer(s) you would like to vector quantize. Default dictionary size is `256` and is also tunable.\n\n```python\n# feature quantize layers 1 and 2, with a dictionary size of 512 each\n# do not put a space after the comma in the list!\n$ stylegan2_pytorch --data ./data --fq-layers [1,2] --fq-dict-size 512\n```\n\n### Contrastive Loss Regularization\n\nI have tried contrastive learning on the discriminator (in step with the usual GAN training) and possibly observed improved stability and quality of final results. You can turn on this experimental feature with a simple flag as shown below.\n\n```python\n$ stylegan2_pytorch --data ./data --cl-reg\n```\n\n### Non-constant 4x4 Block\n\nBy default, the StyleGAN architecture styles a constant learned 4x4 block as it is progressively upsampled. This is an experimental feature that makes it so the 4x4 block is learned from the style vector `w` instead.\n\n```python\n$ stylegan2_pytorch --data ./data --no-const\n```\n\n\n## Appreciation\n\nThank you to Matthew Mann for his inspiring [simple port](https://github.com/manicman1999/StyleGAN2-Tensorflow-2.0) for Tensorflow 2.0\n\n## References\n\n```bibtex\n@article{Karras2019stylegan2,\n  title   = {Analyzing and Improving the Image Quality of {StyleGAN}},\n  author  = {Tero Karras and Samuli Laine and Miika Aittala and Janne Hellsten and Jaakko Lehtinen and Timo Aila},\n  journal = {CoRR},\n  volume  = {abs/1912.04958},\n  year    = {2019},\n}\n```\n\n```bibtex\n@misc{zhao2020feature,\n    title   = {Feature Quantization Improves GAN Training},\n    author  = {Yang Zhao and Chunyuan Li and Ping Yu and Jianfeng Gao and Changyou Chen},\n    year    = {2020}\n}\n```\n\n```bibtex\n@misc{chen2020simple,\n    title   = {A Simple Framework for Contrastive Learning of Visual Representations},\n    author  = {Ting Chen and Simon Kornblith and Mohammad Norouzi and Geoffrey Hinton},\n    year    = {2020}\n}\n```\n\n```bibtex\n@article{,\n  title     = {Oxford 102 Flowers},\n  author    = {Nilsback, M-E. and Zisserman, A., 2008},\n  abstract  = {A 102 category dataset consisting of 102 flower categories, commonly occuring in the United Kingdom. Each class consists of 40 to 258 images. The images have large scale, pose and light variations.}\n}\n```\n\n```bibtex\n@article{afifi201911k,\n  title   = {11K Hands: gender recognition and biometric identification using a large dataset of hand images},\n  author  = {Afifi, Mahmoud},\n  journal = {Multimedia Tools and Applications}\n}\n```\n\n```bibtex\n@misc{zhang2018selfattention,\n    title   = {Self-Attention Generative Adversarial Networks},\n    author  = {Han Zhang and Ian Goodfellow and Dimitris Metaxas and Augustus Odena},\n    year    = {2018},\n    eprint  = {1805.08318},\n    archivePrefix = {arXiv}\n}\n```\n\n```bibtex\n@article{shen2019efficient,\n  author    = {Zhuoran Shen and\n               Mingyuan Zhang and\n               Haiyu Zhao and\n               Shuai Yi and\n               Hongsheng Li},\n  title     = {Efficient Attention: Attention with Linear Complexities},\n  journal   = {CoRR},  \n  year      = {2018},\n  url       = {http://arxiv.org/abs/1812.01243},\n}\n```\n\n```bibtex\n@misc{zhao2020image,\n    title  = {Image Augmentations for GAN Training},\n    author = {Zhengli Zhao and Zizhao Zhang and Ting Chen and Sameer Singh and Han Zhang},\n    year   = {2020},\n    eprint = {2006.02595},\n    archivePrefix = {arXiv}\n}\n```\n\n```bibtex\n@misc{karras2020training,\n    title   = {Training Generative Adversarial Networks with Limited Data},\n    author  = {Tero Karras and Miika Aittala and Janne Hellsten and Samuli Laine and Jaakko Lehtinen and Timo Aila},\n    year    = {2020},\n    eprint  = {2006.06676},\n    archivePrefix = {arXiv},\n    primaryClass = {cs.CV}\n}\n```\n",
            "readme_url": "https://github.com/ShreyasArthur/StyleGAN-2-with-Urban-Plans",
            "frameworks": [
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "Efficient Attention: Attention with Linear Complexities",
            "arxiv": "1812.01243",
            "year": 2018,
            "url": "http://arxiv.org/abs/1812.01243v9",
            "abstract": "Dot-product attention has wide applications in computer vision and natural\nlanguage processing. However, its memory and computational costs grow\nquadratically with the input size. Such growth prohibits its application on\nhigh-resolution inputs. To remedy this drawback, this paper proposes a novel\nefficient attention mechanism equivalent to dot-product attention but with\nsubstantially less memory and computational costs. Its resource efficiency\nallows more widespread and flexible integration of attention modules into a\nnetwork, which leads to better accuracies. Empirical evaluations demonstrated\nthe effectiveness of its advantages. Efficient attention modules brought\nsignificant performance boosts to object detectors and instance segmenters on\nMS-COCO 2017. Further, the resource efficiency democratizes attention to\ncomplex models, where high costs prohibit the use of dot-product attention. As\nan exemplar, a model with efficient attention achieved state-of-the-art\naccuracies for stereo depth estimation on the Scene Flow dataset. Code is\navailable at https://github.com/cmsflash/efficient-attention.",
            "authors": [
                "Zhuoran Shen",
                "Mingyuan Zhang",
                "Haiyu Zhao",
                "Shuai Yi",
                "Hongsheng Li"
            ]
        },
        {
            "title": "Analyzing and Improving the Image Quality of StyleGAN",
            "arxiv": "1912.04958",
            "year": 2019,
            "url": "http://arxiv.org/abs/1912.04958v2",
            "abstract": "The style-based GAN architecture (StyleGAN) yields state-of-the-art results\nin data-driven unconditional generative image modeling. We expose and analyze\nseveral of its characteristic artifacts, and propose changes in both model\narchitecture and training methods to address them. In particular, we redesign\nthe generator normalization, revisit progressive growing, and regularize the\ngenerator to encourage good conditioning in the mapping from latent codes to\nimages. In addition to improving image quality, this path length regularizer\nyields the additional benefit that the generator becomes significantly easier\nto invert. This makes it possible to reliably attribute a generated image to a\nparticular network. We furthermore visualize how well the generator utilizes\nits output resolution, and identify a capacity problem, motivating us to train\nlarger models for additional quality improvements. Overall, our improved model\nredefines the state of the art in unconditional image modeling, both in terms\nof existing distribution quality metrics as well as perceived image quality.",
            "authors": [
                "Tero Karras",
                "Samuli Laine",
                "Miika Aittala",
                "Janne Hellsten",
                "Jaakko Lehtinen",
                "Timo Aila"
            ]
        },
        {
            "year": "2019",
            "volume": "abs/1912.04958",
            "journal": "CoRR",
            "author": [
                "Karras, Tero",
                "Laine, Samuli",
                "Aittala, Miika",
                "Hellsten, Janne",
                "Lehtinen, Jaakko",
                "Aila, Timo"
            ],
            "title": "Analyzing and Improving the Image Quality of {StyleGAN}",
            "ENTRYTYPE": "article",
            "ID": "Karras2019stylegan2",
            "authors": [
                "Karras, Tero",
                "Laine, Samuli",
                "Aittala, Miika",
                "Hellsten, Janne",
                "Lehtinen, Jaakko",
                "Aila, Timo"
            ]
        },
        {
            "year": "2020",
            "author": [
                "Zhao, Yang",
                "Li, Chunyuan",
                "Yu, Ping",
                "Gao, Jianfeng",
                "Chen, Changyou"
            ],
            "title": "Feature Quantization Improves GAN Training",
            "ENTRYTYPE": "misc",
            "ID": "zhao2020feature",
            "authors": [
                "Zhao, Yang",
                "Li, Chunyuan",
                "Yu, Ping",
                "Gao, Jianfeng",
                "Chen, Changyou"
            ]
        },
        {
            "year": "2020",
            "author": [
                "Chen, Ting",
                "Kornblith, Simon",
                "Norouzi, Mohammad",
                "Hinton, Geoffrey"
            ],
            "title": "A Simple Framework for Contrastive Learning of Visual Representations",
            "ENTRYTYPE": "misc",
            "ID": "chen2020simple",
            "authors": [
                "Chen, Ting",
                "Kornblith, Simon",
                "Norouzi, Mohammad",
                "Hinton, Geoffrey"
            ]
        },
        {
            "journal": "Multimedia Tools and Applications",
            "author": [
                "Afifi, Mahmoud"
            ],
            "title": "11K Hands: gender recognition and biometric identification using a large dataset of hand images",
            "ENTRYTYPE": "article",
            "ID": "afifi201911k",
            "authors": [
                "Afifi, Mahmoud"
            ]
        },
        {
            "archiveprefix": "arXiv",
            "eprint": "1805.08318",
            "year": "2018",
            "author": [
                "Zhang, Han",
                "Goodfellow, Ian",
                "Metaxas, Dimitris",
                "Odena, Augustus"
            ],
            "title": "Self-Attention Generative Adversarial Networks",
            "ENTRYTYPE": "misc",
            "ID": "zhang2018selfattention",
            "authors": [
                "Zhang, Han",
                "Goodfellow, Ian",
                "Metaxas, Dimitris",
                "Odena, Augustus"
            ]
        },
        {
            "url": "http://arxiv.org/abs/1812.01243",
            "year": "2018",
            "journal": "CoRR",
            "title": "Efficient Attention: Attention with Linear Complexities",
            "author": [
                "Shen, Zhuoran",
                "Zhang, Mingyuan",
                "Zhao, Haiyu",
                "Yi, Shuai",
                "Li, Hongsheng"
            ],
            "ENTRYTYPE": "article",
            "ID": "shen2019efficient",
            "authors": [
                "Shen, Zhuoran",
                "Zhang, Mingyuan",
                "Zhao, Haiyu",
                "Yi, Shuai",
                "Li, Hongsheng"
            ]
        },
        {
            "archiveprefix": "arXiv",
            "eprint": "2006.02595",
            "year": "2020",
            "author": [
                "Zhao, Zhengli",
                "Zhang, Zizhao",
                "Chen, Ting",
                "Singh, Sameer",
                "Zhang, Han"
            ],
            "title": "Image Augmentations for GAN Training",
            "ENTRYTYPE": "misc",
            "ID": "zhao2020image",
            "authors": [
                "Zhao, Zhengli",
                "Zhang, Zizhao",
                "Chen, Ting",
                "Singh, Sameer",
                "Zhang, Han"
            ]
        },
        {
            "primaryclass": "cs.CV",
            "archiveprefix": "arXiv",
            "eprint": "2006.06676",
            "year": "2020",
            "author": [
                "Karras, Tero",
                "Aittala, Miika",
                "Hellsten, Janne",
                "Laine, Samuli",
                "Lehtinen, Jaakko",
                "Aila, Timo"
            ],
            "title": "Training Generative Adversarial Networks with Limited Data",
            "ENTRYTYPE": "misc",
            "ID": "karras2020training",
            "authors": [
                "Karras, Tero",
                "Aittala, Miika",
                "Hellsten, Janne",
                "Laine, Samuli",
                "Lehtinen, Jaakko",
                "Aila, Timo"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "Oxford 102 Flowers"
            },
            {
                "name": "Amazon"
            },
            {
                "name": "COCO 2017"
            },
            {
                "name": "MS-COCO"
            },
            {
                "name": "COCO"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9988798707165539,
        "task": "Image Generation",
        "task_prob": 0.9705095547425534
    }
}