{
    "visibility": {
        "visibility": "public",
        "license": "Apache License 2.0"
    },
    "name": "A PyTorch implementation of MobileNetV3",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "kuan-wang",
                "owner_type": "User",
                "name": "pytorch-mobilenet-v3",
                "url": "https://github.com/kuan-wang/pytorch-mobilenet-v3",
                "stars": 676,
                "pushed_at": "2019-06-23 01:31:09+00:00",
                "created_at": "2019-05-08 18:16:57+00:00",
                "language": "Python",
                "description": "MobileNetV3 in pytorch and ImageNet pretrained models",
                "license": "Apache License 2.0",
                "frameworks": [
                    "PyTorch"
                ]
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "261eeb9e9f8b2b4b0d119366dda99c6fd7d35c64",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/kuan-wang/pytorch-mobilenet-v3/blob/master/LICENSE"
                    }
                },
                "size": 11357
            },
            {
                "type": "code",
                "name": "mobilenetv3.py",
                "sha": "0c10d10e82e33c3ba227a07e06642fb280e41f06",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/kuan-wang/pytorch-mobilenet-v3/blob/master/mobilenetv3.py"
                    }
                },
                "size": 8475
            }
        ]
    },
    "authors": [
        {
            "name": "Kuan Wang",
            "github_id": "kuan-wang"
        }
    ],
    "tags": [
        "pytorch",
        "imagenet",
        "mobilenet",
        "classification",
        "mobilenetv3",
        "mobilenetv2"
    ],
    "description": "MobileNetV3 in pytorch and ImageNet pretrained models",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/kuan-wang/pytorch-mobilenet-v3",
            "stars": 676,
            "issues": true,
            "readme": "# A PyTorch implementation of MobileNetV3\n\nThis is a PyTorch implementation of MobileNetV3 architecture as described in the paper [Searching for MobileNetV3](https://arxiv.org/pdf/1905.02244.pdf).\n\nSome details may be different from the original paper, welcome to discuss and help me figure it out.\n\n- **[NEW]** The pretrained model of small version mobilenet-v3 is online, accuracy achieves the same as paper. \n- **[NEW]** The paper updated on 17 May, so I renew the codes for that, but there still are some bugs.\n- **[NEW]** I remove the se before the global avg_pool (the paper may add it in error), and now the model size is close to paper.\n\n## Training & Accuracy\n### training setting:\n\n1. number of epochs: 150\n2. learning rate schedule: cosine learning rate, initial lr=0.05\n3. weight decay: 4e-5\n4. remove dropout\n5. batch size: 256\n\n### MobileNetV3 large\n|              | Madds     | Parameters | Top1-acc  | Pretrained Model                                             |\n| -----------  | --------- | ---------- | --------- | ------------------------------------------------------------ |\n| Offical 1.0  | 219 M     | 5.4  M     | 75.2%     | -                                                            |\n| Offical 0.75 | 155 M     | 4    M     | 73.3%     | -                                                            |\n| Ours    1.0  | 224 M     | 5.48 M     | 72.8%     | - |\n| Ours    0.75 | 148 M     | 3.91 M     |  -        | - |\n\n### MobileNetV3 small\n|              | Madds     | Parameters | Top1-acc  | Pretrained Model                                             |\n| -----------  | --------- | ---------- | --------- | ------------------------------------------------------------ |\n| Offical 1.0  | 66  M     | 2.9  M     | 67.4%     | -                                                            |\n| Offical 0.75 | 44  M     | 2.4  M     | 65.4%     | -                                                            |\n| Ours    1.0  | 63  M     | 2.94 M     | 67.4%     |  [[google drive](https://drive.google.com/open?id=1lCsN3kWXAu8C30bQrD2JTZ7S2v4yt23C)] |\n| Ours    0.75 | 46  M     | 2.38 M     | -         | - |\n\n## Usage\nPretrained models are still training ...\n```python\n    # pytorch 1.0.1\n    # large\n    net_large = mobilenetv3(mode='large')\n    # small\n    net_small = mobilenetv3(mode='small')\n    state_dict = torch.load('mobilenetv3_small_67.4.pth.tar')\n    net_small.load_state_dict(state_dict)\n```\n\n## Data Pre-processing\n\nI used the following code for data pre-processing on ImageNet:\n\n```python\nnormalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],\n                                 std=[0.229, 0.224, 0.225])\n\ninput_size = 224\ntrain_loader = torch.utils.data.DataLoader(\n    datasets.ImageFolder(\n    traindir, transforms.Compose([\n        transforms.RandomResizedCrop(input_size),\n        transforms.RandomHorizontalFlip(),\n        transforms.ToTensor(),\n        normalize,\n    ])),\n    batch_size=batch_size, shuffle=True,\n    num_workers=n_worker, pin_memory=True)\n\nval_loader = torch.utils.data.DataLoader(\n    datasets.ImageFolder(valdir, transforms.Compose([\n        transforms.Resize(int(input_size/0.875)),\n        transforms.CenterCrop(input_size),\n        transforms.ToTensor(),\n        normalize,\n    ])),\n    batch_size=batch_size, shuffle=False,\n    num_workers=n_worker, pin_memory=True)\n```\n\n",
            "readme_url": "https://github.com/kuan-wang/pytorch-mobilenet-v3",
            "frameworks": [
                "PyTorch"
            ]
        }
    ],
    "references": [
        {
            "title": "Searching for MobileNetV3",
            "arxiv": "1905.02244",
            "year": 2019,
            "url": "http://arxiv.org/abs/1905.02244v5",
            "abstract": "We present the next generation of MobileNets based on a combination of\ncomplementary search techniques as well as a novel architecture design.\nMobileNetV3 is tuned to mobile phone CPUs through a combination of\nhardware-aware network architecture search (NAS) complemented by the NetAdapt\nalgorithm and then subsequently improved through novel architecture advances.\nThis paper starts the exploration of how automated search algorithms and\nnetwork design can work together to harness complementary approaches improving\nthe overall state of the art. Through this process we create two new MobileNet\nmodels for release: MobileNetV3-Large and MobileNetV3-Small which are targeted\nfor high and low resource use cases. These models are then adapted and applied\nto the tasks of object detection and semantic segmentation. For the task of\nsemantic segmentation (or any dense pixel prediction), we propose a new\nefficient segmentation decoder Lite Reduced Atrous Spatial Pyramid Pooling\n(LR-ASPP). We achieve new state of the art results for mobile classification,\ndetection and segmentation. MobileNetV3-Large is 3.2\\% more accurate on\nImageNet classification while reducing latency by 15\\% compared to MobileNetV2.\nMobileNetV3-Small is 4.6\\% more accurate while reducing latency by 5\\% compared\nto MobileNetV2. MobileNetV3-Large detection is 25\\% faster at roughly the same\naccuracy as MobileNetV2 on COCO detection. MobileNetV3-Large LR-ASPP is 30\\%\nfaster than MobileNetV2 R-ASPP at similar accuracy for Cityscapes segmentation.",
            "authors": [
                "Andrew Howard",
                "Mark Sandler",
                "Grace Chu",
                "Liang-Chieh Chen",
                "Bo Chen",
                "Mingxing Tan",
                "Weijun Wang",
                "Yukun Zhu",
                "Ruoming Pang",
                "Vijay Vasudevan",
                "Quoc V. Le",
                "Hartwig Adam"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "ImageNet"
            },
            {
                "name": "Cityscapes"
            },
            {
                "name": "COCO"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9795168298688084,
        "task": "Image Classification",
        "task_prob": 0.8396984188877209
    }
}