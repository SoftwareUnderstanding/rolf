{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "Real-Time-Face-Mask-Detection-using-OpenCV-on-MacOS",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "amitgupta223",
                "owner_type": "User",
                "name": "Real-Time-Face-Mask-Detection-using-OpenCV-on-MacOS",
                "url": "https://github.com/amitgupta223/Real-Time-Face-Mask-Detection-using-OpenCV-on-MacOS",
                "stars": 2,
                "pushed_at": "2020-09-26 06:20:42+00:00",
                "created_at": "2020-09-25 08:06:17+00:00",
                "language": "Jupyter Notebook",
                "description": "Going to use OpenCV to do real-time face mask detection from a live stream via our webcam.",
                "license": "MIT License",
                "frameworks": [
                    "Keras",
                    "scikit-learn",
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "2701b74b074b496c1a10bec7a2aaadc92e595430",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/amitgupta223/Real-Time-Face-Mask-Detection-using-OpenCV-on-MacOS/blob/master/LICENSE"
                    }
                },
                "size": 1069
            },
            {
                "type": "code",
                "name": "Real-TimeFaceMaskDetection.ipynb",
                "sha": "e867a4d724afe325cd6ea849364244c54ba82ff9",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/amitgupta223/Real-Time-Face-Mask-Detection-using-OpenCV-on-MacOS/blob/master/Real-TimeFaceMaskDetection.ipynb"
                    }
                },
                "size": 3574
            },
            {
                "type": "code",
                "name": "Real-TimeFaceMaskDetection.py",
                "sha": "dc066d3f0f4376397cce040911cadb5697344c2f",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/amitgupta223/Real-Time-Face-Mask-Detection-using-OpenCV-on-MacOS/blob/master/Real-TimeFaceMaskDetection.py"
                    }
                },
                "size": 2142
            },
            {
                "type": "code",
                "name": "WithandWithoutMaskDetection.ipynb",
                "sha": "05c3d3fb914d9c8c3c7965978c013ccbe8527a32",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/amitgupta223/Real-Time-Face-Mask-Detection-using-OpenCV-on-MacOS/blob/master/WithandWithoutMaskDetection.ipynb"
                    }
                },
                "size": 226448
            },
            {
                "type": "code",
                "name": "haarcascade_frontalface_alt2.xml",
                "sha": "caa86f6c3d7f166bcde1cdd32dbf484477afc70b",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/amitgupta223/Real-Time-Face-Mask-Detection-using-OpenCV-on-MacOS/blob/master/haarcascade_frontalface_alt2.xml"
                    }
                },
                "size": 837462
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "faa5bb0e28ab09cf46d2e45681ee6994ed12f79e",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/amitgupta223/Real-Time-Face-Mask-Detection-using-OpenCV-on-MacOS/blob/master/requirements.txt"
                    }
                },
                "size": 174
            }
        ]
    },
    "trained_model": {
        "binaries": [
            {
                "type": "binary",
                "name": "mask_recog_ver2.h5",
                "sha": "f9cd321715046c578ab821f9f09d590be8f99079",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/amitgupta223/Real-Time-Face-Mask-Detection-using-OpenCV-on-MacOS/blob/master/mask_recog_ver2.h5"
                    }
                },
                "size": 11488344
            }
        ]
    },
    "authors": [
        {
            "name": "amitgupta223",
            "github_id": "amitgupta223"
        }
    ],
    "tags": [],
    "description": "Going to use OpenCV to do real-time face mask detection from a live stream via our webcam.",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/amitgupta223/Real-Time-Face-Mask-Detection-using-OpenCV-on-MacOS",
            "stars": 2,
            "issues": true,
            "readme": "# Real-Time-Face-Mask-Detection-using-OpenCV-on-MacOS\nGoing to use OpenCV to do real-time face mask detection from a live stream via my webcam on MacOS.\n\n# How to Access Webcam on MacOS\n\nCreate a virtual Environment on MacOS by just opening Terminal and then just run this command: 'source work/bin/activate' to activate virtual environment.\nAnd then put the all necessary file in that work directory to run the python file to access webcam.\n\npython3.7 -m venv work\n\nsource work/bin/activate\n\npip install opencv-python\n\nprint (\"OpenCV Version:\" )\n\nprint(cv2.__version__)\n\nLink: https://www.youtube.com/watch?v=nO3csmVyoOQ\n\n# Mask Detection using MobilenetV2\n\nIn the present scenario due to Covid-19, there is no efficient face mask detection applications which are now in high demand for transportation means, densely populated areas, residential districts, large-scale manufacturers and other enterprises to ensure safety. Also, the absence of large datasets of \u2018with_mask\u2019 images has made this task more cumbersome and challenging.\n\n# Technology Used\n\nOpenCV: https://opencv.org/\n\nMobileNetV2: https://arxiv.org/abs/1801.04381\n\nKeras: https://keras.io/\n\nTensorFlow: https://www.tensorflow.org/\n\n# Haarcascade classifiers: \n\nHaar Cascade is a machine learning object detection algorithm used to identify objects in an image or video and based on the concept of features proposed by Paul Viola and Michael Jones in their paper \"Rapid Object Detection using a Boosted Cascade of Simple Features\" in 2001.\n\nLink: https://docs.opencv.org/3.4/db/d28/tutorial_cascade_classifier.html\n\n# DataSet: \n\nThis dataset consists of 3835 images belonging to two classes:\n\nwith_mask: 1916 images\nwithout_mask: 1919 images\nThe images used were real images of faces wearing masks. The images were collected from the following sources:\n\nLink: https://drive.google.com/drive/folders/1XDte2DL2Mf_hw4NsmGst7QtYoU7sMBVG\n\n\n# Pretrained Model\n\nLink: https://drive.google.com/file/d/16uMH4YwdkA8sdnMlJNE7nv_tBJkX5eNe/view\n\n# Final Output:\n\n[![Watch the video](https://j.gifs.com/GvlZMQ.gif)]\n\n# Credits\n\nhttps://www.mygreatlearning.com/blog/real-time-face-detection/#sh1\n\nhttps://github.com/chandrikadeb7/Face-Mask-Detection/blob/master/README.md\n\nhttps://www.kaggle.com/mirzamujtaba/face-mask-detection\n\nhttps://www.mygreatlearning.com/blog/facial-recognition-using-python/\n\n",
            "readme_url": "https://github.com/amitgupta223/Real-Time-Face-Mask-Detection-using-OpenCV-on-MacOS",
            "frameworks": [
                "Keras",
                "scikit-learn",
                "TensorFlow"
            ]
        }
    ],
    "references": [
        {
            "title": "MobileNetV2: Inverted Residuals and Linear Bottlenecks",
            "arxiv": "1801.04381",
            "year": 2018,
            "url": "http://arxiv.org/abs/1801.04381v4",
            "abstract": "In this paper we describe a new mobile architecture, MobileNetV2, that\nimproves the state of the art performance of mobile models on multiple tasks\nand benchmarks as well as across a spectrum of different model sizes. We also\ndescribe efficient ways of applying these mobile models to object detection in\na novel framework we call SSDLite. Additionally, we demonstrate how to build\nmobile semantic segmentation models through a reduced form of DeepLabv3 which\nwe call Mobile DeepLabv3.\n  The MobileNetV2 architecture is based on an inverted residual structure where\nthe input and output of the residual block are thin bottleneck layers opposite\nto traditional residual models which use expanded representations in the input\nan MobileNetV2 uses lightweight depthwise convolutions to filter features in\nthe intermediate expansion layer. Additionally, we find that it is important to\nremove non-linearities in the narrow layers in order to maintain\nrepresentational power. We demonstrate that this improves performance and\nprovide an intuition that led to this design. Finally, our approach allows\ndecoupling of the input/output domains from the expressiveness of the\ntransformation, which provides a convenient framework for further analysis. We\nmeasure our performance on Imagenet classification, COCO object detection, VOC\nimage segmentation. We evaluate the trade-offs between accuracy, and number of\noperations measured by multiply-adds (MAdd), as well as the number of\nparameters",
            "authors": [
                "Mark Sandler",
                "Andrew Howard",
                "Menglong Zhu",
                "Andrey Zhmoginov",
                "Liang-Chieh Chen"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9999859310420482,
        "task": "Object Detection",
        "task_prob": 0.957998585793064
    },
    "training": {
        "datasets": [
            {
                "name": "COCO"
            },
            {
                "name": "ImageNet"
            }
        ]
    }
}