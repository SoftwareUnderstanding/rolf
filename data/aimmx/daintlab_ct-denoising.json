{
    "visibility": {
        "visibility": "public"
    },
    "name": "ct-denoising",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "daintlab",
                "owner_type": "Organization",
                "name": "ct-denoising",
                "url": "https://github.com/daintlab/ct-denoising",
                "stars": 8,
                "pushed_at": "2019-01-23 11:14:08+00:00",
                "created_at": "2018-09-14 08:05:08+00:00",
                "language": "Python",
                "frameworks": [
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": "CYCLEBASE",
                "sha": "2ffe6c7b8e5b0649c77227ee6c22b239857d169c",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/daintlab/ct-denoising/tree/master/CYCLEBASE"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "CYCLE_IDENTITY_GAN",
                "sha": "34a15fb9551662b3cc60430f80e43a64772fde20",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/daintlab/ct-denoising/tree/master/CYCLE_IDENTITY_GAN"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "RED_CNN",
                "sha": "cabf22792a4d9f69da187629f8854d21747573ec",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/daintlab/ct-denoising/tree/master/RED_CNN"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "WGAN_VGG",
                "sha": "db92e2a987bfac7d417f05dce80158ad5c69ae41",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/daintlab/ct-denoising/tree/master/WGAN_VGG"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "cyclegan",
                "sha": "cc0387239d42db17b77bcf6b5bc0c3fe270b6e1e",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/daintlab/ct-denoising/tree/master/cyclegan"
                    }
                },
                "num_files": 3
            },
            {
                "type": "code",
                "name": "inout_util.py",
                "sha": "bffb48673224a3ab1f68f3d55747301ea3c28602",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/daintlab/ct-denoising/blob/master/inout_util.py"
                    }
                },
                "size": 9753
            }
        ]
    },
    "authors": [
        {
            "name": "Sangheum Hwang",
            "email": "sangheum.hwang@gmail.com",
            "github_id": "beopst"
        },
        {
            "name": "HyeonGyu Yeo",
            "github_id": "hyeongyuy"
        },
        {
            "name": "Sinyu Jeong",
            "email": "shsy0404g@gmail.com",
            "github_id": "SSinyu"
        }
    ],
    "tags": [],
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/daintlab/ct-denoising",
            "stars": 8,
            "issues": true,
            "readme": "# ct-denoising\n## Denoising Model\n* RED_CNN\n>\t* paper :https://arxiv.org/ftp/arxiv/papers/1702/1702.00288.pdf\n* WGAN_VGG\n>\t* paper : https://arxiv.org/pdf/1708.00961.pdf\n>\t* original code:  \n>     * vgg : https://github.com/machrisaa/tensorflow-vgg  \n>     * WGAN : https://github.com/jiamings/wgan\n* CYCLEGAN\n>\t* paper : https://arxiv.org/abs/1703.10593\n>\t* original code: https://github.com/xhujoy/CycleGAN-tensorflow\n## I/O (DICOM file -> .npy)\n* Input data Directory  \n  * DICOM file extension = [<b>'.IMA'</b>, '.dcm']\n> $ os.path.join(dcm_path, patent_no, [LDCT_path|NDCT_path], '*.' + extension)\n\nThe dcm_path directory should look like:\n\n    dcm_path\n    \u251c\u2500\u2500 L067\n    \u2502   \u251c\u2500\u2500 quarter_3mm\n    \u2502   \u2502       \u251c\u2500\u2500 L067_QD_3_1.CT.0004.0001 ~ .IMA\n    \u2502   \u2502       \u251c\u2500\u2500 L067_QD_3_1.CT.0004.0002 ~ .IMA\n    \u2502   \u2502       \u2514\u2500\u2500 ...\n    \u2502   \u2514\u2500\u2500 full_3mm\n    \u2502           \u251c\u2500\u2500 L067_FD_3_1.CT.0004.0001 ~ .IMA\n    \u2502           \u251c\u2500\u2500 L067_FD_3_1.CT.0004.0002 ~ .IMA\n    \u2502           \u2514\u2500\u2500 ...\n    \u251c\u2500\u2500 L096\n    \u2502   \u251c\u2500\u2500 quarter_3mm\n    \u2502   \u2502       \u2514\u2500\u2500 ...\n    \u2502   \u2514\u2500\u2500 full_3mm\n    \u2502           \u2514\u2500\u2500 ...      \n    ...\n    \u2502\n    \u2514\u2500\u2500 L506\n        \u251c\u2500\u2500 quarter_3mm\n        \u2502       \u2514\u2500\u2500 ...\n        \u2514\u2500\u2500 full_3mm\n                \u2514\u2500\u2500 ...     \n\n## [Common] Main file(main.py) Parameters\n* Directory\n> * dcm_path : dicom file directory\n> * LDCT_path : LDCT image folder name\n> * NDCT_path : NDCT image folder name\n> * test_patient_no : test patient id list(p_id1,p_id2...) (train patient id : (patient id list - test patient id list)\n> * result : save result dir(check point, test, log, summary params)\n> * checkpoint_dir : save directory - trained model\n> * log_dir : save directory - tensoroard model\n> * test_npy_save_dir : save directory - test numpy file\n> * pretrained_vgg : pretrained vggnet directory(only WGAN_VGG)\n* Image info\n> * patch_size : patch size (WGAN_VGG, RED_CNN)\n> * whole_size : whole size\n> * img_channel : image channel\n> * img_vmax : max value\n> * img_vmin : min value\n* Train/Test\n> * phase : train | test\n* others\n> * is_mayo : summary ROI sample1,2\n> * save_freq : save a model every save_freq (iterations)\n> * print_freq : print_freq (iterations)\n> * continue_train : load the latest model: true, false\n> * gpu_no : visible devices(gpu no)\n",
            "readme_url": "https://github.com/daintlab/ct-denoising",
            "frameworks": [
                "TensorFlow"
            ]
        }
    ],
    "references": [
        {
            "title": "Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks",
            "arxiv": "1703.10593",
            "year": 2017,
            "url": "http://arxiv.org/abs/1703.10593v7",
            "abstract": "Image-to-image translation is a class of vision and graphics problems where\nthe goal is to learn the mapping between an input image and an output image\nusing a training set of aligned image pairs. However, for many tasks, paired\ntraining data will not be available. We present an approach for learning to\ntranslate an image from a source domain $X$ to a target domain $Y$ in the\nabsence of paired examples. Our goal is to learn a mapping $G: X \\rightarrow Y$\nsuch that the distribution of images from $G(X)$ is indistinguishable from the\ndistribution $Y$ using an adversarial loss. Because this mapping is highly\nunder-constrained, we couple it with an inverse mapping $F: Y \\rightarrow X$\nand introduce a cycle consistency loss to push $F(G(X)) \\approx X$ (and vice\nversa). Qualitative results are presented on several tasks where paired\ntraining data does not exist, including collection style transfer, object\ntransfiguration, season transfer, photo enhancement, etc. Quantitative\ncomparisons against several prior methods demonstrate the superiority of our\napproach.",
            "authors": [
                "Jun-Yan Zhu",
                "Taesung Park",
                "Phillip Isola",
                "Alexei A. Efros"
            ]
        },
        {
            "title": "Low Dose CT Image Denoising Using a Generative Adversarial Network with Wasserstein Distance and Perceptual Loss",
            "arxiv": "1708.00961",
            "year": 2017,
            "url": "http://arxiv.org/abs/1708.00961v2",
            "abstract": "In this paper, we introduce a new CT image denoising method based on the\ngenerative adversarial network (GAN) with Wasserstein distance and perceptual\nsimilarity. The Wasserstein distance is a key concept of the optimal transform\ntheory, and promises to improve the performance of the GAN. The perceptual loss\ncompares the perceptual features of a denoised output against those of the\nground truth in an established feature space, while the GAN helps migrate the\ndata noise distribution from strong to weak. Therefore, our proposed method\ntransfers our knowledge of visual perception to the image denoising task, is\ncapable of not only reducing the image noise level but also keeping the\ncritical information at the same time. Promising results have been obtained in\nour experiments with clinical CT images.",
            "authors": [
                "Qingsong Yang",
                "Pingkun Yan",
                "Yanbo Zhang",
                "Hengyong Yu",
                "Yongyi Shi",
                "Xuanqin Mou",
                "Mannudeep K. Kalra",
                "Ge Wang"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9999847565659686,
        "task": "Image-to-Image Translation",
        "task_prob": 0.9845464420799628
    }
}