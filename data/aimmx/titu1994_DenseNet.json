{
    "visibility": {
        "visibility": "public",
        "license": "MIT License"
    },
    "name": "Dense Net in Keras",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "titu1994",
                "owner_type": "User",
                "name": "DenseNet",
                "url": "https://github.com/titu1994/DenseNet",
                "stars": 711,
                "pushed_at": "2020-06-10 08:17:17+00:00",
                "created_at": "2016-11-08 11:53:02+00:00",
                "language": "Python",
                "description": "DenseNet implementation in Keras",
                "license": "MIT License",
                "frameworks": [
                    "Keras",
                    "scikit-learn",
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": ".idea",
                "sha": "81caf2174352969cd78323b634f67dfbecaa9736",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/DenseNet/tree/master/.idea"
                    }
                },
                "num_files": 8
            },
            {
                "type": "code",
                "name": "LICENSE",
                "sha": "20cbaf18fa60e2806ee080760b431956c8e19a39",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/DenseNet/blob/master/LICENSE"
                    }
                },
                "size": 1075
            },
            {
                "type": "code",
                "name": "cifar10.py",
                "sha": "3a548b1a28a327022bed765c1773974df89d9a19",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/DenseNet/blob/master/cifar10.py"
                    }
                },
                "size": 2825
            },
            {
                "type": "code",
                "name": "cifar100.py",
                "sha": "ed0ecc1e3df0f6df82670c90e10f705b274eb5dd",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/DenseNet/blob/master/cifar100.py"
                    }
                },
                "size": 2841
            },
            {
                "type": "code",
                "name": "densenet.py",
                "sha": "b84ea492e99b0c306ece344f749f989a01581b9b",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/DenseNet/blob/master/densenet.py"
                    }
                },
                "size": 38421
            },
            {
                "type": "code",
                "name": "densenet_fast.py",
                "sha": "78bd38136df57baede3860cf309467a836418b08",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/DenseNet/blob/master/densenet_fast.py"
                    }
                },
                "size": 5095
            },
            {
                "type": "code",
                "name": "imagenet_inference.py",
                "sha": "8bd0b78c13bb392308a1171794d1aec1c45a5e93",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/DenseNet/blob/master/imagenet_inference.py"
                    }
                },
                "size": 661
            },
            {
                "type": "code",
                "name": "images",
                "sha": "3232cfa8bc81638da1ad265fa3696214f9dad36b",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/DenseNet/tree/master/images"
                    }
                },
                "num_files": 4
            },
            {
                "type": "code",
                "name": "subpixel.py",
                "sha": "77f8051ac72f6a7f9b66581f17022c75b5a64cfd",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/DenseNet/blob/master/subpixel.py"
                    }
                },
                "size": 3553
            },
            {
                "type": "code",
                "name": "tensorflow_backend.py",
                "sha": "6ae2d75bd1459faed0ff58f38666f43c94d4aabd",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/DenseNet/blob/master/tensorflow_backend.py"
                    }
                },
                "size": 583
            },
            {
                "type": "code",
                "name": "theano_backend.py",
                "sha": "fd0104722d60e559dda541196960cc457fa59b78",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/DenseNet/blob/master/theano_backend.py"
                    }
                },
                "size": 932
            },
            {
                "type": "code",
                "name": "weights",
                "sha": "55c9f2dd07c0e88434c33bc504b145f6e00c52d4",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/DenseNet/tree/master/weights"
                    }
                },
                "num_files": 3
            }
        ]
    },
    "authors": [
        {
            "name": "Somshubra Majumdar",
            "email": "titu1994@gmail.com",
            "github_id": "titu1994"
        },
        {
            "name": "Bruno Guisard",
            "github_id": "bguisard"
        },
        {
            "name": "Andrew Hundt",
            "email": "ATHundt@gmail.com",
            "github_id": "ahundt"
        },
        {
            "name": "lininglouis",
            "github_id": "lininglouis"
        },
        {
            "name": "Lucas Gabriel Schneider",
            "email": "casdpa@gmail.com",
            "github_id": "schneiderl"
        }
    ],
    "tags": [
        "densenet",
        "densenet-model",
        "paper",
        "bottleneck",
        "deep-learning",
        "keras"
    ],
    "description": "DenseNet implementation in Keras",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/titu1994/DenseNet",
            "stars": 711,
            "issues": true,
            "readme": "# Dense Net in Keras\nDenseNet implementation of the paper [Densely Connected Convolutional Networks](https://arxiv.org/pdf/1608.06993v3.pdf) in Keras\n\nNow supports the more efficient DenseNet-BC (DenseNet-Bottleneck-Compressed) networks. Using the DenseNet-BC-190-40 model, \nit obtaines state of the art performance on CIFAR-10 and CIFAR-100\n\n# Architecture\nDenseNet is an extention to Wide Residual Networks. According to the paper: <br>\n```\nThe lth layer has l inputs, consisting of the feature maps of all preceding convolutional blocks. \nIts own feature maps are passed on to all L \u2212 l subsequent layers. This introduces L(L+1) / 2 connections \nin an L-layer network, instead of just L, as in traditional feed-forward architectures. \nBecause of its dense connectivity pattern, we refer to our approach as Dense Convolutional Network (DenseNet).\n```\n\nIt features several improvements such as :\n\n1. Dense connectivity : Connecting any layer to any other layer.\n2. Growth Rate parameter Which dictates how fast the number of features increase as the network becomes deeper.\n3. Consecutive functions : BatchNorm - Relu - Conv which is from the Wide ResNet paper and improvement from the ResNet paper.\n\nThe Bottleneck - Compressed DenseNets offer further performance benefits, such as reduced number of parameters, with similar or better performance. \n\n- Take into consideration the DenseNet-100-12 model, with nearly 7 million parameters against with the DenseNet-BC-100-12, with just 0.8 million parameters.\nThe BC model achieves 4.51 % error in comparison to the original models' 4.10 % error\n\n- The best original model, DenseNet-100-24 (27.2 million parameters) achieves 3.74 % error, whereas the DenseNet-BC-190-40 (25.6 million parameters) achieves\n3.46 % error which is a new state of the art performance on CIFAR-10.\n\nDense Nets have an architecture which can be shown in the following image from the paper: <br>\n<img src=\"https://github.com/titu1994/DenseNet/blob/master/images/dense_net.JPG?raw=true\">\n\n# Performance\nThe accuracy of DenseNet has been provided in the paper, beating all previous benchmarks in CIFAR 10, CIFAR 100 and SVHN <br>\n<img src=\"https://github.com/titu1994/DenseNet/blob/master/images/accuracy_densenet.JPG?raw=true\">\n\n# Usage\n\nImport the `densenet.py` script and use the `DenseNet(...)` method to create a custom DenseNet model with a variety of parameters.\n\nExamples : \n\n```\nimport densenet\n\n# 'th' dim-ordering or 'tf' dim-ordering\nimage_dim = (3, 32, 32) or image_dim = (32, 32, 3)\n\nmodel = densenet.DenseNet(classes=10, input_shape=image_dim, depth=40, growth_rate=12, \n\t\t\t  bottleneck=True, reduction=0.5)\n```\n\nOr, Import a pre-built DenseNet model for ImageNet, with some of these models having pre-trained weights (121, 161 and 169).\n\nExample : \n```\nimport densenet\n\n# 'th' dim-ordering or 'tf' dim-ordering\nimage_dim = (3, 224, 224) or image_dim = (224, 224, 3)\n\nmodel = densenet.DenseNetImageNet121(input_shape=image_dim)\n```\n\nWeights for the DenseNetImageNet121, DenseNetImageNet161 and DenseNetImageNet169 models are provided ([in the release tab](https://github.com/titu1994/DenseNet/releases)) and will be automatically downloaded when first called. They have been trained on ImageNet. The weights were ported from the repository https://github.com/flyyufelix/DenseNet-Keras.\n\n\n\n# Requirements\n\n- Keras\n- Theano (weights not tested) / Tensorflow (tested) / CNTK (weights not tested)\n- h5Py\n",
            "readme_url": "https://github.com/titu1994/DenseNet",
            "frameworks": [
                "Keras",
                "scikit-learn",
                "TensorFlow"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "SVHN"
            },
            {
                "name": "CIFAR-10"
            },
            {
                "name": "CIFAR-100"
            },
            {
                "name": "ImageNet"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.99999657296366,
        "task": "Image Classification",
        "task_prob": 0.9795413353919373
    }
}