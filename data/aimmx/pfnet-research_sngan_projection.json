{
    "visibility": {
        "visibility": "public",
        "license": "Other"
    },
    "name": "[//]: ",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "pfnet-research",
                "owner_type": "Organization",
                "name": "sngan_projection",
                "url": "https://github.com/pfnet-research/sngan_projection",
                "stars": 1006,
                "pushed_at": "2019-11-12 07:23:14+00:00",
                "created_at": "2018-02-02 09:35:34+00:00",
                "language": "Python",
                "description": "GANs with spectral normalization and projection discriminator",
                "license": "Other",
                "frameworks": [
                    "TensorFlow"
                ]
            },
            {
                "type": "code",
                "name": "LICENSE.md",
                "sha": "e474c46ca1aae7fb06f39b09732d70c3c2e9502d",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pfnet-research/sngan_projection/blob/master/LICENSE.md"
                    }
                },
                "size": 1080
            },
            {
                "type": "code",
                "name": "README_paper.md",
                "sha": "db53cc3e26e861c1099c4948b323ae20c2818100",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pfnet-research/sngan_projection/blob/master/README_paper.md"
                    }
                },
                "size": 5927
            },
            {
                "type": "code",
                "name": "__init__.py",
                "sha": "50a5ce018575a8c1c1fed7eee008928f14214249",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pfnet-research/sngan_projection/blob/master/__init__.py"
                    }
                },
                "size": 9
            },
            {
                "type": "code",
                "name": "configs",
                "sha": "472c93aaa01f69e990fe176f33db8943d84913ab",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pfnet-research/sngan_projection/tree/master/configs"
                    }
                },
                "num_files": 8
            },
            {
                "type": "code",
                "name": "datasets",
                "sha": "e6b0e17f9c8466ce39def366e751007a52272a6d",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pfnet-research/sngan_projection/tree/master/datasets"
                    }
                },
                "num_files": 5
            },
            {
                "type": "code",
                "name": "demo",
                "sha": "574b300562b5940ba339a24a67b0227907df05ee",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pfnet-research/sngan_projection/tree/master/demo"
                    }
                },
                "num_files": 7
            },
            {
                "type": "code",
                "name": "dis_models",
                "sha": "9de0eeab67aa9ea929f26e6c9cc43eb4b6fc0a2a",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pfnet-research/sngan_projection/tree/master/dis_models"
                    }
                },
                "num_files": 6
            },
            {
                "type": "code",
                "name": "evaluation.py",
                "sha": "5e025fb2032769aa045d5feb5e63f2e53976eaca",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pfnet-research/sngan_projection/blob/master/evaluation.py"
                    }
                },
                "size": 8909
            },
            {
                "type": "code",
                "name": "evaluations",
                "sha": "054e0537414f470cfea1449efb0b639723db22ed",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pfnet-research/sngan_projection/tree/master/evaluations"
                    }
                },
                "num_files": 6
            },
            {
                "type": "code",
                "name": "gen_models",
                "sha": "c42584b0ace407eadbe13d0f340f8891fbb5941d",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pfnet-research/sngan_projection/tree/master/gen_models"
                    }
                },
                "num_files": 7
            },
            {
                "type": "code",
                "name": "requirements.txt",
                "sha": "ab7e7f97e6db4a59b53f5ed0e29bec29c0bbe520",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pfnet-research/sngan_projection/blob/master/requirements.txt"
                    }
                },
                "size": 131
            },
            {
                "type": "code",
                "name": "requirements_paper.txt",
                "sha": "df464164f7b9375966bcea69a1225b7397d40561",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pfnet-research/sngan_projection/blob/master/requirements_paper.txt"
                    }
                },
                "size": 148
            },
            {
                "type": "code",
                "name": "source",
                "sha": "cbdf498d207e27d25b9afeaad3f3b590b8c51b8f",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pfnet-research/sngan_projection/tree/master/source"
                    }
                },
                "num_files": 6
            },
            {
                "type": "code",
                "name": "train.py",
                "sha": "85e1e4f9b63c0e080d1f42af9a84e1b9d40b40d8",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pfnet-research/sngan_projection/blob/master/train.py"
                    }
                },
                "size": 6035
            },
            {
                "type": "code",
                "name": "train_mn.py",
                "sha": "b030a128b0e2800eb6117f5d88ddadde4d6f326c",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pfnet-research/sngan_projection/blob/master/train_mn.py"
                    }
                },
                "size": 6996
            },
            {
                "type": "code",
                "name": "updater.py",
                "sha": "0257bd05c03c7abea4f5eda6f835876d41d2d0d8",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/pfnet-research/sngan_projection/blob/master/updater.py"
                    }
                },
                "size": 3334
            }
        ]
    },
    "authors": [
        {
            "name": "Takeru Miyato",
            "email": "takeru.miyato@gmail.com",
            "github_id": "takerum"
        },
        {
            "name": "Mert Bulent Sariyildiz",
            "github_id": "mbsariyildiz"
        }
    ],
    "tags": [],
    "description": "GANs with spectral normalization and projection discriminator",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/pfnet-research/sngan_projection",
            "stars": 1006,
            "issues": true,
            "readme": "[//]: <links>\n[sngans]: https://openreview.net/forum?id=B1QRgziT-\n[pcgans]: https://openreview.net/forum?id=ByS1VpgRZ\n\n# GANs with spectral normalization and projection discriminator\n*NOTE: The setup and example code in this README are for training GANs on **single GPU**.*\n*The models are smaller than the ones used in the [papers](https://github.com/pfnet-research/sngan_projection/#references).*\n*Please go to [**link**](https://github.com/pfnet-research/sngan_projection/blob/master/README_paper.md) if you are looking for how to reproduce the results in the papers.* \n\n<img src=\"https://github.com/pfnet-research/sngan_projection/blob/master/demo/dog_and_cat_1x1_long.gif\" width=\"128\">\n\nOfficial Chainer implementation for conditional image generation on ILSVRC2012 dataset (ImageNet) with [spectral normalization][sngans] and [projection discrimiantor][pcgans]. \n\n### Demo movies\n\nConsecutive category morphing movies:\n- (5x5 panels 128px images) https://www.youtube.com/watch?v=q3yy5Fxs7Lc  \n- (10x10 panels 128px images) https://www.youtube.com/watch?v=83D_3WXpPjQ\n\n### Other materials\n- [Generated images](https://drive.google.com/drive/folders/1ZzQctZ-loDf9wHJHX90xNN02-_BCYtB-?usp=sharing)\n  - from the model trained on all ImageNet images (1K categories): [[128px]](https://drive.google.com/drive/folders/1Mr-fYW0-9QbwKYlIaiFUtgcN6n9qhY8l?usp=sharing)\n  - from the model trained on dog and cat images (143 categories): [[64px]](https://drive.google.com/drive/folders/1RVJCDrSSHaoHKiSP9iCaiiimQoq42rQu?usp=sharing) [[128px]](https://drive.google.com/drive/folders/1yA3xWJqWRvhnhkvJsKF3Xbb-2LO4JrJw?usp=sharing) [[256px]](https://drive.google.com/drive/folders/1ejixDbK5gMtuPltr8kY_dIqMwsqGzt6a?usp=sharing)\n- [Pretrained models](https://drive.google.com/drive/folders/1xZoL48uFOCnTxNGdknEYqE5YX0ZyoUej?usp=sharing)\n- [Movies](https://drive.google.com/drive/folders/1yhV8_VbOcs2rkiMTstO4RHqp4YRnzg6c?usp=sharing)\n- 4 corners category morph.\n\n<img src=\"https://github.com/pfnet-research/sngan_projection/blob/master/demo/interpolated_images_24.png\" width=\"432\"> <img src=\"https://github.com/pfnet-research/sngan_projection/blob/master/demo/interpolated_images_3x3.png\" width=\"432\"> \n\n### References\n- Takeru Miyato, Toshiki Kataoka, Masanori Koyama, Yuichi Yoshida. *Spectral Normalization for Generative Adversarial Networks*. ICLR2018. [OpenReview][sngans]\n- Takeru Miyato, Masanori Koyama. *cGANs with Projection Discriminator*. ICLR2018. [OpenReview][pcgans]\n\n## Setup\n\n### Install required python libraries:\n\n`pip install -r requirements.txt`\n### Download ImageNet dataset:\nPlease download ILSVRC2012 dataset from http://image-net.org/download-images\n\n### Preprocess dataset:\n```\ncd datasets\nIMAGENET_TRAIN_DIR=/path/to/imagenet/train/ # path to the parent directory of category directories named \"n0*******\".\nPREPROCESSED_DATA_DIR=/path/to/save_dir/\nbash preprocess.sh $IMAGENET_TRAIN_DIR $PREPROCESSED_DATA_DIR\n# Make the list of image-label pairs for all images (1000 categories, 1281167 images).\npython imagenet.py $PREPROCESSED_DATA_DIR\n# Make the list of image-label pairs for dog and cat images (143 categories, 180373 images). \npython imagenet_dog_and_cat.py $PREPROCESSED_DATA_DIR\n```\n### Download inception model: \n\n`python source/inception/download.py --outfile=datasets/inception_model`\n\n## Training examples\n\n### Spectral normalization + projection discriminator for 64x64 dog and cat images:\n```\nLOGDIR=/path/to/logdir\nCONFIG=configs/sn_projection_dog_and_cat_64.yml\npython train.py --config=$CONFIG --results_dir=$LOGDIR --data_dir=$PREPROCESSED_DATA_DIR\n```\n- [pretrained model](https://drive.google.com/drive/folders/1KfhQo84fvWUtYQlRVAWf0nswf6X1nawh?usp=sharing)\n- [generated images at 250K iterations](https://drive.google.com/drive/u/1/folders/1RVJCDrSSHaoHKiSP9iCaiiimQoq42rQu)\n- Examples of 64x64 generated images:\n<img src=\"https://github.com/pfnet-research/sngan_projection/blob/master/demo/images_dog_and_cat_64.jpg\">\n\n### Spectral normalization + projection discriminator for 64x64 all ImageNet images:\n```\nLOGDIR=/path/to/logdir\nCONFIG=configs/sn_projection_64.yml\npython train.py --config=$CONFIG --results_dir=$LOGDIR --data_dir=$PREPROCESSED_DATA_DIR\n```\n\n## Evaluation examples\n(If you want to use pretrained models for the image generation, please download the model from [link](https://drive.google.com/drive/folders/1xZoL48uFOCnTxNGdknEYqE5YX0ZyoUej?usp=sharing) and set the `snapshot` argument to the path to the downloaded pretrained model file (.npz).)\n\n### Generate images\n```\npython evaluations/gen_images.py --config=$CONFIG --snapshot=${LOGDIR}/ResNetGenerator_<iterations>.npz --results_dir=${LOGDIR}/gen_images\n```\n\n### Generate category morphing images\nRegarding the index-category correspondence, please see [1K ImageNet](https://drive.google.com/drive/u/1/folders/1Mr-fYW0-9QbwKYlIaiFUtgcN6n9qhY8l) or [143 dog and cat ImageNet](https://drive.google.com/drive/u/1/folders/1yA3xWJqWRvhnhkvJsKF3Xbb-2LO4JrJw).\n```\npython evaluations/gen_interpolated_images.py --n_zs=10 --n_intp=10 --classes $CATEGORY1 $CATEGORY2 --config=$CONFIG --snapshot=${LOGDIR}/ResNetGenerator_<iterations>.npz --results_dir=${LOGDIR}/gen_morphing_images\n```\n\n### Calculate inception score (with the original OpenAI implementation)\n```\npython evaluations/calc_inception_score.py --config=$CONFIG --snapshot=${LOGDIR}/ResNetGenerator_<iterations>.npz --results_dir=${LOGDIR}/inception_score --splits=10 --tf\n```\n\n",
            "readme_url": "https://github.com/pfnet-research/sngan_projection",
            "frameworks": [
                "TensorFlow"
            ]
        }
    ],
    "training": {
        "datasets": [
            {
                "name": "ImageNet"
            },
            {
                "name": "MORPH"
            }
        ]
    },
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9999970369188447,
        "task": "Image Generation",
        "task_prob": 0.9839154443759243
    }
}