{
    "visibility": {
        "visibility": "public"
    },
    "name": "Super Resolution using Generative Adversarial Networks",
    "definition": {
        "code": [
            {
                "type": "repo",
                "repo_type": "github",
                "owner": "titu1994",
                "owner_type": "User",
                "name": "Super-Resolution-using-Generative-Adversarial-Networks",
                "url": "https://github.com/titu1994/Super-Resolution-using-Generative-Adversarial-Networks",
                "stars": 281,
                "pushed_at": "2017-03-13 18:30:37+00:00",
                "created_at": "2016-10-12 10:14:51+00:00",
                "language": "Python",
                "description": "An implementation of SRGAN model in Keras",
                "frameworks": [
                    "Keras",
                    "TensorFlow",
                    "Theano"
                ]
            },
            {
                "type": "code",
                "name": ".idea",
                "sha": "c1988594374a896524df6962b2e916aabe97d5dc",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/tree/master/.idea"
                    }
                },
                "num_files": 8
            },
            {
                "type": "code",
                "name": "architecture",
                "sha": "b772ea69c8adf7fd3631d6ab0e78ebda455438c9",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/tree/master/architecture"
                    }
                },
                "num_files": 2
            },
            {
                "type": "code",
                "name": "keras_ops.py",
                "sha": "54a7a81fb8aa7bc6bae6c04d6e02979878262edd",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/blob/master/keras_ops.py"
                    }
                },
                "size": 9462
            },
            {
                "type": "code",
                "name": "layers.py",
                "sha": "1623465409bb99504a63ac87c120151efd66f6c6",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/blob/master/layers.py"
                    }
                },
                "size": 4151
            },
            {
                "type": "code",
                "name": "loss.py",
                "sha": "68a3dc21bf168c64370aa181ab86ef5bddbf1795",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/blob/master/loss.py"
                    }
                },
                "size": 3583
            },
            {
                "type": "code",
                "name": "models.py",
                "sha": "b6a887179c50b9bba2b8d3bfc15b41c330cf8b94",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/blob/master/models.py"
                    }
                },
                "size": 35577
            },
            {
                "type": "code",
                "name": "tests",
                "sha": "348220b602e4b5b29f9b25600bef71cfd9401acb",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/tree/master/tests"
                    }
                },
                "num_files": 5
            },
            {
                "type": "code",
                "name": "visualize.py",
                "sha": "8e79fe97330a8974c08368bb92e25cd17dc476e0",
                "filetype": "file",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/blob/master/visualize.py"
                    }
                },
                "size": 1077
            },
            {
                "type": "code",
                "name": "weights",
                "sha": "315411b37ff83acc05277871e94f402d89a6dd6a",
                "filetype": "dir",
                "connection": {
                    "name": "github_url",
                    "source": {
                        "url": "https://github.com/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/tree/master/weights"
                    }
                },
                "num_files": 1
            }
        ]
    },
    "authors": [
        {
            "name": "Somshubra Majumdar",
            "email": "titu1994@gmail.com",
            "github_id": "titu1994"
        }
    ],
    "tags": [],
    "description": "An implementation of SRGAN model in Keras",
    "extraction": [
        {
            "type": "github",
            "url": "https://github.com/titu1994/Super-Resolution-using-Generative-Adversarial-Networks",
            "stars": 281,
            "issues": true,
            "readme": "# Super Resolution using Generative Adversarial Networks\n\nThis is an implementation of the SRGAN model proposed in the paper [Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial\nNetwork](https://arxiv.org/pdf/1609.04802v2.pdf) in Keras. Note that this project is a work in progress.\n\nA simplified view of the model can be seen as below: <br>\n<img src=\"https://github.com/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/blob/master/architecture/SRGAN-simple-architecture.jpg?raw=true\" width=40% height=50%>\n\n# Implementation Details\n\nThe SRGAN model is built in stages within models.py. Initially, only the SR-ResNet model is created, to which the VGG network is appended \nto create the pre-training model. The VGG weights are freezed as we will not update these weights.\n\nIn the pre-train mode:\n\n1. The discriminator model is not attached to the entire network. Therefore it is only the SR + VGG model that will be pretrained first.\n2. During pretraining, the VGG perceptual losses will be used to train (using the ContentVGGRegularizer) and TotalVariation loss (using \nTVRegularizer). No other loss (MSE, Binary crosss entropy, Discriminator) will be applied.\n3. Content Regularizer loss will be applied to the VGG Convolution 2-2 layer\n\n1. After pre training the SR + VGG model, we will pretrain the discriminator model. \n2. During discriminator pretraining, model is Generaor + Discriminator. Only binary cross entropy loss is used to train the Discriminator network.\n\nIn the full train mode:\n\n1. The discriminator model is attached to the entire network. Therefore it creates the SR + GAN + VGG model (SRGAN)\n2. Discriminator loss is also added to the VGGContentLoss and TVLoss.\n3. Content regularizer loss is applied to the VGG Convolution 5-3 layer. (VGG 16 is used instead of 19 for now)\n\n# Usage\nCurrently, models.py contains most of the code to train and create the models. To use different modes, uncomment the parts of the code that you need.\n\nNote the difference between the *_network objects and *_model objects. \n- The *_network objects refer to the helper classes which create and manage the Keras models, load and save weights and \nset whether the model can be trained or not.\n- The *_models objects refer to the underlying Keras model. \n\n**Note**: The training images need to be stored in a subdirectory. Assume the path to the images is `/path-to-dir/path-to-sub-dir/*.png`, then simply write the path as `coco_path = /path-to-dir`. If this does not work, try `coco_path = /path-to-dir/` with a trailing slash (/)\n\nTo just create the pretrain model:\n```\nsrgan_network = SRGANNetwork(img_width=32, img_height=32, batch_size=1)\nsrgan_model = srgan_network.build_srgan_pretrain_model()\n\n# Plot the model\nfrom keras.utils.visualize_util import plot\nplot(srgan_model, to_file='SRGAN.png', show_shapes=True)\n```\n\nTo pretrain the SR network:\n```\nsrgan_network = SRGANNetwork(img_width=32, img_height=32, batch_size=1)\nsrgan_network.pre_train_srgan(iamges_path, nb_epochs=1, nb_images=50000)\n```\n\n** NOTE **: There may be many cases where generator initializations may lead to completely solid validation images.\n Please check the first few iterations to see if the validation images are not solid images.\n\nTo counteract this, a pretrained generator model has been provided, from which you can restart training.\nTherefore the model can continue learning without hitting a bad initialization.\n\nTo pretrain the Discriminator  network:\n```\nsrgan_network = SRGANNetwork(img_width=32, img_height=32, batch_size=1)\nsrgan_network.pre_train_discriminator(iamges_path, nb_epochs=1, nb_images=50000, batchsize=16)\n```\n\nTo train the full network (Does NOT work properly right now, Discriminator is not correctly trained):\n```\nsrgan_network = SRGANNetwork(img_width=32, img_height=32, batch_size=1)\nsrgan_network.train_full_model(coco_path, nb_images=80000, nb_epochs=10)\n```\n\n# Benchmarks\nCurrently supports validation agains Set5, Set14 and BSD 100 dataset images. To download the images, each of the 3 dataset have scripts called download_*.py which must be run before running benchmark_test.py test.\n\nCurrent Scores (Due to RGB grid and Blurred restoration):\n\n**SR ResNet:**\n- Set5 : Average PSNR of Set5 validation images : 22.1211430348\n- Set14 : Average PSNR of Set5 validation images : 20.3971611357\n- BSD100 : Average PSNR of BSD100 validation images : 20.9544390316\n\n# Drawbacks:\n- Since keras has internal checks for batch size, we have to bypass an internal keras check called check_array_length(),\nwhich checks the input and output batch sizes. As we provide the original images to Input 2, batch size doubles. \nThis causes an assertion error in internal keras code. For now, we rewrite the fit logic of keras in keras_training_ops.py and use \nthe bypass fit functions.\n- For some reason, the Deconvolution networks are not learning the upscaling function properly. This causes grids to form throughout the \nupscaled image. This is possibly due to the large (4x) upscaling procedure, but the Twitter team was able to do it.\n\n# Plans\nThe codebase is currently very chaotic, since I am focusing on correct implementation before making the project better. Therefore,\nexpect the code to drastically change over commits. \n\nSome things I am currently trying out:\n- [x] Training the discriminator model separately properly.\n- [x] Training the discriminator using soft labels and adversarial loss.\n- [x] Properly train SRGAN (SR ResNet + VGG + Discriminator) model.\n- [x] Fix the pixel grid formation when upscaling the image. (With Nearest Neighbour Upscaling).\n- [x] Replacing the 2 deconv layers for a nearest neighbour upsampling layers.\n- [ ] Improve docs & instructions\n\n# Discussion\nThere is an ongoing discussion at https://github.com/fchollet/keras/issues/3940 where I detail some of the outputs and attempts to correct \nthe errors.\n\n# Requirements\n- Theano (master branch)\n- Keras 1.2.0 +\n\n",
            "readme_url": "https://github.com/titu1994/Super-Resolution-using-Generative-Adversarial-Networks",
            "frameworks": [
                "Keras",
                "TensorFlow",
                "Theano"
            ]
        }
    ],
    "domain": {
        "domain_type": "Computer Vision",
        "domain_prob": 0.9999787472913714,
        "task": "Image Classification",
        "task_prob": 0.7510240325813577
    }
}