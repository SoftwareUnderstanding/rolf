{
    "syntactic": [
        "probability",
        "projection method",
        "inference",
        "convolutional neural networks",
        "java",
        "parallelism",
        "long short term memory neural networks",
        "recurrent neural networks"
    ],
    "semantic": [
        "probability",
        "projection method",
        "inference",
        "probabilistic inference",
        "java",
        "parallelism"
    ],
    "union": [
        "probability",
        "projection method",
        "inference",
        "convolutional neural networks",
        "probabilistic inference",
        "java",
        "parallelism",
        "long short term memory neural networks",
        "recurrent neural networks"
    ],
    "enhanced": [
        "mathematics",
        "incompressible flow",
        "inference engines",
        "neural networks",
        "bayesian methods",
        "probability distributions",
        "object oriented programming",
        "computer programming languages",
        "high level languages",
        "parallel programming"
    ],
    "explanation": {
        "projection method": [
            "projection",
            "projection method"
        ],
        "java": [
            "jdk",
            "java"
        ],
        "convolutional neural networks": [
            "cnn"
        ],
        "recurrent neural networks": [
            "rnn"
        ],
        "long short term memory neural networks": [
            "lstm"
        ],
        "probability": [
            "probability",
            "map probability",
            "probability function"
        ],
        "inference": [
            "perform inference",
            "inference batch_size_infer",
            "inference batch_size_infer inference",
            "inference batch",
            "score inference",
            "inference",
            "batch_size_infer inference",
            "inference choice",
            "inference parameter"
        ],
        "parallelism": [
            "parallelism",
            "size parallelism"
        ],
        "probabilistic inference": [
            "perform inference",
            "inference batch_size_infer",
            "inference batch_size_infer inference",
            "inference batch",
            "score inference",
            "inference",
            "batch_size_infer inference",
            "inference choice",
            "inference parameter"
        ],
        "mathematics": [
            "probability",
            "map probability",
            "probability function"
        ],
        "incompressible flow": [
            "projection",
            "projection method"
        ],
        "inference engines": [
            "perform inference",
            "inference batch_size_infer",
            "inference batch_size_infer inference",
            "inference batch",
            "score inference",
            "inference",
            "batch_size_infer inference",
            "inference choice",
            "inference parameter"
        ],
        "neural networks": [
            "lstm",
            "rnn",
            "cnn"
        ],
        "bayesian methods": [
            "perform inference",
            "inference batch_size_infer",
            "inference batch_size_infer inference",
            "inference batch",
            "score inference",
            "inference",
            "batch_size_infer inference",
            "inference choice",
            "inference parameter"
        ],
        "probability distributions": [
            "perform inference",
            "inference batch_size_infer",
            "inference batch_size_infer inference",
            "inference batch",
            "score inference",
            "inference",
            "batch_size_infer inference",
            "inference choice",
            "inference parameter"
        ],
        "object oriented programming": [
            "jdk",
            "java"
        ],
        "computer programming languages": [
            "jdk",
            "java"
        ],
        "high level languages": [
            "jdk",
            "java"
        ],
        "parallel programming": [
            "parallelism",
            "size parallelism"
        ]
    }
}