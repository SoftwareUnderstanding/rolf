

### Fathoming Gödel

### By Jim Spinosa

Published by Jim Spinosa at Smashwords

Copyright 2015

Dedicated to Steven G. Spinosa: "The Spinner Cares" and

Anthony "Adventure" Bille

Smashwords Edition, License Notes: This e-book is licensed for your personal enjoyment only. This e-book may not be re-sold or given away to other people. If you would like to share this book with another person, please purchase an additional copy for each person. If you're reading this book and did not purchase it, or it was not purchased for your use only, then please return to smashwords.com and purchase your own copy. Thank you for respecting the hard work of this author. _Fathoming Gödel_ is a free book.

Contents

Introduction

Part I- Ignis Fatuus

Part II- Nostalgie de la boue

Part III- Stick to one's last

Part IV- Caramel perihelion of nihilism

Section A- No more winklepickers

Section B- Etymology or entomology

Conclusion

References- Friends of Paraclete

Endnotes- Parthian Shot

Introduction

_Fathoming Gödel_ is an examination of Kurt Gödel's 1931paper _:_ _On formally undecidable propositions of_ _Principia_ _Mathematica_ _and related systems I_

The translation being used for this critique of Gödel's1931 paper is by Martin Hirzel. It is available at: http://www.research.ibm.com/people/h/hirzel/ papers/canon00-goedel.pdf. The translation is dated November 27, 2000. The paper is 22 pages in length, and Hirzel states, "This document is a translation of a large part of Gödel's proof . . . This translation omits all footnotes from the original, and only contains sections 1 and 2 (out of four)."1 The omitted sections are entitled "Generalizations" and "Implications for the nature of consistency." The two translated sections are entitled: "1−Introduction," which is two pages in length and "2−Main Result," which is 15 pages in length. The "Main Result" is divided into seven subsections: "Definitions," "Gödel-numbers," "Primitive recursion," "Expressing metamathematical concepts," "Denotability and provability," "Undecidibility theorem" and "Discussion." In order to more easily understand this short e-book _Fathoming Gödel,_ it is highly recommended that the reader download Martin Hirzel's translation of a "large part of Gödel's proof." The reader should keep the translation handy as he will probably have many occasions to refer to it in order to clarify many of the notions put forth in _Fathoming Gödel._ One of the advantages of having the translation handy is that in moments of frustration the reader can always mutter to himself "it's not just gibberish; it's gibberish squared." Actually, it is essential that the reader have a translation of Gödel's 1931 paper handy in order for _Fathoming Gödel_ to make any sense at all. Perhaps, no book has been as dependent as _Fathoming Gödel_ is on an outside source for disclosing its meaning. The dependence of (Herbert) Marshall McLuhan's _Gutenberg Galaxy_ on outside sources (plural) to disclose its meaning is similar, yet not quite the same.

The reason the words _Principia_ _Mathematica_ are underlined in the title of Kurt Gödel's 1931 paper is because the words refer to the title of a book by Bertrand Russell and Alfred North Whitehead.

The conclusion reached in _Fathoming Gödel_ is that Gödel's 1931 paper is a shell game. It is based on several errors that are well camouflaged. Some shortcomings in the paper are openly admitted although they are downplayed, and errors are also produced in an effort to force a particular conclusion. This critique is limited to Gödel's first incompleteness theorem since that is the point at which Martin Hirzel's translation ends.

Torkel Franzén, in his book _Gödel's Theorem: An Incomplete Guide to Its Use and Abuse_ defines Gödel's first incompleteness theorem. On page 16 of his book, he writes, "Any consistent formal system _S_ within which a certain amount of elementary arithmetic can be carried out is incomplete with regard to statements of elementary arithmetic: here are such statements which can neither be proved, nor disproved in _S_."2

How should the reader prepare himself to examine Gödel's proof? This author would often stand on his driveway in the quiet of the evening in the late spring and early summer and listen to a faint sound he heard emanating from the large trees bordering the side of his yard. He believed he could hear caterpillars munching on the leaves of the red oak trees. But as he thought about the biology and physics involved in hearing caterpillars munch on leaves from such a distance, he reached a conclusion that was 180 degrees from his original supposition. Instead, he concluded he was hearing a fecal rain.

Part I- Ignis Fatuus

Gödel's paper is the description of a formal system he denotes with the letter _P_. Among other things it includes the natural numbers and the number zero. The first error occurs in subsection "2.1−Definitions." Gödel introduces the term _"sign of type n"_ where _n_ can stand for the individual natural numbers 1, 2, 3, etc. The category, _sign of type n,_ includes both _number-signs_ and _variables_. Specifically the sub-category of _sign of type n_ denoted as _sign of type 1_ includes both _number signs_ and _variables._ _Number-signs_ are Gödel's term for the natural numbers including zero, which are considered constants in standard mathematics. So the sub-category _sign of type 1_ includes both contants and variables. In Gödel's system, constants have an almost entirely different definition.

It will be helpful to re-familiarize ourselves with some standard mathematical terms. A constant is either an integer or a variable whose domain is strictly limited. The domain of a variable that is a constant must be a set with only one member. An example of a domain with only one member is the following: States of the United States whose name begins with the letter _"D."_ Integers include the positive and negative whole numbers and zero. The domain of a variable is different from its solution set. The solution set is all the values of the variable that make a particular formula true. The solution set to a particular formula may often have only one member. A variable's domain includes all the possible solutions to a formula regardless of whether they are true or false. The distinction between a constant and a variable is well defined in standard mathematics.

In Gödel's system _P_ the distinction is ambiguous. There are two possibilities for a _sign of type n_ when 1 is substituted for _n._ That is there are two possibilities for a _sign of type 1._ On page 4 Gödel states, "In the first case we call such a sign a _number-sign._ "3 The designation for the "second case" is not made explicit. A _sign of type 1_ includes _number-signs_ , which we would interpret in standard mathematics as the natural numbers plus zero, i.e., constants. In addition, a _sign of type 1_ includes _something_ _else_ that is not explicitly defined, but it may be a _variable of type 1_. In subsection "2.1−Definitions" Gödel ambiguously delineates the definitions of _sign of type 1_ (which includes _number-signs_ and _something else_ ) and _variables of type 1_. The _variables of type 1_ in Gödel's system are not variables whose domains are sets with only one member. If they were variables whose domains were sets with only one member, then that alone would spell the end of his proof. Terms that would be considered in standard mathematics as either constants or variables in the usual sense, i.e., variables whose domain is larger than a set with one member are ambiguously included in the same grouping, which is called a _sign of type 1_ in Gödel's system _P._ This ambiguity is codified by definition. The ambiguous relationship between a _sign of type 1_ and a _variable of type 1_ is central to Gödel's proof.

An excerpt from "2.1−Definitions" of several paragraphs in length, translated from the original paper by M. Hirzel, should demonstrate the ambiguity of the situation.

"The _basic signs_ of system _P_ are the following:

I. Constant: "~" (not), " " (or), " " (for all), "0" (zero), " _succ_ " (the successor of), "(", ")" (parentheses).

II. _Variable of type one_ (for individuals, i.e., natural numbers including 0): "x1", " _y_ 1", " _z_ 1" . . .

_Variables of type two_ (for classes of individuals): " _x_ 2", " _y_ 2", " _z_ 2", . . .

_Variables of type three_ (for classes of classes of individuals) " _x_ 3", " _y_ 3", " _z_ 3" , . . .

And so on for every natural number as type. . . .

By a _sign of type 1_ we understand a combination of signs of the form: _a, succ(a), succ(succ(a)), succ(succ(succ(a))), . . ._ etc., where _a_ is either 0 or a variable of type 1. In the first case we call such a sign a _number-sign._ For _n_ > 1 we will understand by a _sign of type n_ a _variable of type n_."4

The key phrase is "where _a_ is either 0 or _a variable of type 1._ _"_ And there is the ambiguity. Gödel never explains what he will call a _sign of_ _type 1_ that is a member of the "second case" where _a_ is a _variable of type 1._ The first case is when _a_ is 0. The first case produces _number-signs._ What does the second case produce? The second case is when _a_ is a _variable of type 1._ Again, what does the second case produce? He skips over the "second case" and moves on to define a _sign of type n_ where _n_ > 1. Gödel never explicitly states that the category a _sign of type 1_ includes both _number-signs_ (constants) and _variables of type 1_. Also, he never explicitly defines whether natural numbers including zero refers to the domain or solution set of _variables of type 1_. It will be helpful to continue with this passage from Gödel's paper because he will shortly introduce the term _generalization_ which will in turn imply the term _substitution_. Gödel will remind us repeatedly that when substituting _b_ for the variable _v_ it is crucial that _b_ must be a sign of the same type as _v_. This ignores the fact that he hasn't made it clear if a _sign of type 1_ includes both _number-signs_ and _variables of type 1,_ i.e., both constants and variables (with domains larger than a set with one member).

Gödel continues, "We call combinations of signs of the form _a(b)_ , where _b_ is a sign of type _n_ and _a_ is a sign of type _n_ \+ 1, _elementary formulae._ We define the class of _formulae_ as the smallest set that contains all elementary formulae and that contains for _a_ and _b_ always ~ _(a), (a)_  _(b),_ and  _x_ _(a)_ (where _x_ is an arbitrary variable). We call _(a)_  _(b)_ the _disjunction_ of _a_ and _b, ~(a)_ the _negation_ and  _x_ ∙ _(a)_ the _generalization_ of _a_. A formula that contains no free variables (where _free variables_ is interpreted in the usual manner) is called _proposition-formula_. We call a formula with exactly _n_ free individual-variables (and no other free variables) a _n-ary relation sign,_ for _n_ = 1 also the formula is called a class-sign.

"By **subst** _a_ (vb) (where _a_ is a formula, _v_ is a variable and _b_ is a sign of the same type as _v_ ) we understand the formula that you get by substituting _b_ for every free occurrence of _v_ in _a_."5

**Subst** _a_ (vb) seems to be entirely innocuous, a mere bookkeeping formality, which states that one variable may be substituted for another variable as long as they are signs of the same type. In standard mathematics, variables can be classified by the nature of their solution sets and this is determined by the nature of the formula. For instance, the solution set for most formulas falls into one of the three following categories: (1) An individual integer, (2) a set (or class) of individual integers or (3) sets of subsets (or classes of subclasses) of individual integers. The context of the formula determines this classification. Thus, the repeated admonition by Gödel that if one variable is substituted for by another variable, then the variable that is used to make the substitution must have the same sign of type as the original variable seems superfluous. But, we must keep in mind that Gödel has blurred the distinction between variables and constants. However, Gödel's admonition is correct when variables represent entire formulas since each formula may have a differing assortment of variables.

It is noteworthy that Gödel's definition of constants includes the term "0" (zero). Therefore, zero is a constant by his definition, but it is also a _sign of type 1_ by his definition. One of the expressions a _sign of type 1_ may assume is _a,_ where _a_ is either 0 or a _variable of type 1_. But, a _variable of type 1_ can represent zero so a variable can represent at least one constant from Gödel's system, i.e., zero, as well as _number-signs_ , which are not constants in Gödel's system. It is confusing, perhaps purposefully.

On page 5 of Gödel's paper we learn that the generalization of formula _a_ implies the substitution of formula _a_. Yet, there is one important difference. The difference is that in substitution the variable that replaces the variable _v_ is explicitly stated while in generalization the variable that replaces variable _v_ is not explicitly stated. As Gödel writes on page five, "( _v_ ∙ _a_ )  **subst** _a_ (vc)."6 Now is the appropriate time to define two additional terms that will be used throughout the paper. The term "" indicates _implies_ and the term" _↔_ " indicates _implies and is implied by_ or _is equivalent to_. These terms belong to a category that Gödel denotes as "abbreviations."

There are two other ways of writing ( _v_ ∙ _a_ ) and they are as follows: _forall(x, y)_ where _y_ represents the formula and _x_ represents the variable, the other way is _forall(_ 17, _y)_ where a prime number larger than 13 represents the Gödel number of the variable (in this case the Gödel number 17 represents the variable _x_ ) and _y_ represents the formula in which _x_ is a variable.

There are two other ways of writing **subst** _a_ (vc). The first way is as follows: _subst(x, v, y)_ where _x_ represents the formula, _v_ represents a variable in the formula and _y_ represents a sign of the same type that replaces _v_ in the formula. The second way is as follows: _subst(x,_ 19, _number(z))_ where _x_ represents the formula, a prime number larger than 13 represents the Gödel number of the variable in the formula (in this case the Gödel number 19 represents the variable _y_ ) and _number(z)_ represents the _number-sign_ that replaces the variable _y_ in the formula. Notice that we have a _number-sign_ replacing a variable. To assure ourselves that _number(z)_ is indeed a _number-sign_ , we must refer to subsection 2.4 of Gödel's paper "Expressing metamathematical concepts." This section delineates a series of concepts that are relevant to his proof, which Gödel labels as primitive recursive functions.

Gödel's function 17 states the following:

"17. _number(n)_ = _succ(n, seq(1))_

_number(n)_ is the _number-sign_ for the number _n_."7

The right side of the formula states that n is the nth successor of zero. The term _seq(1)_ is the Gödel number for zero, although in other instances of the use of Gödel numbers the prefix _"seq"_ is dropped. An example is the formula _subst(x,_ 19, _number(z))_ that was mentioned a few paragraphs before. The number 19 is a Gödel number, but it is not preceded by the prefix "seq." In standard mathematics replacing a variable with a _number-sign_ would be equivalent to allowing a constant to replace a variable. Gödel has told us that a variable can only be replaced by a sign of the same type. It is only because of his ambiguous definition of a _sign of type 1_ that this kind of trickery has the least bit of merit. Gödel wants to have it both ways. He wants a variable to be replaced only by a variable of the same type, and he also wants a variable to be replaced by a constant.

There does seem to be a problem with the concept of _generalization_ in all of its many forms that Gödel does not address. It occurs when a formula has more than one independent variable. For example, let's apply the principle of _generalization_ to the formula z1 = x1 \+ y1. Let's substitute a variable for the variable x1. According to Gödel, our only restriction is that the variable we substitute must be a sign of the same type as variable x1. Certainly, the variable y1 is a sign of the same type as variable x1. So we can write **subst** _z_ (xy). The subscripts were deleted from the independent variables in the parentheses for clarity. The substitution gives us the formula z1= y1 \+ y1 or z1 = 2y1. Clearly, this substitution has changed the nature of the formula z1, but it seems to be allowable under Gödel's rules.

In Gödel's system _P_ an example of a questionable formula might take the form of the following formula _a:_ 3 _↔_ x1 \+ 2  y1 +1. It would be written as succ(succ(succ(0))) _↔_ succ(succ(x1))  succ(y1). If we were to employ the principle of _generalization_ in the form of **subst** _a_ (xy) we would generate the formula: succ(succ(succ(0))) _↔_ succ(succ(y1))  succ(y1). This seems to tell us that 3 _↔_ y1 \+ 2  y1 +1. This is not an accurate representation of the original formula _a._

With only a few more details, we should be able to critically analyze, at least partially, Gödel's final numbered formulas, Formulas (15) and (16), from the formal proof of his first incompleteness theorem. Gödel writes on page six, "The proposition, that there are undecidable problems in system _P_ for example reads like this: There are proposition-formulae _a,_ such that neither _a_ nor the negation of _a_ is a provable formula."8 The proposition-formulas we are about to examine comprise the final numbered formulas of Gödel's formal proof, and they are: _forall(_ 17, _r)_ and ~ _forall(_ 17, _r)._

Gödel writes on page 16, " _r_ is a primitive recursive class-sign with the free variable 17."9 Therefore, _r_ is a formula with only one free variable, and it is _x_ since 17 is the Gödel number for the variable _x_. According to the definition of generalization as it applies to the term _forall(_ 17, _r)_ we must replace the free variable _x_ with another free variable. But, according to Gödel, proposition-formulas contain no free variables. He writes on page four, "A formula that contains no free variables (where _free variables_ is interpreted in the usual manner) is called _proposition-formula_."10 Try as he might, Gödel cannot escape from his complex prevarication. The definition of _forall (_ 17, _r)_ calls for the substitution of the free variable _x_ with another free variable such as _z_ , but for his proof to succeed he must replace the variable _x_ with a _number-sign_ , i.e., a constant. This is so because the only kinds of formulas Gödel can prove true or false are those without variables such as: 3 = 3, 4 = 3, 4 + 3 = 7, 4 + 3 = 8, etc.

Below are Gödel's last two, numbered formulas, Formulas (15) and (16), from his first incompleteness proof. On page 16 Gödel states the following:

"Formula (15)

_~proof For_ k _(x, forall (_ 17, _r))_  _provable_ k _subst(r,_ 17, _number(x))_

Formula (16)

_proof For_ k _(x, forall (_ 17, _r))_  _provable_ k _not(subst(r,_ 17, _number(x)))"_ 11

(The subscript "k" refers to any ω-consistent primitive recursive class of formulas.)

Formula (15) states that a series of formulas can be grouped together to form a proof and this proof can be denoted by the Gödel number _x_. This series of formulas is represented by the _x_ on the left side of Formula (15). And, moreover, there is no proof that can be assembled from any ω-consistent primitive recursive class of formulas (and denoted by the Gödel number _x_ ) that can prove the proposition-formula _forall(17,r)._ And, all this together implies that the proposition-formula _subst(r,_ 17, _number (x))_ is provable from a proof assembled from ω-consistent primitive recursive class of formulas.

The formula _subst(r,_ 17, _number(x))_ states that there is a formula _r_ that, as Gödel has previously explained, has one free variable _x,_ which is denoted by the Gödel number 17. And, in the formula _r_ we must substitute the _number-sign_ for the Gödel number _x_ for each free occurrence of the variable _x_ in formula _r._ The Gödel number _x_ is the Gödel number of the proof on the left side of Formula (15).

The dilemma is that _forall(_ 17, _r)_  _subst(r,_ 17, _number(x))_ because of the axiom ( _v_  _a_ )  **subst** _a_ (vc) found on page five of Gödel's paper. Since Formula (15) states that the inability to prove _forall(_ 17, _r)_ implies the ability to prove _subst(r,_ 17, _number(x)),_ a contradictory circumstance is brought about when it is demonstrated that _forall(_ 17, _r)_  _subst(r,_ 17, _number(x))_. The contradictory circumstance is like the following statement: "The inability to prove that dogs have four legs implies the ability to prove that dogs have four limbs."

There is a way out of the dilemma. If we acknowledge that the axiom ( _v_  _a_ )  **subst** _a_ (vc) is only valid when one variable is substituted for another variable of the same type, and therefore, it is not valid when a _number-sign_ is substituted for a variable. Also, we should acknowledge that the definition of generalization is only valid when one variable is substituted for another, and therefore, it is not valid when a _number-sign_ is substituted for a variable. We know a _number-sign_ is substituted for a variable in the formula _subst(r,_ 17, _number(x))_ because that fact is explicitly stated. We know a _number-sign_ must be substituted for a variable in the formula _forall(_ 17, _r)_ because Gödel has told us that _forall(_ 17, _r)_ is a proposition-formula and proposition-formula contain no free variables.

Let us say the variable _r_ represents the formula _x_ \+ 3 = 5. The generalization of _r_ or (  _x_  _r_ ) allows us to substitute an arbitrary variable (of the same type) for _x_. Thus, we have _y_ \+ 3 = 5, _z_ \+ 3 = 5, _a_ \+ 3 = 5, _b_ \+ 3 = 5 . . . etc., none of which contradicts the generalization of _r_ because each formula is unprovable. Therefore, each generalization of the unprovable formula, _x_ \+ 3 = 5, generates another unprovable formula. If we substitute arbitrary _number-signs_ for the variable _x_ , we produce formulas such as, 2 + 3 = 5, 3 + 3 = 5, 4 + 3 = 5, 5 + 3 = 5 . . . etc., one of which is true(provable) and the rest of which are false(unprovable). They invalidate the generalization of _r_ because a true (provable) statement such as 2 + 3 = 5 can be generated from an unprovable statement such as _x_ \+ 3 = 5. Therefore, Gödel's use of the axiom (x  _r_ )  **subst** _r_ (xc) when the variable _x_ (on the right side of the formula) is substituted for by a _number-sign_ is invalid, and so his proof is also invalid.

A similar argument can be used to demonstrate that the term **subst** _r_ (xc) is invalid when the variable _x_ is replaced by any specific _number-sign_. When the variable _x_ in the formula _r_ is replaced by a _number-sign_ , formula _r_ is transformed from a _strictly_ unprovable formula into a formula that is either provable or unprovable depending on the value of the _number-sign_. Thus, **subst** _r_ (xc) would be invalid because a _strictly_ unprovable formula _r_ would be changed into a _conditionally_ unprovable formula _r_. Or, stated another way, a strictly unprovable formula would generate a formula that was provable under certain circumstances, for instance 2 + 3 = 5.

If I was to precisely follow Gödel's system, I would need to rewrite the above equations. For example, _y_ \+ 3 = 5 would become Gödel number 19 +succ(succ(succ(0)))= succ(succ(succ(succ(succ(0))))). However, the results would be the same.

Formula (16), _proof For_ k _(x, forall (_ 17, _r))_  _provable_ k _not(subst(r,_ 17, _number(x))),_ is the negation of Formula (15). Therefore, the arguments made to escape the dilemma posed by Formula (15) can be employed to escape the dilemma posed by Formula (16).

Formula (16) states that a series of formulas can be grouped together to form a proof and this proof can be denoted by the Gödel number _x_. This series of formulas is represented by the _x_ on the left side of Formula (16). And, moreover, this proof that can be assembled from a ω-consistent primitive recursive class of formulas (and denoted by the Gödel number _x_ ) can prove the formula _forall(17,r)._ And, all this together implies that the formula _subst(r,_ 17, _number (x))_ is not provable from a proof assembled from ω-consistent primitive recursive class of formulas.

The formula _subst(r,_ 17, _number(x))_ states that there is a formula _r_ that, as Gödel has previously explained, has one free variable _x,_ which is denoted by the Gödel number 17. And, in the formula _r_ we must substitute the _number-sign_ for the Gödel number _x_ for each free occurrence of the variable _x_ in formula _r_. The Gödel number _x_ is the Gödel number of the proof on the left side of Formula (16).

Formula (16) makes more sense than Formula (15). In Formula (16) the Gödel number _x_ is the Gödel number of a particular proof. Is Gödel number _x_ in Formula (15) the Gödel number of a particular proof? Or, is it the Gödel number of all the possible proofs that fail to prove the formula _forall(_ 17, _r)_? Is the number of all possible proofs that fail to prove the formula _forall(_ 17, _r)_ finite or infinite?

Part II- Nostalgie de la boue

We can now turn our attention to the subsection "2.5−Denotability and provability." This is a short subsection that introduces Theorem V. Theorem V is central to Gödel's proof of his first incompleteness theorem. Theorem V is directly involved in the formation of Formulas (15) and (16). This centrality is further indicated by Theorem V's numerical position. In his original paper, Gödel's first incompleteness theorem is denoted as Theorem VI. Since this is so, it seems extraordinarily odd that Gödel does not provide a formal proof of this theorem and offers instead only, "a sketchy outline of the proof for this theorem."12

On page 13, Gödel states, "The fact that can be expressed vaguely by: Every primitive recursive relation is definable within system _P_ (interpreting that system as to content), will be expressed in the following theorem _without_ referring to the interpretation of formulae of _P:_

"Theorem V: _For every primitive recursive relation_

_R(x_ 1 _,. . . . ,x_ n _)_ _there is a relation sign r (with the free variables u_ 1 , . . . , _u_ n), _such that for each n-tuple (x_ 1 _, . . . , x_ n _) the following holds:_

Formula (3)

_R(x_ 1 _, . . . ,x_ n _)_  _provable(subst(r, u_ 1 _. . . u_ n _, number(x_ 1 _). . .number(x_ n _)))_

Formula (4)

_~R(x_ 1 _, . . . ,x_ n _)_  _provable(not(subst(r, u_ 1 _. . . u_ n _, number(x_ 1 _) . . . number(x_ n _))))_

"We content ourselves with giving a sketchy outline of the proof for this theorem here, since it does not offer any difficulties in principle and is rather cumbersome."13

This last statement is reminiscent of Pierre De Fermat's famous claim to have devised a proof of the statement that no equation of the form _x_ n \+ _y_ n = _z_ n with _n_ greater than 2 has any solutions in positive integers. Fermat claimed to have a proof of this statement, but unfortunately it did not fit into the margin of the work by Diophantus that he was reading at the moment.

If we use a primitive recursive function that Gödel calls the successor function, _succ(x)_ = _x_ \+ 1, as an example, we will find an error in Formulas (3) and (4). The error is that the terms _number(x_ 1 _)_ and _number(x_ n _)_ occurring in Formula (3) are not the same as the terms _number(x_ 1 _)_ and _number(x_ n _)_ occurring in Formula (4). This leads to the conclusion that the term _number(x)_ in Formula (15) is not the same as the term _number(x)_ in Formula (16). First, we will discuss the implications of the error, and then we will demonstrate with a simple example that the error does indeed exist.

The formula _subst(r,_ 17, _number (x))_ is a proposition-formula that is a formula containing no free variables. The formula _forall(_ 17, _r)_ also must be a proposition-formula, according to Gödel. Therefore, the formula _forall(_ 17, _r)_ cannot imply the formula _subst(r,_ 17, _number(x))_ in both Formulas (15) and (16) if the term _number(x)_ is different in both formulas.

Even though the formula _subst(r,_ 17, _number(x))_ appears to be the same formula in each instance, it is actually two different formulas. They are different in terms of their numerical values and in their trueness or falseness. For instance, _forall(_ 17, _r)_ could be equivalent to 3 = 3 and _subst(r,_ 17, _number(x))_ in Formula (15) could be equivalent to 3 = 3 while _subst(r,_ 17, _number(x))_ in Formula (16) could be equivalent to 4 = 3. Therefore, in this example, _forall(_ 17, _r)_ could not imply _subst(r,_ 17, _number(x))_ as the term occurs in Formula (16). And, it follows, there would be no contradiction in Formula (16) and _forall(_ 17, _r)_ would be provable. And, once Formula (16) is determined to be provable and therefore valid, Formula (15), the negation of Formula (16), is invalid. The formulas given in the examples above all utilized equal signs (=), but formulas employing other signs, such as not equal (), are not excluded. But, it should be noted the formula _x_ > 7 does not imply the formula _x_ > 8.

The demonstration that the _number(x)_ occurring in Formula (15) is not the same as the _number(x)_ occurring in Formula (16) is important. This is important because it demonstrates that the formula _subst(r,_ 17, _number(x))_ is not the same in Formulas (15) and (16) even though it appears to be the same. Thus, even if we allow Gödel the trickery of placing variables and constants in the same category, the dilemma he tries to create can be escaped by properly restricting the number of formulas that can be implied by _forall(_ 17, _r)_ combined with the correct interpretation of formula _subst(r,_ 17, _number(x))_. When the formula _forall(_ 17, _r)_ is a proposition-formula, as Gödel claims it is in this instance, the number of formulas that it can imply is limited to precisely one formula, itself. It should be pointed out that _forall(_ 17, _r)_ as a proposition formula could imply many identical variations of itself such as 3 = 3 and 2 + 1 = 3. But, that does not allow Gödel's dilemma to reassert itself once we have demonstrated that the term _number(x)_ occurring in the formula _subst(r,_ 17, _number(x))_ , which is located on the right sides of both Formulas (15) and (16), is not the same in each formula.

Now that we have demonstrated how Gödel's error in Theorem V undermines his proof of Theorem VI, i.e., the first incompleteness theorem, we should present a specific example of the error. It will be easier to understand an application of Formulas (3) and (4) to a specific primitive recursive function (Gödel's successor function), if we first make a digression for a short discussion of primitive recursive functions.

Primitive recursive functions are collections of functions. Each particular collection of functions originates from one function that serves as a template. In the successor function the term _succ(x)_ = _x_ +1 serves as the template. In many primitive recursive functions, the result of the previous function is inserted in place of the variable of the function under consideration in order to generate a new result. This new result is inserted in place of the variable in the succeeding function and the process continues in an endless repartition. Of course, for the function that serves as the template there is no previous function and hence no previous result to insert in place of the variable. In this case zero is often inserted in the place of the variable of the function that is the template.

For example, let _R_  _succ(x)_ = _x_ \+ 1

_x_ 1 takes the form of _succ(x)_ = _x_ \+ 1

_x_ 2 takes the form of _succ(succ(x))_ = _(x_ \+ 1 _)_ \+ 1

_x_ 3 takes the form of _succ(succ(succ(x)))_ = _((x_ \+ 1 _)_ \+ 1 _)_ \+ 1

_x_ 4 takes the form of _succ(succ(succ(succ(x))))_ = _(((x_ \+ 1 _)_ \+ 1 _)_ \+ 1 _)_ \+ 1

The collection of functions would continue following this pattern without ending. And, ~R  _succ(x)_  _x_ \+ 1 would generate a similar never-ending pattern.

_x_ 1 takes the form of _succ(x)_  _x_ \+ 1

_x_ 2 takes the form of _succ(succ(x))_  _(x_ \+ 1 _)_ \+ 1

_x_ 3 takes the form of _succ(succ(succ(x)))_  _((x_ \+ 1 _)_ \+ 1 _)_ \+ 1

_x_ 4 takes the form of _succ(succ(succ(succ(x))))_  _(((x_ \+ 1 _)_ \+ 1 _)_ \+ 1 _)_ \+ 1

We are now ready to return to Formulas (3) and (4).

Formula (3)

_R(x_ 1 _, . . . ,x_ n _)_  _provable(subst(r, u_ 1 _. . . u_ n _, number(x_ 1 _). . .number(x_ n _)))_

Formula (4)

_~R(x_ 1 _, . . . ,x_ n _)_  _provable(not(subst(r, u_ 1 _. . . u_ n _, number(x_ 1 _) . . . number(x_ n _))))_

Formula (3) states that _R_ is a collection of primitive recursive formulas. They all originate from a single template. These conditions imply that there is a formula _r_ that has variables _u_ 1 through _u_ n, where each of the variables is associated with a specific member of the collection of primitive recursive formulas (as designated by its subscript). And, further, if you substitute for each of the variables _u_ 1 through _u_ n the numeric value of the Gödel number of the formula to which that variable is specifically associated, the formula you generate will be provable.

Formula (4) states that _~R_ is a collection of primitive recursive formulas. They all originate from the negation of a single template. These conditions imply that there is a formula _r_ that has variables _u_ 1 through _u_ n, where each of the variables is associated with a specific member of the collection of primitive recursive formulas (as designated by its subscript). And, further, if you substitute for each of the variables _u_ 1 through _u_ n the numeric value of the Gödel number of the formula to which that variable is specifically associated, the formula you generate will _not_ be provable. The formula _r_ is the same formula in both Formulas (3) and (4). Formula _r_ is designed so that it is provable in Formula (3) and unprovable in Formula (4). Formula _r_ could be designed to fall into any one of three _other_ categories. It could be designed to be provable in both Formulas (3) and (4), or it could be designed to be unprovable in both Formulas (3) and (4), or it could be designed to be unprovable in Formula (3) and provable in Formula (4).

For our example, we will use _R(x_ 1 _, x_ 2 _)_ and _~R(x_ 1 _, x_ 2 _)_. We will use a simplified method to determine the Gödel number of each of the formulas; a method that ignores parentheses and is designed to produce manageable Gödel numbers. However, the Gödel numbers will only be accurate to the first nine decimal places. In this simplified method each of the following six terms is assigned a Gödel number:

_succ_ . . . 1, _x_ . . . 2, 0 . . . 3, + . . . 4 _,_ = _. . ._ 5 _,_ and  _. . ._ 6. In a formula like _a_ = x + 1 the _number-sign_ for the number 1 is _succ_ (0). Instead of writing a large number that is not a Gödel number this way _succ(1,000,000, seq(_ 3 _))_ we will merely write 1,000,000.

The Gödel number of _succ(x)_ = _x_ \+ 1 is 2.577385992  10 _15_ , which is also _number(x_ 1 _)_ in formula (3).

The Gödel number of _succ(succ(x))_ = _(x_ \+ 1 _)_ \+ 1 is

2.456090619  10 _29_ , which is also _number(x_ 2 _)_ in formula (3).

The formula _r_  _u_ 2  _u_ 1 = 9.52938608  10 _13_.

The formula _r_ is provable when the _number(x_ 2 _)_ from formula (3) is substituted for _u_ 2 and the _number(x_ 1 _)_ from formula (3) is substituted for _u_ 1. The formula is provable because it is true.

The Gödel number of _succ(x)_  _x_ \+ 1 is 1.288692996  10 _16_ , which is also _number(x_ 1 _)_ in formula (4).

The Gödel number of _succ(succ(x))_  _(x_ \+ 1) + 1 is

1.719263433  10 _30_ , which is also _number(x_ 2 _)_ in formula (4).

The formula _r_ is not provable when the _number(x_ 2 _)_ from formula (4) is substituted for _u_ 2 and the _number(x_ 1 _)_ from formula (4) is substituted for _u_ 1 . The formula is not provable in this instance because it is false; (1.719263433  10 _30_ )  (1.288692996  10 _16_ )  9.52938608  10 _13_ instead it equals 1.334114051  10 _14_.

The calculations above demonstrate that the terms _number(x_ 1 _)_ and _number(x_ 2 _)_ occurring in Formula (3) are not the same as the terms _number(x_ 1 _)_ and _number(x_ 2 _)_ occurring in Formula (4). When we examine Formulas (9) and (10) in Part IV, we will discover that the same situation is present. The terms _number(x)_ and _number(y)_ occurring in Formula (9) are not the same as the terms _number(x)_ and _number(y)_ occurring in Formula (10). Furthermore, Formula (9) is generated using Formula (3) as a template, and Formula (10) is generated using Formula (4) as a template. Likewise, when we examine Formulas (15) and (16) in Part IV of this paper, we will see that they use Formulas (9) and (10) as templates, respectively.

We will also see that the term _number(x)_ in Formula (15) is not the same as the term _number(x)_ in Formula (16). The term _number(y)_ is not present in Formulas (15) or (16) because it has been incorporated into formula _r_. This indicates that the formula _r_ occurring in Formula (15) is not the same as the formula _r_ occurring in Formula (16). The statement that the term _number(x)_ in Formula (15) is not the same as the term _number(x)_ in Formula (16) encapsulates a string of errors. Their significance lies in the fact that they, once again, undermine Gödel's argument that neither _forall(_ 17, _r)_ nor its negation _~forall(_ 17, _r)_ is provable.

On a previous page, we gave an example where _forall(_ 17, _r)_ was represented by 3 = 3 and _subst(r,_ 17, _number(x))_ from Formula (15) was represented by 3 = 3 and _subst(r,_ 17, _number(x))_ from Formula (16) was represented by 4 = 3. In this example _forall(_ 17, _r)_ was determined to be provable. But, the example could have been constructed to demonstrate that _forall(_ 17, _r)_ was not provable and _~forall(_ 17, _r)_ was provable. The point is that either _forall(_ 17, _r)_ or its negation, _~forall(_ 17, _r),_ is always provable and that the statement: _they are neither provable nor unprovable_ is false.

Part III- Stick to one's last

Subsection "2.4−Expressing metamathematical concepts" is 5 pages in length and consists almost exclusively of formulas. Because of its complexity, it is difficult to give it the kind of in depth appraisal it deserves. On page 9 in the introductory paragraph for subsection 2.5, Gödel briefly summarizes what is to follow, "we will now define a sequence of functions (relations) 1−45, each of which is defined from the preceding ones by the methods given by theorems I through V."14 There is one additional function, function 46, but as Gödel states, on page 13, ". . . we cannot assert that it is primitive recursive."15

Only a select group of functions will be examined in the following discussion.

We begin on page 9 with function 4, and Gödel states:

"4. 0! = 1

( _n_ \+ 1)! = ( _n_ \+ 1)  _n_!"16

The second statement is true. The first statement, 0! = 1 is both meaningless and true. But, it is true only in an arbitrary fashion. The _Mathematics Dictionary_ defines the word _factorial_ as, "The product of all the positive integers less than or equal to the integer. _Factorial n_ is denoted by the symbol _n!_ _E.g.,_ 1! = 1, 2! = 1  2, 3! = 1  2  3, and in general, _n!_ = 1  2  3    _n._ This definition of factorial leaves the case that occurs when _n_ is zero as meaningless. In order to make certain formulas valid in all cases, **factorial zero** is arbitrarily defined to be unity. This is the case despite the fact that this is the value of factorial 1."17 The key point to note is that to make the formula, 0! = 1, valid requires the introduction of an arbitrary definition. Arbitrariness is a hallmark of Gödel's attempt to validate his first incompleteness theorem.

We now jump to function 32, which has no discernable connection with any of the preceding functions. Of the functions, which come after it only functions 35, 38, 39 and 40 employ any of the concepts delineated in function 32. As will become apparent later, these functions employ the concepts described in function 32 literally in name only.

On page 12, Gödel states:

"32. _imp(x, y)_ = _or(not(x), y)_

_and(x, y)_ = _not(or(not(x), not(y)))_

_equiv(x, y)_ = _and(imp(x, y), imp(y, x))_

_exits(v, y)_ = _not(forall(v, not(y)))_ "18

The above formulas become increasingly complex. For instance, another way to state _equiv(x, y)_ is as follows: _equiv(x, y)_ = the negation of the negation of this statement: (the term (y) or the negation of the term(x)) **or** the negation of the negation of this statement: (the term (x) or the negation of the term(y)). Another way to represent it would be as follows: _not(or(not(or(not(x), y)), not(or(not(y), x))))_. With this representation, precise attention must be paid to each pair of parentheses and the placement of each comma.

There is not any connection between function 32 and the next function 33 other than that they both serve as definitions. There is no attempt made to introduce even superficial connections.

The term type-lift is first introduced by Gödel in subsection "2.1−Definitions." The definition of type-lift presented in function 33 is hampered by the following fact. When discussing the Gödel numbers above Gödel number 13, there are no clearly established boundary lines. Gödel numbers above 13 have no categorical distinctions that represent the various _signs of type n_ that are used to denote all the different kinds of variables. If the Gödel numbers contained clear boundary lines for all the different kinds of variables, then they could be utilized to describe a type-lift.

On page 12, Gödel states:

"33. _type Lift(n, x)_ = argmin _y_  _x_ x n   _k_  _length(x)._

_item(k, x)_  13  _item(k, y)_ = _item(k, x)_ 

_item(k, x)_ > 13  _item(k, y)_ = _item(k, x)_  _prFactor(_ 1, _item(k, x))_ n

_typeLift(n, x)_ is the nth type-lift of _x_ (if _x_ and _typeLift(n, x)_ are formulae)."19

On page 5 Gödel gives a clearer definition of type-lift, "we say that a formula _a_ is a type-lift of another formula _b_ if you can obtain _a_ from _b_ by increasing the type of all variables occurring in _b_ by the same number."20

The term _item(k, x)_ 13 indicates that _k_ is less than or equal to Gödel number 13. Therefore, it is a constant, and as such it does not qualify as a formula. The term _item(k, x)_ >13 indicates that _k_ could be either a variable or a formula.

The definition of type-lift presented in function 33 is not a model of lucidity. But, more importantly the relationship between function 33 and the next function, 34, is completely forced.

It is revealing that Gödel was compelled to employ an introductory sentence in an attempt to bridge the gap. Function 34 along with its introductory sentence state the following: "There are three specific numbers corresponding to the axioms I, 1 to 3, which we will denote by _pa_ 1, _pa_ 2, _pa_ 3, and we define:

"34. _PeanoAxiom(x) ↔_ _(x_ = _pa_ 1  _x_ = _pa_ 2  _x_ = _pa_ 3 _)_ "21

Function 34 has no primitive recursive relationship to function 33. Yet, that non-relationship masquerades as a relationship between primitive recursive functions. A calculated attempt is made to demonstrate that _pa_ 3 is a type-lift of _pa_ 2 and that _pa_ 2 is a type-lift of _pa_ 1. This is not the case. The actual axiom represented by the term _pa_ 3 is not a type-lift of the actual axiom represented by the term _pa_ 2, and the actual axiom represented by the term _pa_ 2 is not a type-lift of the actual axiom represented by the term _pa_ 1 _._

The terms themselves cannot be type-lifts because type-lifts can only involve formula and these terms do not fit the requirements for elementary formulas; they only superficially resemble elementary formulas. On page 4 Gödel states, "We call combinations of signs of the form _a(b)_ , where _b_ is a _sign of type n_ and _a_ a _sign of type n_ _\+ 1_ , elementary formulae."22 If the terms themselves were elementary formulas in which the third formula was a type-lift of the second formula and the second formula was a type-lift of the first formula, they would appear in this kind of formulation: _x_ = _p_ 2 _(a_ 1 _)_  _x_ = _p_ 3 _(a_ 2 _)_  _x_ = _p_ 4 _(a_ 3 _)._

We will now discuss functions 38, 39 and 40. They all employ terminology from function 32, and the terminology from function 32 is employed ambiguously. Function 35 also ambiguously employs terminology from function 32. The pattern the ambiguous terminology followed in function 35 is the same as the pattern that will be delineated with the following three functions.

Function 38 is very densely constructed. It seems to offer a definition (with more clarity?) of the relation between _signs of type1_ and _variables of type1_ , and it does employ the term _imp(x, y),_ which is defined in function 32. Function 38 begins with the word the _quantor_. _Quantor_ may be derived from the word _quantic._ The _Mathematics Dictionary_ defines _quantic_ as, "A rational integral homogeneous function of two or more variables, or a homogeneous algebraic polynomial in two or more variables. . . .They are classified as _binary, ternary, quaternary,_ etc., according as they contain two, three, four, etc., variables."23

Function 38 states the following:

"38. _quantor 1 Axiom(x)_   _v, y, z, n_  _x_.

_vtype(n, v)_  _stype(n, z)_  _is Fm(y)_  _quantor 1 Axiom Condition(z, y, v)_ 

_x_ = _imp(forall(v, y), subst(y, v, z))_

_x_ is a formula obtained by substitution from the axiom schema III, 1."24

On page 5 Gödel presents the axiom schema III, 1 as the following: "1. ( _v_  _a_ )  subst _a_ (va)."25 If we interpreted the formula _x_ = _imp(forall(v, y), subst(y, v, z))_ from function 38 as stating _x_ is equivalent to the statement: _forall(v, y) implies subst(y, v, z)_ , there would be no conflict between axiom schema III, 1 and formula _x_. But, function 32 reminds us that the term _imp(x, y)_ does not denote _implies,_ instead it denotes: _imp(x, y)_ = _or(not(x), y)_. Therefore, formula _x_ states the following: _x_ is equivalent to either the negation of _forall(v, y)_ **or** the _subst(y, v, z)_. This more rigorous interpretation is the correct interpretation, and it is not related to axiom schema III, 1. It does resemble function 43, which is a definition of the term _immediate consequence_. Function 38 employs the terminology from function 32 in (abbreviated) name only.

The preceding ambiguity may serve a purpose. It may distract us from considering that it is still not precisely clear what the relationship is between the term, _vtype(n, v)_ when _n_ = 1, and the term, _sign of type n_ when _n_ = 1. A _variable of type 1_ is a variable that represents an unknown individual natural number including zero. What does the term _stype(n, z)_ denote when _n_ = 1? A _sign of type 1_ is either a specific natural number including zero or it is a _variable of type 1_ to which we add a specific natural number including zero.

Thus, the term _subst(y, v, z)_ still presents the same confusion discussed previously, if _vtype(n, v)_ is _variable of type 1_ and _stype(n, z_ ) is a _sign of type 1_. There are three terms denoted by _sign of type(n, z)_ when _n_ = 1, any of which can be substituted for the variable _vtype(n, v)_ when _n_ = 1, in the formula _y_ , yet only one is correct. The three terms denoted by a _stype(n, z)_ when _n_ = 1 are as follows: (1) a specific natural number such as five, (2) the term _x_ \+ (any specific natural number including zero) such as the term _x_ +7, and (3) the term _x_ \+ 0. Only the third term, _x_ \+ 0, can be correctly substituted for a _variable of type 1_ , yet Gödel allows all three terms to be substituted for a _variable of type 1_.

Function 39 has the same kind of ambiguous use of the terminology, drawn from function 32, as function 38 does, and there are other similarities to function 38, as well.

Function 39 states the following:

"39. _quantor 2 Axiom(x)_   _v, q, p_  _x_ 

_is Var(v)_  _is Fm(p)_  ~ _free(v, p)_  _is Fm(q)_ 

_x_ = _imp(forall(v, or(p, q), or(p, forall(v, q)))_

_x_ is a formula obtained by substitution from the axiom schema III, 2."26

On page 5 Gödel presents the axiom schema III, 2 as the following: "( _v_  _b_  _a_ )  ( _b_   _v_  _a_ )."27 If we interpreted formula _x_ = _imp(forall(v, or(p, q), or(p, forall(v, q)))_ from function 39 as stating _x_ is equal to the statement, _forall(v, or(p, q)) implies or(p, forall(v, q))_ , there would be no conflict between axiom schema III, 2 and formula _x_. But, again, function 32 reminds us that the term _imp(x, y)_ does not denote _implies;_ it denotes this: _imp(x, y)_ = _or(not(x), y)_. Therefore, formula _x_ states the following: _x_ is equivalent to either the negation of _forall(v, or(p, q))_ **or** _or(p, forall(v, q))_. There is another way of representing formula _x_ that requires strict attention to the pairing of parentheses and the placement of commas. It is as follows: _x_ = _or(not(forall(v, or(p, q))), or(p, forall(v, q)))_. These two representations are not related to axiom schema III, 2.

Function 40 has the same type of ambiguity, again drawn from function 32, as functions 39 and 38. It also generates a very long formula, which adds to the confusion.

Function 40 states the following:

"40. _redu Axiom(x) ↔_  _u, y, n_  _x_ 

_vtype(n, v)_  _vtype(n_ \+ 1, _u)_  ~ _free(u, y)_  _is Fm(y)_ 

_x_ = _exists(u, forall(v, equiv(seq(u)_  _paren(seqv)), y)))_

_x_ is a formula obtained by substitution from the axiom schema IV,1."28

On page 5, Gödel presents the axiom schema IV, 1 as the following: " _u_   _v_  _(u(v)_  _a)_."29 Function 32 provides us with the definitions of the terms _exists(x, y)_ and _equiv(x, y)_. The term _exists(x, y)_ = _not(forall(v, not(y)))_ , and the term _equiv(x, y)_ = _and(imp(x, y), imp(y, x))_. Only if we completely disregard those definitions and give the terms _exists(x, y)_ and _equiv(x, y)_ new definitions, will formula _x_ be equivalent to axiom schema IV, 1. Under the conditions of the new definitions, _exists(x, y)_ = _there exists an x such that y_ and _equiv(x, y)_ = _(x_  _y)_ , which denotes _x is equivalent to y_. If we utilize these new definitions formula _x_ is equivalent to axiom schema lV, 1. If we do not utilize these new and entirely different definitions, formula _x_ becomes very complex, as the following representation shows: _x_ = _not(forall(u, not(forall(v, not(or(not(or(not(u(v), y))_ _,_ _not(or(not(y), u(v)))))))))_. And, the formula _x_ just denoted does not represent axiom schema IV, 1.

If Gödel is sending a message with function 40, as well as with other functions in subsection 2.4, the message is clear. The message is that in his description of system _P_ his definitions must be allowed to have a great deal of elasticity. They must be allowed to have an elasticity that defies common sense.

Many of the 46 functions in subsection "2.4 Expressing metamathematical concepts" are reasonable. Many other functions do not reach that level. Gödel does not accomplish his task of defining, "a sequence of functions 1−45, each of which is defined from the preceding ones by the methods given by theorems I through IV."30

Part IV- Caramel perihelion of nihilism

The formal proof of Gödel's first incompleteness theorem, which is denoted as Theorem VI in his original paper, begins on page 15 and ends on page 16 of Hirzel's translation. The following exposition becomes quite involved.

Although, the following exposition is quite involved, the first portion of it, which is concerned with the six formulas that begin the formal proof, can be countered by the simple expedient of claiming that the six formulas (5, 6, 6.1, 7, 8, 8.1) are all axioms. This does not seem to be the case, though, because the axioms for the system _P_ are listed on pages 5 and 6. The axioms are listed again as axioms that are also primitive recursive functions. These axioms/primitive recursive functions are functions 34 through 42, which are listed on pages 12 and 13. The six formulas that launch the formal proof are not among the axioms listed for system _P_. Primitive recursive functions 44, 45 and 46 are the nearly identical counterparts of the three formulas that launch the formal proof, i.e., (Formulas 5, 6, 6.1). If Gödel had intended that the primitive recursive functions 44, 45 and 46 should be axioms, it is odd he did not include them with the list of axioms that just precedes them, i.e., axioms/primitive recursive functions 34 through 42.

Also, it seems that Gödel did not intend that the six formulas, which launch the formal proof, should be definitions because the definitions are listed in subsection "2.1 Definitions" and these six formulas are not among them. Perhaps, he considers them metamathematical concepts because subsection "2.4−Expressing metamathematical concepts" is where the counterparts to the three formulas that launch the formal proof are listed. The text of the formal proof seems to infer that they are definitions of a sort. Perhaps, regarding them as definitions derived from analogous metamathematical concepts is the best way to understand them.

The following exposition gives an added flavor to Gödel's ambiguity. The six formulas, with which the formal proof begins, share the similarity of being definitions of a sort. They will be discussed in section A. The remaining eight numbered formulas of the formal proof share a kind of stepwise relationship. They will be discussed in section B.

Section A- No more winklepickers

The formal proof's first formula, which is denoted by the number (5), states the following:

" _is Proof Figure_ k _(x) ↔_ ( _n_  _length(x)_  _is Axiom(item(n, x))_  _(item(n, x)_  _κ)_   0< _p, q_ < _n_  _immed Conseq (item(n, x), item(p, x), item(q, x)))_  _length(x)_ >0"31

The formula states _x_ is a proof figure within any ω-consistent primitive recursive class of formulas. The proof figure must be a finite sequence of formulas. Furthermore, each formula must meet at least one of the three following criteria: (1) the formula is an axiom, (2) the formula is the immediate consequence of the two preceding formulas, or (3) the formula is a member of any ω-consistent primitive recursive class of formulas.

Does Formula (5) meet the requirements, which the formula itself stipulates, for being a valid formula in a proof? Formula (5) is not the immediate consequence of the two preceding formulas in the proof because it is the first formula of the proof. It is not an axiom. Therefore, it must be a member of a ω-consistent primitive recursive class of formulas, but this is not the case. It is similar to primitive recursive concept 44 in subsection "2.4−Expressing metamathematical concepts," but it is not exactly the same. Gödel reminds us twice that the concepts 1 through 45 in subsection 2.4 are primitive recursive functions. (The term "function 1, 2, 3, etc." used in Part III of this paper is interchangeable with the term "primitive recursive concept 1, 2, 3, etc." or "concept 1, 2, 3, etc." used in Part IV of this paper. The nomenclature is employed because the terms serve a dual role as both functions and concepts.)

There are two differences between Formula (5) and concept 44. The first difference is the introduction of the subscript "k," and the second and most significant difference is that concept 44 does not include the phrase: _or a member of a ω-consistent primitive recursive class of formulas._ This difference, by itself, should disqualify Formula (5) from being considered a member of any primitive recursive class of formulas that has been described by Gödel so far. And, thus, since it is neither an axiom nor the immediate consequence of the two preceding formulas it should be disqualified as a valid formula for a proof.

Once again, Gödel has taken a straightforward mathematical concept and altered it so that it has become ambiguous. In this case, it is the concept of valid formulas for a proof. Gödel states in primitive recursive concept 44:

" _is Proof Figure(x) ↔_ ( 0< _n_  _length(x)_  _is Axiom(item(n, x))_   0< _p, q_ < _n_  _immConseq (item(n, x), item(p, x), item(q, x)))_  _length(x)_ >0

_x_ is a proof figure (a finite sequence of formulae, each of which is either an axiom or the immediate consequence of the two preceding ones)."32

This is a straightforward formulation of a mathematical proof though it may be too restrictive a formulation. Then in Formula (5) Gödel alters this straightforward concept. He makes an addition to the type of formulas that can be used in a proof. Besides formulas that are either the immediate consequence of the two previous formulas or axioms, he adds a third type of formula, any formula that is a member of any ω-consistent primitive recursive class of formulas. With this alteration, the formulation for a mathematical proof may be too inclusive. Gödel cannot find the proper balance.

Gödel doesn't give any justification for altering the criterion for valid formulas of a mathematical proof. Why would the criterion for deciding which formulas constitute a valid proof be subject to such an alteration? Furthermore, he doesn't provide any justification that Formula (5) is a valid formula for a proof; even though with the introduction of Formula (5), Gödel changes the definition of a proof in a way that increases the kinds of formulas that are acceptable in the construction of valid proofs.

Also, the legitimacy is highly suspect of Gödel's penchant for claiming all sorts of formulas are primitive recursive formulas. All this evidence leads to the conclusion that Formula (5) is not a valid formula for a proof.

The formal proof's second formula, which is denoted by the number (6), states the following:

" _proof For_ κ _(x, y)_ ↔ _is Proof Figure_ κ _(x)_  _item(length(x), x)_ = _y._ "33 Formula (6) is nearly identical with primitive recursive concept 45, which states the following:

" _proof For(x, y) ↔ is Proof Figure(x)_  _item(length(x), x)_ = _y_

_x_ is a proof for the formula _y_."34

The only difference between the two formulas is that Formula (6) has the subscript "κ" in two places. The subscript "κ" denotes the phrase: _in any ω-consistent primitive recursive class of formulas_. Since concept 45 is true for all classes of formulas, at least according to Gödel, restricting its range to the primitive recursive class of formulas by the introduction of the subscript "κ" in order to produce Formula (6) is justified. The justification for Formula (6) is that it is very similar to a formula that is a member of a ω-consistent primitive recursive class of formulas. It cannot be justified any other way. Formula (6) is not an axiom, and since it is the second formula of the formal proof it cannot be the immediate consequence of the two preceding formulas.

The formal proof's third formula, which is denoted by the number (6.1), states the following:

" _provable_ κ _(x) ↔_  _y_  _proof For_ κ _(y, x)._ "35

Formula (6.1) is nearly identical with concept 46, which states the following:

" _provable(x) ↔_  _y_  _proof For(y, x)_

_x_ is a provable formula ( _provable(x)_ is the only one among the concepts 1-46 for which we cannot assert that it is primitive recursive)."36

Again, the only difference between Formula (6.1) and concept 46 is that Formula (6.1) has the subscript "κ" in two places. Gödel states that he cannot assert that concept 46 is primitive recursive. Yet, when he twice introduces the subscript "κ" into concept 46 in order to produce Formula (6.1), that is precisely the assertion he is making since the subscript "κ" denotes the phrase: _in any ω-consistent primitive recursive class of formulas_. Or, perhaps, he is saying the concept represented by Formula (6.1) is true for primitive recursive classes of formulas even though it cannot be asserted the formula itself is primitive recursive. If so Formula (6.1) could be an example of Gödel's incompleteness theorem, unless it is disqualified for being a non-arithmetical statement or for some other reason. Gödel may be suggesting that Formula (6.1) is a statement constructed within a system of primitive recursive formulas that is true, yet its nearly identical counterpart, function 46, cannot be declared a member of a system of primitive recursive formulas. The latter sentiment rings resoundingly hollow since Part III of this paper documented that Gödel considered formulas to be primitive recursive for the slightest of reasons. In fact, Gödel considered certain formulas to be primitive recursive when there was no evidence to support the claim. It is not surprising to discover contradictions in Gödel's claims. Gödel makes the claim that since the right side of a certain formula is primitive recursive then the left side is also primitive recursive when he states, on page 15, "Since _proofFor_  _(x, y)_ (by (6), (5)) and _subst(y,_ 19, _number(y))_ (by definitions 17, 31) are primitive recursive, so is _Q(x, y)_."37 Using this precept, the claim can be made that concept 46 is primitive recursive since the right side of concept 46,  _y_  _proofFor(y, x),_ is very similar to the left side of primitive recursive concept 45, _proofFor(x, y)_. This may explain why in concept 46 Gödel reversed his convention that _x_ represents the proof and _y_ represents the provable formula. This reversal makes it more difficult to apply the precept stated above. It is more evidence of the arbitrariness of Gödel's method.

Formula (6.1) is not an axiom. And, Gödel tells us that its counterpart, concept 46, is not a member of his primitive recursive concepts. Therefore, for Formula (6.1) to be a valid formula in the proof it must be the immediate consequence of the two preceding formulas, Formulas (5) and (6). Here is the catch. The counterparts of Formulas (5) and (6) are primitive recursive concepts 44 and 45. These two concepts, according to Gödel, are not related in a primitive recursive manner to concept 46. The methods for determining a primitive recursive relationship include methods very similar to those for determining an immediate consequence relationship. It is unlikely Formula (6.1) will be the immediate consequence of Formulas (5) and (6) when the counterparts of Formulas (5) and (6) do not have a primitive recursive relationship with the counterpart of Formula (6.1).

Yet, for Formula (6.1) to be a valid formula for the proof, we must demonstrate that Formula (6.1) is the immediate consequence of Formulas (5) and (6). Gödel states in primitive recursive concept 43:

" _imm Conseq(x, y, z) ↔_ y = _imp(z, x)_   _v_  _x_  _is Var(v)_  _x_ = _forall(v, y)_

_x_ is an immediate consequence of _y_ and _z_."38

The formula states that formula _x_ is the immediate consequence of formulas _y_ and _z._ Furthermore, there are two forms formula _y_ can assume. Formula _y_ is either the negation of formula _z_ or formula _y_ equals formula _x._ If formula _y_ is the negation of formula _z_ then formula _x_ is the generalization of formula _y,_ which can be written _x_ = _forall(v, y)._

Formula (6.1) is not the immediate consequence of the two preceding formulas when the primitive recursive concept 43, which is the definition of immediate consequence, is taken into account. This notion is given added credence by the fact that concept 46, the nearly identical counterpart of Formula (6.1), cannot be obtained from primitive recursive concepts 44 and 45, the nearly identical counterparts of Formulas (5) and (6), respectively.

The formal proof's fourth formula, which is denoted by the number (7), states the following:

" _x_  ( _provable_ κ _(x) ↔ x_  _Conseq(κ)_ "39

The formula states that for any formula denoted by _x_ that is provable in any ω-consistent primitive recursive class of formulas, there is the certain implication that the formula _x_ is a member of the smallest set of formulas that contain all the formulas and all the axioms of that particular primitive recursive class of formulas, and the reverse also holds true.

Formula (7) is not the immediate consequence of Formulas (6) and (6.1), and it is not an axiom. Also, it is not a member of any ω-consistent primitive recursive class of formulas enumerated by Gödel in his paper. It does have the character of a definition, but it is not listed as such.

The formal proof's fifth formula, which is denoted by the number (8), states the following:

" _x_  _(provable(x)_  _provable_ κ _(x))._ "40

The formula states that any provable formula _x_ is also a provable formula _x_ in any ω-consistent primitive recursive class of formulas. But, the term "" indicates that the reverse need not hold true.

By the use of the term "" this formula acknowledges that Formula (5) is different from the primitive recursive concept 44. It also acknowledges, by the use of the term "," that Formula (5) is less restrictive in its definition of what are valid formulas for a proof than is primitive recursive concept 44. If Formula (5) and concept 44 were equally restrictive, the term "↔" would be used in Formula (8) that is Formula number (8). Like the preceding four formulas, it seems reasonable. It is not an axiom or the immediate consequence of the two preceding formulas. In fact, it is different from all the preceding formulas in the formal proof. They all concern themselves with ω-consistent primitive recursive classes of formulas, and the term _provable(x)_ does not. To understand the meaning of _provable(x)_ we must refer to primitive recursive concepts 46, 45 and 44. To understand the meaning of _provable_ κ _(x)_ we must refer to Formulas (6.1), (6) and (5). Only a thorough analysis of primitive recursive concepts 46, 45 and 44 plus a thorough analysis of Formulas (6.1), (6) and (5) could lead to the derivation of Formula (8).

The formal proof's sixth formula, which is denoted by the number (8.1), states the following:

" _Q(x, y)↔~ (proof For_ κ _(x, subst(y,_ 19, _number (y))))._ "41

The formula states that a series of formula have been organized to form a proof, and that proof is denoted by _x_. The proof denoted by _x_ does not prove the formula _subst(y,_ 19, _number (y))_. The term _Q(x, y)_ denotes that the formula is primitive recursive. It is unclear why the term _R(x_ 1 , _x_ 2 _)_ is not used to denote that the formula is a primitive recursive relation since in Theorem V the general term for a primitive recursive relation is _R(x_ 1 _, . . . ,x_ n _)._ Perhaps, it is to obscure one of the errors that is present in the next two formulas. The formula is introduced by Gödel with these words, "Now we define the relation."42 Thus, it has the characteristics of a definition. In the text Gödel makes the assertion that Formula (8.1) is a member of a primitive recursive class of formulas. Gödel makes the claim that if the right side of a formula is primitive recursive then the left side is also primitive recursive. He states that since the terms _proofFor_ κ _(x, y)_ and _subst(y,_ 19, _number(y)),_ which are the "building blocks" for the right side of Formula (8.1), are primitive recursive, then the term _Q(x, y)_ , which is the left side of Formula (8.1), is also primitive recursive.

Section B- Etymology or entomology

The formal proof's seventh and eighth formulas, which are denoted by the numbers (9) and (10), are derived by applying Theorem V to Formula (8.1). Gödel makes this clear in the text of the formal proof. He states, "According to theorem V we hence have a relation sign _q_ (with the free variables 17, 19) such that the following holds:

Formula (9)

~ _proof For_ κ _(x, subst(y,_ 19, _number(y)))_  _provable_ κ _(subst(q,_ 17 19, _number(x) number(y)))_

Formula (10)

_proof For_ κ _(x, subst(y,_ 19, _number(y)))_  _provable_ κ _(not(subst(q,_ 17 19, _number(x) number(y))))._ "43

There are two errors in Formulas (9) and (10). The first error was pointed out in Part II. The terms _number(x)_ and _number(y)_ that occur on the right side of Formula (9) are not the same as the terms _number(x)_ and _number(y)_ that occur on the right side of Formula (10). The second error is that the term _number_ _(y)_ that occurs on the right sides of both Formulas (9) and (10) should be replaced with the term _number(subst(y,_ 19, _number(y)))._ This is so because the left side of Formula (9) is **not** _~proof For_ κ _(x, y),_ instead it is _~proof For_ κ _(x, subst(y,_ 19, _number(y)))._ And, likewise, the left side of Formula (10) is **not** _proof For_ κ _(x, y),_ instead it is _proof For_ κ _(x, subst(y,_ 19, _number(y)))._ Even with this correction the term _number(subst(y,_ 19, _number(y)))_ that should occur on the right side of Formula (9) will be different from the term _number(subst(y,_ 19, _number(y)))_ that should occur on the right side of Formula (10).

The formula _subst(y,_ 19, _number(y))_ occurs on the right side of Formula (8.1) and on the left sides of Formulas (9) and (10). In all three instances, the term _number(y)_ from the formula _subst(y,_ 19, _number(y))_ refers to the number-sign value (numeric value) of the Gödel number of formula _y_. Formula _y_ is represented by the _y_ that occurs within the formula _subst(_ _y_ _,_ 19, _number(y))_ and **not** the _y_ that occurs in the term _Q(x, y)_. In Formulas (9) and (10) when the term _number_ _(y)_ occurs on the right sides of the formulas, it is _incorrect_ , since it refers to the number-sign value of the Gödel number of formula _y_. It is undeniable that _number(y)_ must refer to the number-sign value of the Gödel number of formula _y_ to be consistent with its usage in Formula (8.1) and its usage on the left sides of Formulas (9) and (10). The quantity within the parentheses in the term _number(y),_ occurring on the right sides of Formulas (9) and (10), should refer to the entire formula _subst(y,_ 19, _number(y))_ , not merely the formula _y_. Therefore, to correct this error, the term _number(y)_ should be replaced by a term that refers to the number-sign value of the Gödel number of the formula _subst(y,_ 19, _number(y))_ , which is to say _number(subst(y,_ 19, _number(y)))._ The confusion arises because the _y_ in the term _Q(x, y)_ from Formula (8.1) does indeed refer to the formula _subst(y,_ 19, _number(y))_. If the term _R(x_ 1 , _x_ 2 _)_ had been used instead of the term _Q(x, y)_ , perhaps, some of the confusion could have been avoided. This confusion will follow us for the rest of the formal proof.

The formal proof's ninth and tenth formulas, which are denoted by the numbers (11) and (12), respectively, result from two different versions of the operation described in the definition of the generalization of an elementary formula. In this case, the formula that undergoes two different versions of generalization is formula _q_. Formula _q_ occurs on the right sides of both Formulas (9) and (10). Thus, Formulas (11) and (12) are in an informal way the immediate consequence of a portion of the two preceding formulas. Formula (11) states the following:

" _p_ = _forall(_ 17, _q)_."44

Formula (12) states the following:

" _r_ = _subst(q,_ 19, _number(p))_."45

Notice the two different versions of generalization: the _"forall"_ version and the _"subst"_ version. Notice, also, that in Formula (12) the number-sign, i.e., _number(p)_ , which is to be substituted for the variable _y,_ i.e., Gödel number 19 in formula _q_ , is the number-sign for the Gödel number of formula _p_.

The Formulas (11) and (12) are characterized by Gödel as class signs, in statements occurring on the bottom of page 15 and the top of page 16, respectively. However, Gödel's characterization of each of the formulas as a class-sign is in error. A class-sign is a formula with one free variable. For reasons we will explore in the discussion of Formula (14), these two formulas, Formulas (11) and (12), cannot be class signs.

The formal proof's eleventh formula, which is denoted by the number (13), consists of three equations. The first is the generalization of the formula, _p_ = _forall(_ 17, _q)_. The formula _p_ is itself a generalization of the formula _q_. The second equation is the result of applying three axioms to formula _p._ Once these operations are accomplished, it is apparent that a formula within the formula derived from applying the three axioms to formula _p_ is equivalent to formula _r,_ and thus the third equation is generated. The application of the axioms seems to cleverly strain credibility especially with regard to the second of the three formulas.

As idiosyncratic rock musician Frank Zappa has the dog tell the man in his guitar driven song "Apostrophe," "The crux of the biscuit is the apostrophe." Only here the crux of the biscuit is that all the versions of the principle of generalization are valid when the variable that is substituted for a particular variable has the same quality—the same characteristics—as the particular variable for which it is substituting. Conversely any of the versions of the principle of generalization are not valid when the variable that is substituted for a particular variable does not have the same quality—the same characteristics— as the particular variable for which it is substituting. But, this common sense rendering of the Gödel's principle generalization is not an accurate formulation of Gödel's principle of generalization. First, Gödel uses the terms _sign of_ _type 1, sign of type 2, sign of type 3_ and _sign of type n_ instead of the term variable. But, he does allow that, "For _n_ >1 we will understand by a _sign of type n_ a variable of type _n."_ A _sign of type 2_ refers to classes of individuals, i. e., subsets of integers. A _sign of type 3_ refers to classes of classes of individuals, i. e., sets of subsets of integers. So for entities such as a _sign of type 2_ and a _sign of type 3,_ which common sense does not normally associate with the concept of variables, Gödel allows us to use the term variable of type _n._ But, for a _sign of type 1,_ which common sense would normally associate with the term variable, we are not allowed to use the term variable of type _1._ This is because a _sign of type 1_ includes two kinds of entities constants and variables. The constants are: 0, the successor of 0 and the successor of the successor of 0, etc. In other words, the constants are 0, 1, 2, etc. The variables are _a,_ the successor of _a_ , the successor of the successor of _a_ , etc. In other words, the variables are _a, a_ +1, _a_ +2, etc. So by a process similar to the process of elimination, we conclude that a _sign of type 1_ must refer to both constants and variables as the terms constants and variables are commonly understood. If a _sign of type 1_ referred to only constants, there would be no _sign of type n_ that referred to variables as the concept is commonly understood. If a _sign of type 1_ referred only to variables as the concept of variables is commonly understood, then entities such as 0, the successor of 0 and the successor of the successor of 0 would somehow have to be considered variables, a situation that is clearly untenable.

It is this simple deception that appears to be the heart of Gödel's proof. According to Gödel's program a constant can be substituted for a variable. That kind of questionable substitution is on display in all three equations. It is on display when _number(p),_ a constant, is substituted for Gödel number 19, a variable—the variable _y_ to be specific.

Formula (13) states the following:

_subst(p,_ 19, _number(p))_ = _subst(forall(_ 17, _q),_ 19, _number(p))_

_subst(p,_ 19, _number(p))_ = _forall(_ 17, _subst(q,_ 19, _number(p)))_

_subst(p,_ 19, _number(p))_ = _forall(_ 17, _r)_ "46

The explanation for the three equations is complex. However, the explanation for the first equation is straightforward. The "subst" version of the operation for generalization of formula _p_ is _subst(p,_ 19, _number(p))_. Since _p_ = _forall(_ 17, _q),_ the term _forall(_ 17, _q)_ is a legitimate replacement for formula _p,_ and thus, the right side of the first equation is generated. Thus, this first equation is informally the immediate consequence of Formula (11).

The generation of the second equation is quite involved. It requires the use of three axioms from section "2.1 Definitions." The first axiom is axiom II,1 _p_  _p_  _p_. The second axiom is axiom III,1 ( _v_  _a_ )  subst _a_ (vc). The third axiom is axiom III,2 ( _v_  _b_  _a_ )  ( _b_   _v_  _a_ ). Gödel states that for axioms III,1 and III,2 we should insert an arbitrary formula for _a,_ an arbitrary variable for _v,_ any formula where _v_ does not occur free for _b,_ and for _c_ a sign of the same type as _v_. But, as we have just noted the seemingly innoculous phrase: _for_ _c_ _a sign of the_ _same type as_ _v_ allows a constant to be substituted for a variable.

We shall begin with the axiom ( _v_  _b_  _a_ )  ( _b_   _v_  _a_ ). We insert _forall(_ 17, _q_ ) for _b_ and _forall(_ 19, _q)_ for _a_. We insert the variable _x_ for the variable _v._ We insert the variable _x_ for the variable _v_ because the variable _x_ does not occur in the formula _forall(17, q)._ This gives us ( _x_  _forall(_ 17, _q)_  _forall(_ 19, _q_ ))  ( _forall(_ 17, _q)_   _x_  _forall(_ 19, _q_ )). Next, we apply axiom _p_  _p_  _p_ to both the left side and the right side of the previous formula. With regard to the left side of the formula, we apparently judge that _forall(_ 17, _q)_  _forall(_ 19, _q)_  _forall(_ 17, _q)_. This gives us  _x_  _forall(_ 17, _q)_ for the left side of the formula. With regard to the right side of the formula, we apparently judge that _forall(_ 17, _q)_   _x_  _forall(_ 19, _q)_   _x_  _forall(_ 19, _q)_. This gives us  _x_  _forall(_ 19, _q)_ for the right side of the formula. Combining the left and right sides of the formula gives us  _x_  _forall(_ 17, _q)_   _x_  _forall(_ 19, _q)_.

But, we do not want the formula  _x_  _forall(_ 17, _q)_   _x_  _forall(_ 19, _q)_. We need the term  _x_ on both sides of the formula to be a  _y_ so we arbitrarily change the formula to y  _forall(_ 17, _q)_  y  _forall(_ 19, _q)_.

Now, we know from the axiom ( _v_  _a_ )  subst _a_ (vc) that the left side of the formula, y  _forall(_ 17, _q)_ implies the following: subst _a_ (yc) . We insert _forall(_ 17, _q)_ for _a_. We insert _number(p)_ for _c_. This gives us ( _y_  _forall(_ 17, _q) )_  subst( _forall(_ 17, _q), y, number(p))_. Substituting the Gödel number 19 for the variable _y_ gives us subst( _forall(_ 17, _q), 19, number(p))_ for the right side of the formula, which is the right side of the first equation, which we recall was the following: (The portion we have generated from the axioms is underlined.) _subst(p,_ 19, _number(p))_ = _subst(forall(_ 17, _q),_ 19, _number(p))._ We should note that when we substitute _number(p)_ for Gödel number 19 we are substituting a constant for a variable. Of course, we would be substituting a constant for a variable if we replaced Gödel number 17 with _number(p),_ as well.

Now using the same axiom, ( _v_  _a_ )  subst _a_ (vc) we cleverly apply it to only a _portion_ of the right side of the following formula, which we generated somewhat arbitrarily in the preceding paragraphs. The formula is y  _forall(_ 17, _q)_  y  _forall(_ 19, _q)_. The right side of the formula is y  _forall(_ 19, _q)._ The portion of the right side of the formula we are going to apply the axiom to is _forall(_ 19, _q)._ _Forall(_ 19, _q)_ is rewritten as ( _y_  _q_ ). Applying the axiom gives us ( _y_  _q_ )  subst( _q, y, number(p))_. Substituting the Gödel number 19 for the variable _y_ gives us subst( _q,_ 19, _number(p))._ The entire right side of the formula is  _y_  subst( _q,_ 19, _number(p))_. For the variable _y_ in the term  _y_ we insert the variable _x_ , but in the form of its Gödel number, which is 17. We rewrite the term  _17_  as _forall(_ 17 _)_ , so that the right side of the formula is _forall(_ 17, _subst_ ( _q_ , 19, _number(p))),_ which is the right side of the second equation _._ Thus, the right side of the first equation, _subst(forall(_ 17, _q),_ 19, _number(p)),_ implies the right side of the second equation, _forall(_ 17, _subst(q,_ 19, _number(p))_. In other words, this formula  _x_  _forall(_ 17, _q)_   _x_  _forall(_ 19, _q)_ was changed into this formula _subst(forall(_ 17, _q),_ 19, _number(p))_  _forall(_ 17, _subst(q,_ 19, _number(p))_ through the use of axiom III,1. The left side of this formula  _x_  _forall(_ 17, _q)_   _x_  _forall(_ 19, _q),_ which is  _x_  _forall(_ 17, _q)_ was made to generate _subst(forall(_ 17, _q),_ 19, _number(p))._ The right side of this formula  _x_  _forall(_ 17, _q)_   _x_  _forall(_ 19, _q),_ which is  _x_  _forall(_ 19, _q),_ was made to generate _forall(_ 17, _subst(q,_ 19, _number(p))._ This does not mean that the first equation equals the second equation.

But, it seems reasonable that if this formula  _x_  _forall(_ 17, _q)_   _x_  _forall(_ 19, _q)_ was changed into this formula _subst(forall(_ 17, _q),_ 19, _number(p))_  _forall(_ 17, _subst(q,_ 19, _number(p))_ through the use of axiom III,1 then this formula  _x_  _forall(_ 19, _q)_  _x_  _forall(_ 17, _q)_ could be changed into this formula _forall(_ 17, _subst(q,_ 19, _number(p))_  _subst(forall(_ 17, _q),_ 19, _number(p)) ._ This is so because to generate  _x_  _forall(_ 19, _q)_  _x_  _forall(_ 17, _q)_ we merely made the left side of  _x_  _forall(_ 17, _q)_   _x_  _forall(_ 19, _q)_ into the right side of the new equation and we made the right side into the left side of the new equation. We would have a situation in which AB and after again applying the cumbersome reasoning we have just gone through, we would have BA. That situation would seem to indicate that the first equation _subst(p,_ 19, _number(p))_ = _subst(forall(_ 17, _q),_ 19, _number(p))_ is equal to the second equation _subst(p,_ 19, _number(p))_ = _forall(_ 17, _subst(q,_ 19, _number(p)))._ And, the reasoning is slightly less cumbersome to demonstrate that BA instead of AB since we do not have to arbitrarily substitute the variable _y_ for the variable _x_ at the beginning stages of the process.

This leads us to the following question. Can we legitimately substitute the variable _y_ for the variable _x_ in the formula  _x_  _forall(_ 17, _q)_   _x_  _forall(_ 19, _q)_ , but only when it occurs in the term  _x?_ This leads to another question. Is it legitimate to use an equal sign for the three previous equations instead of this sign _↔_. After a while, you get so goddamn sick and tired of all the endless sophistry that you just don't care anymore.

But these subtle distinctions will become very important when we analyze Formulas (15) and (16). For Gödel's proof to succeed it is critical that _subst(p,_ 19, _number(p))_ = _forall(_ 17, _r)_ , but the demonstration of this seems to strain credulity.

It is also critical for the success of his proof that formula _p_ or _forall(_ 17, _q)_ = _subst(p,_ 19, _number(p)),_ but again this is not the case. We can apply axiom III,1, which is  _v_  _a_  subst _a_ (vc) to the term _forall(_ 17, _q_ ). We let _a_ represent _forall(_ 17, _q_ ), and we let the variable _y_ represent the variable _v_ and we present the variable _y as_ Gödel number 19. Thus, we generate this formula 19  _forall(_ 17, _q)_  _subst(forall(_ 17, _q),_ 19, _number(forall(_ 17, _q)))_. The term _forall(_ 17, _q)_ occurs twice on the _right_ side of the previous formula. If we replace it on both occasions with formula _p,_ this gives us 19  _forall(_ 17, _q)_  _subst(p,_ 19, _number(p)),_ which is _not_ the same as or _forall(_ 17, _q)_ = _subst(p,_ 19, _number(p))_.

Interestingly, if we accept Gödel's contention that formula _p_ = _forall(_ 17, _q)_ has only one free variable, which is _y_ (Gödel number 19), when we replace that free variable first with _number(p)_ and then with _number(forall(_ 17, _q)_ and compare the results, we can encounter difficulties. Let us say _number (p)_ = 20 and _number(forall(_ 17, _q)_ = 10. If formula _q ↔_ _y_ \+ 3 = 13, then  _y_  _forall(_ 17, _q)_  20 + 3 = 13 when _number(p)_ replaces the variable _y_ , but  _y_  _forall(_ 17, _q)_  10 + 3 = 13 when _number(forall(_ 17, _r)_ replaces the variable _y,_ thus a contradiction is introduced to the derivation. This is the same difficulty we encountered before in Part l of this paper when constants were substitutes for variables.

The formula 19  _forall(_ 17, _q)_  _subst(p,_ 19, _number(p))_ is not an equality as Gödel requires, and the term _y_ or 19  is not in the equation _forall(_ 17, _q)_ = _subst(p,_ 19, _number(p))_.

The second equation, of the three formulas designated formula 13 is _subst(p,_ 19, _number(p))_ = _forall(_ 17, _subst(q,_ 19, _number(p)))._ It can also be written as _subst(forall(_ 17, _q),_ 19, _number(p))_ = _forall(_ 17, _subst(q,_ 19, _number(p)))_ , and it is difficult to decide if it is the immediate consequence of the first equation. The formula. _subst(forall(_ 17, _q),_ 19, _number(p))_  _forall(_ 17, _subst(q,_ 19, _number(p))_ might be said to be an axiom. This is so because, according to Gödel, every formula obtained by using the axioms in section "2.1 Definitions" is itself an axiom.

The third equation is generated by substituting formula _r_ for _subst(q,_ 19, _number(p))_ in the second equation. This gives us _forall(_ 17, _r)_. Thus, the third equation is the generalization of the second equation.

The formal proof's twelfth formula, which is denoted by the number (14), is similar to Formula (13) in that the operation defined as generalization is employed. Also, a formula within a formula is revealed to be equivalent to formula _r_. However, the formula thus revealed is derived from generalization, not from the application of axioms. The right side of Formula (14) is the generalization of Formula (9) with some very important caveats. As a reminder Formula (9) is the following:

_~proof For_ κ _(x, subst(y,_ 19, _number(y)))_  _provable_ κ _(subst(q,_ 17 19, _number(x) number(y)))_

Formula (9) undergoes the operation of generalization, but it is difficult to recognize that it does so, because the entire left side of Formula (9) is deleted from Formula (14). The deleted left side of Formula (9) undergoes the generalization operation, which is the substitution of formula _p_ for formula _subst(y,_ 19, _number(y))_. And, also, the term _provable_ κ from the right side of Formula (9) is deleted from Formula (14). The left side of Formula (14) is the result of the generalization of Formula (9) with the two deletions mentioned above. Formula (14) states the following:

" _subst(q,_ 17 19, _number(x) number(p))_ = _subst(r,_ 17, _number(x))_ "47

To reiterate, the left side of Formula (14) is derived from the generalization of Formula(9), which in this instance involves substituting the formula _p,_ i.e., Formula (11), _p_ = _forall(_ 17, _q),_ for the formula _subst(y,_ 19, _number(y)_ located on the left side of Formula (9). Then we must selectively delete the portions that were mentioned above to obtain the left side of formula (14). The term _number(p)_ replaces the term _number(y)_ because of the substitution of formula _p_ for formula _subst(y,_ 19, _number(y))._

The formula, _subst(y,_ 19, _number(y))_ , from the left side of Formula (9) is, according to Gödel, a proposition-formula, and proposition-formulas have no free variables. Thus, it is a _sign of type 1_. According to the definition of generalization it can only be substituted for by a sign of the same type, i.e., a _sign of type 1_. The substitute for the formula, _subst(y,_ 19, _number(y))_ , is the formula _p_ = _forall(_ 17, _q)_. On page 15, Gödel states, " _p_ is a class-sign with the free variable 19."48 The free variable 19 (Gödel number 19) is the free variable _y_. The substitution of the class-sign, _p_ = _forall(_ 17, _q)_ , which has one free variable for the proposition-formula, _subst(y,_ 19, _number(y))_ , which has no free variables, is legitimate because, according to Gödel's ambiguous definitions, they are both _signs of type 1._ Although, it may seem strange, it does not violate his definitions. Or, more precisely, it does not violate his definitions unless it can be demonstrated that the formula _p_ = _forall(_ 17, _q)_ is not a class-sign. And, that can be demonstrated.

When Gödel states that the formula, _p_ = _forall(_ 17, _q)_ , is a class-sign, this statement violates his definitions. On page 15, Gödel states that formula _q_ has two free variables _x_ and _y_. The term, _forall(_ 17, _q)_ , requires that we substitute for the variable _x_ (Gödel number 17) a sign of the same type. The variable _x_ in formula _q_ is a _sign of type 2_ because its solution set is a set of integers, as opposed to an individual integer. Thus, only a variable that is a _sign of type 2_ may be substituted for variable _x_ in formula _q_. But, for the formula, _p_ = _forall(_ 17, _q)_ , to be a class-sign the substitute for variable _x_ cannot be a _sign of type 2._ It must be a _sign of type 1._ Furthermore, the only member of the ambiguous category, _sign of type 1_ that can be substituted for variable _x_ so that formula _p_ becomes a class-sign is a **number-sign**. Gödel's statement that formula _p_ is a class-sign violates the requirement that the only proper substitute for a variable is a variable that has the same _sign of type_. A similar argument demonstrates that Gödel's statement, " _r_ is a primitive recursive class-sign,"49 is also erroneous.

To complete the discussion of Formula (14) we now turn to the right side of the formula. The right side of Formula (14), _subst(r,_ 17, _number(x))_ , is derived from the fact that a portion of the left side of Formula (14) is equivalent to Formula (12), _r_ = _subst(q,_ 19, _number(p))._ The portion of the left side of Formula (14) that is equivalent to formula _r_ is replaced by formula _r_ and thus the right side of Formula (14) is produced.

Formula (14) might informally seem to be the immediate consequence of the preceding Formulas (9), (11), and (12), but only if we are willing to accept some selective deletions and a violation of the requirement that the substitute for a variable must be a variable with the same _sign of type_.

Now, we come to one of the most significant errors in Gödel's formal proof. The core of the error consists of combining the left side of one formula with the right side of an entirely different formula in a manner that is completely unjustified. To delineate the nature of the error we must scrutinize the formation of both the left and right sides of Formulas (15) and (16). To do that we must begin by taking two steps. We must define the term _insert_ , and then we must re-examine Formula (14).

On page 7 of Gödel's paper, primitive recursive theorem I states, in part, "Every function (relation) that you get by inserting primitive recursive functions in the places of variables of other primitive recursive functions (relations) is itself primitive recursive. . . ."50

This theorem tells us that the insertion of a primitive recursive function in the place of a variable of another primitive recursive function produces a primitive recursive function. It does not say it is invalid to insert primitive recursive functions for entire functions. In fact, the definition of _insert(x, n, y)_ provided by concept 27 is very broad. It states that any item can be inserted in place of any other item. Concept 27 states the following:

"27. _Insert(x, n, y)_ = argmin _z_  _(nthPrime(length(x)_ \+ _length(y)))_ x+y   _u, v_  _x_ 

_x_ = _u_  _seq(item(n, x))_  _v_  _z_ = _u_  _y_  _v_  _n_ = _length(u)_ \+ 1

You obtain _insert(x, n, y)_ from _x_ by inserting _y_ instead of the _nth_ item in the sequence _x_ (provided that 0 < _n_  _length(x))"_ 51

It turns out that there are two ways to _correctly_ derive Formula (14) within the structure of the formal proof. The first way has already been described. It is to treat the formula _subst(y,_ 19, _number(y))_ as a variable within a larger formula and substitute a variable of the same type for it, which is formula _p_ , at least according to Gödel's accounting. The second way is to insert formula _p_ for the **entire formula** _subst(y,_ 19, _number(y))_ , which is located on the left side of Formula (9) _._ The important point is that Formula (14) **cannot** be obtained by inserting or substituting formula _p_ for the formula _y_ that occurs within formula _subst(y,_ 19, _number(y))_ , which is located on the left side of Formula (9).

We cannot derive Formula (14) by inserting or substituting formula _p_ for formula _y_. But, what formula do we derive if we insert formula _p_ for the formula _y_ that occurs within formula _subst(y,_ 19, _number(y))_ , located on the left side of Formula (9)? We recall that formula _p_ = _forall(_ 17, _q)_. So we will insert _forall(_ 17, _q)_ for formula _y_. We obtain the formula _subst(forall(_ 17, _q)_ , 19, _number(forall(_ 17, _q)))_. Something very interesting will occur if we replace the term _number(forall(_ 17, _q))_ with the term _number(p)_ , which we can do since _p_ = _forall(_ 17, _q),_ but we should remember that this operation can generate a contradiction. We obtain the formula _subst(forall(_ 17, _q)_ , 19, _number(p))._ We recall from Formula (13) that, according to Gödel, _subst(forall(_ 17, _q)_ , 19, _number(p))_ = _forall(_ 17, _r)_. Thus, when we insert formula _p_ for the formula _y_ that occurs within formula _subst(y,_ 19, _number(y))_ , we obtain _forall(_ 17, _r)._ Of course, we must recall that the validity of Formula (13) is extremely suspect.

Next, we should re-acquaint ourselves with Formulas (9) and (10) because formula _p_ is inserted into these two formulas.

Formula (9)

_~proof For_ κ _(x, subst(y,_ 19, _number(y)))_  _provable_ κ _(subst(q,_ 17 19, _number(x) number(y)))_

Formula(10)

_proof For_ κ _(x, subst(y,_ 19, _number(y)))_  _provable_ κ _(not(subst(q,_ 17 19, _number(x) number(y))))_

Directly following Formula (14) Gödel makes this key statement, "If we now insert _p_ for _y_ in (9) and (10), we get taking (13) and (14) into account:

Formula (15)

_~proof For_ k _(x, forall (_ 17, _r))_  _provable_ k _(subst(r,_ 17, _number(x)))_

Formula (16)

_proofFor_ k _(x, forall (_ 17, _r)_  _provable_ k _(not(subst(r,_ 17, _number(x))))"_ 52

We can now appreciate Gödel's error. On the left sides of Formulas (15) and (16) Gödel has inserted formula _p_ in the form of _forall(_ 17, _q)_ for the formula _y_ that occurs within the formula _subst(y,_ 19, _number(y))_. Thus, through the use of the suspect Formula (13), he changed _subst(y,_ 19, _number(y))_ into forall _(17, r)_. In a contradictory manner, the right sides of Formulas (15) and (16) are derived from inserting formula _p_ in the form of _forall(_ 17, _q)_ for the **entire formula** _subst(y,_ 19, _number(y))_. Gödel produces each of the Formulas (15) and (16) by grafting together portions of two different formulas that should not be grafted together. This goes back to the nomenclature confusion mentioned before. The _y_ in the term _Q(x, y)_ does indeed refer to the entire formula _subst(y,_ 19, _number(y))_ , but confusing nomenclature isn't the proper grounding for deriving formulas for a mathematical proof.

Represented directly below are how Formulas (15) and (16) should appear when formula _p_ in the form of _forall(_ 17, _q)_ is inserted for the formula _y_ that occurs in the formula _subst(y,_ 19, _number(y))_ , which occurs in both Formulas (9) and (10) _._ This procedure generates the left side of Formulas (15) and (16).

Formula (15*)

_~proof For_ k _(x, forall (_ 17, _r))_  _provable_ k _(subst(q,_ 17 19, _number(x) number(forall (_ 17, _r))))_

Formula (16*)

_proof For_ k _(x, forall (_ 17, _r))_  _provable_ k _(not(subst(q,_ 17 19, _number(x)_ number _(forall(_ 17, _r)))))_

If the _forall(_ 17, _r)_ in the term _number(forall(_ 17, _r)_ in the above formulas could legitimately be replaced with formula _p_ we would have Formulas (15) and (16). This cannot be done because formula _p_ has the free variable _y_ and by Gödel's own definition _forall(_ 17, _r)_ is a proposition formula, which has no free variables. Also, we have discussed before that Gödel's attempt in Formula (13) to equate a generalized version of formula _p_ and _forall(_ 17, _r)_ is seemingly invalid.

Represented directly below are how Formulas (15) and (16) should appear when formula _p_ in the form of _forall(_ 17, _q)_ is inserted for the entire formula _subst(y,_ 19, _number(y))_ , which occurs in both Formulas (9) and (10). It is interesting that Gödel chooses insertion instead of substitution at this juncture. The operation of substitution would be legitimate, according to Gödel, because as stated before formula _p_ with the free variable _y,_ and _subst(y,_ 19, _number(y))_ with no free variables are both signs of type 1 _._ Gödel may be tacitly supporting our analysis that formula _p_ is a sign of type 2. Nonetheless, insertion produces the outcome Gödel desires for the right sides of the formulas. Of course, this procedure also generates changes in the left sides of Formulas (15) and (16). (Also, note that the right sides of both formulas have undergone the following changes: (1)the term _number(forall(_ 17, _q)_ was replaced by the term _number(p)_ because _p_ = _forall(_ 17, _q),_ although such a replacement can cause difficulties and (2) the term _(q,_ 19, _number(p))_ was replaced with the term _r_ because _r_ = _subst(q,_ 19, _number(p))_.

Formula (15**)

_~proof For_ k _(x, forall (_ 17, _q))_  _provable_ k _(subst (r,_ 17, _number(x)))_

Formula (16**)

_proof For_ k _(x, forall (_ 17, _q))_  _provable_ k _(not(subst(r,_ 17, _number(x))))_

Formula (15) is formed by combining the left side of Formula (15*) with the right side of Formula (15**). Formula (16) is formed in a similar manner; the left side of Formula (16*) is combined with the right side of Formula (16**). There is no justification for this combination. The formula _p_ in the form of _forall(_ 17, _q)_ is not equivalent to the formula _forall(_ 17, _r)._ The formula _forall(_ 17, _r)_ is a propositional-formula with no free variables. The formula _p_ = _forall(_ 17, _q)_ is a class-sign with one free variable _y_ , at least according to Gödel _._ ( _Fathoming Gödel'_ s analysis suggests formula _p_ has two free variables.)

Formula (13) could be interpreted as evidence that the formula _p_ = _forall(_ 17, _q)_ does equal _forall(_ 17, _r)_ since, according to Gödel _forall(_ 17, _r)_ = _subst(p,_ 19, _number(p))._ But, as we have demonstrated the notion that the two formulas are equal is suspect. Even the notion that _subst(p,_ 19, _number(p))_  _forall(_ 17, _r)_ is suspect _._

The formula _subst(p,_ 19, _number(p))_ is important for another reason. If we incorrectly assume that the number-sign value (numeric value) of the Gödel number of the formula is _number(p),_ instead of _number(subst(p,_ 19, _number(p))),_ we can use the formula _subst(p,_ 19, _number(p))_ to derive Formula (14) through inserting formula _subst(p,_ 19, _number(p))_ for the formula _subst(y,_ 19, _number(y))_ in Formula (9). The end result is a situation where we generate contradictory statements. For instance, the unprovability of formula _subst(p,_ 19, _number(p))_ implies the provability of formula _subst(r,_ 17, _number (x))._ However, according to Formula (13) _subst(p,_ 19, _number(p))_ = _forall(_ 17, _r),_ therefore the unprovability of _forall(_ 17, _r)_ implies the provability of _subst(r,_ 17, _number(x))._ The contradiction is that _forall(_ 17, _r)_ implies _subst(r,_ 17, _number(x))._ This is another, perhaps more concise, route to justify Formulas (15) and (16) _,_ at least according to Gödel.

But, the number-sign value of the Gödel number of the formula _subst(p,_ 19, _number(p))_ is not _number(p)._ This is the same error we encountered in Formulas (9) and (10). The number-sign for the Gödel number of the formula _subst(y,_ 19, _number(y))_ is incorrectly given as _number(y)_ , instead of the correct value _number(subst(y,_ 19, _number(y)))_. As you will recall the justification for this slight-of-hand was Formula (8.1), which states _Q(x, y)↔~ (proof For_ κ _(x, subst (y,_ 19, _number (y))))_. The _y_ in the term _Q(x, y)_ does represent the formula _subst(y,_ 19, _number(y))_ , but it is incorrect to allow the number-sign of the Gödel number of the formula _subst(y,_ 19, _number(y))_ to be designated _number(y)_ instead of _number(subst(y,_ 19, _number(y)))_. It is incorrect because it confuses formula _y_ with formula _subst(y,_ 19, _number(y))_. The error cannot be corrected by claiming that the _y_ in the term _number(y)_ refers to the _y_ in the term _Q(x, y)_ because this conflation of quantities only produces more confusion.

Here is an example of the confusion. To which formula does the term _Q(x, p)_ refer? Should it appear in this formulation _Q(x, p)↔~ (proof For_ κ _(x, subst (p,_ 19, _number (p))))_ or in this formulation _Q(x, p)↔~ (proof For_ κ _(x, forall(_ 17, _q)))_? With regard to the latter formula, it is important to recall _p_ = _forall (_ 17, _q)._ To what value does the term _number (p)_ refer? _Number (p)_ could refer either to _number(forall(_ 17, _q))_ or _number(subst(p,_ 19, _number (p)))_ if we accept Gödel's confusing use of nomenclature _._

It is this kind of confusion that runs through the entire the formal proof of Gödel's first incompleteness theorem.

Conclusion

There are many, very serious flaws in Gödel's first incompleteness theorem. The theorem does not succeed in accomplishing its goal of demonstrating that in system _P_ there is an arithmetical statement that is true, yet it is neither provable nor unprovable. There are at least three distinct methods that can be utilized to falsify Gödel's first incompleteness theorem.

The first method centers around the demonstration that axiom III, 1 is invalid when constants (number-signs in Gödel's terminology) are substituted for variables. The constants under consideration are the natural numbers including zero. The axiom ( _v_  _a_ )  subst _a_ (v c ) is correct when variables are substituted for other variables. It is also correct when the variables, which undergo substitution, represent entire formulas as long as certain precautions are taken. Gödel accurately advises that certain precautions must be taken when the variables, which undergo substitution, represent entire formulas, but he does not heed his own advice. The problem arises when natural numbers are substitutes for variables. This causes difficulties that cannot be surmounted.

The second method centers around the demonstration that Theorem V is seriously flawed. The terms _number(x_ 1 _)_ and _number(x_ n _)_ occurring in Formula (3) are not the same as the terms _number(x_ 1 _)_ and _number(x_ n _)_ occurring in Formula (4). The fact that Gödel represents them as equivalent terms is an error. This error is utilized in a key portion of the formal proof of the first incompleteness theorem. Without the use of this erroneous equivalency of terms, the formal proof is debilitated.

The third method centers around the demonstration that Formulas (15) and (16) are improperly formulated. These formulas represent the culmination of the formal proof. Both Formulas (15) and (16) are improperly constructed. They are each improperly constructed in a similar manner. The left side of a certain formula is improperly combined with the right side of another formula.

_Fathoming Gödel_ has tried to deal with all the troubling aspects of Gödel's paper; any lingering questions should not deter us from arriving at a conclusion. Gödel's paper, _On Formally Undecidable Propositions of_ _Principia_ _Mathematica_ _and Related Systems I_ , has a daunting title that is a harbinger of the complexity within, but despite its complexity, it is incorrect.

We have reached the end of the author's brief e-book _Fathoming Gödel,_ yet one task remains. That task is to remind the reader of another brief book–the uniqueness and peculiarity of which cannot be denied. In 1967 Richard Brautigan's _Trout Fishing in America_ was published. His book famously ends with the word _mayonnaise._

BUBBLE-BONE ICE

For the past few years, I have been trying to determine the sequence of events that occur during the formation of an ice sheet over the rushing waters of a brook. There doesn't seem to be a clear explanation of this perplexing phenomenon–it appears no scientific consensus has been reached on this subject. On the other hand, it is easy to imagine how ice can form on the still waters of a pond or lake, if the air temperature is below freezing. First, a thin film of ice will form over the surface of a pond or any other still body of water. Secondly, assuming nothing disturbs it, the thin film of ice will gradually build up until it is several inches thick. Lastly, the insulating properties of this thick layer of ice will take over, and these will keep the remaining water under the ice from freezing.

This method of ice formation cannot occur on the swiftly flowing waters of a brook because the flowing water would break up any fragile film of ice. I have read about a kind of ice called _anchor ice_ that is found on the bottom of unfrozen brooks and lakes. There, according to _Webster's Dictionary,_ it often coats the stones that rest on the bottom. That kind of ice might exist, but wouldn't being covered with water cause the ice to melt? How could anchor ice form in a streambed? The temperature of the running water would have to be below freezing.

With these questions and others in mind, I began to study the formation of ice on a swiftly flowing brook. I decided on Beaver Brook, a tributary of the Rockaway River, as my subject. The nearby ponds had been frozen over for weeks, yet the brook was still completely ice free except for some fringe ice or frost ice that stretched out along both banks at irregular intervals.

The Rockaway River and its tributaries have been flowing through what is now Morris County, New Jersey since the Wisconsin Ice Sheet retreated about 25,000 years ago. Geologically the region is known as the New England Upland, but it is most often called the Highlands. The landscape is dominated by flat-topped ridges that are often covered with various hardwood trees and occasionally stands of cedar. Many small lakes are embedded in between the ridges. Today, the Rockaway River courses through the county all but unnoticed by most of the residents. Barry Brantner, a keen eyed environmentalist, who has studied maps of the area, claims that several tributaries of the Rockaway River are named Beaver Brook.

For many days I observed how ice often formed around obstructions in the brook. Large, tangled rows of wild roses grew along both banks of the brook in many spots. At a sharp bend in the brook, about twenty stems from a tangled thicket of wild roses dipped into the water. A small, irregularly shaped sphere of ice would form on each stem about an inch or less above the waterline. I assumed that the brook's rushing water collided with the stems and produced minute droplets of spray, which coalesced into the ice spheres when the air temperature was below freezing. During a prolonged cold snap these ice spheres would enlarge and merge together until they formed a small, bumpy, ice shelf. A few yards downstream was a still pool of water formed when a small streamlet merged with the brook where the brook made a right-angled bend. Here the water froze just as the water in a pond would.

As I examined the brook more thoroughly, I found an unusual ice formation. The brook often coursed through tangles of roots, sticks and dead leaves. The jumbled detritus that broke the water's surface was usually small in comparison to the tangled mass that spread out below. In some of these waterlogged tangles, a few of the sticks would oscillate. They would continually produce bubbles of various sizes like someone blowing through a straw in a glass of milk. As these bubbles floated downstream they were often captured by some obstruction. These were usually formed around a branch that had bent into the brook and had snagged some dead leaves and twigs. As the obstruction increased in size it would capture enough bubbles and foam for an effervescent island to form.

These bubble-islands would be shaped by the current until they looked like a bone shaped dog's chew toy. The bulbous downstream end, which butted against the obstruction, would be crowded as the bubbles piled up. The middle portion would be tapered since the current would peel off many bubbles. The upstream end's position allowed it to intercept the most bubbles, and as they lodged the end enlarged. The islands of bubbles and foam would freeze while the water all around them remained ice free. The bubble-ice had the color and texture of snow. It was lighter than balsa wood, and it was so brittle that it was difficult to pick up even a small piece without it breaking up. A cross section showed a compact bubble structure like an empty honeycomb except that the cells were spherical, not hexagonal. The spheres averaged 1/4 inch in diameter. The bubble-ice islands rose in a gentle curve from the water, the apex of which arched over a thickened middle section. There were narrow, light brown striations running the length of the islands, which looked like miniature replicas of the wrack lines left on a beach after high tide. I wondered whether the bubbles were naturally occurring or were they the result of household wastewater run-off that contained detergents.

Finally, the brook froze over. I didn't observe the actual freezing. The one day that I decided not to bother looking at the brook was the day when it froze over. The watched pot doesn't boil, and the watched brook doesn't freeze. There hadn't been a significant drop in the temperature so that wasn't a factor in the freezing of the brook. There had been a 2 or 3 inch drop in the water level, as though a faucet had been turned down. The water level had sunk abruptly while for the previous week or more it had been constant. I had noticed that often when a brook froze over there was a shelf of ice running along the edge of the brook that was 3 or more inches above the newly frozen ice. Exactly how this fringe ice shelf formed had never been clear to me. Now, it was apparent that the shelf of fringe ice represented the previous water level and was nothing more than the normally occurring fringe ice that forms along the banks of a brook.

When a brook freezes over the ice sheet has many small variations in it. The interactions between ice, flowing water and streambed result in a harmonious landscape of sights and sounds held in a shivery balance. Much of the ice was an inch or more thick–almost strong enough to hold my weight without cracking.

The next day a powerful storm deposited 2 feet of snow. I didn't return to the brook for about one week. By that time the ice was beginning to melt because of a slight rise in the temperature. There seemed to be fewer bubbles in the brook than before and there seemed to be no ready explanation for this. Most of the ice had melted, and what was left had shrunken back to a band of fringe ice along both banks.

Farther upstream there was a straight portion of the brook about 100 feet long. At the midpoint of this section a cluster of trees spread their bare branches across the brook. The branches were crowded together so thickly that despite their leaflessness they formed a patch of shade. The way the long branches arched over the brook brought to mind several lines of a poem:

"The river's tent is broken: the last fingers of leaf

Clutch and sink into the wet bank. The wind

Crosses the brown land, unheard. The nymphs are departed."

With those three lines, "The Fire Sermon" begins, which is the title of the third section of T. S. Eliot's _The Wasteland_. The poem's protagonist is viewing an autumnal Thames as it flows through London.

Where I was walking the trees actually formed a tent over the brook when in leaf, and the branches at this particular spot grew so densely intertwined that even in the middle of the winter they formed a tent albeit a leafless one, which shaded the brook.

As it flows under London Bridge the Thames is 250 yards wide, and further east at Gravesend it is 700 yards wide. The word, _Thames_ is probably derived from a Celtic word, which means broad river. The trees along the banks of the Thames as it flowed through London would not form a tent because the river is much too wide.

Possibly, a tent of leaves could be formed in another way. The fallen leaves could gather on the river's surface in such profusion that they would form a carpet covering the water. Once, I had seen this happen to Beaver Brook during a fall in which there had been almost no rain. Even when the brook was as thickly carpeted with fallen leaves as the forest floor, I saw the reflection of the moon under the upturned corner of a leaf. I have never seen the Rockaway River covered with leaves, and it is only 1/10 the width of the Thames so it is unlikely fallen leaves could cover the Thames.

_Tent_ has a second meaning, which is less well known, it refers to a plug of gauze inserted into a wound or opening to dilate it or keep it open. The broken tent that T. S. Eliot mentions could be a plug that keeps open a passageway to a magical and mysterious Thames where nymphs reside. In the modern world that tent has been broken and the passageway has been closed, and we are left with only the materialistic Thames.

Back here, the brook's winter tent provided a small portion of the melting ice with shade allowing it to maintain a remnant of its original form. An expanse of exposed water–enclosed by the melting ice on three sides–was stagnant, and it formed an elongated _V_. The melting ice was thin, gray and waterlogged. Despite its diminished state the ice managed to span the width of the brook at the bottom of the _V,_ and thus the stagnant water was separated from the flowing water by the ice. When the ice reached the center of the brook, it was only a narrow dam, 1 inch wide, weak and gray. On one side of the flimsy dam, stagnant water stretched out upstream. On the other side of it, the brook resumed its sinuous flow. The dam was weak; it was only durable enough to stop the surface flow of water. The waning ice had formed a cul-de-sac that trapped bubbles and foam. If I were to break the dam, perhaps with a long stick, the stagnant pool of bubbles and foam would drain downstream. If I were to try to keep the ice dam from reforming by placing small sticks along the edges of the narrow channel, I had just contemplated forming; I would have constructed a tent, though not of gauze.

A flotilla of trapped bubbles and foam covered the stagnant water. They had formed ever decreasing, concentric arcs of white froth as they descended down the elongated _V_ until finally they came to rest on the still water. The white arcs decorated the smooth surface of the water. A few feet in front of the large mouth of the _V_ a thin, black line was barely visible. At this boundary line, the water seemed to slip under itself. This thin, black line performed a frenzied dance, back and forth, across the width of the brook as if it were whipped by an unseen gale. The bubbles and foam suddenly lost their momentum as they crossed this line. They decelerated to an almost complete stop. Then I realized the water wasn't running under itself; instead, it was sliding under a thin film of detergent. The bubbles began losing their momentum as soon as they no longer rested on the water and instead floated on the stagnant film of detergent. This suggested that the ice-bubble islands were made from detergent bubbles. Detergent has the property of smoothing out swiftly flowing water. This would give detergent bubbles an advantage over naturally occurring bubbles in the formation of ice-bubble islands. Waterways have not been polluted with detergents until recently. Bubble-ice is ephemeral by nature since it is engulfed once the familiar ice sheet is formed. Taking these two facts into consideration, bubble-ice may not have been described before. However, there is a type of hail known as graupel that consists of brittle, white ice particles with a structure like snow. Neither graupel nor bubble bone ice look like mayonnaise.

References- Friends of Paraclete

Franzén, Torkel. 2005. _Gödel's Theorem: An Incomplete Guide to its Use and Abuse_. Wellesley, MA: A. K. Peters, Ltd.

Gödel, Kurt. 2000. _On Formally Undecidable Propositions Of_ _Principia_ _Mathematica_ _And Related Systems_. Boulder, CO: http://www.research.ibm.com/people/h/hirzel/papers/canon00-goedel.pdf translation by Martin Hirzel.

Goldstein, Rebecca. 2005. _Incompleteness: The Proof and Paradox of Kurt Gödel_. New York: Atlas Books a division of W. W. Norton & Company.

Hofstadter, Douglas. 1979. _Gödel, Escher, Bach: An Eternal Golden Braid_. New York: Vintage Books a division of Random House.

Nagel, Ernest and Newman, James R. 1958. _Gödel's Proof_. New

York: New York University Press.

Endnotes- Parthian Shot

1. Kurt Gödel, _On Formally Undecidable Propositions of_ _Principia_ _Mathematica_ _and Related Systems 1_ (Boulder, CO: http://www.research.ibm.com/people/h/hirzel/papers/cannon00-goedel.pdf,2007) p.1 Translator Martin Hirzel's _About This Document_

2. Torkel Frazén, _Gödel_ _'s Theorem: An Incomplete Guide to Its Use and Abuse_ (Wellesley, MA: A.K. Peters, Ltd., 2005) p.16.

3. Kurt Gödel, _On Formally Undecidable Propositions of_ _Principia_ _Mathematica_ _and Related Systems 1_ (Boulder, CO: http://www.research.ibm.com/people/h/hirzel/papers/cannon00-goedel.pdf, 2007) p.4.

4 Ibid., p.4.

5 Ibid., pp.4-5.

6 Ibid., p.5.

7 Ibid., p.10.

8 Ibid., p.6.

9 Ibid., p.16.

10 Ibid., p.4.

11 Ibid., p.16.

12 Ibid., p.14.

13 Ibid., pp.13-14.

14 Ibid., p.9.

15 Ibid., p.13.

16 Ibid., p.9.

17 . Glenn James and Robert C. James, _Mathematics Dictionary_ (Princeton, NJ: D. Von Nostrand Company, Inc.,1959) p.154.

18 . Kurt Gödel, _On Formally Undecidable Propositions of_ _Principia_ _Mathematica_ _and Related Systems 1_ (Boulder, CO: http://www.research.ibm.com/people/h/hirzel/papers/cannon00-goedel.pdf, 2007) p.12.

19 . Ibid., p.12.

20 . Ibid., p.5.

21 Ibid., p.12.

22 . Ibid., p.4.

23. Glenn James and Robert C. James, _Mathematics Dictionary_ (Princeton, NJ: D. Von Nostrand Company, Inc., 1959) p.318.

24 . Kurt Gödel, _On Formally Undecidable Propositions of_ _Principia_ _Mathematica_ _and Related Systems 1_ (Boulder, CO: http://www.research.ibm.com/people/h/hirzel/papers/cannon00-goedel.pdf, 2007) p.12 _._

25 . Ibid., p.5.

26 . Ibid., pp.12-13.

27 . Ibid., p.5.

28 . Ibid., p.13.

29 . Ibid., p.5.

30 . Ibid., p.9.

31 . Ibid., p.15.

32 . Ibid., p.13.

33 . Ibid., p.15.

34 . Ibid., p.13.

35 . Ibid., p.15.

36 . Ibid., p.13.

37 . Ibid., p.15.

38 . Ibid., p.13.

39 . Ibid., p.15.

40 . Ibid., p.15.

41 . Ibid., p.15.

42 . Ibid., p.15.

43 . Ibid., p.16.

44 . Ibid., p.15.

45 . Ibid., p.15.

46 . Ibid., p.16.

47 . Ibid., p.16.

48 . Ibid., p.15.

49 . Ibid., p.16.

50 . Ibid., p.7.

51 . Ibid., p.11.

52 . Ibid., p.16.

