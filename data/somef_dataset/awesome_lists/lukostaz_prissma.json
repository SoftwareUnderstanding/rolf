{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lukostaz/prissma",
    "technique": "GitHub API"
  },
  "contact": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Further details on the [PRISSMA Project Page](http://wimmics.inria.fr/projects/prissma/), or contact [Luca Costabello](http://luca.costabello.info).\n\n",
      "technique": "Header extraction"
    }
  ],
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2013-10-09T14:28:29Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-01-25T14:39:06Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9725777908206371,
        0.9475358208283384,
        0.9811270426391452,
        0.8686768397551204
      ],
      "excerpt": "PRISSMA is a presentation-level framework for Linked Data adaptation. \nIt is a Java rendering engine for RDF that selects the most appropriate presentation of RDF triples according to mobile context. \nPRISSMA is compatible with the Fresnel vocabulary and is based on a graph edit distance algorithm that finds optimal error-tolerant subgraph isomorphisms between RDF context graphs. \nPRISSMA is optimized for Android platforms, but can be used in regular Java Projects as well. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8340465454037567
      ],
      "excerpt": "PRISSMA depends on the Simmetrics and WS4J libraries, that are not available in Maven central. Simmetrics 1.6.2 and WS4J 1.0.1 are provided under libs/. You can install it in your local Maven repository: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8833142314472995,
        0.9768558432559873
      ],
      "excerpt": "PRISSMA depends on the xerces-impl Android-optimized version available available here. A copy of the library is available under libs/. \nAdd it to local Maven repository: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9546383868641645
      ],
      "excerpt": "Prisms are context-aware presentation metadata for Linked Data visualization based on Fresnel and PRISSMA. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9812717871814071
      ],
      "excerpt": "// The Decomposition is the shared data structure for Prisms \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9661306646839511,
        0.860059181823877,
        0.9557549621524134
      ],
      "excerpt": "// The inputPrism Jena Model is the Prism read from local repository \nModel inputPrism = ModelFactory.createDefaultModel(); \n// Get the path of the Prism local repository on Android devices. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490037945672047
      ],
      "excerpt": "// Decompose the Prism \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.997823277657093,
        0.8450111753243628,
        0.8419060796771416
      ],
      "excerpt": "// inputResource is the desired RDF resource to display. \nModel prism = readPrismFromFS(matcher.results); \nRenderer r = new Renderer(); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Context-Aware Adaptation for Linked Data",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The latest PRISSMA release is [v1.0.0](https://github.com/lukostaz/prissma/releases/tag/v1.0.0). Download it and add it to your build path.\n\nMake sure `config.properties` is included in your build path and that it contains the  parameter values needed by the search algorithm (e.g. [similarity threshold, cost of edit distance operations, etc](http://2014.eswc-conferences.org/sites/default/files/papers/paper_81.pdf)).\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lukostaz/prissma/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Mon, 20 Dec 2021 22:48:30 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lukostaz/prissma/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "lukostaz/prissma",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "PRISSMA is a Java library, optimized for Android applications.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9893272198983933
      ],
      "excerpt": "$ git clone https://github.com/lukostaz/prissma.git \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466,
        0.9934124771769386
      ],
      "excerpt": "$ cd prissma \n$ mvn install:install-file \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9934124771769386
      ],
      "excerpt": "$ mvn install:install-file \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9934124771769386
      ],
      "excerpt": "$ mvn install:install-file \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.999833231880651
      ],
      "excerpt": "$ mvn install \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8037944968009851
      ],
      "excerpt": "Prisms can be created manually, or with PRISSMA Studio. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9625196775343342
      ],
      "excerpt": "String p = Environment.getExternalStorageDirectory().getAbsolutePath(); \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lukostaz/prissma/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Java",
      "XSLT"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "PRISSMA",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "prissma",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "lukostaz",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lukostaz/prissma/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "lukostaz",
        "body": "### Notes\n- This is a self-contained library: `PRISSMA-1.0.0-jar-with-dependencies.jar` library contains all the dependencies needed by PRISSMA.\n- `config.properties` must be added to the build path.\n",
        "dateCreated": "2015-02-01T22:16:50Z",
        "datePublished": "2015-02-02T22:00:54Z",
        "html_url": "https://github.com/lukostaz/prissma/releases/tag/v1.0.0",
        "name": "PRISSMA 1.0.0",
        "tag_name": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/lukostaz/prissma/tarball/v1.0.0",
        "url": "https://api.github.com/repos/lukostaz/prissma/releases/904429",
        "zipball_url": "https://api.github.com/repos/lukostaz/prissma/zipball/v1.0.0"
      }
    ],
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "+ Java 1.6\n+ Android 4.2.2\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```java\n// Read input context\nModel actualCtx = ModelFactory.createDefaultModel();\nInputStream inCtx = FileManager.get().open( p + \"/PRISSMA/ctx/ctx1.ttl\" );\nif (inCtx != null) {\n    actualCtx.read(inCtx, null,  \"TURTLE\");\n}\n\n// Instantiate an error-tolerant matcher with a decomposition\nMatcher matcher = new Matcher(decomp);\n// get the prissma:Context element, i.e. the root element of input context\nRDFNode ctxRoot = ContextUnitConverter.getRootCtxNode(actualCtx);\n// Covnert core PRISSMA entities to their PRISSMA classes\nctxRoot = ContextUnitConverter.switchToClasses(ctxRoot, decomp);\n// Execute error-tolerant match against Prisms in the decomposition\nmatcher.search(ctxRoot);\n\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Mon, 20 Dec 2021 22:48:30 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "fresnel",
      "rdf",
      "linked-data",
      "semantic-web",
      "context-awareness"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Prism to style a `dbpedia:Museum` when a user is walking in Paris.\n\nFirst, define the Prism general information:\t\n```turtle\n:museumPrism a prissma:Prism ;\n   fresnel:purpose :walkingInParis ;\n   fresnel:stylesheetLink  <style.css>.\n```\n\nAdd some Fresnel Lenses:\n```turtle\n:museumlens a fresnel:Lens;\n   fresnel:group :museumPrism;\n   fresnel:classLensDomain dbpedia:Museum;\n   fresnel:showProperties (  \n                     dbpprop:location \n                     dbpprop:publictransit \n                     ex:telephone\n                     ex:openingHours\n                     ex:ticketPrice ) .\n```\n\nAdd Fresnel styling metadata:\n\n```turtle\n:addressFormat a fresnel:Format ;\n   fresnel:group :museumPrism ;\n   fresnel:propertyFormatDomain \n                     dbpprop:location ;\n   fresnel:label \"Address\" ;\n   fresnel:labelStyle \n       \"css-class1\"^^fresnel:styleClass ;\n   fresnel:valueStyle \n       \"css-class2\"^^fresnel:styleClass .\n```\n\nFinally, define a `prissma:Context` entity with the [PRISSMA vocabulary](http://ns.inria.fr/prissma/v2/prissma_v2.html):\n```turtle\n#: PRISSMA context description\n:walkingInParisArtLover a prissma:Context ;\n   prissma:user :artLover ; \n   prissma:environment :parisWalking .\n    \n:artLover a prissma:User ;\n   foaf:interest \"art\".\n\n:parisWalking a prissma:Environment ;\n   prissma:poi :paris ;\n   prissma:motion \"walking\" .\n\t\n:paris geo:lat \"48.8567\" ;\n   geo:long \"2.3508\" ;\n   prissma:radius \"5000\" .\n```\nSave the Prism locally, and store it in the Decomposition structure as explained below.\n\n\n\n",
      "technique": "Header extraction"
    }
  ]
}