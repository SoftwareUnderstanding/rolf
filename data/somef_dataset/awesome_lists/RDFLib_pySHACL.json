{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "DOI: [10.5281/zenodo.4750840](https://doi.org/10.5281/zenodo.4750840) (For all versions/latest version)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "cff-version: 1.2.0\nmessage: \"If you use PySHACL in a publication, please cite it as below.\"\nauthors:\n- family-names: \"Sommer\"\n  given-names: \"Ashley\"\n  orcid: \"https://orcid.org/0000-0003-0590-0131\"\n- family-names: \"Car\"\n  given-names: \"Nicholas\"\n  orcid: \"http://orcid.org/0000-0002-8742-7730\"\ntitle: \"pySHACL\"\nversion: 0.17.3\ndoi: 10.5281/zenodo.4750840\nlicense: Apache-2.0\ndate-released: 2021-10-11\nurl: \"https://github.com/RDFLib/pySHACL\"",
      "technique": "File Exploration"
    },
    {
      "confidence": [
        0.9955037092270798
      ],
      "excerpt": "Holger Knublauch; Dimitris Kontokostas. Shapes Constraint Language (SHACL). 20 July 2017. W3C Recommendation. URL: https://www.w3.org/TR/shacl/ ED: https://w3c.github.io/data-shapes/shacl/ \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/RDFLib/pySHACL",
    "technique": "GitHub API"
  },
  "contact": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Project Lead:\n**Nicholas Car**\n*Senior Experimental Scientist*\nCSIRO Land & Water, Environmental Informatics Group\nBrisbane, Qld, Australia\n<nicholas.car@csiro.au>\n<http://orcid.org/0000-0002-8742-7730>\n\nLead Developer:\n**Ashley Sommer**\n*Informatics Software Engineer*\nCSIRO Land & Water, Environmental Informatics Group\nBrisbane, Qld, Australia\n<Ashley.Sommer@csiro.au>\n<https://orcid.org/0000-0003-0590-0131>\n",
      "technique": "Header extraction"
    }
  ],
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "CONTRIBUTING\nThe PySHACL project encourages submissions from anyone who wishes to contribute\nThere are some strict submission quality requirements:\nCode Format\nPySHACL uses the black code style. https://github.com/psf/black\nSpecifically, we use v20.8b1 in py36 mode, with line length of 119, and skip-string-normalization = true.\nCode Linting\nPySHACL requires all code to pass the Flake8 linter. In the internal test suite, we use Flake8 v3.8.0.\nIn addition to Flake8, we use isort to keep the import strings at the top of each source file in a consistent sorted order. The version if isort used is v5.7.0 and it is configured with the isort settings listed in the pyproject.toml file.\nType Checking\nPySHACL uses MyPy to run static type analysis checks on the code. Not all parts of PySHACL have type annotations, but those parts that do should be annotated correctly to pass the MyPy test.\nThe internal test suite uses MyPy v0.800.\nTesting\nThe best way to comprehensively test PySHACL is to use Tox.\nIt is a simple matter of running pip3 install tox then tox on the commandline in the project root.\nThis will run a whole suite of tests, including pytest, flake8, mypy, black and isort.\nAll tests in the PySHACL pytest test suite should pass without errors.\nMakefile\nThere is also a Makefile in the project root that you can for covenience to kick off tests with make test, as well as some non-tox commands that can be invoked with make format, make list and make type-check.",
    "technique": "File Exploration"
  },
  "contributor": [
    {
      "confidence": [
        1
      ],
      "excerpt": "See the [CONTRIBUTORS file](https://github.com/RDFLib/pySHACL/blob/master/CONTRIBUTORS.md).\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "contributors": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributors\nAshley Sommer\n* almost everything!\nNicholas Car\n* a few small admin bits and pieces\nJonathan Yu\n* pyinstaller spec for compiling pySHACL cli as a Windows binary",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-09-05T11:13:51Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-13T03:57:28Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.967040300964174,
        0.9511460146353469
      ],
      "excerpt": "This is a pure Python module which allows for the validation of RDF graphs against Shapes Constraint Language (SHACL) graphs. This module uses the rdflib Python library for working with RDF and is dependent on the OWL-RL Python module for OWL2 RL Profile based expansion of data graphs. \nThis module is developed to adhere to the SHACL Recommendation: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8385056687438275
      ],
      "excerpt": "used to create an \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8592708587358265
      ],
      "excerpt": "PySHACL is a Python3 library. For best compatibility use Python v3.7 or greater. Python3 v3.6 or below is not supported and this library does not work on Python v2.7.x or below. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A Python validator for SHACL",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://pyinstaller.readthedocs.io/",
      "technique": "Regular expression"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/RDFLib/pySHACL/releases",
    "technique": "GitHub API"
  },
  "faq": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Under certain circumstances pySHACL can produce a `Validation Failure`. This is a formal error defined by the SHACL specification and is required to be produced as a result of specific conditions within the SHACL graph.\nIf the validator produces a `Validation Failure`, the `results_graph` variable returned by the `validate()` function will be an instance of `ValidationFailure`.\nSee the `message` attribute on that instance to get more information about the validation failure.\n\nOther errors the validator can generate:\n- `ShapeLoadError`: This error is thrown when a SHACL Shape in the SHACL graph is in an invalid state and cannot be loaded into the validation engine.\n- `ConstraintLoadError`: This error is thrown when a SHACL Constraint Component is in an invalid state and cannot be loaded into the validation engine.\n- `ReportableRuntimeError`: An error occurred for a different reason, and the reason should be communicated back to the user of the validator.\n- `RuntimeError`: The validator encountered a situation that caused it to throw an error, but the reason does concern the user.\n\nUnlike `ValidationFailure`, these errors are not passed back as a result by the `validate()` function, but thrown as exceptions by the validation engine and must be\ncaught in a `try ... except` block.\nIn the case of `ShapeLoadError` and `ConstraintLoadError`, see the `str()` string representation of the exception instance for the error message along with a link to the relevant section in the SHACL spec document.\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 45,
      "date": "Mon, 20 Dec 2021 21:36:10 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/RDFLib/pySHACL/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "RDFLib/pySHACL",
    "technique": "GitHub API"
  },
  "identifier": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://zenodo.org/badge/latestdoi/147505799",
      "technique": "Regular expression"
    }
  ],
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Install with PIP (Using the Python3 pip installer `pip3`)\n```bash\n$ pip3 install pyshacl\n```\n\nOr in a python virtualenv _(these example commandline instructions are for a Linux/Unix based OS)_\n```bash\n$ python3 -m virtualenv --python=python3 --no-site-packages .venv\n$ source ./.venv/bin/activate\n$ pip3 install pyshacl\n```\n\nTo exit the virtual enviornment:\n```bash\n$ deactivate\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8142402087472481
      ],
      "excerpt": "A Python validator for SHACL. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370442026435456
      ],
      "excerpt": "executable for Windows that has the same characteristics as the Linux/Mac \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8400637484106573,
        0.9783673217539645
      ],
      "excerpt": "pySHACL Command Line utility. See above for the pySHACL command line util usage instructions. \nSee the PyInstaller installation guide for info on how to install PyInstaller for Windows. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.833114516308531,
        0.9452797457628369
      ],
      "excerpt": "bash powershell \n$ cd src/pyshacl \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9365578768166802,
        0.8924490749767957
      ],
      "excerpt": "You can now run the pySHACL Command Line utility via pyshacl.exe. \nSee above for the pySHACL command line util usage instructions. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9839631290709523,
        0.995613848102413
      ],
      "excerpt": "For best compatibility when installing from PyPI with pip, upgrade to pip v18.1.0 or above. \n  - If you're on Ubuntu 16.04 or 18.04, you will need to run sudo pip3 install --upgrade pip to get the newer version. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8216792046785676
      ],
      "excerpt": "pySHACL Command Line utility. See above for the pySHACL command line util usage instructions. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8629400568140789
      ],
      "excerpt": "$ cd src/pyshacl \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9047941711097115,
        0.8000205626400522
      ],
      "excerpt": "This will output pyshacl.exe in the dist directory in src/pyshacl. \nYou can now run the pySHACL Command Line utility via pyshacl.exe. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/RDFLib/pySHACL/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "JavaScript",
      "Shell",
      "Makefile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "pySHACL",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pySHACL",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "RDFLib",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/RDFLib/pySHACL/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "## Fixes\r\n- Don't crash when a SHACL function is registered more than once (eg, if a function is both SPARQLFunction and JSFunction), fixes \\#108, thanks Gabe Fierro\r\n- Fixed typo in CLI help output, thanks Alex Nelson\r\n- Don't print env vars when importing JS module, thanks MPolitze\r\n- Fix typo preventing OWL-RL >=6.0 to be used with pySHACL, Fixes #111\r\n\r\n## Added\r\n- Add Snyk checks to CI/CD pipeline",
        "dateCreated": "2021-12-13T03:57:21Z",
        "datePublished": "2021-12-13T04:02:54Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.17.3",
        "name": "2021-12-13 - v0.17.3 - Bugfixes",
        "tag_name": "v0.17.3",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.17.3",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/55153228",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.17.3"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "## Fixes\r\n- SPARQL queries with words \"values\", \"minus\", or \"service\" in its comments no longer incorrectly throw an exception.\r\n\r\n## Changed\r\n- Switched from Travis to Drone for CI testing\r\n\r\n## Added\r\n- New Table output type for commandline tool. Thanks @nicholascar",
        "dateCreated": "2021-10-25T06:30:24Z",
        "datePublished": "2021-10-25T06:34:22Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.17.2",
        "name": "2021-10-25 - v0.17.2 - CLI Table output",
        "tag_name": "v0.17.2",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.17.2",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/51951390",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.17.2"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "## Fixes\r\n- Handle transitive subclasses when evaluating sh:targetClass - @gtfierro\r\n  - Fixes #96\r\n- Improve detection of RDF/XML files when loading unknown content\r\n  - Fixes #98\r\n- Imported type stubs and resolved ALL MyPy issues! (this was a big effort)\r\n- Logic fixes in the dataset loader (thanks to inconsistencies exposed by MyPy)\r\n\r\n## Changed\r\n- Add special cases to sh:dataclass constraint, when the given shape uses rdfs:Literal or rdfs:Dataclass as the dataclass to match on\r\n  - Fixes #71\r\n\r\n## Added\r\n- Add datashapes.org/schema as a built-in graph\r\n  - Fixes #98\r\n- Added ability to pass a TextIO or TextIOWrapper object into the dataset loader",
        "dateCreated": "2021-10-11T05:56:56Z",
        "datePublished": "2021-10-11T06:00:31Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.17.1",
        "name": "2021-10-11 - v0.17.1 - Collection of bugfixes",
        "tag_name": "v0.17.1",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.17.1",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/51117806",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.17.1"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "# Notice\r\nThis version of PySHACL **requires RDFLib 6.0.0**. \r\nAs a direct result of that, this version of PySHACL **also requires Python v3.7**.\r\n\r\n## Changed\r\n- Upped RDFLib min version to 6.0.0 in order to get built-in json-ld\r\n- Upped OWL-RL to min version 5.2.3 in order to remove json-ld dependency\r\n- Made min python version v3.7\r\n- Change black config to use python 3.7 compat code\r\n- Re-black and isort all source files",
        "dateCreated": "2021-09-13T13:08:12Z",
        "datePublished": "2021-09-13T13:10:35Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.17.0",
        "name": "2021-09-13 - v0.17.0 - Dependency Up",
        "tag_name": "v0.17.0",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.17.0",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/49455130",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.17.0"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "bump OWL-RL version to 5.2.3, and make `rdflib_jsonld` an optional dependency",
        "dateCreated": "2021-09-13T12:41:32Z",
        "datePublished": "2021-09-13T13:00:08Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.16.2.post1",
        "name": "minor update",
        "tag_name": "v0.16.2.post1",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.16.2.post1",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/49454422",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.16.2.post1"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "# Notice\r\nThis is the **last version of PySHACL to support RDFLib 5.0.0**, subsequent releases of PySHACL will depend on RDFLib v6.0.0.\r\nAs a direct result of that, this is also the **last version of PySHACL to support Python v3.6**.\r\n\r\n## Changed\r\n- Pinned JSON-ld dep to <6.0 to avoid the tombstone release (so not to force rdflib 6.0)\r\n- Updated minimum Black version to 21.8b0 to fix a black bug\r\n- Re-black and isort all source files\r\n\r\n## Fixed\r\n- Fixed detection of import error when loading json-ld module in RDF loader\r\n- Fixed Black bug with new version of black",
        "dateCreated": "2021-09-12T22:17:28Z",
        "datePublished": "2021-09-12T22:20:47Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.16.2",
        "name": "2021-09-13 - v0.16.2 - Last RDFLib 5.0.0 release",
        "tag_name": "v0.16.2",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.16.2",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/49421804",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.16.2"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "See v0.16.1 release for or Changelog for release notes",
        "dateCreated": "2021-08-21T03:49:56Z",
        "datePublished": "2021-08-27T01:45:54Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.16.1.post1",
        "name": "2021-08-21 - v0.16.1.post1",
        "tag_name": "v0.16.1.post1",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.16.1.post1",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/48540474",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.16.1.post1"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "## Added\r\n- [ExpressionConstraintComponent](https://www.w3.org/TR/shacl-af/#ExpressionConstraintComponent) is implemented!\r\n  - Use your previously defined SHACL Functions to express complex constraints\r\n  - Added DASH-tests for ExpressionConstraintComponent\r\n  - Added advanced tests for ExpressionConstraintComponent, SHACLRules, and SHACLFunctions.\r\n- New Advanced features example, showcasing ExpressionConstraint and others features\r\n\r\n## Changed\r\n- Allow sh:message to be attached to an expression block, without breaking its functionality\r\n- A SHACL Function within a SHACL Expression now must be a list-valued property.\r\n- Refactored node-expression and path-expression methods to be common and reusable code\r\n- Re-black and isort all source files",
        "dateCreated": "2021-08-19T14:33:00Z",
        "datePublished": "2021-08-19T14:34:45Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.16.1",
        "name": "2021-08-20 - v0.16.1 - ExpressionConstraintComponent",
        "tag_name": "v0.16.1",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.16.1",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/48119810",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.16.1"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "## Changes\r\n- `sh:class` Constraint now applies transitively.\r\n  - This means it will follow `rdfs:subClassOf` relationships right to the top of the hierarchy.\r\n  - Be careful with this, could lead to recursion or infinite loops!\r\n  - This requires a big version number bump because it's technically a breaking change.\r\n  - Fixes #87, thanks `@gtfierro`",
        "dateCreated": "2021-08-19T10:16:46Z",
        "datePublished": "2021-08-19T10:19:22Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.16.0",
        "name": "2021-08-19 - v0.16.0 - Transitive Class Constraint",
        "tag_name": "v0.16.0",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.16.0",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/48103397",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.16.0"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "### Fixed\r\n- Compatibility with RDFLib 6.0.0\r\n  - Don't use `.term()` (PR #84)\r\n  - Use Namespaces in a way that works on both RDFLib 5 and 6.\r\n\r\n### Changed\r\n- Do not patch rdflib with Memory2 store on RDFLib 6.0.0+",
        "dateCreated": "2021-07-20T08:19:37Z",
        "datePublished": "2021-07-20T08:23:18Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.15.0",
        "name": "RDFLib 6.0.0 Support",
        "tag_name": "v0.15.0",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.15.0",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/46458334",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.15.0"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "## Added\r\n- Allow-Warnings is finally available. (Closes #64)\r\n  - Setting this option puts PySHACL into a non-standard operation mode, where Shapes marked with severity of sh:Warning or sh:Info will not cause result to be invalid.\r\n  - Despite the name, it allows both sh:Info and sh:Warning.\r\n  - Try it with `allow_warnings=True` on `validate()` or `-w` in the CLI tool.\r\n\r\n## Fixed\r\n- Fixed Abort Mode. (Fixes #75)\r\n  - This optional mode allows the validator to exit early, on the first time your data fails to validate against a Constraint.\r\n  - Name changed from `abort_on_error` to `abort_on_first`\r\n  - Try it out with `abort_on_first=True` on `validate()` or `--abort` in the CLI tool.\r\n",
        "dateCreated": "2021-07-07T12:17:11Z",
        "datePublished": "2021-07-07T12:21:09Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.14.5",
        "name": "2021-07-07 - v0.14.5",
        "tag_name": "v0.14.5",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.14.5",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/45835971",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.14.5"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "## Added\r\n- Added an iterate_rules option, that causes SHACL Rules to run repeatedly until reaching a steady state. (Closes #76)\r\n  - Works with SPARQLRules, TripleRules, and JSRules.\r\n- Variables {$this}, {$path}, and {$value} will be populated in the sh:message of a SPARQL Constraint. (Closes #30)",
        "dateCreated": "2021-05-26T04:43:51Z",
        "datePublished": "2021-05-26T05:07:53Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.14.4",
        "name": "2021-05-26 - v0.14.4",
        "tag_name": "v0.14.4",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.14.4",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/43572950",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.14.4"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "Re-releasing v0.14.3, in order to push the release to Zenodo for a DOI",
        "dateCreated": "2021-02-20T02:39:39Z",
        "datePublished": "2021-05-12T05:24:44Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.14.3_z",
        "name": "Now citeable.",
        "tag_name": "v0.14.3_z",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.14.3_z",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/42814970",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.14.3_z"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "- Relaxed the Max Evaluation Depth from 28 to 30, we were seeing some real-world cases where meta-shacl was failing on large Shapes Graphs at 28 levels deep.\r\n- sh:namespace values can now be xsd:anyURI or xsd:string or \"literal string\", but now cannot be <URIs>.\r\n- sh:order can now support xsd:decimal values and xsd:integer values, and can be interchanged at will.\r\n",
        "dateCreated": "2021-02-20T02:39:39Z",
        "datePublished": "2021-02-22T06:15:48Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.14.3",
        "name": "0.14.3",
        "tag_name": "v0.14.3",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.14.3",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/38406774",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.14.3"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "# Added\r\n- Potential speedups when executing validation by lazy-loading large modules which may never be required in a normal validation run.\r\n\r\n# Fixed\r\n- Black and Flake8 issues outstanding from 0.14.1 release.\r\n- Workaround a RDFLib bug trying to import requests when requests is not required to be installed.\r\n  - This bug will still be observed if you use SPARQLConstraints, SPARQLFunction or JSFunction features, but it can be worked around by simply installing requests in your python environment.\r\n",
        "dateCreated": "2021-01-02T09:27:35Z",
        "datePublished": "2021-02-22T06:14:46Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.14.2",
        "name": "0.14.2",
        "tag_name": "v0.14.2",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.14.2",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/38406755",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.14.2"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "## Release 0.14.1 - 2020-12-23\r\n\r\n## Added\r\n- Inplace Mode, for when cloning your datagraph is undesirable\r\n  - Normally pyshacl will create an in-memory copy of your datagraph before modifying it (when using ontology mixin, or inferencing features)\r\n  - This might be unwanted if your datagraph is very large or remote and cloning it into memory is not a good option\r\n  - Enabling inplace mode will bypass this clone step, and apply modification operations directly on your data_graph (use with caution!)\r\n  - Enable with `inplace=True` kwarg on `validate()`.\r\n  - Inplace mode is not yet available via the CLI application, and perhaps doesn't even make sense to have it available there.\r\n\r\n## Fixed\r\n- Inferencing will no longer incorrectly place expanded triples into your original data_graph, unless you enable 'inplace'\r\n- SHACL-JS loader will no longer fail if the `regex` module is not installed (it will fall back to using builtin `re`)\r\n- SHACL-Rule DASH-tests will now pass when the SHACL-rule is applied on multigraph (Dataset or ConjunctiveGraph)\r\n",
        "dateCreated": "2020-12-23T02:41:50Z",
        "datePublished": "2020-12-23T02:48:41Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.14.1",
        "name": "Merry Christmas 2020",
        "tag_name": "v0.14.1",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.14.1",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/35641444",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.14.1"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "Have you ever wanted to use Javascript to write SHACL constraints?\r\nDo you want to use Javascript to select custom SHACL targets?\r\nHave you the need to use Javascript to run SHACL Rules for emitting triples?\r\nDo you have the requirement to execute Javascript code from a SPARQL Function?\r\n\r\nIf yes, then this is the release for you!\r\n## Added\r\n- SHACL-JS Support!\r\n- Implements all of the features in the SHACL-JS SHACL Extension specification: https://www.w3.org/TR/shacl-js/\r\n- Includes:\r\n  - JS Constraints\r\n  - JS ConstraintComponents\r\n  - JS SHACL Functions\r\n  - JS SHACL Rules\r\n  - JS Target\r\n  - JS TargetType\r\n- To install it, make sure you do `pip3 install pyshacl[js]` to get the correct extra packages.\r\n\r\n## Changed\r\n- Added JS flag to the CLI tool to enable SHACL-JS features\r\n- Updated README and FEATURES matrix\r\n\r\n## Fixed\r\n- Fixes #43",
        "dateCreated": "2020-10-14T04:01:48Z",
        "datePublished": "2020-10-14T04:06:25Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.14.0",
        "name": "The SHACL-JS Release",
        "tag_name": "v0.14.0",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.14.0",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/32542502",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.14.0"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "## Fixed\r\n- Fixed a long standing issue where our fancy loader would try to `seek()` on a file, after the file\r\n  was closed by the JSON-LD parser\r\n  - (thanks @nicholsn for reporting it)\r\n- Fixed https://github.com/RDFLib/pySHACL/issues/62",
        "dateCreated": "2020-09-11T00:28:14Z",
        "datePublished": "2020-09-11T00:35:18Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.13.3",
        "name": "v0.13.3 - 2020-09-11 Bug fixes",
        "tag_name": "v0.13.3",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.13.3",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/31095074",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.13.3"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "## Added\r\n- Added the ability for PySHACL to use baked in graphs instead of fetching them from a HTTP endpoint when a known graph\r\n  is imported using owl:imports\r\n  - This allows for time savings on graph-load and saves a HTTP request\r\n  - Also allows us to embed fixed errata versions of files in place of release-time ones online\r\n\r\n## Fixed\r\n- With new features, comes new bugs\r\n- With the ability to now load SPARQLFunctions, this removes the barrier for loading Schema.org SHACL in advanced mode\r\n- But when doing so revealed more issues. They are now fixed:\r\n- Fixed SPARQLConstraintComponent getting confused when `shacl.ttl` was loaded into your Shapes file using owl:imports\r\n- Fixed https://github.com/RDFLib/pySHACL/issues/61\r\n\r\n## Changed\r\n- Refactored `SPARQLConstraintComponent` code, to allow for other custom constraint components in the future\r\n  - This prevented SPARQLConstraintComponent getting confused when `shacl.ttl` was loaded into the Shapes file\r\n  using owl:imports\r\n\r\n**Note**\r\nI know there are some mypi errors in this release. This does not affect runtime functionality. These typing errors will be fixed in the near future.",
        "dateCreated": "2020-09-10T03:53:54Z",
        "datePublished": "2020-09-10T04:07:30Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.13.2",
        "name": "v0.13.2 - 2020-09-10 - Faster and Bug Fixes",
        "tag_name": "v0.13.2",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.13.2",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/31022622",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.13.2"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "## Added\r\n- SPARQLTargetType\r\n  - New SPARQL-based Target Type feature\r\n  - The Paramaterisable form of SPARQLTarget from the SHACL Advanced Features spec\r\n  - https://www.w3.org/TR/shacl-af/#SPARQLTargetType\r\n- Added a test for SPARQLTargetType - Theres none in the SHT suite, or the DASH suite.\r\n\r\n## Changed\r\n- Refactored `sh:parameter` code in SPARQL-based Constraint Components, SHACLFunctions, and SPARQL-Based Target Types\r\n  - They all now share a common SHACLParameter helper class, reducing code duplication\r\n- Refactored `SPARQLQueryHelper`\r\n  - `SPARQLQueryHelper` internal class is now more helpful\r\n  - `query_helper` can now extract param bindings into param-value pairs for parameterised queries\r\n  - Reduces more code duplication",
        "dateCreated": "2020-09-07T06:09:41Z",
        "datePublished": "2020-09-07T06:12:54Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/V0.13.1",
        "name": "v0.13.1 - 2020-09-07 - Finally SPARQLTargetType",
        "tag_name": "V0.13.1",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/V0.13.1",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/30834794",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/V0.13.1"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "## Added\r\n- New SHACL Advanced Specification Features!\r\n- All NodeExpressions can now be used in SHACL Rules\r\n  - Focus Node (sh:this)\r\n  - FilterShape (sh:filterShape)\r\n  - Function Expressions (any sh:SHACLFunction and args)\r\n  - Path Expressions (use sh:path in a NodeExpression)\r\n  - Intersection Expressions (sh:intersection)\r\n  - Union Expressions (sh:union)\r\n- SHACLFunctions (including SPARQLFunction)\r\n  - Both SHACLFunction and SPARQLFunction are now fully implemented including unit tests and edge cases\r\n  - SHACLFunctions are bound to PySHACL and can be used in SHACL Rules and NodeExpressions\r\n  - SPARQLFunctions are bound to the RDFLib SPARQL Engine, so they can be used in other SPARQL queries\r\n  - Read the manual for more info: https://www.w3.org/TR/shacl-af/#functions\r\n\r\n## Fixed\r\n- Short versions of uris were sometimes not used in the Validation Report when they should've been\r\n- Checking results of some tests was being skipped! Lucky this wasn't letting through any SHACL errors.\r\n- Fixed error message when using sh:ignoredProperties on a node that isn't sh:closed issue #58",
        "dateCreated": "2020-09-04T13:58:16Z",
        "datePublished": "2020-09-04T14:08:26Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.13.0",
        "name": "New SHACL Advanced Features!",
        "tag_name": "v0.13.0",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.13.0",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/30731490",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.13.0"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "## Fixed\r\n- In a validation report graph, when FocusNode and ValueNode are the same node, and are a blank node, when they get\r\ncopied into the validation report graph they will have the same bnode id as each other.\r\n- Optimised the algorithm for copying different kinds of rdf nodes into the validation graph.\r\n\r\n## Changed\r\n- When the FocusNode and ValueNode are copied into the validation graph from the data graph, they will try to keep the\r\nsame bnode id they had before, if possible.",
        "dateCreated": "2020-08-12T13:45:43Z",
        "datePublished": "2020-08-12T13:56:38Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.12.2",
        "name": "v0.12.2 - 2020-08-12",
        "tag_name": "v0.12.2",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.12.2",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/29607933",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.12.2"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "## Added\r\n- All SHACL Core constraints now have their own autogenerated sh:message.\r\n  - This is used as a fallback when your Shape does not provide its own sh:message\r\n  - See the new sh:resultMessage entries in the Validation Report output\r\n  - These are hopefully more human-readable than the other fields of the Validation Report results\r\n\r\n- Added a copy of the implementation of the new 'Memory2' rdflib triplestore backend.\r\n  - This when using Python 3.6 or above, this is faster than the default 'IOMemory' store by:\r\n    - 10.3% when benchmarking validation with no inferencing\r\n    - 17% when benchmarking validation with rdfs inferencing\r\n    - 19.5% when benchmarking validation with rdfs+owlrl inferencing\r\n\r\n## Changed\r\n- PySHACL is now categorised as **Production/Stable**.\r\n  - This marks a level of maturity in PySHACL we are happy to no longer consider a beta\r\n  - A v1.0.0 might be coming soon, but its just a version number, doesn't mean anything special\r\n- Changed default rdflib triplestore backend to 'Memory2' as above.\r\n- Tiny optimisations in the way sh:message items are added to a validation report graph.\r\n\r\n## Fixed\r\n- Regression since v0.11.0, sh:value and sh:focusNode from the datagraph were not included in the validation report\r\n  graph if the datagraph was of type rdflib.ConjunctiveGraph or rdflib.Dataset.",
        "dateCreated": "2020-07-22T06:18:14Z",
        "datePublished": "2020-07-22T06:35:04Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.12.1",
        "name": "Meaningful messages 2020-07-22",
        "tag_name": "v0.12.1",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.12.1",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/28813014",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.12.1"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "### Removed\r\n#### Announcement\r\n- **Python 3.5 support is removed**. PySHACL now requires Python 3.6 or above.\r\n  - Routine tests are run using Python 3.6.11, 3.7.8, and 3.8.2.\r\n  - Python 3.9 might work but is not yet supported.\r\n\r\n### Added\r\n- Python 3.6-compatible type hinting is added throughout the codebase\r\n- MyPy library is used to run type checking during testing process\r\n- Flake8 linting is added to enforce PEP8\r\n- isort is added to enforce imports linting\r\n- Black is added to keep formatting consistent across releases\r\n\r\n### Changed\r\n- PySHACL is no longer a setuptools-based project with a `setup.py` and `requirements.txt` file.\r\n- PySHACL is now a PEP518 & PEP517 project, it uses `pyproject.toml` and `poetry` to manage\r\ndependencies, build and install.\r\n- For best compatibility when installing from PyPI with `pip`, upgrade to pip v18.1.0 or above.\r\n  - If you're on Ubuntu 16.04 or 18.04, you will need to run `sudo pip3 install --upgrade pip`\r\n- Editor Line Length for PySHACL code is now set to 119 as opposed to 79 chars.",
        "dateCreated": "2020-07-10T14:28:59Z",
        "datePublished": "2020-07-10T14:36:34Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.12.0",
        "name": "The Modernisation Release - 2020-07-10",
        "tag_name": "v0.12.0",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.12.0",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/28444703",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.12.0"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "### Added\r\n- New feature to CLI tool\r\n  - `-V` shows the PySHACL version\r\n- Run module directly\r\n  - You can get access to the same CLI tool if you install the module and run it using `python3 -m pyshacl`\r\n  - See `python3 -m pyshacl --help` for more details\r\n\r\n### Announcement\r\n- **This is the final version with Python v3.5 support**\r\n  - Versions 0.12.0 and above will have newer package management and dependency management, and will\r\n  require Python v3.6+.",
        "dateCreated": "2020-07-09T06:42:54Z",
        "datePublished": "2020-07-09T06:44:59Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.11.6.post1",
        "name": "v0.11.6.post1 2020-07-09",
        "tag_name": "v0.11.6.post1",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.11.6.post1",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/28387849",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.11.6.post1"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "### Fixed\r\n- Fixed a bug present since `v0.11.0`. If the data graph has multiple named graphs, and an extra ontology mixin source\r\nused and that also has multiple named graphs, then only the first graph in the mixins source was added to the datagraph.\r\n  - Now all named graphs from the mixin source are mixed into all named graphs of the datagraph, as originally intended.\r\n  - Fixed one unit test which had been intermittently failing\r\n- Cleaned up the behaviour around performing patch to Boolean Literal parsing on rdflib 5.0.0",
        "dateCreated": "2020-07-09T03:45:10Z",
        "datePublished": "2020-07-09T03:56:44Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.11.6",
        "name": "Incremental release v0.11.6",
        "tag_name": "v0.11.6",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.11.6",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/28384993",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.11.6"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "## Fixed\r\n- Fixed Issue [#040](https://github.com/RDFLib/pySHACL/issues/40)\r\n- Fixed badly-formatted dates in the changelog\r\n\r\n## Added\r\n- Added ability for pySHACL to track and monitor its evaluation path during validation\r\n  - This allows for the validator to detect two different scenarios:\r\n    - A recursive shape has triggered an infinitely-recursive validation, back out\r\n    - Evaluation Path too deep (error generated, prevents python recursion depth errors)\r\n- Added a test for Issue #40",
        "dateCreated": "2020-01-31T13:38:50Z",
        "datePublished": "2020-03-06T03:06:04Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.11.4",
        "name": "[0.11.4] - 2020-01-32",
        "tag_name": "v0.11.4",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.11.4",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/24275683",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.11.4"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "### Fixed\r\n- Fixed Issue [#036](https://github.com/RDFLib/pySHACL/issues/36) \r\n\r\n### Added\r\n- Added test for [#036](https://github.com/RDFLib/pySHACL/issues/36) \r\n\r\n### Changed\r\n- Nodes defined as TargetNode by a SHACL Shape no longer is required to be present in the DataGraph.\r\n\r\n",
        "dateCreated": "2019-11-01T23:05:06Z",
        "datePublished": "2019-11-01T23:09:27Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.11.3.post1",
        "name": "v0.11.3 postrelease bugfix",
        "tag_name": "v0.11.3.post1",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.11.3.post1",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/21161513",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.11.3.post1"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "### Changed\r\n- Bumped min OWL-RL version to 5.2.1 to bring in some new bugfixes\r\n- Corrected some tiny typos in readme\r\n",
        "dateCreated": "2019-10-16T15:19:52Z",
        "datePublished": "2019-10-21T02:43:14Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.11.2",
        "name": "OWL-RL update",
        "tag_name": "v0.11.2",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.11.2",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/20839015",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.11.2"
      },
      {
        "authorType": "User",
        "author_name": "ashleysommer",
        "body": "### Fixed\r\n- Fixed Issue [#032](https://github.com/RDFLib/pySHACL/issues/32) \r\n- Stringification of Focus Node, and Value Node in the results text string now works correctly\r\n  - This is an old bug, that has been around since the first versions of pySHACL\r\n  - Manifests when the DataGraph is a different graph than the ShapesGraph\r\n  - Recent change from using Graphs by default to using Datasets by default helped to expose this bug\r\n  - Thanks to @jameshowison for reporting the bug\r\n\r\n### Changed\r\n- Stringification of a blank node now operates on a rdflib.Graph only, rather than a Dataset.\r\n  - Added mechanism to extract the correct named graph from a dataset when stringifying a blank node.\r\n- Added a workaround for a json-ld loader bug where the namespace_manager for named graphs within a conjunctive graph\r\n  is set to the parent conjunctive graph.\r\n  - This necessary workaround was exposed only after changing the blank node stringification above.\r\n  (Fixing one bug exposed another bug!)\r\n\r\n### Announcement \r\n- **This is the final version with Python v3.5 support**\r\n  - Versions 0.12.0 and above will have newer package management and dependency management, and will\r\n  require Python v3.6+. \r\n",
        "dateCreated": "2019-10-21T02:28:29Z",
        "datePublished": "2019-10-21T02:35:36Z",
        "html_url": "https://github.com/RDFLib/pySHACL/releases/tag/v0.11.3",
        "name": "Incremental fixes",
        "tag_name": "v0.11.3",
        "tarball_url": "https://api.github.com/repos/RDFLib/pySHACL/tarball/v0.11.3",
        "url": "https://api.github.com/repos/RDFLib/pySHACL/releases/20838953",
        "zipball_url": "https://api.github.com/repos/RDFLib/pySHACL/zipball/v0.11.3"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 146,
      "date": "Mon, 20 Dec 2021 21:36:10 GMT"
    },
    "technique": "GitHub API"
  },
  "support": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The SHACL community has a discord server for discussion of topics around SHACL and the SHACL specification.\n\n[Use this invitation link: https://discord.gg/RTbGfJqdKB to join the server](https://discord.gg/RTbGfJqdKB)\n\nThere is a \\#pyshacl channel in which discussion around this python library can held, and you can ask for general pyshacl help too.\n\n",
      "technique": "Header extraction"
    }
  ],
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "shacl",
      "validator",
      "owl",
      "rdf",
      "constraints"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "For command line use:\n_(these example commandline instructions are for a Linux/Unix based OS)_\n```bash\n$ pyshacl -s /path/to/shapesGraph.ttl -m -i rdfs -a -j -f human /path/to/dataGraph.ttl\n```\nWhere\n - `-s` is an (optional) path to the shapes graph to use\n - `-e` is an (optional) path to an extra ontology graph to import\n - `-i` is the pre-inferencing option\n - `-f` is the ValidationReport output format (`human` = human-readable validation report)\n - `-m` enable the meta-shacl feature\n - `-a` enable SHACL Advanced Features\n - `-j` enable SHACL-JS Features (if `pyhsacl[js]` is installed)\n\nSystem exit codes are:\n`0` = DataGraph is Conformant\n`1` = DataGraph is Non-Conformant\n`2` = The validator encountered a RuntimeError (check stderr output for details)\n`3` = Not-Implemented; The validator encountered a SHACL feature that is not yet implemented.\n\nFull CLI Usage options:\n```bash\n$ pyshacl -h\n$ python3 -m pyshacl -h\nusage: pyshacl [-h] [-s [SHACL]] [-e [ONT]] [-i {none,rdfs,owlrl,both}] [-m]\n               [--imports] [--abort] [-a] [-j] [-d] [-f {human,table,turtle,xml,json-ld,nt,n3}]\n               [-df {auto,turtle,xml,json-ld,nt,n3}]\n               [-sf {auto,turtle,xml,json-ld,nt,n3}]\n               [-ef {auto,turtle,xml,json-ld,nt,n3}] [-V] [-o [OUTPUT]]\n               DataGraph\n\nRun the pySHACL validator from the command line.\n\npositional arguments:\n  DataGraph             The file containing the Target Data Graph.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s [SHACL], --shacl [SHACL]\n                        A file containing the SHACL Shapes Graph.\n  -e [ONT], --ont-graph [ONT]\n                        A file path or URL to a document containing extra\n                        ontological information to mix into the data graph.\n  -i {none,rdfs,owlrl,both}, --inference {none,rdfs,owlrl,both}\n                        Choose a type of inferencing to run against the Data\n                        Graph before validating.\n  -m, --metashacl       Validate the SHACL Shapes graph against the shacl-\n                        shacl Shapes Graph before validating the Data Graph.\n  --imports             Allow import of sub-graphs defined in statements with\n                        owl:imports.\n  -a, --advanced        Enable support for SHACL Advanced Features.\n  -j, --js              Enable support for SHACL-JS Features.\n  -it, --iterate-rules  Interate SHACL Rules until steady state is found (only available in Advanced Mode)\n  --abort               Abort on first error.\n  -d, --debug           Output additional runtime messages, including violations that didn\\'t\n                        lead to non-conformance.\n  -f {human,turtle,xml,json-ld,nt,n3}, --format {human,turtle,xml,json-ld,nt,n3}\n                        Choose an output format. Default is \"human\".\n  -df {auto,turtle,xml,json-ld,nt,n3}, --data-file-format {auto,turtle,xml,json-ld,nt,n3}\n                        Explicitly state the RDF File format of the input\n                        DataGraph file. Default=\"auto\".\n  -sf {auto,turtle,xml,json-ld,nt,n3}, --shacl-file-format {auto,turtle,xml,json-ld,nt,n3}\n                        Explicitly state the RDF File format of the input\n                        SHACL file. Default=\"auto\".\n  -ef {auto,turtle,xml,json-ld,nt,n3}, --ont-file-format {auto,turtle,xml,json-ld,nt,n3}\n                        Explicitly state the RDF File format of the extra\n                        ontology file. Default=\"auto\".\n  -V, --version         Print the PySHACL version and exit.\n  -o [OUTPUT], --output [OUTPUT]\n                        Send output to a file (defaults to stdout).\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "For basic use of this module, you can just call the `validate` function of the `pyshacl` module like this:\n\n```python\nfrom pyshacl import validate\nr = validate(data_graph,\n      shacl_graph=sg,\n      ont_graph=og,\n      inference='rdfs',\n      abort_on_first=False,\n      allow_warnings=False,\n      meta_shacl=False,\n      advanced=False,\n      js=False,\n      debug=False)\nconforms, results_graph, results_text = r\n```\n\nWhere:\n* `data_graph` is an rdflib `Graph` object or file path of the graph to be validated\n* `shacl_graph` is an rdflib `Graph` object or file path or Web URL of the graph containing the SHACL shapes to validate with, or None if the SHACL shapes are included in the data_graph.\n* `ont_graph` is an rdflib `Graph` object or file path or Web URL a graph containing extra ontological information, or None if not required.\n* `inference` is a Python string value to indicate whether or not to perform OWL inferencing expansion of the `data_graph` before validation.\nOptions are 'rdfs', 'owlrl', 'both', or 'none'. The default is 'none'.\n* `abort_on_first` (optional) `bool` value to indicate whether or not the program should abort after encountering the first validation failure or to continue. Default is to continue.\n* `allow_warnings` (optional) `bool` value, Shapes marked with severity of Warning or Info will not cause result to be invalid. \n* `meta_shacl` (optional) `bool` value to indicate whether or not the program should enable the Meta-SHACL feature. Default is False.\n* `advanced`: (optional) `bool` value to enable SHACL Advanced Features\n* `js`: (optional) `bool` value to enable SHACL-JS Features (if `pyshacl[js]` is installed)\n* `debug` (optional) `bool` value to indicate whether or not the program should emit debugging output text, including violations that didn't lead to non-conformance overall. So when debug is True don't judge conformance by absense of violation messages. Default is False.\n\nSome other optional keyword variables available on the `validate` function:\n* `data_graph_format`: Override the format detection for the given data graph source file.\n* `shacl_graph_format`: Override the format detection for the given shacl graph source file.\n* `ont_graph_format`: Override the format detection for the given extra ontology graph source file.\n* `iterate_rules`: Interate SHACL Rules until steady state is found (only works with advanced mode).\n* `do_owl_imports`: Enable the feature to allow the import of subgraphs using `owl:imports` for the shapes graph and the ontology graph. Note, you explicitly cannot use this on the target data graph.\n* `serialize_report_graph`: Convert the report results_graph into a serialised representation (for example, 'turtle')\n* `check_dash_result`: Check the validation result against the given expected DASH test suite result.\n* `check_sht_result`: Check the validation result against the given expected SHT test suite result.\n\nReturn value:\n* a three-component `tuple` containing:\n  * `conforms`: a `bool`, indicating whether or not the `data_graph` conforms to the `shacl_graph`\n  * `results_graph`: a `Graph` object built according to the SHACL specification's [Validation Report](https://www.w3.org/TR/shacl/#validation-report) structure\n  * `results_text`: python string representing a verbose textual representation of the [Validation Report](https://www.w3.org/TR/shacl/#validation-report)\n\n\n",
      "technique": "Header extraction"
    }
  ]
}