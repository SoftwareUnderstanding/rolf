{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The majority of code in this repo was developed by Samer Abdallah, as\npart of the [sparkle\npackage](http://www.swi-prolog.org/pack/list?p=sparkle). Some of this\ncode came from Yves Raimond's swic package.\n\nExtensions were implemented by Chris Mungall. In particular\n\n - goal rewriting\n - DCG extensions: aggregates, filter operators\n - predicate definitions for vocabularies used by various triplestores (faldo, ebi, wikidata, dbpedia, go, monarch)\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9999699949458608
      ],
      "excerpt": "SELECT ?g ?h WHERE {?g &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#:type&gt; &lt;http://purl.obolibrary.org/obo/SO_0001217&gt; . ?g &lt;http://biohackathon.org/resource/faldo#:location&gt; ?l . ?l &lt;http://biohackathon.org/resource/faldo#:begin&gt; ?v0 . ?v0 &lt;http://biohackathon.org/resource/faldo#:position&gt; ?b . ?v0 &lt;http://biohackathon.org/resource/faldo#:reference&gt; &lt;http://rdf.ebi.ac.uk/resource/ensembl/90/mus_musculus/GRCm38/11&gt; . ?l &lt;http://biohackathon.org/resource/faldo#:end&gt; ?v1 . ?v1 &lt;http://biohackathon.org/resource/faldo#:position&gt; ?e . ?v1 &lt;http://biohackathon.org/resource/faldo#:reference&gt; &lt;http://rdf.ebi.ac.uk/resource/ensembl/90/mus_musculus/GRCm38/11&gt; . FILTER (?b &gt;= 101100523) . FILTER (?e &lt;= 101190725) . ?g &lt;http://semanticscience.org/resource/SIO_000558&gt; ?h . ?h &lt;http://purl.obolibrary.org/obo/RO_0002162&gt; &lt;http://identifiers.org/taxonomy/9606&gt;} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "peng = pengines({ \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/cmungall/sparqlprog",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-01-27T01:47:27Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-17T04:10:41Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8350763771404651
      ],
      "excerpt": "sparqlprog is a programming language and environment that can be used \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9841274139110656
      ],
      "excerpt": "case, the query is a conjunction of conditions involving different \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.889075556657056,
        0.994061943236947
      ],
      "excerpt": "G is a protein coding gene \nG is located on mouse chromosome 11, with an interval bounded by B (begin) and E (end) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9972130414773881,
        0.9216398895287471,
        0.9046560412432646,
        0.8943450501974635,
        0.9277264075759212
      ],
      "excerpt": "G is homologus to H \nH is a human gene (indicated by taxon ID 9606) \nThe results are bound to a tuples h(G,H) (i.e. two column table) \nThis logic query compiles down to a SPARQL query for fetching G and \nH. The query is then executed on the EBI RDF \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.823985078559718
      ],
      "excerpt": "How does this work? The query compilation makes use of pre-defined \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8824924529700311,
        0.9029814849015393
      ],
      "excerpt": "The :- connects a rule head to a rule body. In this case the body is \na conjuncation of goals. Each of these may be defined in their own \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9841209525622315,
        0.9364234683075786
      ],
      "excerpt": "predicate rdf(S,P,O) which maps to a single triple. In this case the vocabulary used for genomic locations is faldo. \nThis approach allows for composability of queries. Rather that \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9534033482114818
      ],
      "excerpt": "In addition to providing a composable language that compiles to \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8824728623992446
      ],
      "excerpt": "for mixing code and queries in a relational/logic programming \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.930554606127511
      ],
      "excerpt": "program with bindings to a SPARQL query by using the -C option. The \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9166461278230122
      ],
      "excerpt": "note: indentation and URI shortening are on the cards for future releases. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8144895321353666
      ],
      "excerpt": "Pengines is a framework for running logic program environments as a \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9465594160046664,
        0.9568067713336496
      ],
      "excerpt": "See the docs on the pengines framework. \nThere is an example of how to contact this service in javascript in \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9300267653445838
      ],
      "excerpt": "Pengines allows the client to send logic programs to the server, and \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9223888923550764,
        0.9900274982815364,
        0.8092597672011865
      ],
      "excerpt": "This trivially defines a unary predicate q/1. The argument is bound \nto any continent. The ?? is a special infix binary predicate, the \nleft side is the service name and the right side is the query to be \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9353702586881508
      ],
      "excerpt": "The ask portion of the javascript will simply pass the query to the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9568067713336496
      ],
      "excerpt": "There is an example of how to contact this service in javascript in \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9158769457769284,
        0.948313748564399
      ],
      "excerpt": "SPARQL provides a declarative way of querying a triplestore. One of \nits limitations is the lack of ability to compose queries and reuse \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9867366566726367
      ],
      "excerpt": "of SPARQL and a subset of Prolog for relational rule-oriented \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8861165331631706
      ],
      "excerpt": "Only a subset of prolog can be expanded in this way. Conjunction, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8410620616407379
      ],
      "excerpt": "rdf/3, rdf/4, and some predicates from the rdfs library are \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8392652582661825,
        0.9242487920590851,
        0.8397301007693981
      ],
      "excerpt": "It is also possible to use create_sparql_construct/3 and \ncreate_sparl_construct/4 to generate SPARQL queries for a \nlimited subset of pure prolog that can be executed outside \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "logic programming with SPARQL",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/cmungall/sparqlprog/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Mon, 20 Dec 2021 12:55:24 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/cmungall/sparqlprog/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "cmungall/sparqlprog",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/release.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/ubergraph-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/allie-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/biotea-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/kg-covid-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/oma-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/local-sparql-queries.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/pubmedgraph-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/monarch-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/disgenet-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/ontobee-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/ncats-red-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/wikidata-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/mbgd-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/local-queries.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/wikipathways-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/ebi-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/dbpedia-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/nextprot-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/keggoc-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/gocam-examples.sh",
      "https://raw.githubusercontent.com/cmungall/sparqlprog/master/examples/uniprot-examples.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This package provides a more natural (from a Prolog point of view) interface\nto SPARQL endpoints. There are two layers. The first, lower layer, defines a\nDCG for generating SPARQL queries from a structured term. The second provides\na translation from representation that looks more or less like a Prolog goal\nbuilt from rdf/3 goals (with conjunction, disjunction etc) to a term in the\nterm language understood by the SPARQL DCG.\n\nIn addition, the library provides a mechanism to register known SPARQL endpoints\nso that they can be referred to by a short name, or to enable a query to be\nrun against all registered endpoints.\n\nThe library is based on the idea implemented in Yves Raimond's swic package,\nbut the code has been completely re-implemented.\n\nYou just need SWI Prolog with its Semantic Web libraries.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8677539141777653
      ],
      "excerpt": "reusable modules can be defined. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8203146517260298
      ],
      "excerpt": "SPARQL, this package provides a complete turing-complete environment \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9890187264714815
      ],
      "excerpt": "You can use pl2sparql (see above for installation) to compile a \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9226220608350787
      ],
      "excerpt": "bin/sprog-client.js. You will need to do a npm \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8515504888246677,
        0.999492336388809
      ],
      "excerpt": "sprog-client.js. You will need to do: \nnpm install pengines \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8854947140939116
      ],
      "excerpt": "You can use sparqlprog with any local or remote triplestore that \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.886495492034229
      ],
      "excerpt": "Run make bg-run \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9431960478208375
      ],
      "excerpt": "the prolog environment - effectively a limited prolog to SPARQL \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8329710304671559
      ],
      "excerpt": "Example of use (command line): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8535633316746989,
        0.8624232257783705,
        0.8982739723509798,
        0.8534294440125891
      ],
      "excerpt": "function handleSuccess(result) { \n    console.log('#: Results: '+ result.data.length); \n    for (var i = 0; i < result.data.length; i++) { \n        console.log(result.data[i]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8535633316746989,
        0.8137892324777533
      ],
      "excerpt": "function handleError(result) { \n    console.error(result) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8021772751119439
      ],
      "excerpt": "docker run -p 9083:9083 cmungall/sparqlprog \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8177193152529326
      ],
      "excerpt": "This will run blazegraph within a docker container \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/cmungall/sparqlprog/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Prolog",
      "Makefile",
      "Shell",
      "JavaScript",
      "Python",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "sparqlprog - programming with SPARQL",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "sparqlprog",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "cmungall",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/cmungall/sparqlprog/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2019-09-05T14:23:13Z",
        "datePublished": "2019-09-05T14:23:54Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.2.9",
        "name": "0.2.9",
        "tag_name": "v0.2.9",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.2.9",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/19781634",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.2.9"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2019-09-05T07:41:55Z",
        "datePublished": "2019-09-05T07:46:24Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.2.8",
        "name": "0.2.8",
        "tag_name": "v0.2.8",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.2.8",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/19770321",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.2.8"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "biohackathon addition, with contributions from @hchiba1 ",
        "dateCreated": "2019-09-04T06:01:09Z",
        "datePublished": "2019-09-04T06:01:56Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.2.7",
        "name": "0.2.7",
        "tag_name": "v0.2.7",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.2.7",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/19737205",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.2.7"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "biohackathon2019",
        "dateCreated": "2019-09-02T05:54:01Z",
        "datePublished": "2019-09-02T05:54:56Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.2.6",
        "name": "0.2.6",
        "tag_name": "v0.2.6",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.2.6",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/19685539",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.2.6"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2019-08-13T01:11:23Z",
        "datePublished": "2019-08-13T01:12:14Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.2.5",
        "name": "0.2.5",
        "tag_name": "v0.2.5",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.2.5",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/19243797",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.2.5"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2019-08-12T22:26:14Z",
        "datePublished": "2019-08-12T22:26:34Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.2.4",
        "name": "0.2.4",
        "tag_name": "v0.2.4",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.2.4",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/19241892",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.2.4"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2019-08-12T19:40:41Z",
        "datePublished": "2019-08-12T19:40:56Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.2.3",
        "name": "0.2.3",
        "tag_name": "v0.2.3",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.2.3",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/19238573",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.2.3"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2019-08-11T22:45:14Z",
        "datePublished": "2019-08-11T22:46:02Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.2.2",
        "name": "0.2.2 release",
        "tag_name": "v0.2.2",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.2.2",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/19218115",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.2.2"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2019-08-11T22:24:25Z",
        "datePublished": "2019-08-11T22:25:02Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.2.1",
        "name": "0.2.1 release",
        "tag_name": "v0.2.1",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.2.1",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/19218047",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.2.1"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": " * Improved documentation\r\n * travis test passing",
        "dateCreated": "2019-08-11T21:00:56Z",
        "datePublished": "2019-08-11T21:02:52Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.2.0",
        "name": "0.2.0 release",
        "tag_name": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.2.0",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/19217685",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.2.0"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2019-07-28T19:37:02Z",
        "datePublished": "2019-07-28T19:38:35Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.1.5",
        "name": "0.1.5 release",
        "tag_name": "v0.1.5",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.1.5",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/18913977",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.1.5"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": " * Support for translating `member/2` to SPARQL `VALUES`\r\n * Additional tests\r\n",
        "dateCreated": "2019-04-30T17:05:28Z",
        "datePublished": "2019-04-30T17:07:48Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.1.3",
        "name": "0.1.3",
        "tag_name": "v0.1.3",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.1.3",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/17072578",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.1.3"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2018-11-27T00:40:06Z",
        "datePublished": "2018-11-27T00:41:03Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.1.2",
        "name": "",
        "tag_name": "v0.1.2",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.1.2",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/14196889",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.1.2"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2018-09-04T06:12:54Z",
        "datePublished": "2018-09-04T06:13:31Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.1.1",
        "name": "0.1.1 release",
        "tag_name": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.1.1",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/12712218",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.1.1"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2018-08-09T21:38:09Z",
        "datePublished": "2018-08-09T21:39:14Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.1.0",
        "name": "0.1.0 release",
        "tag_name": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.1.0",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/12338916",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.1.0"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2018-07-17T23:35:48Z",
        "datePublished": "2018-07-17T23:37:12Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.0.9",
        "name": "0.0.9",
        "tag_name": "v0.0.9",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.0.9",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/11976794",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.0.9"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2018-07-17T21:57:51Z",
        "datePublished": "2018-07-17T22:02:05Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.0.8",
        "name": "0.0.8",
        "tag_name": "v0.0.8",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.0.8",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/11975762",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.0.8"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2018-07-10T01:11:13Z",
        "datePublished": "2018-07-10T01:12:22Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.0.7",
        "name": "0.0.7 release",
        "tag_name": "v0.0.7",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.0.7",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/11848144",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.0.7"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2018-06-09T00:11:57Z",
        "datePublished": "2018-06-09T00:12:20Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.0.6",
        "name": "0.0.6 release",
        "tag_name": "v0.0.6",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.0.6",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/11401188",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.0.6"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "No semantic changes since 0.0.4\r\n\r\nv0.0.4 had an incorrect version id in the pack.pl",
        "dateCreated": "2018-06-09T00:09:07Z",
        "datePublished": "2018-06-09T00:10:12Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.0.5",
        "name": "0.0.5 release",
        "tag_name": "v0.0.5",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.0.5",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/11401168",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.0.5"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2018-05-07T00:43:13Z",
        "datePublished": "2018-05-19T03:19:08Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.0.4",
        "name": "0.0.4 release",
        "tag_name": "v0.0.4",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.0.4",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/11078239",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.0.4"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2018-03-10T01:53:52Z",
        "datePublished": "2018-03-10T01:56:12Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.0.3",
        "name": "0.0.3 release",
        "tag_name": "v0.0.3",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.0.3",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/10026182",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.0.3"
      },
      {
        "authorType": "User",
        "author_name": "cmungall",
        "body": "",
        "dateCreated": "2018-02-28T02:08:19Z",
        "datePublished": "2018-02-28T02:24:37Z",
        "html_url": "https://github.com/cmungall/sparqlprog/releases/tag/v0.0.2",
        "name": "0.0.2 release",
        "tag_name": "v0.0.2",
        "tarball_url": "https://api.github.com/repos/cmungall/sparqlprog/tarball/v0.0.2",
        "url": "https://api.github.com/repos/cmungall/sparqlprog/releases/9866373",
        "zipball_url": "https://api.github.com/repos/cmungall/sparqlprog/zipball/v0.0.2"
      }
    ],
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "See the [examples](./examples/) directory for all command line examples\n\nFirst [install](INSTALL.md), making sure the [bin](bin) directory is\nin your path. This will give you access to the the pl2sparql script.\n\nFor full options, run:\n\n```\npl2sparql --help\n```\n\nNote you should also have a number of convenience scripts in your\npath. For example the `pq-wd` script is simply a shortcut for\n\n```\npl2sparql -s wikidata -u sparqlprog/ontologies/wikidata  ARGS\n```\n\nThis will give you access to a number of convenience predicates such\nas positive_therapeutic_predictor/2 (for drug queries). The `-u`\noption uses the wikidata module, and the `-s` option sets the service\nto the one with handle `dbpedia` (the mapping from a handle to the\nfull service URL is defined in the wikidata module).\n\nThe best way to learn is to look at the [examples/](examples),\ntogether with the corresponding set of rules in\n[prolog/sparqlprog/ontologies](prolog/sparqlprog/ontologies).\n\nFor example [examples/monarch-examples.sh](examples/monarch-examples.sh) has:\n\n```\npq-mi  'label(D,DN),literal_exact_match(DN,\"peroxisome biogenesis disorder\"),\\\n   rdfs_subclass_of(D,C),owl_equivalent_class(C,E),has_phenotype(E,Z)'\\\n   'x(C,CN,E,Z)'\n```\n\nThis finds a disease with a given name, finds equivalent classes of\ntransitive reflexive subclasses, and then finds phenotypes for each\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 26,
      "date": "Mon, 20 Dec 2021 12:55:24 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "semantic-web",
      "sparql",
      "datalog",
      "rdf",
      "swi-prolog",
      "prolog",
      "bioinformatics",
      "ontology"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "See the [sparqlprog module docs](https://www.swi-prolog.org/pack/file_details/sparqlprog/prolog/sparqlprog.pl)\n\nSee also the [specification](SPECIFICATION.md)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "See the [sparqlprog-python](https://github.com/cmungall/sparqlprog-python) package\n\nThis provides a Python interface to a sparqlprog service\n\nYou can also see demonstration notebooks:\n\n * [Basic SPARQLProg](https://nbviewer.jupyter.org/github/cmungall/sparqlprog-python/blob/master/Notebook_01_Basics.ipynb)\n * [sending programs over the wire](https://nbviewer.jupyter.org/github/cmungall/sparqlprog-python/blob/master/Notebook_02_Programs.ipynb)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "There are a variety of ways to use this framework:\n\n * Executing queries on remote services via command line\n * Compiling logic queries to SPARQL queries, for use in another framework\n * Programmatically within a logic program (interleaving remote and local operations)\n * Programmatically from a language like python/javascript, using a __sparqlprog service__\n\nConsult the appropriate section below:\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "For this example, consider writing a music band recommender, based on\nsimilarity of genres. dbpedia has triples linking bands to genres, so\nwe will use that.\n\nWe will write a program\n[dbpedia_rules.pl](examples/dbpedia/dbpedia_rules.pl) that contains\ndefinitions of predicates we will use.\n\nFirst we define a binary predicate that counts the number of bands per genre:\n\n```\ngenre_num_bands(G,Count) :-\n        aggregate_group(count(distinct(B)),[G],(rdf(B,dbont:genre,G),band(B)),Count).\n```\n\nyou can try this with:\n\n`pq-dbpedia -c examples/dbpedia/dbpedia_rules.pl \"genre_num_bands(G,Count)\"`\n\nthis will give results like:\n\n```\nhttp://dbpedia.org/resource/Independent_music,184\nhttp://dbpedia.org/resource/Funky_Club_Music,1\nhttp://dbpedia.org/resource/Ghettotech,2\nhttp://dbpedia.org/resource/Indian_folk_music,1\nhttp://dbpedia.org/resource/Bakersfield_Sound,1\nhttp://dbpedia.org/resource/Punk_Rawk,1\nhttp://dbpedia.org/resource/Go-go,6\nhttp://dbpedia.org/resource/Jazz_pop,3\nhttp://dbpedia.org/resource/Dubstep,74\nhttp://dbpedia.org/resource/Alt.folk,1\nhttp://dbpedia.org/resource/AfroHouse,1\nhttp://dbpedia.org/resource/Electro-disco,1\nhttp://dbpedia.org/resource/Math_Rock,15\n```\n\nwe are doing this because we want to weight band similarity according\nto how rare a genre is. If two bands share the genre of 'independent\nmusic' it is not remarkable, but if two bands share a rarer genre like\n'Ghettotech' then we will weight that higher.\n\nwe can explicitly bind this to dbpedia using `??/2`:\n\n```\nget_genre_num_bands(G,Count) :-\n        ??(dbpedia,genre_num_bands(G,Count)).\n```\n\nwe can define the Information Content (IC) of a genre `G` as `-log2(Pr(G))`:\n\n```\ngenre_ic(G,IC) :-\n        get_genre_num_bands(G,Count),\n        get_num_bands(Total),\n        seval(-log(Count/Total)/log(2), IC).\n```\n\nThis makes use of:\n\n```\n:- table get_num_bands/1.\nget_num_bands(Count) :-\n        ??(dbpedia,num_bands(Count)).\nnum_bands(Count) :-\n        aggregate(count(distinct(B)),band(B),Count).\n```\n\nNote we are tabling (memoizing) the call to fetch the total number of\nbands. This means it will only be called once per sparqlprog session.\n\nFinally we can define a 3-ary predicate that compares any two bands\nand bindings the 3rd arg to a similarity score that is the sum of the\nICs of all genres held in common. (for simplicity, we do not penalize\nunmatched genres, or try to use sub/super genre categories yet):\n\n```\npair_genre_ic(A,B,SumIC) :-\n        get_all_genres(A,SA),\n        get_all_genres(B,SB),\n        ord_intersection(SA,SB,I),\n        aggregate(sum(IC),G^(member(G,I),genre_ic(G,IC)),SumIC).\n```\n\nThis is a normal prolog goal and can be executed in a normal prolog context, or from the command line:\n\n`pq-dbpedia -c examples/dbpedia/dbpedia_rules.pl -e  \"pair_genre_ic(dbr:'Metallica',dbr:'Megadeth',IC)\"`\n\nThe `-e` option tells the script to execute the query directly rather\nthan try and compile everything to a single SPARQL query (this may be\npossible, but could be highly inefficient). It is only when the prolog\nengine executes the `??` goals that a remote SPARQL will be executed.\n\nIf we want to adapt this program to search rather than compare two\ngiven bands, we can modify it slightly so that it does not waste\ncycles querying on bands that have no genres in common:\n\n```\npair_genre_ic(A,B,SumIC) :-\n        get_all_genres(A,SA),\n        ??(dbpedia,has_shared_genre(A,B,_)),\n        get_all_genres(B,SB),\n        ord_intersection(SA,SB,I),\n        aggregate(sum(IC),G^(member(G,I),genre_ic(G,IC)),SumIC).\n```\n\nExample of running this:\n\n`pq-dbpedia -c examples/dbpedia/dbpedia_rules.pl -e  \"pair_genre_ic(dbr:'Voivod_(band)',B,IC),IC>=10\"`\n\nNote this is slow, as it will iterate across each band performing\nqueries to gather stats. There are various approaches to optimizing\nthis, but the core idea here is that the logic can be shuffled back\nand forth between the portion that is compiled to SPARQL and executed\nremotely, and the portion that is executed locally by a logic engine.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "The `(??)/2`  and `(??)/1` operators have a high precedence so that conjuction and disjunctive\nqueries can be written to the right of it without parentheses:\n\n```\n?- rdf_register_prefix(foaf,'http://xmlns.com/foaf/0.1/')\n?- rdf_register_prefix(dbont,'http://dbpedia.org/ontology/')\n?- sparql_endpoint( dbp, 'http://dbpedia.org/sparql/').\n?- debug(sparkle).  % to show queries\n\n?-\tdbp ?? rdf(Class,rdf:type,owl:'Class'), rdf(Instance,rdf:type,Class).\n?- dbp ?? rdf(Person,rdf:type,foaf:'Person'), \n          rdf(Person,foaf:Name,Name),\n          filter(regex('Colt.*',Name)).\n?- dbp ?? rdf(A,rdf:type,dbont:'Photographer'); rdf(A, rdf:type, dbont:'MusicalArtist').\n```\n\n\n",
      "technique": "Header extraction"
    }
  ]
}