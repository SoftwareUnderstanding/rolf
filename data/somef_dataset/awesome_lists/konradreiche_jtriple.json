{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/konradreiche/jtriple",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2012-07-23T18:58:43Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-10-13T17:51:26Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9814265949278113,
        0.8697122491624719,
        0.8237758083018774,
        0.9817009268444566
      ],
      "excerpt": "JTriple is a Java tool which creates a RDF data model out of a Java object model by making use of reflection, a small set of annotations and Jena's flexible RDF/OWL API. \nThe most popular tool for persisting Java objects to RDF is [JenaBean]. JTriple was developed, respectively JenaBean was not modified due to the following reasons: \nJenaBean aims for a persistence layer (object serialization). This fact is often expressed by missing confguration, for instance a field cannot be declared as transient. \nNot the whole functionality of JenaBean is required. Additional data is serialized, for instance the serialization of the package names. Package names are vital for deserialization but for the pure data translation (one-way) it only interferes. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8505360448667014
      ],
      "excerpt": "Some ideas for the future development: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A Java object model binding for RDF.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/konradreiche/jtriple/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 20 Dec 2021 14:10:18 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/konradreiche/jtriple/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "konradreiche/jtriple",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/konradreiche/jtriple/master/deploy.sh"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/konradreiche/jtriple/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Java",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'The MIT License (MIT)\\n\\nCopyright (c) 2012 Konrad Johannes Reiche\\n\\nPermission is hereby granted, free of charge, to any person obtaining a\\ncopy of this software and associated documentation files (the \"Software\"),\\nto deal in the Software without restriction, including without limitation\\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\\nand/or sell copies of the Software, and to permit persons to whom the\\nSoftware is furnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\\nDEALINGS IN THE SOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "JTriple",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "jtriple",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "konradreiche",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/konradreiche/jtriple/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 20 Dec 2021 14:10:18 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "JTriple can be deployed through Maven. Before, the following repository has to be added to your pom.xml\n\n```xml\n<repository>\n     <id>berlin.reiche.jtriple</id>\n     <url>https://github.com/platzhirsch/jtriple/raw/master/repository/releases</url>\n</repository>\n```\n\nThen it can be added with this dependency\n\n```xml\n<dependency>\n     <groupId>berlin.reiche.jtriple</groupId>\n     <artifactId>jtriple</artifactId>\n     <version>0.1-RELEASE</version>\n     <scope>compile</scope>\n</dependency>\n```\n\nNot using Maven? You can also get the [JAR] directly.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Considering the following example. A class Philosopher\n\n```java\npublic class Philosopher {\n\n\t@RdfIdentifier\n\tString name;\n\n\tString nationality;\n\tList<Branch> interests;\n}\n```\n\nwith an enum type Branch\n\n```java\npublic enum Branch {\n\n\tEPISTEMOLOGY(\"Epistemology\"),\n\tMATHEMATIC(\"Mathematic\"),\n\tMETAPHYSISC(\"Metaphysic\"),\n\tPHILOSOPHY_OF_MIND(\"Philosophy of Mind\");\n\t\n\tString name;\n\t\n\tBranch(String name) {\n\t\tthis.name = name;\n\t}\n}\n```\nThe only requirement is to annotate one field or method of a class with `@RdfIdentifier`. Binding objects to RDF is as easy as follows\n\n\n```java\n// create data\nPhilosopher locke = new Philosopher();\nlocke.setName(\"John Locke\");\nlocke.setNationality(\"English\");\n\nList<Branch> branches = new ArrayList<>();\nbranches.add(METAPHYSISC);\nbranches.add(EPISTEMOLOGY);\nbranches.add(PHILOSOPHY_OF_MIND);\nlocke.setInterests(branches);\n\n// bind object\nBinding binding = new Binding(DEFAULT_NAMESPACE);\nModel model = binding.getModel();\nmodel.setNsPrefix(\"philosophy\", NAMESPACE);\n\nbinding.bind(locke);\n\n// output RDF\nmodel.write(System.out, \"TURTLE\");\n```\n\nIt is sufficient to produce this RDF\n\n```\n@prefix philosophy:  <http://konrad-reiche.com/philosophy/> .\n\n<http://konrad-reiche.com/philosophy/philosopher/John_locke>\n      a       <http://dbpedia.org/page/Philosopher> ;\n      philosophy:interests\n              <http://konrad-reiche.com/philosophy/branch/Metaphysisc> ,\n              <http://konrad-reiche.com/philosophy/branch/Philosophy_of_mind> ,\n              <http://konrad-reiche.com/philosophy/branch/Epistemology> ;\n      philosophy:name \"John Locke\"^^<http://www.w3.org/2001/XMLSchema#:string> ;\n      philosophy:nationality\n              \"English\"^^<http://www.w3.org/2001/XMLSchema#:string> .\n\n<http://konrad-reiche.com/philosophy/branch/Epistemology>\n      a       philosophy:branch ;\n      philosophy:name \"Epistemology\"^^<http://www.w3.org/2001/XMLSchema#:string> .\n\n<http://konrad-reiche.com/philosophy/branch/Metaphysisc>\n      a       philosophy:branch ;\n      philosophy:name \"Metaphysic\"^^<http://www.w3.org/2001/XMLSchema#:string> .\n\n<http://konrad-reiche.com/philosophy/branch/Philosophy_of_mind>\n      a       philosophy:branch ;\n      philosophy:name \"Philosophy of Mind\"^^<http://www.w3.org/2001/XMLSchema#:string> .\n```\n\nNow, to get more sophisticated results, annotations help to provide neccessary information\n\n```java\n@RdfType(\"http://dbpedia.org/page/Philosopher\")\npublic class Philosopher {\n\n\t@Label\n\t@RdfIdentifier\n\tString name;\n\n\t@RdfProperty(\"http://www.foafrealm.org/xfoaf/0.1/nationality\")\n\tString nationality;\n\n\tList<Branch> interests;\n}\n```\n\n```java\npublic enum Branch {\n\n\t@SameAs({ \"http://dbpedia.org/resource/Epistemology\" })\n\tEPISTEMOLOGY(\"Epistemology\"),\n\t\n\t@SameAs({ \"http://dbpedia.org/resource/Mathematic\" })\n\tMATHEMATIC(\"Mathematic\"),\n\n\t@SameAs({ \"http://dbpedia.org/resource/Metaphysic\" })\n\tMETAPHYSISC(\"Metaphysic\"),\n\n\t@SameAs({ \"http://dbpedia.org/resource/Philosophy_of_mind\" })\n\tPHILOSOPHY_OF_MIND(\"Philosophy of Mind\");\n\t\n\t@Label\n\tString name;\n\t\n\tBranch(String name) {\n\t\tthis.name = name;\n\t}\n}\n```\n\nLeading to this RDF:\n\n```\n@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#:> .\n@prefix xfoaf:   <http://www.foafrealm.org/xfoaf/0.1/> .\n@prefix philosophy:  <http://konrad-reiche.com/philosophy/> .\n@prefix dbpedia:  <http://dbpedia.org/resource/> .\n\n<http://konrad-reiche.com/philosophy/philosopher/John_locke>\n      a       <http://dbpedia.org/page/Philosopher> ;\n      rdfs:label \"John Locke\"^^<http://www.w3.org/2001/XMLSchema#:string> ;\n      philosophy:interests\n              <http://konrad-reiche.com/philosophy/branch/Metaphysisc> ,\n              <http://konrad-reiche.com/philosophy/branch/Philosophy_of_mind> ,\n              <http://konrad-reiche.com/philosophy/branch/Epistemology> ;\n      xfoaf:nationality \"English\"^^<http://www.w3.org/2001/XMLSchema#:string> .\n\n<http://konrad-reiche.com/philosophy/branch/Metaphysisc>\n      a       philosophy:branch ;\n      rdfs:label \"Metaphysic\"^^<http://www.w3.org/2001/XMLSchema#:string> ;\n      <http://www.w3.org/2002/07/owl#:sameAs>\n              dbpedia:Metaphysic .\n\n<http://konrad-reiche.com/philosophy/branch/Philosophy_of_mind>\n      a       philosophy:branch ;\n      rdfs:label \"Philosophy of Mind\"^^<http://www.w3.org/2001/XMLSchema#:string> ;\n      <http://www.w3.org/2002/07/owl#:sameAs>\n              dbpedia:Philosophy_of_mind .\n\n<http://konrad-reiche.com/philosophy/branch/Epistemology>\n      a       philosophy:branch ;\n      rdfs:label \"Epistemology\"^^<http://www.w3.org/2001/XMLSchema#:string> ;\n      <http://www.w3.org/2002/07/owl#:sameAs>\n              dbpedia:Epistemology .\n\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}