{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/wwaites/linkedspatialindex",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2012-04-28T15:03:04Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-02-05T02:17:50Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9208458933437238
      ],
      "excerpt": "Spatial Indexing for Linked Data Systems. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8052047611242237
      ],
      "excerpt": "As in:: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490037945672047
      ],
      "excerpt": "The search endpoint, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8700645941875326,
        0.827136479915977
      ],
      "excerpt": "predicate  one of \"intersects\", \"contains\", \"nearest\"  \nwkt        well-known-text for the argument to the predicate \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8930639509773739
      ],
      "excerpt": "limit      number of expected results for the query \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9416707033903778
      ],
      "excerpt": "           JSON encoded list of matching entities is returned \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.856043453127983,
        0.9494327181669058,
        0.8112912205665681
      ],
      "excerpt": "As noted above, the result of a query can be either a list of URIs for \nentities that have a spatial component that matches, or an RDF graph \n(subject to the usual content autonegotiation) containing their \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490037945672047
      ],
      "excerpt": "The reset endpoint, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9183553381818722
      ],
      "excerpt": "does what it says on the tin, and purges the endpoint and causes a \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9732092148868736,
        0.9746864476778612,
        0.8031062831574842
      ],
      "excerpt": "and they are only swapped when the rebuild is complete. \nSpatial indexing is all about the sweep and prune pattern. \nThings to be indexed, which may be of a complicated shape, are put \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8985492372115884,
        0.9420128989651573
      ],
      "excerpt": "to query parameters that contain complicated shapes. By complicated, I \nmean anything from the perimiter of a city to polygons with holes, for \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9473636659445923
      ],
      "excerpt": "So these complicated shapes are reduced to the smallest rectangle that \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8295481093922276
      ],
      "excerpt": "narrowed down by doing the more computationally intensive calculation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8977107796315941,
        0.9297270148900598
      ],
      "excerpt": "A second level of pruning is then supported by this \nimplementation. Because the result of the spatial query are \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9485470523141086,
        0.9667978852047197
      ],
      "excerpt": "An index is provisioned, it needs to be fed with data from somewhere. \nIt looks at the incoming data in searching for things of the following \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9056537592890719
      ],
      "excerpt": "?foo dct:spatial [ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9056537592890719
      ],
      "excerpt": "?foo dct:spatial [ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8991177771352261,
        0.92040038443404,
        0.8217920275233367,
        0.9501248241967245
      ],
      "excerpt": "And in each of these cases, the resource that will be returned or \ndescribed or otherwise stored in the spatial index is ?foo. \nThe spatial index is done with libspatialindex via the python R-tree \nbindings. What is stored is in fact a JSON object of the form:: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9723287929365698,
        0.8942800864340313,
        0.8652138438860477,
        0.9758237440488065
      ],
      "excerpt": "The text field is the serialised description which is either \nreturned or used for further pruning with SPARQL. \nThis JSON blob is stored in the index with the identifier being the \nFNV1a hash of the URI - in order to support deletion or replacement \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.939040376974758
      ],
      "excerpt": "The default is for the command to listen on localhost:4000. This can \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8781984906006164,
        0.9788922317272556
      ],
      "excerpt": "Sometimes on the receipt of a reset command, the index is not \ncorrectly purged. In this case, a workaround is to (1) stop the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Spatial Indexing for Linked Data",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/wwaites/linkedspatialindex/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Mon, 20 Dec 2021 19:05:59 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/wwaites/linkedspatialindex/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "wwaites/linkedspatialindex",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Prerequisites:\n\n  * GDAL with python bindings and GEOS support enabled\n  * libspatialindex\n  * kyoto cabinet and python bindings\n  * pip install -e git+git@github.com:RDFLib/rdflib-rdfjson#egg=rdflib_rdfjson\n\nTypically these will be installed using python's\nvirtualenv(1). Standard practice is to make sure the service runs as a\ndedicated user. A good choice is to make one called `geo`. Typically\nthe virtualenv will be initialised with a command like::\n\n    virtualenv ~geo\n\nAnd then this line will be added to the user's shell startup files,\nalong with any relevant environment variables::\n\n    . ~/bin/activate\n\nThe effect of this is that when the geo user runs python or any\nrelated commands, the version in `~geo/bin` will be used and the\nenvironment will be correct.\n\nThis package is installed in the usual python way, simply by doing::\n\n    python setup.py install\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8593248196130284
      ],
      "excerpt": "offset     skip the first n results of the query \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8635428266844001
      ],
      "excerpt": "?foo georss:pont ?point. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/wwaites/linkedspatialindex/issues{/number}",
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Linked Spatial Index",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "linkedspatialindex",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "wwaites",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/wwaites/linkedspatialindex/blob/master/README.rst",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Mon, 20 Dec 2021 19:05:59 GMT"
    },
    "technique": "GitHub API"
  }
}