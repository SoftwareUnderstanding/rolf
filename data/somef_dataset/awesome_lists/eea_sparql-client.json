{
  "citation": [
    {
      "confidence": [
        0.8283216015784888,
        0.8283216015784888
      ],
      "excerpt": "...      '?station a http://dbpedia.org/ontology/SpaceStation . ' \n...      '?station http://dbpedia.org/property/orbits ?orbits . ' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9167029495363309,
        0.8283216015784888,
        0.9167029495363309,
        0.8283216015784888
      ],
      "excerpt": "row: (<IRI http://dbpedia.org/resource/Mir>, <Literal \"86331\"^^http://www.w3.org/2001/XMLSchema#int>) \nhttp://dbpedia.org/resource/Mir - 86331 orbits \nrow: (<IRI http://dbpedia.org/resource/Salyut_7>, <Literal \"51917\"^^http://www.w3.org/2001/XMLSchema#int>) \nhttp://dbpedia.org/resource/Salyut_7 - 51917 orbits \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/eea/sparql-client",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2012-09-18T12:58:09Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-03T16:42:08Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8143971392806699
      ],
      "excerpt": "Return a Notation3 representation of this term. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8335642058494637
      ],
      "excerpt": "Literals. These can take a data type or a language code. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8727559034387097
      ],
      "excerpt": "Blank node. Similar to IRI but lacks a stable identifier. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9394449182630016
      ],
      "excerpt": "Synonim for fetchone(). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9178416828959318
      ],
      "excerpt": "Fetches the next set of rows of a query result, returning a list. An empty list is returned when no more rows are available. If the query was an ASK request, then an empty list is returned as there are no rows available. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9821451307735025,
        0.8343175506907904
      ],
      "excerpt": "Convert values in the given row from RDFTerm objects to plain Python values: IRI is converted to a unicode string containing the IRI value; BlankNode is converted to a unicode string with the BNode\u2019s identifier, and Literal is converted based on its XSD datatype. \nThe library knows about common XSD types (STRING becomes unicode, INTEGER and LONG become int, DOUBLE and FLOAT become float, DECIMAL becomes Decimal, BOOLEAN becomes bool). If the python-dateutil library is found, then DATE, TIME and DATETIME are converted to date, time and datetime respectively. For other conversions, an extra argument convert may be passed. It should be a callable accepting two arguments: the serialized value as a unicode object, and the XSD datatype. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8698876912880529
      ],
      "excerpt": "Convenient method to execute a query. Exactly equivalent to: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Python API to query a SPARQL endpoint",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/eea/sparql-client/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 18,
      "date": "Mon, 20 Dec 2021 17:51:38 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/eea/sparql-client/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "eea/sparql-client",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/eea/sparql-client/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The ``sparql-client`` library is available from PyPI and has no dependencies. Installation is as simple as:\n\n    pip install sparql-client\n\nWe recommend also instlaling ``python-dateutil``, to enable parsing of dates and times from query results\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9440373549483987
      ],
      "excerpt": "Then you make the query:: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9133368656218674
      ],
      "excerpt": "import sparql \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.857103499389303
      ],
      "excerpt": "...     print values[0], \"-\", values[1], \"orbits\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8102780086823556
      ],
      "excerpt": "result = sparql.query(endpoint, query) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8011226280027249
      ],
      "excerpt": "   print row \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8308248573151259
      ],
      "excerpt": "class sparql.IRI(value) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8308248573151259
      ],
      "excerpt": "class sparql.BlankNode(value) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.820792357962432
      ],
      "excerpt": "If the query is a SELECT statement, then the return value of hasresult() is None, as the XML result format doesn\u2019t tell you if there are any rows in the result until you have read the first one. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/eea/sparql-client/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "**************************\nSPARQL HTTP client library\n**************************\n.. image:: https://ci.eionet.europa.eu/buildStatus/icon?job=eea/sparql-client/develop\n  :target: https://ci.eionet.europa.eu/job/eea/job/sparql-client/job/develop/display/redirect\n  :alt: develop\n.. image:: https://ci.eionet.europa.eu/buildStatus/icon?job=eea/sparql-client/master\n  :target: https://ci.eionet.europa.eu/job/eea/job/sparql-client/job/master/display/redirect\n  :alt: master\n.. image:: https://img.shields.io/github/v/release/eea/sparql-client\n  :target: https://eggrepo.eea.europa.eu/d/sparql-client/\n  :alt: Release\n  \n`sparql-client` is a SPARQL query library that performs SELECT and ASK queries against a SPARQL endpoint via HTTP.\nIt will automatically convert literals to the coresponding Python types.\n\nAPI based on SPARQL_JavaScript_Library_  by Lee Feigenbaum and Elias Torres. Heavy influence from Juan Manuel Caicedo\u2019s SPARQL library.\n\n.. _SPARQL_JavaScript_Library: https://web.archive.org/web/20120518014957/http://www.thefigtrees.net/lee/sw/sparql.js\n\nAPI\n---\n\nFirst you open a connection to the endpoint::\n\n    s = sparql.Service(endpoint, \"utf-8\", \"GET\")\n\nThen you make the query::\n\n    result = s.query(statement)\n\nIf you have made a SELECT query, then you can read the result with fetchone() or fetchall()::\n\n    for row in result.fetchone():\n\nIf you have made an ASK query, then you can read the result (a boolean value) with hasresult():\n\n    works = result.hasresult()\n\n\nHow it works\n------------\n\n>>> import sparql\n\n>>> q = ('SELECT DISTINCT ?station, ?orbits WHERE { '\n...      '?station a <http://dbpedia.org/ontology/SpaceStation> . '\n...      '?station <http://dbpedia.org/property/orbits> ?orbits . '\n...      'FILTER(?orbits > 50000) } ORDER BY DESC(?orbits)')\n>>> result = sparql.query('http://dbpedia.org/sparql', q)\n\n>>> result.variables\n[u'station', u'orbits']\n\n>>> for row in result:\n...     print 'row:', row\n...     values = sparql.unpack_row(row)\n...     print values[0], \"-\", values[1], \"orbits\"\nrow: (<IRI <http://dbpedia.org/resource/Mir>>, <Literal \"86331\"^^<http://www.w3.org/2001/XMLSchema#int>>)\nhttp://dbpedia.org/resource/Mir - 86331 orbits\nrow: (<IRI <http://dbpedia.org/resource/Salyut_7>>, <Literal \"51917\"^^<http://www.w3.org/2001/XMLSchema#int>>)\nhttp://dbpedia.org/resource/Salyut_7 - 51917 orbits\n\nsparql module\n-------------\n\nThe ``sparql`` module can be invoked in several different ways. To quickly run a query use ``query()``. Results are encapsulated in a ``_ResultsParser`` instance:\n\n>>> result = sparql.query(endpoint, query)\n>>> for row in result:\n>>>    print row\n\nCommand-line use",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "sparql-client",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "eea",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/eea/sparql-client/blob/master/README.rst",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "eea-jenkins",
        "body": "Release 3.8",
        "dateCreated": "2020-08-03T14:26:40Z",
        "datePublished": "2020-08-03T14:29:27Z",
        "html_url": "https://github.com/eea/sparql-client/releases/tag/3.8",
        "name": "3.8",
        "tag_name": "3.8",
        "tarball_url": "https://api.github.com/repos/eea/sparql-client/tarball/3.8",
        "url": "https://api.github.com/repos/eea/sparql-client/releases/29231593",
        "zipball_url": "https://api.github.com/repos/eea/sparql-client/zipball/3.8"
      },
      {
        "authorType": "User",
        "author_name": "eea-jenkins",
        "body": "Release 3.7",
        "dateCreated": "2020-06-17T11:08:44Z",
        "datePublished": "2020-06-17T11:12:19Z",
        "html_url": "https://github.com/eea/sparql-client/releases/tag/3.7",
        "name": "3.7",
        "tag_name": "3.7",
        "tarball_url": "https://api.github.com/repos/eea/sparql-client/tarball/3.7",
        "url": "https://api.github.com/repos/eea/sparql-client/releases/27635200",
        "zipball_url": "https://api.github.com/repos/eea/sparql-client/zipball/3.7"
      },
      {
        "authorType": "User",
        "author_name": "eea-jenkins",
        "body": "Release 3.6",
        "dateCreated": "2020-03-03T21:44:11Z",
        "datePublished": "2020-03-03T21:55:37Z",
        "html_url": "https://github.com/eea/sparql-client/releases/tag/3.6",
        "name": "3.6",
        "tag_name": "3.6",
        "tarball_url": "https://api.github.com/repos/eea/sparql-client/tarball/3.6",
        "url": "https://api.github.com/repos/eea/sparql-client/releases/24188974",
        "zipball_url": "https://api.github.com/repos/eea/sparql-client/zipball/3.6"
      },
      {
        "authorType": "User",
        "author_name": "eea-jenkins",
        "body": "Release 3.5",
        "dateCreated": "2020-02-28T10:01:26Z",
        "datePublished": "2020-02-28T10:06:06Z",
        "html_url": "https://github.com/eea/sparql-client/releases/tag/3.5",
        "name": "3.5",
        "tag_name": "3.5",
        "tarball_url": "https://api.github.com/repos/eea/sparql-client/tarball/3.5",
        "url": "https://api.github.com/repos/eea/sparql-client/releases/24068436",
        "zipball_url": "https://api.github.com/repos/eea/sparql-client/zipball/3.5"
      },
      {
        "authorType": "User",
        "author_name": "eea-jenkins",
        "body": "Release 3.4",
        "dateCreated": "2019-01-29T14:37:56Z",
        "datePublished": "2019-01-29T21:06:59Z",
        "html_url": "https://github.com/eea/sparql-client/releases/tag/3.4",
        "name": "3.4",
        "tag_name": "3.4",
        "tarball_url": "https://api.github.com/repos/eea/sparql-client/tarball/3.4",
        "url": "https://api.github.com/repos/eea/sparql-client/releases/15250896",
        "zipball_url": "https://api.github.com/repos/eea/sparql-client/zipball/3.4"
      },
      {
        "authorType": "User",
        "author_name": "eea-jenkins",
        "body": "Release 3.3",
        "dateCreated": "2018-12-11T17:39:18Z",
        "datePublished": "2018-12-11T17:41:19Z",
        "html_url": "https://github.com/eea/sparql-client/releases/tag/3.3",
        "name": "3.3",
        "tag_name": "3.3",
        "tarball_url": "https://api.github.com/repos/eea/sparql-client/tarball/3.3",
        "url": "https://api.github.com/repos/eea/sparql-client/releases/14472079",
        "zipball_url": "https://api.github.com/repos/eea/sparql-client/zipball/3.3"
      },
      {
        "authorType": "User",
        "author_name": "eea-jenkins",
        "body": "Release 3.2",
        "dateCreated": "2018-06-22T15:50:43Z",
        "datePublished": "2018-06-22T16:09:44Z",
        "html_url": "https://github.com/eea/sparql-client/releases/tag/3.2",
        "name": "3.2",
        "tag_name": "3.2",
        "tarball_url": "https://api.github.com/repos/eea/sparql-client/tarball/3.2",
        "url": "https://api.github.com/repos/eea/sparql-client/releases/11609627",
        "zipball_url": "https://api.github.com/repos/eea/sparql-client/zipball/3.2"
      }
    ],
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you have nose_ installed, just run ``nosetests`` in the top-level directory.\nSome tests require the python-dateutil_ (version 1.5) or mock_ libraries.\nTested under Python 2.4 through 2.7.\n\n.. _nose: http://somethingaboutorange.com/mrl/projects/nose/\n.. _python-dateutil: http://niemeyer.net/python-dateutil\n.. _mock: http://www.voidspace.org.uk/python/mock/\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 25,
      "date": "Mon, 20 Dec 2021 17:51:38 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "python",
      "plone"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": ">>> sparql.py [-i] endpoint\n    -i Interactive mode\n\nIf interactive mode is enabled, the program reads queries from the console and then executes them. Use a double line (two \u2018enters\u2019) to separate queries.\nOtherwise, the query is read from standard input.\n\n",
      "technique": "Header extraction"
    }
  ]
}