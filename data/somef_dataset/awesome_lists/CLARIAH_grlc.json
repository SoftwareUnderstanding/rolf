{
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "YAML 1.2\nMetadata for citation of this software according to the CFF format (https://citation-file-format.github.io/)\n\nauthors:\n  -\n    affiliation: \"King's College London\"\n    family-names: Mero\u00f1o-Pe\u00f1uela\n    given-names: Albert\n    orcid: \"https://orcid.org/0000-0003-4646-5842\"\n  -\n    affiliation: \"Netherlands eScience Center\"\n    family-names: Martinez\n    given-names: Carlos\n    orcid: \"https://orcid.org/0000-0001-5565-7577\"\ncff-version: \"1.0.3\"\ndoi: 10.5281/zenodo.1064391\nlicense: MIT\nmessage: \"If you use this software, please cite it as below.\"\nrepository-code: \"https://github.com/CLARIAH/grlc\"\ntitle: \"grlc: the git repository linked data API constructor\"\nabstract: grlc, the git repository linked data API constructor, automatically builds Web APIs using SPARQL queries stored in git repositories.\nkeywords:\n  - \"swagger-ui\"\n  - sparql\n  - \"linked-data\"\n  - \"semantic-web\"\n  - \"linked-data-api\"\nversion: \"1.3.7\"\ndate-released: 2021-11-03",
      "technique": "File Exploration"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@InProceedings{merono2016grlc,\n author = {Mero{\\~{n}}o-Pe{\\~{n}}uela, Albert and Hoekstra, Rinke},\n title = {{grlc Makes GitHub Taste Like Linked Data APIs}},\n booktitle = {The Semantic Web: ESWC 2016 Satellite Events, Heraklion, Crete, Greece, May 29 -- June 2,  2016},\n year = {2016},\n publisher = {Springer},\n pages = {342--353},\n isbn = {978-3-319-47602-5},\n doi = {10.1007/978-3-319-47602-5_48}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9300460942349269
      ],
      "excerpt": "repo_title = Some title \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9989287977097404
      ],
      "excerpt": "title: Title of my API \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9989287977097404
      ],
      "excerpt": "title: Title of my API \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9686679014285212
      ],
      "excerpt": "  url: https://www.mywebsite.org \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8906174419333412,
        0.8906174419333412,
        0.8906174419333412
      ],
      "excerpt": "  - https://www.mywebsite.org/query1.rq \n  - https://www.mywebsite.org/query2.rq \n  - https://www.otherwebsite.org/query3.rq \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8714162992508173
      ],
      "excerpt": ":+     \"key\": \"?p\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8714162992508173
      ],
      "excerpt": ":+     \"$anchor\": \"key\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8955886365383559
      ],
      "excerpt": "Contributors:   Albert Mero\u00f1o, Rinke Hoekstra, Carlos Mart\u00ednez \n",
      "technique": "Supervised classification"
    }
  ],
  "codeOfConduct": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://raw.githubusercontent.com/CLARIAH/grlc/master/CODE_OF_CONDUCT.md",
    "technique": "File Exploration"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/CLARIAH/grlc",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Thank you very much for your interest in contributing to grlc! It's people like you that truly make the Semantic Web more accessible to everyone :)\nCommunication channels\nIf you would like to get in touch with the grlc developers, and with other users of grlc, you can reach us in two ways:\n - Via Twitter, by using the grlc handle (@grlcldapi). Follow this account to hear about updates.\n - Via the grlc mailing list. Sign up to the mailing list to ask questions and make suggestions.\nFiling bug reports\nThe official channel to file bug reports is via our GitHub's issue tracker. When doing so make sure that:\n- Your issue title briefly describes the bug\n- You include log output (try docker logs grlc_grlc_1 if you daemonized your instance)\n- Name the file/module if known/available\n- You tag your issue as bug\nSending feature requests\nAs with bug reports, for requesting features please use the issue tracker as well and this time:\n- Describe briefly the feature in the title\n- Describe the desired feature\n- Describe your use case so we understand what you are using grlc for\n- Name the file/module if known/available\n- Tag the issue as enhancement\nSending pull requests\nIf you would like to contribute to the code directly, please send in a pull request (PR). Please make sure that:\n - The title of your PR briefly describes the content\n - Describe in detail what your PR contributes\n - If your PR addresses a specific issue, indicate the issue number\n - Assign @albertmeronyo or @c-martinez as reviewer of your PR.\nTesting environment\nTo get started with hacking grlc, follow these steps to create a local testing environment (you'll need docker and docker-compose):\n\ndocker pull clariah/grlc:latest\ngit clone https://github.com/CLARIAH/grlc\ncd grlc\n\nCreate a docker-compose.yml which matches your needs. For example:\n```\nversion: '2'\nservices:\n  grlc:\n    build: ./\n    restart: unless-stopped\n    ports:\n\n\"8001:80\"\nenvironment:\nDEBUG=true\nUSERMAP_GID=1000\nUSERMAP_UID=1000\nGRLC_GITHUB_ACCESS_TOKEN=xxx\nGRLC_SERVER_NAME=grlc.io\n```\n\n\n\ndocker-compose up\n\nYour local grlc instance should be available at http://localhost:8001 and should respond to code modifications you make on &lt;GRLC_CLONE_PATH&gt;\n\nYou're good to pick any issue at the  issue tracker marked as enhancement and start implementing it :)\nGovernance model\nAs creators of grlc, @albertmeronyo and @c-martinez are benevolent dictators for this project. This means that they have a final say of the direction of the project. This DOES NOT mean they are not willing to listen to suggestion (on the contrary, they love to hear new ideas)!\nContributing\nAll grlc contributors will be listed in the CONTRIBUTORS.md file. Also, notes of new releases will mention who contributed to that specific release.\nQuestions\nPlease open an issue at the issue tracker and tag it as question",
    "technique": "File Exploration"
  },
  "contributors": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributors\nThis is a list of all people who have contributed to grlc. Big thanks to everyone.\nRinkeHoekstra\npasqLisena\nrlzijdeman\nRoderickvanderWeerdt\narnikz\njetschni\nmwigham\nsteltenpower\njspaaks\necow\nrapw3k\njblom",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2015-11-13T15:49:10Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-06T04:08:35Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Creates a description of your query/operation. This is shown as the description of your operation in the swagger-ui.\n\nSyntax:\n```\n#:+ description: Extended description of my query/operation.\n```\n\nExample [query](https://github.com/CLARIAH/grlc-queries/blob/master/description.rq) and the equivalent [API operation](http://grlc.io/api-git/CLARIAH/grlc-queries/#/default/get_description).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Creates a summary of your query/operation. This is shown next to your operation name in the swagger-ui.\n\nSyntax:\n```\n#:+ summary: This is the summary of my query/operation\n```\n\nExample [query](https://github.com/CLARIAH/grlc-queries/blob/master/summary.rq) and the equivalent [API operation](http://grlc.io/api-git/CLARIAH/grlc-queries/#/default/get_summary).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9957875357540732,
        0.8520398690306397
      ],
      "excerpt": "grlc is a lightweight server that takes SPARQL queries (stored in a GitHub repository, in your local filesystem, or listed in a URL), and translates them to Linked Data Web APIs. This enables universal access to Linked Data. Users are not required to know SPARQL to query their data, but instead can access a web API. \ngrlc can load your query collection from different locations: from a GitHub repository (api-git), from local storage (api-local), and from a specification file (api-url). Each type of location has specific features and is accessible via different paths. However all location types produce the same beautiful APIs. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.883689113318943
      ],
      "excerpt": "api_description = Description of my API \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8413417678297281
      ],
      "excerpt": "A grlc API specification file is a YAML file which includes the necessary information to create a grlc API, most importantly a list of URLs to decorated and HTTP-dereferenceable SPARQL queries. This file should contain the following fields \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8782228071879078,
        0.974167213695106
      ],
      "excerpt": "licence: A URL pointing to the licence file for the API. \nqueries: A list of URLs of SPARQL queries (with header decorators). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8050215704732417
      ],
      "excerpt": "description: Description of my API \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8267240124131126
      ],
      "excerpt": "The API paths of all location types point to the generated swagger-ui style API documentation. On the API documentation page, you can explore available API calls and execute individual API calls. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8897494352672896
      ],
      "excerpt": "When you call an API endpoint, grlc executes the SPARQL query for that endpoint by combining supplied parameters and decorators. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8521884263914796
      ],
      "excerpt": "Add a endpoint parameter to your request: 'http://grlc.io/user/repo/query?endpoint=http://sparql-endpoint/'. You can add a #+ endpoint_in_url: False decorator if you DO NOT want to see the endpoint parameter in the swagger-ui of your API. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9424771799823349,
        0.8002558145758163,
        0.8766809365900176
      ],
      "excerpt": "Add the URL of the endpoint on a single line in an endpoint.txt file within the GitHub repository that contains the queries. \nThe endpoint call will return the result of executing the query as a json representation of rdflib.query.QueryResult (for other result formats, you can use content negotiation via HTTP Accept headers). For json responses, the schema of the response can be modified by using the #+ transform: decorator. \nSpecial decorators are available to make your swagger-ui look nicer and to increase functionality. These are provided as comments at the start of your query file, making it still syntactically valid SPARQL. All decorators start with #+, for example: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9088113920722878
      ],
      "excerpt": "The following is a list of available decorators and their function: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8673082343691825
      ],
      "excerpt": "Paginates the results in groups of (for example) 100. Links to previous, next, first, and last result pages are provided as HTTP response headers to avoid polluting the payload (see details here) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9393376411556321
      ],
      "excerpt": "Indicates the HTTP request method (GET and POST are supported). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8447123227558184
      ],
      "excerpt": ":+ method: GET \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8678589605783271
      ],
      "excerpt": "Assign tags to your query/operation. Query/operations with the same tag are grouped together in the swagger-ui. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.877203197471155
      ],
      "excerpt": "Set the default value in the swagger-ui for a specific parameter in the query. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9228285270335892
      ],
      "excerpt": "Indicates which parameters of your query/operation should get enumerations (and get dropdown menus in the swagger-ui) using the given values from the SPARQL endpoint. The values for each enumeration variable can also be specified into the query decorators to save endpoint requests and speed up the API generation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9187036253153553
      ],
      "excerpt": "Allows  query results to be converted to the specified JSON structure, by using SPARQLTransformer syntax. Notice that the response content type must be set to application/json for the transformation to take effect. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8824987418722486
      ],
      "excerpt": "The easiest way to use grlc is by visiting grlc.io and using this service to convert SPARQL queries into a RESTful API. Your queries can be stored on a github repo or can be listed on a specification file. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8005527127532824,
        0.8918577957745761
      ],
      "excerpt": "The configuration file contains the following variables: \n - github_access_token access token to communicate with Github API. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9420898063832778,
        0.8835336500067704
      ],
      "excerpt": "In order for grlc to communicate with GitHub, you'll need to tell grlc what your access token is: \nGet a GitHub personal access token. In your GitHub's profile page, go to Settings, then Developer settings, Personal access tokens, and Generate new token \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8173669411054424
      ],
      "excerpt": "grlc needs you to continue bringing Semantic Web content to developers, applications and users. No matter if you are just a curious user, a developer, or a researcher; there are many ways in which you can contribute: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9270518359467552
      ],
      "excerpt": "Request new features \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9853002131754556
      ],
      "excerpt": "Check our contributing guidelines for these and more, and join us today! \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8061821030653827
      ],
      "excerpt": "Share your experience at using grlc in Twitter (mention the handle @grlcldapi) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9358168181500992,
        0.9469393092303173,
        0.880090901752324,
        0.9492784107865386,
        0.9255967956488222
      ],
      "excerpt": "SPARQL2Git is a Web interface for editing SPARQL queries and saving them in GitHub as grlc APIs. \ngrlcR is a package for R that brings Linked Data into your R environment easily through grlc. \nHay's tools lists grlc as a Wikimedia-related tool :-) \nFlavour your Linked Data with grlc, by Carlos Martinez \nConverting any SPARQL endpoint to an OpenAPI by Egon Willighagen \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9530732412941941,
        0.9837569582409438
      ],
      "excerpt": "A cool project that can convert a random SPARQL endpoint into an OpenAPI endpoint \nIt enables us to quickly integrate any new API requirements in a matter of seconds, without having to worry about configuration or deployment of the system \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "grlc builds Web APIs using shared SPARQL queries",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/CLARIAH/grlc/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 20,
      "date": "Mon, 20 Dec 2021 20:19:56 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/CLARIAH/grlc/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "CLARIAH/grlc",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/CLARIAH/grlc/master/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/CLARIAH/grlc/master/doc/notebooks/GrlcFromNotebook.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/CLARIAH/grlc/master/docker-assets/entrypoint.sh",
      "https://raw.githubusercontent.com/CLARIAH/grlc/master/docker-assets/assets/build/install.sh",
      "https://raw.githubusercontent.com/CLARIAH/grlc/master/.travis/before_deploy.sh",
      "https://raw.githubusercontent.com/CLARIAH/grlc/master/.travis/install.sh",
      "https://raw.githubusercontent.com/CLARIAH/grlc/master/.travis/run.sh",
      "https://raw.githubusercontent.com/CLARIAH/grlc/master/.travis/before_install.sh"
    ],
    "technique": "File Exploration"
  },
  "identifier": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://zenodo.org/badge/latestdoi/46131212",
      "technique": "Regular expression"
    }
  ],
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Once the base requirements are satisfied, you can install grlc like this:\n```bash\npip install grlc\n```\n\nOnce grlc is installed, you have several options:\n - [Stand alone server](#Standalone-server)\n - [Using a WSGI server](#Using-a-WSGI-server)\n - [As a python library](#Grlc-library)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "You can use grlc in different ways:\n - [Via grlc.io](#grlc.io): you can use the [grlc.io service](https://grlc.io/)\n - [Via Docker](#Docker): you can use the [grlc docker image](https://hub.docker.com/r/clariah/grlc) and start your own grlc server.\n - [Via pip](#Pip): you can install the [grlc Python package](https://pypi.org/project/grlc/) and start your own grlc server or use grlc as a Python library.\n\nMore details for each of these options are given below.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8918759616454244
      ],
      "excerpt": "For example, assuming your queries are stored on a Github repo: https://github.com/CLARIAH/grlc-queries/, point your browser to the following location \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521,
        0.8626798667210626,
        0.8626798667210626
      ],
      "excerpt": "contact_name = My name \ncontact_url = https://mypage/ \nlicence_url = https://mylicence/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8065346525028764
      ],
      "excerpt": "  name: Contact Name \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9907529993532502,
        0.8398939305832216
      ],
      "excerpt": "If you want to run grlc locally or use it as a library, you can install grlc on your machine. Grlc is registered in PyPi so you can install it using pip. \ngrlc includes a command line tool which you can use to start your own grlc server: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9059423338309929
      ],
      "excerpt": "Then you can run it as: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9121979008260885
      ],
      "excerpt": "Note: Since gunicorn does not work under Windows, you can use waitress instead: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8417130813876081,
        0.8282442117221187
      ],
      "excerpt": "If you want to run grlc at system boot as a service, you can find example upstart scripts at upstart/ \nYou can use grlc as a library directly from your own python script. See the usage example to find out more. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8547407825553986
      ],
      "excerpt": "Set up your own environment and start hacking \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8216270093103228
      ],
      "excerpt": "For example: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029,
        0.8731562459058029
      ],
      "excerpt": ":+ decorator_1: decorator value \n:+ decorator_1: decorator value \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029
      ],
      "excerpt": ":+     \"value\": \"?o\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8051431308503051
      ],
      "excerpt": "docker run -it --rm -p 8088:80 clariah/grlc \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8148243023512451
      ],
      "excerpt": "docker run -it --rm -p 8088:80 -e GRLC_SERVER_NAME=grlc.io -e GRLC_GITHUB_ACCESS_TOKEN=xxx -e GRLC_SPARQL_ENDPOINT=http://dbpedia.org/sparql -e DEBUG=true clariah/grlc \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/CLARIAH/grlc/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "HTML",
      "TeX",
      "Shell",
      "JavaScript",
      "CSS",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# What is grlc?",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "grlc",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "CLARIAH",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/CLARIAH/grlc/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "c-martinez",
        "body": "Release notes:\r\n - Upgrade rdflib 5.0.0\r\n - Updates for [JOSS review](https://github.com/openjournals/joss-reviews/issues/2731)",
        "dateCreated": "2021-11-03T22:57:53Z",
        "datePublished": "2021-11-03T23:00:15Z",
        "html_url": "https://github.com/CLARIAH/grlc/releases/tag/v1.3.7",
        "name": "Nov 2021 release",
        "tag_name": "v1.3.7",
        "tarball_url": "https://api.github.com/repos/CLARIAH/grlc/tarball/v1.3.7",
        "url": "https://api.github.com/repos/CLARIAH/grlc/releases/52640515",
        "zipball_url": "https://api.github.com/repos/CLARIAH/grlc/zipball/v1.3.7"
      },
      {
        "authorType": "User",
        "author_name": "c-martinez",
        "body": "This release includes:\r\n\r\n- Update documentation & contributing guidelines\r\n- Update requirements (docutils)\r\n- Add format control via extension (thanks @ecow for reporting)\r\n- Remove 3.5 support\r\n- Remove support for `/spec` in favour of `/swagger`\r\n- Restrict transform decorator to application/json (thanks @ecow for reporting)\r\n- Catching exception connecting to SPARQL endpoint\r\n- Handle errors raised by missing prefix\r\n- Fix query display in summary\r\n- Upgrade SPARQL transformer to support list objects (thanks @rapw3k for suggesting this feature and @pasqLisena for implementing it)\r\n- Add extra check for missing license (Thanks @jaw111 for reporting this)\r\n",
        "dateCreated": "2021-05-05T10:28:32Z",
        "datePublished": "2021-05-05T10:31:38Z",
        "html_url": "https://github.com/CLARIAH/grlc/releases/tag/v1.3.6",
        "name": "May 2021 release",
        "tag_name": "v1.3.6",
        "tarball_url": "https://api.github.com/repos/CLARIAH/grlc/tarball/v1.3.6",
        "url": "https://api.github.com/repos/CLARIAH/grlc/releases/42466521",
        "zipball_url": "https://api.github.com/repos/CLARIAH/grlc/zipball/v1.3.6"
      },
      {
        "authorType": "User",
        "author_name": "c-martinez",
        "body": "This release includes:\r\n - Workflow for tweeting new releases\r\n - Multiple updates to testing suit to catch bugs: using grlc as library, calling API paths\r\n - Improve version management, making it easier to bump version in a single file (CITATION.CFF)\r\n - Backward compatibility of /spec endpoints\r\n - Fix pagination links\r\n - Document parameter syntax\r\n - Improving support for in a repo\r\n - Add support for customizable information in repo\r\n - Show warnings on swagger UI when unable to build queries\r\n - Use PyGithub to communicate with Github",
        "dateCreated": "2020-11-16T11:43:05Z",
        "datePublished": "2020-11-16T20:02:21Z",
        "html_url": "https://github.com/CLARIAH/grlc/releases/tag/v1.3.5",
        "name": "Nov 2020 release",
        "tag_name": "v1.3.5",
        "tarball_url": "https://api.github.com/repos/CLARIAH/grlc/tarball/v1.3.5",
        "url": "https://api.github.com/repos/CLARIAH/grlc/releases/34021918",
        "zipball_url": "https://api.github.com/repos/CLARIAH/grlc/zipball/v1.3.5"
      },
      {
        "authorType": "User",
        "author_name": "c-martinez",
        "body": "- Security patch waitress\r\n- Remove Access-Control-Allow-Origin nginx header\r\n- Fix Markdown links",
        "dateCreated": "2020-05-20T13:13:38Z",
        "datePublished": "2020-05-20T13:15:07Z",
        "html_url": "https://github.com/CLARIAH/grlc/releases/tag/v1.3.4",
        "name": "May 2020 patch",
        "tag_name": "v1.3.4",
        "tarball_url": "https://api.github.com/repos/CLARIAH/grlc/tarball/v1.3.4",
        "url": "https://api.github.com/repos/CLARIAH/grlc/releases/26715586",
        "zipball_url": "https://api.github.com/repos/CLARIAH/grlc/zipball/v1.3.4"
      },
      {
        "authorType": "User",
        "author_name": "c-martinez",
        "body": "New in this release:\r\n\r\n - New functionality for loading API specification from YAML file downloaded from URL\r\n - New API routes for git, local and url specification (with backwards compatibility)\r\n - Refactoring\r\n - Fix issues with paths for static files.\r\n - Fix change download_uri github policy\r\n - Update SPARQL transformer\r\n - Prepare submission for JOSS: update docstrings, improve README, reorganise examples.",
        "dateCreated": "2020-05-09T11:33:34Z",
        "datePublished": "2020-05-10T09:57:54Z",
        "html_url": "https://github.com/CLARIAH/grlc/releases/tag/v1.3.3",
        "name": "May 2020 release",
        "tag_name": "v1.3.3",
        "tarball_url": "https://api.github.com/repos/CLARIAH/grlc/tarball/v1.3.3",
        "url": "https://api.github.com/repos/CLARIAH/grlc/releases/26352397",
        "zipball_url": "https://api.github.com/repos/CLARIAH/grlc/zipball/v1.3.3"
      },
      {
        "authorType": "User",
        "author_name": "c-martinez",
        "body": " - Remove PythonQL dependency (should solve pipenv install issues)\r\n - Add dependabot config",
        "dateCreated": "2020-01-13T07:12:50Z",
        "datePublished": "2020-01-14T20:16:32Z",
        "html_url": "https://github.com/CLARIAH/grlc/releases/tag/v1.3.2",
        "name": "January 2020 patch",
        "tag_name": "v1.3.2",
        "tarball_url": "https://api.github.com/repos/CLARIAH/grlc/tarball/v1.3.2",
        "url": "https://api.github.com/repos/CLARIAH/grlc/releases/22838705",
        "zipball_url": "https://api.github.com/repos/CLARIAH/grlc/zipball/v1.3.2"
      },
      {
        "authorType": "User",
        "author_name": "c-martinez",
        "body": "This release includes:\r\n\r\n- Updates on Travis configuration\r\n- Security fixes\r\n- Test fixes\r\n- Imlementing new features from  issues #190 #165 #24\r\n- SPARQLTransformer functionality\r\n- Change lookup path for config.ini\r\n",
        "dateCreated": "2019-12-26T15:10:26Z",
        "datePublished": "2019-12-26T15:26:31Z",
        "html_url": "https://github.com/CLARIAH/grlc/releases/tag/v1.3.1",
        "name": "End of 2019 release",
        "tag_name": "v1.3.1",
        "tarball_url": "https://api.github.com/repos/CLARIAH/grlc/tarball/v1.3.1",
        "url": "https://api.github.com/repos/CLARIAH/grlc/releases/22469472",
        "zipball_url": "https://api.github.com/repos/CLARIAH/grlc/zipball/v1.3.1"
      },
      {
        "authorType": "User",
        "author_name": "c-martinez",
        "body": " - SPARQL Transformer\r\n - Windows CI support\r\n - Full migration to Python 3 -- dropping Python 2 support :-(\r\n - Better error messages for bad credentials\r\n - Update Docker image env variables\r\n",
        "dateCreated": "2019-07-01T09:11:44Z",
        "datePublished": "2019-07-01T11:32:31Z",
        "html_url": "https://github.com/CLARIAH/grlc/releases/tag/v1.3.0",
        "name": "Full migration to Python 3",
        "tag_name": "v1.3.0",
        "tarball_url": "https://api.github.com/repos/CLARIAH/grlc/tarball/v1.3.0",
        "url": "https://api.github.com/repos/CLARIAH/grlc/releases/18329046",
        "zipball_url": "https://api.github.com/repos/CLARIAH/grlc/zipball/v1.3.0"
      },
      {
        "authorType": "User",
        "author_name": "c-martinez",
        "body": "Features in this release:\r\n\r\n - Make readme pypi friendly\r\n - Update requirements\r\n - Demo: running grlc from python\r\n - Add support for pyql projections\r\n - Update to work with python3\r\n - Check for license files for LicenseURLs\r\n - Add error for non-existing routes\r\n - Remove swagger-ui from static files\r\n - Process number parameters properly\r\n - Windows support",
        "dateCreated": "2019-02-07T15:46:47Z",
        "datePublished": "2019-02-07T15:59:48Z",
        "html_url": "https://github.com/CLARIAH/grlc/releases/tag/v1.2.1",
        "name": "Early 2019",
        "tag_name": "v1.2.1",
        "tarball_url": "https://api.github.com/repos/CLARIAH/grlc/tarball/v1.2.1",
        "url": "https://api.github.com/repos/CLARIAH/grlc/releases/15427248",
        "zipball_url": "https://api.github.com/repos/CLARIAH/grlc/zipball/v1.2.1"
      },
      {
        "authorType": "User",
        "author_name": "c-martinez",
        "body": "",
        "dateCreated": "2018-10-17T12:18:34Z",
        "datePublished": "2018-10-17T12:19:09Z",
        "html_url": "https://github.com/CLARIAH/grlc/releases/tag/v1.2.0-pypi",
        "name": "Release on pypi",
        "tag_name": "v1.2.0-pypi",
        "tarball_url": "https://api.github.com/repos/CLARIAH/grlc/tarball/v1.2.0-pypi",
        "url": "https://api.github.com/repos/CLARIAH/grlc/releases/13477918",
        "zipball_url": "https://api.github.com/repos/CLARIAH/grlc/zipball/v1.2.0-pypi"
      },
      {
        "authorType": "User",
        "author_name": "c-martinez",
        "body": "Updates in this release\r\n - Endpoints are now configurable\r\n - Github API interactions are done via PyGithub\r\n - Added Zenodo integration (including citation file)\r\n - Add support for queries from local directory\r\n - Support authentication on SPARQL endpoints\r\n - Added unit tests and continuous integration\r\n - Parsing insert queries \r\n - Use SwaggerUI from cdnjs \r\n - Use SPARQLWrapper\r\n - Make git2prov optional",
        "dateCreated": "2018-10-17T10:40:03Z",
        "datePublished": "2018-10-17T11:19:43Z",
        "html_url": "https://github.com/CLARIAH/grlc/releases/tag/v1.2.0",
        "name": "Summer 2018 updates",
        "tag_name": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/CLARIAH/grlc/tarball/v1.2.0",
        "url": "https://api.github.com/repos/CLARIAH/grlc/releases/13476445",
        "zipball_url": "https://api.github.com/repos/CLARIAH/grlc/zipball/v1.2.0"
      },
      {
        "authorType": "User",
        "author_name": "c-martinez",
        "body": "Change log:\r\n - Python 3 support\r\n - Provenance for spec generation\r\n - Reduced default cache max age\r\n - Integrated repo PROV via Git2PROV\r\n - ci in dockerhub",
        "dateCreated": "2017-10-30T08:59:11Z",
        "datePublished": "2017-11-22T09:54:19Z",
        "html_url": "https://github.com/CLARIAH/grlc/releases/tag/1.1",
        "name": "",
        "tag_name": "1.1",
        "tarball_url": "https://api.github.com/repos/CLARIAH/grlc/tarball/1.1",
        "url": "https://api.github.com/repos/CLARIAH/grlc/releases/8616745",
        "zipball_url": "https://api.github.com/repos/CLARIAH/grlc/zipball/1.1"
      },
      {
        "authorType": "User",
        "author_name": "albertmeronyo",
        "body": "Fully charged grlc with Docker and PyPi support! Install as\n\n$ docker pull clariah/grlc:latest\nor\n$ pip install grlc\n",
        "dateCreated": "2017-02-07T12:52:01Z",
        "datePublished": "2017-02-07T13:53:27Z",
        "html_url": "https://github.com/CLARIAH/grlc/releases/tag/1.0",
        "name": "1.0",
        "tag_name": "1.0",
        "tarball_url": "https://api.github.com/repos/CLARIAH/grlc/tarball/1.0",
        "url": "https://api.github.com/repos/CLARIAH/grlc/releases/5382705",
        "zipball_url": "https://api.github.com/repos/CLARIAH/grlc/zipball/1.0"
      }
    ],
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "grlc has the following requirements:\n- Python3\n- development files (depending on your OS):\n```bash\nsudo apt-get install libevent-dev python-all-dev\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You can use grlc in different ways:\n - [Via grlc.io](#grlc.io): you can use the [grlc.io service](https://grlc.io/)\n - [Via Docker](#Docker): you can use the [grlc docker image](https://hub.docker.com/r/clariah/grlc) and start your own grlc server.\n - [Via pip](#Pip): you can install the [grlc Python package](https://pypi.org/project/grlc/) and start your own grlc server or use grlc as a Python library.\n\nMore details for each of these options are given below.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 106,
      "date": "Mon, 20 Dec 2021 20:19:56 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "swagger-ui",
      "sparql",
      "linked-data",
      "semantic-web",
      "api",
      "linked-data-api",
      "open-api"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "For a quick usage tutorial check out our wiki [walkthrough](https://github.com/CLARIAH/grlc/wiki/Quick-tutorial) and [list of features](https://github.com/CLARIAH/grlc/wiki/Features).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "grlc assumes that you have a collection of SPARQL queries as .rq files (like [this](https://github.com/CLARIAH/grlc-queries)). grlc will create one API operation for each SPARQL query/.rq file in the collection.\n\nYour queries can add API parameters to each operation by using the [parameter mapping](https://github.com/CLARIAH/grlc/wiki/Parameter-Mapping) syntax. This allows your query to define query variables which will be mapped to API parameters for your API operation ([see here](https://github.com/CLARIAH/grlc-queries/blob/master/enumerate.rq) for an example).\n\nYour queries can include special [decorators](#decorator-syntax) to add extra functionality to your API.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Check these out:\n- http://grlc.io/api-git/CLARIAH/grlc-queries\n- http://grlc.io/api-url?specUrl=https://raw.githubusercontent.com/CLARIAH/grlc-queries/master/urls.yml\n- http://grlc.io/api-git/CLARIAH/wp4-queries-hisco\n- http://grlc.io/api-git/albertmeronyo/lodapi\n- http://grlc.io/api-git/albertmeronyo/lsq-api\n- https://grlc.io/api-git/CEDAR-project/Queries\n\nYou'll find the sources of these and many more in [GitHub](https://github.com/search?o=desc&q=endpoint+summary+language%3ASPARQL&s=indexed&type=Code&utf8=%E2%9C%93)\n\nUse [this GitHub search](https://github.com/search?q=endpoint+summary+language%3ASPARQL&type=Code&utf8=%E2%9C%93) to see examples from other grlc users.\n\n",
      "technique": "Header extraction"
    }
  ]
}