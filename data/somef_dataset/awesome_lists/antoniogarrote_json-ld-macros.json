{
  "citation": [
    {
      "confidence": [
        0.8670311654145044
      ],
      "excerpt": "'f:basetemplateurl': Transforms a URL template with terminal variables into the base URL without the variables. e.g.: 'https://api.github.com/users/octocat/starred{/owner}{/repo}' becomes 'https://api.github.com/users/octocat/starred' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.844592116576727,
        0.932235736252902
      ],
      "excerpt": "  \"https://api.github.com/users/{username}\\\\n\\ \n   https://api.github.com/users/{username}/following/{other_user}\": \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9666487591481471,
        0.8029948720864918
      ],
      "excerpt": "           '@context': {'gh':'http://socialrdf.org/github/'}, \n           '@type': 'http://socialrdf.org/github/User', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9666487591481471,
        0.9279628677675321
      ],
      "excerpt": "       '@context': {'gh':'http://socialrdf.org/github/'}, \n       '@type': 'http://socialrdf.org/github/Commit'}} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8283216015784888
      ],
      "excerpt": "      \"jldm\": \"http://jsonld-macros.org/vocab#:\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.844592116576727
      ],
      "excerpt": "      \"https://api.github.com/users/{username}/commits/{sha1}\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9385246126381537
      ],
      "excerpt": "            \"jldm:ruleBody\": \"{\\\"gh\\\":\\\"http://socialrdf.org/github/\\\"}\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9385246126381537
      ],
      "excerpt": "            \"jldm:ruleBody\": \"\\\"http://socialrdf.org/github/Commit\\\"\" \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/antoniogarrote/json-ld-macros",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "How to contribute\n\nGetting help\nSubmitting bug reports\nContributing code\n\nGetting help\nCommunity discussion, questions, and informal bug reporting is done on the\ndiscuss.CodeMirror forum.\nSubmitting bug reports\nThe preferred way to report bugs is to use the\nGitHub issue tracker. Before\nreporting a bug, read these pointers.\nNote: The issue tracker is for bugs, not requests for help. Questions\nshould be asked on the\ndiscuss.CodeMirror forum instead.\nReporting bugs effectively\n\n\nCodeMirror is maintained by volunteers. They don't owe you anything, so be\n  polite. Reports with an indignant or belligerent tone tend to be moved to the\n  bottom of the pile.\n\n\nInclude information about the browser in which the problem occurred. Even\n  if you tested several browsers, and the problem occurred in all of them,\n  mention this fact in the bug report. Also include browser version numbers and\n  the operating system that you're on.\n\n\nMention which release of CodeMirror you're using. Preferably, try also with\n  the current development snapshot, to ensure the problem has not already been\n  fixed.\n\n\nMention very precisely what went wrong. \"X is broken\" is not a good bug\n  report. What did you expect to happen? What happened instead? Describe the\n  exact steps a maintainer has to take to make the problem occur. We can not\n  fix something that we can not observe.\n\n\nIf the problem can not be reproduced in any of the demos included in the\n  CodeMirror distribution, please provide an HTML document that demonstrates\n  the problem. The best way to do this is to go to\n  jsbin.com, enter it there, press save, and\n  include the resulting link in your bug report.\n\n\nContributing code\n\nMake sure you have a GitHub Account\nFork CodeMirror\n  (how to fork a repo)\nMake your changes\nIf your changes are easy to test or likely to regress, add tests.\n  Tests for the core go into test/test.js, some modes have their own\n  test suite under mode/XXX/test.js. Feel free to add new test\n  suites to modes that don't have one yet (be sure to link the new\n  tests into test/index.html).\nFollow the general code style of the rest of the project (see\n  below). Run bin/lint to verify that the linter is happy.\nMake sure all tests pass. Visit test/index.html in your browser to\n  run them.\nSubmit a pull request\n(how to create a pull request).\n  Don't put more than one feature/fix in a single pull request.\n\nBy contributing code to CodeMirror you\n\n\nagree to license the contributed code under CodeMirror's MIT\n   license.\n\n\nconfirm that you have the right to contribute and license the code\n   in question. (Either you hold all rights on the code, or the rights\n   holder has explicitly granted the right to use it like this,\n   through a compatible open source license or through a direct\n   agreement with you.)\n\n\nCoding standards\n\n\n2 spaces per indentation level, no tabs.\n\n\nNote that the linter (bin/lint) which is run after each commit\n  complains about unused variables and functions. Prefix their names\n  with an underscore to muffle it.\n\n\nCodeMirror does not follow JSHint or JSLint prescribed style.\n  Patches that try to 'fix' code to pass one of these linters will be\n  unceremoniously discarded.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2012-01-22T20:33:39Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-17T10:58:18Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Transforms a pair property - node into a pair property - value where the value is the value of the selected property in the node.\n\n``` javascript\n\n// input node\n{\"contact_url\": {\"$ref\": \"http://test.com/people/dmm4\"}}\n\n// rule\n{\"@compact\": \"$ref\"}\n\n// output node\n{\"contact_url\": \"http://test.com/people/dmm4\"}\n\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9659789491029946,
        0.9567936996317927
      ],
      "excerpt": "JSON-LD Macros is a library to define declarative transformations of JSON objects obtained from a remote web service into JSON-LD objects. The ultimate goal of the library is to make it easier the process of consuming JSON APIs from RDF/JSON-LD applications. Similar ideas for transforming JSON documents into RDF have been explored in projects like jsonGRDDL. \nJSON-LD Macros supports the serialisation of the macro itself as JSON-LD and the deserialisation back into the macro description. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8716898088715305
      ],
      "excerpt": "JSON-LD Macros fundamental concept is the description of JSON documents transformations encoded as JSON objects. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9667275458204245,
        0.9870480143850896,
        0.877557113306882,
        0.8624072265627556
      ],
      "excerpt": "Transformations in turn are composed of pairs key-values where the key declares a 'selector' of nodes in the JSON object to transform. The value consist in a collection of transformation rules from a fixes set of possible rules: \"@context\", \"@id\", \"@type\", \"@remove\", \"@only\", \"@ns\" and \"@transform\". \nWhen the transformation is applied to a JSON object retrieved from a URI matching one of the declared templates, each of the node selectors defined for that transformation is evaluated in the retrieved object. The output of this evaluation is a collection of nodes per node selector. For every collection of nodes, the transformation rules are applied inplace. After applying all the transformations, the resulting DOM document is returned as the final output. \nTransformation bodies can consist, in some cases, in an array of objects containing functions that can be applied to the selected node to obtain the value that will be used by the transformation. \nThe following grammar describes the structure of an API transformation definition: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.849193848806503
      ],
      "excerpt": "The following sections describe how to declare URI patterns, node selectors and transformations. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8208008606573225
      ],
      "excerpt": "Node selectors syntax is taken from JSON Path but the semantics are slightly modified to match the behaviour os selector libraries like jQuery. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8878324031242287,
        0.971737826318485
      ],
      "excerpt": "'$': Selects the root of the document. It can be a single JSON object if the document includes a single object or a collection of objects if the root object in the document is an array. \n'*': Selects all the objects linked to any property of the selected nodes. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8460614611596943,
        0.9166744128324579,
        0.9608509990209992
      ],
      "excerpt": "'propertyName[ * ]': if 'propertyName' returns an array of objects, 'propertyName[*]' aggregates all the objects in the selected arrays. \nEvaluation of the selector is accomplished from left to right. For every component in the path, it is evaluated in the current set of selected nodes. After evaluation, the selected nodes set is replaced by the output of the evaluation. The set of selected nodes start with the empty set. \nTransformation rules are JSON objects where the keys of the object identified certain standard transformations that can be performed in the input object and the values describe particular details of the transformation rule. A fixed set of transformation rules is available: \"@explode\", \"@compact\", \"@context\", \"@id\", \"@type\", \"@add\", \"@remove\", \"@only\", \"@ns\" and \"@transform\". \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9422759895121813
      ],
      "excerpt": "Some transformation rules like \"@id\", \"@type\" and \"@transform\" accept as the rule body an array of functions that will applied to the target object to obtain the final value generated by the rule. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.982163963358153
      ],
      "excerpt": "This is a description of the different transformations \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.890107096518766,
        0.8766729745503825
      ],
      "excerpt": "JSON string: a fixed string that will be inserted as the value of the @id property in all the nodes \nAn array of functions that will be applied to each selected node to obtain the value of the @id JSON-LD object. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8707873633494368,
        0.871163323762703,
        0.8766729745503825
      ],
      "excerpt": "JSON string: a fixed string that will be inserted as the value of the @type property in all the nodes \nJSON array: an array of fixed strings that will be inserted as the value of the @type property in all the nodes \nAn array of functions that will be applied to each selected node to obtain the value of the @id JSON-LD object. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9339956591766082,
        0.940526776515421,
        0.9294888998912489,
        0.910053085139601,
        0.9167884620030986,
        0.8856489656994108
      ],
      "excerpt": "Defines a generic transformation for a property of the selected nodes that will be applied to the initial value of the property to obtain the final value for that property in the transformed object. \nThe body of the rule must be a JSON object with a single key with the name of the property to transform and a value containing the array of function to apply to the initial value. \nThis rule can be used to delete properties of the selected nodes. Possible values are a single string with the name of the property to remove or an array of properties that will be removed. \nThis rule can be used to add properties of the selected nodes. The value must be a object with the properties and values to be added to the node. \nCollects a set of properties from the selected nodes and delete the remaining properties. Possible values for the this rule body are a single property to select or an array witht the properties that must be collected. \nThis rule transforms the names of the properties in the selected nodes. The rule body consist of an object containgin functions that will be applied to the object property names to obtain the final properties. This rule is applied after all other rules have been applied. When referring to property names in other rules, the name of the property before applying this rule must be used. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503498441558135
      ],
      "excerpt": "'ns:default': the value of this function is a default prefix that will be prepended to all the properties in the current node to transform them into CURIEs \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.845746251292195
      ],
      "excerpt": "'ns:replace': Similar to 'ns:append', but instead of a prefix, it accepts as key fo the rule body object a string that will replace enterily the selected property names \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9205089345773615
      ],
      "excerpt": "Functions are expressed as a single object or an array of JSON objects where each object contains the declaration of a function application that will be issued to the selected node. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490826436107318,
        0.8740484314366661
      ],
      "excerpt": "New functions can be defined in the API declaration using a prefixed name for the functions and invoked in the body of rules. \nA collection of functions are already available for transformations: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8147364442987928,
        0.8123501093473581
      ],
      "excerpt": "'f:select': selects the value of the function argument in the input object and returns it. \n'f:prefix': adds a prefix passed as the function argument and add it to the input object before returning it. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9179466667441635
      ],
      "excerpt": "'f:apply': Accepts a string of JavaScript code as the function argument, evaluates it and applies the resulting function to the input object. Evaluation is scoped with the input object using code like: (new Function('with(this) { return '+functionArgumentTexT+';}')).call(inputObject) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8748987176977178,
        0.8157703925269265,
        0.9593616058944252
      ],
      "excerpt": "One main problem when applying transformations with null properties. Some object in the input data may have optional values, or the application of a function may return an unexpected null value. The library can react to this events in two different ways depending of the value of the 'behaviour' property. If the 'behaviour' property is set to the value 'loose', exceptions in the application of function chains will be catched and a null value will be returned as the result of the function chain application. Additionally, after transforming a node, properties with null values will be removed, including the '@id' property. \nIf the value of the 'behaviour' property is set to 'strict', exceptions will not be catched and final values of the transformations will be returned including null values. \nAdditional functions can be declared in the definition of a API using the '@declare' property. Function declarations accepts as the value of the '@declare' property a JSON object containing  pairs of CURIEs and function literals. for every prefix used in the curies, an additional property must map the prefix to the URI prefix. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8987023201374961
      ],
      "excerpt": "To export the registered macros as a JSON-LD document, the toJSONLD function can be used. The output of the serialisation is a JSON-LD document that uses a small vocabulary to expose the macro. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9320572283892866,
        0.8242243525367675
      ],
      "excerpt": "jldm:uriTemplate : a URI template used to match the transformations of the macro. \njldm:specification : a property pointing to each node transformation in the macro. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8064645456026001,
        0.8300400816724139
      ],
      "excerpt": "jldm:ruleName : type of node transformation '@add', '@remove', '@id', etc. \njldm:ruleBody : JSON encoded body for the described rule. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8738240020875768
      ],
      "excerpt": "The output of the previous code is the following JSON-LD document: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8691127423633643,
        0.915761966538675
      ],
      "excerpt": "Macros exported as JSON-LD documents can be de-serialised using the fromJSONLD function. The function requires an instance of the RDFStore-JS module to work. \nThis module is not included with the library to not increase the size of the library. If you want to use this functionality, you need to include rdfstore-js as an additional dependency into your project. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Declarative transformation of JSON APIs into JSON-LD",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/antoniogarrote/json-ld-macros/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 7,
      "date": "Mon, 20 Dec 2021 22:49:56 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/antoniogarrote/json-ld-macros/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "antoniogarrote/json-ld-macros",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/antoniogarrote/json-ld-macros/master/tester/lib/codemirror/bin/authors.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.811099815087061
      ],
      "excerpt": "   https://api.github.com/users/{username}/following/{other_user}\": \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "              'name': [{'f:valueof':'name'}, \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8058474683737183
      ],
      "excerpt": "TransformationRuleBody ::= FunctionsArray | JSON String | JSON Object \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8134429584563081,
        0.8368482481124339
      ],
      "excerpt": "JSON string: a fixed string that will be inserted as the value of the @type property in all the nodes \nJSON array: an array of fixed strings that will be inserted as the value of the @type property in all the nodes \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029
      ],
      "excerpt": " \"prop\":\"value\"} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8145379147545911
      ],
      "excerpt": "The body of the rule must be a JSON object with a single key with the name of the property to transform and a value containing the array of function to apply to the initial value. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8520106166548524
      ],
      "excerpt": "'ns:append': accepts an object with prefixes as keys and a property name or array of property names as value. When applied, this function prepends the prefix to all the selected property names. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8348240828164991
      ],
      "excerpt": "When an array of functions is declared, each function application will be applied consequtively, receiving as parameters the argument defined in the function application, the output of the previous function application in the array and the selected node where the tansformation is being applied. The first function in the chain will receive null as the input value. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8026341714888262
      ],
      "excerpt": "One main problem when applying transformations with null properties. Some object in the input data may have optional values, or the application of a function may return an unexpected null value. The library can react to this events in two different ways depending of the value of the 'behaviour' property. If the 'behaviour' property is set to the value 'loose', exceptions in the application of function chains will be catched and a null value will be returned as the result of the function chain application. Additionally, after transforming a node, properties with null values will be removed, including the '@id' property. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8361313814995756,
        0.8279957191351284
      ],
      "excerpt": "    // declaration of the 'test:f' function \n    'test:f': 'function(argument, input, obj){ return \"the \"+argument+\" \"+input }' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "              'name': [{'f:valueof':'name'}, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8617706147021065
      ],
      "excerpt": "                       {'test:f': 'user name:'}] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8488411244225242
      ],
      "excerpt": "var jsonld = macro.toJSONLD(); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8335062385292454,
        0.8337400684281382
      ],
      "excerpt": "var rdfstore = require('rdfstore'); \nmacro.fromJSONLD(rdfstore, jsonld, function(err, macro){ \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/antoniogarrote/json-ld-macros/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "JavaScript",
      "HTML",
      "CSS",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Copyright (C) 2016 by Marijn Haverbeke &#109;&#97;&#114;&#105;&#106;&#110;&#104;&#64;&#103;&#109;&#97;&#105;&#108;&#46;&#99;&#111;&#109; and others\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "JSON-LD Macros",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "json-ld-macros",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "antoniogarrote",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/antoniogarrote/json-ld-macros/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 63,
      "date": "Mon, 20 Dec 2021 22:49:56 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "``` javascript\n\n    // requires the library\n    var macros = require('jsonld_macros');\n\n    macros.registerAPI({\n\n      // URI template for a remote service (Github Users' API)\n      \"https://api.github.com/users/{username}\":\n\n      {\"$\": // selects the root node / list of root nodes of the JSON document\n\n        { // a JSON-LD context that will be added to all the slected nodes\n          \"@context\": {\"data\":\"http://socialrdf.org/github/datafeed\"},\n          // removes the meta property and associated value from the selected nodes\n          \"@remove\":\"meta\"},\n\n        \"$.data\": // selects the root node/data objects\n\n         {// by default, all properties in the selected nodes will have the 'gh' prefix\n          \"@ns\": {\"ns:default\": \"gh\"},\n          // a JSON-LD context declaration that will be added to all the selecte nodes\n          \"@context\": {\"gh\":\"http://socialrdf.org/github/\"},\n          // a JSON-LD type declaration that will be added to all the selecte nodes\n          \"@type\": \"http://socialrdf.org/github/User\"}}\n    });\n\n    // We retrieve the data using whatever transport layer is\n    // available: AJAX, TCP sockets...\n    var resourceURI = \"https://api.github.com/users/1\";\n    retrieveRemoteData(resourceURI, function(data){\n\n       // we can apply the transformation to the retrieved data\n       // passing the URI used to retrieve the data\n       // as a selector for the transformation\n       var jsonld = macros.resolve(resourceURI, data);\n    });\n\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}