{
  "citation": [
    {
      "confidence": [
        0.9361985949379731
      ],
      "excerpt": "MyPersonView.type = Person // => http://xmlns.com/foaf/0.1/Person \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9774894434709585
      ],
      "excerpt": "  open: ns('open'), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8840467439138965
      ],
      "excerpt": "      popup.open, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8840467439138965
      ],
      "excerpt": "        popup.open, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8840467439138965
      ],
      "excerpt": "        popup.open, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8840467439138965
      ],
      "excerpt": "static mapDataToProps = [popup.resource, popup.open]; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8348362997093185,
        0.9590313335857461
      ],
      "excerpt": "    const { open, resource } = this.props; \nif (open.value === 'false') { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9156566588472104
      ],
      "excerpt": "  &lt;li&gt; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9156566588472104
      ],
      "excerpt": "  &lt;/li&gt; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "    schema.Person, \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rescribet/link-redux",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-12-20T09:24:02Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-02T02:48:43Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9524182829196509
      ],
      "excerpt": "A Link to the Web \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "RDF data fetching & parsing \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.923602102617551,
        0.8948328014987841,
        0.9169068897850193
      ],
      "excerpt": "Rule-based inference engine to determine which View is suitable \nActions / Data manipulation (in a flux pattern, like redux, but with server-side actions) \nSay we want to render this bit of linked data: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9728741613309145
      ],
      "excerpt": "In our app we create a Resource to render our subject: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9220641309198925
      ],
      "excerpt": "// We don't have to type out the URLs for the ontologies \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8906994086448023
      ],
      "excerpt": "// Here we tell Link that this component is suited for rendering a foaf:Person \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8438237763261638
      ],
      "excerpt": "// The component is registered as a View in Link \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8544372601843665,
        0.9860825060275755,
        0.8490037945672047,
        0.9788556050650237
      ],
      "excerpt": "First off, only very basic knowledge of the underlying technologies (RDF and REST) is required to build \napplications with Link. It'll provide you with the benefits of hypermedia, while abstracting some of \nthe difficulties. \nLink was designed to work with RDF and REST (including HATEOAS) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8187305014581719,
        0.9848828098549529,
        0.8961618143882211,
        0.905713681268503,
        0.9342495492272173
      ],
      "excerpt": "due to the open world assumption \ncausing us to handle uncertainty about the shape of the data that we're going to get from the server. \nThough it's easy to just render a table and call it a day, to create rich, interactive applications, \nwe have to make some assumptions about the data, but when building a Link application, you should \nstill be able to render data from a variety of data sources while being able to tune UX for the most \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9442907520404962,
        0.8878076272248532,
        0.9413781206654119
      ],
      "excerpt": "Due to those constraints, part of the application logic resides in the views themselves. There are \ndifferent types of views to handle the different use cases which the constraints impose. \nThink of these as UI API definitions. These should set the UI limits of a component, and the general \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8738023712644027
      ],
      "excerpt": "To identify the different topologies in your app. Take a look at your design and identify the places \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8923869350391002
      ],
      "excerpt": " * Define an IRI for the topology. It's handy to use the app namespace since the topology is probably \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9274554324206339
      ],
      "excerpt": "* This component is to set the topology. In the real world, it'd be used in a component which \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9147460368855939
      ],
      "excerpt": "* expected by components rendered under this topology. In this case a close method for closing the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8877732031949777
      ],
      "excerpt": "// Set the topology for all children to the newly defined. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8507413591906793
      ],
      "excerpt": "// The render method is completely optional \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8715092366968609
      ],
      "excerpt": "    // Since a popup always renders a new resource, we'll override rendering to set a new \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9023917989143346
      ],
      "excerpt": "// This property also works out of the box, defaulting to a div. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.813232140269123
      ],
      "excerpt": "Mounting this component in the tree will cause any child to be resolved in the new topology. Be sure \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8980363537021211,
        0.8624869483448371
      ],
      "excerpt": "To tell link to fetch and render a resource, just mount a Resource anywhere \nin your react app. Because the component will try to render every IRI passed, a good place for the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8609946313876983
      ],
      "excerpt": "    * We use Grid here to communicate to the resolved views what their environment is, based on \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8616351362441258
      ],
      "excerpt": "    * The {Resource} component expects subject to be an instance of rdflib/NamedNode. Obtain one by either: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9090724859699878
      ],
      "excerpt": "    * NOTE: Using new NamedNode() from rdflib WILL NOT WORK(!) due to implementation details. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9532533785252085
      ],
      "excerpt": "        <h1>Our team:</h1> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.808439364125417,
        0.9278182580467746
      ],
      "excerpt": "So all the underlying logic of managing API calls, data fetching, views selecting etc will be \nhandled by the Resource component. To show a loading indicator (or an error) for \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9920691076099245
      ],
      "excerpt": "Property renderers are akin to resource renderers, but they work with one or more properties of a \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8368382045061148,
        0.8266826869890819
      ],
      "excerpt": "* When wanting to separate the main resource implementation from property rendering to keep individual components clean. \n* When the range (value) of a property isn't known yet - e.g. it could be a number or an entire nested resource. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8338104580498997
      ],
      "excerpt": "automatically mount a Resource so the nested resource is rendered. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9206259745391732
      ],
      "excerpt": "    // The label defines which properties we like to render. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9856989974384812
      ],
      "excerpt": "    // The value of the property is passed to property renderers as linkedProp, note that it is a \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9349824047056683
      ],
      "excerpt": "So far we have seen how to render the data, but applications wouldn't be complete without \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8093542425105432
      ],
      "excerpt": "Traditionally web applications differentiate between actions which modify client state (e.g. showing \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.933106116708539,
        0.823163417444905,
        0.9277840950699712,
        0.9046521395499714
      ],
      "excerpt": "characterised by the URL to send the request to, together with some optional request body. The \nclient side is more diverse (i.e. using events, passing callbacks, redux's action system, etc.) but \nlink re-uses the server-side interface for modifying client state as well, all actions written with \nthe tools link provides can be executed by providing the system with an URL and an optional body. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9846268578880383
      ],
      "excerpt": "data and client state with the same tools, as well as allowing the the logic which is needed to \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9516389659424448,
        0.8486644476735701
      ],
      "excerpt": "with the changes the server requested (see the the \nhypermedia API documentation for more \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.868471870906092
      ],
      "excerpt": "The exec method is a middleware function with a handler for doing http requests (via schema:Action \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8122343469898228
      ],
      "excerpt": "URLs or to override the default behaviour. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9379662557077421,
        0.9686383117267932,
        0.935499651698279
      ],
      "excerpt": "in the front-end (e.g. trigger some popup to perform a required action). This is what sets it apart \nfrom just using redux for state management, since it allows the front-end to execute actions on far \nmore data than a client device could calculate, resulting in more powerful experiences without \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8663239748054488,
        0.9855215904487011
      ],
      "excerpt": "The following example implements the state management for a popup, the processDelta calls are used \nto change the state. The syntax is somewhat verbose for middleware this size, but the overhead is \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9448042142962334
      ],
      "excerpt": "// Define a new namespace for our popup system \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8774910085352785
      ],
      "excerpt": "// Define some classes, properties, and individuals within our ontology. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8234330667954427
      ],
      "excerpt": "After setting up, you can wrap your favorite popup library with the link method to retrieve the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9452748775301625
      ],
      "excerpt": "//  the `topology` prop on Resource, but consistency is maintainability. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8247570616891818,
        0.9046526477572497
      ],
      "excerpt": "  * This function automatically wraps your component with the link method to bind your component \n  * to store data (like connect in redux). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9166003819338893
      ],
      "excerpt": "    // The subject prop is always given to rendered views so it can link to itself. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8299367253583388
      ],
      "excerpt": "    &lt;Link to={subject}&gt; // Not to be confused with the {link} HOC. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8860722130066397,
        0.981990825713811,
        0.8197193819748084
      ],
      "excerpt": " * We'll bind all known topologies to this component, rather than the larger components since it has \n * less chance to overflow out of bounds. \n * We can use undefined here as a shortcut for the default as well (bound to the Thing component). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8821447229654105
      ],
      "excerpt": "// We want to show whether it's the users' birthday \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.945867796297797
      ],
      "excerpt": "  * We need to wrap our component with the register call to make them acceptable for {LinkedRenderStore::registerRenderer} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.900424343782689
      ],
      "excerpt": "  * The only thing register does is mapping the component and static properties onto the underlying \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8203909210424465
      ],
      "excerpt": "Register the views so link can resolve them when the data comes in; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9353923814958394
      ],
      "excerpt": "* Notice the spread (...) operator, this is because the (default) export of ./views returns an \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9153300387742331
      ],
      "excerpt": "Now that we have views, lets enable link in the React tree with our LinkedRenderStore instance: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.87264709356992
      ],
      "excerpt": "// Either with react-router, or without and just take the current location (but listen for pushstate). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8798826609015459
      ],
      "excerpt": "resources dynamically, especially handy when the range of the statement can be multiple types and \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8135767414711635
      ],
      "excerpt": "  // Set the type to Literal to render individual values. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8685623161535612
      ],
      "excerpt": "  * The property field now acts to resolve the data type rather than the predicate. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9494038803822107
      ],
      "excerpt": "for this, since we work around the default RDFlib.js NamedNode constructor for performance reasons. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8639085646235665
      ],
      "excerpt": "an array of terms as well: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Linked Data Rendering for humans with React",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fletcher91/link-redux/releases",
    "technique": "GitHub API"
  },
  "faq": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Since all data fetching is handled at deeper layers, link also exposes some API's to render different\nviews when an error occurred or when component is loading. Just register a component under\n`ll.ErrorResource` for error handling and `ll.LoadingResource` for loading states\nrespectively. Different views can be registered for different topologies as well.\n\nThe view for when no view could be found can be registered on the type `ll.NoView`\n\n```JSX Harmony\nclass ThingNavigation extends React.PureComponent {\n  // The magical type to catch errors.\n  static type = ll.ErrorResource;\n\n  // We can switch views so it renders with appropriate formatting for its location.\n  static topology = app('navigation');\n\n  render() {\n    // Components rendered when an error occur have some additional props.\n    const {\n      // The error caught (if any) if this was caused by an error boundary rather than a fetch error.\n      caughtError,\n      // The request status of the underlying resource, see {LinkedDataApi#:getStatus}.\n      linkRequestStatus,\n      // Call to clear the {subject}'s data and fetch the resource again.\n      reloadLinkedObject,\n      // A function to reset the error state of the LRC. Useful in conjecture with reloadLinkedObject.\n      reset,\n      // The IRI of the resource being rendered.\n      subject,\n     } = this.props;\n\n    return (\n      <li onClick={}>Something went wrong, click to try again</li>\n    );\n  }\n}\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Mon, 20 Dec 2021 17:50:24 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/rescribet/link-redux/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "rescribet/link-redux",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Create a helper to set up an instance of [the `LinkedRenderStore`](https://rescribet.github.io/link-lib/classes/linkedrenderstore.html)\nto use in your application;\n```javascript\n// src/LRS.js\nimport { createNS } from '@ontologies/core';\nimport { createStore, DEFAULT_TOPOLOGY } from 'link-lib';\nimport { FRONTEND_URL } from './config';\n\n/**\n* We have a helper function to initialize the store, the first param is config (default should\n* suffice), the second is an array of middleware, the default terminating middleware calls the\n* schema:Action executor [`LRS#:execActionByIRI`](https://github.com/rescribet/link-lib/wiki/Hypermedia-API).\n*/\nconst LRS = createStore({}, [\n  /**\n  * This middleware logs all actions passed.\n  * _lrs The live store once initialized.\n  * next The next middleware, not calling this will terminate the middleware flow for that action.\n  * (a, o) The action IRI and an unspecified payload respectively.\n  */\n  (lrs) => next => (a, o) => {\n      console.log(`Link action '${a}' passed down`);\n      return next(a, o);\n    },\n]);\n\n/**\n * If the app is programmed for a specific backend, it's useful to add it to the namespaces so that\n * it can be used for (hard-coded) entry points.\n */\nconst api = createNS(FRONTEND_URL);\n\n/**\n * Set up your own namespace for (virtual) app-specific properties (this might be the same as the\n * api). These SHOULD NOT be shared and have app-specific semantics.\n *\n * Virtual properties are useful for creating behaviour separate from data-source, while still using\n * the same interface.\n */\nconst app = createNS(FRONTEND_URL);\n\n/**\n* It's useful to have a central source of valid application topologies. This also provides a\n* location to document the intended usage.\n*\n* A common issue when beginning with link is forgetting to set the correct topology(ies), so\n* defaulting to registering views under all topologies can prevent a lot of headaches. Mind that\n* over-registering might cause the wrong view to be rendered rather than none at all.\n*/\nexport const allTopologies = [\n  // Generally used to mean that the resource is the main content on the page.\n  DEFAULT_TOPOLOGY,\n  // The resource/property is rendered within the navigation menu (e.g. as a `li`)\n  app('navigation'),\n  // The resource/prop is rendered in a table (e.g. as a single row within the table).\n  app('table'),\n  // The resource/prop is rendered in a row (e.g. as a single cell within the row).\n  app('row'),\n  // The resource/prop is rendered in a cell (e.g. as a raw value or some small representation).\n  app('cell'),\n];\n\n/**\n* Include this function so you can't forget a topology by registering all but those explicitly\n* handled by other components.\n*/\nexport function allTopologiesExcept(...topologies) {\n  const filtered = allTopologies.slice();\n  topologies.forEach((t) => {\n    const i = filtered.indexOf(t);\n    if (i !== -1) {\n      filtered.splice(i, 1);\n    }\n  });\n\n  return filtered;\n}\n\nexport default LRS;\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8381126884021689
      ],
      "excerpt": "  <Resource subject=\"https://example.com/somePerson\" /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "const MyPersonView = ({ birthPlace, name }) => ( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8103467476835099
      ],
      "excerpt": "   name: schema.name \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8057405528107305
      ],
      "excerpt": "That's it! There's a lot more you can do with Link, though. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8823018186724959
      ],
      "excerpt": "// It's possible to set a class name on the wrapping component. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9768631041432257
      ],
      "excerpt": "    * - Using namedNodeByIRI to get one from a string \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8103467476835099
      ],
      "excerpt": "const nameTypes = [schema.name, foaf.name]; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8157630834371058
      ],
      "excerpt": "resources) pre-installed. You can add your own handlers to the stack to implement behaviour for other \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8732089505944296
      ],
      "excerpt": "const ns = createNS(\"https://mySite.com/ns/popup#:\"); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8025761062586566
      ],
      "excerpt": "import { replace } from '@rdfdev/delta';  // See https://github.com/argu-co/linked-delta for the exact meaning \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8246106883382133
      ],
      "excerpt": "  // Make the namespace available throughout the app \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "      {name} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521,
        0.8661176197453521
      ],
      "excerpt": "const PersonName = ({ birthDay, name }) => { \n  const birthdayIcon = isToday(birthDay) ? <FontAwesome name=\"birthday-cake\" /> : null; \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.842257205177573
      ],
      "excerpt": "import * as schema from \"@ontologies/schema\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "const MyPersonView = ({ birthPlace, name }) => ( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9189294123074008
      ],
      "excerpt": "    <p>{name.value}</p> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8608831904904861
      ],
      "excerpt": "   name: schema.name \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8981524067900627
      ],
      "excerpt": "        <Grid> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8981524067900627
      ],
      "excerpt": "        </Grid> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8019725228711271
      ],
      "excerpt": "* When a range of similar properties is appropriate in a location, but only one should be displayed - e.g. <schema:name>, <rdfs:label>, <foaf:name> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8796325398080971,
        0.842257205177573
      ],
      "excerpt": "import * as foaf from '@ontologies/foaf'; \nimport * as schema from '@ontologies/schema'; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8608831904904861
      ],
      "excerpt": "const nameTypes = [schema.name, foaf.name]; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8487237883141764
      ],
      "excerpt": "        <Property label={[schema.name, foaf.name]} /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8101283149170273
      ],
      "excerpt": "// src/ontology/popup.js \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8101283149170273
      ],
      "excerpt": "// src/middleware/popup.js \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8796325398080971
      ],
      "excerpt": "import * as rdfx from '@ontologies/rdf'; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "import popup from '../ontology/popup'; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "        rdf.literal(true), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8403280940174692
      ],
      "excerpt": "    if (!iri.value.startsWith(popup().value)) { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8803146356249767
      ],
      "excerpt": "if (iri.value.startsWith(iri.value.startsWith(popup.show.value))) { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "import popup from '../ontology/popup'; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8610160884187209
      ],
      "excerpt": "if (open.value === 'false') { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.842257205177573
      ],
      "excerpt": "import * as schema from '@ontologies/schema'; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "import { NS } from './LRS'; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.846410580010018
      ],
      "excerpt": "    schema.text, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8156205411009048
      ],
      "excerpt": "static mapDataToProps = [schema.name]; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "      {name} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029
      ],
      "excerpt": "const ThingName = ({ linkedProp }) => <h1>{linkedProp.value}</h1>; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8267593101705825
      ],
      "excerpt": "ThingName.property = schema.name; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "const PersonName = ({ birthDay, name }) => { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8149718276572184
      ],
      "excerpt": "return <h1>{name}{birthdayIcon}</h1>; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.805431325776137
      ],
      "excerpt": "      [schema.name, schema.birthDate], \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8417802329994689
      ],
      "excerpt": "    schema.name, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "import LRS from './LRS'; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "import LRS from './LRS'; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029
      ],
      "excerpt": "  <RenderStoreProvider value={LRS}> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8162314729291039
      ],
      "excerpt": "    const literalVal = Number(this.props.linkedProp.value) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8227367111297851
      ],
      "excerpt": "an array of terms as well: \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/rescribet/link-redux/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "TypeScript",
      "JavaScript"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Link-Redux",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "link-redux",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "rescribet",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rescribet/link-redux/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "rescribet",
        "body": "- Deprecate HOCs  9605d52\r\n- Bump React, reset lockfile  097e865\r\n- Bump link to 2.1.1  115c716\r\n- Soft fail when passing non-term to useAction  cf825e6\r\n- Test against node 16  317dfca\r\n- Update links  4d9e218\r\n\r\nhttps://github.com/rescribet/link-redux/compare/v2.1.1...v2.1.2",
        "dateCreated": "2021-09-23T18:56:09Z",
        "datePublished": "2021-09-23T18:56:32Z",
        "html_url": "https://github.com/rescribet/link-redux/releases/tag/v2.1.2",
        "name": "",
        "tag_name": "v2.1.2",
        "tarball_url": "https://api.github.com/repos/rescribet/link-redux/tarball/v2.1.2",
        "url": "https://api.github.com/repos/rescribet/link-redux/releases/50158626",
        "zipball_url": "https://api.github.com/repos/rescribet/link-redux/zipball/v2.1.2"
      },
      {
        "authorType": "User",
        "author_name": "rescribet",
        "body": "- Correctly set new targets in useSubject  417a920\r\n\r\nhttps://github.com/fletcher91/link-redux/compare/v2.1.0...v2.1.1",
        "dateCreated": "2021-07-28T12:25:50Z",
        "datePublished": "2021-07-28T12:26:14Z",
        "html_url": "https://github.com/rescribet/link-redux/releases/tag/v2.1.1",
        "name": "",
        "tag_name": "v2.1.1",
        "tarball_url": "https://api.github.com/repos/rescribet/link-redux/tarball/v2.1.1",
        "url": "https://api.github.com/repos/rescribet/link-redux/releases/46900916",
        "zipball_url": "https://api.github.com/repos/rescribet/link-redux/zipball/v2.1.1"
      },
      {
        "authorType": "User",
        "author_name": "rescribet",
        "body": "- Let DSL keep individual property returntype typings  77a31ee\r\n- Upgrade typescript  dcf861b\r\n- Add useAction hook  1d94500\r\n- Let useDig fetch intermediate nodes if not present  380164d\r\n- Allow multiple properties in useProperty  62e35c1\r\n- Update when LRS changes  c443189\r\n- Add useDig, useFindSubject, useStatus, useTryEntity  0452814\r\n- Add useTopology, useSubject hooks  3024f46\r\n- Improve elementType types  1d5ee3c\r\n- Correct import  1db1e3f\r\n- Use @ontologies packages v2 rc  d277751\r\n- Make LRS api type generic  83f6784\r\n- Subject is not an optional property  356e179\r\n- Memoise callbacks  4494c45\r\n\r\nhttps://github.com/fletcher91/link-redux/compare/v2.0.0...v2.1.0",
        "dateCreated": "2021-07-16T13:39:50Z",
        "datePublished": "2021-07-16T13:41:28Z",
        "html_url": "https://github.com/rescribet/link-redux/releases/tag/v2.1.0",
        "name": "",
        "tag_name": "v2.1.0",
        "tarball_url": "https://api.github.com/repos/rescribet/link-redux/tarball/v2.1.0",
        "url": "https://api.github.com/repos/rescribet/link-redux/releases/46319752",
        "zipball_url": "https://api.github.com/repos/rescribet/link-redux/zipball/v2.1.0"
      },
      {
        "authorType": "User",
        "author_name": "rescribet",
        "body": "- Functional & immutable support\n- Default typing\n- Status code support\n- Many optimizations\n",
        "dateCreated": "2017-01-26T15:56:45Z",
        "datePublished": "2017-01-26T15:58:09Z",
        "html_url": "https://github.com/rescribet/link-redux/releases/tag/v0.2.0",
        "name": "",
        "tag_name": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/rescribet/link-redux/tarball/v0.2.0",
        "url": "https://api.github.com/repos/rescribet/link-redux/releases/5276068",
        "zipball_url": "https://api.github.com/repos/rescribet/link-redux/zipball/v0.2.0"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 25,
      "date": "Mon, 20 Dec 2021 17:50:24 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "linked-data",
      "rdf",
      "open-data",
      "react",
      "link-redux",
      "hypermedia"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Embedding Linked Data into your existing app\n- [SOLID](https://github.com/solid/solid) apps\n- Multi-domain linked-data browsers\n- Full Rest-in-Rest hypermedia systems\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "`npm install link-lib link-redux rdflib` V `yarn add link-lib link-redux rdflib`\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "- See the [TODO app](https://rescribet.github.io/link-redux-todo/#/) for a live example and [the source](https://github.com/rescribet/link-redux-todo) for the implementation. Mind that it isn't connected to a back-end, so it's only a demo for the view rendering mechanism.\n- [ori-search](https://github.com/ontola/ori-search/) uses Link to render Dutch Government meetings.\n- [mash](https://github.com/ontola/mash) is a databrowser, compatible with SOLID\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "It should render (and fetch) resources passed as `subject` to a `Resource` (The\ntype of `subject` MUST be a NamedNode instance, e.g. `api('todos/5')`).\n\nNote that each `Resource` also acts as a [React error boundary](https://reactjs.org/docs/error-boundaries.html),\nso errors should automatically be contained rather than crash your entire app.\n\n",
      "technique": "Header extraction"
    }
  ]
}