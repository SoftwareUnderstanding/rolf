{
  "citation": [
    {
      "confidence": [
        0.842790493796475
      ],
      "excerpt": "Weaviate introduction video \n",
      "technique": "Supervised classification"
    }
  ],
  "codeOfConduct": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/CODE_OF_CONDUCT.md",
    "technique": "File Exploration"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/semi-technologies/weaviate",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-03-30T15:03:17Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-19T17:21:53Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**Weaviate in a nutshell**: Weaviate is a vector search engine and vector database. Weaviate uses machine learning to vectorize and store data, and to find answers to natural language queries. With Weaviate you can also bring your custom ML models to production scale.\n\n**Weaviate in detail**: Weaviate is a low-latency vector search engine with out-of-the-box support for different media types (text, images, etc.). It offers Semantic Search, Question-Answer-Extraction, Classification, Customizable Models (PyTorch/TensorFlow/Keras), and more. Built from scratch in Go, Weaviate stores both objects and vectors, allowing for combining vector search with structured filtering with the fault-tolerance of a cloud-native database, all accessible through GraphQL, REST, and various language clients.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.935077235434822
      ],
      "excerpt": "Weaviate makes it easy to use state-of-the-art ML models while giving you the scalability, ease of use, safety and cost-effectiveness of a purpose-built vector database. Most notably: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336358465283469
      ],
      "excerpt": "   Weaviate typically performs a 10-NN neighbor search out of millions of objects in considerably less than 100ms. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8151440336440269,
        0.9703526637739336
      ],
      "excerpt": "Any media type with Weaviate Modules<br> \n  Use State-of-the-Art ML model inference (e.g. Transformers) for Text, Images, etc. at search and query time to let Weaviate manage the process of vectorizing your data for your - or import your own vectors. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9382511258442207,
        0.8388585991892188
      ],
      "excerpt": "  Weaviate allows for efficient combined vector and scalar searches, e.g \u201carticles related to the COVID 19 pandemic published within the past 7 days\u201d. Weaviate stores both your objects and the vectors and make sure the retrieval of both is always efficient. There is no need for a third party object storage.  \nReal-time and persistent<br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9213505835476187,
        0.8192964241409787,
        0.9098870711487395
      ],
      "excerpt": "  Very large datasets do not need to be kept entirely in memory in Weaviate. At the same time available memory can be used to increase the speed of queries. This allows for a conscious speed/cost trade-off to suit every use case. \nGraph-like connections between objects<br> \n  Make arbitrary connections between your objects in a graph-like fashion to resemble real-life connections between your data points. Traverse those connections using GraphQL. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8463952358718796
      ],
      "excerpt": "A sub-50ms neural search with DistilBERT and Weaviate (Towards Datascience) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Weaviate is a cloud-native, modular, real-time vector search engine",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You can find detailed documentation in the [developers section of our website](https://www.semi.technology/developers/weaviate/current/) or directly go to one of the docs using the links in the list below.\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/creativesoftwarefdn/weaviate/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 103,
      "date": "Mon, 20 Dec 2021 19:07:53 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/semi-technologies/weaviate/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "semi-technologies/weaviate",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/weaviate-entrypoint.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/test/run.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/test/integration/run.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/ci/push_docker.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/genesis/tools/gen-code-from-swagger.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/tools/download_latest_contextionary.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/tools/prepare_release.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/tools/create-license-dependency-file.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/tools/gen-code-from-swagger.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/tools/download-docker-compose-deps.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/tools/dev/restart_dev_environment.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/tools/dev/run_test_server.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/tools/dev/telemetry_mock_api.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/tools/dev/vector_search.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/tools/dev/genesis_fake.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/tools/dev/run_dev_server.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/tools/dev/remote_weaviate_fake.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/tools/dev/run_dev_server_no_network.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/tools/dev/flakyness.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/tools/dev/keycloak/get_token.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/tools/dev/keycloak/import_users.sh",
      "https://raw.githubusercontent.com/creativesoftwarefdn/weaviate/master/tools/test/run_ci_server.sh"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/semi-technologies/weaviate/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Go",
      "Shell",
      "Assembly",
      "Dockerfile",
      "Python",
      "JavaScript"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "BSD 3-Clause \"New\" or \"Revised\" License",
      "url": "https://api.github.com/licenses/bsd-3-clause"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Copyright (c) 2020-2021, SeMI Technologies B.V.\\nAll rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met:\\n\\n1. Redistributions of source code must retain the above copyright notice, this\\n   list of conditions and the following disclaimer.\\n\\n2. Redistributions in binary form must reproduce the above copyright notice,\\n   this list of conditions and the following disclaimer in the documentation\\n   and/or other materials provided with the distribution.\\n\\n3. Neither the name of the copyright holder nor the names of its\\n   contributors may be used to endorse or promote products derived from\\n   this software without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# The ML-first vector search engine",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "weaviate",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "semi-technologies",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/semi-technologies/weaviate/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "## Breaking Changes\r\n*none*\r\n\r\n## New Features\r\n*none*\r\n\r\n## Fixes\r\n* ## Allow running \"conflicting\" modules in the same setup (#1744)\r\n  Prior to this release, Weaviate would not start up if multiple modules would try to provide the same search operators, such as `nearText`. For example `text2vec-contextionary` and `text2vec-transformers` could not run in the same setup. The reason for this was that `Explore{}` which would search across classes would not be able to handle incompatible vector spaces. This release makes sure that the provided search operator belongs to the configured vectorizer. In turn, cross-class searching across incompatible vector spaces such as using `Explore {}` will be deactivated if conflicting modules are present.\r\n",
        "dateCreated": "2021-12-13T15:36:53Z",
        "datePublished": "2021-12-13T15:51:13Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.9.1-rc.0",
        "name": "[Pre-Release] v1.9.1-rc.0",
        "tag_name": "v1.9.1-rc.0",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.9.1-rc.0",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/55196695",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.9.1-rc.0"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "## Breaking Changes\r\n*none*\r\n\r\n## New Features\r\n* ### First Multi-modal module: CLIP Module (#1756, #1766)\r\n  This release introduces the `multi2vec-clip` module, a module that allows for multi-modal vectorization within a single vector space. A class can have `image` or `text` fields or both. Similarly, the module provides both a `nearText` and a `nearImage` search and allows for various search combinations, such as text-search on image-only content and various other combinations.\r\n  \r\n  #### How to use\r\n  \r\n  The following is a valid payload for a class that vectorizes both images and text fields:\r\n  ```json\r\n  {\r\n      \"class\": \"ClipExample\",\r\n      \"moduleConfig\": {\r\n          \"multi2vec-clip\": {\r\n              \"imageFields\": [\r\n                  \"image\"\r\n              ],\r\n              \"textFields\": [\r\n                  \"name\"\r\n              ],\r\n              \"weights\": {\r\n                \"textFields\": [0.7],\r\n                \"imageFields\": [0.3]\r\n              }\r\n          }\r\n      },\r\n      \"vectorIndexType\": \"hnsw\",\r\n      \"vectorizer\": \"multi2vec-clip\",\r\n      \"properties\": [\r\n        {\r\n          \"dataType\": [\r\n            \"string\"\r\n          ],\r\n          \"name\": \"name\"\r\n        },\r\n        {\r\n          \"dataType\": [\r\n              \"blob\"\r\n          ],\r\n          \"name\": \"image\"\r\n        }\r\n      ]\r\n    }\r\n    ```\r\n    \r\n  Note that:\r\n     - `imageFields` and `textFields` in `moduleConfig.multi2vec-clip` do not both need to be set. However at least one of both must be set.\r\n     - `weights` in `moduleConfig.multi2vec-clip` is optional. If only a single property the property takes all the weight. If multiple properties exist and no weights are specified, the properties are equal-weighted.\r\n\r\n  You can then import data objects for the class as usual. Fill the `text` or `string` fields with text and/or fill the `blob` fields with a base64-encoded image.\r\n\r\n  #### Limitations\r\n  * As of `v1.9.0` the module requires explicit creation of a class. If you rely on auto-schema to create the class for you, it will be missing the required configuration about which fields should be vectorized. This will be addressed in a future release.\r\n\r\n## Fixes\r\n* fix an error where deleting a class with `geoCoordinates` could lead to a panic due to missing cleanup (#1730)\r\n* fix an issue where an error in a module would not be forwarded to the user (#1754)\r\n* fix an issue where a class could not be deleted on some file system (e.g. AWS EFS) (#1757)\r\n\r\n",
        "dateCreated": "2021-12-10T15:37:09Z",
        "datePublished": "2021-12-10T16:39:20Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.9.0",
        "name": "v1.9.0 - CLIP Module, Various Bugfixes",
        "tag_name": "v1.9.0",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.9.0",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/55058579",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.9.0"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "# Migration Notice\r\n\r\nVersion `v1.8.0` introduces multi-shard indices and horizontal scaling. As a result the dataset needs to be migrated. This migration is performed automatically - without user interaction - when first starting up with Weaviate version `v1.8.0`. However, it cannot be reversed. We, therefore, recommend carefully reading the following migration notes and making a case-by-case decision about the best upgrade path for your needs.\r\n\r\n### Why is a data migration necessary?\r\n\r\nPrior to `v1.8.0` Weaviate did not support multi-shard indices. The feature was already planned, therefore data was already contained in a single shard with a fixed name. A migration is necessary to move the data from a single fixed shard into a multi-shard setup. The amount of shards is not changed. When you run\r\n`v1.8.0` on a dataset the following steps happen automatically:\r\n\r\n* Weaviate discovers the missing sharding configuration for your classes and fills it with the default values\r\n* When shards start-up and they do not exist on disk, but a shard with a fixed\r\n  name from `v1.7.x` exists, Weaviate automatically recognizes that a migration\r\n  is necessary and moves the data on disk\r\n* When Weaviate is up and running the data has been migrated.\r\n\r\n**Important Notice:** As part of the migration Weaviate will assign the shard to the (only) node available in the cluster. You need to make sure that this node has a stable hostname. If you run on Kubernetes, hostnames are stable (e.g. `weaviate-0` for the first node). However with `docker-compose` hostnames default to the id of the container. If you remove your containers (e.g.  `docker-compose down`) and start them up again, the hostname will have changed.  This will lead to errors where Weaviate mentions that it cannot find the node that the shard belongs to. The node sending the error message is the node that owns the shard itself, but it cannot recognize it, since its own name has changed.\r\n\r\nTo remedy this, you can set a stable hostname **before starting up with v1.8.0** by setting the env var `CLUSTER_HOSTNAME=node1`. The actual name does not matter, as long as it's stable.\r\n\r\nIf you forgot to set a stable hostname and are now running into the error mentioned above, you can still explicitly set the hostname that was used before which you can derive from the error message.\r\n\r\nExample:\r\n\r\nIf you see the error message `\"shard Knuw6a360eCY: resolve node name \\\"5b6030dbf9ea\\\" to host\"`, you can make Weaviate usable again, by setting `5b6030dbf9ea` as the host name: `CLUSTER_HOSTNAME=5b6030dbf9ea`.\r\n\r\n### Should you upgrade or reimport?\r\n\r\nPlease note that besides new features, `v1.8.0` also contains a large collection of bugfixes. Some of those bugs also affected how the HNSW index was written to disk. Therefore it cannot be ruled out that the index on disk has a subpar quality compared to a freshly built index in version `v1.8.0`.  Therefore, if you can import using a script, etc, we generally recommend starting with a fresh `v1.8.0` setup and reimporting instead of migrating.\r\n\r\n### Is downgrading possible after upgrading?\r\n\r\nNote that the data migration which happens at the first startup of v1.8.0 is not automatically reversible. If you plan on downgrading to `v1.7.x` again after upgrading, you must explicitly create a backup of the state prior to upgrading.\r\n\r\n# Changelog\r\n\r\n## Breaking Changes\r\n*none, however see migration notice above*\r\n\r\n## New Features\r\n* ## Horizontal Scalability (#1599, #1600, #1601, #1623, #1622, #1653, #1654, #1655, #1658, #1672, #1667, #1679, #1695)\r\n  The big one! Too big for a small release notes page. Instead, we have written extensive documentation on all things around *Horizontal Scalability*.\r\n  \r\n  Please see:\r\n  \r\n  * [Running Weaviate in a Cluster](https://www.semi.technology/developers/weaviate/current/architecture/cluster.html)\r\n  * [Configure Sharding in Schema for a multi-node setting](https://www.semi.technology/developers/weaviate/current/data-schema/schema-configuration.html#shardingconfig-introduced-in-v180) \r\n  * [Resource Planning](https://www.semi.technology/developers/weaviate/current/architecture/resources.html)\r\n\r\n* ## Improvements for Filtered Vector Search (#1728, #1732)\r\n  See [benchmarks here](https://www.semi.technology/developers/developers/weaviate/current/architecture/prefiltering.html#performance-of-vector-searches-with-cached-filters). The Improvements namely consist of three parts:\r\n  \r\n  * General Performance Improvements through optimized code and better memory management \r\n  * Introduction of a [Flat-Search Cutoff](https://www.semi.technology/developers/developers/weaviate/current/architecture/prefiltering.html#flat-search-cutoff)\r\n  * [An ability to cache portions of the inverted index](https://www.semi.technology/developers/developers/weaviate/current/architecture/prefiltering.html#cachable-filters)\r\n\r\n* ## Pagination #1627 \r\n  Starting with this release search results can now be paged. This feature is available on:\r\n  - List requests (`GET /v1/objects` and GraphQL `Get { Class { } }`)\r\n  - Vector Searches (GraphQL `near<Media>`) and Filter Searches (GraphQL `where: {}`)\r\n  \r\n  ### Usage\r\n  To use pagination, one new parameter is introduced (`offset`) which works in conjunction with the existing `limit` parameter. For example, to list the first ten results, set `limit: 10`. Then, to \"display the second page of 10\", set `offset: 10, limit:10` and so on. E.g. to show the 9th page of 10 results, set `offset:80, limit:10` to effectively display results `81-90`.\r\n  \r\n  To do so in REST, simply append the two parameters as URL params, e.g. `GET /v1/objects?limit=25&offset=75`\r\n  To do so in GraphQL, simply add the two parameters to the class, e.g. `{ Get { MyClassName(limit:25, offset: 75) { ... } } } `\r\n  \r\n  ### Performance and Resource Considerations & Limitations\r\n  The pagination implementation is an offset-based implementation, not a cursor-based implementation. This has the following implications:\r\n  - The cost of retrieving one further page is higher than that of the last. Effectively when searching for search results 91-100, Weaviate will internally retrieve 100 search results and discard results 0-90 before serving them to the user. This effect is amplified if running in a multi-shard setup, where each shard would retrieve 100 results, then the results aggregated and ultimately cut off. So in a 10-shard setup asking for results 91-100 Weavaite will effectively have to retrieve 1000 results (100 per shard) and discard 990 of them before serving. This means high page numbers lead to longer response times and more load on the machine/cluster.\r\n  - Due to the increasing cost of each page outlined above, there is a limit to how many objects can be retrieved using pagination. By default setting the sum of `offset` and `limit` to higher than 10,000 objects, will lead to an error. If you must retrieve more than 10,000 objects, you can increase this limit by setting the environment variable `QUERY_MAXIMUM_RESULTS=<desired-value>`. Warning: Setting this to arbitrarily high values can make the memory consumption of a single query explode and single queries can slow down the entire cluster. We recommend setting this value to the lowest possible value that does not interfere with your users' expectations.\r\n  - The pagination setup is not stateful. If the database state has changed between retrieving two pages there is no guarantee that your pages cover all results. If no writes happened, then pagination can be used to retrieve all possible within the maximum limit. This means asking for a single page of 10,000 objects will lead to the same results overall as asking for 100 pages of 100 results. \r\n\r\n## Fixes\r\n* ## General Performance Improvments around Memory Allocations (#1620)\r\n  Thanks to @cdpierse for his contributions to this issue\r\n* ## Fix behavior that could lead to a crashloop after an unexpected shutdown or crash:\r\n  * Crashloops after unexpected shutdowns #1697 #1698 #1703\r\n  * HNSW integrity compromised after restarts #1701 #1705 \r\n  * Improve ingesting WAL at crash recovery startup #1713\r\n  * Fix an issue where parsing the WAL would lead to the creation of another WAL, thus increasing the effort for recovery if it were to fail again. #1716\r\n  * Fix an issue where a failure during memtable flush may have led to an unparsable disk segment #1725 \r\n  * Ignore zero-length disk segments files. Previously they could block startup. #1726\r\n* ## Fix panic on filters #1750\r\n  Fixes an issue where invalid combinations of prop types and filter types could lead to panics \r\n* ## Other fixes\r\n  * Filter by ID (introduced in 1.7.2) #1708 \r\n  * Use Feature Projection in `text2vec-transformers` module #1572\r\n",
        "dateCreated": "2021-11-30T17:46:23Z",
        "datePublished": "2021-11-30T17:51:10Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.8.0",
        "name": "v1.8.0 - Horizontal Scalability, Sharding, Pagination, Important Fixes",
        "tag_name": "v1.8.0",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.8.0",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/54252351",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.8.0"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "New features compared to the previous rc version:\r\n\r\n* ## Pagination #1627 \r\n  Starting with this release search results can now be paged. This feature is available on:\r\n  - List requests (`GET /v1/objects` and GraphQL `Get { Class { } }`)\r\n  - Vector Searches (GraphQL `near<Media>`) and Filter Searches (GraphQL `where: {}`)\r\n  \r\n  ### Usage\r\n  To use pagination, one new parameter is introduced (`offset`) which works in conjunction with the existing `limit` parameter. For example, to list the first ten results, set `limit: 10`. Then, to \"display the second page of 10\", set `offset: 10, limit:10` and so on. E.g. to show the 9th page of 10 results, set `offset:80, limit:10` to effectively display results `81-90`.\r\n  \r\n  To do so in REST, simply append the two parameters as URL params, e.g. `GET /v1/objects?limit=25&offset=75`\r\n  To do so in GraphQL, simply add the two parameters to the class, e.g. `{ Get { MyClassName(limit:25, offset: 75) { ... } } } `\r\n  \r\n  ### Performance and Resource Considerations & Limitations\r\n  The pagination implementation is an offset-based implementation, not a cursor-based implementation. This has the following implications:\r\n  - The cost of retrieving one further page is higher than that of the last. Effectively when searching for search results 91-100, Weaviate will internally retrieve 100 search results and discard results 0-90 before serving them to the user. This effect is amplified if running in a multi-shard setup, where each shard would retrieve 100 results, then the results aggregated and ultimately cut off. So in a 10-shard setup asking for results 91-100 Weavaite will effectively have to retrieve 1000 results (100 per shard) and discard 990 of them before serving. This means, high page numbers lead to longer response times and more load on the machine/cluster.\r\n  - Due to the increasing cost of each page outlined above, there is a limit to how many objects can be retrieved using pagination. By default setting the sum of `offset` and `limit` to higher than 10,000 objects, will lead to an error. If you must retrieve more than 10,000 objects, you can increase this limit by setting the environment variable `QUERY_MAXIMUM_RESULTS=<desired-value>`. Warning: Setting this to arbitrarily high values can make the memory consumption of a single query explode and single queries can slow down the entire cluster. We recommend setting this value to the lowest possible value that does not interfere with your users' expectations.\r\n  - The pagination setup is not stateful. If the database state has changed between retrieving two pages there is no guarantee that your pages cover all results. If no writes happened, then pagination can be used to retrieve all possible within the maximum limit. This means asking for a single page of 10,000 objects will lead to the same results overall as asking for 100 pages of 100 results. \r\n  \r\n* ## Filtered Vector Search Flat Search Cutoff #1728 #1729 \r\n  As outlined [in this article, you can now configure a switch to a flat search](https://towardsdatascience.com/effects-of-filtered-hnsw-searches-on-recall-and-latency-434becf8041c) when a filtered HNSW search would become too expensive due to the restrictiveness of the filter. ",
        "dateCreated": "2021-11-05T14:23:35Z",
        "datePublished": "2021-11-05T14:24:08Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.8.0-rc.3",
        "name": "[Pre-release] v1.8.0-rc.3 - Pagination",
        "tag_name": "v1.8.0-rc.3",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.8.0-rc.3",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/52788368",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.8.0-rc.3"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "This pre-release adds more fixes with regards to crash recovery:\r\n\r\n* #1713 Improve ingesting WAL at crash recovery startup\r\n* #1716 Fix an issue where parsing the WAL would lead to the creation of another WAL, thus increasing the effort for recovery if it were to fail again. \r\n* #1725 Fix an issue where a failure during memtable flush may have led to an unparsable disk segment\r\n* #1726 Ignore zero-length disk segments files. Previously they could block startup.",
        "dateCreated": "2021-10-18T14:37:52Z",
        "datePublished": "2021-10-18T14:42:37Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.8.0-rc.2",
        "name": "[Pre-release] v1.8.0-rc.2 - More Crashloop fixes",
        "tag_name": "v1.8.0-rc.2",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.8.0-rc.2",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/51546955",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.8.0-rc.2"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "In addition to the previous RC-release this release fixes the following issues or adds the following functionality:\r\n\r\n* Crashloops after unexpected shutdowns #1697 #1698 #1703\r\n* HNSW integrity compromised after restarts #1701 #1705 \r\n* Filter by ID (introduced in 1.7.2) #1708 \r\n* Use Feature Projection in `text2vec-transformers` module #1572\r\n\r\n*More detailed release notes will follow for the GA release*",
        "dateCreated": "2021-10-13T06:51:45Z",
        "datePublished": "2021-10-13T06:52:54Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.8.0-rc.1",
        "name": "[Pre-release] v1.8.0-rc.1 - Many Fixes (Crashloops, ID search, ...)",
        "tag_name": "v1.8.0-rc.1",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.8.0-rc.1",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/51260453",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.8.0-rc.1"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "This pre-release introduces the ability to scale Weaviate horizontally and shard classes across multiple nodes in a cluster. Detailed Release Notes will follow at a later point. \r\n\r\nA newly created class will default its shard count to the size of the cluster. ",
        "dateCreated": "2021-09-30T10:30:33Z",
        "datePublished": "2021-09-30T10:31:16Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.8.0-rc.0",
        "name": "[Pre-release] v1.8.0-rc.0 - Horizontal Scaling",
        "tag_name": "v1.8.0-rc.0",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.8.0-rc.0",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/50537608",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.8.0-rc.0"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "----------------------------\r\nDocker image/tag: `semitechnologies/weaviate:1.7.2`\r\n\r\n## Breaking Changes\r\n*none*\r\n\r\n## New Features\r\n*none*\r\n\r\n## Fixes\r\n* ## Make property name validations less strict (#1562)\r\n  The property name rules were unnecessarily strict due to historic reasons which no longer apply. Valid proprerty names now include any GraphQL-valid characters. (Note that creating a property also leads to being able to query said property via GraphQL, so if it needs to be GraphQL-compliant). The validation rules is `/[_A-Za-z][_0-9A-Za-z]*/`. In addition, the following names are restricted: `id`, `_id`, `_additional`, `meta`. Properties starting with an underscore (`_`) are allowed, but there is no guarantee that they will not be forbidden in the future as new internal properties are introduced. New internal properties will always start with an underscore, so if you prefix all your properties with a specific sequence, (for example `wp_` for a WordPress-Plugin), you will avoid conflicts with future internal properties.\r\n\r\n* ## Issue aggregating some array properties (#1686)\r\n  This fixes an issue where aggregating over some array data types would lead to an error\r\n\r\n* ## Add missing array data types (#1691)\r\n  This fix provides the previously missing array data types `boolean[]` and `date[]`.\r\n",
        "dateCreated": "2021-09-28T08:02:19Z",
        "datePublished": "2021-09-28T08:15:08Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.7.2",
        "name": "v1.7.2 - Various Fixes: Property Names, Missing Array types, Array Aggregations",
        "tag_name": "v1.7.2",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.7.2",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/50326000",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.7.2"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Docker image/tag: `semitechnologies/weaviate:1.7.1`\r\n\r\n## Breaking Changes\r\n*none*\r\n\r\n## New Features\r\n*none*\r\n\r\n## Fixes\r\n* Fixes an issue where the `text2vec-contextionary` would consider a schema invalid that only consists of array types if the class name is not being vectorized. (#1673)\r\n",
        "dateCreated": "2021-09-17T12:28:54Z",
        "datePublished": "2021-09-17T12:34:40Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.7.1",
        "name": "v1.7.1 - Bugfix: text2vec-contextionary: vectorization of array types",
        "tag_name": "v1.7.1",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.7.1",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/49745025",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.7.1"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "## Features\r\n\r\n* ### Array Datatypes (#1611)\r\n  Starting with this releases, primitive object properties are no longer limited to individual properties, but can also include lists of primitives. Array types can be stored, filtered and aggregated in the same way as other primitives.\r\n\r\n  Auto-schema will automatically recognize lists of `string`/`text` and `number`/`int`. You can also explicitly specify lists in the schema by using the following data types `string[]`, `text[]`, `int[]`, `number[]`. A type that is assigned to be an array, must always stay an array, even if it only contains a single element. \r\n\r\n* ### New Module: `text-spellcheck` - Check and auto-correct misspelled search terms (#1606)\r\n  Use the new spellchecker module to verify user-provided search queries (in existing `nearText` or `ask` functions) are spelled correctly and even suggest alternative, correct spellings. Spell-checking happens at query time. \r\n\r\n  There are two ways to use this module:\r\n  1. It provides a new additional prop which can be used to check (but not alter) the provided queries:\r\n  The following query:\r\n  ```graphql\r\n   {\r\n     Get {\r\n       Post(nearText:{\r\n         concepts: \"missspelled text\"\r\n       }) {\r\n         content\r\n         _additional{\r\n           spellCheck{\r\n             changes{\r\n               corrected\r\n               original\r\n             }\r\n             didYouMean\r\n             location\r\n             originalText\r\n           }\r\n         }\r\n       }\r\n     }\r\n   }\r\n  ```\r\n  \r\n  will produce results, similar to the following:\r\n  \r\n  ```\r\n     \"_additional\": {\r\n       \"spellCheck\": [\r\n         {\r\n           \"changes\": [\r\n             {\r\n               \"corrected\": \"misspelled\",\r\n               \"original\": \"missspelled\"\r\n             }\r\n           ],\r\n           \"didYouMean\": \"misspelled text\",\r\n           \"location\": \"nearText.concepts[0]\",\r\n           \"originalText\": \"missspelled text\"\r\n         }\r\n       ]\r\n     },\r\n     \"content\": \"...\"\r\n   },\r\n  ```\r\n  2. It extends existing `text2vec-modules` with a `autoCorrect` flag, which can be used to correct the query if incorrect in the background.\r\n\r\n* ### New Module `ner-transformers` - Extract entities from Weaviate using transformers (#1632)\r\n  Use transformer-based models to extract entities from your existing Weaviate objects on the fly. Entity Extraction happens at query time. Note that for maximum perfomance, transformer-based models should run with GPUs. CPUs can be used, but the throughput will be lower.\r\n\r\n  To make use of the modules capabilities, simply extend your query with the following new `_additional` property:\r\n\r\n  ```graphql\r\n  {\r\n    Get {\r\n      Post {\r\n        content\r\n        _additional {\r\n          tokens(\r\n            properties: [\"content\"],    # is required\r\n            limit: 10,                  # optional, int\r\n            certainty: 0.8              # optional, float\r\n          ) {\r\n            certainty\r\n            endPosition\r\n            entity\r\n            property\r\n            startPosition\r\n            word\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ```\r\n  It will return results similar to the following:\r\n\r\n  ```\r\n   \"_additional\": {\r\n     \"tokens\": [\r\n       {\r\n         \"property\": \"content\",\r\n         \"entity\": \"PER\",\r\n         \"certainty\": 0.9894614815711975,\r\n         \"word\": \"Sarah\",\r\n         \"startPosition\": 11,\r\n         \"endPosition\": 16\r\n       },\r\n       {\r\n         \"property\": \"content\",\r\n         \"entity\": \"LOC\",\r\n         \"certainty\": 0.7529033422470093,\r\n         \"word\": \"London\",\r\n         \"startPosition\": 31,\r\n         \"endPosition\": 37\r\n       }\r\n     ]\r\n   }\r\n  ```\r\n## Fixes\r\n\r\n* Aggregation can get stuck when aggregating `number` datatypes (#1660)",
        "dateCreated": "2021-09-01T14:24:29Z",
        "datePublished": "2021-09-01T15:22:05Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.7.0",
        "name": "v1.7.0 - Array datatypes and two new modules (NER, Spellcheck)",
        "tag_name": "v1.7.0",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.7.0",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/48744661",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.7.0"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Docker image/tag: `semitechnologies/weaviate:1.6.0`\r\n\r\n## Breaking Changes\r\n*none*\r\n\r\n## New Features\r\n* ### Zero Shot Classification (#1603)\r\n  This release adds a new classification type `zeroshot` that works with any `vectorizer` or custom vectors. It picks the label objects that have the lowest distance to the source objects. The link is made using cross-references, similar to existing classifications in Weaviate.\r\n\r\n  To start a `zeroshot` classification use `\"type\": \"zeroshot\"` in your `POST /v1/classficiations` request and specify the properties you want classified normally using `\"classifyProperties\": [...]`.\r\n\r\n  As zero shot involves no training data, you cannot set `trainingSetWhere` filters, but can filter both source (`\"sourceWhere\"`) and label objects (`\"targetWhere\"`) directly.\r\n\r\n## Fixes\r\n* ### Fix nil-pointer panic on updated/deleted HNSW entrypoint (#1650)\r\n  In concurrent update/import scenarios such as during classifications, this bug could lead to a `nil pointer dereference` panic. This releases fixes this issue.",
        "dateCreated": "2021-08-11T10:24:21Z",
        "datePublished": "2021-08-11T10:31:20Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.6.0",
        "name": "v1.6.0 - Zero Shot Classifications",
        "tag_name": "v1.6.0",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.6.0",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/47650954",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.6.0"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Docker image/tag: `semitechnologies/weaviate:1.5.2`\r\n\r\n## Breaking Changes\r\n*none*\r\n\r\n## New Features\r\n* ### Fix possible data races (`short write`) (#1643)\r\n  This release fixes various possible data races that could in the worst case lead to an unrecoverable error `\"short write\"`. The possibility for those races was introduced in `v.1.5.0` and we highly recommend anyone running on the `v1.5.x` timeline to upgrade to `v1.5.2` immediately.\r\n\r\n## Fixes\r\n*none*\r\n",
        "dateCreated": "2021-08-10T13:04:38Z",
        "datePublished": "2021-08-10T12:51:41Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.5.2",
        "name": "v1.5.2 - Fix possible data races",
        "tag_name": "v1.5.2",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.5.2",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/47602618",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.5.2"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "----------------------------\r\nDocker image/tag: `semitechnologies/weaviate:1.5.1`\r\n\r\n## Breaking Changes\r\n*none*\r\n\r\n## New Features\r\n*none*\r\n\r\n## Fixes\r\n* ### Crashloop after unexpected crash in HNSW commit log (#1635)\r\n  If Weaviate was killed (e.g. OOMKill) while writing the commit log, it could not be parsed after the next restart anymore, thus ending up in a crashloop. This fix removes this. Note that no data will be lost on such a crash: The particually written commit log has not yet been acknolweged to the user, so no write guarantees have been given yet. It is therefore safe to discard.\r\n\r\n* ### Chained Like operator not working (#1638)\r\n  Prior to this fix, when chaining `Like` operators in `where` filters where each `valueString` or `valueText` contained a wildcard (`*`), typically only the first operator's results where reflected. This fix makes sure that the chaining (`And` or `Or`) is reflected correctly. This bug did not affect other operators (e.g. `Equal`, `GreaterThan`, etc) and only affected those `Like` queries where a wildcard was used.\r\n\r\n* ### Fix potential data race in Auto Schema features (#1636)\r\n  This fix improves incorrect synchronization on the auto schema feature which in extreme cases could lead to a data race.\r\n",
        "dateCreated": "2021-07-29T07:47:06Z",
        "datePublished": "2021-07-29T07:56:24Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.5.1",
        "name": "v1.5.1 - Bugfixes for HNSW commit log, Like operator, Autoschema",
        "tag_name": "v1.5.1",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.5.1",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/46956569",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.5.1"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Docker image/tag: `semitechnologies/weaviate:1.5.0`\r\n\r\n## Breaking Changes\r\n*none*\r\n\r\n*WARNING: This release does not contain any API-level breaking changes, however, it changes the entire storage mechanism inside Weaviate. As a result, an in-place update is not possible. When upgrading from previous versions, a new setup needs to be created and all data reimported. Prior backups are not compatible with this version.*\r\n\r\n## New Features\r\n* ### LSM-Tree based Storage (#1523, #1569, #1570)\r\n  Previous releases of Weaviate used a B+Tree based storage mechanism. This was not fast enough to keep up with the high write speed requirements of a large-scale import. This release completely rewrites the storage layer of Weaviate to use a custom LSM-tree approach. This leads to considerably faster import times, often more than 100% faster than the previous version. E.g.:\r\n\r\n  ![image](https://user-images.githubusercontent.com/8974479/125474712-4717cb19-dd5d-4170-b2d5-f9d8e13cb716.png)\r\n\r\n* ### Auto-Schema Feature (#1539)\r\n  Import data objects without creating a schema prior to import. The classes will be created automatically, they can still be adjusted manually. Weaviate will guess the property type based on the first time it sees a property. The defaults can be configured using the environment variables outlined in #1539. The feature is on by default, but entirely non-breaking. You can still create an explicit schema at will. \r\n\r\n## Fixes\r\n* ### Improve Aggregation Queries (#1616)\r\n  Reduces the amount of allocations required for some aggregation queries, speeding them up and reduces the amount of timeouts encountered during aggregations. ",
        "dateCreated": "2021-07-13T11:38:24Z",
        "datePublished": "2021-07-13T12:05:13Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.5.0",
        "name": "v1.5.0 - LSM Tree Storage, Auto-Schema ",
        "tag_name": "v1.5.0",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.5.0",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/46116010",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.5.0"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Changes to the previous pre-release\r\n\r\n* fixes an issue where weaviate could crash with a segfault if an Aggregation was started in parallel with an LSM tree compaction, e.g. during periods of importing (#1617)\r\n* makes aggregations more allocation-efficient, thus reducing the time it takes and need for GC on larger datasets (#1616)",
        "dateCreated": "2021-07-08T14:17:20Z",
        "datePublished": "2021-07-08T14:40:06Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.5.0-rc.3",
        "name": "[Pre-release] v1.5.0-rc.3",
        "tag_name": "v1.5.0-rc.3",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.5.0-rc.3",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/45910947",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.5.0-rc.3"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Changes to the previous release candidate:\r\n\r\n* Fix WAL error if it ends abruplty (#1612)\r\n* Don't panic when batch size approaches HNSW index growth interval (#1612)\r\n* Auto-schema feature (#1539)",
        "dateCreated": "2021-07-06T09:54:07Z",
        "datePublished": "2021-07-06T09:57:18Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.5.0-rc.2",
        "name": "[Pre-release] v1.5.0-rc.2",
        "tag_name": "v1.5.0-rc.2",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.5.0-rc.2",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/45759737",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.5.0-rc.2"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Changes to previous RC:\r\n* Fixes issues around timeouts on a restart after a crash (LSM WAL recovery) (#1608, #1609)",
        "dateCreated": "2021-06-29T11:06:57Z",
        "datePublished": "2021-06-29T11:15:08Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.5.0-rc.1",
        "name": "[Pre-release] v1.5.0-rc.1",
        "tag_name": "v1.5.0-rc.1",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.5.0-rc.1",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/45415744",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.5.0-rc.1"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "A pre-release containing the upcoming LSM Store Change: Object and Index storage is no longer done using a B+Tree approach (bolb/bbolt), but uses a custom LSM tree approach. This speeds up imports by over 100% depending on the use case.\r\n\r\nA reimport is required, there is no upgrade path from 1.4.x other than creating a new setup and reimporting.",
        "dateCreated": "2021-06-23T08:37:35Z",
        "datePublished": "2021-06-23T08:40:12Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.5.0-rc.0",
        "name": "[Pre-release] v1.5.0-rc.0",
        "tag_name": "v1.5.0-rc.0",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.5.0-rc.0",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/45081839",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.5.0-rc.0"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Docker image/tag: `semitechnologies/weaviate:1.4.1`\r\n\r\n## Breaking Changes\r\n*none*\r\n\r\n## New Features\r\n*none*\r\n\r\n## Fixes\r\n* ### Fix issue where some files weren't stored in the correct location (#1596)\r\n  This fixes an issue where the files containing the schema and classification state were not written in the correct location that is configured as `PERSISTENCE_DATA_PATH=`. This deviation could lead to issues restoring from backups.\r\n\r\n  If you had any workarounds in place to deal with the broken paths, this release might break those workarounds as they are no longer required.",
        "dateCreated": "2021-06-15T07:35:38Z",
        "datePublished": "2021-06-15T08:29:37Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.4.1",
        "name": "v1.4.1 - Fix issues around data path ",
        "tag_name": "v1.4.1",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.4.1",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/44624763",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.4.1"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Changes compared to previous RC:\r\n\r\n* fixes #1590 which was introduced in a prior RC of this release",
        "dateCreated": "2021-05-31T15:28:39Z",
        "datePublished": "2021-05-31T15:16:49Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.4.0-rc.4",
        "name": "[Pre-release] v1.4.0-rc.4",
        "tag_name": "v1.4.0-rc.4",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.4.0-rc.4",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/43861705",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.4.0-rc.4"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "## Breaking Changes\r\n*none*\r\n\r\n## New Features\r\n  * ### New Image Module `img2vec-neural` (#1525)\r\n      A new vectorizer module which allows vectorizing images using Neural Networks. At the time of the release `resnet50` is officially supported, but other models will be added at a later point.\r\n\r\n     This module makes use of the new `blob` data type (see below).\r\n\r\n     When adding a class with vectorizer type `img2vec-neural` the configuration must contain information about which field holds the image. This can be achieved with the following config:\r\n\r\n    ```json\r\n      \"moduleConfig\": {\r\n        \"img2vec-neural\": {\r\n          \"imageFields\": [\r\n            \"image\"\r\n          ]\r\n        }\r\n      }\r\n    ```\r\n     If multiple fields are specified, the module will vectorize them separately and use the mean vector of the individual vectors.\r\n\r\n    When adding data, make sure that the specified fields are filled with valid image data (e.g. `jpg`, `png`, etc.). The `blob` type itself (see below) requires that all blobs are base64 encoded. To obtain the base64-encoded value of an image, you can run the following command - or use the helper methods in the Weaviate clients - to do so:\r\n\r\n    ```sh\r\n    cat my_image.png | base64\r\n    ```\r\n\r\n    At search time you can use the \"standard\" vector-search options, such as `nearVector` and `nearObject`. But in addition, you can also vectorize a new image at search time and search by using the image's vector. To do so, you can use the `nearImage` search option like so:\r\n\r\n    ```graphql\r\n    {\r\n      Get {\r\n        MyImage(nearImage: {\r\n          image: \"/9j/4AAQSkZJRgABAgE...\"\r\n          certainty: 0.7\r\n        }) {\r\n          image\r\n        }\r\n      }\r\n    }\r\n    ```\r\n\r\n  Note that at the moment, but a Tensorflow/Keras and a pytorch-based implementation exists for the model inference containers. Either one has distince advantages over the other:\r\n  * `resnet50 (pytorch)`\r\n    * :white_check_mark: supports both `amd64` and `arm64`\r\n    * :white_check_mark: supports cuda \r\n    * :x: does not support multi-threaded inference\r\n  * `resnet50 (keras)` \r\n    * :warning: supports `amd64`, but not `arm64`\r\n    * :x: does not support cuda at this time\r\n    * :white_check_mark: supports multi-threaded inference\r\n\r\n  * ### Add Hardware acceleration for `amd64` CPUs (Intel, AMD) (#1559, #1577)\r\n    If Weaviate is running on an `AVX2`-compatible CPU, `AVX2` instructions are used to calculate the dot product more efficiently. If `AVX2` is not present or Weaviate is running on other architectures, the native Go implementation is used. This speeds up both vector imports, as well as queries\r\n\r\n  * ### Support `arm64` technology for entire Weaviate stack\r\n    Starting with this release the entire Weaviate stack can run natively on `arm64` hardware, such as Apple M1-based Macs. This eliminates the need for emulation and assures the performance is similar to `amd64`-based hardware. Currently the following components are supported: `Weaviate Core`, `text2vec-contextionary`, `text2vec-transformers`, `qna-transformers`, `img2vec-neural` (only `pytorch`-based models). All latest Docker images have been pushed as Multi-Architecture images, so no changes are required. A standard `docker-comopse up -d` will automatically use the `arm64`-based images on an `arm64`-based machine, such as M1 Macs.\r\n\r\n  * ### Set `ef` at search time (#1542, #1564) \r\n     You can now explicitly configure the search time `ef` parameter for the HNSW vector index. The higher `ef` is chosen, the more accurate, but also slower a search becomes. This helps in the recall/performance trade-off that is possible with HNSW.\r\n\r\n     If you omit setting this field it will default to `-1` which means \"Let Weaviate pick the right `ef` value\". This is the same behavior that was present prior to this release. In this case Weaviate will pick `ef` [according to this formula](https://github.com/semi-technologies/weaviate/blob/bd43d04a4363fe57cb7b003c53dba82dce60502f/adapters/repos/db/vector/hnsw/search.go#L44-L54).\r\n\r\n    To overwrite the default `ef` value, you can set it (together with `efConstruction` and `maxConnections`) in the `vectorIndexConfig`, for example:\r\n\r\n     ```json\r\n     \"vectorIndexConfig\": {\r\n       \"skip\": false,\r\n       \"ef\": 100,\r\n       \"efConstruction\": 128,\r\n       \"maxConnections\": 64\r\n     }\r\n     ```\r\n\r\n     Note that while many parts of a schema class are immutable by design, updating `ef` (only search-time `ef` - not `efConstruction`) is explicitly supported. (#1564)\r\n\r\n   * ### Introduce new dataType `blob` (#1566, #1567)\r\n      A new primitive data type `blob` was introduced. Any binary data can be stored. The data must be `base64` encoded for safe transfer via REST.\r\n\r\n     Note that `blob` data types are never indexed in the inverted index. This means using blobs in whereFilters is not possible and there is no `valueBlob` field accordingly.\r\n\r\n   * ### Skip vector-indexing a class (#1580)\r\n     There are situations where it doesn't make sense to vectorize a class. For example if the class is just meant as glue between two other class (consisting only of references) or if the class contains mostly duplicate elements (Note that importing duplicate vectors into HNSW is very expensive as the algorithm uses a check whether a candidate's distance is higher than the worst candidate's distance for an early exit condition. With (mostly) identical vectors, this early exit condition is never met leading to an exhaustive search on each import or query). \r\n\r\n     In this case, you can now skip indexing a vector all-together. To do so, set the following options on a schema class:\r\n\r\n     ```json\r\n     \"vectorIndexConfig\": {\r\n       \"skip\": true\r\n     }\r\n     ```\r\n    \r\n     The newly introduced `\"skip\"` fields defaults to `false`, so this is a backward-compatible change. If not set, classes will be indexed normally.\r\n\r\n     Note that the creation of a vector through a module is decoupled from storing the vector in Weaviate. So, simply skipping the indexing does not skip the generation of a vector if a vectorizer other than `none` is configured on the class (for example through a global default). It is therefore recommended to always set: `\"vectorizer\": \"none\"` explicitly when skipping the vector indexing.\r\n\r\n     If vector indexing is skipped, but a vectorizer is configured (or a vector is provided manually) a warning is logged on each import.\r\n\r\n## Fixes\r\n* ### Various Performance Fixes around the HNSW Vector Index (#1559)\r\n  Various fixes and changes were introduced in the HNSW vector index to improve the query and import times related to the vector index. Most notably:\r\n  * Switch Binary-Tree based Priority-Queue to Custom Heap-Based Priority Queue optimized for fewer allocations\r\n  * Use improved neighbor connection heuristic ([\"Heuristic 2\" from HNSW paper](https://arxiv.org/abs/1603.09320))\r\n  * Introduce reusable visited list pools (inspired by hnswlib C++ implementation)\r\n  * Reduce overhead of the Vector Cache, use multi-sharded locking (The vector cache keeps vectors in mem if memory is available and only reads them from disk when it's full. The size is configurable, it defaults to 2M vectors, which for 768d vector of size `float32` corresponds to ~6GB)\r\n  * Cosine-Distance calculations are now actually the dot-product of normalized vectors. This is the same thing, but we only have to normalize them once and each subsequent calculation (of which there are plenty in HNSW indexing) is slightly cheaper. \r\n* ### Replace `satori/uuid` with `google/uuid` (#1571)\r\n    A CVE was added to the original repo which is unmaintained now. It was thus replaced with a maintained one. Thanks to external contributor @simplechris for this fix.\r\n* ### Make property order consistent when vectorizing (#1576)\r\n  When vectorizing text with models where the order of sentences is important, e.g. `transformers`, the resulting vector was not deterministic prior to this release. This is because the order of iterating over the text/string properties was not guaranteed. With this fix, properties are now always fed to the vectorizer in alphabetical order, meaning two identical objects will receive identical vectors - also with the `text2vec-transformers` module.\r\n\r\n  Thanks to first-time contributor @StefanBogdan for this fix.\r\n* ### Fix issues around `PATCH` API when using custom vectors (#1591)\r\n  The `PATCH` API (merge, partial update) assumed that a vectorizer would always be present which could then lead to errors when user-specified vectors were used. This release fixes this behavior and makes sure all cases which work with vectorizers also work with custom vectors. Note that the `PUT` and `POST` APIs were not affected by this bug.\r\n\r\n\r\n* ### Detect schema settings that will most likely lead to duplicate vectors and print warning (#1582)\r\n  Because (mostly) identical vectors can slow down HNSW indexing (see above), a warning is printed if a vectorizer config will most likely result in duplicate vectors. For example if only the class name is vectorized, but no properties, it is certain that vectors will be identical.\r\n\r\n* ### Fix missing schema validation on transformers module (#1583)\r\n  Prior to this release, the module-specific schema-validation (e.g. \"Are there any fields which a vector can be derived from?\") was missing for the `text2vec-transformers` module. This fix adds the validation rules.\r\n\r\n\r\n",
        "dateCreated": "2021-06-09T10:47:47Z",
        "datePublished": "2021-06-09T12:50:38Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.4.0",
        "name": "v1.4.0 - (HNSW) Performance Improvements, Img2Vec-Module, various quality-of-life improvements and and fixes",
        "tag_name": "v1.4.0",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.4.0",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/43763799",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.4.0"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Changes to last prerelease:\r\n\r\n* In `text2vec-transformers` sort by prop name when passing to vectorizer for consistent results (#1576)",
        "dateCreated": "2021-05-19T14:52:05Z",
        "datePublished": "2021-05-19T14:54:03Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.4.0-rc.3",
        "name": "[Pre-release] v1.4.0-rc.3",
        "tag_name": "v1.4.0-rc.3",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.4.0-rc.3",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/43225132",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.4.0-rc.3"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Changes to last pre-release:\r\n\r\n* Warn if a class is guaranteed to lead to duplicate vectors on `text2vec` modules (#1582)\r\n* Fix missing schema validation in `text2vec-transformers`(#1583)",
        "dateCreated": "2021-05-19T10:45:05Z",
        "datePublished": "2021-05-19T10:46:39Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.4.0-rc.2",
        "name": "[Pre-release] v1.4.0-rc.2",
        "tag_name": "v1.4.0-rc.2",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.4.0-rc.2",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/43206247",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.4.0-rc.2"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Pre-Release for evaluation purposes.\r\n\r\nChanges to last pre-release:\r\n\r\n* If no AVX instructions are present, Weaviate will fallback to a pure Go dot product implementation (#1578)\r\n* It is now possible to skip classes in the vector index (#1579)",
        "dateCreated": "2021-05-18T08:45:13Z",
        "datePublished": "2021-05-18T09:01:37Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.4.0-rc.1",
        "name": "[Pre-release] v1.4.0-rc.1",
        "tag_name": "v1.4.0-rc.1",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.4.0-rc.1",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/43114764",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.4.0-rc.1"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Pre-Release for evaluation purposes.\r\n\r\nContains:\r\n* New `blob` data type\r\n* `img2vec-keras` module\r\n* AVX-instructions for dot product calculation",
        "dateCreated": "2021-05-13T07:51:18Z",
        "datePublished": "2021-05-13T07:53:31Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.4.0-rc.0",
        "name": "[Pre-release] v1.4.0-rc.0",
        "tag_name": "v1.4.0-rc.0",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.4.0-rc.0",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/42888725",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.4.0-rc.0"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Docker image/tag: `semitechnologies/weaviate:1.3.0`\r\n\r\n## Breaking Changes\r\n*none*\r\n\r\n## New Features\r\n\r\n* ### New Question Answering (Q&A) Module (#1520, #1527, #1537, #1550)\r\n  This release introduces a new module called `qna-transformers` which uses BERT-related models for answer extraction. \r\n\r\n  #### How it works\r\n  Under the hood the model uses a two-step approach. First it performs a semantic search with `k=1` to find the document (e.g. a Sentence, Paragraph, Article, etc.) which is most likely to contain the answer. This step has no certainty threshold and as long as at least one document is present, it will be fetched and selected as the one most likely containing the answer. In a second step a BERT-style answer extraction is performed on all `text` and `string` properties of the document. There are now three possible outcomes: (1) No answer was found because the question can not be answered, (2) An answer was found, but did not meet the user-specified minimum certainty, so it was discarded (typically the case when the document is on topic, but does not contain an actual answer to the question) and (3) An answer was found that matches the desired certainty. It is returned to the user. \r\n\r\n  #### How to use it\r\n  On GraphQL `Get { ... }` queries a new searcher `ask{}` is introduced alongside the existing `near...` Searchers. It can be configured with a `\"question\"` (required, `string`) and two optional filter criteria: `\"certainty\"` (`float` between 0..1) and `\"properties\" (`[]string`)`. If no properties are set, all are considered. Similarly if no certainty is set, any answer that could be extracted will be returned.\r\n\r\n  The answer is contained in a new `_additional` property called `answer`. It contains the following fields:\r\n  * `hasAnswer` (`boolean`): could an answer be found?\r\n  * `result` (nullable `string`): An answer if one could be found. `null` if `hasAnswer==false`\r\n  * `certainty` (nullable `float`): The certainty of the answer returned. `null` if `hasAnswer==false`\r\n  * `property` (nullable `string`): The property which contains the answer. `null` if `hasAnswer==false`\r\n  * `startPosition` (`int`): The character offset where the answer starts. `0` if `hasAnswer==false`\r\n  * `endPosition` (`int`): The character offset where the answer ends `0` if `hasAnswer==false`\r\n\r\n  *Note: There are some limitations to the fields `property`, `startPosition` and `endPostion`, see below*.\r\n\r\n  #### Example\r\n  Some optional parameters omitted for brevity:\r\n  ```graphql\r\n  {\r\n    Get {\r\n      Paragraph( ask: {\r\n        question: \"what is the population of Berlin?\"\r\n        certainty: 0.8\r\n      }) {\r\n        _additional { answer { result certainty } }\r\n        text\r\n    }\r\n  }\r\n  ```\r\n\r\n   Which produces a result like the following:\r\n\r\n  ```json\r\n  {\r\n    \"data\": {\r\n      \"Get\": {\r\n        \"Paragraph\": [{\r\n          \"_additional\": {\r\n            \"answer\" : {\"result\": \"3,769,495 inhabitants\", \"certainty\": 0.85}\r\n          },\r\n          \"text\": \"Berlin is the capital and largest city of Germany by both area and population. Its 3,769,495 inhabitants, as of 31 December  makes it the most-populous city of the European Union, according to population within city limits.\"\r\n        }]\r\n      }\r\n    }\r\n  }\r\n  ```\r\n\r\n  #### Custom transformers models\r\n  You can use the same approach as for `text2vec-transformers`, i.e. either pick one of the pre-built containers or build your own container from your own model using the `semitechnologies/qna-transformers:custom` base image. Make sure that your model is compatible with Huggingfaces's `transformers.AutoModelForQuestionAnswering`\r\n\r\n  #### Dependencies\r\n  The module performs a semantic search under the hood, so a `text2vec-...` module is required. It does not need to be transformers-based and you can also combine it with `text2vec-contextionary`. However, we expect that you will receive the best results by combining it will a well-fitting transformers model by using the appropriate configured `text2vec-transformers` module.\r\n\r\n  #### Limitations\r\n  * `startPosition`, `endPosition` and `property` in the response are not guaranteed to be present. They are caluclated by a case-insensitive string matching function against the input text. If the transformer model formats the output differently (e.g. by introducing spaces between tokens which were not present in the original input), the calculation of the position and determining the property fails.\r\n  * `Explore { }` does support the `ask { }` searcher, but the result is only a beacon to the object containing the answer. It is thus not any different from performing a `nearText` semantic search with the question. No extraction is happening.\r\n\r\n* ### New Meta Information for all transformer-based modules (#1552)\r\n  A `GET /v1/meta` request will now also contain meta information about the transformer models used in the respective modules.\r\n\r\n## Fixes\r\n\r\n* fixes an issue where nested cross-references might sometimes not appear in search results (#1489)\r\n* fixes various performance bugs in the HNSW implementation which were most present with really high `efConstruction` values. Note that more performance improvements will follow shortly, this fix only contains the most urgent fixes. (#1543)\r\n* The default vector cache size was increased from 500k to 2M objects (#1574). Note that the implementation of the vector cache is likely to change in the future, as it is currently a performance bottleneck.",
        "dateCreated": "2021-04-23T09:02:42Z",
        "datePublished": "2021-04-23T09:13:05Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.3.0",
        "name": "v1.3.0 - Question & Answer module, various fixes",
        "tag_name": "v1.3.0",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.3.0",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/41765338",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.3.0"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Docker image/tag: `semitechnologies/weaviate:1.2.1`\r\n\r\n## Breaking Changes\r\n*none*\r\n\r\n## New Features\r\n*none*\r\n\r\n## Fixes\r\n\r\n* fixes an issue where `_additional { interpretation }` was shown even when no module supporting this feature was active (#1509)\r\n* removes an obsolete dependency to etcd which interfered with the `text2vec-contextionary` and lead to workarounds being required in the Go client (#1512, #1514, #1516)\r\n* improves modularization under the hood, removes shortcuts from complete migration (#1501, #1494, #1485)\r\n",
        "dateCreated": "2021-03-25T09:46:49Z",
        "datePublished": "2021-03-25T09:52:35Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.2.1",
        "name": "v1.2.1 - Fixes related to Module System and Obsolete Dependencies",
        "tag_name": "v1.2.1",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.2.1",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/40403565",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.2.1"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Docker image/tag: `semitechnologies/weaviate:1.2.0`\r\n\r\n# Breaking Changes\r\n*none*\r\n\r\n# New Features\r\n* ## Use Transformer NLP Models with Weaviate out of the box\r\n  With Weaviate release `v1.0.0` we introduced a module API and the ability to import any vector. This allowed the usage of any Machine Learning Model with Weaviate. With this release we are making it even easier to use Weaviate with some of the most popular ML Models out there; transformers. This means models like `BERT`, `DilstBERT`, `RoBERTa`, `DilstilROBERTa`, etc. can be used out-of-the box with Weaviate.\r\n\r\n  To use transformers with weaviate the `text2vec-transformers` module needs to be enabled. The models are encapsulated in Docker containers. This allows for efficient scaling and resource planning. Neural-Network-based models run most efficiently on GPU-enabled serves, yet Weaviate is CPU-optimized. This separate-container microservice setup allows you to very easily host (and scale) the model independently on GPU-enabled hardware while keeping Weaviate on cheap CPU-only hardware.\r\n\r\n  To choose your specific model, you simply need to select the correct Docker container. There is a selection of pre-built Docker images available, but you can also build your own with a simple two-line Dockerfile.\r\n\r\n  ### How to get started with transformers\r\n\r\n  #### Option 1: With an example docker-compose file \r\n  You can find an example Docker-compose file here, which will spin up Weaviate with the transformers module. In this example we have selected the `sentence-transformers/msmarco-distilroberta-base-v2` which works great for [asymmetric semantic search](https://sbert.net/examples/applications/semantic-search/README.html#symmetric-vs-asymmetric-semantic-search). See below for how to select an alternative model.\r\n\r\n  #### Option 2: Configure your custom setup\r\n\r\n  ##### Step 1: Enable the `text2vec-transformers` module\r\n  Make sure you set the `ENABLE_MODULES=text2vec-transformers` environment variable. Additionally make this module the default vectorizer, so you don't have to specify it on each schema class: `DEFAULT_VECTORIZER_MODULE=text2vec-transformers`\r\n\r\n  **Important:** This setting is now a requirement, if you plan on using any module. So, when using the `text2vec-contextionary` module, you need to have `ENABLE_MODULES=text2vec-contextionary` set. All our configuration-generators / Helm charts will be updated as part of the Weaviate `v1.2.0` support.\r\n\r\n  ##### Step 2: Run your favorite model\r\n  Choose [any of our pre-built transformers models](https://github.com/semi-technologies/t2v-transformers-models#pre-built-images) (for building your own model container, see below) and spin it up (for example using `docker run -itp \"8000:8080\" semitechnologies/transformers-inference:sentence-transformers-msmarco-distilroberta-base-v2`) . Use a CUDA-enabled machine for optimal performance. Read more about [CUDA-support on the inference container here]() !!!!TODO!!!.\r\n\r\n  ##### Step 3: Tell Weaviate where to find the inference container\r\n  Set the Weaviate environment variable `TRANSFORMERS_INFERENCE_API` to where your inference container is running, for example `TRANSFORMERS_INFERENCE_API=\"http://localhost:8000\"`\r\n\r\n  You can now use Weaviate normally and all vectorization during import and search time will be done with the selected transformers model.\r\n\r\n  ### Run with any transformers module\r\n  You have three options to select your desired model:\r\n  1.  Use [any of our pre-built transformers model containers](https://github.com/semi-technologies/t2v-transformers-models#pre-built-images) The models selected in this list have proven to work well with semantic search in the past. (If you think we should support another model out-of-the-box [please open an issue or pull request here](https://github.com/semi-technologies/t2v-transformers-models/issues).\r\n  2. Use any model from Hugging Face Model Hub. [Click here to learn how](https://github.com/semi-technologies/t2v-transformers-models#custom-build-with-any-huggingface-model).\r\n  3. Use any PyTorch or Tensorflow model from your local disk. [Click here to learn how](https://github.com/semi-technologies/t2v-transformers-models#custom-build-with-a-private--local-model).\r\n\r\n  ### Transformers-specific module configuration (on classes and properties)\r\n  You can use the same module-configuration on your classes and properties which you already know from the `text2vec-contextionary` module. This includes `vectorizeClassName`, `vectorizePropertyName` and `skip`.\r\n\r\n  In addition you can use a class-level module config to select the pooling strategy with `poolingStrategy`. Allowed values are `masked_mean` or `cls`. They refer to different techniques to obtain a sentence-vector from individual word vectors as outlined in the [Sentence-BERT paper](https://arxiv.org/abs/1908.10084).\r\n\r\n  ### Limitations\r\n  * The Weaviate module system currently does not support running two different `text2vec-...` modules in the same setup. This is due to a limitation in the `Explore { }` search where both modules would try to provide an inter-class `nearText` searcher, which would be incompatible. \r\n  * The configuration generator tool on our Website is not yet capable of selecting between a contextionary-focused or a transformer-focused setup. This will be added shortly. In the meantime the easiest way is to use an example Docker Compose file.\r\n\r\n\r\n# Fixes\r\n*none*\r\n",
        "dateCreated": "2021-03-15T16:23:01Z",
        "datePublished": "2021-03-15T16:33:41Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.2.0",
        "name": "v1.2.0 - Transformers Module",
        "tag_name": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.2.0",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/39599422",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.2.0"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Docker image/tag: `semitechnologies/weaviate:1.1.0`\r\nSee also: example docker-compose files in [English](https://configuration.semi.technology/docker-compose?weaviate_version=1.1.0&language=en&contextionary_model=0.16.0), [Dutch](https://configuration.semi.technology/docker-compose?weaviate_version=1.1.0&language=nl&contextionary_model=0.16.0), [German](https://configuration.semi.technology/docker-compose?weaviate_version=1.1.0&language=de&contextionary_model=0.14.0), [Czech](https://configuration.semi.technology/docker-compose?weaviate_version=1.1.0&language=cs&contextionary_model=0.14.0), [Italian](https://configuration.semi.technology/docker-compose?weaviate_version=1.1.0&language=it&contextionary_model=0.14.0). If you need to configure additional settings, you can also generate a custom `docker-compose.yml` file [using the documentation](https://www.semi.technology/documentation/weaviate/current/getting-started/installation.html#docker-compose).\r\n## Breaking Changes\r\n*none*\r\n\r\n## New Features\r\n* ### `nearObject` search to get most similar objects (#1427)\r\n  Prior to the introduction of this feature, the only way to get the objects closest to one another was to display an objects vector and then do a `nearVector` search with it. Now this can be done in a single step:\r\n\r\n  **GraphQL `Get { ClassName(nearObject:{...}) {...}`**\r\n  You can simply specify an object's `id` or `beacon`, such as:\r\n\r\n  ```graphql\r\n  {\r\n    Get{\r\n      Publication(\r\n        nearObject: {\r\n          id: \"27b5213d-e152-4fea-bd63-2063d529024d\", // alternatively `beacon`\r\n          certainty: 0.7\r\n        }\r\n      ){\r\n        name\r\n        _additional {\r\n          certainty\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ```\r\n\r\n  **Combining near Object with movements in the `text2vec-contextionary` module**\r\n  You can even add the nearObject search into an existing movement, for an example [see the second code block here](https://github.com/semi-technologies/weaviate/issues/1427#issuecomment-763775356).\r\n   \r\n* ### Cross-reference batch import speed improvements (#1334, #1259)\r\n  Prior to this release importing cross-references in batches was no faster than importing objects. Internally adding a reference was seen as an update, which would lead to a deletion and creation of the updated version in all indices. However, since reference-updates do not alter the vector position of an object, a full reimport wasn't necessary. This release add's a special logic that recognizes such updates and treats them in an optimized fashion. A single reference batch is now considerably faster and even overall import speeds can improve between 30 and 50% depending on how cross-reference heavy your dataset is. Additionally, some improvements around writing into the inverted index in batches have been made, leading to a slightly improved import time for object batches on large imports.\r\n\r\n## Fixes\r\n* ### Fix Search Inconsistencies during heavy write loads (#1362)\r\n  Prior to this release there was a bug in the HNSW implementation which could lead to searches returning zero (or too few) results if the search was performed while an import was running. Such a situation is very common in classification scenarios where already classified objects are being written while other objects are being classified (which requires a similarity search).\r\n\r\n  On large classifications this could lead to some to-be-classified items never finding any training data and thus not classifying the item. As a further symptom, these unclassified items could then be found in subsequent classifications. In such a scenario you might have seen two subsequent classification with `count: 5000` and `count: 20`, suggesting a total fo `5020` objects - even when there were only 5000 objects present.\r\n\r\n  This fix addresses the root cause of index inconsistencies while importing, which - among other things - fixes the classification miscount issue.\r\n",
        "dateCreated": "2021-02-10T13:18:07Z",
        "datePublished": "2021-02-10T10:52:11Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.1.0",
        "name": "v1.1.0 - nearObject, Performance Improvements, Bugfixes",
        "tag_name": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.1.0",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/37852601",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.1.0"
      },
      {
        "authorType": "User",
        "author_name": "etiennedi",
        "body": "Docker image/tag: `semitechnologies/weaviate:1.0.4`\r\nSee also: example docker-compose files in [English](https://configuration.semi.technology/docker-compose?weaviate_version=1.0.4&language=en&contextionary_model=0.16.0), [Dutch](https://configuration.semi.technology/docker-compose?weaviate_version=1.0.4&language=nl&contextionary_model=0.16.0), [German](https://configuration.semi.technology/docker-compose?weaviate_version=1.0.4&language=de&contextionary_model=0.14.0), [Czech](https://configuration.semi.technology/docker-compose?weaviate_version=1.0.4&language=cs&contextionary_model=0.14.0), [Italian](https://configuration.semi.technology/docker-compose?weaviate_version=1.0.4&language=it&contextionary_model=0.14.0). If you need to configure additional settings, you can also generate a custom `docker-compose.yml` file [using the documentation](https://www.semi.technology/documentation/weaviate/current/getting-started/installation.html#docker-compose).\r\n## Breaking Changes\r\n*none*\r\n\r\n## New Features\r\n*none*\r\n\r\n## Fixes\r\n* Clean up leftovers of kind from pre-v1 (#1366)\r\n* Fix an issue where a delete in some occasions could mess up the HNSW index. This lead to flakiness in tests and usage. (#1369)\r\n* Fix an issue where maintenance tasks continued for a class even after it was deleted (#1404)\r\n* Fix an issue where an uppercased search term in `where` filter with `valueString` or `valueText` returned no results (#1426)\r\n* Fix an issue where `vectorIndexConfig` was ignored and only defaults could be used (#1431)\r\n* Fix an issue where deleting a class while a classification is running could create a panic (#1396)\r\n* Fix an issue where the `Explore {}` API would be missing results on some queries, but not on others (#1422)\r\n",
        "dateCreated": "2021-02-01T08:40:47Z",
        "datePublished": "2021-02-01T09:00:48Z",
        "html_url": "https://github.com/semi-technologies/weaviate/releases/tag/v1.0.4",
        "name": "v1.0.4 - Various Fixes",
        "tag_name": "v1.0.4",
        "tarball_url": "https://api.github.com/repos/semi-technologies/weaviate/tarball/v1.0.4",
        "url": "https://api.github.com/repos/semi-technologies/weaviate/releases/37164624",
        "zipball_url": "https://api.github.com/repos/semi-technologies/weaviate/zipball/v1.0.4"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2037,
      "date": "Mon, 20 Dec 2021 19:07:53 GMT"
    },
    "technique": "GitHub API"
  },
  "support": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. **Software Engineers** ([docs](https://www.semi.technology/developers/weaviate/current/)) - Who use Weaviate as an ML-first database for your applications. \n    * Out-of-the-box modules for: NLP/semantic search, automatic classification and image similarity search.\n    * Easy to integrate in your current architecture, with full CRUD support like you're used to from other OSS databases.\n    * Cloud-native, distributed, runs well on Kubernetes and scales with your workloads.\n\n2. **Data Engineers** ([docs](https://www.semi.technology/developers/weaviate/current/)) - Who use Weaviate as a vector database that is built up from the ground with ANN at its core, and with the same UX they love from Lucene-based search engines.\n    * Weaviate has a modular setup that allows to use your own ML models inside Weaviate, but you can also use out-of-the-box ML models (e.g., SBERT, ResNet, fasttext, etc).\n    * Weaviate takes care of the scalability, so that you don't have to.\n    * Deploy and maintain ML models in production reliably and efficiently.\n\n3. **Data Scientists** ([docs](https://www.semi.technology/developers/weaviate/current/)) - Who use Weaviate for a seamless handover of their Machine Learning models to MLOps.\n    * Deploy and maintain your ML models in production reliably and efficiently.\n    * Weaviate's modular design allows you to easily package any custom trained model you want.\n    * Smooth and accelerated handover of your Machine Learning models to engineers.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "- [Stackoverflow for questions](https://stackoverflow.com/questions/tagged/weaviate)\n- [Github for issues](https://github.com/semi-technologies/weaviate/issues)\n- [Slack channel to connect](https://join.slack.com/t/weaviate/shared_invite/zt-goaoifjr-o8FuVz9b1HLzhlUfyfddhw)\n- [Newsletter to stay in the know](https://www.semi.technology/newsletter/)\n\n",
      "technique": "Header extraction"
    }
  ],
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "graphql",
      "weaviate",
      "contextual-search",
      "search-engine",
      "classification",
      "semantic-search",
      "semantic-search-engine",
      "vectors",
      "knn-search",
      "machine-learning",
      "vector-search",
      "vector-search-engine",
      "vector-database",
      "deep-learning",
      "deep-search",
      "restful-api",
      "neural-search",
      "search-engines",
      "database",
      "mlops"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "<a href=\"https://semi.technology/developers/weaviate/current/\" target=\"_blank\"><img src=\"https://www.semi.technology/img/weaviate-demo.gif?i=7\" alt=\"Demo of Weaviate\" width=\"100%\"></a>\n\n<sup>Weaviate GraphQL demo on news article dataset containing: Transformers module, GraphQL usage, semantic search, _additional{} features, Q&A, and Aggregate{} function. You can the demo on this dataset in the GUI here: <a href=\"https://console.semi.technology/console/query#weaviate_uri=https://demo.dataset.playground.semi.technology&graphql_query=%7B%0A%20%20Get%20%7B%0A%20%20%20%20Article(%0A%20%20%20%20%20%20nearText%3A%20%7B%0A%20%20%20%20%20%20%20%20concepts%3A%20%5B%22Housing%20prices%22%5D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20where%3A%20%7B%0A%20%20%20%20%20%20%20%20operator%3A%20Equal%0A%20%20%20%20%20%20%20%20path%3A%20%5B%22inPublication%22%2C%20%22Publication%22%2C%20%22name%22%5D%0A%20%20%20%20%20%20%20%20valueString%3A%20%22The%20Economist%22%0A%20%20%20%20%20%20%7D%0A%20%20%20%20)%20%7B%0A%20%20%20%20%20%20title%0A%20%20%20%20%20%20inPublication%20%7B%0A%20%20%20%20%20%20%20%20...%20on%20Publication%20%7B%0A%20%20%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20_additional%20%7B%0A%20%20%20%20%20%20%20%20certainty%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D\" target=\"_blank\">semantic search</a>, <a href=\"https://console.semi.technology/console/query#weaviate_uri=https://demo.dataset.playground.semi.technology&graphql_query=%7B%0A%20%20Get%7B%0A%20%20%20%20Article(%0A%20%20%20%20%20%20ask%3A%20%7B%0A%20%20%20%20%20%20%20%20question%3A%20%22What%20did%20Jemina%20Packington%20predict%3F%22%0A%20%20%20%20%20%20%20%20properties%3A%20%5B%22summary%22%5D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20limit%3A%201%0A%20%20%20%20)%7B%0A%20%20%20%20%20%20title%0A%20%20%20%20%20%20inPublication%20%7B%0A%20%20%20%20%20%20%20%20...%20on%20Publication%20%7B%0A%20%20%20%20%20%20%20%20%20%20name%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20_additional%20%7B%0A%20%20%20%20%20%20%20%20answer%20%7B%0A%20%20%20%20%20%20%20%20%20%20endPosition%0A%20%20%20%20%20%20%20%20%20%20property%0A%20%20%20%20%20%20%20%20%20%20result%0A%20%20%20%20%20%20%20%20%20%20startPosition%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D\" target=\"_blank\">Q&A</a>, <a href=\"https://console.semi.technology/console/query#weaviate_uri=https://demo.dataset.playground.semi.technology&graphql_query=%7B%0A%20%20Aggregate%20%7B%0A%20%20%20%20Article%20%7B%0A%20%20%20%20%20%20meta%20%7B%0A%20%20%20%20%20%20%20%20count%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D\" target=\"_blank\">Aggregate</a>.</sup>\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "You can find [code examples here](https://github.com/semi-technologies/weaviate-examples)\n\n",
      "technique": "Header extraction"
    }
  ]
}