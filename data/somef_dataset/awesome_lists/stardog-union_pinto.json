{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/stardog-union/pinto",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2015-03-31T16:22:54Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-10T11:06:23Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9073546144410096,
        0.83088898335729
      ],
      "excerpt": "Pinto is a Java framework for transforming Java beans into RDF (and back). \nThe current version is 2.0 as of 2016-06-14.  We're using git flow \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8074330678193599
      ],
      "excerpt": "Inspired by Jackson and Empire, it aims to \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8316785204077969,
        0.9863991135040607,
        0.9040389838458714
      ],
      "excerpt": "turn it into RDF. \nThe rdf4j framework is used to represent RDF primitives such as Graph and Statement. \nTo create the artifacts: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8296320057857988,
        0.9861559544282374,
        0.9845649372490888,
        0.8929703191989858,
        0.8181999783245111
      ],
      "excerpt": "control how the object is serialized. \nAn annotation which specifies the properties to be used for generating the URI of the object.  By default, a hash of \nthe object itself is used to generate a URI.  But when present on a getter or setter of one or more properties on the \nbean, the values of those properties will be used as the seed for the URI. \nNote: There is a secondary mechanism for controlling the URI of an object.  If the object implements Identifiable the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9477509871764378,
        0.9935064102502663,
        0.9561092501917318
      ],
      "excerpt": "An annotation which can be applied to a property on a bean, either the getter or the setter, which specifies the \nURI of the property when generating RDF for the bean.  Normally, a URI for the property is auto-generated, but when \nthis annotation is present, the URI specified in the annotation is used instead.  The value of the annotation can also \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8169725635696325,
        0.917805680093046,
        0.9594135127605409
      ],
      "excerpt": "An annotation which can be applied to a class to specify the rdf:type of the class when generating the RDF.  Can be \na QName or a URI.  When not present, no rdf:type assertion is generated for the object. \nAnnotation which can be used to control the URI assigned to an Enum.  Normally the URI's are generated by Pinto, but \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8461497354690456
      ],
      "excerpt": "By default, RDFMapper does not require any configuration, it's meant to generate reasonable RDF out of the box.  There \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9737576319964414
      ],
      "excerpt": "IGNORE_INVALID_ANNOTATIONS - Whether or not to ignore an annotation which is invalid, such as @RdfProperty which defines a property with an invalid URI.  Properties with invalid/ignored annotations are simply not used when generating a Bean or RDF. (default: true) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.883061580632657
      ],
      "excerpt": "Builder when creating the mapper: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8996009949494456,
        0.8154414694494849,
        0.9758483749478025,
        0.9776911388944901,
        0.8046859526808153
      ],
      "excerpt": "#namespace(...) - Methods to specify namespace mappings which are used to expand any QNames used in the annotations \n#valueFactory(ValueFactory) - Provide the ValueFactory to be used when creating RDF from a bean \n#collectionFactory(CollectionFactory) - The factory to be used for creating instances of java.util.Collection.  Defaults to DefaultCollectionFactory \n#mapFactory(MapFactory) - The factory to be used for creating instances of java.util.Map.  Defaults to DefaultMapFactory \nIn some cases, an object won't adhere to the Java Bean specification, or it's a third-party class that you don't control \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9462753849876547
      ],
      "excerpt": "implementation of a codec for java.util.UUID called UUIDCodec. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8287838826480268,
        0.9406887314147676,
        0.8515333700879498
      ],
      "excerpt": "Why create Pinto when there are similar frameworks available?  Well, the other frameworks, like \nEmpire or Alibaba are focused on more than \njust transforming Beans into RDF and back. Neither are a good fit for just round-tripping between beans and RDF. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9583826908282294,
        0.9822800401305292
      ],
      "excerpt": "to serialize as RDF, or accept as RDF, that's normally done with a custom implementation of \nMessageBodyReader/MessageBodyWriter.  But that implementation is not straight-forward with the heavier-weight \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Pinto: A lightweight framework for mapping Java Beans into RDF and back again",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/stardog-union/pinto/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 19,
      "date": "Mon, 20 Dec 2021 14:09:53 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/stardog-union/pinto/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "stardog-union/pinto",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8431082860812085
      ],
      "excerpt": "Beyond these configuration options, RDFMapper has a few other configuration mechanisms that can be specified on its \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.83022096636384
      ],
      "excerpt": "And to run the tests: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8633989807152664
      ],
      "excerpt": "$ gradle test \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8747170872606279
      ],
      "excerpt": "    @Iri(\"urn:my_ontology:test:Foo\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8466554366009481,
        0.8633787064066573
      ],
      "excerpt": "REQUIRE_IDS - By default, Pinto will auto-generate URIs for objects when @RdfId is not specified.  By setting this property to true the mapper will not auto-generate URIs, they must be specified explicitly. (default: false) \nSERIALIZE_COLLECTIONS_AS_LISTS - When true, collections are serialized as RDF lists.  Otherwise, they're serialized using Collection#size separate property assertions. (default: false) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/stardog-union/pinto/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Java"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Pinto",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pinto",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "stardog-union",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/stardog-union/pinto/blob/develop/readme.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 33,
      "date": "Mon, 20 Dec 2021 14:09:53 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "rdf",
      "java-bean"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Given this simple Java Bean:\n\n```java\npublic static final class Person {\n    private String mName;\n\n    public Person() {\n    }\n\n    public Person(final String theName) {\n        mName = theName;\n    }\n\n    public String getName() {\n        return mName;\n    }\n\n    public void setName(final String theName) {\n        mName = theName;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hashCode(mName);\n    }\n\n    @Override\n    public boolean equals(final Object theObj) {\n        if (theObj == this) {\n            return true;\n        }\n        else if (theObj instanceof Person) {\n            return Objects.equal(mName, ((Person) theObj).mName);\n        }\n        else {\n            return false;\n        }\n    }\n}\n```\n\nYou can easily serialize it as RDF:\n\n```java\nGraph aGraph = RDFMapper.create().writeValue(new Person(\"Michael Grove\"));\n```\n\nAnd `aGraph` serialized as NTriples:\n\n```\n<tag:complexible:pinto:f97658c7048377a026111c7806bd7280> <tag:complexible:pinto:name> \"Michael Grove\"^^<http://www.w3.org/2001/XMLSchema#:string> .\n```\n\nAnd if you have that RDF, you can turn it back into a `Person`:\n\n```java\nfinal Person aPerson RDFMapper.create().readValue(aGraph, Person.class)\n```\n\nThis is the quick and dirty example, but for more detailed examples, check out the tests.\n\n",
      "technique": "Header extraction"
    }
  ]
}