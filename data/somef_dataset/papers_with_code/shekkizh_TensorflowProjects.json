{
  "citation": [
    {
      "confidence": [
        0.8444342525991423
      ],
      "excerpt": "Emotion Detection - Kaggle class problem. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9624750766836043
      ],
      "excerpt": "Generative NeuralStyle(Johnson et al) - Needs further tuning. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8111036989382164
      ],
      "excerpt": "<img src=\"https://github.com/shekkizh/TensorflowProjects/blob/master/logs/Visualization_logs/visualization_conv5_3_0.jpg\" /> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/shekkizh/TensorflowProjects",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-02-27T00:58:20Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-07T06:29:39Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9392635578931264
      ],
      "excerpt": "A repo of everything deep and neurally related. Implementations and ideas are largely based on papers from arxiv and implementations, tutorials from the internet.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8238634991304193,
        0.9735000320180128
      ],
      "excerpt": "Generative Networks - Attempts at generative models mostly done with strided convolution and it's transposes. \nImage Analogy - Implementation based on Deep Visual Analogy-Making paper. Dataloader code is based on carpedm20 implementation.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8819176050490105,
        0.8542555639107565,
        0.9245872477642859,
        0.9260588117942953,
        0.9050636968432063
      ],
      "excerpt": "ImageArt - Everything artistic with deep nets  \nDeepDream,  LayerVisualization, NeuralStyle(Gatys et al), ImageInversion(Mahendran et al) - all implementations are VGG model based. \nNeuralArtist(a mapping from location to rgb as an optimization problem - idea based on karpathy's convnet.js implementation) \nMNIST - My first ever code in Tensorflow. Check this out if you are new to Deep learning and Tensorflow - based on tensorflow tutorial with additions here and there.  \nModel_pruning - Includes files used for experimenting with pruning in neural networks \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8029918141576544
      ],
      "excerpt": "notMNIST - Well you got to follow up MNIST with something :D \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9362276571819298,
        0.8210552911406489,
        0.8390512916859878
      ],
      "excerpt": "There are a couple of more implementations as attempts to solve a few other problems \nDeblurring - Posing blurring in images as conv net problem - architecture is based on Image super-resolution paper by Dong et al. \nFindInceptionSimilarity - This implementation made me realize an important concept in machine learning in general - Symbolism vs Distributed representations.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9683681471940464
      ],
      "excerpt": "Generative Adversarial Networks - Tensorflow implementation of DCGAN on Flowers dataset and celebA dataset. Used carpedm20 and Newmu's DCGAN code for reference. The sample outputs below are the generated images - Results in increading order of epochs from left to right. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8408057839837112
      ],
      "excerpt": "But the celebA dataset used here had faces that are well aligned - Can we do better with unaligned images? Well, the results are as below. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9070777188144934
      ],
      "excerpt": "Image Inversion - An implementation based on Mahendran/Vedaldi's paper. Note that the optimization objective didn't account for variation loss across image and hence the visible noisy patterns in the result. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9453054745692759
      ],
      "excerpt": "NeuralArtist - Not exactly the best the network could do - but impatience got the better of me. The idea is to map a location to a RGB value and optimize a model to generate an image. If you squint a bit you will see the image better :) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8623145620394984
      ],
      "excerpt": "An attempt at MNIST Autoencoder (3 bottleneck variables) - An idea borrowed from karpathy's convnet.js. As noticed in the convnet.js page running the encoder longer does reduce the error and the separation further. Here's a sample of the difference from start to 20k iterations. Different colors correspond to labels 0-9. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503872459855633
      ],
      "excerpt": "Image Analogy - it was interesting to see how the model tries to learn. The model corresponding to just image loss seems to optimize shape followed by color and scale, though this process seems painfully slow - Rotation optimization so far doesn't seem to be visible on the horizon. Left image corresponds to result on the most trained model and the right corresponds to intermediate result. (Will be getting back to this problem later...) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9668603654797701
      ],
      "excerpt": "Composite Pattern Producing Networks - Somethings are best left random and unexplained. Fun little project with the simplest of code. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Deep learning using tensorflow",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/shekkizh/TensorflowProjects/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 60,
      "date": "Mon, 27 Dec 2021 11:25:11 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/shekkizh/TensorflowProjects/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "shekkizh/TensorflowProjects",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.8098674133178073
      ],
      "excerpt": "Folder Heirarchy \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/shekkizh/TensorflowProjects/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2016 Sarath Shekkizhar\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "**Tensorflow Projects**",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "TensorflowProjects",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "shekkizh",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/shekkizh/TensorflowProjects/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 170,
      "date": "Mon, 27 Dec 2021 11:25:11 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "tensorflow",
      "context-encoder",
      "unsupervised-learning",
      "model-pruning",
      "deepdream",
      "cppn",
      "neural-style",
      "neural-art"
    ],
    "technique": "GitHub API"
  }
}