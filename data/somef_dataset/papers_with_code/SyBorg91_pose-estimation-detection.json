{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1701.00295\n\n[2] https://github.com/DenisTome/Lifting-from-the-Deep-release\n\n### Mobilenet\n\n[1] Original Paper : https://arxiv.org/abs/1704.04861\n\n[2] Pretrained model (Pose estimation",
      "https://arxiv.org/abs/1704.04861\n\n[2] Pretrained model (Pose estimation"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9626356225854676,
        0.844592116576727,
        0.9072564759784449,
        0.9105368110547479,
        0.9626356225854676,
        0.9998416198938155
      ],
      "excerpt": "[1] https://github.com/CMU-Perceptual-Computing-Lab/openpose \n[2] Training Codes : https://github.com/ZheC/Realtime_Multi-Person_Pose_Estimation \n[3] Custom Caffe by Openpose : https://github.com/CMU-Perceptual-Computing-Lab/caffe_train \n[4] Keras Openpose : https://github.com/michalfaber/keras_Realtime_Multi-Person_Pose_Estimation \n[5] Keras Openpose2 : https://github.com/kevinlin311tw/keras-openpose-reproduce \n[1] Arxiv Paper : https://arxiv.org/abs/1701.00295 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.994799811898885
      ],
      "excerpt": "[1] Original Paper : https://arxiv.org/abs/1704.04861 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9105368110547479
      ],
      "excerpt": "[1] Tensorpack : https://github.com/ppwwyyxx/tensorpack \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/satyaborg/pose-estimation-detection",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-07-19T08:05:42Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-10T03:44:24Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9278447150686353,
        0.9860677762231636
      ],
      "excerpt": "Pose estimation & detection has been minimally implemented using the OpenPose implementation https://github.com/ildoonet/tf-pose-estimation with Tensorflow. For the binary classification of poses, namely the classes : sitting or standing, the model used, MobileNet (a CNN originally trained on the ImageNet Large Visual Recognition Challenge dataset), was retrained (final layer) on a dataset of ~1500 images of poses. \nThe model is able to estimate the human poses as well as classify the current pose to a fairly good degree of accuracy. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Implementation of openpose with tensorflow & openCV for estimation of human poses & classification.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/SyBorg91/pose-estimation-detection/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 14,
      "date": "Wed, 22 Dec 2021 01:53:55 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/satyaborg/pose-estimation-detection/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "satyaborg/pose-estimation-detection",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/tf_pose/slim/slim_walkthrough.ipynb",
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/tf_pose/slim/nets/mobilenet/mobilenet_example.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/tf_pose/slim/scripts/export_mobilenet.sh",
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/tf_pose/slim/scripts/finetune_inception_v1_on_flowers.sh",
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/tf_pose/slim/scripts/finetune_inception_resnet_v2_on_flowers.sh",
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/tf_pose/slim/scripts/train_lenet_on_mnist.sh",
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/tf_pose/slim/scripts/finetune_resnet_v1_50_on_flowers.sh",
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/tf_pose/slim/scripts/train_cifarnet_on_cifar10.sh",
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/tf_pose/slim/scripts/finetune_inception_v3_on_flowers.sh",
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/tf_pose/slim/datasets/download_and_convert_imagenet.sh",
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/tf_pose/slim/datasets/download_imagenet.sh",
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/models/graph/cmu/download.sh",
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/models/pretrained/mobilenet_v1_1.0_224_2017_06_14/download.sh",
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/models/pretrained/mobilenet_v1_0.50_224_2017_06_14/download.sh",
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/models/pretrained/resnet_v2_101/download.sh",
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/models/pretrained/mobilenet_v1_0.75_224_2017_06_14/download.sh",
      "https://raw.githubusercontent.com/SyBorg91/pose-estimation-detection/master/models/numpy/download.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\n$ git clone https://github.com/SyBorg91/pose-estimation-detection\n$ cd pose-estimation-detection\n$ pip3 install -r requirements.txt\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9162772825813085,
        0.8841575942277239
      ],
      "excerpt": "Run the above command to start pose estimation with the onboard webcam. \n[1] https://github.com/CMU-Perceptual-Computing-Lab/openpose \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8693022068461701,
        0.8718669442138984,
        0.8718669442138984
      ],
      "excerpt": "[3] Custom Caffe by Openpose : https://github.com/CMU-Perceptual-Computing-Lab/caffe_train \n[4] Keras Openpose : https://github.com/michalfaber/keras_Realtime_Multi-Person_Pose_Estimation \n[5] Keras Openpose2 : https://github.com/kevinlin311tw/keras-openpose-reproduce \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8948368986645309
      ],
      "excerpt": "[2] https://github.com/DenisTome/Lifting-from-the-Deep-release \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8918974083095406
      ],
      "excerpt": "[1] Tensorpack : https://github.com/ppwwyyxx/tensorpack \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8313464775654884
      ],
      "excerpt": "$ python run_webcam.py --model=mobilenet_thin --resize=432x368 --camera=0 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/satyaborg/pose-estimation-detection/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "PureBasic",
      "Python",
      "C++",
      "Jupyter Notebook",
      "C",
      "Shell",
      "Starlark",
      "Dockerfile",
      "SWIG",
      "CMake"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "pose-estimation-detection",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pose-estimation-detection",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "satyaborg",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/satyaborg/pose-estimation-detection/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The following are required :\n\n- python3\n- tensorflow 1.9.0 (works well even with CPU version)\n- opencv3\n- slim\n- slidingwindow\n  - https://github.com/adamrehn/slidingwindow\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\n$ git clone https://github.com/SyBorg91/pose-estimation-detection\n$ cd pose-estimation-detection\n$ pip3 install -r requirements.txt\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 44,
      "date": "Wed, 22 Dec 2021 01:53:55 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "mobilenet",
      "openpose",
      "pose-estimation",
      "image-classification",
      "tensorflow"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**An alternative for improving the model along with deep learning is to include heuristics, in the form of calculation of the skeletal points\u2019 relative distances from each other.**\n\n **FPS & estimation/detection varies with the CPU/GPU power.**\n \n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "- For sitting pose\n![alt text](/images/sitting.jpeg)\n\n- For standing pose\n![alt text](/images/standing.jpeg)\n\n",
      "technique": "Header extraction"
    }
  ]
}