{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1804.02767",
      "https://arxiv.org/abs/1804.02767 (2018).](https://arxiv.org/abs/1804.02767)\n\n## Getting Started\n### 1 Prerequisites  \n* Python 3.x  \n* Tensorflow 1.x  \n* Opencv-python  \n* Pandas  \n\n### 2 Define your class names  \nDownload  and unzip this repository.  \n`cd ../YOLOv3/label`  \nOpen the `label.txt` and revise its class names as yours.  \n\n### 3 Prepare images  \nCopy your images and annotation files to directories `../YOLOv3/data/annotation/images` and `../YOLOv3/data/annotation/images/xml` respectively, where the annotations should be obtained by [a graphical image annotation tool](https://github.com/tzutalin/labelImg) and  saved as XML files in PASCAL VOC format.  \n`cd ../YOLOv3/code`  \nrun  \n`python spilt.py`  \nThen train and val images will be generated in  `../YOLOv3/data/annotation/train` and  `/YOLOv3/data/annotation/test` directories, respectively.  \n\n### 4 Anchor clusters using K-means  \nRun K-means clustering on the training set bounding boxes to automatically find good anchors.  \n`cd ../YOLOv3/code`  \nrun  \n`python anchor_cluster.py`  \nAnchors generated by K-means are saved in the directory `../YOLOv3/anchor/anchor.txt`. Belows are same outputs when running K-means:\n\n`Iter = 1/20, Average IoU = 0.719983, is current optimal anchors.`  \n`Iter = 2/20, Average IoU = 0.733096, is current optimal anchors.`  \n`Iter = 3/20, Average IoU = 0.73589, is current optimal anchors.`  \n`Iter = 4/20, Average IoU = 0.736503, is current optimal anchors.`  \n`Iter = 5/20, Average IoU = 0.736472`  \n`Iter = 6/20, Average IoU = 0.736157`  \n`Iter = 7/20, Average IoU = 0.735872`  \n`Iter = 8/20, Average IoU = 0.735478`  \n`...................................`  \n`...................................`  \n`...................................`  \n`Iter = 19/20, Average IoU = 0.732432`  \n`Iter = 20/20, Average IoU = 0.73226`  \n\n### 5 Train model using Tensorflow  \nThe model parameters, training parameters and eval parameters are all defined by `parameters.py`.  \n`cd ../YOLOv3/code`  \nrun  \n`python train.py`  \nThe model will be saved in directory `../YOLOv3/model/checkpoint`, and some detection results are saved in `../YOLOv3/pic`. \n \n### 6 Visualize model using Tensorboard  \n`cd ../YOLOv3`  \nrun  \n`tensorboard --logdir=model/`   \nOpen the URL in browser to visualize model. Below  is the graph of my model:  \n<div align=center><img width=\"900\" height=\"700\" src=\"https://github.com/xiaogangLi/tensorflow-Darknet53-YOLOv3/blob/master/YOLOv3/pic/graph.png\"/></div>\n\n## Examples  \nHere are some detection examples in my dataset:   \n\n![Image](https://github.com/xiaogangLi/tensorflow-Darknet53-YOLOv3/blob/master/YOLOv3/pic/example0.jpg)\n![Image](https://github.com/xiaogangLi/tensorflow-Darknet53-YOLOv3/blob/master/YOLOv3/pic/example1.jpg)\n![Image](https://github.com/xiaogangLi/tensorflow-Darknet53-YOLOv3/blob/master/YOLOv3/pic/example2.jpg)\n![Image](https://github.com/xiaogangLi/tensorflow-Darknet53-YOLOv3/blob/master/YOLOv3/pic/example3.jpg)"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9995923095743552
      ],
      "excerpt": "YOLOv3 : Redmon, Joseph, and Ali Farhadi. \"Yolov3: An incremental improvement.\" arXiv preprint arXiv:1804.02767 (2018). \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/xiaogangLi/tensorflow-Darknet53-YOLOv3",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-10-19T10:38:33Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-09-26T05:44:07Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9765080611398456
      ],
      "excerpt": "This is the implementation of YOLOv3 for object detection in Tensorflow. It contains complete code for preprocessing, training and test. Besides, this repository is easy-to-use and can be developed on Linux and Windows.   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.993841243950627
      ],
      "excerpt": "Open the URL in browser to visualize model. Below  is the graph of my model:   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "An implementation of YOLOv3 approach for Object Detection in TensorFlow.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/xiaogangLi/tensorflow-Darknet53-YOLOv3/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Sun, 26 Dec 2021 23:41:59 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/xiaogangLi/tensorflow-Darknet53-YOLOv3/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "xiaogangLi/tensorflow-Darknet53-YOLOv3",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Copy your images and annotation files to directories `../YOLOv3/data/annotation/images` and `../YOLOv3/data/annotation/images/xml` respectively, where the annotations should be obtained by [a graphical image annotation tool](https://github.com/tzutalin/labelImg) and  saved as XML files in PASCAL VOC format.  \n`cd ../YOLOv3/code`  \nrun  \n`python spilt.py`  \nThen train and val images will be generated in  `../YOLOv3/data/annotation/train` and  `/YOLOv3/data/annotation/test` directories, respectively.  \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9033178025879384
      ],
      "excerpt": "cd ../YOLOv3/label \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.959748597937764
      ],
      "excerpt": "cd ../YOLOv3/code \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.959748597937764
      ],
      "excerpt": "cd ../YOLOv3/code \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "cd ../YOLOv3 \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.840039524519615
      ],
      "excerpt": "Open the label.txt and revise its class names as yours. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python anchor_cluster.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/xiaogangLi/tensorflow-Darknet53-YOLOv3/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Object Detection",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "tensorflow-Darknet53-YOLOv3",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "xiaogangLi",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/xiaogangLi/tensorflow-Darknet53-YOLOv3/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Python 3.x  \n* Tensorflow 1.x  \n* Opencv-python  \n* Pandas  \n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Sun, 26 Dec 2021 23:41:59 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Here are some detection examples in my dataset:   \n\n![Image](https://github.com/xiaogangLi/tensorflow-Darknet53-YOLOv3/blob/master/YOLOv3/pic/example0.jpg)\n![Image](https://github.com/xiaogangLi/tensorflow-Darknet53-YOLOv3/blob/master/YOLOv3/pic/example1.jpg)\n![Image](https://github.com/xiaogangLi/tensorflow-Darknet53-YOLOv3/blob/master/YOLOv3/pic/example2.jpg)\n![Image](https://github.com/xiaogangLi/tensorflow-Darknet53-YOLOv3/blob/master/YOLOv3/pic/example3.jpg)\n",
      "technique": "Header extraction"
    }
  ]
}