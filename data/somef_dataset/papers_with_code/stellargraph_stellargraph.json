{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1706.02216",
      "https://arxiv.org/abs/1710.10903",
      "https://arxiv.org/abs/1902.07153",
      "https://arxiv.org/abs/1903.01610",
      "https://arxiv.org/abs/1810.05997",
      "https://arxiv.org/abs/1905.07953",
      "https://arxiv.org/abs/1810.05997.([link](https://arxiv.org/abs/1810.05997))\n\n10. Cluster-GCN: An Efficient Algorithm for Training Deep and Large Graph Convolutional Networks. W. Chiang, X. Liu, S. Si, Y. Li, S. Bengio, and C. Hsiej, KDD, 2019, https://arxiv.org/abs/1905.07953.([link](https://arxiv.org/abs/1905.07953))\n\n11. Modeling relational data with graph convolutional networks. M. Schlichtkrull, T. N. Kipf, P. Bloem, R. Van Den Berg, I. Titov, and M. Welling, European Semantic Web Conference, 2018, https://arxiv.org/abs/1609.02907 ([link](https://arxiv.org/pdf/1703.06103.pdf)).\n\n12. Complex Embeddings for Simple Link Prediction. T. Trouillon, J. Welbl, S. Riedel, \u00c9. Gaussier and G. Bouchard, ICML, 2016. ([link](http://jmlr.org/proceedings/papers/v48/trouillon16.pdf))\n\n13. Learning Structural Node Embeddings via Diffusion Wavelets. C. Donnat, M. Zitnik, D. Hallac, and J. Leskovec, SIGKDD, 2018, https://arxiv.org/abs/1710.10321 ([link](https://arxiv.org/pdf/1710.10321.pdf))\n\n14. Watch Your Step: Learning Node Embeddings via Graph Attention. S. Abu-El-Haija, B. Perozzi, R. Al-Rfou and A. Alemi, NIPS, 2018, https://arxiv.org/abs/1710.09599 ([link](https://arxiv.org/pdf/1710.09599.pdf))\n\n15. Deep Graph Infomax. P. Veli\u010dkovi\u0107, W. Fedus, W. L. Hamilton, P. Lio, Y. Bengio, R. D. Hjelm. International Conference on Learning Representations (ICLR), 2019, https://arxiv.org/abs/1809.10341, ([link](https://arxiv.org/pdf/1809.10341.pdf)).\n\n16. Continuous-Time Dynamic Network Embeddings. Giang Hoang Nguyen, John Boaz Lee, Ryan A. Rossi, Nesreen K. Ahmed, Eunyee Koh, and Sungchul Kim. Proceedings of the 3rd International Workshop on Learning Representations for Big Networks (WWW BigNet) 2018. ([link](https://dl.acm.org/doi/10.1145/3184558.3191526))\n\n17. Embedding Entities and Relations for Learning and Inference in Knowledge Bases. Bishan Yang, Wen-tau Yih, Xiaodong He, Jianfeng Gao, and Li Deng, ICLR, 2015. https://arxiv.org/abs/1412.6575 ([link](https://arxiv.org/pdf/1412.6575.pdf))\n\n18. An End-to-End Deep Learning Architecture for Graph Classification. Muhan Zhang, Zhicheng Cui, Marion Neumann, and Yixin Chen, AAAI, 2018. ([link](https://www.cse.wustl.edu/~yixin.chen/public/DGCNN.pdf))\n\n19. T-GCN: A Temporal Graph Convolutional Network for Traffic Prediction. Ling Zhao, Yujiao Song, Chao Zhang, Yu Liu, Pu Wang, Tao Lin, Min Deng, and Haifeng Li. IEEE Transactions on Intelligent Transportation Systems, 2019. ([link](https://ieeexplore.ieee.org/document/8809901))",
      "https://arxiv.org/abs/1905.07953.([link](https://arxiv.org/abs/1905.07953))\n\n11. Modeling relational data with graph convolutional networks. M. Schlichtkrull, T. N. Kipf, P. Bloem, R. Van Den Berg, I. Titov, and M. Welling, European Semantic Web Conference, 2018, https://arxiv.org/abs/1609.02907 ([link](https://arxiv.org/pdf/1703.06103.pdf)).\n\n12. Complex Embeddings for Simple Link Prediction. T. Trouillon, J. Welbl, S. Riedel, \u00c9. Gaussier and G. Bouchard, ICML, 2016. ([link](http://jmlr.org/proceedings/papers/v48/trouillon16.pdf))\n\n13. Learning Structural Node Embeddings via Diffusion Wavelets. C. Donnat, M. Zitnik, D. Hallac, and J. Leskovec, SIGKDD, 2018, https://arxiv.org/abs/1710.10321 ([link](https://arxiv.org/pdf/1710.10321.pdf))\n\n14. Watch Your Step: Learning Node Embeddings via Graph Attention. S. Abu-El-Haija, B. Perozzi, R. Al-Rfou and A. Alemi, NIPS, 2018, https://arxiv.org/abs/1710.09599 ([link](https://arxiv.org/pdf/1710.09599.pdf))\n\n15. Deep Graph Infomax. P. Veli\u010dkovi\u0107, W. Fedus, W. L. Hamilton, P. Lio, Y. Bengio, R. D. Hjelm. International Conference on Learning Representations (ICLR), 2019, https://arxiv.org/abs/1809.10341, ([link](https://arxiv.org/pdf/1809.10341.pdf)).\n\n16. Continuous-Time Dynamic Network Embeddings. Giang Hoang Nguyen, John Boaz Lee, Ryan A. Rossi, Nesreen K. Ahmed, Eunyee Koh, and Sungchul Kim. Proceedings of the 3rd International Workshop on Learning Representations for Big Networks (WWW BigNet) 2018. ([link](https://dl.acm.org/doi/10.1145/3184558.3191526))\n\n17. Embedding Entities and Relations for Learning and Inference in Knowledge Bases. Bishan Yang, Wen-tau Yih, Xiaodong He, Jianfeng Gao, and Li Deng, ICLR, 2015. https://arxiv.org/abs/1412.6575 ([link](https://arxiv.org/pdf/1412.6575.pdf))\n\n18. An End-to-End Deep Learning Architecture for Graph Classification. Muhan Zhang, Zhicheng Cui, Marion Neumann, and Yixin Chen, AAAI, 2018. ([link](https://www.cse.wustl.edu/~yixin.chen/public/DGCNN.pdf))\n\n19. T-GCN: A Temporal Graph Convolutional Network for Traffic Prediction. Ling Zhao, Yujiao Song, Chao Zhang, Yu Liu, Pu Wang, Tao Lin, Min Deng, and Haifeng Li. IEEE Transactions on Intelligent Transportation Systems, 2019. ([link](https://ieeexplore.ieee.org/document/8809901))",
      "https://arxiv.org/abs/1609.02907 ([link](https://arxiv.org/pdf/1703.06103.pdf)).\n\n12. Complex Embeddings for Simple Link Prediction. T. Trouillon, J. Welbl, S. Riedel, \u00c9. Gaussier and G. Bouchard, ICML, 2016. ([link](http://jmlr.org/proceedings/papers/v48/trouillon16.pdf))\n\n13. Learning Structural Node Embeddings via Diffusion Wavelets. C. Donnat, M. Zitnik, D. Hallac, and J. Leskovec, SIGKDD, 2018, https://arxiv.org/abs/1710.10321 ([link](https://arxiv.org/pdf/1710.10321.pdf))\n\n14. Watch Your Step: Learning Node Embeddings via Graph Attention. S. Abu-El-Haija, B. Perozzi, R. Al-Rfou and A. Alemi, NIPS, 2018, https://arxiv.org/abs/1710.09599 ([link](https://arxiv.org/pdf/1710.09599.pdf))\n\n15. Deep Graph Infomax. P. Veli\u010dkovi\u0107, W. Fedus, W. L. Hamilton, P. Lio, Y. Bengio, R. D. Hjelm. International Conference on Learning Representations (ICLR), 2019, https://arxiv.org/abs/1809.10341, ([link](https://arxiv.org/pdf/1809.10341.pdf)).\n\n16. Continuous-Time Dynamic Network Embeddings. Giang Hoang Nguyen, John Boaz Lee, Ryan A. Rossi, Nesreen K. Ahmed, Eunyee Koh, and Sungchul Kim. Proceedings of the 3rd International Workshop on Learning Representations for Big Networks (WWW BigNet) 2018. ([link](https://dl.acm.org/doi/10.1145/3184558.3191526))\n\n17. Embedding Entities and Relations for Learning and Inference in Knowledge Bases. Bishan Yang, Wen-tau Yih, Xiaodong He, Jianfeng Gao, and Li Deng, ICLR, 2015. https://arxiv.org/abs/1412.6575 ([link](https://arxiv.org/pdf/1412.6575.pdf))\n\n18. An End-to-End Deep Learning Architecture for Graph Classification. Muhan Zhang, Zhicheng Cui, Marion Neumann, and Yixin Chen, AAAI, 2018. ([link](https://www.cse.wustl.edu/~yixin.chen/public/DGCNN.pdf))\n\n19. T-GCN: A Temporal Graph Convolutional Network for Traffic Prediction. Ling Zhao, Yujiao Song, Chao Zhang, Yu Liu, Pu Wang, Tao Lin, Min Deng, and Haifeng Li. IEEE Transactions on Intelligent Transportation Systems, 2019. ([link](https://ieeexplore.ieee.org/document/8809901))",
      "https://arxiv.org/abs/1710.10321 ([link](https://arxiv.org/pdf/1710.10321.pdf))\n\n14. Watch Your Step: Learning Node Embeddings via Graph Attention. S. Abu-El-Haija, B. Perozzi, R. Al-Rfou and A. Alemi, NIPS, 2018, https://arxiv.org/abs/1710.09599 ([link](https://arxiv.org/pdf/1710.09599.pdf))\n\n15. Deep Graph Infomax. P. Veli\u010dkovi\u0107, W. Fedus, W. L. Hamilton, P. Lio, Y. Bengio, R. D. Hjelm. International Conference on Learning Representations (ICLR), 2019, https://arxiv.org/abs/1809.10341, ([link](https://arxiv.org/pdf/1809.10341.pdf)).\n\n16. Continuous-Time Dynamic Network Embeddings. Giang Hoang Nguyen, John Boaz Lee, Ryan A. Rossi, Nesreen K. Ahmed, Eunyee Koh, and Sungchul Kim. Proceedings of the 3rd International Workshop on Learning Representations for Big Networks (WWW BigNet) 2018. ([link](https://dl.acm.org/doi/10.1145/3184558.3191526))\n\n17. Embedding Entities and Relations for Learning and Inference in Knowledge Bases. Bishan Yang, Wen-tau Yih, Xiaodong He, Jianfeng Gao, and Li Deng, ICLR, 2015. https://arxiv.org/abs/1412.6575 ([link](https://arxiv.org/pdf/1412.6575.pdf))\n\n18. An End-to-End Deep Learning Architecture for Graph Classification. Muhan Zhang, Zhicheng Cui, Marion Neumann, and Yixin Chen, AAAI, 2018. ([link](https://www.cse.wustl.edu/~yixin.chen/public/DGCNN.pdf))\n\n19. T-GCN: A Temporal Graph Convolutional Network for Traffic Prediction. Ling Zhao, Yujiao Song, Chao Zhang, Yu Liu, Pu Wang, Tao Lin, Min Deng, and Haifeng Li. IEEE Transactions on Intelligent Transportation Systems, 2019. ([link](https://ieeexplore.ieee.org/document/8809901))",
      "https://arxiv.org/abs/1710.09599 ([link](https://arxiv.org/pdf/1710.09599.pdf))\n\n15. Deep Graph Infomax. P. Veli\u010dkovi\u0107, W. Fedus, W. L. Hamilton, P. Lio, Y. Bengio, R. D. Hjelm. International Conference on Learning Representations (ICLR), 2019, https://arxiv.org/abs/1809.10341, ([link](https://arxiv.org/pdf/1809.10341.pdf)).\n\n16. Continuous-Time Dynamic Network Embeddings. Giang Hoang Nguyen, John Boaz Lee, Ryan A. Rossi, Nesreen K. Ahmed, Eunyee Koh, and Sungchul Kim. Proceedings of the 3rd International Workshop on Learning Representations for Big Networks (WWW BigNet) 2018. ([link](https://dl.acm.org/doi/10.1145/3184558.3191526))\n\n17. Embedding Entities and Relations for Learning and Inference in Knowledge Bases. Bishan Yang, Wen-tau Yih, Xiaodong He, Jianfeng Gao, and Li Deng, ICLR, 2015. https://arxiv.org/abs/1412.6575 ([link](https://arxiv.org/pdf/1412.6575.pdf))\n\n18. An End-to-End Deep Learning Architecture for Graph Classification. Muhan Zhang, Zhicheng Cui, Marion Neumann, and Yixin Chen, AAAI, 2018. ([link](https://www.cse.wustl.edu/~yixin.chen/public/DGCNN.pdf))\n\n19. T-GCN: A Temporal Graph Convolutional Network for Traffic Prediction. Ling Zhao, Yujiao Song, Chao Zhang, Yu Liu, Pu Wang, Tao Lin, Min Deng, and Haifeng Li. IEEE Transactions on Intelligent Transportation Systems, 2019. ([link](https://ieeexplore.ieee.org/document/8809901))",
      "https://arxiv.org/abs/1809.10341, ([link](https://arxiv.org/pdf/1809.10341.pdf)).\n\n16. Continuous-Time Dynamic Network Embeddings. Giang Hoang Nguyen, John Boaz Lee, Ryan A. Rossi, Nesreen K. Ahmed, Eunyee Koh, and Sungchul Kim. Proceedings of the 3rd International Workshop on Learning Representations for Big Networks (WWW BigNet) 2018. ([link](https://dl.acm.org/doi/10.1145/3184558.3191526))\n\n17. Embedding Entities and Relations for Learning and Inference in Knowledge Bases. Bishan Yang, Wen-tau Yih, Xiaodong He, Jianfeng Gao, and Li Deng, ICLR, 2015. https://arxiv.org/abs/1412.6575 ([link](https://arxiv.org/pdf/1412.6575.pdf))\n\n18. An End-to-End Deep Learning Architecture for Graph Classification. Muhan Zhang, Zhicheng Cui, Marion Neumann, and Yixin Chen, AAAI, 2018. ([link](https://www.cse.wustl.edu/~yixin.chen/public/DGCNN.pdf))\n\n19. T-GCN: A Temporal Graph Convolutional Network for Traffic Prediction. Ling Zhao, Yujiao Song, Chao Zhang, Yu Liu, Pu Wang, Tao Lin, Min Deng, and Haifeng Li. IEEE Transactions on Intelligent Transportation Systems, 2019. ([link](https://ieeexplore.ieee.org/document/8809901))",
      "https://arxiv.org/abs/1412.6575 ([link](https://arxiv.org/pdf/1412.6575.pdf))\n\n18. An End-to-End Deep Learning Architecture for Graph Classification. Muhan Zhang, Zhicheng Cui, Marion Neumann, and Yixin Chen, AAAI, 2018. ([link](https://www.cse.wustl.edu/~yixin.chen/public/DGCNN.pdf))\n\n19. T-GCN: A Temporal Graph Convolutional Network for Traffic Prediction. Ling Zhao, Yujiao Song, Chao Zhang, Yu Liu, Pu Wang, Tao Lin, Min Deng, and Haifeng Li. IEEE Transactions on Intelligent Transportation Systems, 2019. ([link](https://ieeexplore.ieee.org/document/8809901))"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Inductive Representation Learning on Large Graphs. W.L. Hamilton, R. Ying, and J. Leskovec.\nNeural Information Processing Systems (NIPS), 2017, ([link](https://arxiv.org/abs/1706.02216) [webpage](https://snap.stanford.edu/graphsage/))\n\n2. Node2Vec: Scalable Feature Learning for Networks. A. Grover, J. Leskovec. ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD), 2016, ([link](https://snap.stanford.edu/node2vec/))\n\n3. Metapath2Vec: Scalable Representation Learning for Heterogeneous Networks. Yuxiao Dong, Nitesh V. Chawla, and Ananthram Swami.\nACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD), 135\u2013144, 2017, ([link](https://ericdongyx.github.io/metapath2vec/m2v.html))\n\n4. Attributed Network Embedding via Subspace Discovery. D. Zhang, Y. Jie, X. Zhu and C. Zhang, Data Mining and Knowledge Discovery, 2019, ([link](https://link.springer.com/article/10.1007/s10618-019-00650-2))\n\n5. Graph Attention Networks. P. Veli\u010dkovi\u0107 et al.\nInternational Conference on Learning Representations (ICLR), 2018, ([link](https://arxiv.org/abs/1710.10903))\n\n6. Graph Convolutional Networks (GCN): Semi-Supervised Classification with Graph Convolutional Networks. Thomas N. Kipf, Max Welling.\nInternational Conference on Learning Representations (ICLR), 2017, ([link](https://github.com/tkipf/gcn))\n\n7. Simplifying Graph Convolutional Networks. F. Wu, T. Zhang, A. H. de Souza, C. Fifty, T. Yu, and K. Q. Weinberger.\nInternational Conference on Machine Learning (ICML), 2019, ([link](https://arxiv.org/abs/1902.07153))\n\n8. Adversarial Examples on Graph Data: Deep Insights into Attack and Defense. H. Wu, C. Wang, Y. Tyshetskiy, A. Docherty, K. Lu, and L. Zhu. IJCAI 2019, ([link](https://arxiv.org/abs/1903.01610))\n\n9. Predict then propagate: Graph neural networks meet personalized PageRank. J. Klicpera, A. Bojchevski, A., and S. G\u00fcnnemann, ICLR, 2019, arXiv:1810.05997.([link](https://arxiv.org/abs/1810.05997))\n\n10. Cluster-GCN: An Efficient Algorithm for Training Deep and Large Graph Convolutional Networks. W. Chiang, X. Liu, S. Si, Y. Li, S. Bengio, and C. Hsiej, KDD, 2019, arXiv:1905.07953.([link](https://arxiv.org/abs/1905.07953))\n\n11. Modeling relational data with graph convolutional networks. M. Schlichtkrull, T. N. Kipf, P. Bloem, R. Van Den Berg, I. Titov, and M. Welling, European Semantic Web Conference, 2018, arXiv:1609.02907 ([link](https://arxiv.org/pdf/1703.06103.pdf)).\n\n12. Complex Embeddings for Simple Link Prediction. T. Trouillon, J. Welbl, S. Riedel, \u00c9. Gaussier and G. Bouchard, ICML, 2016. ([link](http://jmlr.org/proceedings/papers/v48/trouillon16.pdf))\n\n13. Learning Structural Node Embeddings via Diffusion Wavelets. C. Donnat, M. Zitnik, D. Hallac, and J. Leskovec, SIGKDD, 2018, arXiv:1710.10321 ([link](https://arxiv.org/pdf/1710.10321.pdf))\n\n14. Watch Your Step: Learning Node Embeddings via Graph Attention. S. Abu-El-Haija, B. Perozzi, R. Al-Rfou and A. Alemi, NIPS, 2018, arXiv:1710.09599 ([link](https://arxiv.org/pdf/1710.09599.pdf))\n\n15. Deep Graph Infomax. P. Veli\u010dkovi\u0107, W. Fedus, W. L. Hamilton, P. Lio, Y. Bengio, R. D. Hjelm. International Conference on Learning Representations (ICLR), 2019, arXiv:1809.10341, ([link](https://arxiv.org/pdf/1809.10341.pdf)).\n\n16. Continuous-Time Dynamic Network Embeddings. Giang Hoang Nguyen, John Boaz Lee, Ryan A. Rossi, Nesreen K. Ahmed, Eunyee Koh, and Sungchul Kim. Proceedings of the 3rd International Workshop on Learning Representations for Big Networks (WWW BigNet) 2018. ([link](https://dl.acm.org/doi/10.1145/3184558.3191526))\n\n17. Embedding Entities and Relations for Learning and Inference in Knowledge Bases. Bishan Yang, Wen-tau Yih, Xiaodong He, Jianfeng Gao, and Li Deng, ICLR, 2015. arXiv:1412.6575 ([link](https://arxiv.org/pdf/1412.6575.pdf))\n\n18. An End-to-End Deep Learning Architecture for Graph Classification. Muhan Zhang, Zhicheng Cui, Marion Neumann, and Yixin Chen, AAAI, 2018. ([link](https://www.cse.wustl.edu/~yixin.chen/public/DGCNN.pdf))\n\n19. T-GCN: A Temporal Graph Convolutional Network for Traffic Prediction. Ling Zhao, Yujiao Song, Chao Zhang, Yu Liu, Pu Wang, Tao Lin, Min Deng, and Haifeng Li. IEEE Transactions on Intelligent Transportation Systems, 2019. ([link](https://ieeexplore.ieee.org/document/8809901))\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "StellarGraph is designed, developed and supported by [CSIRO's Data61](https://data61.csiro.au/).\nIf you use any part of this library in your research, please cite it using the following BibTex entry\n```latex\n@misc{StellarGraph,\n  author = {CSIRO's Data61},\n  title = {StellarGraph Machine Learning Library},\n  year = {2018},\n  publisher = {GitHub},\n  journal = {GitHub Repository},\n  howpublished = {\\url{https://github.com/stellargraph/stellargraph}},\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{StellarGraph,\n  author = {CSIRO's Data61},\n  title = {StellarGraph Machine Learning Library},\n  year = {2018},\n  publisher = {GitHub},\n  journal = {GitHub Repository},\n  howpublished = {\\url{https://github.com/stellargraph/stellargraph}},\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/stellargraph/stellargraph",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing to StellarGraph\nHave you found a bug or have a new feature to suggest? Please read this before you start helping:\nBug reporting\nPlease follow these steps to report a bug:\n\n\nFirst, be confident that the bug lies in StellarGraph, not in your code or another package. <!-- Check the StellarGraph FAQs. -->\n\n\nThe bug may already be fixed. Try updating to the latest version, and check the current and closed issues in GitHub. Search for similar issues and try and find if someone else has found the same bug already.\n\n\nMake sure you provide us with useful information about your configuration: what OS are you using?\n\n\nProvide a simple script that reproduces the bug. A bug that cannot be reproduced easily will most likely not be investigated.\n\n\nOptionally, try and fix the bug and let us know how you go.\n\n\nContributing Code\nContributor License Agreement\nIn order to contribute to StellarGraph, please ensure that you have signed a Contributor License Agreement (CLA). You will\nbe guided through the process of digitally signing our CLA when you create a pull request.\nBe Friendly\nStellarGraph considers courtesy and respect for others an essential part of the community, and we strongly encourage everyone to be friendly when engaging with others. Please be helpful when people are asking questions, and on technical disagreements ensure that the issues are discussed in a respectful manner.\nProposing a new feature\n\n\nGive a clear and detailed explanation of the feature and why it should be added. This is best done by creating an issue on GitHub addressing the new feature. Propose a clear API for using the feature, preferably with a small snippet of pseudo-code.\n\n\nIf this is an implementation of an algorithm in the literature, please give a link to a paper describing the algorithm.\n\n\nIf you choose to implement the feature you can do so by forking the StellarGraph repository and creating a new branch addressing your feature from the develop branch. After writing code implementing the feature in this branch make a Pull Request to the develop branch of the main StellarGraph repository. See below for more details on submitting your pull request.\n\n\nAdding demos\n\n\nWe welcome new code that demonstrates the functionality of StellarGraph on different datasets. To add a demo it is best to give a clear and detailed explanation of the demo. This is best done by creating an issue addressing the new demo.\n\n\nDescribe the dataset that you are using, how it can be downloaded, and the licence conditions. Please don't put the dataset in the GitHub repository.\n\n\nIf this demo is replicating an experiment in the literature, please give a link to a paper describing the algorithm.\n\n\nIf you choose to implement the demo you can do so by forking the StellarGraph repository and creating a new branch from the develop branch. Put the code for the demo in the demos directory and make a Pull Request to the develop branch of the main StellarGraph repository. See the next section for more details on submitting your pull request.\n\n\nPull Requests\n\n\nIf your pull request will make a large change to the functionality of StellarGraph it is best that you discuss this first with the developers and the community. Please post a description of the changes to the StellarGraph as an issue in GitHub.\n\n\nStart checking out or updating the develop branch of StellarGraph on GitHub. Create a new branch for your feature or bugfix named 'feature/XXX' or 'bugfix/XXX' where XXX is a short but descriptive name.\n\n\nMake sure that any new features or bugfixes are tested by creating appropriate scripts in the tests directory. New features without relevant testing will not be approved.\n\n\nRun the entire test suite by running py.test tests/ in the top-level directory and ensure all tests pass. You will need to install the test requirements first: pip install -e .[tests].\n\n\nEnsure that any new function or class you introduce has proper docstrings and documentation. Make sure any code you have changed also has updated dostrings and documentation. Docstrings should follow the same style as the library, we follow the Google style (https://github.com/google/styleguide/blob/gh-pages/pyguide.md), examples of Google style docstrings can be found here.\n\n\nAll code in StellarGraph is formatted using the Black style engine (https://github.com/ambv/black). The automated tests include checking for Black formatted code, so make sure that you run black on all your code before submitting a pull request.\n\n\nWhen committing, use descriptive commit messages.\n\n\nUpdate the documentation. If introducing new functionality, make sure you include code snippets demonstrating the usage of your new feature.\n\n\nCreate a pull request on GitHub from your branch to develop branch. If you have already discussed the new features on GitHub with the developers and they are aware of what the pull request contains, then the developers will endeavour to approve the pull request promptly.\n\n\nContinuous Integration (CI)\nA pull request can only be merged if it passes tests. StellarGraph uses GitHub Actions to let a computer do the testing, and results are reported directly in each pull request. The CI configuration is in the ci.yml workflow file, and full set of workflow runs can be viewed at https://github.com/stellargraph/stellargraph/actions.\nExperimental code\nFunctions, methods and classes can be marked as experimental using the @experimental decorator. For example:\n``` python\nOn a class: (the reason argument is required)\n@experimental(reason=\"it has no documentation\")\nclass Foo:\n    pass\nOn a function: (the issues argument will link to those stellargraph issues)\n@experimental(reason=\"the API is not satisfactory\", issues=[123])\ndef bar():\n    pass\nclass Baz:\n    # On a method:\n    @experimental(reason=\"it is not fully tested\")\n    def f():\n        pass\n```\nThis should be applied to new code that isn't fully documented, tested or validated. This allows landing code faster and iterating on it inside the repository. The annotation will add an obvious \"warning\" admonition to the attached item's documentation, as well as emitting a dynamic warning (with the class ExperimentalWarning) when the function, method or class __init__ constructor is called.\nThis is meant to be a lightweight status, with a low bar for \"graduating\". Code does not need to be @experimental if it satisfies the following check-list:\n\n[ ] tests\n[ ] documentation for all classes, functions and their parameters\n[ ] a demo notebook, if applicable; if there are relevant research papers, the demo(s) should produce similar results, to validate that the implementation matches the description",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-04-13T07:35:51Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-22T09:33:38Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The StellarGraph library offers state-of-the-art algorithms for [graph machine learning](https://medium.com/stellargraph/knowing-your-neighbours-machine-learning-on-graphs-9b7c3d0d5896), making it easy to discover patterns and answer questions about graph-structured data. It can solve many machine learning tasks:\n\n- Representation learning for nodes and edges, to be used for visualisation and various downstream machine learning tasks;\n- [Classification and attribute inference of nodes](https://medium.com/stellargraph/can-graph-machine-learning-identify-hate-speech-in-online-social-networks-58e3b80c9f7e) or edges;\n- Classification of whole graphs;\n- Link prediction;\n- [Interpretation of node classification](https://medium.com/stellargraph/https-medium-com-stellargraph-saliency-maps-for-graph-machine-learning-5cca536974da) [8].\n\nGraph-structured data represent entities as nodes (or vertices) and relationships between them as edges (or links), and can include data associated with either as attributes. For example, a graph can contain people as nodes and friendships between them as links, with data like a person's age and the date a friendship was established. StellarGraph supports analysis of many kinds of graphs:\n\n- homogeneous (with nodes and links of one type),\n- heterogeneous (with more than one type of nodes and/or links)\n- knowledge graphs (extreme heterogeneous graphs with thousands of types of edges)\n- graphs with or without data associated with nodes\n- graphs with edge weights\n\nStellarGraph is built on [TensorFlow 2](https://tensorflow.org/) and its [Keras high-level API](https://www.tensorflow.org/guide/keras), as well as [Pandas](https://pandas.pydata.org) and [NumPy](https://www.numpy.org). It is thus user-friendly, modular and extensible. It interoperates smoothly with code that builds on these, such as the standard Keras layers and [scikit-learn](http://scikit-learn.github.io/stable), so it is easy to augment the core graph machine learning algorithms provided by StellarGraph. It is thus also [easy to install with `pip` or Anaconda](#installation).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.901776704342656
      ],
      "excerpt": "StellarGraph is a Python library for machine learning on graphs and networks. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9978347449435735
      ],
      "excerpt": "This is the only part that is specific to StellarGraph. The machine learning model consists of some graph convolution layers followed by a layer to compute the actual predictions as a TensorFlow tensor. StellarGraph makes it easy to construct all of these layers via the GCN model class. It also makes it easy to get input data in the right format via the StellarGraph graph data type and a data generator. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9088837601968681
      ],
      "excerpt": ": convert the raw data into StellarGraph's graph format for faster operations \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8592150082494644
      ],
      "excerpt": "generator = sg.mapper.FullBatchNodeGenerator(graph, method=\"gcn\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.959606636769283
      ],
      "excerpt": "The model is a conventional TensorFlow Keras model, and so tasks such as training and evaluation can use the functions offered by Keras. StellarGraph's data generators make it simple to construct the required Keras Sequences for input data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.909388443414469
      ],
      "excerpt": ": prepare the model for training with the Adam optimiser and an appropriate loss function \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9341453293581216,
        0.9375433469770822
      ],
      "excerpt": "This algorithm is spelled out in more detail in its extended narrated notebook. We provide [many more algorithms, each with a detailed example][demos]. \nThe StellarGraph library currently includes the following algorithms for graph machine learning: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9499979006819873,
        0.984261648009925,
        0.8706295542885945,
        0.9702826243838838,
        0.955666587104215,
        0.8682311251082209,
        0.9929275271159427,
        0.9547500914462475,
        0.9791900592983349,
        0.9512981888926286,
        0.9486101612374768
      ],
      "excerpt": "| GraphSAGE [1] | Supports supervised as well as unsupervised representation learning, node classification/regression, and link prediction for homogeneous networks. The current implementation supports multiple aggregation methods, including mean, maxpool, meanpool, and attentional aggregators. | \n| HinSAGE | Extension of GraphSAGE algorithm to heterogeneous networks. Supports representation learning, node classification/regression, and link prediction/regression for heterogeneous graphs. The current implementation supports mean aggregation of neighbour nodes, taking into account their types and the types of links between them. | \n| attri2vec [4] | Supports node representation learning, node classification, and out-of-sample node link prediction for homogeneous graphs with node attributes. | \n| Graph ATtention Network (GAT) [5] | The GAT algorithm supports representation learning and node classification for homogeneous graphs. There are versions of the graph attention layer that support both sparse and dense adjacency matrices. | \n| Graph Convolutional Network (GCN) [6] | The GCN algorithm supports representation learning and node classification for homogeneous graphs. There are versions of the graph convolutional layer that support both sparse and dense adjacency matrices. | \n| Cluster Graph Convolutional Network (Cluster-GCN) [10] | An extension of the GCN algorithm supporting representation learning and node classification for homogeneous graphs. Cluster-GCN scales to larger graphs and can be used to train deeper GCN models using Stochastic Gradient Descent. | \n| Simplified Graph Convolutional network (SGC) [7] | The SGC network algorithm supports representation learning and node classification for homogeneous graphs. It is an extension of the GCN algorithm that smooths the graph to bring in more distant neighbours of nodes without using multiple layers. | \n| (Approximate) Personalized Propagation of Neural Predictions (PPNP/APPNP) [9] | The (A)PPNP algorithm supports fast and scalable representation learning and node classification for attributed homogeneous graphs. In a semi-supervised setting, first a multilayer neural network is trained using the node attributes as input. The predictions from the latter network are then diffused across the graph using a method based on Personalized PageRank. | \n| Node2Vec [2] | The Node2Vec and Deepwalk algorithms perform unsupervised representation learning for homogeneous networks, taking into account network structure while ignoring node attributes. The node2vec algorithm is implemented by combining StellarGraph's random walk generator with the word2vec algorithm from Gensim. Learned node representations can be used in downstream machine learning models implemented using Scikit-learn, Keras, TensorFlow or any other Python machine learning library. | \n| Metapath2Vec [3] | The metapath2vec algorithm performs unsupervised, metapath-guided representation learning for heterogeneous networks, taking into account network structure while ignoring node attributes. The implementation combines StellarGraph's metapath-guided random walk generator and Gensim word2vec algorithm. As with node2vec, the learned node representations (node embeddings) can be used in downstream machine learning models to solve tasks such as node classification, link prediction, etc, for heterogeneous networks. | \n| Relational Graph Convolutional Network [11] | The RGCN algorithm performs semi-supervised learning for node representation and node classification on knowledge graphs. RGCN extends GCN to directed graphs with multiple edge types and works with both sparse and dense adjacency matrices.| \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "StellarGraph - Machine Learning on Graphs",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://stellargraph.readthedocs.io/",
      "technique": "Regular expression"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/stellargraph/stellargraph/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 330,
      "date": "Wed, 22 Dec 2021 19:24:23 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/stellargraph/stellargraph/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "stellargraph/stellargraph",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/docker/stellargraph-ci-runner/Dockerfile",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/docker/stellargraph/Dockerfile",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/docker/stellargraph-neo4j/Dockerfile",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/docker/stellargraph-treon/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/stellargraph/stellargraph/tree/develop/docs"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/community_detection/attacks_clustering_analysis.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/ensembles/ensemble-node-classification-example.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/ensembles/ensemble-link-prediction-example.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/use-cases/hateful-twitters.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/link-prediction/graphsage-link-prediction.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/link-prediction/attri2vec-link-prediction.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/link-prediction/gcn-link-prediction.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/link-prediction/node2vec-link-prediction.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/link-prediction/homogeneous-comparison-link-prediction.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/link-prediction/ctdne-link-prediction.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/link-prediction/metapath2vec-link-prediction.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/link-prediction/complex-link-prediction.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/link-prediction/distmult-link-prediction.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/link-prediction/hinsage-link-prediction.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/basics/loading-numpy.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/basics/loading-networkx.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/basics/loading-saving-neo4j.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/basics/loading-pandas.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/connector/neo4j/load-cora-into-neo4j.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/connector/neo4j/undirected-graphsage-on-cora-neo4j-example.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/connector/neo4j/directed-graphsage-on-cora-neo4j-example.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/connector/neo4j/cluster-gcn-on-cora-neo4j-example.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/embeddings/keras-node2vec-embeddings.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/embeddings/watch-your-step-embeddings.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/embeddings/deep-graph-infomax-embeddings.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/embeddings/graphsage-unsupervised-sampler-embeddings.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/embeddings/graphwave-embeddings.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/embeddings/metapath2vec-embeddings.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/embeddings/gcn-unsupervised-graph-embeddings.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/embeddings/attri2vec-embeddings.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/embeddings/node2vec-embeddings.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/zzz-internal-developers/graph-resource-usage.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/node-classification/ppnp-node-classification.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/node-classification/graphsage-node-classification.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/node-classification/gcn-deep-graph-infomax-fine-tuning-node-classification.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/node-classification/gcn-node-classification.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/node-classification/node2vec-weighted-node-classification.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/node-classification/graphsage-inductive-node-classification.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/node-classification/sgc-node-classification.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/node-classification/cluster-gcn-node-classification.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/node-classification/rgcn-node-classification.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/node-classification/keras-node2vec-node-classification.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/node-classification/node2vec-node-classification.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/node-classification/directed-graphsage-node-classification.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/node-classification/attri2vec-node-classification.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/node-classification/gat-node-classification.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/node-classification/gcn/gcn-cora-node-classification-example.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/interpretability/gcn-sparse-node-link-importance.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/interpretability/gcn-node-link-importance.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/interpretability/gat-node-link-importance.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/interpretability/hateful-twitters-interpretability.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/calibration/calibration-link-prediction.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/calibration/calibration-node-classification.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/time-series/gcn-lstm-time-series.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/graph-classification/dgcnn-graph-classification.ipynb",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/demos/graph-classification/gcn-supervised-graph-classification.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/scripts/create-nbsphinx-links.sh",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/scripts/whitespace.sh",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/scripts/ci/run_notebook.sh",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/scripts/ci/check-copyright-headers.sh",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/scripts/ci/format-dockerfiles.sh",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/.buildkite/steps/test-neo4j-notebooks.sh",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/.buildkite/steps/test-documentation.sh",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/.buildkite/steps/check-copyright-headers.sh",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/.buildkite/steps/test-demo-notebooks.sh",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/.buildkite/steps/script.sh",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/.buildkite/steps/test-single-notebook.sh",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/.buildkite/steps/conda-build.sh",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/docker/stellargraph-ci-runner/install-packages.sh",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/docker/stellargraph/build.sh",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/docker/stellargraph-neo4j/build.sh",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/docker/stellargraph-neo4j/install-lib.sh",
      "https://raw.githubusercontent.com/stellargraph/stellargraph/develop/docker/stellargraph-treon/build.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "First, clone the StellarGraph repository using `git`:\n```\ngit clone https://github.com/stellargraph/stellargraph.git\n```\n\nThen, `cd` to the StellarGraph folder, and install the library by executing the following commands:\n```\ncd stellargraph\npip install .\n```\n\nSome of the examples in the `demos` directory require installing additional dependencies as well as `stellargraph`. To install these dependencies as well as StellarGraph using `pip` execute the following command:\n```\npip install .[demos]\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "The StellarGraph library is available an [Anaconda Cloud](https://anaconda.org/stellargraph/stellargraph) and can be installed in [Anaconda Python](https://anaconda.com) using the command line `conda` tool, execute the following command:\n```\nconda install -c stellargraph stellargraph\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "To install StellarGraph library from [PyPI](https://pypi.org) using `pip`, execute the following command:\n```\npip install stellargraph\n```\n\n[Some of the examples][demos] require installing additional dependencies as well as `stellargraph`. To install these dependencies as well as StellarGraph using `pip` execute the following command:\n```\npip install stellargraph[demos]\n```\n\nThe community detection demos require `python-igraph` which is only available on some platforms. To install this in addition to the other demo requirements:\n```\npip install stellargraph[demos,igraph]\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "StellarGraph is a Python 3 library and we recommend using Python version `3.6`. The required Python version\ncan be downloaded and installed from [python.org](https://python.org/). Alternatively, use the Anaconda Python\nenvironment, available from [anaconda.com](https://www.anaconda.com/products/individual#Downloads).\n\nThe StellarGraph library can be installed from PyPI, from Anaconda Cloud, or directly from GitHub, as described below.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Data for StellarGraph can be prepared using common libraries like Pandas and scikit-learn.\n\n``` python\nimport pandas as pd\nfrom sklearn import model_selection\n\ndef load_my_data():\n    #: your own code to load data into Pandas DataFrames, e.g. from CSV files or a database\n    ...\n\nnodes, edges, targets = load_my_data()\n\n#: Use scikit-learn to compute training and test sets\ntrain_targets, test_targets = model_selection.train_test_split(targets, train_size=0.5)\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9975428324971546,
        0.9795176693394151,
        0.9955934409582594
      ],
      "excerpt": "Install StellarGraph using PyPI \nInstall StellarGraph in Anaconda Python \nInstall StellarGraph from GitHub source \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8778487586960795
      ],
      "excerpt": "Example: GCN \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9012248701992861,
        0.925671696398174
      ],
      "excerpt": "import stellargraph as sg \nimport tensorflow as tf \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8296709359322073
      ],
      "excerpt": "x_inp, x_out = gcn.in_out_tensors() #: create the input and output TensorFlow tensors \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8137953951863045
      ],
      "excerpt": ": use the input and output tensors to create a TensorFlow Keras model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8332345938787769
      ],
      "excerpt": ": train the model on the train set \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8063120715767058
      ],
      "excerpt": ": check model generalisation on the test set \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/stellargraph/stellargraph/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [2018] [Commonwealth Scientific and Industrial Research Organisation (CSIRO)]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "StellarGraph Machine Learning Library",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "stellargraph",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "stellargraph",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/stellargraph/stellargraph/blob/develop/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "huonw",
        "body": "**StellarGraph** is a Python library for machine learning on graphs and networks. It offers state-of-the-art algorithms for graph machine learning, making it easy to discover patterns and answer questions about graph-structured data.\r\n\r\nGet started with StellarGraph's newest graph machine learning features with `pip install stellargraph`.\r\n\r\nThis release is a small bug fix release on top of [1.2.0](https://github.com/stellargraph/stellargraph/releases/tag/v1.2.0).\r\n\r\n### Bug fixes and other changes\r\n\r\n- Update the URLs of some datasets (`Cora`, `PubMedDiabetes`, `CiteSeer`) for upstream changes [\\#1738](https://github.com/stellargraph/stellargraph/pull/1738), [\\#1759](https://github.com/stellargraph/stellargraph/pull/1759)\r\n- Add two missing layers to the `stellargraph.custom_keras_layers` dictionary [\\#1757](https://github.com/stellargraph/stellargraph/pull/1757)\r\n- Experimental changes: rename `RotHEScoring` to `RotHEScore` [\\#1756](https://github.com/stellargraph/stellargraph/pull/1756)\r\n- DevOps:\r\n  - Automated testing on macOS [\\#1752](https://github.com/stellargraph/stellargraph/pull/1752)\r\n  - Automated testing against Neo4j 4.1, in addition to Neo4j 3.5 and 4.0 [\\#1754](https://github.com/stellargraph/stellargraph/pull/1754)\r\n  - Other CI: [\\#1732](https://github.com/stellargraph/stellargraph/pull/1732), [\\#1740](https://github.com/stellargraph/stellargraph/pull/1740), [\\#1741](https://github.com/stellargraph/stellargraph/pull/1741), [\\#1744](https://github.com/stellargraph/stellargraph/pull/1744), [\\#1745](https://github.com/stellargraph/stellargraph/pull/1745), [\\#1747](https://github.com/stellargraph/stellargraph/pull/1747), [\\#1750](https://github.com/stellargraph/stellargraph/pull/1750), [\\#1751](https://github.com/stellargraph/stellargraph/pull/1751), [\\#1753](https://github.com/stellargraph/stellargraph/pull/1753)\r\n\r\n---\r\n\r\n[Full Changelog](https://github.com/stellargraph/stellargraph/compare/v1.2.0...v1.2.1)\r\n",
        "dateCreated": "2020-06-30T05:09:33Z",
        "datePublished": "2020-06-30T05:15:21Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v1.2.1",
        "name": "Release 1.2.1",
        "tag_name": "v1.2.1",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v1.2.1",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/28051446",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v1.2.1"
      },
      {
        "authorType": "User",
        "author_name": "timpitman",
        "body": "**StellarGraph** is a Python library for machine learning on graphs and networks. It offers state-of-the-art algorithms for graph machine learning, making it easy to discover patterns and answer questions about graph-structured data.\r\n\r\nGet started with StellarGraph's newest graph machine learning features with `pip install stellargraph`.\r\n\r\nJump in to this release, with the new and improved [demos and examples][demos-1.2.0]:\r\n\r\n- [Comparison of link prediction with random walks based node embedding][lp-comparison-1.2.0]\r\n- [Unsupervised training of a Cluster-GCN model with Deep Graph Infomax][dgi-1.2.0]\r\n\r\n[demos-1.2.0]: https://stellargraph.readthedocs.io/en/v1.2.0/demos/index.html\r\n[lp-comparison-1.2.0]: https://stellargraph.readthedocs.io/en/v1.2.0/demos/link-prediction/homogeneous-comparison-link-prediction.html\r\n[dgi-1.2.0]: https://stellargraph.readthedocs.io/en/v1.2.0/demos/embeddings/deep-graph-infomax-embeddings.html\r\n\r\n### Major features and improvements\r\n\r\n- Better Windows support: StellarGraph's existing ability to run on Windows has been improved, with all tests running on CI ([\\#1696](https://github.com/stellargraph/stellargraph/pull/1696)) and several small fixes ([\\#1671](https://github.com/stellargraph/stellargraph/pull/1671), [\\#1704](https://github.com/stellargraph/stellargraph/pull/1704), [\\#1705](https://github.com/stellargraph/stellargraph/pull/1705)).\r\n- Edge weights are supported in GraphSAGE ([\\#1667](https://github.com/stellargraph/stellargraph/pull/1667)) and Watch Your Step ([\\#1604](https://github.com/stellargraph/stellargraph/pull/1604)). This is in addition to the existing support for edge weights in GCN, GAT, APPNP, PPNP, RGCN, GCN graph classification, DeepGraphCNN and Node2Vec sampling.\r\n- Better and more demonstration notebooks and documentation to make the library more accessible to new and existing users:\r\n  - [A demo notebook][lp-comparison-1.2.0] for a comparison of link prediction with random walks based node embedding, showing Node2Vec, Attri2Vec, GraphSAGE and GCN [\\#1658](https://github.com/stellargraph/stellargraph/pull/1658)\r\n  - [The demo notebook][dgi-1.2.0] for unsupervised training with Deep Graph Infomax has been expanded with more explanation and links [\\#1257](https://github.com/stellargraph/stellargraph/pull/1257)\r\n  - The documentation for models, generators and other elements now has many more links to other relevant items in a \"See also\" box, making it easier to fit pieces together (examples: [`GraphSAGE`][gs-docs-1.2.0], [`GraphSAGENodeGenerator`][gs-gen-docs-1.2.0], [`BiasedRandomWalk`][brw-docs-1.2.0]) [\\#1718](https://github.com/stellargraph/stellargraph/pull/1718)\r\n- The Cluster-GCN training procedure supports unsupervised training via Deep Graph Infomax; this allows for scalable training of GCN, APPNP and GAT models, and includes connecting to Neo4j for large graphs [demo][dgi-1.2.0] ([\\#1257](https://github.com/stellargraph/stellargraph/pull/1257))\r\n- `KGTripleGenerator` now supports the self-adversarial negative sampling training procedure for knowledge graph algorithms (from RotatE), via `generator.flow(..., sample_strategy=\"self-adversarial\")` [docs][self-adv-1.2.0]\r\n\r\n[self-adv-1.2.0]: https://stellargraph.readthedocs.io/en/v1.2.0/api.html#stellargraph.mapper.KGTripleGenerator.flow\r\n[gs-docs-1.2.0]: https://stellargraph.readthedocs.io/en/v1.2.0/api.html#stellargraph.layer.GraphSAGE\r\n[gs-gen-docs-1.2.0]: https://stellargraph.readthedocs.io/en/v1.2.0/api.html#stellargraph.mapper.GraphSAGENodeGenerator\r\n[brw-docs-1.2.0]: https://stellargraph.readthedocs.io/en/v1.2.0/api.html#stellargraph.data.BiasedRandomWalk\r\n\r\n### Deprecations\r\n\r\n- The `ClusterGCN` model has been replaced with the `GCN` class. In the previous 1.1.0 release, GCN, APPNP and GAT were generalised to support the Cluster-GCN training procedure via `ClusterNodeGenerator` (which includes Neo4j support). The `ClusterGCN` model is now redundant and thus is deprecated: however, it still works without behaviour change.\r\n\r\n### Experimental features\r\n\r\nSome new algorithms and features are still under active development, and are available as an experimental preview. However, they may not be easy to use: their documentation or testing may be incomplete, and they may change dramatically from release to release. The experimental status is noted in the documentation and at runtime via prominent warnings.\r\n\r\n- `RotE`, `RotH`: knowledge graph link prediction algorithms that combine TransE and RotatE in Euclidean or hyperbolic space, respectively [\\#1539](https://github.com/stellargraph/stellargraph/pull/1539)\r\n\r\n### Bug fixes and other changes\r\n\r\n- There are now tests for saving and loading a Keras `Model` constructed every model in StellarGraph [\\#1676](https://github.com/stellargraph/stellargraph/pull/1676). This includes fixes for some models ([\\#1677](https://github.com/stellargraph/stellargraph/pull/1677), [\\#1682](https://github.com/stellargraph/stellargraph/pull/1682)). Known issues: sparse models such as GCN and RGCN (see [\\#1251](https://github.com/stellargraph/stellargraph/issues/1251) for more info and a work-around using `tf-nightly`), experimental GCN-LSTM ([#1681](https://github.com/stellargraph/stellargraph/issues/1681)).\r\n- Various documentation, demo and error message fixes and improvements: better internal linking [\\#1404](https://github.com/stellargraph/stellargraph/pull/1404), automated spell checking [\\#1583](https://github.com/stellargraph/stellargraph/pull/1583), [\\#1663](https://github.com/stellargraph/stellargraph/pull/1663), [\\#1665](https://github.com/stellargraph/stellargraph/pull/1665), [\\#1684](https://github.com/stellargraph/stellargraph/pull/1684), improved rendering [\\#1722](https://github.com/stellargraph/stellargraph/pull/1722) including a better sidebar [\\#1512](https://github.com/stellargraph/stellargraph/pull/1512), [\\#1729](https://github.com/stellargraph/stellargraph/pull/1729), [\\#1730](https://github.com/stellargraph/stellargraph/pull/1730)\r\n- DevOps changes:\r\n  - CI has been moved from Buildkite to GitHub Actions (tracking issue: [\\#1687](https://github.com/stellargraph/stellargraph/issues/1687); pull requests: [\\#1688](https://github.com/stellargraph/stellargraph/pull/1688), [\\#1692](https://github.com/stellargraph/stellargraph/pull/1692), [\\#1690](https://github.com/stellargraph/stellargraph/pull/1690), [\\#1691](https://github.com/stellargraph/stellargraph/pull/1691), [\\#1693](https://github.com/stellargraph/stellargraph/pull/1693), [\\#1694](https://github.com/stellargraph/stellargraph/pull/1694), [\\#1701](https://github.com/stellargraph/stellargraph/pull/1701), [\\#1707](https://github.com/stellargraph/stellargraph/pull/1707), [\\#1712](https://github.com/stellargraph/stellargraph/pull/1712), [\\#1714](https://github.com/stellargraph/stellargraph/pull/1714), [\\#1715](https://github.com/stellargraph/stellargraph/pull/1715), [\\#1717](https://github.com/stellargraph/stellargraph/pull/1717), [\\#1719](https://github.com/stellargraph/stellargraph/pull/1719))\r\n  - CI: [\\#1655](https://github.com/stellargraph/stellargraph/pull/1655), [\\#1672](https://github.com/stellargraph/stellargraph/pull/1672), [\\#1673](https://github.com/stellargraph/stellargraph/pull/1673), [\\#1679](https://github.com/stellargraph/stellargraph/pull/1679), [\\#1710](https://github.com/stellargraph/stellargraph/pull/1710), [\\#1721](https://github.com/stellargraph/stellargraph/pull/1721), [\\#1724](https://github.com/stellargraph/stellargraph/pull/1724)\r\n\r\n---\r\n\r\n[Full Changelog](https://github.com/stellargraph/stellargraph/compare/v1.1.0...v1.2.0)",
        "dateCreated": "2020-06-25T09:36:12Z",
        "datePublished": "2020-06-25T09:54:12Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v1.2.0",
        "name": "Release 1.2.0",
        "tag_name": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v1.2.0",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/27909340",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v1.2.0"
      },
      {
        "authorType": "User",
        "author_name": "huonw",
        "body": "**StellarGraph** is a Python library for machine learning on graphs and networks. It offers state-of-the-art algorithms for graph machine learning, making it easy to discover patterns and answer questions about graph-structured data.\r\n\r\nGet started with StellarGraph's newest graph machine learning features with `pip install stellargraph`.\r\n\r\nJump in to this release, with the new and improved [demos and examples][demos-1.1.0]:\r\n\r\n- Neo4j graph database support: [Cluster-GCN][neo4j-cluster-1.1.0], [GraphSAGE][neo4j-gs-1.1.0], [all demos][neo4j-demos-1.1.0]\r\n- [Semi-supervised node classification via GCN, Deep Graph Infomax and fine-tuning][dgi-fine-tuning-1.1.0]\r\n- [Loading data into StellarGraph from NumPy][loading-numpy-1.1.0]\r\n- [Link prediction with Metapath2Vec][metapath-lp-1.1.0]\r\n- [Unsupervised graph classification/representation learning via distances][unsup-graph-rl-1.1.0]\r\n- [RGCN section of Node representation learning with Deep Graph Infomax][unsup-rgcn-1.1.0]\r\n- Node2Vec with StellarGraph components: [representation learning][keras-n2v-rl-1.1.0], [node classification][keras-n2v-nc-1.1.0]\r\n- Expanded Attri2Vec explanation: [representation learning][a2v-rl-1.1.0], [node classification][a2v-nc-1.1.0], [link prediction][a2v-lp-1.1.0]\r\n\r\n[demos-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/demos/index.html\r\n[neo4j-demos-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/demos/connector/neo4j/index.html\r\n[neo4j-cluster-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/demos/connector/neo4j/cluster-gcn-on-cora-neo4j-example.html\r\n[neo4j-gs-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/demos/connector/neo4j/undirected-graphsage-on-cora-neo4j-example.html\r\n[dgi-fine-tuning-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/demos/node-classification/gcn-deep-graph-infomax-fine-tuning-node-classification.html\r\n[loading-numpy-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/demos/basics/loading-numpy.html\r\n[metapath-lp-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/demos/link-prediction/metapath2vec-link-prediction.html\r\n[unsup-graph-rl-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/demos/embeddings/gcn-unsupervised-graph-embeddings.html\r\n[unsup-rgcn-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/demos/embeddings/deep-graph-infomax-embeddings.html#Heteogeneous-models\r\n[keras-n2v-rl-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/demos/embeddings/keras-node2vec-embeddings.html\r\n[keras-n2v-nc-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/demos/node-classification/keras-node2vec-node-classification.html\r\n[a2v-rl-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/demos/embeddings/attri2vec-embeddings.html\r\n[a2v-nc-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/demos/node-classification/attri2vec-node-classification.html\r\n[a2v-lp-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/demos/link-prediction/attri2vec-link-prediction.html\r\n\r\n### Major features and improvements\r\n\r\n- Support for the Neo4j graph database has been significantly improved:\r\n  - There is now [a `Neo4jStellarGraph` class][neo4j-sg-1.1.0] that packages up a connection to a Neo4j instance, and allows it to be used for machine learning algorithms including the existing Neo4j and GraphSAGE functionality [demo][neo4j-gs-1.1.0], [\\#1595](https://github.com/stellargraph/stellargraph/pull/1595), [\\#1598](https://github.com/stellargraph/stellargraph/pull/1598).\r\n  - The `ClusterNodeGenerator` class now supports `Neo4jStellarGraph` in addition to the in-memory `StellarGraph` class, allowing it to be used to train models like GCN and GAT with data stored entirely in Neo4j [demo][neo4j-cluster-1.1.0] ([\\#1561](https://github.com/stellargraph/stellargraph/pull/1561), [\\#1594](https://github.com/stellargraph/stellargraph/pull/1594), [\\#1613](https://github.com/stellargraph/stellargraph/pull/1613))\r\n- Better and more demonstration notebooks and documentation to make the library more accessible to new and existing users:\r\n  - There is now [a glossary][glossary-1.1.0] that explains some terms specific to graphs, machine learning and graph machine learning [\\#1570](https://github.com/stellargraph/stellargraph/pull/1570)\r\n  - [A new demo notebook][dgi-fine-tuning-1.1.0] for semi-supervised node classification using Deep Graph Infomax and GCN [\\#1587](https://github.com/stellargraph/stellargraph/pull/1587)\r\n  - [A new demo notebook][metapath-lp-1.1.0] for link prediction using the Metapath2Vec algorithm [\\#1614](https://github.com/stellargraph/stellargraph/pull/1614)\r\n- New algorithms:\r\n  - Unsupervised graph representation learning [demo][unsup-graph-rl-1.1.0] ([\\#1626](https://github.com/stellargraph/stellargraph/pull/1626))\r\n  - Unsupervised RGCN with Deep Graph Infomax [demo][unsup-rgcn-1.1.0] ([\\#1258](https://github.com/stellargraph/stellargraph/pull/1258))\r\n  - Native Node2Vec using Tensorflow Keras, not the gensim library, [demo of representation learning][keras-n2v-rl-1.1.0], [demo of node classification][keras-n2v-nc-1.1.0] ([\\#536](https://github.com/stellargraph/stellargraph/pull/536), [\\#1566](https://github.com/stellargraph/stellargraph/pull/1566))\r\n  - The `ClusterNodeGenerator` class can be used to train GCN, GAT, APPNP and PPNP models in addition to the ClusterGCN model [\\#1585](https://github.com/stellargraph/stellargraph/pull/1585)\r\n- The `StellarGraph` class continues to get smaller, faster and more flexible:\r\n  - Node features can now be specified as NumPy arrays or the newly added thin `IndexedArray` wrapper, which does no copies and has minimal runtime overhead [demo][loading-numpy-1.1.0] ([\\#1535](https://github.com/stellargraph/stellargraph/pull/1535), [\\#1556](https://github.com/stellargraph/stellargraph/pull/1556), [\\#1599](https://github.com/stellargraph/stellargraph/pull/1599)). They can also now be multidimensional for each node [\\#1561](https://github.com/stellargraph/stellargraph/pull/1561).\r\n  - Edges can now have features, taken as any extra/unused columns in the input DataFrames [demo][edge-features-1.1.0] ([\\#1574](https://github.com/stellargraph/stellargraph/pull/1574))\r\n  - Adjacency lists used for random walks and GraphSAGE/HinSAGE are constructed with NumPy and stored as contiguous arrays instead of dictionaries, cutting the time and memory or construction by an order of magnitude [\\#1296](https://github.com/stellargraph/stellargraph/pull/1296)\r\n  - The peak memory usage of construction and adjacency list building is now monitored to ensure that there are not large spikes for large graphs, that exceed available memory [\\#1546](https://github.com/stellargraph/stellargraph/pull/1546). This peak usage has thus been optimised: [\\#1551](https://github.com/stellargraph/stellargraph/pull/1551),\r\n  - Other optimisations: the `edge_arrays`, `neighbor_arrays`, `in_node_arrays` and `out_node_arrays` methods have been added, reducing time and memory overhead by leaving data as its underlying NumPy array [\\#1253](https://github.com/stellargraph/stellargraph/pull/1253); the `node_type` method now supports multiple nodes as input, making algorithms like HinSAGE and Metapath2Vec much faster [\\#1452](https://github.com/stellargraph/stellargraph/pull/1452); the default edge weight of 1 no longer consumes significant memory [\\#1610](https://github.com/stellargraph/stellargraph/pull/1610).\r\n- Overall performance and memory usage improvements since 1.0.0, in numbers:\r\n  - A reddit graph has 233 thousand nodes and 11.6 million edges:\r\n    - construction without node features is now 2.3\u00d7 faster, uses 31% less memory and has a memory peak 57% smaller.\r\n    - construction with node features from NumPy arrays is 6.8\u00d7 faster, uses 6.5% less memory overall and 85% less new memory (the majority of the memory is shared with the original NumPy arrays), and has a memory peak (above the raw data set) 70% smaller, compared to Pandas DataFrames in 1.0.0.\r\n    - adjacency lists are 4.7-5.0\u00d7 faster to construct, use 28% less memory and have a memory peak 60% smaller.\r\n  - Various random walkers are faster: `BiasedRandomWalk` is up to 30\u00d7 faster with weights and 5\u00d7 faster without weights on MovieLens and up to 100\u00d7 faster on some synthetic datasets, `UniformRandomMetapathWalk` is up to 17\u00d7 faster (on MovieLens), `UniformRandomWalk` is up to 1.4\u00d7 (on MovieLens).\r\n- Tensorflow 2.2 and thus Python 3.8 are now supported [\\#1278](https://github.com/stellargraph/stellargraph/pull/1278)\r\n\r\n[glossary-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/glossary.html\r\n[neo4j-sg-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/api.html#stellargraph.connector.neo4j.Neo4jStellarGraph\r\n[edge-features-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/demos/basics/loading-pandas.html#Edge-features\r\n\r\n\r\n### Experimental features\r\n\r\nSome new algorithms and features are still under active development, and are available as an experimental preview. However, they may not be easy to use: their documentation or testing may be incomplete, and they may change dramatically from release to release. The experimental status is noted in the documentation and at runtime via prominent warnings.\r\n\r\n- `RotatE`: a knowledge graph link prediction algorithm that uses complex rotations (`|z| = 1`) to encode relations [\\#1522](https://github.com/stellargraph/stellargraph/pull/1522)\r\n- `GCN_LSTM` (renamed from `GraphConvolutionLSTM`): time series prediction on spatio-temporal data. It is still experimental, but has been improved since last release:\r\n  - [the `SlidingFeaturesNodeGenerator` class][sliding-1.1.0] has been added to yield data appropriate for the model, straight from a `StellarGraph` instance containing time series data as node features [\\#1564](https://github.com/stellargraph/stellargraph/pull/1564)\r\n  - the hidden graph convolution layers can now have a custom output size [\\#1555](https://github.com/stellargraph/stellargraph/pull/1555)\r\n  - the model now supports multivariate input and output, including via the `SlidingFeaturesNodeGenerator` class (with multidimensional node features) [\\#1580](https://github.com/stellargraph/stellargraph/pull/1580)\r\n  - unit tests have been added [\\#1560](https://github.com/stellargraph/stellargraph/pull/1560)\r\n- Neo4j support: some classes have been renamed from `Neo4J...` (uppercase `J`) to `Neo4j...` (lowercase `j`).\r\n\r\n[sliding-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/api.html#stellargraph.mapper.SlidingFeaturesNodeGenerator\r\n\r\n### Bug fixes and other changes\r\n\r\n- Edge weights are supported in methods using `FullBatchNodeGenerator` (GCN, GAT, APPNP, PPNP), `RelationalFullBatchNodeGenerator` (RGCN) and `PaddedGraphGenerator` (GCN graph classification, DeepGraphCNN), via the `weighted=True` parameter [\\#1600](https://github.com/stellargraph/stellargraph/pull/1600)\r\n- The `StellarGraph` class now supports conversion between node type and edge type names and equivalent ilocs [\\#1366](https://github.com/stellargraph/stellargraph/pull/1366), which allows optimising some algorithms ([\\#1367](https://github.com/stellargraph/stellargraph/pull/1367) optimises ranking with the DistMult algorithm from 42.6s to 20.7s on the FB15k dataset)\r\n- `EdgeSplitter` no longer prints progress updates [\\#1619](https://github.com/stellargraph/stellargraph/pull/1619)\r\n- The `info` method now merges edge types triples like `A-[r]->B` and `B-[r]->A` in undirected graphs [\\#1650](https://github.com/stellargraph/stellargraph/pull/1650)\r\n- There is now [a notebook][resource-usage-1.1.0] capturing time and memory resource usage on non-synthetic datasets, designed to help StellarGraph contributors understand and optimise the `StellarGraph` class [\\#1547](https://github.com/stellargraph/stellargraph/pull/1547)\r\n- Various documentation, demo and error message fixes and improvements: [\\#1516](https://github.com/stellargraph/stellargraph/pull/1516) (thanks @thatlittleboy), [\\#1519](https://github.com/stellargraph/stellargraph/pull/1519), [\\#1520](https://github.com/stellargraph/stellargraph/pull/1520), [\\#1537](https://github.com/stellargraph/stellargraph/pull/1537), [\\#1541](https://github.com/stellargraph/stellargraph/pull/1541), [\\#1542](https://github.com/stellargraph/stellargraph/pull/1542), [\\#1577](https://github.com/stellargraph/stellargraph/pull/1577), [\\#1605](https://github.com/stellargraph/stellargraph/pull/1605), [\\#1606](https://github.com/stellargraph/stellargraph/pull/1606), [\\#1608](https://github.com/stellargraph/stellargraph/pull/1608), [\\#1624](https://github.com/stellargraph/stellargraph/pull/1624), [\\#1628](https://github.com/stellargraph/stellargraph/pull/1628), [\\#1632](https://github.com/stellargraph/stellargraph/pull/1632), [\\#1634](https://github.com/stellargraph/stellargraph/pull/1634), [\\#1636](https://github.com/stellargraph/stellargraph/pull/1636), [\\#1643](https://github.com/stellargraph/stellargraph/pull/1643), [\\#1645](https://github.com/stellargraph/stellargraph/pull/1645), [\\#1649](https://github.com/stellargraph/stellargraph/pull/1649), [\\#1652](https://github.com/stellargraph/stellargraph/pull/1652)\r\n- DevOps changes:\r\n  - CI: [\\#1518](https://github.com/stellargraph/stellargraph/pull/1518), tests are run regularly on a GPU [\\#1249](https://github.com/stellargraph/stellargraph/pull/1249), [\\#1647](https://github.com/stellargraph/stellargraph/pull/1647), [\\#1653](https://github.com/stellargraph/stellargraph/pull/1653)\r\n  - Other: [\\#1558](https://github.com/stellargraph/stellargraph/pull/1558)\r\n\r\n[resource-usage-1.1.0]: https://stellargraph.readthedocs.io/en/v1.1.0/demos/zzz-internal-developers/graph-resource-usage.html\r\n\r\n---\r\n\r\n[Full Changelog](https://github.com/stellargraph/stellargraph/compare/v1.0.0...v1.1.0)\r\n\r\n",
        "dateCreated": "2020-06-02T08:20:47Z",
        "datePublished": "2020-06-02T08:41:45Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v1.1.0",
        "name": "Release 1.1.0",
        "tag_name": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v1.1.0",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/27126094",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v1.1.0"
      },
      {
        "authorType": "User",
        "author_name": "kjun9",
        "body": "This [1.0 release of StellarGraph](https://medium.com/stellargraph/stellargraph-1-0-taking-graph-machine-learning-to-a-new-level-2bd6a04fbc77) is the culmination of three years of active research and engineering to deliver an open-source, user-friendly library for machine learning (ML) on graphs and networks.\r\n\r\nJump in to this release, with the new demos and examples:\r\n\r\n- [More helpful indexing and guidance for demos in our API documentation][demos-1.0.0]\r\n- [Loading from Neo4j][neo4j-1.0.0]\r\n- [More explanatory Node2Vec link prediction][n2v-lp-1.0.0]\r\n- [Unsupervised `GraphSAGE` and `HinSAGE` via `DeepGraphInfomax`][dgi-1.0.0]\r\n- Graph classification [with `GCNSupervisedGraphClassification`][gc-gcn-1.0.0] and [with `DeepGraphCNN`][gc-dgcnn-1.0.0]\r\n- [Time series prediction using spatial information, using `GraphConvolutionLSTM`][gcn-lstm-1.0.0] (experimental)\r\n\r\n[neo4j-1.0.0]: https://stellargraph.readthedocs.io/en/v1.0.0/demos/basics/loading-saving-neo4j.html\r\n[n2v-lp-1.0.0]: https://stellargraph.readthedocs.io/en/v1.0.0/demos/link-prediction/node2vec-link-prediction.html\r\n[dgi-1.0.0]: https://stellargraph.readthedocs.io/en/v1.0.0/demos/embeddings/deep-graph-infomax-embeddings.html\r\n[gc-gcn-1.0.0]: https://stellargraph.readthedocs.io/en/v1.0.0/demos/graph-classification/gcn-supervised-graph-classification.html\r\n[gc-dgcnn-1.0.0]: https://stellargraph.readthedocs.io/en/v1.0.0/demos/graph-classification/dgcnn-graph-classification.html\r\n[gcn-lstm-1.0.0]: https://stellargraph.readthedocs.io/en/v1.0.0/demos/time-series/gcn-lstm-time-series.html\r\n\r\n### Major features and improvements\r\n\r\n- Better demonstration notebooks and documentation to make the library more accessible to new and existing users:\r\n  - Notebooks are [now published in the API documentation][demos-1.0.0], for better & faster rendering and more convenient access [\\#1279](https://github.com/stellargraph/stellargraph/pull/1279) [\\#1433](https://github.com/stellargraph/stellargraph/pull/1433) [\\#1448](https://github.com/stellargraph/stellargraph/pull/1448)\r\n  - The [demos indices][demos-1.0.0] and [READMEs](demos/) now contain more guidance and explanation to make it easier to find a relevant example [\\#1200](https://github.com/stellargraph/stellargraph/pull/1200)\r\n  - Several demos have been added or rewritten: [loading data from Neo4j][neo4j-1.0.0] [\\#1184](https://github.com/stellargraph/stellargraph/pull/1184), [link prediction using Node2Vec][n2v-lp-1.0.0] [\\#1190](https://github.com/stellargraph/stellargraph/pull/1190), [graph classification with GCN][gc-gcn-1.0.0], [graph classification with DGCNN][gc-dgcnn-1.0.0]\r\n  - Notebooks now detect if they're being used with an incorrect version of the StellarGraph library, eliminating confusion about version mismatches [\\#1242](https://github.com/stellargraph/stellargraph/pull/1242)\r\n  - Notebooks are easier to download, both individually via a button on each in the API documentation [\\#1460](https://github.com/stellargraph/stellargraph/pull/1460) and in bulk [\\#1377](https://github.com/stellargraph/stellargraph/pull/1377) [\\#1459](https://github.com/stellargraph/stellargraph/pull/1459)\r\n  - Notebooks have been re-arranged and renamed to be more consistent and easier to find [\\#1471](https://github.com/stellargraph/stellargraph/pull/1471)\r\n- New algorithms:\r\n  - `GCNSupervisedGraphClassification`: supervised graph classification model based on Graph Convolutional layers (GCN) [\\#929](https://github.com/stellargraph/stellargraph/issues/929), [demo][gc-gcn-1.0.0].\r\n  - `DeepGraphCNN` (DGCNN): supervised graph classification using a stack of graph convolutional layers followed by `SortPooling`, and standard convolutional and pooling (such as `Conv1D` and `MaxPool1D`) [\\#1212](https://github.com/stellargraph/stellargraph/pull/1212) [\\#1265](https://github.com/stellargraph/stellargraph/pull/1265), [demo][gc-dgcnn-1.0.0]\r\n  - `SortPooling` layer: the node pooling layer introduced in [Zhang et al](https://www.cse.wustl.edu/~muhan/papers/AAAI_2018_DGCNN.pdf) [\\#1210](https://github.com/stellargraph/stellargraph/pull/1210)\r\n- `DeepGraphInfomax` can be used to train almost any model in an unsupervised way, via the `corrupt_index_groups` parameter to `CorruptedGenerator` [\\#1243](https://github.com/stellargraph/stellargraph/pull/1243), [demo][dgi-1.0.0]. Additionally, many algorithms provide defaults and so can be used with `DeepGraphInfomax` without specifying this parameter:\r\n  - any model using `FullBatchNodeGenerator`, including models supported in StellarGraph 0.11: `GCN`, `GAT`, `PPNP` and `APPNP`\r\n  - `GraphSAGE` [\\#1162](https://github.com/stellargraph/stellargraph/pull/1162)\r\n  - `HinSAGE` for heterogeneous graphs with node features [\\#1254](https://github.com/stellargraph/stellargraph/pull/1254)\r\n- `UnsupervisedSampler` supports a `walker` parameter to use other random walking algorithms such as `BiasedRandomWalk`, in addition to the default `UniformRandomWalk`. [\\#1187](https://github.com/stellargraph/stellargraph/pull/1187)\r\n- The `StellarGraph` class is now smaller, faster and easier to construct and use:\r\n  - The `StellarGraph(..., edge_type_column=...)` parameter can be used to construct a heterogeneous graph from a single flat `DataFrame`, containing a column of the edge types [\\#1284](https://github.com/stellargraph/stellargraph/pull/1284). This avoids the need to build separate `DataFrame`s for each type, and is significantly faster when there are many types. Using `edge_type_column` gives a 2.6\u00d7 speedup for loading the `stellargraph.datasets.FB15k` dataset (with almost 600 thousand edges across 1345 types).\r\n  - `StellarGraph`'s internal cache of node adjacencies is now computed lazily [\\#1291](https://github.com/stellargraph/stellargraph/pull/1291) and takes into account whether the graph is directed or not [\\#1463](https://github.com/stellargraph/stellargraph/pull/1463), and they now use the smallest integer type they can [\\#1289](https://github.com/stellargraph/stellargraph/pull/1289)\r\n  - `StellarGraph`'s internal list of source and target nodes are now stored using integer \"ilocs\" [\\#1267](https://github.com/stellargraph/stellargraph/pull/1267), reducing memory use and making some functionality significantly faster [\\#1444](https://github.com/stellargraph/stellargraph/pull/1444) [\\#1446](https://github.com/stellargraph/stellargraph/pull/1446))\r\n  - Functions like `graph.node_features()` no longer needs `node_type` specified if `graph` has only one node type (this includes classes like `HinSAGENodeGenerator`, which no longer needs `head_node_type` if there is only one node type) [\\#1375](https://github.com/stellargraph/stellargraph/pull/1375)\r\n- Overall performance and memory usage improvements since 0.11, in numbers:\r\n  - The FB15k graph has 15 thousand nodes and 483 thousand edges: it is now 7\u00d7 faster and 4\u00d7 smaller to construct (without adjacency lists). It is still about 2\u00d7 smaller when directed or undirected adjacency lists are computed.\r\n  - Directed adjacency matrix construction is up to 2\u00d7 faster\r\n  - Various samplers and random walkers are faster: `HinSAGENodeGenerator` is 3\u00d7 faster (on `MovieLens`), `Attri2VecNodeGenerator` is 4\u00d7 faster (on `CiteSeer`), weighted `BiasedRandomWalk` is up to 3\u00d7 faster, `UniformRandomMetapathWalk` is up to 7\u00d7 faster\r\n\r\n\r\n[demos-1.0.0]: https://stellargraph.readthedocs.io/en/v1.0.0/demos/index.html\r\n\r\n### Breaking changes\r\n\r\n- The `stellargraph/stellargraph` docker image wasn't being published in an optimal way, so we have stopped updating it for now [\\#1455](https://github.com/stellargraph/stellargraph/pull/1455)\r\n- Edge weights are now validated to be numeric when creating a `StellarGraph`. Previously edge weights could be any type, but all algorithms that use them would fail with non-numeric types. [\\#1191](https://github.com/stellargraph/stellargraph/pull/1191)\r\n- Full batch layers no longer support an \"output indices\" tensor to filter the output rows to a selected set of nodes [\\#1204](https://github.com/stellargraph/stellargraph/pull/1204) (this does **not** affect models like `GCN`, only the layers within them: `APPNPPropagationLayer`, `ClusterGraphConvolution`, `GraphConvolution`, `GraphAttention`, `GraphAttentionSparse`, `PPNPPropagationLayer`, `RelationalGraphConvolution`). Migration: post-process the output using `tf.gather` manually or the new `sg.layer.misc.GatherIndices` layer.\r\n- `GraphConvolution` has been generalised to work with batch size > 1, subsuming the functionality of the now-deprecated `ClusterGraphConvolution` (and `GraphClassificationConvolution`) [\\#1205](https://github.com/stellargraph/stellargraph/pull/1205). Migration: replace `stellargraph.layer.ClusterGraphConvolution` with `stellargraph.layer.GraphConvolution`.\r\n- `BiasedRandomWalk` now takes multi-edges into consideration instead of collapsing them when traversing the graph. It previously required all multi-edges had to same weight and only counted one of them when considering where to walk, but now a multi-edge is equivalent to having an edge whose weight is the sum of the weights of all edges in the multi-edge [\\#1444](https://github.com/stellargraph/stellargraph/pull/1444)\r\n\r\n### Experimental features\r\n\r\nSome new algorithms and features are still under active development, and are available as an experimental preview. However, they may not be easy to use: their documentation or testing may be incomplete, and they may change dramatically from release to release. The experimental status is noted in the documentation and at runtime via prominent warnings.\r\n\r\n- `GraphConvolutionLSTM`: time series prediction on spatio-temporal data, combining GCN with a [LSTM](https://en.wikipedia.org/wiki/Long_short-term_memory) model to augment the conventional time-series model with information from nearby data points [\\#1085](https://github.com/stellargraph/stellargraph/pull/1085), [demo][gcn-lstm-1.0.0]\r\n\r\n### Bug fixes and other changes\r\n\r\n- Random walk classes like `UniformRandomWalk` and `BiasedRandomWalk` can have their hyperparameters set on construction, in addition to in each call to `run` [\\#1179](https://github.com/stellargraph/stellargraph/pull/1179)\r\n- Node feature sampling was made ~4\u00d7 faster by ensuring a better data layout, this makes some configurations of `GraphSAGE` (and `HinSAGE`) noticably faster [\\#1225](https://github.com/stellargraph/stellargraph/pull/1225)\r\n- The `PROTEINS` dataset has been added to `stellargraph.datasets`, for graph classification [\\#1282](https://github.com/stellargraph/stellargraph/pull/1282)\r\n- The `BlogCatalog3` dataset can now be successfully downloaded again [\\#1283](https://github.com/stellargraph/stellargraph/pull/1283)\r\n- Knowledge graph model evaluation via `rank_edges_against_all_nodes` now defaults to the `random` strategy for breaking ties, and supports `top` (previous default) and `bottom` as alternatives [\\#1223](https://github.com/stellargraph/stellargraph/pull/1223)\r\n- Creating a `RelationalFullBatchNodeGenerator` is now significantly faster and requires much less memory (18\u00d7 speedup and 560\u00d7 smaller for the `stellargraph.datasets.AIFB` dataset) [\\#1274](https://github.com/stellargraph/stellargraph/pull/1274)\r\n- Creating a `FullBatchNodeGenerator` or `FullBatchLinkGenerator` is now significantly faster and requires much less memory (3\u00d7 speedup and 480\u00d7 smaller for the `stellargraph.datasets.PubMedDiabetes` dataset) [\\#1277](https://github.com/stellargraph/stellargraph/pull/1277)\r\n- `StellarGraph.info` now shows a summary of the edge weights for each edge type [\\#1240](https://github.com/stellargraph/stellargraph/pull/1240)\r\n- The `plot_history` function accepts a `return_figure` parameter to return the `matplotlib.figure.Figure` value, for further manipulation [\\#1309](https://github.com/stellargraph/stellargraph/pull/1309) (Thanks @LarsNeR)\r\n- Tests now pass against the TensorFlow 2.2.0 release candidates, in preparation for the full 2.2.0 release [\\#1175](https://github.com/stellargraph/stellargraph/pull/1175)\r\n- Some functions no longer fail for some particular cases of empty graphs: `StellarGraph.to_adjacency_matrix` [\\#1378](https://github.com/stellargraph/stellargraph/pull/1378), `StellarGraph.from_networkx` [\\#1401](https://github.com/stellargraph/stellargraph/pull/1401)\r\n- `CorruptedGenerator` on a `FullBatchNodeGenerator` can be used to train `DeepGraphInfomax` on a subset of the nodes in a graph, instead of all of them [\\#1415](https://github.com/stellargraph/stellargraph/pull/1415)\r\n- The `stellargraph.custom_keras_layers` dictionary for use when loading a Keras model now includes all of StellarGraph's layers [\\#1280](https://github.com/stellargraph/stellargraph/pull/1280)\r\n- `PaddedGraphGenerator.flow` now also accepts a list of `StellarGraph` objects as input [\\#1458](https://github.com/stellargraph/stellargraph/pull/1458)\r\n- Supervised Graph Classification demo now prints progress update messages during training [\\#1485](https://github.com/stellargraph/stellargraph/pull/1485)\r\n- Explicit contributors file has been removed to avoid inconsistent acknowledgement [\\#1484](https://github.com/stellargraph/stellargraph/pull/1484). Please refer to the [Github display for contributors](https://github.com/stellargraph/stellargraph/graphs/contributors) instead.\r\n- Various documentation, demo and error message fixes and improvements: [\\#1141](https://github.com/stellargraph/stellargraph/pull/1141), [\\#1219](https://github.com/stellargraph/stellargraph/pull/1219), [\\#1246](https://github.com/stellargraph/stellargraph/pull/1246), [\\#1260](https://github.com/stellargraph/stellargraph/pull/1260), [\\#1266](https://github.com/stellargraph/stellargraph/pull/1266), [\\#1361](https://github.com/stellargraph/stellargraph/pull/1361), [\\#1362](https://github.com/stellargraph/stellargraph/pull/1362), [\\#1385](https://github.com/stellargraph/stellargraph/pull/1385), [\\#1386](https://github.com/stellargraph/stellargraph/pull/1386), [\\#1363](https://github.com/stellargraph/stellargraph/pull/1363), [\\#1376](https://github.com/stellargraph/stellargraph/pull/1376), [\\#1405](https://github.com/stellargraph/stellargraph/pull/1405) (thanks @thatlittleboy), [\\#1408](https://github.com/stellargraph/stellargraph/pull/1408), [\\#1393](https://github.com/stellargraph/stellargraph/pull/1393), [\\#1403](https://github.com/stellargraph/stellargraph/pull/1403), [\\#1401](https://github.com/stellargraph/stellargraph/pull/1401), [\\#1397](https://github.com/stellargraph/stellargraph/pull/1397), [\\#1396](https://github.com/stellargraph/stellargraph/pull/1396), [\\#1391](https://github.com/stellargraph/stellargraph/pull/1391), [\\#1394](https://github.com/stellargraph/stellargraph/pull/1394), [\\#1434](https://github.com/stellargraph/stellargraph/pull/1434) (thanks @thatlittleboy), [\\#1442](https://github.com/stellargraph/stellargraph/pull/1442), [\\#1438](https://github.com/stellargraph/stellargraph/pull/1438) (thanks @thatlittleboy), [\\#1413](https://github.com/stellargraph/stellargraph/pull/1413), [\\#1450](https://github.com/stellargraph/stellargraph/pull/1450), [\\#1440](https://github.com/stellargraph/stellargraph/pull/1440), [\\#1453](https://github.com/stellargraph/stellargraph/pull/1453), [\\#1447](https://github.com/stellargraph/stellargraph/pull/1447), [\\#1467](https://github.com/stellargraph/stellargraph/pull/1467), [\\#1465](https://github.com/stellargraph/stellargraph/pull/1465) (thanks @thatlittleboy), [\\#1470](https://github.com/stellargraph/stellargraph/pull/1470), [\\#1475](https://github.com/stellargraph/stellargraph/pull/1475), [\\#1480](https://github.com/stellargraph/stellargraph/pull/1480), [\\#1468](https://github.com/stellargraph/stellargraph/pull/1468), [\\#1472](https://github.com/stellargraph/stellargraph/pull/1472), [\\#1474](https://github.com/stellargraph/stellargraph/pull/1474)\r\n- DevOps changes:\r\n  - CI: [\\#1161](https://github.com/stellargraph/stellargraph/pull/1161), [\\#1189](https://github.com/stellargraph/stellargraph/pull/1189), [\\#1230](https://github.com/stellargraph/stellargraph/pull/1230), [\\#1122](https://github.com/stellargraph/stellargraph/pull/1122), [\\#1421](https://github.com/stellargraph/stellargraph/pull/1421)\r\n  - Other: [\\#1197](https://github.com/stellargraph/stellargraph/pull/1197), [\\#1322](https://github.com/stellargraph/stellargraph/pull/1322), [\\#1407](https://github.com/stellargraph/stellargraph/pull/1407)",
        "dateCreated": "2020-05-05T08:13:01Z",
        "datePublished": "2020-05-05T08:28:00Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v1.0.0",
        "name": "Release 1.0.0",
        "tag_name": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v1.0.0",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/26172463",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v1.0.0"
      },
      {
        "authorType": "User",
        "author_name": "habiba-h",
        "body": "This is the first release candidate for StellarGraph 1.0. The 1.0 release will be the culmination of 2 years of activate development, and this release candidate is the first milestone for that release.\r\n\r\nJump in to this release, with the new demos and examples:\r\n\r\n- [More helpful indexing and guidance in demo READMEs](demos/)\r\n- [Loading from Neo4j][neo4j]\r\n- [More explanatory Node2Vec link prediction][n2v-lp]\r\n- [Unsupervised `GraphSAGE` and `HinSAGE` via `DeepGraphInfomax`][dgi]\r\n- [Graph classification with `GCNSupervisedGraphClassification`][gc]\r\n- [Time series prediction using spatial information, using `GraphConvolutionLSTM`][gcn-lstm] (experimental)\r\n\r\n[neo4j]: demos/basics/loading-saving-neo4j.ipynb\r\n[n2v-lp]: demos/link-prediction/random-walks/cora-lp-demo.ipynb\r\n[dgi]: demos/embeddings/deep-graph-infomax-cora.ipynb\r\n[gc]: demos/graph-classification/supervised-graph-classification.ipynb\r\n[gcn-lstm]: demos/spatio-temporal/gcn-lstm-LA.ipynb\r\n\r\n### Major features and improvements\r\n\r\n- Better demonstration notebooks and documentation to make the library more accessible to new and existing users:\r\n  - The [demos READMEs](demos/) now contain more guidance and explanation to make it easier to find a relevant example [\\#1200](https://github.com/stellargraph/stellargraph/pull/1200)\r\n  - A [demo for loading data from Neo4j][neo4j] has been added [\\#1184](https://github.com/stellargraph/stellargraph/pull/1184)\r\n  - The [demo for link prediction using Node2Vec][n2v-lp] has been rewritten to be clearer [\\#1190](https://github.com/stellargraph/stellargraph/pull/1190)\r\n  - Notebooks are [now included in the API documentation](https://stellargraph.readthedocs.io/en/latest/demos/index.html), for more convenient access [\\#1279](https://github.com/stellargraph/stellargraph/pull/1279)\r\n  - Notebooks now detect if they're being used with an incorrect version of the StellarGraph library, elimanting confusion about version mismatches [\\#1242](https://github.com/stellargraph/stellargraph/pull/1242)\r\n- New algorithms:\r\n  - `GCNSupervisedGraphClassification`: supervised graph classification model based on Graph Convolutional layers (GCN) [\\#929](https://github.com/stellargraph/stellargraph/issues/929), [demo][gc].\r\n- `DeepGraphInfomax` can be used to train almost any model in an unsupervised way, via the `corrupt_index_groups` parameter to `CorruptedGenerator` [\\#1243](https://github.com/stellargraph/stellargraph/pull/1243), [demo][dgi]. Additionally, many algorithms provide defaults and so can be used with `DeepGraphInfomax` without specifying this parameter:\r\n  - any model using `FullBatchNodeGenerator`, including models supported in StellarGraph 0.11: `GCN`, `GAT`, `PPNP` and `APPNP`\r\n  - `GraphSAGE` [\\#1162](https://github.com/stellargraph/stellargraph/pull/1162)\r\n  - `HinSAGE` for heterogeneous graphs with node features [\\#1254](https://github.com/stellargraph/stellargraph/pull/1254)\r\n- `UnsupervisedSampler` supports a `walker` parameter to use other random walking algorithms such as `BiasedRandomWalk`, in addition to the default `UniformRandomWalk`. [\\#1187](https://github.com/stellargraph/stellargraph/pull/1187)\r\n- The `StellarGraph` class is now smaller, faster and easier to construct:\r\n  - The `StellarGraph(..., edge_type_column=...)` parameter can be used to construct a heterogeneous graph from a single flat `DataFrame`, containing a column of the edge types [\\#1284](https://github.com/stellargraph/stellargraph/pull/1284). This avoids the need to build separate `DataFrame`s for each type, and is significantly faster when there are many types. Using `edge_type_column` gives a 2.6\u00d7 speedup for loading the `stellargraph.datasets.FB15k` dataset (with almost 600 thousand edges across 1345 types).\r\n  - `StellarGraph`'s internal cache of node adjacencies now uses the smallest integer type it can [\\#1289](https://github.com/stellargraph/stellargraph/pull/1289). This reduces memory use by 31% on the `FB15k` dataset, and 36% on a reddit dataset (with 11.6 million edges).\r\n\r\n### Breaking changes\r\n\r\n- Edge weights are now validated to be numeric when creating a `StellarGraph`, previously edge weights could be any type, but all algorithms that use them would fail. [\\#1191](https://github.com/stellargraph/stellargraph/pull/1191)\r\n- Full batch layers no longer support an \"output indices\" tensor to filter the output rows to a selected set of nodes [\\#1204](https://github.com/stellargraph/stellargraph/pull/1204) (this does **not** affect models like `GCN`, only the layers within them: `APPNPPropagationLayer`, `ClusterGraphConvolution`, `GraphConvolution`, `GraphAttention`, `GraphAttentionSparse`, `PPNPPropagationLayer`, `RelationalGraphConvolution`). Migration: post-process the output using `tf.gather` manually or the new `sg.layer.misc.GatherIndices` layer.\r\n- `GraphConvolution` has been generalised to work with batch size > 1, subsuming the functionality of the now-deprecated `ClusterGraphConvolution` (and `GraphClassificationConvolution`) [\\#1205](https://github.com/stellargraph/stellargraph/pull/1205). Migration: replace `stellargraph.layer.ClusterGraphConvolution` with `stellargraph.layer.GraphConvolution`.\r\n\r\n### Experimental features\r\n\r\nSome new algorithms and features are still under active development, and are available as an experimental preview. However, they may not be easy to use: their documentation or testing may be incomplete, and they may change dramatically from release to release. The experimental status is noted in the documentation and at runtime via prominent warnings.\r\n\r\n- `SortPooling` layer: the node pooling layer introduced in [Zhang et al](https://www.cse.wustl.edu/~muhan/papers/AAAI_2018_DGCNN.pdf) [\\#1210](https://github.com/stellargraph/stellargraph/pull/1210)\r\n- `DeepGraphConvolutionalNeuralNetwork` (DGCNN): supervised graph classification using a stack of graph convolutional layers followed by `SortPooling`, and standard convolutional and pooling (such as `Conv1D` and `MaxPool1D`) [\\#1212](https://github.com/stellargraph/stellargraph/pull/1212) [\\#1265](https://github.com/stellargraph/stellargraph/pull/1265)\r\n- `GraphConvolutionLSTM`: time series prediction on spatio-temporal data, combining GCN with a [LSTM](https://en.wikipedia.org/wiki/Long_short-term_memory) model to augment the conventional time-series model with information from nearby data points [\\#1085](https://github.com/stellargraph/stellargraph/pull/1085), [demo][gcn-lstm]\r\n\r\n### Bug fixes and other changes\r\n\r\n- Random walk classes like `UniformRandomWalk` and `BiasedRandomWalk` can have their hyperparameters set on construction, in addition to in each call to `run` [\\#1179](https://github.com/stellargraph/stellargraph/pull/1179)\r\n- Node feature sampling was made ~4\u00d7 faster by ensuring a better data layout, this makes some configurations of `GraphSAGE` (and `HinSAGE`) noticably faster [\\#1225](https://github.com/stellargraph/stellargraph/pull/1225)\r\n- The `PROTEINS` dataset has been added to `stellargraph.datasets`, for graph classification [\\#1282](https://github.com/stellargraph/stellargraph/pull/1282)\r\n- The `BlogCatalog3` dataset can now be successfully downloaded again [\\#1283](https://github.com/stellargraph/stellargraph/pull/1283)\r\n- Knowledge graph model evaluation via `rank_edges_against_all_nodes` now defaults to the `random` strategy for breaking ties, and supports `top` (previous default) and `bottom` as alternatives [\\#1223](https://github.com/stellargraph/stellargraph/pull/1223)\r\n- Creating a `RelationalFullBatchNodeGenerator` is now significantly faster and requires much less memory (18\u00d7 speedup and 560\u00d7 smaller for the `stellargraph.datasets.AIFB` dataset) [\\#1274](https://github.com/stellargraph/stellargraph/pull/1274)\r\n- `StellarGraph.info` now shows a summary of the edge weights for each edge type [\\#1240](https://github.com/stellargraph/stellargraph/pull/1240)\r\n- Various documentation, demo and error message fixes and improvements: [\\#1141](https://github.com/stellargraph/stellargraph/pull/1141), [\\#1219](https://github.com/stellargraph/stellargraph/pull/1219), [\\#1246](https://github.com/stellargraph/stellargraph/pull/1246), [\\#1260](https://github.com/stellargraph/stellargraph/pull/1260), [\\#1266](https://github.com/stellargraph/stellargraph/pull/1266)\r\n- DevOps changes:\r\n  - CI: [\\#1161](https://github.com/stellargraph/stellargraph/pull/1161), [\\#1189](https://github.com/stellargraph/stellargraph/pull/1189), [\\#1230](https://github.com/stellargraph/stellargraph/pull/1230), [\\#1122](https://github.com/stellargraph/stellargraph/pull/1122)\r\n  - Other: [\\#1197](https://github.com/stellargraph/stellargraph/pull/1197)",
        "dateCreated": "2020-04-22T06:22:53Z",
        "datePublished": "2020-04-22T07:12:19Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v1.0.0rc1",
        "name": "Release 1.0.0rc1",
        "tag_name": "v1.0.0rc1",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v1.0.0rc1",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/25752051",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v1.0.0rc1"
      },
      {
        "authorType": "User",
        "author_name": "timpitman",
        "body": "**StellarGraph** is a Python library for machine learning on graphs and networks. It offers state-of-the-art algorithms for graph machine learning, making it easy to discover patterns and answer questions about graph-structured data.\r\n\r\nGet started with StellarGraph's newest graph machine learning features with `pip install stellargraph`.\r\n\r\nThis bugfix release contains the same code as 0.11.0, and just fixes the metadata in the Anaconda package so that it can be installed successfully.\r\n\r\n### Bug fixes and other changes\r\n\r\n- The [Conda package for StellarGraph](https://anaconda.org/stellargraph/stellargraph) has been updated to require TensorFlow 2.1, as TensorFlow 2.0 is no longer supported.  As a result, StellarGraph will currently install via Conda on Linux and Windows - Mac support is waiting on the [Tensorflow 2.1 osx-64 release to Conda](https://github.com/ContinuumIO/anaconda-issues/issues/11697). [\\#1165](https://github.com/stellargraph/stellargraph/pull/1165)\r\n",
        "dateCreated": "2020-03-31T04:20:33Z",
        "datePublished": "2020-03-31T05:17:27Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.11.1",
        "name": "Release 0.11.1",
        "tag_name": "v0.11.1",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.11.1",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/25031666",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.11.1"
      },
      {
        "authorType": "User",
        "author_name": "timpitman",
        "body": "**StellarGraph** is a Python library for machine learning on graphs and networks. It offers state-of-the-art algorithms for graph machine learning, making it easy to discover patterns and answer questions about graph-structured data.\r\n\r\nGet started with StellarGraph's newest graph machine learning features with `pip install stellargraph`.\r\n\r\n### Major features and improvements\r\n\r\n- The onboarding/getting-started process has been optimised and improved:\r\n  - The README has been rewritten to highlight our numerous demos, and how to get help [\\#1081](https://github.com/stellargraph/stellargraph/pull/1081)\r\n  - [Example Jupyter notebooks](https://github.com/stellargraph/stellargraph/tree/master/demos/) can now be run directly in [Google Colab](https://colab.research.google.com) and [Binder](https://mybinder.org), providing an easy way to get started with StellarGraph - simply click the ![](https://colab.research.google.com/assets/colab-badge.svg) and ![](https://mybinder.org/badge_logo.svg) badges within each notebook. [\\#1119](https://github.com/stellargraph/stellargraph/pull/1119).\r\n  - The [new `demos/basics` directory](demos/basics) contains two notebooks demonstrating how to construct a `StellarGraph` object from Pandas, and from NetworkX [\\#1074](https://github.com/stellargraph/stellargraph/pull/1074)\r\n  - The [GCN node classification demo](demos/node-classification/gcn/gcn-cora-node-classification-example.ipynb) now has more explanation, to serve as an introduction to graph machine learning using StellarGraph [\\#1125](https://github.com/stellargraph/stellargraph/pull/1125)\r\n- New algorithms:\r\n  - Watch Your Step: computes node embeddings by simulating the effect of random walks, rather than doing them. [\\#750](https://github.com/stellargraph/stellargraph/pull/750).\r\n  - Deep Graph Infomax: performs unsupervised node representation learning [\\#978](https://github.com/stellargraph/stellargraph/issues/978).\r\n  - Temporal Random Walks (Continuous-Time Dynamic Network Embeddings): random walks that respect the time that each edge occurred (stored as edge weights) [\\#1120](https://github.com/stellargraph/stellargraph/issues/1120).\r\n  - ComplEx: computes multiplicative complex-number embeddings for entities and relationships (edge types) in knowledge graphs, which can be used for link prediction. [\\#901](https://github.com/stellargraph/stellargraph/pull/901) [\\#1080](https://github.com/stellargraph/stellargraph/pull/1080)\r\n  - DistMult: computes multiplicative real-number embeddings for entities and relationships (edge types) in knowledge graphs, which can be used for link prediction. [\\#755](https://github.com/stellargraph/stellargraph/issues/755) [\\#865](https://github.com/stellargraph/stellargraph/pull/865) [\\#1136](https://github.com/stellargraph/stellargraph/pull/1136)\r\n\r\n### Breaking changes\r\n\r\n- StellarGraph now requires TensorFlow 2.1 or greater, TensorFlow 2.0 is no longer supported [\\#1008](https://github.com/stellargraph/stellargraph/pull/1008)\r\n- The legacy constructor using NetworkX graphs has been deprecated [\\#1027](https://github.com/stellargraph/stellargraph/pull/1027). Migration: replace `StellarGraph(some_networkx_graph)` with `StellarGraph.from_networkx(some_networkx_graph)`, and similarly for `StellarDiGraph`.\r\n- The `build` method on model classes (such as `GCN`) has been renamed to `in_out_tensors` [\\#1140](https://github.com/stellargraph/stellargraph/pull/1140). Migration: replace `model.build()` with `model.in_out_tensors()`.\r\n- The `node_model` and `link_model` methods on model classes has been replaced by `in_out_tensors` [\\#1140](https://github.com/stellargraph/stellargraph/pull/1140) (see that PR for the exact list of types). Migration: replace `model.node_model()` with `model.in_out_tensors()` or `model.in_out_tensors(multiplicity=1)`, and `model.node_model()` with `model.in_out_tensors()` or `model.in_out_tensors(multiplicity=2)`.\r\n- Re-exports of calibration and ensembling functionality from the top-level of the `stellargraph` module were deprecated, in favour of importing from the `stellargraph.calibration` or `stellargraph.ensemble` submodules directly [\\#1107](https://github.com/stellargraph/stellargraph/pull/1107). Migration: replace uses of `stellargraph.Ensemble` with `stellargraph.ensemble.Ensemble`, and similarly for the other names (see [\\#1107](https://github.com/stellargraph/stellargraph/pull/1107) for all replacements).\r\n- `StellarGraph.to_networkx` parameters now use `attr` to refer to NetworkX attributes, not `name` or `label` [\\#973](https://github.com/stellargraph/stellargraph/pull/973). Migration: for any named parameters in `graph.to_networkx(...)`, change `node_type_name=...` to `node_type_attr=...` and similarly `edge_type_name` to `edge_type_attr`, `edge_weight_label` to `edge_weight_attr`, `feature_name` to `feature_attr`.\r\n- `StellarGraph.nodes_of_type` is deprecated in favour of the `nodes` method [\\#1111](https://github.com/stellargraph/stellargraph/pull/1111). Migration: replace `some_graph.nodes_of_type(some_type)` with `some_graph.nodes(node_type=some_type)`.\r\n- `StellarGraph.info` parameters `show_attributes` and `sample` were deprecated [\\#1110](https://github.com/stellargraph/stellargraph/pull/1110)\r\n- Some more layers and models had many parameters move from `**kwargs` to real arguments: `Attri2Vec` ([\\#1128](https://github.com/stellargraph/stellargraph/pull/1128)), `ClusterGCN` ([\\#1129](https://github.com/stellargraph/stellargraph/pull/1129)), `GraphAttention` & `GAT` ([\\#1130](https://github.com/stellargraph/stellargraph/pull/1130)), `GraphSAGE` & its aggregators ([\\#1142](https://github.com/stellargraph/stellargraph/pull/1142)), `HinSAGE` & its aggregators ([\\#1143](https://github.com/stellargraph/stellargraph/pull/1143)), `RelationalGraphConvolution` & `RGCN` ([\\#1148](https://github.com/stellargraph/stellargraph/pull/1148)). Invalid (e.g. incorrectly spelled) arguments would have been ignored previously, but now may fail with a `TypeError`; to fix, remove or correct the arguments.\r\n- The `method=\"chebyshev\"` option to `FullBatchNodeGenerator`, `FullBatchLinkGenerator` and `GCN_Aadj_feats_op` has been removed for now, because it needed significant revision to be correctly implemented [\\#1028](https://github.com/stellargraph/stellargraph/pull/1028)\r\n- The `fit_generator`, `evaluate_generator` and `predict_generator` methods on `Ensemble` and `BaggingEnsemble` have been renamed to `fit`, `evaluate` and `predict`, to match the deprecation in TensorFlow 2.1 of the `tensorflow.keras.Model` methods of the same name [\\#1065](https://github.com/stellargraph/stellargraph/pull/1065). Migration: remove the `_generator`  suffix on these methods.\r\n- The `default_model` method on `Attri2Vec`, `GraphSAGE` and `HinSAGE` has been deprecated, in favour of `in_out_tensors` [\\#1145](https://github.com/stellargraph/stellargraph/pull/1145). Migration: replace `model.default_model()` with `model.in_out_tensors()`.\r\n\r\n### Experimental features\r\n\r\nSome new algorithms and features are still under active development, and are available as an experimental preview. However, they may not be easy to use: their documentation or testing may be incomplete, and they may change dramatically from release to release. The experimental status is noted in the documentation and at runtime via prominent warnings.\r\n\r\n- GCNSupervisedGraphClassification: supervised graph classification model based on Graph Convolutional layers (GCN) [\\#929](https://github.com/stellargraph/stellargraph/issues/929).\r\n\r\n### Bug fixes and other changes\r\n\r\n- `StellarGraph.to_adjacency_matrix` is at least 15\u00d7 faster on undirected graphs [\\#932](https://github.com/stellargraph/stellargraph/pull/932)\r\n- `ClusterNodeGenerator` is now noticably faster, which makes training and predicting with a `ClusterGCN` model faster [\\#1095](https://github.com/stellargraph/stellargraph/pull/1095). On a random graph with 1000 nodes and 5000 edges and 10 clusters, iterating over an epoch with `q=1` (each clusters individually) is 2\u00d7 faster, and is even faster for larger `q`. The model in the Cluster-GCN demo notebook using Cora trains 2\u00d7 faster overall.\r\n- The `node_features=...` parameter to `StellarGraph.from_networkx` now only needs to mention the node types that have features, when passing a dictionary of Pandas DataFrames. Node types that aren't mentioned will automatically have no features (zero-length feature vectors). [\\#1082](https://github.com/stellargraph/stellargraph/pull/1082)\r\n- A `subgraph` method was added to `StellarGraph` for computing a node-induced subgraph [\\#958](https://github.com/stellargraph/stellargraph/pull/958)\r\n- A `connected_components` method was added to `StellarGraph` for computing the nodes involved in each connected component in a `StellarGraph` [\\#958](https://github.com/stellargraph/stellargraph/pull/958)\r\n- The `info` method on `StellarGraph` now shows only 20 node and edge types by default to be more useful for graphs with many types [\\#993](https://github.com/stellargraph/stellargraph/pull/993). This behaviour can be customized with the `truncate=...` parameter.\r\n- The `info` method on `StellarGraph` now shows information about the size and type of each node type's feature vectors [\\#979](https://github.com/stellargraph/stellargraph/pull/979)\r\n- The `EdgeSplitter` class supports `StellarGraph` input (and will output `StellarGraph`s in this case), in addition to NetworkX graphs [\\#1032](https://github.com/stellargraph/stellargraph/pull/1032)\r\n- The `Attri2Vec` model class stores its weights statefully, so they are shared between all tensors computed by `build` [\\#1101](https://github.com/stellargraph/stellargraph/pull/1101)\r\n- The `GCN` model defaults for some parameters now match the `GraphConvolution` layer's defaults: specifically `kernel_initializer` (`glorot_uniform`) and `bias_initializer` (`zeros`) [\\#1147](https://github.com/stellargraph/stellargraph/pull/1147)\r\n- The `datasets` submodule is now accessible as `stellargraph.datasets`, after just `import stellargraph` [\\#1113](https://github.com/stellargraph/stellargraph/pull/1113)\r\n- All datasets in `stellargraph.datasets` now support a `load` method to create a `StellarGraph` object (and other information): `AIFB` ([\\#982](https://github.com/stellargraph/stellargraph/pull/982)), `CiteSeer` ([\\#989](https://github.com/stellargraph/stellargraph/pull/989)), `Cora` ([\\#913](https://github.com/stellargraph/stellargraph/pull/913)), `MovieLens` ([\\#947](https://github.com/stellargraph/stellargraph/pull/947)), `PubMedDiabetes` ([\\#986](https://github.com/stellargraph/stellargraph/pull/986)). The demo notebooks using these datasets are now cleaner.\r\n- Some new datasets were added to `stellargraph.datasets`:\r\n  - `MUTAG`: a collection of graphs representing chemical compounds [\\#960](https://github.com/stellargraph/stellargraph/pull/960)\r\n  - `WN18`, `WN18RR`: knowledge graphs based on the WordNet linguistics data [\\#977](https://github.com/stellargraph/stellargraph/pull/977)\r\n  - `FB15k`, `FB15k_237`: knowledge graphs based on the FreeBase knowledge base [\\#977](https://github.com/stellargraph/stellargraph/pull/977)\r\n  - `IAEnronEmployees`: a small set of employees of Enron, and the many emails between them [\\#1058](https://github.com/stellargraph/stellargraph/pull/1058)\r\n- Warnings now point to the call site of the function causing the warning, not the `warnings.warn` call inside StellarGraph; this means `DeprecationWarning`s will be visible in Jupyter notebooks and scripts run with Python 3.7 [\\#1144](https://github.com/stellargraph/stellargraph/pull/1144)\r\n- Some code that triggered warnings from other libraries was fixed or removed [\\#995](https://github.com/stellargraph/stellargraph/pull/995) [\\#1008](https://github.com/stellargraph/stellargraph/pull/1008), [\\#1051](https://github.com/stellargraph/stellargraph/pull/1051), [\\#1064](https://github.com/stellargraph/stellargraph/pull/1064), [\\#1066](https://github.com/stellargraph/stellargraph/pull/1066)\r\n- Some demo notebooks have been updated or fixed: `demos/use-cases/hateful-twitters.ipynb` ([\\#1019](https://github.com/stellargraph/stellargraph/pull/1019)), `rgcn-aifb-node-classification-example.ipynb` ([\\#983](https://github.com/stellargraph/stellargraph/pull/983))\r\n- The documentation \"quick start\" guide duplicated a lot of the information in the README, and so has been replaced with the latter [\\#1096](https://github.com/stellargraph/stellargraph/pull/1096)\r\n- API documentation now lists items under their recommended import path, not their definition. For instance, `stellargraph.StellarGraph` instead of `stellargraph.core.StellarGraph` ([\\#1127](https://github.com/stellargraph/stellargraph/pull/1127)), `stellargraph.layer.GCN` instead of `stellargraph.layer.gcn.GCN` ([\\#1150](https://github.com/stellargraph/stellargraph/pull/1150)) and `stellargraph.datasets.Cora` instead of `stellargraph.datasets.datasets.Cora` ([\\#1157](https://github.com/stellargraph/stellargraph/pull/1157))\r\n- Some API documentation is now formatted better [\\#1061](https://github.com/stellargraph/stellargraph/pull/1061), [\\#1068](https://github.com/stellargraph/stellargraph/pull/1068), [\\#1070](https://github.com/stellargraph/stellargraph/pull/1070), [\\#1071](https://github.com/stellargraph/stellargraph/pull/1071)\r\n- DevOps changes:\r\n  - Neo4j functionality is now tested on CI, and so will continue working [\\#1046](https://github.com/stellargraph/stellargraph/pull/1046) [\\#1050](https://github.com/stellargraph/stellargraph/pull/1050)\r\n  - CI: [\\#967](https://github.com/stellargraph/stellargraph/pull/967), [\\#968](https://github.com/stellargraph/stellargraph/pull/968), [\\#1036](https://github.com/stellargraph/stellargraph/pull/1036), [\\#1067](https://github.com/stellargraph/stellargraph/pull/1067), [\\#1097](https://github.com/stellargraph/stellargraph/pull/1097)\r\n  - Other: [\\#956](https://github.com/stellargraph/stellargraph/pull/956), [\\#962](https://github.com/stellargraph/stellargraph/pull/962), [\\#974](https://github.com/stellargraph/stellargraph/pull/974)",
        "dateCreated": "2020-03-25T05:53:44Z",
        "datePublished": "2020-03-25T21:47:38Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.11.0",
        "name": "Release 0.11.0",
        "tag_name": "v0.11.0",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.11.0",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/24869314",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.11.0"
      },
      {
        "authorType": "User",
        "author_name": "kieranricardo",
        "body": "### Major features and improvements\r\n\r\n- The `StellarGraph` and `StellarDiGraph` classes are now backed by NumPy and Pandas [\\#752](https://github.com/stellargraph/stellargraph/issues/752). The `StellarGraph(...)` and `StellarDiGraph(...)` constructors now consume Pandas DataFrames representing node features and the edge list. This significantly reduces the memory use and construction time for these `StellarGraph` objects.\r\n\r\n  The following table shows some measurements of the memory use of `g = StellarGraph(...)`, and the time required for that constructor call, for several real-world datasets of different sizes, for both the old form backed by NetworkX code and the new form backed by NumPy and Pandas (both old and new store node features similarly, using 2D NumPy arrays, so the measurements in this table include only graph structure: the edges and nodes themselves):\r\n\r\n  | dataset |  nodes |    edges | size old (MiB) | size new (MiB) | size change | time old (s) | time new (s) | time change |\r\n  |---------|-------:|---------:|---------------:|---------------:|------------:|-------------:|-------------:|------------:|\r\n  | Cora    |   2708 |     5429 |            4.1 |        **1.3** |    **-69%** |        0.069 |    **0.034** |    **-50%** |\r\n  | FB15k   |  14951 |   592213 |            148 |         **28** |    **-81%** |          5.5 |      **1.2** |    **-77%** |\r\n  | Reddit  | 231443 | 11606919 |           6611 |        **493** |    **-93%** |          154 |       **33** |    **-82%** |\r\n\r\n  The old backend has been removed, and conversion from a NetworkX graph should be performed via the `StellarGraph.from_networkx` function (the existing form `StellarGraph(networkx_graph)` is supported in this release but is deprecated, and may be removed in a future release).\r\n- More detailed information about Heterogeneous GraphSAGE (HinSAGE) has been added to StellarGraph's readthedocs documentation [\\#839](https://github.com/stellargraph/stellargraph/pull/839).\r\n- New algorithms:\r\n  - Link prediction with directed GraphSAGE, via `DirectedGraphSAGELinkGenerator` [\\#871](https://github.com/stellargraph/stellargraph/issues/871)\r\n  - GraphWave: computes structural node embeddings by using wavelet transforms on the graph Laplacian [\\#822](https://github.com/stellargraph/stellargraph/issues/822)\r\n\r\n### Breaking changes\r\n\r\n- Some layers and models had many parameters move from `**kwargs` to real arguments: `GraphConvolution`, `GCN`. [\\#801](https://github.com/stellargraph/stellargraph/issues/801) Invalid (e.g. incorrectly spelled) arguments would have been ignored previously, but now may fail with a `TypeError`; to fix, remove or correct the arguments.\r\n- The `stellargraph.data.load_dataset_BlogCatalog3` function has been replaced by the `load` method on `stellargraph.datasets.BlogCatalog3` [\\#888](https://github.com/stellargraph/stellargraph/pull/888). Migration: replace `load_dataset_BlogCatalog3(location)` with `BlogCatalog3().load()`; code required to find the location or download the dataset can be removed, as `load` now does this automatically.\r\n- `stellargraph.data.train_test_val_split` and `stellargraph.data.NodeSplitter` have been removed. [\\#887](https://github.com/stellargraph/stellargraph/pull/887) Migration: this functionality should be replaced with `pandas` and `sklearn` (for instance, `sklearn.model_selection.train_test_split`).\r\n- Most of the submodules in `stellargraph.utils` have been moved to top-level modules: `stellargraph.calibration`, `stellargraph.ensemble`, `stellargraph.losses` and `stellargraph.interpretability` [\\#938](http://github.com/stellargraph/stellargraph/pull/938). Imports from the old location are now deprecated, and may stop working in future releases. See the linked issue for the full list of changes.\r\n\r\n### Experimental features\r\n\r\nSome new algorithms and features are still under active development, and are available as an experimental preview. However, they may not be easy to use: their documentation or testing may be incomplete, and they may change dramatically from release to release. The experimental status is noted in the documentation and at runtime via prominent warnings.\r\n\r\n- Temporal Random Walks: random walks that respect the time that each edge occurred (stored as edge weights) [\\#787](https://github.com/stellargraph/stellargraph/pull/787). The implementation does not have an example or thorough testing and documentation.\r\n- Watch Your Step: computes node embeddings by simulating the effect of random walks, rather than doing them. [\\#750](https://github.com/stellargraph/stellargraph/pull/750). The implementation is not fully tested.\r\n- ComplEx: computes embeddings for nodes and edge types in knowledge graphs, and use these to perform link prediction [\\#756](https://github.com/stellargraph/stellargraph/issues/756). The implementation hasn't been validated to match the paper.\r\n- Neo4j connector: the GraphSAGE algorithm can execute doing neighbourhood sampling in a Neo4j database, so that the edges of a graph do not have to fit entirely into memory [\\#799](https://github.com/stellargraph/stellargraph/pull/799). The implementation is not automatically tested, and doesn't support functionality like loading node feature vectors from Neo4j.\r\n\r\n### Bug fixes and other changes\r\n\r\n- StellarGraph now supports [TensorFlow 2.1](https://github.com/tensorflow/tensorflow/releases/tag/v2.1.0), which includes GPU support by default: [\\#875](https://github.com/stellargraph/stellargraph/pull/875)\r\n- Demos now focus on Jupyter notebooks, and demo scripts that duplicate notebooks have been removed: [\\#889](https://github.com/stellargraph/stellargraph/pull/889)\r\n- The following algorithms are now reproducible:\r\n  - Supervised GraphSAGE Node Attribute Inference [\\#844](https://github.com/stellargraph/stellargraph/pull/844)\r\n- Randomness can be more easily controlled using `stellargraph.random.set_seed` [\\#806](https://github.com/stellargraph/stellargraph/pull/806)\r\n- `StellarGraph.edges()` can return edge weights as a separate NumPy array with `include_edge_weights=True` [\\#754](https://github.com/stellargraph/stellargraph/pull/754)\r\n- `StellarGraph.to_networkx` supports ignoring node features (and thus being a little more efficient) with `feature_name=None` [\\#841](https://github.com/stellargraph/stellargraph/pull/841)\r\n- `StellarGraph.to_adjacency_matrix` now ignores edge weights (that is, defaults every weight to `1`) by default, unless `weighted=True` is specified [\\#857](https://github.com/stellargraph/stellargraph/pull/857)\r\n- `stellargraph.utils.plot_history` visualises the model training history as a plot for each metric (such as loss) [\\#902](https://github.com/stellargraph/stellargraph/pull/902)\r\n- the saliency maps/interpretability code has been refactored to have more sharing as well as to make it cleaner and easier to extend [\\#855](https://github.com/stellargraph/stellargraph/pull/855)\r\n- DevOps changes:\r\n  - Most demo notebooks are now tested on CI using Papermill, and so won't become out of date [\\#575](https://github.com/stellargraph/stellargraph/issues/575)\r\n  - CI: [\\#698](https://github.com/stellargraph/stellargraph/pull/698), [\\#760](https://github.com/stellargraph/stellargraph/pull/760), [\\#788](https://github.com/stellargraph/stellargraph/pull/788), [\\#817](https://github.com/stellargraph/stellargraph/pull/817), [\\#860](https://github.com/stellargraph/stellargraph/pull/860), [\\#874](https://github.com/stellargraph/stellargraph/pull/874), [\\#877](https://github.com/stellargraph/stellargraph/pull/877), [\\#878](https://github.com/stellargraph/stellargraph/pull/878), [\\#906](https://github.com/stellargraph/stellargraph/pull/906), [\\#908](https://github.com/stellargraph/stellargraph/pull/908), [\\#915](https://github.com/stellargraph/stellargraph/pull/915), [\\#916](https://github.com/stellargraph/stellargraph/pull/916), [\\#918](https://github.com/stellargraph/stellargraph/pull/918)\r\n  - Other: [\\#708](https://github.com/stellargraph/stellargraph/pull/708), [\\#746](https://github.com/stellargraph/stellargraph/pull/746), [\\#791](https://github.com/stellargraph/stellargraph/pull/791)\r\n",
        "dateCreated": "2020-02-26T01:16:25Z",
        "datePublished": "2020-02-26T01:36:00Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.10.0",
        "name": "Release 0.10.0",
        "tag_name": "v0.10.0",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.10.0",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/23984680",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.10.0"
      },
      {
        "authorType": "User",
        "author_name": "kjun9",
        "body": "### Major features and improvements\r\n\r\n- StellarGraph is now available as [a conda package on Anaconda Cloud](https://anaconda.org/stellargraph/stellargraph) [\\#516](https://github.com/stellargraph/stellargraph/pull/516)\r\n- New algorithms:\r\n  - Cluster-GCN: an extension of GCN that can be trained using SGD, with demo [\\#487](https://github.com/stellargraph/stellargraph/issues/487)\r\n  - Relational-GCN (RGCN): a generalisation of GCN to relational/multi edge type graphs, with demo [\\#490](https://github.com/stellargraph/stellargraph/issues/490)\r\n  - Link prediction for full-batch models: `FullBatchLinkGenerator` allows doing link prediction with algorithms like GCN, GAT, APPNP and PPNP [\\#543](https://github.com/stellargraph/stellargraph/pull/543)\r\n- Unsupervised GraphSAGE has now been updated and tested for reproducibility. Ensuring all seeds are set, running the same pipeline should give reproducible embeddings. [\\#620](https://github.com/stellargraph/stellargraph/pull/620)\r\n- A `datasets` subpackage provides easier access to sample datasets with inbuilt downloading. [\\#690](https://github.com/stellargraph/stellargraph/pull/690)\r\n\r\n\r\n### Breaking changes\r\n\r\n- The stellargraph library now only supports `tensorflow` version 2.0 [\\#518](https://github.com/stellargraph/stellargraph/pull/518), [\\#732](https://github.com/stellargraph/stellargraph/pull/732). Backward compatibility with earlier versions of `tensorflow` is not guaranteed.\r\n- The stellargraph library now only supports Python versions 3.6 and above [\\#641](https://github.com/stellargraph/stellargraph/pull/641). Backward compatibility with earlier versions of Python is not guaranteed.\r\n- The `StellarGraph` class no longer exposes `NetworkX` internals, only required functionality. In particular, calls like `list(G)` will no longer return a list of nodes; use `G.nodes()` instead. [\\#297](https://github.com/stellargraph/stellargraph/issues/297) If NetworkX functionality is required, use the new `.to_networkx()` method to convert to a normal `networkx.MultiGraph` or `networkx.MultiDiGraph`.\r\n- Passing a `NodeSequence` or `LinkSequence` object to `GraphSAGE` and `HinSAGE` classes is now deprecated and no longer supported [\\#498](https://github.com/stellargraph/stellargraph/pull/498). Users might need to update their calls of `GraphSAGE` and `HinSAGE` classes by passing `generator` objects instead of `generator.flow()` objects.\r\n- Various methods on `StellarGraph` have been renamed to be more succinct and uniform:\r\n   - `get_feature_for_nodes` is now `node_features`\r\n   - `type_for_node` is now `node_type`\r\n- Neighbourhood methods in `StellarGraph` class (`neighbors`, `in_nodes`, `out_nodes`) now return a list of neighbours instead of a set. This addresses [\\#653](https://github.com/stellargraph/stellargraph/issues/653). This means multi-edges are no longer collapsed into one in the return value. There will be an implicit change in behaviour for explorer classes used for algorithms like GraphSAGE, Node2Vec, since a neighbour connected via multiple edges will now be more likely to be sampled. If this doesn't sound like the desired behaviour, consider pruning the graph of multi-edges before running the algorithm.\r\n- `GraphSchema` has been simplified to remove type look-ups for individual nodes and edges [\\#702](https://github.com/stellargraph/stellargraph/pull/702) [\\#703](https://github.com/stellargraph/stellargraph/pull/703). Migration: for nodes, use `StellarGraph.node_type`; for edges, use the `triple` argument to the `edges` method, or filter when doing neighbour queries using the `edge_types` argument.\r\n- `NodeAttributeSpecification` and the supporting `Converter` classes have been removed [\\#707](https://github.com/stellargraph/stellargraph/pull/707). Migration: use the more powerful and flexible preprocessing tools from pandas and sklearn (see the linked PR for specifics)\r\n\r\n### Experimental features\r\n\r\nSome new algorithms and features are still under active development, and are available as an experimental preview. However, they may not be easy to use: their documentation or testing may be incomplete, and they may change dramatically from release to release. The experimental status is noted in the documentation and at runtime via prominent warnings.\r\n\r\n- The `StellarGraph` and `StellarDiGraph` classes supports using a backend based on NumPy and Pandas that uses dramatically less memory for large graphs than the existing NetworkX-based backend [\\#668](https://github.com/stellargraph/stellargraph/pull/668). The new backend can be enabled by constructing with `StellarGraph(nodes=..., edges=...)` using Pandas DataFrames, instead of a NetworkX graph.\r\n\r\n### Bug fixes and other changes\r\n\r\n- Documentation for every relased version is published under a permanent URL, in addition to the `stable` alias for the latest release, e.g. <https://stellargraph.readthedocs.io/en/v0.8.4/> for `v0.8.4` [#612](https://github.com/stellargraph/stellargraph/issues/612)\r\n- Neighbourhood methods in `StellarGraph` class (`neighbors`, `in_nodes`, `out_nodes`) now support additional parameters to include edge weights in the results or filter by a set of edge types. [\\#646](https://github.com/stellargraph/stellargraph/pull/646)\r\n- Changed `GraphSAGE` and `HinSAGE` class API to accept generator objects the same as GCN/GAT models. Passing a `NodeSequence` or `LinkSequence` object is now deprecated.  [\\#498](https://github.com/stellargraph/stellargraph/pull/498)\r\n- `SampledBreadthFirstWalk`, `SampledHeterogeneousBreadthFirstWalk` and `DirectedBreadthFirstNeighbours` have been made 1.2-1.5\u00d7 faster [\\#628](https://github.com/stellargraph/stellargraph/pull/628)\r\n- `UniformRandomWalk` has been made 2\u00d7 faster [\\#625](https://github.com/stellargraph/stellargraph/pull/625)\r\n- `FullBatchNodeGenerator.flow` has been reduced from `O(n^2)` quadratic complexity to `O(n)`, where `n` is the number of nodes in the graph, making it orders of magnitude faster for large graphs [\\#513](https://github.com/stellargraph/stellargraph/pull/513)\r\n- The dependencies required for demos and testing have been included as \"extras\" in the main package: `demos` and `igraph` for demos, and `test` for testing. For example, `pip install stellargraph[demos,igraph]` will install the dependencies required to run every demo. [\\#661](https://github.com/stellargraph/stellargraph/pull/661)\r\n- The `StellarGraph` and `StellarDiGraph` constructors now list their arguments explicitly for clearer documentation (rather than using `*arg` and `**kwargs` splats) [\\#659](https://github.com/stellargraph/stellargraph/pull/659)\r\n- `sys.exit(0)` is no longer called on failure in `load_dataset_BlogCatalog3` [\\#648](https://github.com/stellargraph/stellargraph/pull/648)\r\n- Warnings are printed using the Python `warnings` module [\\#583](https://github.com/stellargraph/stellargraph/pull/583)\r\n- Numerous DevOps changes:\r\n  - CI results are now publicly viewable: <https://buildkite.com/stellar/stellargraph-public>\r\n  - CI: [\\#524](https://github.com/stellargraph/stellargraph/pull/524), [\\#534](https://github.com/stellargraph/stellargraph/pull/534), [\\#544](https://github.com/stellargraph/stellargraph/pull/544), [\\#550](https://github.com/stellargraph/stellargraph/pull/550), [\\#551](https://github.com/stellargraph/stellargraph/pull/551), [\\#557](https://github.com/stellargraph/stellargraph/pull/557), [\\#562](https://github.com/stellargraph/stellargraph/pull/562), [\\#574](https://github.com/stellargraph/stellargraph/issues/574) [\\#578](https://github.com/stellargraph/stellargraph/pull/578), [\\#579](https://github.com/stellargraph/stellargraph/pull/579), [\\#587](https://github.com/stellargraph/stellargraph/pull/587), [\\#592](https://github.com/stellargraph/stellargraph/pull/592), [\\#595](https://github.com/stellargraph/stellargraph/pull/595), [\\#596](https://github.com/stellargraph/stellargraph/pull/596), [\\#602](https://github.com/stellargraph/stellargraph/issues/602), [\\#609](https://github.com/stellargraph/stellargraph/pull/609), [\\#613](https://github.com/stellargraph/stellargraph/pull/613), [\\#615](https://github.com/stellargraph/stellargraph/pull/615), [\\#631](https://github.com/stellargraph/stellargraph/pull/631), [\\#637](https://github.com/stellargraph/stellargraph/pull/637), [\\#639](https://github.com/stellargraph/stellargraph/pull/639), [\\#640](https://github.com/stellargraph/stellargraph/pull/640), [\\#652](https://github.com/stellargraph/stellargraph/pull/652), [\\#656](https://github.com/stellargraph/stellargraph/pull/656), [\\#663](https://github.com/stellargraph/stellargraph/pull/663), [\\#675](https://github.com/stellargraph/stellargraph/pull/675)\r\n  - Git and Github configuration: [\\#516](https://github.com/stellargraph/stellargraph/pull/516), [\\#588](https://github.com/stellargraph/stellargraph/pull/588), [\\#624](https://github.com/stellargraph/stellargraph/pull/624), [\\#672](https://github.com/stellargraph/stellargraph/pull/672), [\\#682](https://github.com/stellargraph/stellargraph/pull/682), [\\#683](https://github.com/stellargraph/stellargraph/pull/683),\r\n  - Other: [\\#523](https://github.com/stellargraph/stellargraph/pull/523), [\\#582](https://github.com/stellargraph/stellargraph/pull/582), [\\#590](https://github.com/stellargraph/stellargraph/pull/590), [\\#654](https://github.com/stellargraph/stellargraph/pull/654)\r\n\r\n",
        "dateCreated": "2020-01-29T02:55:37Z",
        "datePublished": "2020-01-29T03:13:08Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.9.0",
        "name": "Release 0.9.0",
        "tag_name": "v0.9.0",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.9.0",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/23206545",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.9.0"
      },
      {
        "authorType": "User",
        "author_name": "huonw",
        "body": "**Fixed bugs:**\r\n- Fix `DirectedGraphSAGENodeGenerator` always hitting `TypeError` exception. [#695](https://github.com/stellargraph/stellargraph/issues/695)\r\n",
        "dateCreated": "2020-01-20T03:44:02Z",
        "datePublished": "2020-01-20T04:30:27Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.8.4",
        "name": "Release 0.8.4 (hotfix)",
        "tag_name": "v0.8.4",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.8.4",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/22963581",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.8.4"
      },
      {
        "authorType": "User",
        "author_name": "youph",
        "body": "**Fixed bugs:**\r\n- Fixed the issue in the APPNP class that causes appnp to propagate excessive dropout layers. [\\#525](https://github.com/stellargraph/stellargraph/pull/525)\r\n- Added a fix into the PPNP node classification demo so that the softmax layer is no longer propagated. [\\#525](https://github.com/stellargraph/stellargraph/pull/525)",
        "dateCreated": "2019-12-12T01:07:57Z",
        "datePublished": "2019-12-12T01:18:10Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.8.3",
        "name": "Release 0.8.3 (hotfix)",
        "tag_name": "v0.8.3",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.8.3",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/22163705",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.8.3"
      },
      {
        "authorType": "User",
        "author_name": "youph",
        "body": "**Fixed bugs:**\r\n- Updated requirements to Tensorflow>=1.14, as tensorflow with lower versions causes errors with sparse full batch node methods: GCN, APPNP, and GAT. [\\#519](https://github.com/stellargraph/stellargraph/issues/519)\r\n",
        "dateCreated": "2019-11-08T01:59:20Z",
        "datePublished": "2019-11-08T02:02:09Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.8.2",
        "name": "Release 0.8.2 (hotfix)",
        "tag_name": "v0.8.2",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.8.2",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/21307181",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.8.2"
      },
      {
        "authorType": "User",
        "author_name": "adocherty",
        "body": "**Fixed bugs:**\r\n- Reverted erroneous demo notebooks.\r\n",
        "dateCreated": "2019-10-29T04:44:55Z",
        "datePublished": "2019-10-29T04:49:40Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.8.1",
        "name": "Release 0.8.1 (hotfix)",
        "tag_name": "v0.8.1",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.8.1",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/21042271",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.8.1"
      },
      {
        "authorType": "User",
        "author_name": "youph",
        "body": "We are excited to announce the `0.8.0` release of the library. This release extends `stellargraph` by adding new algorithms and demos, enhancing interpretability via saliency maps for GAT, and further simplifying graph ML workflows through standardised model APIs and arguments. More details on new features and enhancements are listed below.\r\n\r\n**New algorithms:**\r\n- Directed GraphSAGE algorithm (a generalisation of GraphSAGE to directed graphs) + demo [\\#479](https://github.com/stellargraph/stellargraph/pull/479)\r\n- Attri2vec algorithm + demo [\\#470](https://github.com/stellargraph/stellargraph/pull/470) [\\#455](https://github.com/stellargraph/stellargraph/issues/455)\r\n- PPNP and APPNP algorithms + demos [\\#485](https://github.com/stellargraph/stellargraph/pull/485)\r\n- GAT saliency maps for interpreting node classification with Graph Attention Networks + demo [\\#435](https://github.com/stellargraph/stellargraph/pull/435)\r\n\r\n**Implemented enhancements:** \r\n- New demo of node classification on Twitter hateful users [\\430](https://github.com/stellargraph/stellargraph/pull/430)\r\n- New demo of graph saliency on Twitter hateful users [\\#448](https://github.com/stellargraph/stellargraph/pull/448)\r\n- Added Directed SampledBFS walks on directed graphs [\\#464](https://github.com/stellargraph/stellargraph/issues/464)\r\n- Unified API of GCN, GAT, GraphSAGE, and HinSAGE classses by adding `build()` method to GCN and GAT classes [\\#439](https://github.com/stellargraph/stellargraph/issues/439)\r\n- Added `activations` argument to GraphSAGE and HinSAGE classes [\\#381](https://github.com/stellargraph/stellargraph/issues/381)\r\n- Unified activations for GraphSAGE, HinSAGE, GCN and GAT [\\#493](https://github.com/stellargraph/stellargraph/pull/493) [\\#381](https://github.com/stellargraph/stellargraph/issues/381)\r\n- Added optional regularisation on the weights for GCN, GraphSage, and HinSage [\\#172](https://github.com/stellargraph/stellargraph/issues/172) [\\#469](https://github.com/stellargraph/stellargraph/issues/469)\r\n- Unified regularisation of GraphSAGE, HinSAGE, GCN and GAT [\\#494](https://github.com/stellargraph/stellargraph/pull/494) ([geoffj-d61](https://github.com/geoffj-d61))\r\n- Unsupervised GraphSage speed up via multithreading [\\#474](https://github.com/stellargraph/stellargraph/issues/474) [\\#477](https://github.com/stellargraph/stellargraph/pull/477)\r\n- Support of sparse generators in the GCN saliency map implementation. [\\#432](https://github.com/stellargraph/stellargraph/issues/432)\r\n\r\n**Refactoring:**\r\n- Refactored Ensemble class into Ensemble and BaggingEnsemble. The former implements naive ensembles and the latter bagging ensembles. [\\#459](https://github.com/stellargraph/stellargraph/pull/459)\r\n- Changed from using `keras` to use `tensorflow.keras` [\\#471](https://github.com/stellargraph/stellargraph/pull/471)\r\n- Removed `flatten_output` arguments for all models [\\#447](https://github.com/stellargraph/stellargraph/pull/447)\r\n\r\n**Fixed bugs:**\r\n- Updated Yelp example to support new dataset version [\\#442](https://github.com/stellargraph/stellargraph/pull/442)\r\n- Fixed bug where some nodes and edges did not get a default type [\\#451](https://github.com/stellargraph/stellargraph/pull/451)\r\n- Inconsistency in `Ensemble.fit_generator()` argument [\\#461](https://github.com/stellargraph/stellargraph/issues/461)\r\n- Fixed source--target node designations for code using Cora dataset [\\#444](https://github.com/stellargraph/stellargraph/issues/444)\r\n- IndexError: index 1 is out of bounds for axis 1 with size 1 in: demos/node-classification/hinsage [\\#434](https://github.com/stellargraph/stellargraph/issues/434)\r\n- GraphSAGE and GAT/GCN predictions have different shapes [\\#425](https://github.com/stellargraph/stellargraph/issues/425)",
        "dateCreated": "2019-10-25T04:34:45Z",
        "datePublished": "2019-10-25T04:45:05Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.8.0",
        "name": "Release 0.8.0",
        "tag_name": "v0.8.0",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.8.0",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/20968718",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.8.0"
      },
      {
        "authorType": "User",
        "author_name": "youph",
        "body": "Limited NetworkX version to <2.4 and Tensorflow version to <1.15 in installation requirements, to avoid errors due to API changes in the recent versions of NetworkX and Tensorflow.",
        "dateCreated": "2019-10-18T05:50:46Z",
        "datePublished": "2019-10-18T05:54:59Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.7.3",
        "name": "Release 0.7.3 (hotfix)",
        "tag_name": "v0.7.3",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.7.3",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/20795568",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.7.3"
      },
      {
        "authorType": "User",
        "author_name": "youph",
        "body": "Limited Keras version to <2.2.5 and Tensorflow version to <2.0 in installation requirements, to avoid errors due to API changes in the recent versions of Keras and Tensorflow.",
        "dateCreated": "2019-09-20T05:07:43Z",
        "datePublished": "2019-09-20T05:12:47Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.7.2",
        "name": "Release 0.7.2 (hotfix)",
        "tag_name": "v0.7.2",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.7.2",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/20128643",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.7.2"
      },
      {
        "authorType": "User",
        "author_name": "adocherty",
        "body": "**Fixed bugs:**\r\n\r\n- Removed igraph and mplleaflet from `demos` requirements in `setup.py`. Python-igraph doesn't install on many systems and is only required for the clustering notebook. See the `README.md` in that directory for requirements and installation directions.\r\n- Updated GCN interpretability notebook to work with new FullBatchGenerator API [\\#429](https://github.com/stellargraph/stellargraph/pull/429)\r\n\r\n",
        "dateCreated": "2019-06-25T01:01:05Z",
        "datePublished": "2019-06-25T01:09:41Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.7.1",
        "name": "Release 0.7.1 (hotfix)",
        "tag_name": "v0.7.1",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.7.1",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/18196440",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.7.1"
      },
      {
        "authorType": "User",
        "author_name": "adocherty",
        "body": "**New features and enhancements:**\r\n- SGC Implementation [\\#361](https://github.com/stellargraph/stellargraph/pull/361)\r\n- Updated to support Python 3.7 [\\#348](https://github.com/stellargraph/stellargraph/pull/348)\r\n- FullBatchNodeGenerator now supports a simpler interface to apply different adjacency matrix pre-processing options [\\#405](https://github.com/stellargraph/stellargraph/pull/405)\r\n- Full-batch models (GCN, GAT, and SGC) now return predictions for only those nodes provided to the generator in the same order [\\#417](https://github.com/stellargraph/stellargraph/pull/417)\r\n- GAT now supports using a sparse adjacency matrix making execution faster [\\#420](https://github.com/stellargraph/stellargraph/pull/420)\r\n- Added interpretability of GCN models and a demo of finding important edges for a node prediction [\\#383](https://github.com/stellargraph/stellargraph/pull/383)\r\n- Added a demo showing inductive classification with the PubMed dataset [\\#372](https://github.com/stellargraph/stellargraph/pull/372)\r\n\r\n**Refactoring:**\r\n- Added build\\(\\) method for GraphSAGE and HinSAGE model classes [\\#385](https://github.com/stellargraph/stellargraph/pull/385)\r\nThis replaces the node_model\\(\\) and link_model\\(\\) methods, which will be deprecated in future versions (deprecation warnings added).\r\n- Changed the `FullBatchNodeGenerator` to accept simpler `method` and `transform` arguments [\\#405](https://github.com/stellargraph/stellargraph/pull/405)\r\n\r\n**Fixed bugs:**\r\n- Removed label from features for pubmed dataset. [\\#362](https://github.com/stellargraph/stellargraph/pull/362)\r\n- Python igraph requirement fixed [\\#392](https://github.com/stellargraph/stellargraph/pull/392)\r\n- Simplified random walks to not require passing a graph [\\#408](https://github.com/stellargraph/stellargraph/pull/408)",
        "dateCreated": "2019-06-20T04:50:51Z",
        "datePublished": "2019-06-25T00:45:19Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.7.0",
        "name": "Version 0.7.0",
        "tag_name": "v0.7.0",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.7.0",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/18196230",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.7.0"
      },
      {
        "authorType": "User",
        "author_name": "youph",
        "body": "**Fixed bugs:**\r\n- a bug in passing graph adjacency matrix to the optional `func_opt` function in `FullBatchNodeGenerator` class\r\n- a bug in `demos/node-classification/gcn/gcn-cora-example.py:144`: incorrect argument was used to pass\r\nthe optional function to the generator for GCN\r\n\r\n**Enhancements:**\r\n- separate treatment of `gcn` and `gat` models in `demos/ensembles/ensemble-node-classification-example.ipynb`",
        "dateCreated": "2019-04-01T05:41:41Z",
        "datePublished": "2019-04-01T06:05:32Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.6.1",
        "name": "Hotfix 0.6.1",
        "tag_name": "v0.6.1",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.6.1",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/16466739",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.6.1"
      },
      {
        "authorType": "User",
        "author_name": "youph",
        "body": "**New features and enhancements:**\r\n- Graph Attention (GAT) layer and model (stack of GAT layers), with demos [\\#216](https://github.com/stellargraph/stellargraph/issues/216), \r\n[\\#315](https://github.com/stellargraph/stellargraph/pull/315)\r\n- Unsupervised GraphSAGE [\\#331](https://github.com/stellargraph/stellargraph/pull/331) with a demo [\\#335](https://github.com/stellargraph/stellargraph/pull/335)\r\n- Model Ensembles [\\#343](https://github.com/stellargraph/stellargraph/pull/343)\r\n- Community detection based on unsupervised graph representation learning [\\#354](https://github.com/stellargraph/stellargraph/pull/354)\r\n- Saliency maps and integrated gradients for model interpretability [\\#345](https://github.com/stellargraph/stellargraph/pull/345)\r\n- Shuffling of head nodes/edges in node and link generators at each epoch [\\#298](https://github.com/stellargraph/stellargraph/issues/298)\r\n\r\n**Fixed bugs:**\r\n- a bug where seed was not passed to sampler in `GraphSAGELinkGenerator` constructor [\\#337](https://github.com/stellargraph/stellargraph/pull/337)\r\n- UniformRandomMetaPathWalk doesn't update the current node neighbors [\\#340](https://github.com/stellargraph/stellargraph/issues/340)\r\n- seed value for link mapper [\\#336](https://github.com/stellargraph/stellargraph/issues/336)\r\n",
        "dateCreated": "2019-03-14T04:25:10Z",
        "datePublished": "2019-03-14T04:31:13Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.6.0",
        "name": "Version 0.6.0",
        "tag_name": "v0.6.0",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.6.0",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/16104716",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.6.0"
      },
      {
        "authorType": "User",
        "author_name": "youph",
        "body": "**Implemented new features and enhancements:**\r\n\r\n- Added model calibration [\\#326](https://github.com/stellargraph/stellargraph/pull/326)\r\n- Added `GraphConvolution` layer, `GCN` class for a stack of `GraphConvolution` layers, \r\nand `FullBatchNodeGenerator` class for feeding data into `GCN` models [\\#318](https://github.com/stellargraph/stellargraph/pull/318)\r\n- Added GraphSAGE attention aggregator [\\#317](https://github.com/stellargraph/stellargraph/pull/317)\r\n- Added GraphSAGE MaxPoolAggregator and MeanPoolAggregator [\\#278](https://github.com/stellargraph/stellargraph/pull/278)\r\n- Added shuffle option to all `flow` methods for GraphSAGE and HinSAGE generators [\\#328](https://github.com/stellargraph/stellargraph/pull/328)\r\n- GraphSAGE and HinSAGE: ensure that a MLP can be created by using zero samples [\\#301](https://github.com/stellargraph/stellargraph/issues/301)\r\n- Handle isolated nodes in GraphSAGE [\\#294](https://github.com/stellargraph/stellargraph/issues/294)\r\n- Ensure isolated nodes are handled correctly by GraphSAGENodeMapper and GraphSAGELinkMapper [\\#182](https://github.com/stellargraph/stellargraph/issues/182)\r\n- EdgeSplitter: introduce a switch for keeping the reduced graph connected [\\#285](https://github.com/stellargraph/stellargraph/issues/285)\r\n- Node2vec for weighted graphs [\\#241](https://github.com/stellargraph/stellargraph/issues/241)\r\n- Fix edge types in demos [\\#237](https://github.com/stellargraph/stellargraph/issues/237)\r\n- Add docstrings to StellarGraphBase class [\\#175](https://github.com/stellargraph/stellargraph/issues/175)\r\n- Make L2-normalisation of the final embeddings in GraphSAGE and HinSAGE optional [\\#115](https://github.com/stellargraph/stellargraph/issues/115)\r\n- Check/change the GraphSAGE mapper's behaviour for isolated nodes [\\#100](https://github.com/stellargraph/stellargraph/issues/100)\r\n- Added GraphSAGE node embedding extraction and visualisation [\\#290](https://github.com/stellargraph/stellargraph/pull/290)\r\n\r\n**Fixed bugs:**\r\n\r\n- Fixed the bug in running demos when no options given [\\#271](https://github.com/stellargraph/stellargraph/issues/271)\r\n- Fixed the bug in LinkSequence that threw an error when no link targets were given [\\#273](https://github.com/stellargraph/stellargraph/pull/273)\r\n\r\n**Refactoring:**\r\n- Refactored link inference classes to use `edge_embedding_method` instead of `edge_feature_method` [\\#327](https://github.com/stellargraph/stellargraph/pull/327)",
        "dateCreated": "2019-02-11T05:51:56Z",
        "datePublished": "2019-02-11T05:58:09Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.5.0",
        "name": "New algorithms, enhancements, bug fixes",
        "tag_name": "v0.5.0",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.5.0",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/15475792",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.5.0"
      },
      {
        "authorType": "User",
        "author_name": "youph",
        "body": "What's new:\r\n- BiasedRandomWalk sampler is improved and optimized\r\n- Typos fixed\r\n- Some broken links in documentation are fixed\r\n",
        "dateCreated": "2018-10-04T00:30:05Z",
        "datePublished": "2018-10-04T00:40:16Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/0.4.1",
        "name": "Version 0.4.1",
        "tag_name": "0.4.1",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/0.4.1",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/13234934",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/0.4.1"
      },
      {
        "authorType": "User",
        "author_name": "youph",
        "body": "Features of this release:\r\n- The library is refactored for better structure and more intuitive use;\r\n- `/demos` populated with examples covering representation learning, node attribute inference, and link prediction/inference for both homogeneous and heterogeneous networks;\r\n- Usage of `StellarGraph` class is simplified;\r\n- Documentation improved;\r\n- Various bugs fixed.",
        "dateCreated": "2018-09-14T03:22:07Z",
        "datePublished": "2018-09-14T03:31:05Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.4.0",
        "name": "Public release of StellarGraph library",
        "tag_name": "v0.4.0",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.4.0",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/12894545",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.4.0"
      },
      {
        "authorType": "User",
        "author_name": "youph",
        "body": "What's new in this release:\r\n\r\n- UniformRandomMetaPathWalk class added to `/stellar/data/explorer.py`, enabling metapath-driven uniform random walks on heterogeneous graphs with multiple node types (but currently limited to one edge type per pair of nodes)\r\n- Added GraphSAGELinkMapper class to `/stellar/mapper/link_mapper.py`, for feeding minibatches of links into the GraphSAGE layer, for link prediction/classification/attribute inference workflows.\r\n- A demo of link prediction using GraphSAGE is added in `/demos/link-prediction_graphsage/`, showing how to use GraphSAGELinkMapper to build an end-to-end link prediction/classification workflow with GraphSAGE.\r\n- StellarGraph base class is introduced in `/stellar/data/stellargraph.py`. This class is intended to be the default class for graph objects in this library.\r\n- A convenience graph loader function, from_epgm(), is added to `/stellar/data/loader.py`\r\n- Some bugs are fixed\r\n- Code documentation is improved\r\n\r\n",
        "dateCreated": "2018-07-16T04:37:46Z",
        "datePublished": "2018-07-16T04:53:04Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.3.0",
        "name": "GraphSAGE: node and link prediction; metapath-driven random walks; StellarGraph class",
        "tag_name": "v0.3.0",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.3.0",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/11939298",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.3.0"
      },
      {
        "authorType": "User",
        "author_name": "youph",
        "body": "What's new in this release: \r\n- UniformRandomWalk class added to /stellar/data/explorer.py\r\n- SampledBreadthFirstWalk class added, to be used with GraphSAGENodeMapper class\r\n- GraphSAGENodeMapper class added, to feed minibatches of sampled subgraphs to GraphSAGE layer\r\n- a demo added /demos/node-classification/epgm-example.py showing how to use GraphSAGENodeMapper with  SampledBreadthFirstWalk sampler to build an end-to-end node classification workflow with GraphSAGE.",
        "dateCreated": "2018-07-04T03:01:14Z",
        "datePublished": "2018-07-04T03:39:00Z",
        "html_url": "https://github.com/stellargraph/stellargraph/releases/tag/v0.2.0",
        "name": "Added sampler and mapper for GraphSAGE",
        "tag_name": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/stellargraph/stellargraph/tarball/v0.2.0",
        "url": "https://api.github.com/repos/stellargraph/stellargraph/releases/11770239",
        "zipball_url": "https://api.github.com/repos/stellargraph/stellargraph/zipball/v0.2.0"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2238,
      "date": "Wed, 22 Dec 2021 19:24:23 GMT"
    },
    "technique": "GitHub API"
  },
  "support": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you get stuck or have a problem, there are many ways to make progress and get help or support:\n\n- [Read the documentation](https://stellargraph.readthedocs.io)\n- [Consult the examples][demos]\n- Contact us:\n  - [Ask questions and discuss problems on the StellarGraph Discussions forum](https://github.com/stellargraph/stellargraph/discussions)\n  - [File an issue](https://github.com/stellargraph/stellargraph/issues/new/choose)\n  - Send us an email at [stellargraph.io@gmail.com](mailto:stellargraph.io@gmail.com?subject=Question%20about%20the%20StellarGraph%20library)\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "graphs",
      "machine-learning",
      "machine-learning-algorithms",
      "graph-convolutional-networks",
      "networkx",
      "geometric-deep-learning",
      "saliency-map",
      "interpretability",
      "heterogeneous-networks",
      "graph-neural-networks",
      "graph-analysis",
      "graph-machine-learning",
      "gcn",
      "link-prediction",
      "stellargraph-library",
      "graph-data",
      "python",
      "deep-learning",
      "data-science"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[The numerous detailed and narrated examples][demos] are a good way to get started with StellarGraph. There is likely to be one that is similar to your data or your problem (if not, [let us know](#getting-help)).\n\n[demos]: https://stellargraph.readthedocs.io/en/stable/demos/index.html\n\nYou can start working with the examples immediately in Google Colab or Binder by clicking the ![](https://colab.research.google.com/assets/colab-badge.svg) and ![](https://mybinder.org/badge_logo.svg) badges within each Jupyter notebook.\n\nAlternatively, you can run download a local copy of the demos and run them using `jupyter`. The demos can be downloaded by cloning the `master` branch of this repository, or by using the `curl` command below:\n```bash\ncurl -L https://github.com/stellargraph/stellargraph/archive/master.zip | tar -xz --strip=1 stellargraph-master/demos\n```\n\nThe dependencies required to run most of our demo notebooks locally can be installed using one of the following:\n\n- Using `pip`: `pip install stellargraph[demos]`\n- Using `conda`: `conda install -c stellargraph stellargraph`\n\n(See [Installation](#installation) section for more details and more options.)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "If you get stuck or have a problem, there are many ways to make progress and get help or support:\n\n- [Read the documentation](https://stellargraph.readthedocs.io)\n- [Consult the examples][demos]\n- Contact us:\n  - [Ask questions and discuss problems on the StellarGraph Discussions forum](https://github.com/stellargraph/stellargraph/discussions)\n  - [File an issue](https://github.com/stellargraph/stellargraph/issues/new/choose)\n  - Send us an email at [stellargraph.io@gmail.com](mailto:stellargraph.io@gmail.com?subject=Question%20about%20the%20StellarGraph%20library)\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "One of the earliest deep machine learning algorithms for graphs is a Graph Convolution Network (GCN) [6]. The following example uses it for node classification: predicting the class from which a node comes. It shows how easy it is to apply using StellarGraph, and shows how StellarGraph integrates smoothly with Pandas and TensorFlow and libraries built on them.\n\n",
      "technique": "Header extraction"
    }
  ]
}