{
  "citation": [
    {
      "confidence": [
        0.973971314312959
      ],
      "excerpt": "Demo <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" align=\"center\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8762273521369647
      ],
      "excerpt": "[x] Implement the multi style transfer network \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ryanwongsa/Real-time-multi-style-transfer",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-01-21T20:46:12Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-16T15:34:35Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9888617084306346
      ],
      "excerpt": "My implementation in Pytorch of an adaption of the paper A LEARNED REPRESENTATION FOR ARTISTIC STYLE (Vincent Dumoulin & Jonathon Shlens & Manjunath Kudlur). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.956937738930238
      ],
      "excerpt": "The implementation uses Pytorch to train a deep convolutional neural network to be able to learn multiple art styles. The code implementation might not be an exact match of the paper by Vincent Dumoulin et al. as the training details and exact loss hyperparameters were not fully described. Each feature map in the network has two weights (alpha and gamma) dedicated to each style. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8933692836813137
      ],
      "excerpt": "[x] Save the model to an external location \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9562328461608404
      ],
      "excerpt": "[x] create the \"transfer learning\" approach described in the paper to train new styles only using the alpha and gamma weights \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127
      ],
      "excerpt": "[x] Fix bug with resblock \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9707693691410405
      ],
      "excerpt": "[ ] Convert to ONNX model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Real time multi style transfer implementation in PyTorch",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ryanwongsa/Real-time-multi-style-transfer/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Sat, 25 Dec 2021 18:33:14 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ryanwongsa/Real-time-multi-style-transfer/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ryanwongsa/Real-time-multi-style-transfer",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/ryanwongsa/Real-time-multi-style-transfer/master/TrainingAndInferenceExample.ipynb",
      "https://raw.githubusercontent.com/ryanwongsa/Real-time-multi-style-transfer/master/Example.ipynb",
      "https://raw.githubusercontent.com/ryanwongsa/Real-time-multi-style-transfer/master/Real_time_multi_style_transfer_demo.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/ryanwongsa/Real-time-multi-style-transfer/master/dataset/download_coco.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9717106327039013
      ],
      "excerpt": "[x] Implement a webcam feed version \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9265308400233802,
        0.9146966656653649
      ],
      "excerpt": "<img src = 'sample/sample.jpg'> \n<img src = 'sample/movie.gif' width = '512px' height = '512px'> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8303527233168329
      ],
      "excerpt": "alt=\"Youtube sample\" width=\"256\" border=\"10\" /></a> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ryanwongsa/Real-time-multi-style-transfer/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Real Time Multi Style Transfer in Pytorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Real-time-multi-style-transfer",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ryanwongsa",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ryanwongsa/Real-time-multi-style-transfer/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Conda 3 installation of python 3\n```\nconda create --name <env> --file requirements.txt\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 10,
      "date": "Sat, 25 Dec 2021 18:33:14 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "style-transfer",
      "neural-style-transfer",
      "neural-networks",
      "deep-learning"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Download the training dataset, using the coco dataset but can use any image dataset:\n```\nsh dataset/download_coco.sh\n```\n\nTraining from scratch:\n```\npython trainstylenet.py --dataset-images {dataset_images} --styles-dir {styles_dir} --num-workers {num_workers} --model-dir {model_dir} --eval-image-dir {eval_image_dir} \n```\n\nInference\n```\npython inferstylenet.py --input-image ../bird.jpg --model-save-dir style16/pastichemodel-FINAL.pth --style-choice 4 --style-choice-2 5 --style-factor 0.5\n```\n\nPretrained model and styles available [here](https://drive.google.com/drive/folders/1BFszn2tQdrVPeovpu5utY6XpQ4gkA96_?usp=sharing) \n\nThere are 16 styles in the pretrained model. It is possible to use transfer learning to only learn the `alpha` and `gamma` weights as described in the paper but results seemed to have a similar convergence rate without transfer learning. The transfer learning method is available in `train/Trainer.py` using the method `transfer_learn_model()`. \n\n\n",
      "technique": "Header extraction"
    }
  ]
}