{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Tensorflow:\n  - FCN implementation: https://github.com/MarvinTeichmann/tensorflow-fcn\n  - SegNet implementation: https://github.com/tkuanlun350/Tensorflow-SegNet\n  - Some interesting segmentation notebooks: https://github.com/warmspringwinds/tensorflow_notes \n\n- Papers:\n  - Fully convolutional networks (Nov 14) : https://people.eecs.berkeley.edu/~jonlong/long_shelhamer_fcn.pdf\n  - SegNet: https://arxiv.org/pdf/1511.00561.pdf\n  - DeconvNet (May 15): https://arxiv.org/pdf/1505.04366v1.pdf\n  - DeepLab-LargeFOV (Dec 14): https://arxiv.org/pdf/1412.7062v4.pdf\n\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/arahusky/Tensorflow-Segmentation",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-01-05T21:55:31Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-24T20:13:21Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9020186691654464,
        0.951621308817926
      ],
      "excerpt": "This project implements neural network for semantic segmentation in Tensorflow . \nThe main file of the project is convolutional_autoencoder.py, which contains code for dataset processing (class Dataset), model definition (class Model) and also code for training.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9418180821738303
      ],
      "excerpt": "- data* contain preprocessed dataset (Please note that current model implementation is supposed to work with at least 128x128 images.) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8981464233581615,
        0.893966221455484
      ],
      "excerpt": "Encoder in these networks has in many cases structure similar to some image classification neural network (e.g. vgg-16). Layers in the decoder are then ussualy inverse to layers used in the encoder (e.g. for convolution that makes its input smaller, we use deconvolution; for max_pool we use some form of \"demax_pool\"). \nInspired by previous success of convolutional encoder-decoder architectures, we decided to implement it as well. In the encoder part, we use three similar \"modules\", each consisting of convolution layer with stride 2 followed by convolutution layer with stride 1 and no-overlapping max_pool with kernel 2. The decoder section then for each layer in the encoder contains its \"counter-part\" (network output dimension == input dimension): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9333855081320482
      ],
      "excerpt": "We also found that adding skip-links from encoder to decoder makes the model perform better (~1%). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9808221205429956,
        0.9288521375201134,
        0.9295044158538092
      ],
      "excerpt": "This project uses publicly available dataset of faces: http://vis-www.cs.umass.edu/lfw/part_labels. The repository contains three versions of this dataset differing in the image resolution (28x28, 128x128, 250x250).  \nThe original dataset consists of three target categories (face, hair, background). To make the segmentation easier, we decided to create two subsets of original targets: one containing merged hair and background classes(\"targets_face_only\") and other containing merged hair and face classes(\"targets\"). \nWe experimented with several architectures (some of them are mentioned in project_summary.pdf). Even though original images are RGB, we decided to use them in grayscale. The best performance we managed to achieve on 128x128 images was 97.36% in means of per-pixel accuracy. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Semantic image segmentation in Tensorflow",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/arahusky/Tensorflow-Segmentation/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 88,
      "date": "Sat, 25 Dec 2021 14:51:34 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/arahusky/Tensorflow-Segmentation/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "arahusky/Tensorflow-Segmentation",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/arahusky/Tensorflow-Segmentation/master/notebooks/simple_classification_segmentation.ipynb",
      "https://raw.githubusercontent.com/arahusky/Tensorflow-Segmentation/master/notebooks/upsampling_segmentation.ipynb"
    ],
    "technique": "File Exploration"
  },
  "invocation": [
    {
      "confidence": [
        0.8584104048623116
      ],
      "excerpt": "To infer on the trained model, have a look at infer.py file. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8116880774161213
      ],
      "excerpt": "Sample results of the best model segmentation. The first row contains input faces, second ground truth image segmentation, third model output and the fourth row shows thresholded model output \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/arahusky/Tensorflow-Segmentation/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'The MIT License (MIT)\\n\\nCopyright (c) 2015 aleju\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Image segmentation",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Tensorflow-Segmentation",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "arahusky",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/arahusky/Tensorflow-Segmentation/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Python 3.5\n- Tensorflow > 1.0\n- Opencv 3.x\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 264,
      "date": "Sat, 25 Dec 2021 14:51:34 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "tensorflow",
      "image-segmentation"
    ],
    "technique": "GitHub API"
  }
}