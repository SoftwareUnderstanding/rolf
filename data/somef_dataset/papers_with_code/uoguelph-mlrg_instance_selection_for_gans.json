{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2007.15255",
      "https://arxiv.org/abs/1809.11096",
      "https://arxiv.org/abs/1809.11096",
      "https://arxiv.org/abs/1809.11096 (2018)."
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[1] Brock, Andrew, and Alex Andonian. \"BigGAN-PyTorch\". https://github.com/ajbrock/BigGAN-PyTorch  \n[2] Brock, Andrew, Jeff Donahue, and Karen Simonyan. \"Large scale gan training for high fidelity natural image synthesis.\" arXiv preprint arXiv:1809.11096 (2018).\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use this code, please cite\n```\n@article{devries2020instance,\n  title={Instance Selection for GANs},\n  author={DeVries, Terrance and Drozdzal, Michal and Taylor, Graham W},\n  journal={Advances in Neural Information Processing Systems},\n  year={2020}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{devries2020instance,\n  title={Instance Selection for GANs},\n  author={DeVries, Terrance and Drozdzal, Michal and Taylor, Graham W},\n  journal={Advances in Neural Information Processing Systems},\n  year={2020}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9426602447349384
      ],
      "excerpt": "| BigGAN + 50% instance selection                 | 64 | 256        | 2       | 10.6            | 0.91   | 0.52    | 10.7 days      | 4 V100 | \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/uoguelph-mlrg/instance_selection_for_gans",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-09-07T21:12:50Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-30T19:14:26Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9615833983121558
      ],
      "excerpt": "Training models with instance selection results in improvements to image quality, as well as significant reduction in training time and model capacity requirements. On 128x128 ImageNet, instance selection reduces training time by 4x compared to the baseline, and achieves better image quality than a model trained with twice the model capacity. On 256x256 ImageNet, a model trained with instance selection produces higher fidelity images than a model with twice the capacity, while also using approximately one order of magnitude less multiply-accumulate operations (MACS) throughout the duration of training. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9323920057430917,
        0.8957467396986526
      ],
      "excerpt": "All metrics are computed using the PyTorch pretrained Inceptionv3 weights. The PyTorch and TensorFlow Inceptionv3 weights give slightly different results, and as such may not be directly comparable. \nTo replicate our best 64x64 model run bash scripts/launch_SAGAN_res64_ch32_bs128_dstep_1_rr40.sh. A single GPU with at least 12GB of memory should be sufficient to train this model. Training is expected to take about 2-3 days on a high-end GPU. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Official code repository for Instance Selection for GANs.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/uoguelph-mlrg/instance_selection_for_gans/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Wed, 29 Dec 2021 00:08:05 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/uoguelph-mlrg/instance_selection_for_gans/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "uoguelph-mlrg/instance_selection_for_gans",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/uoguelph-mlrg/instance_selection_for_gans/master/scripts/launch_BigGAN_res128_ch64_bs256_dstep_1_rr50.sh",
      "https://raw.githubusercontent.com/uoguelph-mlrg/instance_selection_for_gans/master/scripts/launch_SAGAN_res64_ch32_bs128_dstep_1_rr40.sh",
      "https://raw.githubusercontent.com/uoguelph-mlrg/instance_selection_for_gans/master/scripts/launch_BigGAN_res256_ch64_bs256_dstep_2_rr50.sh",
      "https://raw.githubusercontent.com/uoguelph-mlrg/instance_selection_for_gans/master/scripts/utils/prepare_data_imagenet_128.sh",
      "https://raw.githubusercontent.com/uoguelph-mlrg/instance_selection_for_gans/master/scripts/utils/prepare_data_imagenet_256.sh",
      "https://raw.githubusercontent.com/uoguelph-mlrg/instance_selection_for_gans/master/scripts/utils/prepare_data_imagenet_64.sh",
      "https://raw.githubusercontent.com/uoguelph-mlrg/instance_selection_for_gans/master/BigGAN-PyTorch/scripts/launch_BigGAN_deep.sh",
      "https://raw.githubusercontent.com/uoguelph-mlrg/instance_selection_for_gans/master/BigGAN-PyTorch/scripts/launch_cifar_ema.sh",
      "https://raw.githubusercontent.com/uoguelph-mlrg/instance_selection_for_gans/master/BigGAN-PyTorch/scripts/launch_BigGAN_bs256x8.sh",
      "https://raw.githubusercontent.com/uoguelph-mlrg/instance_selection_for_gans/master/BigGAN-PyTorch/scripts/launch_BigGAN_bs512x4.sh",
      "https://raw.githubusercontent.com/uoguelph-mlrg/instance_selection_for_gans/master/BigGAN-PyTorch/scripts/launch_SAGAN_bs128x2_ema.sh",
      "https://raw.githubusercontent.com/uoguelph-mlrg/instance_selection_for_gans/master/BigGAN-PyTorch/scripts/sample_cifar_ema.sh",
      "https://raw.githubusercontent.com/uoguelph-mlrg/instance_selection_for_gans/master/BigGAN-PyTorch/scripts/launch_SNGAN.sh",
      "https://raw.githubusercontent.com/uoguelph-mlrg/instance_selection_for_gans/master/BigGAN-PyTorch/scripts/sample_BigGAN_bs256x8.sh",
      "https://raw.githubusercontent.com/uoguelph-mlrg/instance_selection_for_gans/master/BigGAN-PyTorch/scripts/launch_BigGAN_ch64_bs256x8.sh",
      "https://raw.githubusercontent.com/uoguelph-mlrg/instance_selection_for_gans/master/BigGAN-PyTorch/scripts/utils/prepare_data.sh",
      "https://raw.githubusercontent.com/uoguelph-mlrg/instance_selection_for_gans/master/BigGAN-PyTorch/scripts/utils/duplicate.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To train a BigGAN on ImageNet you will first need to construct an HDF5 dataset file for ImageNet (optional), compute Inception moments for calculating FID, and construct the image manifold for calculating Precision, Recall, Density, and Coverage. All can by done by modifying and running \n```\nbash scripts/utils/prepare_data_imagenet_[res].sh\n```\nwhere [res] is substituted with the desired resolution (options are 64, 128, or 256). These scripts will assume that ImageNet is in a folder called `data` in the instance_selection_for_gans directory. Replace this with the filepath to your copy of ImageNet. \n\n",
      "technique": "Header extraction"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/uoguelph-mlrg/instance_selection_for_gans/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell",
      "MATLAB"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Andy Brock\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Instance Selection for GANs",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "instance_selection_for_gans",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "uoguelph-mlrg",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/uoguelph-mlrg/instance_selection_for_gans/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 35,
      "date": "Wed, 29 Dec 2021 00:08:05 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This repo contains code for the NeurIPS 2020 paper [Instance Selection for GANs](https://arxiv.org/abs/2007.15255) by Terrance DeVries, Michal Drozdzal, and Graham W. Taylor. \n\n<p align=\"center\">\n  <img src=\"imgs/samples.png\">\n  Samples from a BigGAN trained with instance selection on 256x256 ImageNet. Training took 11 days on 4 V100 GPUs.\n</p>\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Instance selection is a preprocessing technique that is commonly applied in the setting of classification to reduce the size of a dataset. In the setting of GAN training it can be applied to **trade diversity for visual fidelity**. Instance selection for GANs can be performed by removing data points from the training set that lie in low density regions of the data manifold. This method can be seen as similar to the [truncation trick](https://arxiv.org/abs/1809.11096), as they both ignore examples that lie on the fringes of the data manifold to improve sample quality. However, instance selection has the added benefit of **significantly reducing training time and model capacity requirements**, since removing data points *before* training prevents the model from wasting time and capacity trying to model examples that will ultimately be discarded.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "To train BigGAN models we use the [BigGAN-PyTorch](https://github.com/ajbrock/BigGAN-PyTorch) repo. We perform minimal changes to the code, consisting only of adding options for instance selection and additional metric logging. A list of changes made to the original repo can be found in the change log at [BigGAN-PyTorch/change_log.md](https://github.com/uoguelph-mlrg/instance_selection_for_gans/blob/master/BigGAN-PyTorch/change_log.md). \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Instance selection can be applied to any unlabelled or class labelled PyTorch dataset using the `select_instances` function. When classes are provided, instance selection will be applied separately for each class.  \n\nThe main hyperparameter for instance selection is the `retention_ratio`, a value from 0 to 100 which indicates the percentage of datapoints that should be selected from the original dataset. The retention ratio controls the trade-off between diversity and fidelity. As the retention ratio is reduced, image fidelity should increase, and model capacity requirements and training time should decrease proportional to the amount of data removed. Similarly, the diversity of samples produced by the GAN is expected to reduce as the retention ratio is lowered. \n\n```python\nimport torchvision\nimport torchvision.transforms as transforms\nfrom instance_selection import select_instances\n\n#: images are expected to be in range [-1, 1]\ntransform = transforms.Compose([transforms.ToTensor(),\n                                transforms.Normalize(mean=[0.5, 0.5, 0.5],\n                                                     std=[0.5, 0.5, 0.5])])\n\n#: replace CIFAR10 with your own dataset \ndataset = torchvision.datasets.CIFAR10(root='.', transform=transform, download=True)\ninstance_selected_dataset = select_instances(dataset, retention_ratio=50)\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}