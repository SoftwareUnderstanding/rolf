{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2104.03954",
      "https://arxiv.org/abs/1912.08193"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n@InProceedings{wu2021derender,\n  author={Shangzhe Wu and Ameesh Makadia and Jiajun Wu and Noah Snavely and Richard Tucker and Angjoo Kanazawa},\n  title={De-rendering the World's Revolutionary Artefacts},\n  booktitle = {CVPR},\n  year = {2021}\n}\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@InProceedings{wu2021derender,\n  author={Shangzhe Wu and Ameesh Makadia and Jiajun Wu and Noah Snavely and Richard Tucker and Angjoo Kanazawa},\n  title={De-rendering the World's Revolutionary Artefacts},\n  booktitle = {CVPR},\n  year = {2021}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8132852241448368,
        0.9997392920880483,
        0.998711170729045
      ],
      "excerpt": "In CVPR 2021 \nShangzhe Wu<sup>1,4</sup>, Ameesh Makadia<sup>4</sup>, Jiajun Wu<sup>2</sup>, Noah Snavely<sup>4</sup>, Richard Tucker<sup>4</sup>, Angjoo Kanazawa<sup>3,4</sup> \n<sup>1</sup> University of Oxford, <sup>2</sup> Stanford University, <sup>3</sup> University of California, Berkeley, <sup>4</sup> Google Research \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/elliottwu/sorderender",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-08-19T16:48:49Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-27T14:32:06Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9726325583518226
      ],
      "excerpt": "<sup>1</sup> University of Oxford, <sup>2</sup> Stanford University, <sup>3</sup> University of California, Berkeley, <sup>4</sup> Google Research \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.935163892761278,
        0.9387169726416825
      ],
      "excerpt": "We propose a model that de-renders a single image of a vase into shape, material and environment illumination, trained using only a single image collection, without explicit 3D, multi-view or multi-light supervision. \nThis vase dataset is collected from Metropolitan Museum of Art Collection through their open-access API under the CC0 License. It contains 1888 training images and 526 testing images of museum vases with segmentation masks obtained using PointRend and GrabCut. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9407682792508101
      ],
      "excerpt": "This synthetic vase dataset is generated with random vase-like shapes, poses (elevation), lighting (using spherical Gaussian) and shininess materials. The diffuse texture is generated using the texture maps provided in CC0 Textures (now called ambientCG) under the CC0 License. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8814379636429288
      ],
      "excerpt": "We also provide the scripts for downloading CC0 Textures and generating this dataset in data/syn_vases/scripts/. Note the script uses API V1 of CC0 Textures to download the texture maps, which appears outdated already. Many assets have now been removed. API V2 has been released. Please check and adapt the code to the new API. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8276746750767375
      ],
      "excerpt": "To render animations of rotating vases and rotating light, check and run this script: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "[CVPR2021] De-rendering the World's Revolutionary Artefacts",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/elliottwu/sorderender/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Mon, 27 Dec 2021 22:26:02 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/elliottwu/sorderender/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "elliottwu/sorderender",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/elliottwu/sorderender/master/pretrained/download_pretrained_met_vase.sh",
      "https://raw.githubusercontent.com/elliottwu/sorderender/master/pretrained/download_pretrained_syn_vase.sh",
      "https://raw.githubusercontent.com/elliottwu/sorderender/master/data/download_syn_vases.sh",
      "https://raw.githubusercontent.com/elliottwu/sorderender/master/data/download_met_vases.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This package is required for training and testing, and optional for the demo. It requires a GPU device and GPU-enabled PyTorch.\n```\npip install neural_renderer_pytorch==1.1.3\n```\n\n*Note*: If this fails or runtime error occurs, try compiling it from source. If you don't have a gcc>=5, you could one available on conda: `conda install gxx_linux-64=7.3`.\n```\ngit clone https://github.com/daniilidis-group/neural_renderer.git\ncd neural_renderer\npython setup.py install\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```\nconda install pytorch==1.4.0 torchvision==0.5.0 cudatoolkit=10.1 -c pytorch\n```\n*Note*: The code is tested with PyTorch 1.4.0 and CUDA 10.1. A GPU version is required, as the [neural_renderer](https://github.com/daniilidis-group/neural_renderer) package only has a GPU implementation.\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```\nconda env create -f environment.yml\n```\nOR manually:\n```\nconda install -c conda-forge matplotlib opencv scikit-image pyyaml tensorboard\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8471071484129434,
        0.9441852844759806
      ],
      "excerpt": "Download the preprocessed dataset using the provided script: \ncd data &amp;&amp; sh download_met_vases.sh \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8471071484129434,
        0.9441852844759806
      ],
      "excerpt": "Download the dataset using the provided script: \ncd data &amp;&amp; sh download_syn_vases.sh \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8150564898701654,
        0.9839281310128252
      ],
      "excerpt": "Download the pretrained models using the scripts provided in pretrained/, eg: \ncd pretrained &amp;&amp; sh download_pretrained_met_vase.sh \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9100568922250972
      ],
      "excerpt": "python run.py --config configs/train_met_vase.yml --gpu 0 --num_workers 4 \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.803171877073643
      ],
      "excerpt": "Download the pretrained models using the scripts provided in pretrained/, eg: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8900250561607502
      ],
      "excerpt": "python run.py --config configs/train_met_vase.yml --gpu 0 --num_workers 4 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8943096850060217
      ],
      "excerpt": "python eval/eval_syn_vase.py \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/elliottwu/sorderender/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2021 Shangzhe Wu\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "De-rendering the World's Revolutionary Artefacts",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "sorderender",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "elliottwu",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/elliottwu/sorderender/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\nconda env create -f environment.yml\n```\nOR manually:\n```\nconda install -c conda-forge matplotlib opencv scikit-image pyyaml tensorboard\n```\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 34,
      "date": "Mon, 27 Dec 2021 22:26:02 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "derendering",
      "inverse-graphics",
      "3d",
      "3d-objects",
      "vase",
      "solid-of-revolution",
      "cvpr-2021"
    ],
    "technique": "GitHub API"
  }
}