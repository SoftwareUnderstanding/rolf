{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1509.02971",
      "https://arxiv.org/abs/2007.08380",
      "https://arxiv.org/abs/2103.15154",
      "https://arxiv.org/abs/1509.02971",
      "https://arxiv.org/abs/2007.08380",
      "https://arxiv.org/abs/2006.0224",
      "https://arxiv.org/abs/2103.15154 (2021).\n\nSpecifically, in this project we will simulate the active RIS. And to maximum the universality, this project will provide modular simulation tool for RIS-aided system.\n\n# File structure\n## ./cite\nThe cited paper for this project\n\n## ./learning\nThe code to initialize the agents\n### $\\qquad$ ./learning/official\n$\\qquad$ The offical RL agents api ([tf-agent](https://github.com/tensorflow/agents#Agents))\n### $\\qquad$ ./learning/custom\n$\\qquad$ The third party open source RL agent api\n\n# RIS theory\nthis section mainly refers to [2] (SimRIS1.0) and [2.2] (SimRIS2.0). \n## RIS-Assisted LOS channels(SISO)\n\nAccording to the plate scattering theory[2,(1)], the transmitted signal is captured by each RIS element, then rescattered to the medium in all directions. Focusing on he $n$-th RIS element, the captured power on it can be readily obtained as\n$$\nP_{n",
      "https://arxiv.org/abs/1509.02971 (2015).\n\n[[4]](https://arxiv.org/abs/2007.08380)([pdf](cite/Joint%20trajectory%20and%20passive%20beamforming%20design%20for%20intelligent%20reflecting%20surface-aided%20UAV%20communications%20A%20deep%20reinforcement%20learning%20approach.pdf)) Wang, Liang, et al. \"Joint trajectory and passive beamforming design for intelligent reflecting surface-aided UAV communications: A deep reinforcement learning approach.\" arXiv preprint https://arxiv.org/abs/2007.08380 (2020).\n\n[[5]](https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=3173) 3GPP, \u201cStudy on channel model for frequencies from 0.5 to 100 GHz,\u201d\n3rd Generation Partnership Project (3GPP), Technical Specification (TS)\n38.901, 01 2020, version 16.1.0.\n[[6]](https://arxiv.org/pdf/2006.02240.pdf) E. Basar and I. Yildirim, \u201cIndoor and outdoor physical channel\nmodeling and efficient positioning for reconfigurable intelligent\nsurfaces in mmWave bands,\u201d Aug. 2020. [Online]. Available:\nhttps://arxiv.org/abs/2006.0224",
      "https://arxiv.org/abs/2007.08380 (2020).\n\n[[5]](https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=3173) 3GPP, \u201cStudy on channel model for frequencies from 0.5 to 100 GHz,\u201d\n3rd Generation Partnership Project (3GPP), Technical Specification (TS)\n38.901, 01 2020, version 16.1.0.\n[[6]](https://arxiv.org/pdf/2006.02240.pdf) E. Basar and I. Yildirim, \u201cIndoor and outdoor physical channel\nmodeling and efficient positioning for reconfigurable intelligent\nsurfaces in mmWave bands,\u201d Aug. 2020. [Online]. Available:\nhttps://arxiv.org/abs/2006.0224"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[[1]](https://ieeexplore.ieee.org/document/9434412)([pdf](cite/Learning-based%20Robust%20and%20Secure%20Transmission%20forReconfigurable%20Intelligent%20Surface%20Aided%20MillimeterWave%20UAV%20Communications.pdf)) X. Guo, Y. Chen and Y. Wang, \"Learning-based Robust and Secure Transmission for Reconfigurable Intelligent Surface Aided Millimeter Wave UAV Communications,\" in IEEE Wireless Communications Letters, doi: 10.1109/LWC.2021.3081464.\n\n[2.0] E. Basar and I. Yildirim, \"SimRIS Channel Simulator for Reconfigurable Intelligent Surface-Empowered Communication Systems,\" 2020 IEEE Latin-American Conference on Communications (LATINCOM), 2020, pp. 1-6, doi: 10.1109/LATINCOM50620.2020.9282349. <mark>note this and [2.1]\u00a0is corresponding to the SimRIS1.0 which considers the SISO system</mark>\n\n[2.1] E. Basar, I. Yildirim, \u201cIndoor and Outdoor Physical Channel Modeling and Efficient Positioning for Reconfigurable Intelligent Surfaces in mmWave Bands\u201c, ArXiv:2006.02240, May 2020\n\n[2.2] E. Basar, I. Yildirim, \u201cSimRIS Channel Simulator for Reconfigurable Intelligent Surfaces in Future Wireless Networks\u201d, ArXiv:2008.01448, Aug. 2020.<mark>this is corresponding to the SimRIS2.0 which considers the MIMO system</mark>\n\n[[3]](https://arxiv.org/abs/1509.02971)([pdf](cite/Continuous%20control%20with%20deep%20reinforcement%20learning.pdf)) Lillicrap, Timothy P., et al. \"Continuous control with deep reinforcement learning.\" arXiv preprint arXiv:1509.02971 (2015).\n\n[[4]](https://arxiv.org/abs/2007.08380)([pdf](cite/Joint%20trajectory%20and%20passive%20beamforming%20design%20for%20intelligent%20reflecting%20surface-aided%20UAV%20communications%20A%20deep%20reinforcement%20learning%20approach.pdf)) Wang, Liang, et al. \"Joint trajectory and passive beamforming design for intelligent reflecting surface-aided UAV communications: A deep reinforcement learning approach.\" arXiv preprint arXiv:2007.08380 (2020).\n\n[[5]](https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=3173) 3GPP, \u201cStudy on channel model for frequencies from 0.5 to 100 GHz,\u201d\n3rd Generation Partnership Project (3GPP), Technical Specification (TS)\n38.901, 01 2020, version 16.1.0.\n[[6]](https://arxiv.org/pdf/2006.02240.pdf) E. Basar and I. Yildirim, \u201cIndoor and outdoor physical channel\nmodeling and efficient positioning for reconfigurable intelligent\nsurfaces in mmWave bands,\u201d Aug. 2020. [Online]. Available:\nhttps://arxiv.org/abs/2006.02240",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "The cited paper for this project\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9999960158927974
      ],
      "excerpt": "[1] X. Guo, Y. Chen and Y. Wang, \"Learning-based Robust and Secure Transmission for Reconfigurable Intelligent Surface Aided Millimeter Wave UAV Communications,\" in IEEE Wireless Communications Letters, doi: 10.1109/LWC.2021.3081464. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8541963136019904
      ],
      "excerpt": "Refer to the following code on github:</br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9999974316295108
      ],
      "excerpt": "[2] E. Basar and I. Yildirim, \"SimRIS Channel Simulator for Reconfigurable Intelligent Surface-Empowered Communication Systems,\" 2020 IEEE Latin-American Conference on Communications (LATINCOM), 2020, pp. 1-6, doi: 10.1109/LATINCOM50620.2020.9282349. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9998958441265027
      ],
      "excerpt": "[3] Zhang, Zijian, et al. \"Active RIS vs. Passive RIS: Which Will Prevail in 6G?.\" arXiv preprint arXiv:2103.15154 (2021). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8452299166304732
      ],
      "excerpt": "$\\qquad$ The third party open source RL agent api \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Brook1711/RIS_components",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-05-22T07:45:52Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-07T04:06:28Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9321275472286455
      ],
      "excerpt": "This is a python project for RIS(reconfigurable intelligent surface) simulations. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8705760849990888,
        0.9105306762049431
      ],
      "excerpt": "Refer to the following code on github:</br> \n$\\qquad$ a. tf-agent this is the easiest way the use the official RL(reinforcement learning) api.</br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9203183727257284
      ],
      "excerpt": "$\\qquad$ c. DDPG structure refters to [3](pdf). There has already been some works on the combination of the DDPG and the RIS [4](pdf)  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9378285677673291
      ],
      "excerpt": "Refer to the paper Link to this paper / Pdf to this paper. This paper provide a simulation code in matlab, we refer to this project to provide a python version. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9655964576664764
      ],
      "excerpt": "This project aims to redo the simulations shown in the paper below Link to this paper: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9482697541850336,
        0.9431486492764616
      ],
      "excerpt": "Specifically, in this project we will simulate the active RIS. And to maximum the universality, this project will provide modular simulation tool for RIS-aided system. \nThe code to initialize the agents \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8503135479209742,
        0.956585936604494
      ],
      "excerpt": "this section mainly refers to [2] (SimRIS1.0) and [2.2] (SimRIS2.0). \nAccording to the plate scattering theory[2,(1)], the transmitted signal is captured by each RIS element, then rescattered to the medium in all directions. Focusing on he $n$-th RIS element, the captured power on it can be readily obtained as \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9977416365646026,
        0.9264187578296169
      ],
      "excerpt": "where $P_t$ is the transmit power,$G_t$ is the transmit antenna gain in the direction of the $n$-th RIS element (or the RIS in general), $G_e^{Tx}$ is the gain of the corresponding RIS element in the direction of the transmitter (Tx), $\\lambda$ is the wavelength, and $a_n$ is the distance between the transmitter and this element. The effective aperture of the $n$-th RIS element is $G_{e}^{\\mathrm{Tx}} \\lambda^{2} /(4 \\pi)$, and the power flux density incident on it given by $P_{t} G_{t} /\\left(4 \\pi a_{n}^{2}\\right)$. Then the captured power is re-radiated to the medium with an efficiency factor $\\epsilon$, which in [2] is assumed to be unity. \nThe captured power at the receiver (Rx) is obtained as \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9861618364046827
      ],
      "excerpt": "where $G_r$ is the receive antenna gain in the direction of the $n$-th RIS element and $G_{e}^{\\mathrm{Rx}}$ is the gain of the corresponding RIS element in the direction of the receiver. For the same scenario, let us consider the radar range equation given by \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.945433893737639
      ],
      "excerpt": "where $\\sigma_{\\mathrm{RCS}}=4 \\pi A^{2} / \\lambda^{2}$ is the radar cross section (RCS, in $m^2$) of the RIS element with $A$ being its physical area. (2) and (3) are actually the same, given $\\sigma_{RCS} =\\lambda^{2} G_{e}^{2} / 4 \\pi$. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.886186181625867
      ],
      "excerpt": "In general, the received signal at the receiver is: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.984564089609337
      ],
      "excerpt": "Where $\\alpha_n$ and $ \\phi_n$ respectively stand for controllable magnitude and phase response of the nth element, $k=2 \\pi / \\lambda$ is the wave number, and $x$ is the transmitted signal. . One can easily observe from (6) that the received signal power can be maximized by adjusting RIS element phases as $\\phi_{n}=k\\left(a_{n}+b_{n}\\right)$.  Finally, it is worth noting that the direct link between Tx and Rx can be incorporated into the model by \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8938761649881376,
        0.8938761649881376,
        0.8387616692939819
      ],
      "excerpt": "|   ${\\bf H}$   | The matrix of channel coefficients between the Tx and the RIS |  ${\\mathbb C}^{N \\times N_t}$  | \n|   ${\\bf G}$   | The matrix of channel coefficients between the Tx and the RIS | $\\mathbb{C}^{N_{r} \\times N}$  | \n| ${\\bf \\Phi}$  |                The response of the RIS array                 |   $\\mathbb{C}^{N \\times N}$    | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8397405237913428
      ],
      "excerpt": "The basic idea to model the mmWave channel is to consider the channel under SISO senirio and then by multiplexing the array response, we can get the result of a mmWave channel under MIMO senirio. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9832548314064757
      ],
      "excerpt": "the defination of the AoA and AoD is shown below: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "components of RIS simulations",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Brook1711/RIS_components/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Sun, 26 Dec 2021 02:19:11 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Brook1711/RIS_components/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Brook1711/RIS_components",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Brook1711/RIS_components/main/RL_api/official/DDPG_agent.ipynb",
      "https://raw.githubusercontent.com/Brook1711/RIS_components/main/RL_api/official/.ipynb_checkpoints/DDPG_agent-checkpoint.ipynb",
      "https://raw.githubusercontent.com/Brook1711/RIS_components/main/RL_api/official/.ipynb_checkpoints/Untitled-checkpoint.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8028628929544226
      ],
      "excerpt": "Refer to the following code on github:</br> \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8359299706379749,
        0.8359299706379749
      ],
      "excerpt": "|                 $P_t = 0\\ \\text{dBW}$                 | \n|            $G_t= G_r = 1\\ (0\\ \\text{dBi})$            | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8187256691404513
      ],
      "excerpt": "R=\\log {2} \\operatorname{det}\\left(\\mathbf{I}{N_{r}}+\\frac{P_{t}}{\\sigma^{2}} \\mathbf{C}^{H} \\mathbf{C}\\right) \\mathrm{bit} / \\mathrm{sec} / \\mathrm{Hz} \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Brook1711/RIS_components/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "MATLAB",
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "RIS components",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "RIS_components",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Brook1711",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Brook1711/RIS_components/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Sun, 26 Dec 2021 02:19:11 GMT"
    },
    "technique": "GitHub API"
  }
}