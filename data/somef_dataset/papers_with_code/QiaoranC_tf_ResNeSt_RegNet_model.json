{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/QiaoranC/tf_ResNeSt_RegNet_model",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-05-13T10:14:55Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-20T02:10:56Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": " Currently support tensorflow in \n - **ResNeSt**  2d&3d\n - **RegNet**\n - **DETR** (modified classfication)\n - **GENet** (2020 GPU-Efficient Network)\n \nmodel only, no pertrain model for download (simply not enough free time and resource).  \neasy to read and modified. welcome for using it, ask question, test it, find some bugs maybe.\n\nResNeSt based on [offical github](https://github.com/zhanghang1989/ResNeSt) .\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8432422394491107,
        0.959942313049771,
        0.855926859822772
      ],
      "excerpt": "2020-6-14: Add Resnest3D, thanks to @vitanuan, model name resnest50_3d, resnest101_3d, resnest200_3d, input shape is 4d like input_shape = [50,224,224,3] \n2020-6-5: Add DETR (res34, resNest50 backbone) End-to-End Object Detection with Transformers, Experiment and inovation model, i slightly modified it into a classficaiton verison. Free to try. \n2020-5-27: ResNeSt add CB-Net style to enahce backbone. theoretically, it should improve the results. Wait for test. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = get_model(model_name=\"RegNet\",input_shape=input_shape,n_classes=n_classes, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = get_model(model_name=\"RegNet\",input_shape=input_shape,n_classes=n_classes, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8654987020750211
      ],
      "excerpt": "CB-Net, using this style to enhace ResNest \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "tensorflow 2.x version of ResNeSt,RegNet,DETR",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/QiaoranC/tf_ResNeSt_RegNet_model/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 32,
      "date": "Wed, 22 Dec 2021 07:00:57 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/QiaoranC/tf_ResNeSt_RegNet_model/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "QiaoranC/tf_ResNeSt_RegNet_model",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.856167113503193
      ],
      "excerpt": "for RegNet, cause there are various version, you can easily set it by stage_depth,stage_width,stage_G. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "                verbose=True,fc_activation=fc_activation,stage_depth=[1,3,7,4], \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "                verbose=True,fc_activation=fc_activation,stage_depth=[1,3,5,7], \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/QiaoranC/tf_ResNeSt_RegNet_model/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Introduction",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "tf_ResNeSt_RegNet_model",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "QiaoranC",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/QiaoranC/tf_ResNeSt_RegNet_model/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 122,
      "date": "Wed, 22 Dec 2021 07:00:57 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "usage is simple:\n```\nfrom models.model_factory import get_model\n\nmodel_name = 'ResNest50'\ninput_shape = [224,244,3]\nn_classes = 81\nfc_activation = 'softmax'\nactive = 'relu' #: relu or mish\n\nmodel = get_model(model_name=model_name,\n                  input_shape=input_shape,\n                  n_classes=n_classes,\n                  fc_activation=fc_activation,\n                  active=active',\n                  verbose=False,\n                 )\n\nmodel.compile(optimizer='adam', loss=tf.keras.losses.BinaryCrossentropy())\nmodel.fit(...)\n```\n\n\n- if you add CB_Net in ResNeSt: add `using_cb=True` like:\n```\n\"\"\"\nBeware that if using CB_Net, the input height and width should be divisibility of \n2 at least 5 times, like input [224,448]: \n[224,448]<->[112,224]<->[56,112]<->[28,56]<->[14,28]<->[7,14]\ncorrect way:\n[224,224] downsample->[112,112],\n[112,112] upsample->[224,224],\nthen [224,224]+[224,224]\n\nincorrect way:\n[223,223] downsample->[112,112],\n[112,112] upsample->[224,224],\n[223,223] != [224,224] cannt add\n\"\"\"\n\nmodel = get_model(...,using_cb=True)\n```\n- DETR experiment model, free to modified the transformer setting.\n```\n#: ResNest50+CB+transfomer looks powerful! but heavily cost.\nmodel_name = 'ResNest50_DETR' \n\n#:res34 not implement using_cb yet, it supporse to be a lighter verison.\nmodel_name = 'res34_DETR' \n\nmodel = get_model(...,\n                  hidden_dim=512,\n                  nheads=8,\n                  num_encoder_layers=6,\n                  num_decoder_layers=6,\n                  n_query_pos=100)\n```\n\n\n",
      "technique": "Header extraction"
    }
  ]
}