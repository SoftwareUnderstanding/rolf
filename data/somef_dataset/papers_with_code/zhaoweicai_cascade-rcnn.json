{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1906.09756"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use our code/model/data, please cite our paper:\n\n    @inproceedings{cai18cascadercnn,\n      author = {Zhaowei Cai and Nuno Vasconcelos},\n      Title = {Cascade R-CNN: Delving into High Quality Object Detection},\n      booktitle = {CVPR},\n      Year  = {2018}\n    }\nor its extension:\n\n    @article{cai2019cascadercnn,\n      author = {Zhaowei Cai and Nuno Vasconcelos},\n      title = {Cascade R-CNN: High Quality Object Detection and Instance Segmentation},\n      journal = {arXiv preprint arXiv:1906.09756},\n      year = {2019}\n    }\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{cai2019cascadercnn,\n  author = {Zhaowei Cai and Nuno Vasconcelos},\n  title = {Cascade R-CNN: High Quality Object Detection and Instance Segmentation},\n  journal = {arXiv preprint arXiv:1906.09756},\n  year = {2019}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{cai18cascadercnn,\n  author = {Zhaowei Cai and Nuno Vasconcelos},\n  Title = {Cascade R-CNN: Delving into High Quality Object Detection},\n  booktitle = {CVPR},\n  Year  = {2018}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8654671031158477
      ],
      "excerpt": "VGG-RPN-baseline \u00a0 \u00a0 | 2 | 4 \u00a0  |3e-3| 100k   |  12.5 hr |  0.075s | 23.6 | 43.9 | 23.0  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9840846195802034,
        0.9278824608274014,
        0.8109194328925066
      ],
      "excerpt": "Res101-RFCN-baseline \u00a0 \u00a0 | 4 | 1 \u00a0  |3e-3| 280k   |  29 hr |  0.075s | 30.3 | 52.2 | 30.8  \nRes101-RFCN-Cascade \u00a0 \u00a0 | 4 | 1 \u00a0  |3e-3| 280k   |  30.5 hr |  0.085s | 33.3 | 52.0 | 35.2 \nRes50-FPN-baseline \u00a0 \u00a0 | 8 | 1 \u00a0  |5e-3| 280k   |  32 hr |  0.095s | 36.5 | 58.6 | 39.2  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8654671031158477
      ],
      "excerpt": "Res101-FPN-baseline \u00a0 \u00a0 | 8 | 1 \u00a0  |5e-3| 280k   |  37 hr |  0.115s | 38.5 | 60.6 | 41.7  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8109194328925066
      ],
      "excerpt": "Alex-RPN-baseline \u00a0 \u00a0 | 2 | 4 \u00a0  |1e-3| 45k   |  2.5 hr | 29.4 | 63.2 | 23.7  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9218387569487573,
        0.8356013927728488
      ],
      "excerpt": "Res101-RFCN-baseline \u00a0 \u00a0 | 2 | 2 \u00a0  |2e-3| 90k   |  10.5 hr | 49.4 | 79.8 | 53.2  \nRes101-RFCN-Cascade \u00a0 \u00a0 | 2 | 2 \u00a0  |2e-3| 90k   |  12 hr | 54.2 | 79.6 | 59.2 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zhaoweicai/cascade-rcnn",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing\nIssues\nSpecific Caffe design and development issues, bugs, and feature requests are maintained by GitHub Issues.\nPlease do not post usage, installation, or modeling questions, or other requests for help to Issues.\nUse the caffe-users list instead. This helps developers maintain a clear, uncluttered, and efficient view of the state of Caffe.\nWhen reporting a bug, it's most helpful to provide the following information, where applicable:\n\nWhat steps reproduce the bug?\nCan you reproduce the bug using the latest master, compiled with the DEBUG make option?\nWhat hardware and operating system/distribution are you running?\nIf the bug is a crash, provide the backtrace (usually printed by Caffe; always obtainable with gdb).\n\nTry to give your issue a title that is succinct and specific. The devs will rename issues as needed to keep track of them.\nPull Requests\nCaffe welcomes all contributions.\nSee the contributing guide for details.\nBriefly: read commit by commit, a PR should tell a clean, compelling story of one improvement to Caffe. In particular:\n\nA PR should do one clear thing that obviously improves Caffe, and nothing more. Making many smaller PRs is better than making one large PR; review effort is superlinear in the amount of code involved.\nSimilarly, each commit should be a small, atomic change representing one step in development. PRs should be made of many commits where appropriate.\nPlease do rewrite PR history to be clean rather than chronological. Within-PR bugfixes, style cleanups, reversions, etc. should be squashed and should not appear in merged PR history.\nAnything nonobvious from the code should be explained in comments, commit messages, or the PR description, as appropriate.",
    "technique": "File Exploration"
  },
  "contributors": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributors\nCaffe is developed by a core set of BAIR members and the open-source community.\nWe thank all of our contributors!\nFor the detailed history of contributions of a given file, try\ngit blame file\n\nto see line-by-line credits and\ngit log --follow file\n\nto see the change log even across renames and rewrites.\nPlease refer to the acknowledgements on the Caffe site for further details.\nCopyright is held by the original contributor according to the versioning history; see LICENSE.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-12-04T04:06:12Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-17T12:59:45Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This repository implements mulitple popular object detection algorithms, including Faster R-CNN, R-FCN, FPN, and our recently proposed Cascade R-CNN, on the MS-COCO and PASCAL VOC datasets. Multiple choices are available for backbone network, including AlexNet, VGG-Net and ResNet. It is written in C++ and powered by [Caffe](https://github.com/BVLC/caffe) deep learning toolbox. \n\n[Cascade R-CNN](http://www.svcl.ucsd.edu/publications/conference/2018/cvpr/cascade-rcnn.pdf) is a multi-stage extension of the popular two-stage R-CNN object detection framework. The goal is to obtain high quality object detection, which can effectively reject close false positives. It consists of a sequence of detectors trained end-to-end with increasing IoU thresholds, to be sequentially more selective against close false positives. The output of a previous stage detector is forwarded to a later stage detector, and the detection results will be improved stage by stage. This idea can be applied to any detector based on the two-stage R-CNN framework, including Faster R-CNN, R-FCN, FPN, Mask R-CNN, etc, and reliable gains are available independently of baseline strength. A vanilla Cascade R-CNN on FPN detector of ResNet-101 backbone network, without any training or inference bells and whistles, achieved state-of-the-art results on the challenging MS-COCO dataset.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8192505441185383,
        0.9726970721200895,
        0.9636819250425187,
        0.9901601433256171,
        0.9425807066312103
      ],
      "excerpt": "by Zhaowei Cai and Nuno Vasconcelos \nThis repository is written by Zhaowei Cai at UC San Diego. \nThe re-implementation of Cascade R-CNN in Detectron has been released. See Detectron-Cascade-RCNN. Very consistent improvements are available for all tested models, independent of baseline strength. \nIt is also recommended to use the third-party implementation, mmdetection based on PyTorch and tensorpack based on TensorFlow. \nWe benchmark mulitple detector models on the MS-COCO and PASCAL VOC datasets in the below tables. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8895222461458746
      ],
      "excerpt": "VGG-RPN-Cascade \u00a0 \u00a0 | 2 | 4 \u00a0  |3e-3| 100k   |  15.5 hr |  0.115s | 27.0 | 44.2 | 27.7 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8895222461458746
      ],
      "excerpt": "Alex-RPN-Cascade \u00a0 \u00a0 | 2 | 4 \u00a0  |1e-3| 45k   |  3 hr | 38.9 | 66.5 | 40.5 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8895222461458746
      ],
      "excerpt": "VGG-RPN-Cascade \u00a0 \u00a0 | 2 | 4 \u00a0  |1e-3| 45k   |  7.5 hr | 51.2 | 79.1 | 56.3 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9465698634536573
      ],
      "excerpt": "NOTE. In the above tables, all models have been run at least two times with close results. The training is relatively stable. RPN means Faster R-CNN. The annotations of PASCAL VOC are transformed to COCO format, and COCO API was used for evaluation. The results are different from the official VOC evaluation. If you want to compare the VOC results in publication, please use the official VOC code for evaluation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8109624579917281
      ],
      "excerpt": "Get the training data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8720418761592333
      ],
      "excerpt": "Download the pretrained models on ImageNet. For AlexNet and VGG-Net, the FC layers are pruned and 2048 units per FC layer are remained. In addition, the two FC layers are copied three times for Cascade R-CNN training. For ResNet, the BatchNorm layers are merged into Scale layers and frozen during training as common practice. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8395458409434504
      ],
      "excerpt": "We only provide the Res50-FPN-baseline, Res50-FPN-Cascade and Res101-FPN-Cascade models for COCO dataset, and Res101-RFCN-Cascade for VOC dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Caffe implementation of multiple popular object detection frameworks",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zhaoweicai/cascade-rcnn/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 297,
      "date": "Wed, 22 Dec 2021 11:11:36 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zhaoweicai/cascade-rcnn/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "zhaoweicai/cascade-rcnn",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/docker/gpu/Dockerfile",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/docker/cpu/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/zhaoweicai/cascade-rcnn/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/scripts/deploy_docs.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/scripts/build_docs.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/scripts/download_model_from_gist.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/scripts/upload_model_to_gist.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/scripts/gather_examples.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/scripts/travis/install-python-deps.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/scripts/travis/test.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/scripts/travis/defaults.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/scripts/travis/setup-venv.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/scripts/travis/configure-make.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/scripts/travis/configure.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/scripts/travis/build.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/scripts/travis/install-deps.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/scripts/travis/configure-cmake.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/data/get_voc_data.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/data/get_coco_data.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/models/fetch_resnet.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/models/fetch_alexnet.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/models/fetch_vggnet.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/fetch_cascadercnn_models.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/res50-9s-600-rfcn-cascade/test_voc_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/res50-9s-600-rfcn-cascade/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/vgg-9s-600-rpn-base/test_voc_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/vgg-9s-600-rpn-base/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/alex-9s-600-rpn-base/test_voc_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/alex-9s-600-rpn-base/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/res50-9s-600-rfcn-ohem/test_voc_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/res50-9s-600-rfcn-ohem/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/res50-9s-600-rfcn-base/test_voc_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/res50-9s-600-rfcn-base/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/res101-9s-600-rfcn-cascade/test_voc_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/res101-9s-600-rfcn-cascade/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/res101-9s-600-rfcn-base/test_voc_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/res101-9s-600-rfcn-base/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/alex-9s-600-rpn-cascade/test_voc_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/alex-9s-600-rpn-cascade/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/vgg-9s-600-rpn-cascade/test_voc_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/voc/vgg-9s-600-rpn-cascade/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/fetch_cascadercnn_models.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/res101-12s-600-rfcn-cascade/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/res101-12s-600-rfcn-cascade/test_coco_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/res101-15s-800-fpn-cascade/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/res101-15s-800-fpn-cascade/test_coco_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/res101-15s-800-fpn-base/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/res101-15s-800-fpn-base/test_coco_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/vgg-12s-600-rpn-base/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/vgg-12s-600-rpn-base/test_coco_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/res101-12s-600-rfcn-base/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/res101-12s-600-rfcn-base/test_coco_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/vgg-12s-600-rpn-cascade/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/vgg-12s-600-rpn-cascade/test_coco_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/res50-15s-800-fpn-base/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/res50-15s-800-fpn-base/test_coco_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/res50-12s-600-rfcn-base/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/res50-12s-600-rfcn-base/test_coco_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/res50-12s-600-rfcn-cascade/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/res50-12s-600-rfcn-cascade/test_coco_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/res50-15s-800-fpn-cascade/train_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/examples/coco/res50-15s-800-fpn-cascade/test_coco_detection.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/tools/extra/parse_log.sh",
      "https://raw.githubusercontent.com/zhaoweicai/cascade-rcnn/master/tools/extra/launch_resize_and_crop_images.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Clone the Cascade-RCNN repository, and we'll call the directory that you cloned Cascade-RCNN into `CASCADE_ROOT`\n    ```Shell\n    git clone https://github.com/zhaoweicai/cascade-rcnn.git\n    ```\n  \n2. Build Cascade-RCNN\n    ```Shell\n    cd $CASCADE_ROOT/\n    #: Follow the Caffe installation instructions here:\n    #:   http://caffe.berkeleyvision.org/installation.html\n\n    #: If you're experienced with Caffe and have all of the requirements installed\n    #: and your Makefile.config in place, then simply do:\n    make all -j 16\n\n    #: If you want to run Cascade-RCNN detection/evaluation demo, build MATLAB wrapper as well\n    make matcaffe\n    ```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8060367702307236
      ],
      "excerpt": "Res50-RFCN-Cascade \u00a0 \u00a0 | 2 | 2 \u00a0  |2e-3| 90k   |  9 hr | 51.8 | 78.5 | 57.1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8737339244795638
      ],
      "excerpt": "If you already have a COCO/VOC copy but not as organized as below, you can simply create Symlinks to have the same directory structure. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9845470919805958
      ],
      "excerpt": "Assumed that your local COCO dataset copy is at /your/path/to/coco, make sure it has the following directory structure: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9697482566039164
      ],
      "excerpt": "Assumed that your local VOCdevkit copy is at /your/path/to/VOCdevkit, make sure it has the following directory structure: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8080002376980483,
        0.9023697225149864,
        0.9544653850435327
      ],
      "excerpt": "    cd $CASCADE_ROOT/data/ \n    sh get_coco_data.sh \nThis will download the window files required for the experiments. You can also use the provided MATLAB scripts coco_window_file.m under $CASCADE_ROOT/data/coco/ to generate your own window files. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9771384723171962,
        0.9023697225149864
      ],
      "excerpt": "    cd $CASCADE_ROOT/models/ \n    sh fetch_vggnet.sh \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8171165590082176,
        0.9023697225149864
      ],
      "excerpt": "    cd $CASCADE_ROOT/examples/coco/vgg-12s-600-rpn-cascade/ \n    sh train_detection.sh \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9508024714121148,
        0.9023697225149864
      ],
      "excerpt": "cd $CASCADE_ROOT/examples/coco/ \nsh fetch_cascadercnn_models.sh  \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8739001159616527
      ],
      "excerpt": "model     | #GPUs | bs | lr | iter | train time | test time | AP | AP50 | AP75  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8710640987021113,
        0.8602861606322788
      ],
      "excerpt": "PASCAL VOC 2007 (Train/Test: 2007+2012trainval/2007test, shorter size: 600) \nmodel     | #GPUs | bs | lr | iter | train time | AP | AP50 | AP75  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8237030143847769
      ],
      "excerpt": "In all PASCAL VOC experiments, we use VOC2007+VOC2012 trainval for training, and VOC2007 test for validation. Follow PASCAL VOC website to download images/annotations, and set-up the VOCdevkit. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8009749238557403
      ],
      "excerpt": "Get the training data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8831105296313201
      ],
      "excerpt": "   Log file will be generated along the training procedure. The total training time depends on the complexity of models and datasets. If you want to quickly check if the training works well, try the light AlexNet model on VOC dataset.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8351477930697216
      ],
      "excerpt": "Download pre-trained models \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zhaoweicai/cascade-rcnn/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "Python",
      "Cuda",
      "CMake",
      "MATLAB",
      "Makefile",
      "Shell",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Cascade R-CNN: Delving into High Quality Object Detection",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "cascade-rcnn",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "zhaoweicai",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zhaoweicai/cascade-rcnn/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. NVIDIA GPU and cuDNN are required to have fast speeds. For now, CUDA 8.0 with cuDNN 6.0.20 has been tested. The other versions should be working.\n\n2. Caffe MATLAB wrapper is required to run the detection/evaluation demo. \n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 979,
      "date": "Wed, 22 Dec 2021 11:11:36 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "object-detection"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Once the models pretrained or trained by yourself are available, you can use the MATLAB script `run_cascadercnn_coco.m` to obtain the detection and evaluation results. Set the right dataset path and choose the model of your interest to test in the demo script. The default setting is for the pretrained model. The final detection results will be saved under `$CASCADE_ROOT/examples/coco/detections/` and the evaluation results will be saved under the model folder.\n\nYou also can run the shell script `test_coco_detection.sh` under each model folder for evalution, but it is not identical to the official evaluation. For publication, use the MATLAB script.\n\n",
      "technique": "Header extraction"
    }
  ]
}