{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "+ [tkarras/progressive_growing_of_gans](https://github.com/tkarras/progressive_growing_of_gans)\n+ [nashory/progressive-growing-torch](https://github.com/nashory/progressive-growing-torch)\n+ [TuXiaokang/DCGAN.PyTorch](https://github.com/TuXiaokang/DCGAN.PyTorch)\n\n##\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nashory/pggan-pytorch",
    "technique": "GitHub API"
  },
  "contributor": [
    {
      "confidence": [
        1
      ],
      "excerpt": "DeMarcus Edwards, [@Djmcflush](https://github.com/Djmcflush)       \nMakeDirtyCode, [@MakeDirtyCode](https://github.com/MakeDirtyCode)      \nYuan Zhao, [@yuanzhaoYZ](https://github.com/yuanzhaoYZ)      \nzhanpengpan, [@szupzp](https://github.com/szupzp)       \n\n",
      "technique": "Header extraction"
    }
  ],
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-11-13T05:01:40Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-09T14:48:05Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9677376582103324,
        0.9931330908505713
      ],
      "excerpt": "PyTorch implementation of PROGRESSIVE GROWING OF GANS FOR IMPROVED QUALITY, STABILITY, AND VARIATION  \nYOUR CONTRIBUTION IS INVALUABLE FOR THIS PROJECT :) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8006820406278448
      ],
      "excerpt": "No need to implement the the Celeb A data, Just come with your own dataset :) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": ":fire::fire: PyTorch implementation of \"Progressive growing of GANs (PGGAN)\" :fire::fire:",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nashory/pggan-pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 131,
      "date": "Wed, 22 Dec 2021 11:20:45 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/nashory/pggan-pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "nashory/pggan-pytorch",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/nashory/pggan-pytorch/master/clean.sh"
    ],
    "technique": "File Exploration"
  },
  "invocation": [
    {
      "confidence": [
        0.8113455707798243,
        0.8113455707798243,
        0.8113455707798243,
        0.8113455707798243,
        0.8113455707798243,
        0.8113455707798243,
        0.8113455707798243
      ],
      "excerpt": "<img src=\"https://github.com/nashory/gifs/blob/pggan-pytorch/scatch_4.gif?raw=true\" width=\"430\" height=\"430\"> <img src=\"https://puu.sh/yufIa/2a56d61890.jpg\" width=\"430\" height=\"430\"> \n<img src=\"https://github.com/nashory/gifs/blob/pggan-pytorch/4_8.gif?raw=true\" width=\"430\" height=\"430\"> <img src=\"https://puu.sh/yufJx/a427ccdcdf.jpg\" width=\"430\" height=\"430\"> \n<img src=\"https://github.com/nashory/gifs/blob/pggan-pytorch/8_16.gif?raw=true\" width=\"430\" height=\"430\"> <img src=\"https://puu.sh/yufMz/dd74f56d36.jpg\" width=\"430\" height=\"430\"> \n<img src=\"https://github.com/nashory/gifs/blob/pggan-pytorch/16_32.gif?raw=true\" width=\"430\" height=\"430\"> <img src=\"https://puu.sh/yufLF/013cc59c15.jpg\" width=\"430\" height=\"430\"> \n<img src=\"https://github.com/nashory/gifs/blob/pggan-pytorch/32_64.gif?raw=true\" width=\"430\" height=\"430\"> <img src=\"https://puu.sh/yufMV/835ec431ea.jpg\" width=\"430\" height=\"430\"> \n<img src=\"https://github.com/nashory/gifs/blob/pggan-pytorch/64_128.gif?raw=true\" width=\"430\" height=\"430\"> <img src=\"https://puu.sh/yNT76/551760208c.jpg\" width=\"430\" height=\"430\"> \n<img src=\"https://github.com/nashory/gifs/blob/pggan-pytorch/128_256.gif?raw=true\" width=\"430\" height=\"430\"> <img src=\"https://puu.sh/yNSS3/93a11066a7.jpg\" width=\"430\" height=\"430\">   \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/nashory/pggan-pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 Minchul Shin\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Pytorch Implementation of \"Progressive growing GAN (PGGAN)\"",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pggan-pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "nashory",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nashory/pggan-pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 714,
      "date": "Wed, 22 Dec 2021 11:20:45 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "generative-adversarial-network",
      "progressive-gan",
      "pytorch",
      "celeba-hq-dataset",
      "gan",
      "progressively-growing-gan",
      "tensorboard"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "__[step 1.] Prepare dataset__   \nThe author of progressive GAN released CelebA-HQ dataset, and which Nash is working on over on the branch that i forked this from. For my version just make sure that all images are the children of that folder that you declare in Config.py. Also i warn you that if you use multiple classes, they should be similar as to not end up with attrocities. \n\n~~~\n---------------------------------------------\nThe training data folder should look like : \n<train_data_root>\n                |--Your Folder\n                        |--image 1\n                        |--image 2\n                        |--image 3 ...\n---------------------------------------------\n~~~\n\n__[step 2.] Prepare environment using virtualenv__   \n  + you can easily set PyTorch (v0.3) and TensorFlow environment using virtualenv.\n  + CAUTION: if you have trouble installing PyTorch, install it mansually using pip. [[PyTorch Install]](http://pytorch.org/)\n  + For install please take your time and install all dependencies of PyTorch and also install tensorflow\n  \n  ~~~\n  $ virtualenv --python=python2.7 venv\n  $ . venv/bin/activate\n  $ pip install -r requirements.txt\n  $ conda install pytorch torchvision -c pytorch\n  ~~~\n\n\n\n__[step 3.] Run training__      \n+ edit `config.py` to change parameters. (don't forget to change path to training images)\n+ specify which gpu devices to be used, and change \"n_gpu\" option in `config.py` to support Multi-GPU training.\n+ run and enjoy!  \n\n~~~~\n  (example)\n  If using Single-GPU (device_id = 0):\n  $ vim config.py   -->   change \"n_gpu=1\"\n \u00a0$ CUDA_VISIBLE_DEVICES=0 python trainer.py\n  \n  If using Multi-GPUs (device id = 1,3,7):\n  $ vim config.py   -->   change \"n_gpu=3\"\n \u00a0$ CUDA_VISIBLE_DEVICES=1,3,7 python trainer.py\n~~~~\n \n  \n__[step 4.] Display on tensorboard__   (At the moment skip this part)\n+ you can check the results on tensorboard.\n\n<p align=\"center\"><img src=\"https://puu.sh/ympU0/c38f4e7d33.png\" width=\"700\"></p>   \n<p align=\"center\"><img src=\"https://puu.sh/ympUe/bf9b53dea8.png\" width=\"700\" align=\"center\"></p>   \n\n  ~~~\n  $ tensorboard --logdir repo/tensorboard --port 8888\n  $ <host_ip>:8888 at your browser.\n  ~~~\n  \n  \n__[step 5.] Generate fake images using linear interpolation__   \n~~~\nCUDA_VISIBLE_DEVICES=0 python generate_interpolated.py\n~~~\n  \n  \n",
      "technique": "Header extraction"
    }
  ]
}