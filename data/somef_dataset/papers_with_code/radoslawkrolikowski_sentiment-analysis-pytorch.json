{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* <https://pytorch.org/docs/stable/index.html>\n* <https://arxiv.org/pdf/1801.06146.pdf>\n* <https://arxiv.org/pdf/1705.02364.pdf>\n* <https://arxiv.org/pdf/1408.5882.pdf>\n* <https://arxiv.org/pdf/1706.03762.pdf>\n* <http://www.peterbloem.nl/blog/transformers>\n* <https://en.wikipedia.org/wiki/Sentiment_analysis>\n* <https://monkeylearn.com/sentiment-analysis/#sentiment-analysis-use-cases-and-applications>\n* <https://www.kaggle.com/praveenkotha2/end-to-end-text-processing-for-beginners>\n* <https://www.analyticsvidhya.com/blog/2018/02/the-different-methods-deal-text-data-predictive-python/>\n* <https://spacy.io/api/annotation#pos-tagging>\n* <https://textblob.readthedocs.io/en/dev/api_reference.html#textblob.blob.TextBlob.sentiment>\n* <https://scikit-learn.org/stable/modules/manifold.html>\n* <https://medium.com/@martinpella/how-to-use-pre-trained-word-embeddings-in-pytorch-71ca59249f76>\n* <https://medium.com/@sonicboom8/sentiment-analysis-with-variable-length-sequences-in-pytorch-6241635ae130>\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/radoslawkrolikowski/sentiment-analysis-pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-10-18T16:59:40Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-01T16:46:57Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9793694076289773,
        0.8979411005071259
      ],
      "excerpt": "The repository will walk you through the process of building a complete Sentiment Analysis model, which will be able to predict a polarity of given review (whether the expressed opinion is positive or negative). The dataset on which the model is going to be trained is popular IMDb movie reviews dataset. \nData preprocessing \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8733373255321997
      ],
      "excerpt": "The second tutorial contains instructions on how to set up the vocabulary object that will be responsible for the following tasks: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9374709774753265
      ],
      "excerpt": "* Filtering dataset in terms of the rare words occurrence and sentences lengths. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877,
        0.8764469422694272,
        0.936499285332581,
        0.8259812057582822
      ],
      "excerpt": "BiGRU model \nIn the third notebook, the bidirectional Gated Recurrent Unit model will be built. In our neural network we will implement and use the following architectures and techniques: bidirectional GRU, stacked (multi-layer) GRU, dropout/spatial dropout, max-pooling, avg-pooling. The hyperparameters fine-tuning process will be presented. After choosing the proper parameters set, we will train our model and determine the generalization error.  \nBiGRU with additional features \nIn this notebook, we will implement the bidirectional Gated Recurrent Unit model that uses features extracted in the first tutorial. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9569736694804767
      ],
      "excerpt": "This notebook covers the implementation of the bidirectional Gated Recurrent Unit model, which uses pre-trained Glove word embeddings together with additional features. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8571184416254645,
        0.970341980187098
      ],
      "excerpt": "Transformer model for classification \nImplementation of the Self-Attention Transformer model for the classification task. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8966297004831006
      ],
      "excerpt": "Rearrange the data to the following structure: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8357319068478104
      ],
      "excerpt": "BiGRU with extra features | 0.882 | 0.881 | 0.898 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Sentiment analysis in Pytorch on an IMDb dataset.",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://textblob.readthedocs.io/",
      "technique": "Regular expression"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/radoslawkrolikowski/sentiment-analysis-pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Thu, 23 Dec 2021 10:07:38 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/radoslawkrolikowski/sentiment-analysis-pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "radoslawkrolikowski/sentiment-analysis-pytorch",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/radoslawkrolikowski/sentiment-analysis-pytorch/master/3_biGRU.ipynb",
      "https://raw.githubusercontent.com/radoslawkrolikowski/sentiment-analysis-pytorch/master/5_biGRU_with_Glove_vectors.ipynb",
      "https://raw.githubusercontent.com/radoslawkrolikowski/sentiment-analysis-pytorch/master/4_biGRU_with_additional_features.ipynb",
      "https://raw.githubusercontent.com/radoslawkrolikowski/sentiment-analysis-pytorch/master/2_vocabulary.ipynb",
      "https://raw.githubusercontent.com/radoslawkrolikowski/sentiment-analysis-pytorch/master/1_data_processing.ipynb",
      "https://raw.githubusercontent.com/radoslawkrolikowski/sentiment-analysis-pytorch/master/7_Transformer.ipynb",
      "https://raw.githubusercontent.com/radoslawkrolikowski/sentiment-analysis-pytorch/master/6_TextCNN.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8387527135480526,
        0.8644500257064217
      ],
      "excerpt": "Unpack the downloaded tar.gz file using: \ntar -xzf acllmdb.tar.gz \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8305186722165172
      ],
      "excerpt": "The first notebook covers data loading from the raw dataset, feature extraction and analysis, also text preprocessing and train/val/test sets preparation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8740566245728802
      ],
      "excerpt": "* Sorting dataset examples. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8633989807152664
      ],
      "excerpt": "  \u251c\u2500\u2500 test \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8589534893990137
      ],
      "excerpt": "  \u251c\u2500\u2500 train \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/radoslawkrolikowski/sentiment-analysis-pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Sentiment Analysis with PyTorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "sentiment-analysis-pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "radoslawkrolikowski",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/radoslawkrolikowski/sentiment-analysis-pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Create a virtual environment (conda, virtualenv etc.).\n\n\t`conda create -n <env_name> python=3.7`\n\n2. Activate your environment.\n\n\t`conda activate <env_name>`\n\n3. Create a new kernel.\n\n\t`pip install ipykernel`\n\n\t`python -m ipykernel install --user --name <env_name>`\n\n4. Go to the directory: `.local/share/jupyter/kernels/<env_name>` and ensure that *kernel.json* file contains the path to your environment python interpreter (can be checked by `which python` command).\n\n  ```\n  {\n   \"argv\": [\n    \"home/user/anaconda3/envs/<env_name>/bin/python\",\n    \"-m\",\n    \"ipykernel_launcher\",\n    \"-f\",\n    \"{connection_file}\"\n   ],\n   \"display_name\": \"<env_name>\",\n   \"language\": \"python\"\n  }\n  ```\n5. Install requirements.\n\n\t`pip install -r requirements.txt `\n\n\n6. Restart your environment.\n\n\t`conda deactivate`\n    \n\t`conda activate <env_name>`\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 18,
      "date": "Thu, 23 Dec 2021 10:07:38 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "sentiment-analysis",
      "deep-learning",
      "nlp-machine-learning",
      "pytorch",
      "recurrent-neural-networks",
      "jupyter-notebook",
      "python",
      "transformer",
      "spacy"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Inside your virtual environment launch the *jupyter notebook*, and open the notebook file (with *.ipynb* extension), then change the kernel to the one created in the preceding step (<env_name>). Now you are ready. Follow me through the tutorial.\n\n\n",
      "technique": "Header extraction"
    }
  ]
}