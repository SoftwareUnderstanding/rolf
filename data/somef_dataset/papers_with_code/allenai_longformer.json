{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2004.05150",
      "https://arxiv.org/abs/2004.05150"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use `Longformer` in your research, please cite [Longformer: The Long-Document Transformer](https://arxiv.org/abs/2004.05150).\n```\n@article{Beltagy2020Longformer,\n  title={Longformer: The Long-Document Transformer},\n  author={Iz Beltagy and Matthew E. Peters and Arman Cohan},\n  journal={arXiv:2004.05150},\n  year={2020},\n}\n```\n\n`Longformer` is an open-source project developed by [the Allen Institute for Artificial Intelligence (AI2)](http://www.allenai.org).\nAI2 is a non-profit institute with the mission to contribute to humanity through high-impact AI research and engineering.\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{Beltagy2020Longformer,\n  title={Longformer: The Long-Document Transformer},\n  author={Iz Beltagy and Matthew E. Peters and Arman Cohan},\n  journal={arXiv:2004.05150},\n  year={2020},\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/allenai/longformer",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-31T21:07:29Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-22T06:27:26Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9009422557649298
      ],
      "excerpt": "Longformer and LongformerEncoderDecoder (LED) are pretrained transformer models for long documents. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9813125021184897
      ],
      "excerpt": "A LongformerEncoderDecoder (LED) model is now available. It supports seq2seq tasks with long input. With gradient checkpointing, fp16, and 48GB gpu, the input length can be up to 16K tokens. Check the updated paper for the model details and evaluation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.83694998534131
      ],
      "excerpt": "Check the script scripts/summarization.py for an example of how to use the model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9070245510969778
      ],
      "excerpt": "A significant speed degradation in the hugginface/transformers was recenlty discovered and fixed (check this PR for details). To avoid this problem, either use the old release v2.11.0 but it doesn't support gradient checkpointing, or use the master branch. This problem should be fixed with the next hugginface/transformers release. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8241035620960117
      ],
      "excerpt": "Gradient checkpointing has been released with huggingface/transformers release v3.0.0. Gradient checkpointing reduces memory by 5x which makes it possible to process longer sequences on smaller GPUs. To use, try something like the following: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877,
        0.9756778560113271,
        0.9203929165749534
      ],
      "excerpt": "model = LongformerModel.from_pretrained(\"allenai/longformer-base-4096\") \nThe release also includes LongformerForQA and other LongformerForTaskName with automatic setting of global attention. \nWe added a notebook to show how to convert an existing pretrained model into its \"long\" version.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9804224969552425,
        0.9843427785580289,
        0.8197909987425079,
        0.8716195773553694,
        0.9853646979511795
      ],
      "excerpt": "***** New April 27th, 2020: A PyTorch implementation of the sliding window attention  ***** \nWe added a PyTorch implementation of the sliding window attention that doesn't require the custom CUDA kernel. It is limited in functionality but more convenient to use for finetuning on downstream tasks.  \nAdvantage: supports CPU, TPU and fp16, which aren't supported by the custom CUDA kernel \nLimitations: uses 2x more memory (but fp16 offsets that), and doesn\u2019t support dilation and autoregressive attention (not needed for finetuning) \ntherefore, it is suitable for finetuning on downstream tasks but not a good choice for language modeling. The code snippit below and the TriviaQA scripts were updated to use this new implementation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9375433863984877
      ],
      "excerpt": "This notebook demonstrates our procedure for training Longformer starting from the RoBERTa checkpoint. The same procedure can be followed to get a long-version of other existing pretrained models. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8348014910104604
      ],
      "excerpt": "Pretrained large model: here (replicates leaderboard results) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9623445604969721
      ],
      "excerpt": "Our custom CUDA kernel is implemented in TVM.  For now, the kernel only works on GPUs and Linux. We tested it on Ubuntu, Python 3.7, CUDA10, PyTorch >= 1.2.0. If it doesn't work for your environment, please create a new issue. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Longformer: The Long-Document Transformer",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/allenai/longformer/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 184,
      "date": "Wed, 22 Dec 2021 21:04:41 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/allenai/longformer/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "allenai/longformer",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/allenai/longformer/master/scripts/convert_model_to_long.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/allenai/longformer/master/longformer_on_beaker.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9807179142796275
      ],
      "excerpt": "Requirements: Make sure to use the huggingface/transformers fork specified in requirements.txt. It adds support for gradient checkpointing and allows different maximum sequence length for the input and output. You can also run pip install git+https://github.com/allenai/longformer.git \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8085244736430152
      ],
      "excerpt": "Gradient checkpointing has been released with huggingface/transformers release v3.0.0. Gradient checkpointing reduces memory by 5x which makes it possible to process longer sequences on smaller GPUs. To use, try something like the following: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8825013381919208
      ],
      "excerpt": "Longformer is now integrated in the huggingface/transformers release v2.11.0. Now you can do \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.865663032212071,
        0.8757858213817042,
        0.9445754184615515
      ],
      "excerpt": "Instructions: scripts/cheatsheet.txt \nOur custom CUDA kernel is implemented in TVM.  For now, the kernel only works on GPUs and Linux. We tested it on Ubuntu, Python 3.7, CUDA10, PyTorch >= 1.2.0. If it doesn't work for your environment, please create a new issue. \nCompiling the kernel: We already include the compiled binaries of the CUDA kernel, so most users won't need to compile it, but if you are intersted, check scripts/cheatsheet.txt for instructions. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8074745542528208
      ],
      "excerpt": "Check the script scripts/summarization.py for an example of how to use the model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from transformers import LongformerModel \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from transformers import LongformerModel \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8223213172794112
      ],
      "excerpt": "Pretrained large model: here (replicates leaderboard results) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/allenai/longformer/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'\\n                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "<p align=center>`Longformer`</p>",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "longformer",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "allenai",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/allenai/longformer/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "ibeltagy",
        "body": "",
        "dateCreated": "2020-05-18T02:13:16Z",
        "datePublished": "2020-05-18T02:19:35Z",
        "html_url": "https://github.com/allenai/longformer/releases/tag/v0.2",
        "name": "Upgrade to latest PyTorch and Huggingface/transformers version",
        "tag_name": "v0.2",
        "tarball_url": "https://api.github.com/repos/allenai/longformer/tarball/v0.2",
        "url": "https://api.github.com/repos/allenai/longformer/releases/26609641",
        "zipball_url": "https://api.github.com/repos/allenai/longformer/zipball/v0.2"
      },
      {
        "authorType": "User",
        "author_name": "ibeltagy",
        "body": "",
        "dateCreated": "2020-05-05T15:16:44Z",
        "datePublished": "2020-05-17T23:34:23Z",
        "html_url": "https://github.com/allenai/longformer/releases/tag/v0.1",
        "name": "Initial Release",
        "tag_name": "v0.1",
        "tarball_url": "https://api.github.com/repos/allenai/longformer/tarball/v0.1",
        "url": "https://api.github.com/repos/allenai/longformer/releases/26607978",
        "zipball_url": "https://api.github.com/repos/allenai/longformer/zipball/v0.1"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1319,
      "date": "Wed, 22 Dec 2021 21:04:41 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Download pretrained model\n  * [`longformer-base-4096`](https://ai2-s2-research.s3-us-west-2.amazonaws.com/longformer/longformer-base-4096.tar.gz)\n  * [`longformer-large-4096`](https://ai2-s2-research.s3-us-west-2.amazonaws.com/longformer/longformer-large-4096.tar.gz)\n\n2. Install environment and code\n\n    ```bash\n    conda create --name longformer python=3.7\n    conda activate longformer\n    conda install cudatoolkit=10.0\n    pip install git+https://github.com/allenai/longformer.git\n    ```\n\n3. Run the model\n\n    ```python\n    import torch\n    from longformer.longformer import Longformer, LongformerConfig\n    from longformer.sliding_chunks import pad_to_window_size\n    from transformers import RobertaTokenizer\n\n    config = LongformerConfig.from_pretrained('longformer-base-4096/') \n    #: choose the attention mode 'n2', 'tvm' or 'sliding_chunks'\n    #: 'n2': for regular n2 attantion\n    #: 'tvm': a custom CUDA kernel implementation of our sliding window attention\n    #: 'sliding_chunks': a PyTorch implementation of our sliding window attention\n    config.attention_mode = 'sliding_chunks'\n\n    model = Longformer.from_pretrained('longformer-base-4096/', config=config)\n    tokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n    tokenizer.model_max_length = model.config.max_position_embeddings\n\n    SAMPLE_TEXT = ' '.join(['Hello world! '] * 1000)  #: long input document\n \n    input_ids = torch.tensor(tokenizer.encode(SAMPLE_TEXT)).unsqueeze(0)  #: batch of size 1\n\n    #: TVM code doesn't work on CPU. Uncomment this if `config.attention_mode = 'tvm'`\n    #: model = model.cuda(); input_ids = input_ids.cuda()\n\n    #: Attention mask values -- 0: no attention, 1: local attention, 2: global attention\n    attention_mask = torch.ones(input_ids.shape, dtype=torch.long, device=input_ids.device) #: initialize to local attention\n    attention_mask[:, [1, 4, 21,]] =  2  #: Set global attention based on the task. For example,\n                                         #: classification: the <s> token\n                                         #: QA: question tokens\n\n    #: padding seqlen to the nearest multiple of 512. Needed for the 'sliding_chunks' attention\n    input_ids, attention_mask = pad_to_window_size(\n            input_ids, attention_mask, config.attention_window[0], tokenizer.pad_token_id)\n\n    output = model(input_ids, attention_mask=attention_mask)[0]\n    ```\n\n",
      "technique": "Header extraction"
    }
  ]
}