{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1706.02515\n\n[2]: \"resilu residual & relu nonlinearity + linearity\" (linear skip connection combined with non-linearity"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.853736841512677
      ],
      "excerpt": "This library implements some of the assignments from Stanfords's CS231n 2016 course by Andrej Karpathy, Fei-Fei Li, Justin Johnson and CS224d by Richard Socher as C++ framework. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8109194328925066,
        0.8109194328925066
      ],
      "excerpt": "Recurrent nets (RNNs) \nLong-term short-term memory nets (LSTMs) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9795187663973746
      ],
      "excerpt": "[1]: \"scaled exponential linear units\" (SELUs), https://arxiv.org/abs/1706.02515 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9733205759359892
      ],
      "excerpt": "2021-10-10: Moved CI from travis (defunct) to github workflows. Valgrind currently disabled. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.861881367543797
      ],
      "excerpt": "2018-03-02: Removed faulty RAN layer, switched to official eigen3 github-mirror at: Github eigen3, fixes for eigen-dev stricted type-checking. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9756551755156126
      ],
      "excerpt": "<!-- Good code generator latex -> github: https://jsfiddle.net/8ndx694g/ --> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/domschl/syncognite",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-01-23T10:08:28Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-02T07:55:34Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8516338197200646
      ],
      "excerpt": "Example: C++ definition of a deep convolutional net with batch-norm, dropout and fully connected layers: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9394449182630016
      ],
      "excerpt": "for (auto l=0; l<layer_depth; l++) { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.80786821389172,
        0.8453915775670966
      ],
      "excerpt": "use ccmake to configure USE_SYSTEM_BLAS to ON, which instructs eigen to use M1's hardware accelerators. rnnreader sees dramatic 3x-6x speedup, single thread benchmarks in bench see 200%-400% improvements! [Testet on macOS 12 beta 3 - 2021-07-19] \nMemory: macOS simply doesn't give processes all available memory. Expect swapping (and significant speed decrease) when allocating more than 4-5GB, even on 16GB M1 machines. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8249700505354887
      ],
      "excerpt": "2021-08-21: eigen update to 3.4 release \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8902980320115532
      ],
      "excerpt": "2020-11-12: Switched eigen3 submodule to gitlab, tracks 3.3 branch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8300877734513672
      ],
      "excerpt": "testneural (cptest subproject, consistency tests for all layers using testdata and numerical differentials) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9784730176959153
      ],
      "excerpt": "See jupyter notebook for visualization and more discussions of resilu function. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Neural network library inspired by Stanford's 2016 CS231n course, written in C++",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/domschl/syncognite/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Mon, 27 Dec 2021 23:08:46 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/domschl/syncognite/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "domschl/syncognite",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/domschl/syncognite/master/doc/resilu-linearity.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.897831620050632
      ],
      "excerpt": "The hdf5 libraries are available for ARM64 (brew install hdf5). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.807644328364548
      ],
      "excerpt": "syncognite uses the CMake build system. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9821071191612516
      ],
      "excerpt": "git clone git://github.com/domschl/syncognite \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8812562215461848,
        0.8456088356103195
      ],
      "excerpt": "Create a Build directory within the syncognite directory and configure the build: \n: in sycognite/Build, default is make-build-system, but Ninja can also be used: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8005188696570875
      ],
      "excerpt": "<!-- the folloing uses the hack from https://gist.github.com/a-rodin/fef3f543412d6e1ec5b6cf55bf197d7b to display latex. Seriously. --> \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8847899661239897
      ],
      "excerpt": "json jo(R\"({\"verbose\":true,\"shuffle\":true,\"lr_decay\":0.95,\"epsilon\":1e-8})\"_json); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8589534893990137
      ],
      "excerpt": "lb.train(X, y, Xv, yv, \"Adam\", jo); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9046925050392961,
        0.9046925050392961,
        0.9046925050392961
      ],
      "excerpt": "train_err=lb.test(X, y, jo.value(\"batch_size\", 50)); \nval_err=lb.test(Xv, yv, jo.value(\"batch_size\", 50)); \ntest_err=lb.test(Xt, yt, jo.value(\"batch_size\", 50)); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8589659943541457
      ],
      "excerpt": "cerr << \"      Train-error: \" << train_err << \" train-acc: \" << 1.0-train_err << endl; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8623296266759797
      ],
      "excerpt": "cerr << \"       Test-error: \" << test_err <<  \"  test-acc: \" << 1.0-test_err << endl; \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/domschl/syncognite/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "C",
      "Python",
      "CMake",
      "Gnuplot"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2016, 2017 Dominik Schl\\xc3\\xb6sser, dsc@dosc.net\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "syncognite - A neural network library inspired by Stanford's CS231n course",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "syncognite",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "domschl",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/domschl/syncognite/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* C++ 11 compiler (on Linux (tested: clang, gcc, Intel icpc) or macOS (clang x86-64 and Apple silicon (clang 12, 13)), Raspberry ARM(gcc))\n* CMake build system.\n* [Hdf5](https://support.hdfgroup.org/HDF5/) [C++ API](https://support.hdfgroup.org/HDF5/doc/cpplus_RM/) for model saving and sample data, `hdf5` or `libhdf5-dev`.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "* Cuda, OpenCL, ViennaCL (experimental, optional for BLAS speedups)\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Mon, 27 Dec 2021 23:08:46 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "neural-networks",
      "convolutional-neural-networks",
      "recurrent-neural-networks",
      "lstm",
      "cpp-library",
      "c11"
    ],
    "technique": "GitHub API"
  }
}