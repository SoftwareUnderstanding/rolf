{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1912.00461",
      "https://arxiv.org/abs/1612.00593"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you find our work useful in your research, please consider citing:\n```\n@InProceedings{10.1007/978-3-030-58610-2_15,\nauthor=\"Hamdi, Abdullah\nand Rojas, Sara\nand Thabet, Ali\nand Ghanem, Bernard\",\neditor=\"Vedaldi, Andrea\nand Bischof, Horst\nand Brox, Thomas\nand Frahm, Jan-Michael\",\ntitle=\"AdvPC: Transferable Adversarial Perturbations on 3D Point Clouds\",\nbooktitle=\"Computer Vision -- ECCV 2020\",\nyear=\"2020\",\npublisher=\"Springer International Publishing\",\naddress=\"Cham\",\npages=\"241--257\",\nisbn=\"978-3-030-58610-2\"\n}\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@InProceedings{10.1007/978-3-030-58610-2_15,\nauthor=\"Hamdi, Abdullah\nand Rojas, Sara\nand Thabet, Ali\nand Ghanem, Bernard\",\neditor=\"Vedaldi, Andrea\nand Bischof, Horst\nand Brox, Thomas\nand Frahm, Jan-Michael\",\ntitle=\"AdvPC: Transferable Adversarial Perturbations on 3D Point Clouds\",\nbooktitle=\"Computer Vision -- ECCV 2020\",\nyear=\"2020\",\npublisher=\"Springer International Publishing\",\naddress=\"Cham\",\npages=\"241--257\",\nisbn=\"978-3-030-58610-2\"\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ajhamdi/AdvPC",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-08-26T09:38:09Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-30T13:27:41Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9786510325901334
      ],
      "excerpt": "The official code of ECCV 2020 paper \"AdvPC: Transferable Adversarial Perturbations on 3D Point Clouds\". We perform transferable adversarial attacks on 3D point clouds by utilizing a point cloud autoencoder. we exceed SOTA by up to 40% on transferability and 38% in breaking SOTA 3D defenses on ModelNet40 data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8511520763368554,
        0.8972343339893561
      ],
      "excerpt": "log/NETWORK/model.ckpt -- the victims models (trained on ModelNet40) used in the paper. \ndata/attacked_data.z -- the victim data used in the paper. It can be loaded with joblib.load, resulting in a Python list whose element is a numpy array (shape: 25*1024*3; 25 objects of the same class, each object is represented by 1024 points) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9928518432609065
      ],
      "excerpt": "The visulization in the paper is rendered with pptk \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "AdvPC: Transferable Adversarial Perturbations on 3D Point Clouds (ECCV 2020)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ajhamdi/AdvPC/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Thu, 23 Dec 2021 05:51:48 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ajhamdi/AdvPC/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ajhamdi/AdvPC",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/ajhamdi/AdvPC/master/latent_3d_points/notebooks/train_single_class_ae.ipynb",
      "https://raw.githubusercontent.com/ajhamdi/AdvPC/master/latent_3d_points/notebooks/train_latent_gan.ipynb",
      "https://raw.githubusercontent.com/ajhamdi/AdvPC/master/latent_3d_points/notebooks/train_raw_gan.ipynb",
      "https://raw.githubusercontent.com/ajhamdi/AdvPC/master/latent_3d_points/notebooks/compute_evaluation_metrics.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/ajhamdi/AdvPC/master/utils/tf_nndistance_compile.sh",
      "https://raw.githubusercontent.com/ajhamdi/AdvPC/master/models/pointnet2/tf_ops/3d_interpolation/tf_interpolate_compile.sh",
      "https://raw.githubusercontent.com/ajhamdi/AdvPC/master/models/pointnet2/tf_ops/grouping/tf_grouping_compile.sh",
      "https://raw.githubusercontent.com/ajhamdi/AdvPC/master/models/pointnet2/tf_ops/grouping/test/compile.sh",
      "https://raw.githubusercontent.com/ajhamdi/AdvPC/master/models/pointnet2/tf_ops/sampling/tf_sampling_compile.sh",
      "https://raw.githubusercontent.com/ajhamdi/AdvPC/master/models/pointnet2/utils/compile_render_balls_so.sh",
      "https://raw.githubusercontent.com/ajhamdi/AdvPC/master/latent_3d_points/download_data.sh",
      "https://raw.githubusercontent.com/ajhamdi/AdvPC/master/latent_3d_points/external/structural_losses/tf_nndistance_compile.sh",
      "https://raw.githubusercontent.com/ajhamdi/AdvPC/master/latent_3d_points/external/structural_losses/tf_approxmatch_compile.sh",
      "https://raw.githubusercontent.com/ajhamdi/AdvPC/master/latent_3d_points/external/structural_losses/compile_lib.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9770023712466527,
        0.9863835249517937,
        0.9937106512693533,
        0.9975728465174906,
        0.9251321782859862
      ],
      "excerpt": "conda create -n NAME python=2.7 anaconda \nconda activate NAME \nconda install tensorflow-gpu=1.10.0 \nconda install -c anaconda cudatoolkit==9 \nmake sure CUDA/Cudnn is there by running nvcc --version , gcc --version, whereis nvcc \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9514200943917488
      ],
      "excerpt": "run make inside the above the directory \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8704003811729689
      ],
      "excerpt": "utils/tf_nndistance -- a self-defined tensorlfow op used for Chamfer/Hausdorff distance calculation. Use tf_nndistance_compile.sh to compile the op. The bash code may need modification according to the version and installtion path of CUDA. Note that it should be OK to directly calculate Chamfer/Hausdorff distance with available tf ops instead of tf_nndistance. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8026025354516283
      ],
      "excerpt": "The aligned version of ModelNet40 data (in point cloud data format) can be downloaded here. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ajhamdi/AdvPC/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python",
      "C++",
      "Cuda",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Learning Representations And Generative Models For 3D Point Clouds\\n\\nCopyright (c) 2017, Geometric Computation Group of Stanford University\\n\\nThe MIT License (MIT)\\n\\nCopyright (c) 2017 Panos Achlioptas\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "AdvPC: Transferable Adversarial Perturbations on 3D Point Clouds (ECCV 2020)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "AdvPC",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ajhamdi",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ajhamdi/AdvPC/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This code is tested with Python 2.7 and Tensorflow 1.9/1.10\n\nOther required packages include numpy, joblib, sklearn, etc.( see [environment.yml](https://github.com/ajhamdi/AdvPC/blob/master/environment.yml))\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 27,
      "date": "Thu, 23 Dec 2021 05:51:48 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "point-clouds",
      "pointnet",
      "deep-learning",
      "tensorflow",
      "eccv-2020",
      "paper",
      "adversarial-attacks",
      "3d"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "There are two main Python scripts in the root directorty: \n- `attack.py` -- AdvPC Adversarial Point Pertubations\n- `evaluate.py` -- code to evaluate the atcked point clouds under different networks and defeneses\n\nTo run AdvPC to attack network `NETWORK` and also evaluate the the attack, please use the following command:\n```\npython attack.py --phase all --network NETWORK --step=1 --batch_size=5 --num_iter=100 --lr_attack=0.01 --gamma=0.25 --b_infty=0.1 --u_infty=0.1 --evaluation_mode=1\n```\n- `NETWORK` is one of four networks : **PN**: [PointNet](https://arxiv.org/abs/1612.00593), **PN1**:[PointNet++ (MSG)](https://github.com/charlesq34/pointnet2) , **PN2**: [PointNet++ (SSG)](https://github.com/charlesq34/pointnet2),  **GCN**: [DGCNN](https://liuziwei7.github.io/projects/DGCNN)\n- `b_infty` , `u_infty` is the L_infty norm budget used in the experiments.\n- `step` is the number of different initilizations for the attack.\n- `lr_attack` is the learning rate of the attack.\n- `gamma` is the main hyper parameter of **AdvPC** (that trades-off success with transferablity).\n- `num_iter` is the number of iterations in the optimzation.\n- `evaluation_mode` is the evaluation mode of the attack (**0**:targeted , **1**:untargeted)\n\nOther parameters can be founded in the script, or run `python attack.py -h`. The default parameters are the ones used in the paper.\n\nThe results will be saved in `results/exp0/` with the original point cloud and attacked point cloud saved as `V_T_B_orig.npy` and `V_T_B_adv.npy` respectively. `V` is the victim class of the expirements (out of ModelNet 40 classes ) and `T` is the target class (100 if untargeted attack) , and `B` is the batch number. By default the code will iterate over all the victims and targets in our test data `data/attacked_data.z`. A summary table of the evaluation of teh attack output will be saved in `results/exp0/exp0_all.csv` \n\n\n",
      "technique": "Header extraction"
    }
  ]
}