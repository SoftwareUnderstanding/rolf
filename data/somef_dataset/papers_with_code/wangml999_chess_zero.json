{
  "citation": [
    {
      "confidence": [
        0.8665468022511382
      ],
      "excerpt": "AlphaZero paper can be found at https://arxiv.org/pdf/1712.01815.pdf \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/wangml999/chess_zero",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-10-18T23:52:23Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-09-01T22:39:30Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8312878457782432,
        0.9686881835595096
      ],
      "excerpt": "I did not expect it would be an advanced player as I know the computer power is there. But just to try how far I can go.  \nThe program is based on previous go_zero but I changed the algorithm as per AlphaZero paper. And wrote a chess board in c++. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8171227858220842
      ],
      "excerpt": "The tensorflow include and lib paths in the makefile need to be updated accordingly. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9789460256178135
      ],
      "excerpt": "When there is no models, it creates a random model for selfplaying.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8531898276368783
      ],
      "excerpt": "Randomly sampling in the dataset to create mini-batch and feed into the network to train.  \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/wangml999/chess_zero/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 15:34:56 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/wangml999/chess_zero/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "wangml999/chess_zero",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/wangml999/chess_zero/master/training/run.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9908193311818779,
        0.903506574663072
      ],
      "excerpt": "Compile tensorflow from source code. Following the link to install tensorflow https://www.tensorflow.org/install/install_sources \ntensorflow r1.14. Later version has not been tested. One addtional step after compile tensorflow as per the instruction is to compile the //tensorflow:libtensorflow.so which will be used in the c++ player.  \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8639258741734444
      ],
      "excerpt": "./chess_r -p [depth] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8281437847960257
      ],
      "excerpt": "Polling selfplay data files directory, it loads maximum config.self_play_file_batch_size files from all previous generations with each file has 100 game's moves.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.950563948951535,
        0.8684686760379279
      ],
      "excerpt": "python3 train.py \na sample shell batch file run.sh is used to run selfplaying to create some data files and training the network.  \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/wangml999/chess_zero/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "Python",
      "Makefile",
      "C",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 wangml999\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "chess_zero",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "chess_zero",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "wangml999",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/wangml999/chess_zero/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* self play\n```shell\n./chess_r -n 100 -s -l\n```\n  The player will automatically use the latest model to do self play 100 games. All the moves are saved with -l option. \n  \n* evaluation\n```shell\n./chess_r -m1 [model number1] -m2 [model number2] -n 100 -s -e 2000\n```\n  this is to evaluate two models by playing 100 games and showing the winners and some other stats. -e [millsecond] option is to limit each engine's time on Monte Carlo Tree Search. \n  \n* play with human\n```shell\n./chess_r -m1 [model number] -m2 eric\n./chess_r -m1 [model number] -m2 eric -f \"[a FEN string]\" \n```\n  this will play 1 game with human or starting from a board position if a FEN string is given. \n\n![alt text](chess_screen.png)\n \n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 15:34:56 GMT"
    },
    "technique": "GitHub API"
  }
}