{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1505.04597",
      "https://arxiv.org/abs/1505.04597"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Mixed Precision Training Doc: https://docs.nvidia.com/deeplearning/performance/mixed-precision-training/index.html \n1. TensorRT Doc: https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html\n1. Onnx simplifier https://github.com/daquexian/onnx-simplifier\n1. Dataset link https://www.kaggle.com/c/severstal-steel-defect-detection/data\n1. U-Net: https://arxiv.org/abs/1505.04597\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8840467439138965
      ],
      "excerpt": "- Open JupyterLab/JupyterNotebook \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/SarthakGarg19/Severstal-Steel-Defect-Detection",
    "technique": "GitHub API"
  },
  "contributors": {
    "confidence": [
      1.0
    ],
    "excerpt": "Sarthak Garg in collaboration with CSIR-CMERI",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-05-24T15:58:18Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-04-26T11:40:11Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9657767077051538,
        0.9941184327030972,
        0.9742035093025811,
        0.8392435781575759
      ],
      "excerpt": "Steel is one of the most important building materials of modern times. Steel buildings are resistant to natural and man-made wear which has made the material ubiquitous around the world. To help make production of steel more efficient, this competition will help identify defects. \nSeverstal is leading the charge in efficient steel mining and production. They believe the future of metallurgy requires development across the economic, ecological, and social aspects of the industry\u2014and they take corporate responsibility seriously. The company recently created the country\u2019s largest industrial data lake, with petabytes of data that were previously discarded. Severstal is now looking to machine learning to improve automation, increase efficiency, and maintain high quality in their production. \nThe production process of flat sheet steel is especially delicate. From heating and rolling, to drying and cutting, several machines touch flat steel by the time it\u2019s ready to ship. Today, Severstal uses images from high frequency cameras to power a defect detection algorithm. \nAutomatic Mixed Precision (AMP) makes all the required adjustments to train models using mixed precision, providing two benefits over manual operations: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9683952567330933,
        0.923453183044302,
        0.8988113496719264
      ],
      "excerpt": "- Using AMP maintains forward and backward compatibility with all the APIs for defining and running models. \nThe benefits of mixed precision training are: \n- Speed up of math-intensive operations, such as linear and convolution layers, by using Tensor Cores. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8712573961957616
      ],
      "excerpt": "Porting the model to use the FP16 data type where appropriate. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877,
        0.8135240794501273
      ],
      "excerpt": "model, optimizer = amp.initialize(model, optimizer, opt_level=\"O1\") \nwith amp.scale_loss(loss, optimizer) as scaled_loss: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.958663061237349
      ],
      "excerpt": "U-net is used to solve the segmentation problem. U-net model is mostly used for Biomedical use-cases. It follows an encoder-decoder architecture and consists of mainly convolution layers and no-dense layers. It downscales the image to learn the \"WHAT\" in the images and then upscales the convolution layer to learn the \"WHERE\" in the images \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9912818024930095,
        0.8960029712147062
      ],
      "excerpt": "The core of NVIDIA\u00ae TensorRT is a C++ library that facilitates high-performance inference on NVIDIA graphics processing units (GPUs). It is designed to work in a complementary fashion with training frameworks such as TensorFlow, Caffe, PyTorch, MXNet, etc. It focuses specifically on running an already-trained network quickly and efficiently on a GPU for the purpose of generating a result (a process that is referred to in various places as scoring, detecting, regression, or inference). \nSome training frameworks such as TensorFlow have integrated TensorRT so that it can be used to accelerate inference within the framework. Alternatively, TensorRT can be used as a library within a user application. It includes parsers for importing existing models from Caffe, ONNX, or TensorFlow, and C++ and Python APIs for building models programmatically. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9251374544330861,
        0.9293315853002646,
        0.9144043270099422
      ],
      "excerpt": "TensorRT engine could be converted from the following frameworks using UFF parser, ONNX parser or TFTRT. The TensorRT API includes implementations for the most common deep learning layers. You can also use the C++ Plugin API or Python Plugin API to provide implementations for infrequently used or more innovative layers that are not supported out-of-the-box by TensorRT. \nWe have used the ONNX-Parser for the conversion Pytorch-TensorRT. \n- Model is trained on Pytorch, and is saved as model.pth file.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9660155652172014,
        0.82256559656252
      ],
      "excerpt": "- After converting model to onnx, we simplify it using the Onnx-Simplifier. \n- Followed by creating TensorRT engine(model.trt) and serializing it for later use. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9850705541853054
      ],
      "excerpt": "Replication of this repo is pretty simple. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8464329800418905
      ],
      "excerpt": "- Pull docker containers using: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Steel Defect Detection using U-Net. Optimising training and inference using Automatic Mixed Precision and TensorRT respectively.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/SarthakGarg13/Severstal-Steel-Defect-Detection/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Sat, 25 Dec 2021 20:37:52 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/SarthakGarg19/Severstal-Steel-Defect-Detection/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "SarthakGarg19/Severstal-Steel-Defect-Detection",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/SarthakGarg13/Severstal-Steel-Defect-Detection/master/Inference%20Notebook%20with%20TRT.ipynb",
      "https://raw.githubusercontent.com/SarthakGarg13/Severstal-Steel-Defect-Detection/master/Training_notebook.ipynb",
      "https://raw.githubusercontent.com/SarthakGarg13/Severstal-Steel-Defect-Detection/master/Simplify%20onnx%20model.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9182346395920096
      ],
      "excerpt": "- Run container on Ubuntu using the command: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8462825042473621
      ],
      "excerpt": "  - docker run -it -v \"/path/to/directory\" -p 1111:8888 \"image-name\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8475868586397524
      ],
      "excerpt": "- Training Notebook: sg22/traindefect:version1 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/SarthakGarg19/Severstal-Steel-Defect-Detection/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "HTML",
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Severstal Steel Defect Detection",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Severstal-Steel-Defect-Detection",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "SarthakGarg19",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/SarthakGarg19/Severstal-Steel-Defect-Detection/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Sat, 25 Dec 2021 20:37:52 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "tensorrt",
      "pytorch",
      "deeplearning",
      "unet-pytorch",
      "torch-onnx-trt",
      "mixed-precision-training",
      "kaggle"
    ],
    "technique": "GitHub API"
  }
}