{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1506.01497\n\n[2]\u3001https://github.com/chenyuntc/simple-faster-rcnn-pytorc"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8968592401678916
      ],
      "excerpt": "competition link:  https://www.datafountain.cn/competitions/332/details \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9681444190182769
      ],
      "excerpt": "refer to: https://blog.csdn.net/github_36923418/article/details/86303670 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Bigwode/rebar-detection-competition",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-01-17T01:31:58Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-08-09T16:18:14Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8928101500703702,
        0.8397572657076114
      ],
      "excerpt": "--env: visdom env for visualization \n--voc_data_dir: where the VOC data stored \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "simple rebar detection competition https://www.datafountain.cn/competitions/332/details",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Bigwode/rebar-detection-competition/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 12,
      "date": "Mon, 27 Dec 2021 14:22:47 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Bigwode/rebar-detection-competition/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Bigwode/rebar-detection-competition",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Bigwode/rebar-detection-competition/master/demo.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you want to use caffe-pretrain model as initial weight, you can run below to get vgg16 weights converted from caffe, which is the same as the origin paper use.\n\n```bash\npython misc/convert_caffe_pretrain.py\n```\n\nThis scripts would download pretrained model and converted it to the format compatible with torchvision. If you are in China and can not download the pretrain model, you may refer to [this issue](https://github.com/chenyuntc/simple-faster-rcnn-pytorch/issues/63)\n\nThen you could specify where caffe-pretraind model `vgg16_caffe.pth` stored in `utils/config.py` by setting `caffe_pretrain_path`. The default path is ok.\n\nIf you want to use pretrained model from torchvision, you may skip this step.\n\n**NOTE**, caffe pretrained model has shown slight better performance.\n\n**NOTE**: caffe model require images in BGR 0-255, while torchvision model requires images in RGB and 0-1. See `data/dataset.py`for more detail. \n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9124988926871698,
        0.8176482213677035
      ],
      "excerpt": "python train.py train --env='fasterrcnn-caffe' --plot-every=100 --caffe-pretrain \nyou may refer to utils/config.py for more argument. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9515752551715031
      ],
      "excerpt": "python test.py \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Bigwode/rebar-detection-competition/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "rebar-detection-competition-baseline",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "rebar-detection-competition",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Bigwode",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Bigwode/rebar-detection-competition/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "requires PyTorch >=0.4\n\n- install PyTorch >=0.4 with GPU (code are GPU-only), refer to [official website](http://pytorch.org)\n\n- install cupy, you can install via `pip install cupy-cuda80` or(cupy-cuda90,cupy-cuda91, etc).\n\n- install other dependencies:  `pip install -r requirements.txt `\n\n- Optional, but strongly recommended: build cython code `nms_gpu_post`: \n\n  ```bash\n  cd model/utils/nms/\n  python build.py build_ext --inplace\n  cd -\n  ```\n\n- start visdom for visualization\n\n```bash\nnohup python -m visdom.server &\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 39,
      "date": "Mon, 27 Dec 2021 14:22:47 GMT"
    },
    "technique": "GitHub API"
  }
}