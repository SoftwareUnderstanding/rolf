{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1901.02324",
      "https://arxiv.org/abs/1602.02068"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[Sparse Sequence-to-Sequence Models](https://www.aclweb.org/anthology/P19-1146)\n\n```\n@inproceedings{entmax,\n  author    = {Peters, Ben and Niculae, Vlad and Martins, Andr{\\'e} FT},\n  title     = {Sparse Sequence-to-Sequence Models},\n  booktitle = {Proc. ACL},\n  year      = {2019},\n  url       = {https://www.aclweb.org/anthology/P19-1146}\n}\n```\n\n[Adaptively Sparse Transformers](https://arxiv.org/pdf/1909.00015.pdf)\n\n```\n@inproceedings{correia19adaptively,\n  author    = {Correia, Gon\\c{c}alo M and Niculae, Vlad and Martins, Andr{\\'e} FT},\n  title     = {Adaptively Sparse Transformers},\n  booktitle = {Proc. EMNLP-IJCNLP (to appear)},\n  year      = {2019},\n}\n```\n\nFurther reading:\n\n  - Blondel, Martins, and Niculae, 2019. [Learning with Fenchel-Young Losses](https://arxiv.org/abs/1901.02324).\n  - Martins and Astudillo, 2016. [From Softmax to Sparsemax: A Sparse Model of Attention and Multi-Label Classification](https://arxiv.org/abs/1602.02068).\n  - Peters and Martins, 2019 [IT-IST at the SIGMORPHON 2019 Shared Task: Sparse Two-headed Models for Inflection](https://www.aclweb.org/anthology/W19-4207).\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{correia19adaptively,\n  author    = {Correia, Gon\\c{c}alo M and Niculae, Vlad and Martins, Andr{\\'e} FT},\n  title     = {Adaptively Sparse Transformers},\n  booktitle = {Proc. EMNLP-IJCNLP (to appear)},\n  year      = {2019},\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{entmax,\n  author    = {Peters, Ben and Niculae, Vlad and Martins, Andr{\\'e} FT},\n  title     = {Sparse Sequence-to-Sequence Models},\n  booktitle = {Proc. ACL},\n  year      = {2019},\n  url       = {https://www.aclweb.org/anthology/P19-1146}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/deep-spin/entmax",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-05-31T13:54:08Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-29T05:44:17Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9753790686055879
      ],
      "excerpt": "This package provides a pytorch implementation of entmax and entmax losses: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8429468058059585
      ],
      "excerpt": "  - A bisection-based algorithm for generic alpha-entmax. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "The entmax mapping and its loss, a family of sparse softmax alternatives.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/deep-spin/entmax/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 22,
      "date": "Wed, 29 Dec 2021 10:46:55 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/deep-spin/entmax/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "deep-spin/entmax",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\npip install entmax\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8836704212480256
      ],
      "excerpt": "<img src=\"entmax.png\" /> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/deep-spin/entmax/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 DeepSPIN\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "entmax",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "entmax",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "deep-spin",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/deep-spin/entmax/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 286,
      "date": "Wed, 29 Dec 2021 10:46:55 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```python\nIn [1]: import torch\n\nIn [2]: from torch.nn.functional import softmax\n\nIn [2]: from entmax import sparsemax, entmax15, entmax_bisect\n\nIn [4]: x = torch.tensor([-2, 0, 0.5])\n\nIn [5]: softmax(x, dim=0)\nOut[5]: tensor([0.0486, 0.3592, 0.5922])\n\nIn [6]: sparsemax(x, dim=0)\nOut[6]: tensor([0.0000, 0.2500, 0.7500])\n\nIn [7]: entmax15(x, dim=0)\nOut[7]: tensor([0.0000, 0.3260, 0.6740])\n\n```\n\nGradients w.r.t. alpha (continued):\n\n```python\nIn [1]: from torch.autograd import grad\n\nIn [2]: x = torch.tensor([[-1, 0, 0.5], [1, 2, 3.5]])\n\nIn [3]: alpha = torch.tensor(1.33, requires_grad=True)\n\nIn [4]: p = entmax_bisect(x, alpha)\n\nIn [5]: p\nOut[5]:\ntensor([[0.0460, 0.3276, 0.6264],\n        [0.0026, 0.1012, 0.8963]], grad_fn=<EntmaxBisectFunctionBackward>)\n\nIn [6]: grad(p[0, 0], alpha)\nOut[6]: (tensor(-0.2562),)\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}