{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[image1]: ./images/Distribution_classes.png \"Distribution\"\n[image2]: ./images/examples.png \"examples\"\n[image3]: ./images/augmented4.png \"augmented1\"\n[image4]: ./images/augmented5.png \"augmented2\"\n[image5]: ./images/augmented6.png \"augmented3\"\n[image22]: ./images/augmented8.png \"augmented4\"\n[image6]: ./images/normalized.png \"normalized\"\n[image7]: ./images/after_augmentation.png \"after_augmentation\"\n[image8]: ./images/learning_rate_decay.png \"Tlearning_rate_decay\"\n[image20]: ./images/my_test1.png \"mytest 1\"\n[image21]: ./images/my_test2.png \"mytest 2\"\n[image23]: ./images/my_signs.png \"my_signs\"\n\n[image25]: ./images/trainingvisualization.png \"EXAMPLE: training visualization\"\n\n---\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.887139612507004
      ],
      "excerpt": "I experimented alot and after some literature research I was inspired by the VGG-design (http://cs231n.github.io/assets/cnn/convnet.jpeg & https://arxiv.org/pdf/1409.1556.pdf) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/autonomobil/SDCND-P2_Traffic-Sign-Classifier",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-11-06T11:04:27Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-02-05T13:18:50Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "I used the pandas library to calculate summary statistics of the traffic\nsigns data set:\n\n* The size of the training set is:      34799 images\n* The size of the validation set is:    4410 images\n* The size of the test set is:          12630 images\n* The shape of a traffic sign image is: 32 pixel *  32 pixel * 3 colorchannel\n* The number of unique classes/labels in the data set is: 43\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9775918698703858
      ],
      "excerpt": "In this project, I use what I've learned about deep neural networks and convolutional neural networks in Udacity's Traffic sign classification project which is part of their Self-driving Car Nano Degree. Specifically, train a model to classify traffic signs from the German Traffic Sign Dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9748956060950598,
        0.9683383207528309,
        0.8412770035657463
      ],
      "excerpt": "The goals / steps of this project are the following: \n* Load the data set (see below for links to the project data set) \n* Explore, summarize and visualize the data set \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8784454581602327,
        0.9363581332277736
      ],
      "excerpt": "* Analyze the softmax probabilities of the new images \n* Summarize the results with a written report \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9220226816989918
      ],
      "excerpt": "First there is a bar chart showing how the classes are distributed, as you can see some classes are very underrepresented. This can lead to problems, because then the ConvNet will be biased towards classes with a lot of images. If I give a hundred yield signs, a stop sign, then two hundred more yield signs, it is pretty predictable in which direction the CNN will lean. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.841265887305762
      ],
      "excerpt": "My final model consisted of the following layers: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8333754552195457
      ],
      "excerpt": "| Convolution 1x1 with RELU     | 1x1 stride, same padding, outputs 32x32x3     |   Here the CNN can train how to use a different combinations of colors | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9788159599404729
      ],
      "excerpt": "As you can see, the information from the lower levels is also transferred to the level of fully connected layers. By doing this, the fully connected layers have access also to low level features, which is very good for simple shapes like traffic signs. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9572274598997838
      ],
      "excerpt": "The learning is lowered each epoch according to the formula, which looks something like below: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8243840880003441
      ],
      "excerpt": "A L2 LossRegularizer was used to punish big weights. Method: All weights from all layers were summed up and added to the loss operation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.991890447160224
      ],
      "excerpt": "The Regularization formula is: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9487534748566868
      ],
      "excerpt": "I build a visualization to follow the training progress better, it costs more time, but it is very helpful for detecting under/overfitting, bugs etc. It looks something like this: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8553345295198859
      ],
      "excerpt": "Validation set accuracy of 98,9 % \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9776439647163518
      ],
      "excerpt": "Here are two examples for good classifications, on the first image the CNN is 100% sure and class is correct! This is an excellent result. For the other image the CNN is a bit unsure, but this is just a very small uncertainty. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "In this project, I use what I've learned about deep neural networks and convolutional neural networks in Udacity's Traffic sign classification project which is part of their Self-driving Car Nano Degree.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/autonomobil/SCDND-P2_Traffic-Sign-Classifier/releases",
    "technique": "GitHub API"
  },
  "faq": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Iterative steps (Hyperparameter tuning in between: lowering learning rate, increasing EPOCHS, etc..):\n1. Original LeNet with gray images (accuracy not good enough)\n2. Color LeNet (3 Colorchannels) with colored images (getting around 93% accuracy, not good enough, probably underfiting)\n3. Color LeNet with colored images and also augmented data set(getting around 94% accuracy, not good enough, probably underfiting)\n4. Modified Color LeNet (additional Conv Layer and increased depth) with colored images and also augmented data set(getting around 96% accuracy... we can do better)\n5. Literature research\n6. CNN inspired by VGG Net (additional Conv Layers, stacking Conv Layers, increased depth and Dropout, L2 Regularization) with colored images and also augmented data set (getting around 98% accuracy)\n    - took much longer to train, but getting valid accuracy up to 99%\n    - small learning rate is essential, especially when getting to the ragion of >96%\n    - dropout is important for avoiding overfitting\n    - L2 weight regularization is also used to avoid overfitting\n\nAfter getting validation accuracy > 98%, I checked every epoch if the current validation accuracy is greater than 0.98 and if so, save the current CNN. With this strategy I got the best CNN ``CNN_final_0.98889`` and used this for the next task. This CNN can be found [here](https://mega.nz/#F!xE8AxLwK). Training took about 30-45 without plotting, my workhorses is a Geforce GTX 1060 6GB.\n\n",
      "technique": "Header extraction"
    }
  ],
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 22 Dec 2021 01:49:20 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/autonomobil/SDCND-P2_Traffic-Sign-Classifier/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "autonomobil/SDCND-P2_Traffic-Sign-Classifier",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/autonomobil/SCDND-P2_Traffic-Sign-Classifier/master/Traffic_Sign_Classifier.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": " The best CNN ``CNN_final_0.98889`` was restored and used. Here are the results of the prediction:\n\n| Target class\t\t\t        |     class Prediction\t        \t\t\t\t\t|\n|:---------------------:|:---------------------------------------------:|\n| 1\t\t| 1 \t\t\t\t\t\t\t\t\t|\n| 5   | 5\t\t\t\t\t\t\t\t\t\t|\n| 9\t  | 9\t\t\t\t\t\t\t\t\t\t|\n| 11  | 11\t\t\t\t\t \t\t\t\t|\n| 12\t| 12    \t\t\t\t\t\t\t|\n| 13\t| 13\t\t\t\t  |\n| 14\t| 14\t\t\t\t  |\n| 16 \t| 16\t\t\t\t  |\n| 17\t| 17\t\t\t\t\t|\n| 18 \t| 18\t\t\t\t\t|\n| 28\t| 28\t\t\t\t|\n| 31\t| 31\t\t\t\t\t|\n\nThe model was able to correctly guess 12 of the 12 traffic signs, which gives an accuracy of 100%.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Iterative steps (Hyperparameter tuning in between: lowering learning rate, increasing EPOCHS, etc..):\n1. Original LeNet with gray images (accuracy not good enough)\n2. Color LeNet (3 Colorchannels) with colored images (getting around 93% accuracy, not good enough, probably underfiting)\n3. Color LeNet with colored images and also augmented data set(getting around 94% accuracy, not good enough, probably underfiting)\n4. Modified Color LeNet (additional Conv Layer and increased depth) with colored images and also augmented data set(getting around 96% accuracy... we can do better)\n5. Literature research\n6. CNN inspired by VGG Net (additional Conv Layers, stacking Conv Layers, increased depth and Dropout, L2 Regularization) with colored images and also augmented data set (getting around 98% accuracy)\n    - took much longer to train, but getting valid accuracy up to 99%\n    - small learning rate is essential, especially when getting to the ragion of >96%\n    - dropout is important for avoiding overfitting\n    - L2 weight regularization is also used to avoid overfitting\n\nAfter getting validation accuracy > 98%, I checked every epoch if the current validation accuracy is greater than 0.98 and if so, save the current CNN. With this strategy I got the best CNN ``CNN_final_0.98889`` and used this for the next task. This CNN can be found [here](https://mega.nz/#F!xE8AxLwK). Training took about 30-45 without plotting, my workhorses is a Geforce GTX 1060 6GB.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "0. I didn't convert to grayscale because some testing showed that the CNN learned better with the additionally color information, which is understandable.\n\n\n1. First I normalized all images to a scale of -1, 1 by getting the maximum and minimum of each color channel of each image, calculating the range with the Max&Mins and then apply following formula :\n``image[:,:, color] = (image[:,:,color] - (val_range/2 + min_val)) / (val_range/2)``\n\n    After normalization I'm getting close to 0-centered data, which is essential for good machine earning.\n\n    ``Mean of raw data:  82.677589037``\n\n    ``Mean of normalized data:  -0.305579028335``\n\n    Example:\n\n    ![image6]\n\n\n2. As described in *Data Set Summary & Exploration* underrepresented classes can lead to problems. Another topic is invariance: To make the CNN robust it has to learn all kinds of rotation, scaling, lighting, etc. , to achieve this invariance I decided to augment more data. These following techniques were used:\n\n    - random Colorshift: Each colorchannel will be multiplied by a random factor between the low limit (which you can set) and 1\n    - random Warp: The image is randomly warped to simulated different viewing angles. Also adjustable\n    - random Zoom: The image is randomly zoomed in an adjustable range\n    - random Rotate: The image is randomly rotated in an adjustable degree range\n    - random move: The image is randomly moved pixelwise by a random value in x and a seperate random value in y direction\n    - return this images as an augmented image\n    - loop through each class until number of images in class >= mean number of images over all classes\n\n    Finally I used the following ranges for augmentation: ``aug_ranges: [0.12, 0.06, 7, 2, 4] ``\n    - 0.12 => multiply each color randomly by a factor in range of 88 - 100%\n    - 0.06 => zoom randomly by a factor in range of 93 - 107 %\n    - 7 => rotate randomly in range of -9, 9 degree\n    - 2 => move randomly in range of -3, 3 pixel\n    - 4 => warpfactor\n\nI wrote the function ```augmen_img```, which takes an image and the ``aug_ranges `` as input and generates a new image. After a lot of  trial&error I decided to use ``getAffineTransform & warpAffine`` from the library cv2 for 3 of the 5 operations, this resulted in increased generation   time, but the results are very good (no pixel artefacts, etc.). To save time I concatenate the additional images to X_train and y_train and dumped it as a new p.file. New dimensions are: ``X_train shape: (46740, 32, 32, 3)``. The .p-file can be found [here(augmented to minimum of 810 images in each class)](https://mega.nz/#!JdlWUASD) and [here (minimum  400  images)](https://mega.nz/#!pQ1CFbBC)\n\nHere are some examples of an original image and an augmented image:\n\n![image3]\n![image4]\n![image5]\n![image22]\n\n\n\nDistribution after augmentation, every class has atleast (mean number of samples in X_train =) 810 images:\n\n![image7]\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "I used the pandas library to calculate summary statistics of the traffic\nsigns data set:\n\n* The size of the training set is:      34799 images\n* The size of the validation set is:    4410 images\n* The size of the test set is:          12630 images\n* The shape of a traffic sign image is: 32 pixel *  32 pixel * 3 colorchannel\n* The number of unique classes/labels in the data set is: 43\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "I achieved a validation set accuracy of 98,9 % and test set accuracy of 97,9 % with this [project code (.ipynb-file)](https://github.com/autonomobil/CarND-Traffic-Sign-Classifier-Project/blob/master/Traffic_Sign_Classifier.ipynb), html can be found [here](https://github.com/autonomobil/CarND-Traffic-Sign-Classifier-Project/blob/master/Traffic_Sign_Classifier.html)! In this Notebook I set the augmentation minimum to 200 for time saving reason, but you can comment out the manual overide of the variable ``mean_no_of_samples = 200`` or set it to a value of desire. You could also load the pre normalized and augmented data, more of this topic below. \n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8044290599680651
      ],
      "excerpt": "- BATCH_SIZE =  128 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8778487586960795
      ],
      "excerpt": "EXAMPLE: ![image8] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8123763140827432
      ],
      "excerpt": "loss_operation = tf.reduce_mean(cross_entropy) + regularize_factor * regularizers \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/autonomobil/SDCND-P2_Traffic-Sign-Classifier/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "98,9 % Validation Accuracy - CarND-Traffic-Sign-Classifier-Project",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "SDCND-P2_Traffic-Sign-Classifier",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "autonomobil",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/autonomobil/SDCND-P2_Traffic-Sign-Classifier/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 22 Dec 2021 01:49:20 GMT"
    },
    "technique": "GitHub API"
  },
  "support": [
    {
      "confidence": [
        1
      ],
      "excerpt": "I achieved a validation set accuracy of 98,9 % and test set accuracy of 97,9 % with this [project code (.ipynb-file)](https://github.com/autonomobil/CarND-Traffic-Sign-Classifier-Project/blob/master/Traffic_Sign_Classifier.ipynb), html can be found [here](https://github.com/autonomobil/CarND-Traffic-Sign-Classifier-Project/blob/master/Traffic_Sign_Classifier.html)! In this Notebook I set the augmentation minimum to 200 for time saving reason, but you can comment out the manual overide of the variable ``mean_no_of_samples = 200`` or set it to a value of desire. You could also load the pre normalized and augmented data, more of this topic below. \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Here are the 12 German traffic signs that I found on the web:\n![image23]\n\nThese signs should be classified correctly, I can't see what would cause a problem.\n\n",
      "technique": "Header extraction"
    }
  ],
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "I achieved a validation set accuracy of 98,9 % and test set accuracy of 97,9 % with this [project code (.ipynb-file)](https://github.com/autonomobil/CarND-Traffic-Sign-Classifier-Project/blob/master/Traffic_Sign_Classifier.ipynb), html can be found [here](https://github.com/autonomobil/CarND-Traffic-Sign-Classifier-Project/blob/master/Traffic_Sign_Classifier.html)! In this Notebook I set the augmentation minimum to 200 for time saving reason, but you can comment out the manual overide of the variable ``mean_no_of_samples = 200`` or set it to a value of desire. You could also load the pre normalized and augmented data, more of this topic below. \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "0. I didn't convert to grayscale because some testing showed that the CNN learned better with the additionally color information, which is understandable.\n\n\n1. First I normalized all images to a scale of -1, 1 by getting the maximum and minimum of each color channel of each image, calculating the range with the Max&Mins and then apply following formula :\n``image[:,:, color] = (image[:,:,color] - (val_range/2 + min_val)) / (val_range/2)``\n\n    After normalization I'm getting close to 0-centered data, which is essential for good machine earning.\n\n    ``Mean of raw data:  82.677589037``\n\n    ``Mean of normalized data:  -0.305579028335``\n\n    Example:\n\n    ![image6]\n\n\n2. As described in *Data Set Summary & Exploration* underrepresented classes can lead to problems. Another topic is invariance: To make the CNN robust it has to learn all kinds of rotation, scaling, lighting, etc. , to achieve this invariance I decided to augment more data. These following techniques were used:\n\n    - random Colorshift: Each colorchannel will be multiplied by a random factor between the low limit (which you can set) and 1\n    - random Warp: The image is randomly warped to simulated different viewing angles. Also adjustable\n    - random Zoom: The image is randomly zoomed in an adjustable range\n    - random Rotate: The image is randomly rotated in an adjustable degree range\n    - random move: The image is randomly moved pixelwise by a random value in x and a seperate random value in y direction\n    - return this images as an augmented image\n    - loop through each class until number of images in class >= mean number of images over all classes\n\n    Finally I used the following ranges for augmentation: ``aug_ranges: [0.12, 0.06, 7, 2, 4] ``\n    - 0.12 => multiply each color randomly by a factor in range of 88 - 100%\n    - 0.06 => zoom randomly by a factor in range of 93 - 107 %\n    - 7 => rotate randomly in range of -9, 9 degree\n    - 2 => move randomly in range of -3, 3 pixel\n    - 4 => warpfactor\n\nI wrote the function ```augmen_img```, which takes an image and the ``aug_ranges `` as input and generates a new image. After a lot of  trial&error I decided to use ``getAffineTransform & warpAffine`` from the library cv2 for 3 of the 5 operations, this resulted in increased generation   time, but the results are very good (no pixel artefacts, etc.). To save time I concatenate the additional images to X_train and y_train and dumped it as a new p.file. New dimensions are: ``X_train shape: (46740, 32, 32, 3)``. The .p-file can be found [here(augmented to minimum of 810 images in each class)](https://mega.nz/#!JdlWUASD) and [here (minimum  400  images)](https://mega.nz/#!pQ1CFbBC)\n\nHere are some examples of an original image and an augmented image:\n\n![image3]\n![image4]\n![image5]\n![image22]\n\n\n\nDistribution after augmentation, every class has atleast (mean number of samples in X_train =) 810 images:\n\n![image7]\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Iterative steps (Hyperparameter tuning in between: lowering learning rate, increasing EPOCHS, etc..):\n1. Original LeNet with gray images (accuracy not good enough)\n2. Color LeNet (3 Colorchannels) with colored images (getting around 93% accuracy, not good enough, probably underfiting)\n3. Color LeNet with colored images and also augmented data set(getting around 94% accuracy, not good enough, probably underfiting)\n4. Modified Color LeNet (additional Conv Layer and increased depth) with colored images and also augmented data set(getting around 96% accuracy... we can do better)\n5. Literature research\n6. CNN inspired by VGG Net (additional Conv Layers, stacking Conv Layers, increased depth and Dropout, L2 Regularization) with colored images and also augmented data set (getting around 98% accuracy)\n    - took much longer to train, but getting valid accuracy up to 99%\n    - small learning rate is essential, especially when getting to the ragion of >96%\n    - dropout is important for avoiding overfitting\n    - L2 weight regularization is also used to avoid overfitting\n\nAfter getting validation accuracy > 98%, I checked every epoch if the current validation accuracy is greater than 0.98 and if so, save the current CNN. With this strategy I got the best CNN ``CNN_final_0.98889`` and used this for the next task. This CNN can be found [here](https://mega.nz/#F!xE8AxLwK). Training took about 30-45 without plotting, my workhorses is a Geforce GTX 1060 6GB.\n\n",
      "technique": "Header extraction"
    }
  ]
}