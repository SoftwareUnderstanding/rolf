{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1505.04597",
      "https://arxiv.org/abs/1707.03718",
      "https://arxiv.org/abs/1612.01105",
      "https://arxiv.org/abs/1805.10180",
      "https://arxiv.org/abs/1706.05587",
      "https://arxiv.org/abs/1802.02611"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n@misc{Yakubovskiy:2019,\n  Author = {Pavel Yakubovskiy},\n  Title = {Segmentation Models Pytorch},\n  Year = {2020},\n  Publisher = {GitHub},\n  Journal = {GitHub repository},\n  Howpublished = {\\url{https://github.com/qubvel/segmentation_models.pytorch}}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{Yakubovskiy:2019,\n  Author = {Pavel Yakubovskiy},\n  Title = {Segmentation Models Pytorch},\n  Year = {2020},\n  Publisher = {GitHub},\n  Journal = {GitHub repository},\n  Howpublished = {\\url{https://github.com/qubvel/segmentation_models.pytorch}}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9278824608274014
      ],
      "excerpt": "<summary style=\"margin-left: 25px;\">SE-Net</summary> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8109194328925066,
        0.8109194328925066,
        0.8109194328925066,
        0.8109194328925066,
        0.8109194328925066,
        0.8109194328925066,
        0.8109194328925066,
        0.8109194328925066
      ],
      "excerpt": "|timm-efficientnet-b0            |imagenet / advprop / noisy-student|4M                              | \n|timm-efficientnet-b1            |imagenet / advprop / noisy-student|6M                              | \n|timm-efficientnet-b2            |imagenet / advprop / noisy-student|7M                              | \n|timm-efficientnet-b3            |imagenet / advprop / noisy-student|10M                             | \n|timm-efficientnet-b4            |imagenet / advprop / noisy-student|17M                             | \n|timm-efficientnet-b5            |imagenet / advprop / noisy-student|28M                             | \n|timm-efficientnet-b6            |imagenet / advprop / noisy-student|40M                             | \n|timm-efficientnet-b7            |imagenet / advprop / noisy-student|63M                             | \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/qubvel/segmentation_models.pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-03-01T16:21:21Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-30T03:50:22Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9004646953717899
      ],
      "excerpt": "Competitions won with the library \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8568518753738177
      ],
      "excerpt": "Segmentation model is just a PyTorch nn.Module, which can be created as easy as: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = smp.Unet( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9674334171229403,
        0.8641418009859607,
        0.9248385684419768
      ],
      "excerpt": " - see table with available model architectures \n - see table with available encoders and their corresponding weights \nAll encoders have pretrained weights. Preparing your data the same way as during weights pre-training may give your better results (higher metric score and faster convergence). But it is relevant only for 1-2-3-channels images and not necessary in case you train the whole model, not only decoder. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9795444612806833
      ],
      "excerpt": "The following is a list of supported encoders in the SMP. Select the appropriate family of encoders and click to expand the table and select a specific encoder and its pre-trained weights (encoder_name and encoder_weights parameters). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8191818563765993
      ],
      "excerpt": "|vgg16                           |imagenet                        |14M                             | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9373092483832144
      ],
      "excerpt": "Pytorch Image Models (a.k.a. timm) has a lot of pretrained models and interface which allows using these models as encoders in smp, however, not all models are supported \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8283578373334225,
        0.9891427868124095
      ],
      "excerpt": " - table with available encoders \nmodel.encoder - pretrained backbone to extract features of different spatial resolution \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8803880251327326,
        0.8711340319512925
      ],
      "excerpt": "model.segmentation_head - last block to produce required number of mask channels (include also optional upsampling and activation) \nmodel.classification_head - optional block which create classification head on top of encoder \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8971398160244696
      ],
      "excerpt": "Input channels parameter allows you to create models, which process tensors with arbitrary number of channels. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9330903237026383
      ],
      "excerpt": "populated with weights like new_weight[:, i] = pretrained_weight[:, i % 3] and than scaled with new_weight * 3 / new_in_channels. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = smp.FPN('resnet34', in_channels=1) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9439349767171928
      ],
      "excerpt": "All models support aux_params parameters, which is default set to None.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8774285692574664
      ],
      "excerpt": "model produce not only mask, but also label output with shape NC. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8350360121109714
      ],
      "excerpt": "    dropout=0.5,               #: dropout ratio, default is None \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = smp.Unet('resnet34', encoder_depth=4) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Segmentation models with pretrained backbones. PyTorch.",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Visit [Read The Docs Project Page](https://smp.readthedocs.io/) or read following README to know more about Segmentation Models Pytorch (SMP for short) library\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "http://smp.readthedocs.io/",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://smp.readthedocs.io/",
      "technique": "Regular expression"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/qubvel/segmentation_models.pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 927,
      "date": "Thu, 30 Dec 2021 06:53:01 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "qubvel/segmentation_models.pytorch",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/qubvel/segmentation_models.pytorch/master/docker/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/qubvel/segmentation_models.pytorch/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/qubvel/segmentation_models.pytorch/master/examples/cars%20segmentation%20%28camvid%29.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "PyPI version:\n```bash\n$ pip install segmentation-models-pytorch\n````\nLatest version from source:\n```bash\n$ pip install git+https://github.com/qubvel/segmentation_models.pytorch\n````\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9175483060006021
      ],
      "excerpt": "Congratulations! You are done! Now you can train your model with your favorite framework! \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8606280910157142
      ],
      "excerpt": "Quick start \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9012248701992861
      ],
      "excerpt": "import segmentation_models_pytorch as smp \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from segmentation_models_pytorch.encoders import get_preprocessing_fn \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'The MIT License\\n\\nCopyright (c) 2019, Pavel Yakubovskiy\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "## [\ud83d\udcda Project Documentation \ud83d\udcda](http://smp.readthedocs.io/)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "segmentation_models.pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "qubvel",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/qubvel/segmentation_models.pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "qubvel",
        "body": "## Updates\r\n - Universal timm encoder. 400+ pretrained encoders from [timm](https://github.com/rwightman/pytorch-image-models) available with `tu-` prefix. List of available encoders [here](https://smp.readthedocs.io/en/latest/encoders_timm.html).\r\n - Minor fixes and improvements.",
        "dateCreated": "2021-11-18T10:38:32Z",
        "datePublished": "2021-11-18T10:48:15Z",
        "html_url": "https://github.com/qubvel/segmentation_models.pytorch/releases/tag/v0.2.1",
        "name": "Segmentation Models - v0.2.1",
        "tag_name": "v0.2.1",
        "tarball_url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/tarball/v0.2.1",
        "url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/releases/53627345",
        "zipball_url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/zipball/v0.2.1"
      },
      {
        "authorType": "User",
        "author_name": "qubvel",
        "body": "## Updates\r\n - New architecture: MANet (#310)\r\n - New encoders from `timm`: mobilenetv3 (#355) and gernet (#344)\r\n - New loss functions in `smp.losses` module (`smp.utils.losses` would be deprecated in future versions)\r\n - New pretrained weight initialization for first convolution if `in_channels > 3`\r\n - Updated timm version (0.4.12)\r\n - Bug fixes and docs improvement\r\n\r\nThanks to @azkalot1 @JulienMaille @originlake @Kupchanski @loopdigga96 @zurk @nmerty @ludics @Vozf @markson14 and others!",
        "dateCreated": "2021-07-05T07:35:29Z",
        "datePublished": "2021-07-05T09:05:24Z",
        "html_url": "https://github.com/qubvel/segmentation_models.pytorch/releases/tag/v0.2.0",
        "name": "Segmentation Models - v0.2.0",
        "tag_name": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/tarball/v0.2.0",
        "url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/releases/45701120",
        "zipball_url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/zipball/v0.2.0"
      },
      {
        "authorType": "User",
        "author_name": "qubvel",
        "body": "## Updates\r\n - New architecture Unet++ (#279)\r\n - New encoders RegNet, ResNest, SK-Net, Res2Net (#286)\r\n - Updated timm version (0.3.2)\r\n - Improved docstrings and typehints for models\r\n - Project documentation on https://smp.readthedocs.io\r\n\r\nThanks to @azkalot1 for the new encoders and architecture!",
        "dateCreated": "2020-12-13T10:14:21Z",
        "datePublished": "2020-12-13T10:22:37Z",
        "html_url": "https://github.com/qubvel/segmentation_models.pytorch/releases/tag/v0.1.3",
        "name": "Segmentation Models - v0.1.3",
        "tag_name": "v0.1.3",
        "tarball_url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/tarball/v0.1.3",
        "url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/releases/35201702",
        "zipball_url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/zipball/v0.1.3"
      },
      {
        "authorType": "User",
        "author_name": "qubvel",
        "body": "### Fixes\r\n - Fix `pytorch-efficientnet` package version in requirements.txt to strict 0.6.3 (#260)",
        "dateCreated": "2020-09-28T21:13:24Z",
        "datePublished": "2020-09-28T21:15:52Z",
        "html_url": "https://github.com/qubvel/segmentation_models.pytorch/releases/tag/v0.1.2",
        "name": "Segmentation Models - v0.1.2",
        "tag_name": "v0.1.2",
        "tarball_url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/tarball/v0.1.2",
        "url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/releases/31906950",
        "zipball_url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/zipball/v0.1.2"
      },
      {
        "authorType": "User",
        "author_name": "qubvel",
        "body": "## Updates\r\n - New decoders DeepLabV3, DeepLabV3+, PAN\r\n - New backbones (encoders) `timm-efficientnet*`\r\n - New pretrained weights (ssl, wsl) for resnets\r\n - New pretrained weights (advprop) for efficientnets\r\n\r\nAnd some small fixes.\r\n\r\nThanks @IlyaDobrynin @gavrin-s @lizmisha @suitre77 @thisisiron @phamquiluan and all other contributers!\r\n\r\n\r\n",
        "dateCreated": "2020-09-26T12:57:34Z",
        "datePublished": "2020-09-26T13:09:02Z",
        "html_url": "https://github.com/qubvel/segmentation_models.pytorch/releases/tag/v0.1.1",
        "name": "Segmentation Models - v0.1.1",
        "tag_name": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/tarball/v0.1.1",
        "url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/releases/31843092",
        "zipball_url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/zipball/v0.1.1"
      },
      {
        "authorType": "User",
        "author_name": "qubvel",
        "body": "### Updates\r\n\r\n1) New backbones (mobilenet, efficientnet, inception)\r\n2) `depth` and `in_channels` options for all models\r\n3) Auxiliary classification output \r\n\r\n### Note!\r\nModel architectures have been changed, use previous versions for weights compatibility!",
        "dateCreated": "2019-12-03T20:11:59Z",
        "datePublished": "2019-12-09T13:59:56Z",
        "html_url": "https://github.com/qubvel/segmentation_models.pytorch/releases/tag/V0.1.0",
        "name": "Segmentation Models - v0.1.0",
        "tag_name": "V0.1.0",
        "tarball_url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/tarball/V0.1.0",
        "url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/releases/22075475",
        "zipball_url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/zipball/V0.1.0"
      },
      {
        "authorType": "User",
        "author_name": "qubvel",
        "body": "## Updates\r\n - Conv2D Initialization \r\n    - kaiming_normal -> kaiming_uniform; \r\n    - fan_out -> fan_in; \r\n    - bias -> 0\r\n - package dependencies",
        "dateCreated": "2019-09-28T18:39:46Z",
        "datePublished": "2019-09-28T18:43:57Z",
        "html_url": "https://github.com/qubvel/segmentation_models.pytorch/releases/tag/v0.0.3",
        "name": "Segmentation Models - v0.0.3",
        "tag_name": "v0.0.3",
        "tarball_url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/tarball/v0.0.3",
        "url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/releases/20328546",
        "zipball_url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/zipball/v0.0.3"
      },
      {
        "authorType": "User",
        "author_name": "qubvel",
        "body": "## Updates\r\n\r\n- New backbones:\r\n  - resnext50_32x4d\r\n  - resnext101_32x8d\r\n  - resnext101_32x16d\r\n  - resnext101_32x32d\r\n  - resnext101_32x48d\r\n - Unet `scSE` attention block (optional)\r\n - torchvision version update\r\n - `get_preprocessing_params` function\r\n\r\nThanks @laol777 for contribution!\r\n\r\n",
        "dateCreated": "2019-09-19T11:24:35Z",
        "datePublished": "2019-09-19T11:27:45Z",
        "html_url": "https://github.com/qubvel/segmentation_models.pytorch/releases/tag/v0.0.2",
        "name": "Segmentation Models - v0.0.2",
        "tag_name": "v0.0.2",
        "tarball_url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/tarball/v0.0.2",
        "url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/releases/20101039",
        "zipball_url": "https://api.github.com/repos/qubvel/segmentation_models.pytorch/zipball/v0.0.2"
      }
    ],
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\n$ docker build -f docker/Dockerfile.dev -t smp:dev . && docker run --rm smp:dev pytest -p no:cacheprovider\n```\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4639,
      "date": "Thu, 30 Dec 2021 06:53:01 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "segmentation",
      "image-processing",
      "neural-networks",
      "pspnet",
      "linknet",
      "unet",
      "unet-pytorch",
      "pytorch",
      "fpn",
      "models",
      "imagenet",
      "pretrained-models",
      "semantic-segmentation",
      "image-segmentation",
      "segmentation-models",
      "pretrained-backbones",
      "unetplusplus",
      "deeplabv3",
      "deeplab-v3-plus",
      "pretrained-weights"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": " - Training model for cars segmentation on CamVid dataset [here](https://github.com/qubvel/segmentation_models.pytorch/blob/master/examples/cars%20segmentation%20(camvid).ipynb).\n - Training SMP model with [Catalyst](https://github.com/catalyst-team/catalyst) (high-level framework for PyTorch), [TTAch](https://github.com/qubvel/ttach) (TTA library for PyTorch) and [Albumentations](https://github.com/albu/albumentations) (fast image augmentation library) - [here](https://github.com/catalyst-team/catalyst/blob/master/examples/notebooks/segmentation-tutorial.ipynb) [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/catalyst-team/catalyst/blob/master/examples/notebooks/segmentation-tutorial.ipynb)\n - Training SMP model with [Pytorch-Lightning](https://pytorch-lightning.readthedocs.io) framework - [here](https://github.com/ternaus/cloths_segmentation) (clothes binary segmentation by [@teranus](https://github.com/ternaus)).\n\n",
      "technique": "Header extraction"
    }
  ]
}