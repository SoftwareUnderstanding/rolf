{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1711.05225"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zoogzog/chexnet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-01-26T04:54:43Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-25T15:44:28Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.943310375887006,
        0.8505253972178451,
        0.9267697962587267,
        0.8594787540206889
      ],
      "excerpt": "Yet another PyTorch implementation of the CheXNet algorithm for pathology detection in  \nfrontal chest X-ray images. This implementation is based on approach presented here. Ten-crops  \ntechnique is used to transform images at the testing stage to get better accuracy.  \nThe highest accuracy evaluated with AUROC was 0.8508 (see the model m-25012018-123527 in the models directory). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Implementation of the CheXNet network (PyTorch)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zoogzog/chexnet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 87,
      "date": "Thu, 30 Dec 2021 11:02:36 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zoogzog/chexnet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "zoogzog/chexnet",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.8455058341194395
      ],
      "excerpt": "The same training (70%), validation (10%) and testing (20%) datasets were used as in this  \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zoogzog/chexnet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "CheXNet implementation in PyTorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "chexnet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "zoogzog",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zoogzog/chexnet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Python 3.5.2\n* Pytorch\n* OpenCV (for generating CAMs)\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 176,
      "date": "Thu, 30 Dec 2021 11:02:36 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Download the ChestX-ray14 database from [here](https://nihcc.app.box.com/v/ChestXray-NIHCC/folder/37178474737)\n* Unpack archives in separate directories (e.g. images_001.tar.gz into images_001)\n* Run **python Main.py** to run test using the pre-trained model (m-25012018-123527)\n* Use the **runTrain()** function in the **Main.py** to train a model from scratch\n\nThis implementation allows to conduct experiments with 3 different densenet architectures: densenet-121, densenet-169 and\ndensenet-201.\n\n* To generate CAM of a test file run script HeatmapGenerator \n\n",
      "technique": "Header extraction"
    }
  ]
}