{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1505.04597](https://arxiv.org/pdf/1505.04597.pdf)\n\n# Graph-based convolutional neural networks\n\n* [Talk by Prof. Bronstein at MIDL 2019](https://www.youtube.com/watch?time_continue=80&v=1c3mEvm2InA&feature=emb_title)\n* [Talk by Guillem Curcurull at MIDL 2019](https://www.youtube.com/watch?v=TF-oycYWnqc)\n\nWe were interested in pursuing an approach using a convolutional neural network that works on the cortical surface (for example in Cucurull et al. 2018). Graph neural networks have gained popularity in computer science, and they can represent dependencies between nodes in a different way than pixel-based images.\n\nThe cortical brain surface is represented in form of a closed mesh that can be understood as undirected graph. The surface mesh consists of vertices (nodes) and edges, which form faces - triangles in the case of a brain surface (see Figure A below). In the case of the gifti file format (.surf.gii), the file stores two data arrays: A *n* x 3 array that stores the coordinates of each vertex in space and a *m* x 3 array that stores the indices of the vertices associated with each triangle (a,b,c in the example below). A metric file (.func.gii) contains the data associated with a vertex, for example a curvature map. These files store a *n* x 1 vector of values for each vertex.\n\nCortical mesh data is thus represented in non-Eucledian space, which means that we can't use a conventional convolution kernel as spatial operator. We can use the information from the triangles, however, to infer the indices of the neighbouring vertices (see Figure B below for an example with arbitrary indices). We can thus reshape the data so that for each vertex, we obtain a 1 x 7 vector of vertex indices that define a neighbourhood (see Figure C). A spatial convolution kernel that would cover the local neighbourhood of a vertex can be reshaped in the same way. A convolution can thus be performed by filling in the data from a metric file using the indices from the reshaped matrix and then multiplying each row with a kernel. The kernel thus slides downwards along all *n* rows. Due to the reshaping, we can then pass through further layers of a neural network. Example code for how such convolution can be performed can be found [in one of our scripts](https://github.com/NicoleEic/Brainhack_Oxbridge/blob/master/code/nn.py)\n\n<img src=\"doc/convolution.png\" align=\"center\" width=\"750px\"> <br>\n\n# MeshCNN - software\nAs an alternative approach we came across a relatively new software that has been specifically developed for segmentation of shapes: [MeshCNN](https://ranahanocka.github.io/MeshCNN/). The developers implemented convolution and pooling operations that work effectively on triangular meshes. During the learning process, important geometric features are learned, while redundant edges are collapsed. The software is open-source and it runs on the PyTorch backend. Adopting this software to work with brain surface meshes and cortical labels could be a promising new approach to automatic brain parcellation."
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8491520732036005
      ],
      "excerpt": "Similar: Desikan et al. 2006 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8228880591142993
      ],
      "excerpt": "Use Baysian paramater estimating theory \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9902272622380456
      ],
      "excerpt": "Glasser et al., 2016 parcellation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9302785107180478
      ],
      "excerpt": "Klein et al. 2005 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9937123380734981
      ],
      "excerpt": "For example Lohmann at al. 1998 (Medical Image Analysis), Yang et al. 2008 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9959674303373062
      ],
      "excerpt": "Pattern-recognition methods \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8641974673129688,
        0.876914702875234,
        0.876914702875234
      ],
      "excerpt": "Original UNET architecture proposed by Ronneberger et al. 2015. Accessed via arXiv:1505.04597 \nTalk by Prof. Bronstein at MIDL 2019 \nTalk by Guillem Curcurull at MIDL 2019 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/NicoleEic/Brainhack_Oxbridge",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-10-29T18:38:42Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-31T19:42:51Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9917901214848655
      ],
      "excerpt": "This is a loosely structured summary of previous approaches to automatically label sulci and gyri of the human brain. This list is not exhaustive. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9659258236811021
      ],
      "excerpt": "register brain to a probabilistic atlas space based on cortical folding \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8039399778901736
      ],
      "excerpt": "Multiple modalitis for data-driven parcellation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.815830899128833
      ],
      "excerpt": "anatomically constrained surface parametrization based on sulcal roots \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9478023173795445
      ],
      "excerpt": "fragment 3D pieces of sulci using k-means algorithm \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9815221033212516,
        0.8145191933020692
      ],
      "excerpt": "register native to template space \nYatershed-based approaches \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.809126120451367
      ],
      "excerpt": "Graph-based approach \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9848196168318298
      ],
      "excerpt": "A graph consisting of folds and junctions \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8146627989826494,
        0.9541454162873925
      ],
      "excerpt": "The automatic segmentation of sulci can be described in the context of a computer vision problem. Therefore, we studied how segmentation is typically performed in pixel-based 2D images. \nJargon: The term 'segmentation' is used for subcortical structures and 'parcellation' is used for the cerebral cortex \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8713220763406521,
        0.9919540765152908,
        0.9801486188728143
      ],
      "excerpt": "We were interested in pursuing an approach using a convolutional neural network that works on the cortical surface (for example in Cucurull et al. 2018). Graph neural networks have gained popularity in computer science, and they can represent dependencies between nodes in a different way than pixel-based images. \nThe cortical brain surface is represented in form of a closed mesh that can be understood as undirected graph. The surface mesh consists of vertices (nodes) and edges, which form faces - triangles in the case of a brain surface (see Figure A below). In the case of the gifti file format (.surf.gii), the file stores two data arrays: A n x 3 array that stores the coordinates of each vertex in space and a m x 3 array that stores the indices of the vertices associated with each triangle (a,b,c in the example below). A metric file (.func.gii) contains the data associated with a vertex, for example a curvature map. These files store a n x 1 vector of values for each vertex. \nCortical mesh data is thus represented in non-Eucledian space, which means that we can't use a conventional convolution kernel as spatial operator. We can use the information from the triangles, however, to infer the indices of the neighbouring vertices (see Figure B below for an example with arbitrary indices). We can thus reshape the data so that for each vertex, we obtain a 1 x 7 vector of vertex indices that define a neighbourhood (see Figure C). A spatial convolution kernel that would cover the local neighbourhood of a vertex can be reshaped in the same way. A convolution can thus be performed by filling in the data from a metric file using the indices from the reshaped matrix and then multiplying each row with a kernel. The kernel thus slides downwards along all n rows. Due to the reshaping, we can then pass through further layers of a neural network. Example code for how such convolution can be performed can be found in one of our scripts \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/NicoleEic/Brainhack_Oxbridge/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Tue, 28 Dec 2021 07:47:07 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/NicoleEic/Brainhack_Oxbridge/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "NicoleEic/Brainhack_Oxbridge",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/NicoleEic/Brainhack_Oxbridge/master/code/get_labels.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8508957202806083
      ],
      "excerpt": "second path: decoder, or symmetric expanding path, to enable localization using transposed convolution \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8405147349922261
      ],
      "excerpt": "Semantic segmentation: link a unit (for example a pixel) to a class label \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8516164588636045
      ],
      "excerpt": "<img src=\"doc/segmentation.png\" align=\"center\" width=\"750px\"> <br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8408011420158433
      ],
      "excerpt": "<img src=\"doc/unet.png\" align=\"center\" width=\"750px\"> <br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8105715350173166
      ],
      "excerpt": "<img src=\"doc/convolution.png\" align=\"center\" width=\"750px\"> <br> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/NicoleEic/Brainhack_Oxbridge/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Existing approaches",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Brainhack_Oxbridge",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "NicoleEic",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/NicoleEic/Brainhack_Oxbridge/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 28 Dec 2021 07:47:07 GMT"
    },
    "technique": "GitHub API"
  }
}