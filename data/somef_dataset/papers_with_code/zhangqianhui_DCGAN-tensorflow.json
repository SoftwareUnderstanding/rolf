{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zhangqianhui/DCGAN-tensorflow",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-12-11T14:18:18Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-08-17T12:28:47Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9017079821096781,
        0.9440620530146475,
        0.9301780759689336
      ],
      "excerpt": "Tensorflow implementation of Deep Convolutional Generative Adversarial Networks which is a stabilize Generative Adversarial Networks. The referenced torch code can be found here. \nBrandon Amos wrote an excellent blog post and image completion code based on this repo. \nTo avoid the fast convergence of D (discriminator) network, G (generator) network is updated twice for each D network update, which differs from original paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9270064256135375
      ],
      "excerpt": "MNIST codes are written by @PhoenixDai. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9719885233484356,
        0.8973817455450729
      ],
      "excerpt": "Details of the loss of Discriminator and Generator (with custom dataset not celebA). \nDetails of the histogram of true and fake result of discriminator (with custom dataset not celebA). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A tensorflow implementation of Deep Convolutional Generative Adversarial Networks",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zhangqianhui/DCGAN-tensorflow/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Sun, 26 Dec 2021 22:47:53 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zhangqianhui/DCGAN-tensorflow/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "zhangqianhui/DCGAN-tensorflow",
    "technique": "GitHub API"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zhangqianhui/DCGAN-tensorflow/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "JavaScript",
      "Python",
      "HTML",
      "CSS"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'The MIT License (MIT)\\n\\nCopyright (c) 2016 Taehoon Kim\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "DCGAN in Tensorflow",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "DCGAN-tensorflow",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "zhangqianhui",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zhangqianhui/DCGAN-tensorflow/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Python 2.7 or Python 3.3+\n- [Tensorflow](https://www.tensorflow.org/)\n- [SciPy](http://www.scipy.org/install.html)\n- (Optional) [Align&Cropped Images.zip](http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html) : Large-scale CelebFaces Dataset\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sun, 26 Dec 2021 22:47:53 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[<img src=\"https://raw.githubusercontent.com/carpedm20/blog/master/content/images/face.png\">](http://carpedm20.github.io/faces/)\n\n[link](http://carpedm20.github.io/faces/)\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "First, download dataset with:\n\n    $ python download.py mnist\n    $ python download.py celebA\n\nTo train a model with downloaded dataset:\n\n    $ python main.py --dataset mnist --is_train True\n    $ python main.py --dataset celebA --is_train True --is_crop True\n\nTo test with an existing model:\n\n    $ python main.py --dataset mnist\n    $ python main.py --dataset celebA --is_crop True\n\nOr, you can use your own dataset (without central crop) by:\n\n    $ mkdir data/DATASET_NAME\n    ... add images to data/DATASET_NAME ...\n    $ python main.py --dataset DATASET_NAME --is_train True\n    $ python main.py --dataset DATASET_NAME\n\n\n",
      "technique": "Header extraction"
    }
  ]
}