{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1801.01290\n\n# Recorded gif:\n![BeamRider](./saved_gifs/BeamRider.gif"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.999844609758346
      ],
      "excerpt": "Soft Actor-Critic: Off-Policy Maximum Entropy Deep Reinforcement Learning with a Stochastic Actor, Haarnoja et al, 2018 https://arxiv.org/abs/1801.01290 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8028046190715653
      ],
      "excerpt": "obs, rew, done, info = env.step(action) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "|  Enduro      |12| 3   | True  |   322.1 (+402.2)| 7098.8 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yining043/SAC-discrete",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-04-25T14:43:13Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-23T08:26:05Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8710473953648549
      ],
      "excerpt": ": where is the trained model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = model_loader(model_dir, model_save_name) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877,
        0.8983838760558175,
        0.8687977366746275
      ],
      "excerpt": "model.get_action(obs, deterministic=False) \n: to get the probability of next action given current state \n: to get the log probability of next action given current state \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.988080274082867
      ],
      "excerpt": "#: to get the settings for the model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8578330215571693
      ],
      "excerpt": ": wrap it using our env class \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9810706751001248
      ],
      "excerpt": ": to reset the env \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8049620839206177
      ],
      "excerpt": ": to render the env (same as Gym.env) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9810706751001248
      ],
      "excerpt": ": to close the env \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9915512758002057
      ],
      "excerpt": "#: to get the settings of the env \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9688707387496088
      ],
      "excerpt": "SAC-discrete works well for some Atari game Space Invaders, Qbert, Breakout, BeamRider, but performs terrible for Pong, Freeway; other environments are testing... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Modified versions of the Soft Actor-Critic algorithm for Atari games from https://github.com/ac-93/soft-actor-critic.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yining043/SAC-discrete/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Tue, 28 Dec 2021 07:47:16 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yining043/SAC-discrete/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "yining043/SAC-discrete",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9695324404155894,
        0.892123625691647,
        0.8353646792449898
      ],
      "excerpt": ":train with GPU \npython ./image_observation/sac_discrete_atari/sac.py --env 'Breakout' --use_gpu --gpu 1 --seed 3 \n:train with CPU \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8525006468049924,
        0.8506373628381094
      ],
      "excerpt": ":train with GPU \npython ./image_observation/sac_discrete_atari/sac.py --env 'Breakout' --use_gpu --gpu 1 --seed 3 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8216196964127496
      ],
      "excerpt": "python ./image_observation/sac_discrete_atari/sac.py --env 'Breakout' --seed 3 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8216196964127496
      ],
      "excerpt": "python ./plot_progress.py  --env BeamRider --seed 3 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9416522774131079
      ],
      "excerpt": "from Utils.model_loader import model_loader \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8779795841842539
      ],
      "excerpt": "model.get_action(obs, deterministic=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8135418442445309
      ],
      "excerpt": "model.get_action(obs, deterministic=False) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9416522774131079,
        0.9133368656218674
      ],
      "excerpt": "from Utils.envGym import envGym \nimport gym \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8617035303867304
      ],
      "excerpt": "python ./record_a_gif.py  --env BeamRider --model_id 24 --seed 3 --max_len 10000 --num 5 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8202742852226766
      ],
      "excerpt": "Main results: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.832296994424416,
        0.8422917152018685
      ],
      "excerpt": "|  BeamRider   |24| 3   | False |   1636.8 (+34.9)|  2052.9 \n| SpaceInvaders|20| 6   | False |   363.0 (+23.6) |   891.7 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.835677971288892
      ],
      "excerpt": "|  Qbert       |24| 6   | True  |   850.0 (+22.9) |   600.8 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python ./get_evg_entropy.py \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yining043/SAC-discrete/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 ac-93\\nCopyright (c) 2018 OpenAI (http://openai.com)\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "SAC-discrete",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "SAC-discrete",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "yining043",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yining043/SAC-discrete/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\ntensorflow 1.15.0\ngym[atari] 0.15.7\ncv2\nmpi4py\nnumpy\nmatplotlib\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 11,
      "date": "Tue, 28 Dec 2021 07:47:16 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "deep-reinforcement-learning",
      "soft-actor-critic",
      "atari-games",
      "tensorflow"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n#: install environment from .yml\nconda env create -f env.yml\n\n#: source env\nconda activate sac\n\n#: install some packages from pip\npip install -r req.txt\n\n#: install Spinningup from openAI\ngit clone https://github.com/openai/spinningup.git\ncd spinningup\npip install -e .\ncd ..\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```\npython ./load_atari_model.py  --env BeamRider --model_id 24 --seed 3\n```\n\nAfter the command is executed, the program will run the atari game 5 times and calculate the mean of cumulated reward and clipped reward (+1 for positive reward, -1 for negative reward, 0 for no reward).\n\nSee the source code for details.\n\n",
      "technique": "Header extraction"
    }
  ]
}