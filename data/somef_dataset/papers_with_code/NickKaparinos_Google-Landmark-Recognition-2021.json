{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1801.07698\n  \n### ArcFace inference process\nDuring inference, the features of the two images are normalised and the similarity is computed to determine if both pictures belong to the same class. The similarity between images is calculated using cosine similarity, which is a method used by search engines and can be calculated by the inner product of two normalised vectors.\n  \n### ArcFace versus Cross Entropy Loss\nIn a standard classification network, SoftMax and Categorical Cross-Entropy loss are usually used at the end of the network. SoftMax transforms numbers into probabilities. For each object, it gives a probability for each class that sums to 1. Once training is complete, the class with the highest probability is chosen. The Categorical Cross-Entropy loss calculates the difference between two distributions of probabilities and is minimized in the process of back-propagation during the training.\n  \nThe drawback with SoftMax is that it does not produce a safety margin, which means that the borders are a bit blurry. We want the vectors of two images of the same person to be as similar as possible, and the vectors of two images of two different people to be as different as possible. That means we want to produce a margin, as SVM does.\n  \n<p align=\"center\"><img src=\"https://github.com/NickKaparinos/Google-Landmark-Recognition-2021/blob/pytorch/Images/arcface_vs_softmax2.png\" alt=\"drawing\" width=\"600\"/>\n  \n## Results\nUsing Stochastic Gradient Descend with only **3 epochs** of training, a validation accuracy of **25.5%** and a micro F1 score of **0.25** was achieved. Due to computing limitations, no further optimisation could be done. Future work could include further network architecture optimisation, larger image dimensions and more training epochs."
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8866124188600096
      ],
      "excerpt": "<p align=\"center\"><img src=\"https://github.com/NickKaparinos/Google-Landmark-Recognition-2021/blob/pytorch/Images/arcface_vs_softmax2.png\" alt=\"drawing\" width=\"600\"/> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/NickKaparinos/Google-Landmark-Recognition-2021",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-08-13T18:44:13Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-16T20:20:32Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9289647036994052
      ],
      "excerpt": "Additive Angular Margin Loss (ArcFace) is a state of art loss function used for image classification and face recognition. ArcFace has a clear geometric interpretation due to the exact correspondence to the geodesic distance on the hypersphere. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9716893211144987,
        0.9810501281140207,
        0.9464874199380983
      ],
      "excerpt": "During inference, the features of the two images are normalised and the similarity is computed to determine if both pictures belong to the same class. The similarity between images is calculated using cosine similarity, which is a method used by search engines and can be calculated by the inner product of two normalised vectors. \nIn a standard classification network, SoftMax and Categorical Cross-Entropy loss are usually used at the end of the network. SoftMax transforms numbers into probabilities. For each object, it gives a probability for each class that sums to 1. Once training is complete, the class with the highest probability is chosen. The Categorical Cross-Entropy loss calculates the difference between two distributions of probabilities and is minimized in the process of back-propagation during the training. \nThe drawback with SoftMax is that it does not produce a safety margin, which means that the borders are a bit blurry. We want the vectors of two images of the same person to be as similar as possible, and the vectors of two images of two different people to be as different as possible. That means we want to produce a margin, as SVM does. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Google Landmark Recognition 2021 Kaggle image classification competition. Solution using transfer learning and ArcFace loss function.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/NickKaparinos/Google-Landmark-Recognition-2021/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Sun, 26 Dec 2021 20:02:21 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/NickKaparinos/Google-Landmark-Recognition-2021/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "NickKaparinos/Google-Landmark-Recognition-2021",
    "technique": "GitHub API"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/NickKaparinos/Google-Landmark-Recognition-2021/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Google-Landmark-Recognition-2021",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Google-Landmark-Recognition-2021",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "NickKaparinos",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/NickKaparinos/Google-Landmark-Recognition-2021/blob/pytorch/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Sun, 26 Dec 2021 20:02:21 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "deep-learning",
      "kaggle",
      "image-classification",
      "arcface",
      "pytorch"
    ],
    "technique": "GitHub API"
  }
}