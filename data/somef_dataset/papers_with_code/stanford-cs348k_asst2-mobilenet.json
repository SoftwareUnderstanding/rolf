{
  "citation": [
    {
      "confidence": [
        0.9560221507976479
      ],
      "excerpt": ":install_name_tool -change /libHalide.dylib /afs/.ir/users/d/u/durst/cs348k/Halide-11.0.1-x86-64-linux/bin/libHalide.dylib conv_layer_generator \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.842790493796475
      ],
      "excerpt": "./bin/convlayer --help \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9146894306581513
      ],
      "excerpt": "./bin/convlayer --schedule student \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.932235736252902
      ],
      "excerpt": "(base) durst@myth55:~/cs348k/asst2-convlayer$ LD_LIBRARY_PATH=/afs/.ir/users/d/u/durst/cs348k/Halide-11.0.1-x86-64-linux/lib ./bin/convlayer --schedule student \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567238164806345
      ],
      "excerpt": "You may wish to consider: \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/stanford-cs348k/asst2-convlayer",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-02-28T00:45:11Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-07T00:21:48Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9808773694171994,
        0.9650767138052493
      ],
      "excerpt": "Implementing the Halide algorithm for a conv layer is quite easy (we give you the algorithm in Halide in the starter code). The challenge is coming up with an efficient schedule. Good schedules will use a combination of ideas discussed in class, such as: SIMD vector processing, multi-core execution, and efficient blocking for cache locality.  \nIn general, this is a free-for-all assignment.  We want to you learn a bit about writing Halide schedules, and try your hand at making performance go faster.  You will have to do some Halide documentation reading on your own. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8352031563320059
      ],
      "excerpt": "the implementation of the convolution layer generator you will modify is in the top-level file conv_layer_generators.cpp. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9394449182630016,
        0.9394449182630016,
        0.9394449182630016,
        0.9394449182630016
      ],
      "excerpt": "  for v3: \n    for v2: \n      for v1: \n        for v0: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9394449182630016,
        0.9394449182630016,
        0.9394449182630016,
        0.9394449182630016,
        0.9394449182630016,
        0.9394449182630016,
        0.9394449182630016
      ],
      "excerpt": "  for v3: \n    for v2: \n      for v1: \n        for v0: \n          for r21: \n            for r21: \n              for r21: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8509188219547283
      ],
      "excerpt": "and in the tcsh shell on Linux it will be: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8592104112995682
      ],
      "excerpt": "You can also compile the Halide program with a schedule generated by the Halide autoscheduler using a value \"auto\" for the algorithm type.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8961742545369623
      ],
      "excerpt": "Here is output from two different program runs on myth.  Notice that the autoscheduler produces a schedule that is about 10 times faster than the default schedule. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9686720543986067
      ],
      "excerpt": "Programming in Halide is a form of meta-programming.  Halide is embedded in C++, so you write C++ code that calls the Halide API to build up a DAG of Halide operations (a Halide program representation).  Then Halide compiles this representation into a library, which is linked by the binary convlayer..   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.938534999118641,
        0.917416590643664
      ],
      "excerpt": "We have provided a reference implementation in conv_layer_generators.cpp called DefaultConvLayerGenerator. This implementation generates a conv layer implementation using the default Halide schedule. The code generated by DefaultConvLayerGenerator is called by HalideConvolutionLayer, which is located in the source file ./src/default_convolution_layer.cpp. \nThe starter code uses a naive/default Halide schedule, which corresponds to an evaluation order equivalent to code with loops that look like: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9394449182630016,
        0.9394449182630016,
        0.9394449182630016,
        0.9394449182630016
      ],
      "excerpt": "  for n: \n    for z: \n      for y: \n        for x: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9394449182630016,
        0.9394449182630016,
        0.9394449182630016,
        0.9394449182630016,
        0.9394449182630016,
        0.9394449182630016,
        0.9394449182630016
      ],
      "excerpt": "  for n: \n    for z: \n      for y: \n        for x: \n          for r0: \n            for r1: \n              for r2: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9828914429668553
      ],
      "excerpt": "Your job is to implement a custom Halide schedule that makes notable improvements on the default. (See Halide::Func::print_loop_nest() to inspect and debug your schedule like this.). Note: you can use the autoscheduler to get a sense of how much performance you have to gain, although you are not expected to equal the autoscheduler in performance.  You might also be interested to compare the performance of the autoscheduler against a hand-optimized professional grade performance library like the Intel oneAPI Deep Neural Network Library.  There's a lot of performance to be gained! \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9022803350573734,
        0.9707698478911638,
        0.9625983202536575
      ],
      "excerpt": "* Tiling the computation using .split() and .reorder. \n* More advanced implementations might even consider data layout transformations the interchange the storage order of different axes. See tutorial 16 and tutorial 17 for more info. \nIMPORTANT NOTE ABOUT THE AUTOSCHEDULER: The auto-scheduler is currently optimizing assuming the input dimensions that are currently hardcoded in conv_layer_generators.cpp. (Please see here.) If you compare performance against the autoscheduler for different inputs you should  change these parameters to the autoscheduler schedules specifically to your new conv layer size. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8443991623969267,
        0.8101590018341801
      ],
      "excerpt": "   * A writeup, in a file named writeup.pdf, that describes the iterative process you used to arrive at your solution.  At each step, we expect the writeup to say: \n       * I tried XXX for the following reason. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Assignment 2 for Stanford CS348K",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* [Halide tutorials](http://halide-lang.org/tutorials/tutorial_introduction.html). In particular, see Tutorial 01 for a basic introduction, Tutorial 07 for a 2D convolution example, and Tutorial 05 for an introduction to Halide schedules, and Tutorial 08 for more advanced scheduling topics.\n* [Exhaustive Halide documentation](http://halide-lang.org/docs/). \n* This is a [good Youtube video](https://www.youtube.com/watch?time_continue=476&v=3uiEyEKji0M&feature=emb_logo) about Halide scheduling. \n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/stanford-cs348k/asst2-mobilenet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 23:21:33 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/stanford-cs348k/asst2-convlayer/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "stanford-cs348k/asst2-convlayer",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/stanford-cs348k/asst2-mobilenet/master/driver.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9798376452272237
      ],
      "excerpt": "git clone git@github.com:stanford-cs348k/asst2-convlayer.git \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9529985990675073
      ],
      "excerpt": "Step 2: Install Halide: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9867405979957168
      ],
      "excerpt": "To install and use Halide follow the instructions at http://halide-lang.org/. In particular, you should download a binary release of Halide. You do not need to install Halide from source. We recommend version 11, but version 10 is also acceptable for this assignment. You may need version 10 if you're using an OS like Ubuntu 18.04 with an older version of glibc.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.850678848192504
      ],
      "excerpt": "You will see the following output when building the code: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8371866774939769,
        0.8371866774939769,
        0.8371866774939769,
        0.8371866774939769,
        0.9014578316720127
      ],
      "excerpt": "g++  -std=c++11 -g -O3 -DUSE_HALIDE -I/afs/.ir/users/d/u/durst/cs348k/Halide-11.0.1-x86-64-linux/include -I./build -c -o build/auto_convolution_layer.o src/auto_convolution_layer.cpp \ng++  -std=c++11 -g -O3 -DUSE_HALIDE -I/afs/.ir/users/d/u/durst/cs348k/Halide-11.0.1-x86-64-linux/include -I./build -c -o build/default_convolution_layer.o src/default_convolution_layer.cpp \ng++  -std=c++11 -g -O3 -DUSE_HALIDE -I/afs/.ir/users/d/u/durst/cs348k/Halide-11.0.1-x86-64-linux/include -I./build -c -o build/student_convolution_layer.o src/student_convolution_layer.cpp \ng++  -std=c++11 -g -O3 -DUSE_HALIDE -I/afs/.ir/users/d/u/durst/cs348k/Halide-11.0.1-x86-64-linux/include -I./build -c -o build/convlayer_main.o src/convlayer_main.cpp \ng++ build/auto_convolution_layer.o build/default_convolution_layer.o build/student_convolution_layer.o build/convlayer_main.o build/DefaultConvLayerGenerator.a build/StudentConvLayerGenerator.a build/AutoConvLayerGenerator.a -L/afs/.ir/users/d/u/durst/cs348k/Halide-11.0.1-x86-64-linux/bin -L/afs/.ir/users/d/u/durst/cs348k/Halide-11.0.1-x86-64-linux/lib -L./build -lHalide -ldl -lpthread -o bin/convlayer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9287736462887597
      ],
      "excerpt": "To get commandline help, run the command: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8105599258369092
      ],
      "excerpt": "You can also compile the Halide program with a schedule generated by the Halide autoscheduler using a value \"auto\" for the algorithm type.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9103490296250775
      ],
      "excerpt": "You can also use \"default\" to get the default Halide schedule.  \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8119133626220794
      ],
      "excerpt": "height       : 128 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8119133626220794
      ],
      "excerpt": "height       : 128 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/stanford-cs348k/asst2-convlayer/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "Makefile",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "CS348K (Mini-) Assignment 2: <br/> Optimizing a Convolutional Layer in Halide #",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "asst2-convlayer",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "stanford-cs348k",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/stanford-cs348k/asst2-convlayer/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Wed, 29 Dec 2021 23:21:33 GMT"
    },
    "technique": "GitHub API"
  }
}