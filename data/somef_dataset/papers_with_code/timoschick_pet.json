{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2001.07676",
      "https://arxiv.org/abs/2009.07118",
      "https://arxiv.org/abs/2001.07676",
      "https://arxiv.org/abs/2009.07118",
      "https://arxiv.org/abs/2012.11926",
      "https://arxiv.org/abs/2001.07676",
      "https://arxiv.org/abs/2009.07118"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you make use of the code in this repository, please cite the following papers:\n\n    @article{schick2020exploiting,\n      title={Exploiting Cloze Questions for Few-Shot Text Classification and Natural Language Inference},\n      author={Timo Schick and Hinrich Sch\u00fctze},\n      journal={Computing Research Repository},\n      volume={arXiv:2001.07676},\n      url={http://arxiv.org/abs/2001.07676},\n      year={2020}\n    }\n\n    @article{schick2020small,\n      title={It's Not Just Size That Matters: Small Language Models Are Also Few-Shot Learners},\n      author={Timo Schick and Hinrich Sch\u00fctze},\n      journal={Computing Research Repository},\n      volume={arXiv:2009.07118},\n      url={http://arxiv.org/abs/2009.07118},\n      year={2020}\n    }\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{schick2020small,\n  title={It's Not Just Size That Matters: Small Language Models Are Also Few-Shot Learners},\n  author={Timo Schick and Hinrich Sch\u00fctze},\n  journal={Computing Research Repository},\n  volume={arXiv:2009.07118},\n  url={http://arxiv.org/abs/2009.07118},\n  year={2020}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{schick2020exploiting,\n  title={Exploiting Cloze Questions for Few-Shot Text Classification and Natural Language Inference},\n  author={Timo Schick and Hinrich Sch\u00fctze},\n  journal={Computing Research Repository},\n  volume={arXiv:2001.07676},\n  url={http://arxiv.org/abs/2001.07676},\n  year={2020}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9104388306336967
      ],
      "excerpt": "\ud83d\udcd5 Citation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8043073075947367
      ],
      "excerpt": "    if self.pattern_id == 1: \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/timoschick/pet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-04-07T08:13:51Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-21T13:51:54Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9587881085525818
      ],
      "excerpt": "This repository contains the code for Exploiting Cloze Questions for Few-Shot Text Classification and Natural Language Inference and It's Not Just Size That Matters: Small Language Models Are Also Few-Shot Learners. The papers introduce pattern-exploiting training (PET), a semi-supervised training procedure that reformulates input examples as cloze-style phrases. In low-resource settings, PET and iPET significantly outperform regular supervised training, various semi-supervised baselines and even GPT-3 despite requiring 99.9% less parameters. The iterative variant of PET (iPET) trains multiple generations of models and can even be used without any training data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8150771532802734
      ],
      "excerpt": "--method pet \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9035701299282904,
        0.9062028315265147,
        0.8947980675172729
      ],
      "excerpt": " - $MODEL_TYPE is the name of the model being used, e.g. albert, bert or roberta. \n - $MODEL_NAME is the name of a pretrained model (e.g., roberta-large or albert-xxlarge-v2) or the path to a pretrained model. \n - $TASK_NAME is the name of the task to train and evaluate on. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9065300453741655
      ],
      "excerpt": "You can additionally specify various training parameters for both the ensemble of PET models corresponding to individual PVPs (prefix --pet_) and for the final sequence classification model (prefix --sc_). For example, the default parameters used for our SuperGLUE evaluation are: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8620665895031566,
        0.9439694895611724
      ],
      "excerpt": "  - pytorch_model.bin: the finetuned model, possibly along with some model-specific files (e.g, spiece.model, special_tokens_map.json) \n  - wrapper_config.json: the configuration of the model being used \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9480321658606153,
        0.8549571837239132
      ],
      "excerpt": "  - logits.txt: the model's predictions on the unlabeled data \n  - eval_logits.txt: the model's prediction on the evaluation data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8444657642936358
      ],
      "excerpt": "The final (distilled) model for each repetition $I can be found in $OUTPUT_DIR/final/p0-i$I, which contains the same files as described above. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9668881591821064
      ],
      "excerpt": "To train and evaluate an iPET model for one of the supported tasks, simply run the same command as above, but replace --method pet with --method ipet. There are various additional iPET parameters that you can modify; all of them are prefixed with --ipet_. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9084953367781977,
        0.9862996817587657
      ],
      "excerpt": "To train and evaluate a regular sequence classifier in a supervised fashion, simply run the same command as above, but replace --method pet with --method sequence_classifier. There are various additional parameters for the sequence classifier that you can modify; all of them are prefixed with --sc_. \nTo evaluate a pretrained language model with the default PET patterns and verbalizers, but without fine-tuning, remove the argument --do_train and add --no_distillation so that no final distillation is performed. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.878966209495464
      ],
      "excerpt": "\ud83d\udea8 Remember that you may need to increase the maximum sequence length to a much larger value, e.g. --pet_max_seq_length 5000. This only works with language models that support such long sequences, e.g. XLNet. For using XLNet, you can specify --model_type xlnet --model_name_or_path xlnet-large-cased --wrapper_type plm. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8675273726657697
      ],
      "excerpt": "a PVP, responsible for applying patterns to inputs and mapping labels to natural language verbalizations. See examples/custom_task_pvp.py for an example. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9861698578473961
      ],
      "excerpt": "Verbalizers are used to map task labels to words in natural language. For example, in a binary sentiment classification task, you could map the positive label (+1) to the word good and the negative label (-1) to the word bad. Verbalizers are realized through a PVP's verbalize() method. The simplest way of defining a verbalizer is to use a dictionary: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9761972673179722
      ],
      "excerpt": "Importantly, in PET's current version, verbalizers are by default restricted to single tokens in the underlying LMs vocabulary (for using more than one token, see below). Given a language model's tokenizer, you can easily check whether a word corresponds to a single token by verifying that len(tokenizer.tokenize(word)) == 1. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.806717010313892
      ],
      "excerpt": "Patterns are used to make the language model understand a given task; they must contain exactly one &lt;MASK&gt; token which is to be filled using the verbalizer. For binary sentiment classification based on a review's summary (&lt;A&gt;) and body (&lt;B&gt;), a suitable pattern may be &lt;A&gt;. &lt;B&gt;. Overall, it was &lt;MASK&gt;. Patterns are realized through a PVP's get_parts() method, which returns a pair of text sequences (where each sequence is represented by a list of strings): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9359257248384794
      ],
      "excerpt": "Importantly, if a sequence is longer than the specified maximum sequence length of the underlying LM, PET must know which parts of the input can be shortened and which ones cannot (for example, the mask token must always be there). Therefore, PVP provides a shortenable() method to indicate that a piece of text can be shortened: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9921501518482808,
        0.8359457388640773
      ],
      "excerpt": "By default, the current implementation of PET and iPET only supports a fixed set of labels that is shared across all examples and verbalizers that correspond to a single token.  \nHowever, for some tasks it may be necessary to use verbalizers that correspond to multiple tokens (as described here). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8336007538316234,
        0.9343442673611205
      ],
      "excerpt": "   where 'my_task' is the name of your task.  \n2) In your PVP, make sure that the get_parts() method always inserts the maximum number of mask tokens required for any verbalization. For example, if your verbalizer maps +1 to \"really awesome\" and -1 to \"terrible\" and if those are tokenized as [\"really\", \"awe\", \"##some\"] and [\"terrible\"], respectively, your get_parts() method should always return a sequence that contains exactly 3 mask tokens. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9456642448385701,
        0.890795134249408,
        0.8066371315457791
      ],
      "excerpt": "When using a MultiMaskTaskHelper, the maximum batch size for evaluation is 1. \nAs using multiple masks requires multiple forward passes during evaluation, the time required for evaluation scales about linearly with the length of the longest verbalizer. If you require verbalizers that consist of 10 or more tokens, using a generative LM might be a better approach. \nThe MultiMaskTaskHelper class is an experimental feature that is not thoroughly tested. In particular, this feature has only been tested for PET and not for iPET. If you observe something strange, please raise an issue. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "This repository contains the code for \"Exploiting Cloze Questions for Few-Shot Text Classification and Natural Language Inference\"",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/timoschick/pet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 197,
      "date": "Sat, 25 Dec 2021 03:27:57 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/timoschick/pet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "timoschick/pet",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "All requirements for PET can be found in `requirements.txt`. You can install all required packages with `pip install -r requirements.txt`.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9072934417257499
      ],
      "excerpt": "\ud83d\udd27 Setup \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8119351801076935
      ],
      "excerpt": "\ud83d\udc36 Train your own PET \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.852777000057804
      ],
      "excerpt": "To do so, you simply need the following two modifications: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8160071312555286,
        0.8054626563399598
      ],
      "excerpt": "        <th>#Examples</th> \n        <th>Training Mode</th> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8415329215331762
      ],
      "excerpt": "\ud83d\udcac CLI Usage \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8706364289035656
      ],
      "excerpt": "python3 cli.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8465013993990828
      ],
      "excerpt": " - $DATA_DIR is the directory containing the train and test files (check tasks.py to see how these files should be named and formatted for each task). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8125326532597249
      ],
      "excerpt": " - $MODEL_NAME is the name of a pretrained model (e.g., roberta-large or albert-xxlarge-v2) or the path to a pretrained model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8388904887814208
      ],
      "excerpt": "  - pytorch_model.bin: the finetuned model, possibly along with some model-specific files (e.g, spiece.model, special_tokens_map.json) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8328104892571002
      ],
      "excerpt": "  - results.json: a json file containing results such as the model's final accuracy \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8086765852913524
      ],
      "excerpt": "\ud83d\udea8 If you use iPET with zero training examples, you need to specify how many examples for each label should be chosen in the first generation and you need to change the reduction strategy to mean: --ipet_n_most_likely 100 --reduction mean. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.941207529545283
      ],
      "excerpt": "a DataProcessor, responsible for loading training and test data. See examples/custom_task_processor.py for an example. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8061103253135445
      ],
      "excerpt": "    return [example.text_a, '.', example.text_b, '.'], ['Overall, it was ', self.mask] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8061103253135445
      ],
      "excerpt": "    return [example.text_a, '.', example.text_b, '. Overall, it was ', self.mask], [] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8061103253135445
      ],
      "excerpt": "        return [example.text_a, '.', example.text_b, '.'], ['Overall, it was ', self.mask] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8130713140341094,
        0.8413986362796546
      ],
      "excerpt": "        return ['It was just ', self.mask, '!', example.text_a, '.', example.text_b, '.'], [] \nWhen training the model using the command line, specify all patterns to be used (e.g., --pattern_ids 1 2). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8127927083007043
      ],
      "excerpt": "1) Add the following lines in your task's DataProcessor (see examples/custom_task_processor.py): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8006780383051024,
        0.8801854956928516
      ],
      "excerpt": "   from pet.tasks import TASK_HELPERS \n   from pet.task_helpers import MultiMaskTaskHelper \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/timoschick/pet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Pattern-Exploiting Training (PET)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "timoschick",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/timoschick/pet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1183,
      "date": "Sat, 25 Dec 2021 03:27:57 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "nlp",
      "python",
      "machine-learning"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The command line interface `cli.py` in this repository currently supports three different training modes (PET, iPET, supervised training), two additional evaluation methods (unsupervised and priming) and 13 different tasks. For Yelp Reviews, AG's News, Yahoo Questions, MNLI and X-Stance, see [the original paper](https://arxiv.org/abs/2001.07676) for further details. For the 8 SuperGLUE tasks, see [this paper](https://arxiv.org/abs/2009.07118).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Instead of using the command line interface, you can also directly use the PET API, most of which is defined in `pet.modeling`. By including `import pet`, you can access methods such as `train_pet`, `train_ipet` and `train_classifier`. Check out their documentation for more information.\n\n",
      "technique": "Header extraction"
    }
  ]
}