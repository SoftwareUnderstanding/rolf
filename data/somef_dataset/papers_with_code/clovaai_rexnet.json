{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2007.00992"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n@misc{han2021rethinking,\n      title={Rethinking Channel Dimensions for Efficient Model Design}, \n      author={Dongyoon Han and Sangdoo Yun and Byeongho Heo and YoungJoon Yoo},\n      year={2021},\n      eprint={2007.00992},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{han2021rethinking,\n      title={Rethinking Channel Dimensions for Efficient Model Design}, \n      author={Dongyoon Han and Sangdoo Yun and Byeongho Heo and YoungJoon Yoo},\n      year={2021},\n      eprint={2007.00992},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8608695362283502
      ],
      "excerpt": "Dongyoon Han, Sangdoo Yun, Byeongho Heo, and YoungJoon Yoo | Paper | Pretrained Models \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9278824608274014
      ],
      "excerpt": "  | FBNet-C-FPN        | 1200x800 | 35.1 | 57.4 | 37.2 | 21.4M | 119.0B | val2017 | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "  | ResNet50-FPN     | 1200x800 | 37.6| 58.2| 40.9 | 41.8M | 202.2B | val2017| \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/clovaai/rexnet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-07-01T11:20:50Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-20T17:31:21Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.824981275445331
      ],
      "excerpt": "Dongyoon Han, Sangdoo Yun, Byeongho Heo, and YoungJoon Yoo | Paper | Pretrained Models \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9839767821724565
      ],
      "excerpt": "Designing an efficient model within the limited computational cost is challenging. We argue the accuracy of a lightweight model has been further limited by the design convention: a stage-wise configuration of the channel dimensions, which looks like a piecewise linear function of the network stage. In this paper, we study an effective channel dimension configuration towards better performance than the convention. To this end, we empirically study how to design a single layer properly by analyzing the rank of the output feature. We then investigate the channel configuration of a model by searching network architectures concerning the channel configuration under the computational cost restriction. Based on the investigation, we propose a simple yet effective channel configuration that can be parameterized by the layer index. As a result, our proposed model following the channel parameterization achieves remarkable performance on ImageNet classification and transfer learning tasks including COCO object detection, COCO instance segmentation, and fine-grained classifications. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9469696375500978
      ],
      "excerpt": "The CPU latencies are tested on Xeon E5-2630_v4 with a single image and the GPU latencies are measured on a V100 GPU with the batchsize of 64. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9440471446225774
      ],
      "excerpt": "We compare ReXNet-lites with EfficientNet-lites. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8699627800394204,
        0.8985738781761718
      ],
      "excerpt": "Please refer the following pretrained models. Top-1 and top-5 accuraies are reported with the computational costs. \nNote that all the models are trained and evaluated with 224x224 image size. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8507814150160582
      ],
      "excerpt": "The following results are trained with Faster RCNN with FPN: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8019699433842047
      ],
      "excerpt": "  | ResNeXt-101-FPN  | 1200x800 | 40.3 | 62.1 | 44.1 | 60.4M | 272.4B | val2017| \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8745407288970205
      ],
      "excerpt": "timm>=0.3.0 provides the wonderful wrap-up of ours models thanks to Ross Wightman. Otherwise, the models can be loaded as follows: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "  model.eval() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8045458077858678
      ],
      "excerpt": "To use ReXNet-lite on a CPU: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = rexnetv1_lite.ReXNetV1_lite(multiplier=1.0) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "  model.eval() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9026803088778402
      ],
      "excerpt": "ReXNet can be trained with any PyTorch training codes including ImageNet training in PyTorch with the model file and proper arguments. Since the provided model file is not complicated, we simply convert the model to train a ReXNet in other frameworks like MXNet. For MXNet, we recommend MXnet-gluoncv as a training code. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Official Pytorch implementation of ReXNet (Rank eXpansion Network) with pretrained models",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/clovaai/rexnet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 59,
      "date": "Thu, 23 Dec 2021 01:06:20 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/clovaai/rexnet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "clovaai/rexnet",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8186572761028871
      ],
      "excerpt": "The CPU latencies are tested on Xeon E5-2630_v4 with a single image and the GPU latencies are measured on a V100 GPU with the batchsize of 64. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9553820660604345
      ],
      "excerpt": "Here the GPU latencies are measured on two M40 GPUs, we will update the number run on a V100 GPU soon. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9553572932854322,
        0.8837680365796365
      ],
      "excerpt": "To use ReXNet on a GPU: \n  ```python \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8837680365796365
      ],
      "excerpt": "  ```python \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8126931250583084
      ],
      "excerpt": "| Backbone |Img. Size|  B_AP (%) | B_AP_0.5 (%) |  B_AP_0.75 (%) | Params. |FLOPs | Eval. set| \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674
      ],
      "excerpt": "  import rexnetv1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674
      ],
      "excerpt": "  import rexnetv1_lite \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8346200973518159
      ],
      "excerpt": "  print(model(torch.randn(1, 3, 224, 224))) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8370222616024274
      ],
      "excerpt": " --batch-size 128 --epochs 400 --sched cosine \\ \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/clovaai/rexnet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Copyright (c) 2020-present NAVER Corp.\\n\\n Permission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\n The above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "### (NOTICE) ReXNet-lite's code and the model file (x1.0) have been updated!",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "rexnet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "clovaai",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/clovaai/rexnet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Python3\n- PyTorch (> 1.0)\n- Torchvision (> 0.2)\n- NumPy\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 415,
      "date": "Thu, 23 Dec 2021 01:06:20 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "rexnet",
      "deep-learning",
      "image-classification",
      "object-detection",
      "transfer-learning",
      "pytorch",
      "imagenet",
      "pretrained-model"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- The following results are trained with **Mask RCNN with FPN**, S_AP and B_AP denote segmentation AP and box AP, respectively:\n\n  | Backbone |Img. Size|  S_AP (%) | S_AP_0.5 (%) | S_AP_0.75 (%) | B_AP (%) | B_AP_0.5 (%) | B_AP_0.75 (%) | Params. |FLOPs | Eval. set|\n  |:----:|:----:|:----:|:----:|:----:|:---:|:---:|:---:|:---:|:---:|:---:|\n  | EfficientNetB0_FPN     | 1200x800 | 34.8 | 56.8 | 36.6 | 38.4 | 60.2 | 40.8 | 23.7M | 123.0B | val2017|\n  | ReXNet_0.9-FPN  | 1200x800 | **35.2** | **57.4**| **37.1** |**38.7** |**60.8**|**41.6**| 22.8M | 123.0B | val2017|\n  | ReXNet_1.0-FPN  | 1200x800 | 35.4 | 57.7 | 37.4 | 38.9 |61.1 | 42.1 | 23.3M | 124.1B | val2017|\n  |||||||||||| \n  | ResNet50-FPN           | 1200x800 | 34.6 | 55.9 | 36.8 |38.5 |59.0|41.6|  44.2M | 207B | val2017|\n  | ReXNet_2.2-FPN | 1200x800 | **37.8** | **61.0** | **40.2** | **42.0** | **64.5** | **45.6**|  35.6M | 153.8B | val2017|\n  \n",
      "technique": "Header extraction"
    }
  ]
}