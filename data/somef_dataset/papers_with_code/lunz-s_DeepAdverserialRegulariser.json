{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1805.11572",
      "https://arxiv.org/abs/1701.07875"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9432427977930056
      ],
      "excerpt": "width=\"900\" title=\"Results_LIDC\"> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lunz-s/DeepAdverserialRegulariser",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-09-25T16:55:42Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-01-26T01:51:47Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9327211171924356,
        0.9032703002969743,
        0.8629552857615742
      ],
      "excerpt": "The network is trained as a critic as in WGANs, learning to discriminate between the \ndistribution of ground truth images and the distribution of unregularized reconstruction. \nOnce trained, we use the learned regularization functional to solve inverse problems by minizing the associated variational functional. In the context of computed tomography we employ early stopping to obtain the best results. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8788088465902417,
        0.919121976958444
      ],
      "excerpt": "To add custom data sets, forward operators for different inverse problems or network architectures, write your custom  \nimplementation of the corresponding abstract classes in ClassFiles. Finally, set the \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lunz-s/DeepAdverserialRegulariser/releases",
    "technique": "GitHub API"
  },
  "faq": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Code for the paper [Adversarial Regularizer in Inverse Problems](https://arxiv.org/abs/1805.11572).\n\nInverse Problems are traditionally solved using purely model-based methods, as in variational regularization methods. \nWe propose a new framework for applying data-driven approaches to inverse problems, using a neural network as\nregularization functional. \n\n",
      "technique": "Header extraction"
    }
  ],
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Mon, 27 Dec 2021 11:24:25 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lunz-s/DeepAdverserialRegulariser/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "lunz-s/DeepAdverserialRegulariser",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.8325640771767078
      ],
      "excerpt": "<img src=\"http://www.damtp.cam.ac.uk/user/sl767/picture_ar.png\"  \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lunz-s/DeepAdverserialRegulariser/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Adverserial Regularizers in Inverse Problems",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "DeepAdverserialRegulariser",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "lunz-s",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lunz-s/DeepAdverserialRegulariser/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 13,
      "date": "Mon, 27 Dec 2021 11:24:25 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Download the [LIDC_IDRI](https://wiki.cancerimagingarchive.net/display/Public/LIDC-IDRI) and/or the\n[BSDS500](http://www.eecs.berkeley.edu/Research/Projects/CS/vision/grouping/BSR/BSR_bsds500.tgz) dataset and split the raw \ndata into two folders named Training_Data and Evaluation_Data inside your DATA_PATH folder.\n\nThe package requirements are numpy, tensorflow, scipy, scikit-image, matplotlib, \n[pydicom](https://pydicom.github.io/pydicom/stable/getting_started.html), \n[astra-toolbox](https://www.astra-toolbox.com/docs/install.html), and [odl](https://github.com/odlgroup/odl). \nAll requirements can be installed directly into the conda environment advReg via\n```bash\n$ conda env create -f advReg.yml\n$ source activate advReg\n```\n\nThe tensorboard loggings can be found in SAVES_PATH.\n\n",
      "technique": "Header extraction"
    }
  ]
}