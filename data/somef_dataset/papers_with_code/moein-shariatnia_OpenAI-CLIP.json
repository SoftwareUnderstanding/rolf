{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2103.00020"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8043073075947367
      ],
      "excerpt": "        if pretrained: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "    if reduction == \"none\": \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "        if step == \"batch\": \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8456806903995955
      ],
      "excerpt": "    if valid_loss.avg &lt; best_loss: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9629329729245205
      ],
      "excerpt": "_, axes = plt.subplots(3, 3, figsize=(10, 10)) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/moein-shariatnia/OpenAI-CLIP",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-04-07T11:16:59Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-21T02:48:25Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1hYHb0FTdKQCXZs3qCwVZnSuVGrZU2Z1w?usp=sharing)\n\nIt was in January of 2021 that **OpenAI** announced two new models: **DALL-E** and **CLIP**, both **multi-modality** models connecting **texts and images** in some way. In this article we are going to implement CLIP model from scratch in **PyTorch**. OpenAI has open-sourced some of the code relating to CLIP model but I found it intimidating and it was far from something short and simple. I also came across a good tutorial inspired by CLIP model on Keras code examples and I translated some parts of it into PyTorch to build this tutorial totally with our beloved PyTorch!\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1hYHb0FTdKQCXZs3qCwVZnSuVGrZU2Z1w?usp=sharing)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9967096967187917,
        0.9935927069031316,
        0.8634869868476585,
        0.9151152966884201
      ],
      "excerpt": "In Learning Transferable Visual Models From Natural Language Supervision paper, OpenAI introduces their new model which is called CLIP, for Contrastive Language-Image Pre-training. In a nutshell, this model learns the relationship between a whole sentence and the image it describes; in a sense that when the model is trained, given an input sentence it will be able to retrieve the most related images corresponding to that sentence. The important thing here is that it is trained on full sentences instead of single classes like car, dog, etc. The intuition is that when trained on whole sentences, the model can learn a lot more things and finds some pattern between images and texts. \nThey also show that when this model is trained on a huge dataset of images and their corresponding texts, it can also act as a classifier too. I encourage you to study the paper to learn more about this exciting model and their astonishing results on benchmarking datasets\u00a0. To mention just one, CLIP model trained with this strategy classifies ImageNet better than those SOTA models trained on the ImageNet itself optimized for the only task of classification! \nAs a teaser (!), let's see what the final model that we will build in this article from scratch is capable of: given a query (raw text) like \"a boy jumping with skateboard\" or \"a girl jumping from swing\", the model will retrieve the most relevant images: \nLet's see some more outputs: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9654730266300259
      ],
      "excerpt": "A note on config and CFG: I wrote the codes with python scripts and then converted it into a Jupyter Notebook. So, in case of python scripts, config is a normal python file where I put all the hyperparameters and in the case of Jupyter Notebook, its a class defined in the beginning of the notebook to keep all the hyperparameters. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "    for param_group in optimizer.param_groups: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9853182925188977,
        0.9898736894979472
      ],
      "excerpt": "As you can see in the tittle image of this article, we need to encode both images and their describing texts. So, the dataset needs to return both images and texts. Of course we are not going to feed raw text to our text encoder! We will use DistilBERT model (which is smaller than BERT but performs nearly as well as BERT) from HuggingFace library as our text encoder; so, we need to tokenize the sentences (captions) with DistilBERT tokenizer and then feed the token ids (input_ids) and the attention masks to DistilBERT. Therefore, the dataset needs to take care of the tokenization as well. Below you can see the dataset's code. Below that I'll explain the most important things that is happening in the code. \nIn the __init__ we receive a tokenizer object which is actually a HuggingFace tokinzer; this tokenizer will be loaded when running the model. We are padding and truncating the captions to a specified max_length. In the __getitem__ we will first load an encoded caption which is a dictionary with keys input_ids and attention_mask, make tensors out of its values and after that we will load the corresponding image, transform and augment it (if there is any!) and then we make it a tensor and put it in the dictionary with \"image\" as the key. Finally we put the raw text of the caption with the key \"caption\" in the dictionary only for visualization purposes.\u00a0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.942464758027932
      ],
      "excerpt": "The code encodes each image to a fixed size vector with the size of the model's output channels (in case of ResNet50 the vector size will be 2048). This is the output after the nn.AdaptiveAvgPool2d() layer. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8915606643065194
      ],
      "excerpt": "    for p in self.model.parameters(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9908277009917623,
        0.9668832644731361
      ],
      "excerpt": "As I mentioned before, I'll use DistilBERT as the text encoder. Like its bigger brother BERT, two special tokens will be added to the actual input tokens: CLS and SEP which mark the start and end of a sentence. To grab the whole representation of a sentence (as the related BERT and DistilBERT papers point out) we use the final representations of the CLS token and we hope that this representation captures the overall meaning of the sentence (caption). Thinking it in this way, it is similar to what we did to images and converted them into a fixed size vector. \nIn the case of DistilBERT (and also BERT) the output hidden representation for each token is a vector with size 768. So, the whole caption will be encoded in the CLS token representation whose size is 768. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8915606643065194
      ],
      "excerpt": "    for p in self.model.parameters(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8925563460555609
      ],
      "excerpt": "    #: we are using the CLS token hidden representation as the sentence's embedding \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8053693493065396,
        0.9691750430767057,
        0.9935720511717095
      ],
      "excerpt": "I used Keras code example implementation of projection head to write the following in PyTorch. \nNow that we have encoded both our images and texts into fixed size vectors (2048 for image and 768 for text) we need to bring (project) them into a new world (!) with similar dimensions for both images and texts in order to be able to compare them and push apart the non-relevant image and texts and pull together those that match. So, the following code will bring the 2048 and 768 dimensional vectors into a 256 (projection_dim) dimensional world, where we can compare them. \n\"embedding_dim\" is the size of the input vector (2048 for images and 768 for texts) and \"projection_dim\" is the the size of the output vector which will be 256 for our case. For understanding the details of this part you can refer to the CLIP paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9399286204878919,
        0.9893069329157517,
        0.9421043519858703,
        0.9925258050613859,
        0.9851922279977277,
        0.9326958733401748
      ],
      "excerpt": "This part is where all the fun happens! I'll also talk about the loss function here. I translated some of the code from Keras code examples into PyTorch for writing this part. Take a look at the code and then read the explanation below this code block. \nHere we will use the previous modules that we built to implement the main model. The __init__ function is self-explanatory. In the forward function, we first encode the images and texts separately into fixed size vectors (with different dimensionalities). After that, using separate projection modules we project them to that shared world (space) that I talked about previously. Here the encodings will become of similar shape (256 in our case). After that we will compute the loss. Again I recommend reading CLIP paper to get it better but I'll try my best to explain this part. \nIn Linear Algebra, one common way to measure if two vectors are of similar characteristics (they are like each other) is to calculate their dot product (multiplying the matching entries and take the sum of them); if the final number is big, they are alike and if it is small they are not (relatively speaking)! \nOkay! What I just said is the most important thing to have in mind to understand this loss function. Let's continue. We talked about two vectors, but, what do we have here? We have image_embeddings, a matrix with shape (batch_size, 256) and text_embeddings with shape (batch_size, 256). Easy enough! it means we have two groups of vectors instead of two single vectors. How do we measure how similar two groups of vectors (two matrices) are to each other? Again, with dot product (@ operator in PyTorch does the dot product or matrix multiplication in this case). To be able to multiply these two matrices together, we transpose the second one. Okay, we get a matrix with shape (batch_size, batch_size) which we will call logits. (temperature is equal to 1.0 in our case, so, it does not make a difference. You can play with it and see what difference it makes. Also look at the paper to see why it is here!). \nI hope you are still with me! If not it's okay, just review the code and check their shapes. Now that we have our logits, we need targets. I need to say that there is a more straight forward way to obtain targets but I had to do this for our case (I'll talk about why in a next paragraph). \nLet's consider what we hope that this model learns: we want it to learn \"similar representations (vectors)\" for a given image and the caption describing it. Meaning that either we give it an image or the text describing it, we want it to produce same 256 sized vectors for both. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9346156109063188
      ],
      "excerpt": "    #: Getting Image and Text Features \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9677832801726464,
        0.9536916104849641,
        0.9874757627847911,
        0.9312934672491346
      ],
      "excerpt": "So logits, in the best case, will be a matrix that if we take its softmax, will have 1.0s in the diagonal (An identity matrix to call it with fancy words!). As the loss function's job is to make model's predictions similar to targets (at least in most cases!), we want such a matrix as our target. That's the reason why we are calculating images_similarity and texts_similarity matrices in the code block above. \nNow that we've got our targets matrix, we will use simple cross entropy to calculate the actual loss. I've written the full matrix form of cross entropy as a function which you can see in the bottom of the code block. Okay! We are done! Wasn't it simple?! Alright, you can ignore the next paragraph but if you are curious, there is an important note in that. \nHere's why I didn't use a simpler approach: I need to admit that there's a simpler way to calculate this loss in PyTorch; by doing this: nn.CrossEntropyLoss()(logits, torch.arange(batch_size)). Why I did not use it here? For 2 reasons. 1- The dataset we are using has multiple captions for a single image; so, there is the possibility that two identical images with their similar captions exist in a batch (it is rare but it can happen). Taking the loss with this easier method will ignore this possibility and the model learns to pull apart two representations (assume them different)  that are actually the same. Obviously, we don't want this to happen so I calculated the whole target matrix in a way that takes care of these edge cases. 2- Doing it the way I did, gave me a better understanding of what is happening in this loss function; so, I thought it would give you a better intuition as well! \nHere are some funtions to help us load train and valid dataloaders, our model and then train and evaluate our model on those. There's not much going on here; just simple training loop and utility functions \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9212041334045215
      ],
      "excerpt": "Here's a handy function to train our model. There's not much happening here; just loading the batches, feeding them to the model and stepping the optimizer and lr_scheduler. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8620007613560474
      ],
      "excerpt": "    for batch in tqdm_object: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "def valid_epoch(model, valid_loader): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8620007613560474
      ],
      "excerpt": "for batch in tqdm_object: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "    model.eval() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "        valid_loss = valid_epoch(model, valid_loader) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8158813823015015
      ],
      "excerpt": "Running the next cell start training the model. Put the kernel on GPU mode. Every epoch should take about 24 minutes on GPU (even one epoch is enough!). It can take one minute before training actually starts because we are going to encode all the captions once in the train and valid dataset, so please don't stop it! Every thing is working fine. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9515135159330008,
        0.9384952391875607
      ],
      "excerpt": "Okay! We are done with training the model. Now, we need to do inference which in our case will be giving the model a piece of text and want it to retrieve the most relevant images from an unseen validation (or test) set. \nThis function does the final task that we wished our model would be capable of: it gets the model, image_embeddings, and a text query. It will display the most relevant images from the validation set! Isn't it amazing? Let's see how it performs after all! \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "def find_matches(model, image_embeddings, query, image_filenames, n=9): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "        text_features = model.text_encoder( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "        text_embeddings = model.text_projection(text_features) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8103857512750977
      ],
      "excerpt": "matches = [image_filenames[idx] for idx in indices[::5]] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "find_matches(model,  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9647138564654325
      ],
      "excerpt": "             query=\"a group of people dancing in a party\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Simple implementation of OpenAI CLIP model in PyTorch.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/moein-shariatnia/OpenAI-CLIP/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 18,
      "date": "Mon, 27 Dec 2021 06:09:19 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/moein-shariatnia/OpenAI-CLIP/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "moein-shariatnia/OpenAI-CLIP",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/moein-shariatnia/OpenAI-CLIP/master/OpenAI%20CLIP%20Simple%20Implementation.ipynb",
      "https://raw.githubusercontent.com/moein-shariatnia/OpenAI-CLIP/master/.ipynb_checkpoints/OpenAI%20CLIP%20Simple%20Implementation-checkpoint.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.999746712887969,
        0.999746712887969
      ],
      "excerpt": ": !pip install timm \n: !pip install transformers \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8418426356390782
      ],
      "excerpt": "        self.name = name \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8401558704798054,
        0.9133368656218674,
        0.9133368656218674,
        0.9457175861910134
      ],
      "excerpt": "import os \nimport cv2 \nimport gc \nimport numpy as np \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674
      ],
      "excerpt": "import itertools \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9012248701992861
      ],
      "excerpt": "import albumentations as A \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674,
        0.8801854956928516
      ],
      "excerpt": "import timm \nfrom transformers import DistilBertModel, DistilBertConfig, DistilBertTokenizer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.812998327792582
      ],
      "excerpt": "        self.name = name \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8226440209499781
      ],
      "excerpt": "    return text \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8317858709583854
      ],
      "excerpt": "class CLIPDataset(torch.utils.data.Dataset): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8920132562356038
      ],
      "excerpt": "        file names  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8399520042202351
      ],
      "excerpt": "        list(captions), padding=True, truncation=True, max_length=CFG.max_length \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8003156573700313
      ],
      "excerpt": "def get_transforms(mode=\"train\"): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8566612722361563,
        0.8594142235991984
      ],
      "excerpt": "                A.Resize(CFG.size, CFG.size, always_apply=True), \n                A.Normalize(max_pixel_value=255.0, always_apply=True), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8566612722361563,
        0.8594142235991984
      ],
      "excerpt": "                A.Resize(CFG.size, CFG.size, always_apply=True), \n                A.Normalize(max_pixel_value=255.0, always_apply=True), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8039309350234671,
        0.8289669050403863
      ],
      "excerpt": "    output = self.model(input_ids=input_ids, attention_mask=attention_mask) \n    last_hidden_state = output.last_hidden_state \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9006659429912345
      ],
      "excerpt": "print(F.softmax(out, dim=-1)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8058250997315598
      ],
      "excerpt": "    dataframe = pd.read_csv(f\"{CFG.captions_path}/captions.csv\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8997243352845468,
        0.8737288687529231,
        0.8737288687529231,
        0.8312097168948895
      ],
      "excerpt": "    image_ids = np.arange(0, max_id) \n    np.random.seed(42) \n    valid_ids = np.random.choice( \n        image_ids, size=int(0.2 * len(image_ids)), replace=False \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8823041046019073
      ],
      "excerpt": "        shuffle=True if mode == \"train\" else False, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8414384768071093
      ],
      "excerpt": "    train_loader = build_loaders(train_df, tokenizer, mode=\"train\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8060372108626078,
        0.8517579059139088,
        0.8517579059139088,
        0.8060372108626078
      ],
      "excerpt": "params = [ \n    {\"params\": model.image_encoder.parameters(), \"lr\": CFG.image_encoder_lr}, \n    {\"params\": model.text_encoder.parameters(), \"lr\": CFG.text_encoder_lr}, \n    {\"params\": itertools.chain( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8418309537658001
      ],
      "excerpt": "    optimizer, mode=\"min\", patience=CFG.patience, factor=CFG.factor \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8694559215798696,
        0.8737873112808705
      ],
      "excerpt": "    print(f\"Epoch: {epoch + 1}\") \n    model.train() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8281404100800153,
        0.8099617344552934
      ],
      "excerpt": "_, axes = plt.subplots(3, 3, figsize=(10, 10)) \nfor match, ax in zip(matches, axes.flatten()): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8214220056347302,
        0.8292505407411963
      ],
      "excerpt": "    ax.imshow(image) \n    ax.axis(\"off\") \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/moein-shariatnia/OpenAI-CLIP/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2021 Moein Shariatnia\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Introduction",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "OpenAI-CLIP",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "moein-shariatnia",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/moein-shariatnia/OpenAI-CLIP/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 97,
      "date": "Mon, 27 Dec 2021 06:09:19 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "clip-model",
      "pytorch",
      "openai-clip",
      "paper",
      "dataset",
      "deep-learning",
      "nlp",
      "bert"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "In this function, we are loading the model that we saved after training, feeding it images in validation set and returning the image_embeddings with shape (valid_set_size, 256) and the model itself.\n\n\n```python\ndef get_image_embeddings(valid_df, model_path):\n    tokenizer = DistilBertTokenizer.from_pretrained(CFG.text_tokenizer)\n    valid_loader = build_loaders(valid_df, tokenizer, mode=\"valid\")\n    \n    model = CLIPModel().to(CFG.device)\n    model.load_state_dict(torch.load(model_path, map_location=CFG.device))\n    model.eval()\n    \n    valid_image_embeddings = []\n    with torch.no_grad():\n        for batch in tqdm(valid_loader):\n            image_features = model.image_encoder(batch[\"image\"].to(CFG.device))\n            image_embeddings = model.image_projection(image_features)\n            valid_image_embeddings.append(image_embeddings)\n    return model, torch.cat(valid_image_embeddings)\n```\n\n\n```python\n_, valid_df = make_train_valid_dfs()\nmodel, image_embeddings = get_image_embeddings(valid_df, \"best.pt\")\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}