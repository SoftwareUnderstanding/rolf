{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1911.02116",
      "https://arxiv.org/abs/1901.07291",
      "https://arxiv.org/abs/1911.02116",
      "https://arxiv.org/abs/1809.05053",
      "https://arxiv.org/abs/1907.05242",
      "https://arxiv.org/abs/1901.07291",
      "https://arxiv.org/abs/1901.07291",
      "https://arxiv.org/abs/1809.05053",
      "https://arxiv.org/abs/1804.07755",
      "https://arxiv.org/abs/1907.05242",
      "https://arxiv.org/abs/1911.02116",
      "https://arxiv.org/abs/1911.02116"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Please cite [[1]](https://arxiv.org/abs/1901.07291) if you found the resources in this repository useful.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{conneau2019unsupervised,\n  title={Unsupervised Cross-lingual Representation Learning at Scale},\n  author={Conneau, Alexis and Khandelwal, Kartikay and Goyal, Naman and Chaudhary, Vishrav and Wenzek, Guillaume and Guzm{\\'a}n, Francisco and Grave, Edouard and Ott, Myle and Zettlemoyer, Luke and Stoyanov, Veselin},\n  journal={arXiv preprint arXiv:1911.02116},\n  year={2019}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{lample2019large,\n  title={Large Memory Layers with Product Keys},\n  author={Lample, Guillaume and Sablayrolles, Alexandre and Ranzato, Marc'Aurelio and Denoyer, Ludovic and J{\\'e}gou, Herv{\\'e}},\n  journal={Advances in Neural Information Processing Systems (NeurIPS)},\n  year={2019}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{lample2018phrase,\n  title={Phrase-Based \\&amp; Neural Unsupervised Machine Translation},\n  author={Lample, Guillaume and Ott, Myle and Conneau, Alexis and Denoyer, Ludovic and Ranzato, Marc'Aurelio},\n  booktitle={Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing (EMNLP)},\n  year={2018}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{conneau2018xnli,\n  title={XNLI: Evaluating Cross-lingual Sentence Representations},\n  author={Conneau, Alexis and Lample, Guillaume and Rinott, Ruty and Williams, Adina and Bowman, Samuel R and Schwenk, Holger and Stoyanov, Veselin},\n  booktitle={Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing (EMNLP)},\n  year={2018}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{lample2019cross,\n  title={Cross-lingual Language Model Pretraining},\n  author={Lample, Guillaume and Conneau, Alexis},\n  journal={Advances in Neural Information Processing Systems (NeurIPS)},\n  year={2019}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9775314431563704
      ],
      "excerpt": "--stopping_criterion _valid_mlm_ppl,10  #: end experiment if stopping criterion does not improve \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8620667206319087
      ],
      "excerpt": "--validation_metrics 'valid_en-fr_mt_bleu'                    #: end experiment if stopping criterion does not improve \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9489066142739062
      ],
      "excerpt": "--mlm_steps 'ar,bg,de,el,en,es,fr,hi,ru,sw,th,tr,ur,vi,zh,en-ar,en-bg,en-de,en-el,en-es,en-fr,en-hi,en-ru,en-sw,en-th,en-tr,en-ur,en-vi,en-zh,ar-en,bg-en,de-en,el-en,es-en,fr-en,hi-en,ru-en,sw-en,th-en,tr-en,ur-en,vi-en,zh-en'  #: MLM objective \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9775314431563704
      ],
      "excerpt": "--stopping_criterion _valid_mlm_ppl,10   #: end experiment if stopping criterion does not improve \n",
      "technique": "Supervised classification"
    }
  ],
  "codeOfConduct": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/CODE_OF_CONDUCT.md",
    "technique": "File Exploration"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/duongkstn/XLM-duong",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing to this repo\nPull Requests\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\nComplete your CLA here: https://code.facebook.com/cla\nIssues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\nLicense\nBy contributing to this repo, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-07-17T08:11:42Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-07-17T17:12:07Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8258162392640921,
        0.9663445914232581,
        0.9106050150634234,
        0.831003045582074
      ],
      "excerpt": "NEW: Added XLM-R model. \nPyTorch original implementation of Cross-lingual Language Model Pretraining. Includes: \n- Monolingual language model pretraining (BERT) \n- Cross-lingual language model pretraining (XLM) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8048808751299412,
        0.9106050150634234,
        0.9106050150634234,
        0.9106050150634234,
        0.8368552713423018
      ],
      "excerpt": "XLM supports multi-GPU and multi-node training, and contains code for: \n- Language model pretraining: \n    - Causal Language Model (CLM) \n    - Masked Language Model (MLM) \n    - Translation Language Model (TLM) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9578407280041565,
        0.8988479831868573
      ],
      "excerpt": "We provide our pretrained XLM_en English model, trained with the MLM objective. \n| Languages        | Pretraining | Model                                                               | BPE codes                                                     | Vocabulary                                                     | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.953261308546604,
        0.9000287062856316,
        0.860059181823877
      ],
      "excerpt": "| English          |     MLM     | Model         | BPE codes      | Vocabulary    | \nwhich obtains better performance than BERT (see the GLUE benchmark) while trained on the same data: \nModel | Score | CoLA | SST2 | MRPC | STS-B | QQP | MNLI_m | MNLI_mm | QNLI | RTE | WNLI | AX \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9925867659663712
      ],
      "excerpt": "Our XLM PyTorch English model is trained on the same data than the pretrained BERT TensorFlow model (Wikipedia + Toronto Book Corpus). Our implementation does not use the next-sentence prediction task and has only 12 layers but higher capacity (665M parameters). Overall, our model achieves a better performance than the original BERT on all GLUE tasks (cf. table above for comparison). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8412340670255141
      ],
      "excerpt": "Train your BERT model (without the next-sentence prediction task) on the preprocessed data: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.880791801744531,
        0.8949978257428596
      ],
      "excerpt": "--bptt 256                                 #: sequences length  (streams of 256 tokens) \n--optimizer adam_inverse_sqrt,lr=0.00010,warmup_updates=30000,beta1=0.9,beta2=0.999,weight_decay=0.01,eps=0.000001  #: optimizer (training is quite sensitive to this parameter) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9326032599668047
      ],
      "excerpt": "--validation_metrics _valid_en_mlm_ppl     #: validation metric (when to save the best model) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8834178467840553
      ],
      "excerpt": "--word_pred '0.15'                         #: predict 15 percent of the words \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9027185158228377
      ],
      "excerpt": "Tips: Even when the validation perplexity plateaus, keep training your model. The larger the batch size the better (so using multiple GPUs will improve performance). Tuning the learning rate (e.g. [0.0001, 0.0002]) should help. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.992177621225506
      ],
      "excerpt": "and prepare the GLUE data using the codes and vocab: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.984961084175349
      ],
      "excerpt": "XLM-R is the new state-of-the-art XLM model. XLM-R shows the possibility of training one model for many languages while not sacrificing per-language performance. It is trained on 2.5 TB of CommonCrawl data, in 100 languages. You can load XLM-R from torch.hub (Pytorch >= 1.1): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": ": XLM-R model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9074320695774598
      ],
      "excerpt": "Apply sentence-piece-model (SPM) encoding to input text: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9519006820280287,
        0.8988479831868573
      ],
      "excerpt": "We provide large pretrained models for the 15 languages of XNLI, and two other models in 17 and 100 languages. \n|Languages|Pretraining|Tokenization                          |  Model                                                              | BPE codes                                                            | Vocabulary                                                            | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.908643295297291,
        0.908643295297291,
        0.9455503124760183,
        0.8780651949508376,
        0.8638354063140014
      ],
      "excerpt": "|15       |    MLM    |tokenize + lowercase + no accent + BPE| Model     | BPE codes (80k)  | Vocabulary (95k)  | \n|15       | MLM + TLM |tokenize + lowercase + no accent + BPE| Model | BPE codes (80k)  | Vocabulary (95k)  | \n|17       |    MLM    |tokenize + BPE                        | Model         | BPE codes (175k) | Vocabulary (200k) | \n|100      |    MLM    |tokenize + BPE                        | Model        | BPE codes (175k)| Vocabulary (200k)| \nwhich obtains better performance than mBERT on the XNLI cross-lingual classification task: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8747887357114169
      ],
      "excerpt": "The XLM-17 model includes these languages: en-fr-es-de-it-pt-nl-sv-pl-ru-ar-tr-zh-ja-ko-hi-vi \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.880791801744531,
        0.8949978257428596
      ],
      "excerpt": "--bptt 256                                 #: sequences length  (streams of 256 tokens) \n--optimizer adam,lr=0.0001                 #: optimizer (training is quite sensitive to this parameter) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9326032599668047
      ],
      "excerpt": "--validation_metrics _valid_mlm_ppl        #: validation metric (when to save the best model) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8077399053429527
      ],
      "excerpt": ":#: There are other parameters that are not specified here (see here). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9710507216536813,
        0.8502563336416888
      ],
      "excerpt": "Here the validation metrics _valid_mlm_ppl is the average of MLM perplexities. \nMLM+TLM model: If you want to add TLM on top of MLM, just add \"en-zh\" language pair in mlm_steps: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9474213802688065,
        0.9229081841852737
      ],
      "excerpt": "Tips: You can also pretrain your model with MLM-only, and then continue training with MLM+TLM with the --reload_model parameter. \nCross-lingual language model (XLM) provides a strong pretraining method for cross-lingual understanding (XLU) tasks. In what follows, we present applications to machine translation (unsupervised and supervised) and cross-lingual classification (XNLI). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9665667904958843,
        0.8988479831868573
      ],
      "excerpt": "The English-French, English-German and English-Romanian models are the ones we used in the paper for MT pretraining. They are trained with monolingual data only, with the MLM objective. If you use these models, you should use the same data preprocessing / BPE codes to preprocess your data. See the preprocessing commands in get-data-nmt.sh. \n| Languages        | Pretraining | Model                                                               | BPE codes                                                     | Vocabulary                                                     | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.953261308546604,
        0.953261308546604,
        0.953261308546604,
        0.8989853878011296
      ],
      "excerpt": "| English-French   |     MLM     | Model       | BPE codes    | Vocabulary    | \n| English-German   |     MLM     | Model       | BPE codes    | Vocabulary    | \n| English-Romanian |     MLM     | Model       | BPE codes    | Vocabulary    | \nThe following script will pretrain a model with the MLM objective for English and French: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9326032599668047
      ],
      "excerpt": "--validation_metrics _valid_mlm_ppl     #: validation metric (when to save the best model) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9444247802159654
      ],
      "excerpt": "If parallel data is available, the TLM objective can be used with --mlm_steps 'en-fr'. To train with both the MLM and TLM objective, you can use --mlm_steps 'en,fr,en-fr'. We provide models trained with the MLM objective for English-French, English-German and English-Romanian, along with the BPE codes and vocabulary used to preprocess the data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9254749566248652
      ],
      "excerpt": "--lambda_ae '0:1,100000:0.1,300000:0'                         #: scheduling on the auto-encoding coefficient \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8235303179780411
      ],
      "excerpt": "--stopping_criterion 'valid_en-fr_mt_bleu,10'                 #: validation metric (when to save the best model) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9547705678149248
      ],
      "excerpt": "The parameters of your Transformer model have to be identical to the ones used for pretraining (or you will have to slightly modify the code to only reload existing parameters). After 8 epochs on 8 GPUs, the above command should give you something like this: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9879747905287648,
        0.9665372253711737,
        0.8887142863232894
      ],
      "excerpt": "XLMs can be used to build cross-lingual classifiers. After fine-tuning an XLM model on an English training corpus for instance (e.g. of sentiment analysis, natural language inference), the model is still able to make accurate predictions at test time in other languages, for which there is very little or no training data. This approach is usually referred to as \"zero-shot cross-lingual classification\". \nApply BPE and binarize data similar to section 2. \nThe following script will pretrain a model with the MLM and TLM objectives for the 15 XNLI languages: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9326032599668047
      ],
      "excerpt": "--validation_metrics _valid_mlm_ppl      #: validation metric (when to save the best model) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9120136029599064
      ],
      "excerpt": "This script will apply BPE using the XNLI15 bpe codes, and binarize data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8613321570278383
      ],
      "excerpt": "You can now fine-tune the pretrained model on XNLI, or on one of the English GLUE tasks: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9049722602641417,
        0.9693319915289434,
        0.831003045582074
      ],
      "excerpt": "XLM also implements the Product-Key Memory layer (PKM) described in [4]. To add a memory in (for instance) the layers 4 and 7 of an encoder, you can simply provide --use_memory true --mem_enc_positions 4,7 as argument of train.py (and similarly for --mem_dec_positions and the decoder). All memory layer parameters can be found here. \nA minimalist and simple implementation of the PKM layer, that uses the same configuration as in the paper, can be found in this ipython notebook. \n[1] G. Lample *, A. Conneau * Cross-lingual Language Model Pretraining \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "XLM fork",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To download the data required for the unsupervised MT experiments, simply run:\n\n```\ngit clone https://github.com/facebookresearch/XLM.git\ncd XLM\n```\n\nAnd one of the three commands below:\n\n```\n./get-data-nmt.sh --src en --tgt fr\n./get-data-nmt.sh --src de --tgt en\n./get-data-nmt.sh --src en --tgt ro\n```\n\nfor English-French, German-English, or English-Romanian experiments. The script will successively:\n- download Moses scripts, download and compile fastBPE\n- download, extract, tokenize, apply BPE to monolingual and parallel test data\n- binarize all datasets\n\nIf you want to use our pretrained models, you need to have an exactly identical vocabulary. Since small differences can happen during preprocessing, we recommend that you use our BPE codes and vocabulary (although you should get something almost identical if you learn the codes and compute the vocabulary yourself). This will ensure that the vocabulary of your preprocessed data perfectly matches the one of our pretrained models, and that there is not a word / index mismatch. To do so, simply run:\n\n```\nwget https://dl.fbaipublicfiles.com/XLM/codes_enfr\nwget https://dl.fbaipublicfiles.com/XLM/vocab_enfr\n\n./get-data-nmt.sh --src en --tgt fr --reload_codes codes_enfr --reload_vocab vocab_enfr\n```\n\n`get-data-nmt.sh` contains a few parameters defined at the beginning of the file:\n- `N_MONO` number of monolingual sentences for each language (default 5000000)\n- `CODES` number of BPE codes (default 60000)\n- `N_THREADS` number of threads in data preprocessing (default 16)\n\nThe default number of monolingual data is 5M sentences, but using more monolingual data will significantly improve the quality of pretrained models. In practice, the models we release for MT are trained on all NewsCrawl data available, i.e. about 260M, 200M and 65M sentences for German, English and French respectively.\n\nThe script should output a data summary that contains the location of all files required to start experiments:\n\n```\n===== Data summary\nMonolingual training data:\n    en: ./data/processed/en-fr/train.en.pth\n    fr: ./data/processed/en-fr/train.fr.pth\nMonolingual validation data:\n    en: ./data/processed/en-fr/valid.en.pth\n    fr: ./data/processed/en-fr/valid.fr.pth\nMonolingual test data:\n    en: ./data/processed/en-fr/test.en.pth\n    fr: ./data/processed/en-fr/test.fr.pth\nParallel validation data:\n    en: ./data/processed/en-fr/valid.en-fr.en.pth\n    fr: ./data/processed/en-fr/valid.en-fr.fr.pth\nParallel test data:\n    en: ./data/processed/en-fr/test.en-fr.en.pth\n    fr: ./data/processed/en-fr/test.en-fr.fr.pth\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Follow a similar approach than in section 1 for the 15 languages:\n```\nfor lg in ar bg de el en es fr hi ru sw th tr ur vi zh; do\n  ./get-data-wiki.sh $lg\ndone\n```\n\nDownloading the Wikipedia dumps make take several hours. The *get-data-wiki.sh* script will automatically download Wikipedia dumps, extract raw sentences, clean and tokenize them. Note that in our experiments we also concatenated the [Toronto Book Corpus](http://yknzhu.wixsite.com/mbweb) to the English Wikipedia, but this dataset is no longer hosted.\n\nFor Chinese and Thai you will need a special tokenizer that you can install using the commands below. For all other languages, the data will be tokenized with Moses scripts.\n\n```\n#: Thai - https://github.com/PyThaiNLP/pythainlp\npip install pythainlp\n\n#: Chinese\ncd tools/\nwget https://nlp.stanford.edu/software/stanford-segmenter-2018-10-16.zip\nunzip stanford-segmenter-2018-10-16.zip\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "This script will download and tokenize the parallel data used for the TLM objective:\n\n```\nlg_pairs=\"ar-en bg-en de-en el-en en-es en-fr en-hi en-ru en-sw en-th en-tr en-ur en-vi en-zh\"\nfor lg_pair in $lg_pairs; do\n  ./get-data-para.sh $lg_pair\ndone\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "This script will download and tokenize the XNLI corpus:\n```\n./get-data-xnli.sh\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/duongkstn/XLM-duong/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Sat, 25 Dec 2021 08:41:25 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/duongkstn/XLM-duong/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "duongkstn/XLM-duong",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/generate-embeddings.ipynb",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/PKM-layer.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/prepare-glue.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/get-data-xnli.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/get-data-wiki.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/prepare-xnli.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/get-data-para.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/get-data-glue.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/install-tools.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/ngu.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/get-data-nmt-shop.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/tokenize.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/compile.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/run-regtests.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/scripts/ems/support/berkeley-process.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/scripts/ems/support/berkeley-train.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/scripts/ems/example/data/run.hierarchical.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/scripts/training/wrappers/tree-converter-mosesxml.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/scripts/training/wrappers/adam-suffix-array/suffix-array-extract.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/scripts/training/wrappers/adam-suffix-array/suffix-array-create.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/scripts/training/bilingual-lm/tag.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/scripts/other/blame-stat.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/scripts/analysis/weight-scan-summarize.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/mert/example/memcheck_extractor.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/mert/example/gzipped_test.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/mert/example/normal_test.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/mert/example/memcheck_mert.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/mert/example/smoke_test.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/cruise-control/test_all_new_commits.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/contrib/m4m/scripts/moses.extract-phrases.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/contrib/m4m/scripts/giza.txt2snt.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/contrib/m4m/scripts/moses.score-phrases.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/contrib/m4m/scripts/moses.phrase-extract.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/contrib/rpm/build_source.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/contrib/arrow-pipelines/bash/training_pipeline.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/contrib/debugging/auto-rollback.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/contrib/rt/compile.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/misc/pmoses/autogen.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/jam-files/engine/build.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/jam-files/engine/boehm_gc/ltmain.sh",
      "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/tools/mosesdecoder/jam-files/engine/boehm_gc/configure_atomic_ops.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**Monolingual data (MLM)**: Follow the same procedure as in [I.1](https://github.com/facebookresearch/XLM#1-preparing-the-data), and download multiple monolingual corpora, such as the Wikipedias.\n\nNote that we provide a [tokenizer script](https://github.com/facebookresearch/XLM/blob/master/tools/tokenize.sh):\n\n```\nlg=en\ncat my_file.$lg | ./tools/tokenize.sh $lg > my_tokenized_file.$lg &\n```\n\n**Parallel data (TLM)**: We provide download scripts for some language pairs in the *get-data-para.sh* script.\n```\n#: Download and tokenize parallel data in 'data/wiki/para/en-zh.{en,zh}.{train,valid,test}'\n./get-data-para.sh en-zh &\n```\n\nFor other language pairs, look at the [OPUS collection](http://opus.nlpl.eu/), and modify the get-data-para.sh script [here)(https://github.com/facebookresearch/XLM/blob/master/get-data-para.sh#L179-L180) to add your own language pair.\n\nNow create you training set for the BPE vocabulary, for instance by taking 100M sentences from each monolingua corpora.\n```\n#: build the training set for BPE tokenization (50k codes)\nOUTPATH=data/processed/XLM_en_zh/50k\nmkdir -p $OUTPATH\nshuf -r -n 10000000 data/wiki/train.en >> $OUTPATH/bpe.train\nshuf -r -n 10000000 data/wiki/train.zh >> $OUTPATH/bpe.train\n```\nAnd learn the 50k BPE code as in the previous section on the bpe.train file. Apply BPE tokenization on the monolingual and parallel corpora, and binarize everything using *preprocess.py*:\n\n```\npair=en-zh\n\nfor lg in $(echo $pair | sed -e 's/\\-/ /g'); do\n  for split in train valid test; do\n    $FASTBPE applybpe $OUTPATH/$pair.$lg.$split data/wiki/para/$pair.$lg.$split $OUTPATH/codes\n    python preprocess.py $OUTPATH/vocab $OUTPATH/$pair.$lg.$split\n  done\ndone\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "First, get the monolingual data (English Wikipedia, the [TBC corpus](https://yknzhu.wixsite.com/mbweb) is not hosted anymore).\n```\n#: Download and tokenize Wikipedia data in 'data/wiki/en.{train,valid,test}'\n#: Note: the tokenization includes lower-casing and accent-removal\n./get-data-wiki.sh en\n```\n\n[Install fastBPE](https://github.com/facebookresearch/XLM/tree/master/tools#fastbpe) and **learn BPE** vocabulary (with 30,000 codes here):\n```\nOUTPATH=data/processed/XLM_en/30k  #: path where processed files will be stored\nFASTBPE=tools/fastBPE/fast  #: path to the fastBPE tool\n\n#: create output path\nmkdir -p $OUTPATH\n\n#: learn bpe codes on the training set (or only use a subset of it)\n$FASTBPE learnbpe 30000 data/wiki/txt/en.train > $OUTPATH/codes\n```\n\nNow **apply BPE** tokenization to train/valid/test files:\n```\n$FASTBPE applybpe $OUTPATH/train.en data/wiki/txt/en.train $OUTPATH/codes &\n$FASTBPE applybpe $OUTPATH/valid.en data/wiki/txt/en.valid $OUTPATH/codes &\n$FASTBPE applybpe $OUTPATH/test.en data/wiki/txt/en.test $OUTPATH/codes &\n```\n\nand get the post-BPE vocabulary:\n```\ncat $OUTPATH/train.en | $FASTBPE getvocab - > $OUTPATH/vocab &\n```\n\n**Binarize the data** to limit the size of the data we load in memory:\n```\n#: This will create three files: $OUTPATH/{train,valid,test}.en.pth\n#: After that we're all set\npython preprocess.py $OUTPATH/vocab $OUTPATH/train.en &\npython preprocess.py $OUTPATH/vocab $OUTPATH/valid.en &\npython preprocess.py $OUTPATH/vocab $OUTPATH/test.en &\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.823221520042567
      ],
      "excerpt": "You can now use the pretrained model for cross-lingual classification. To download a model trained with the command above on the MLM-TLM objective, run: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8687564989248308
      ],
      "excerpt": "Model | Score | CoLA | SST2 | MRPC | STS-B | QQP | MNLI_m | MNLI_mm | QNLI | RTE | WNLI | AX \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8061551894964182
      ],
      "excerpt": "Train your BERT model (without the next-sentence prediction task) on the preprocessed data: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8101858378667569
      ],
      "excerpt": "--clm_steps ''                             #: CLM objective (for training GPT-2 models) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.812687570852783
      ],
      "excerpt": "--gelu_activation true                     #: GELU instead of ReLU \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.816257322486634
      ],
      "excerpt": "--epoch_size 300000                        #: number of sentences per epoch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8451189345317334
      ],
      "excerpt": "--fp16 true                                #: use fp16 training \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8393964931360071
      ],
      "excerpt": "--word_pred '0.15'                         #: predict 15 percent of the words \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python glue-xnli.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8399851383657487
      ],
      "excerpt": "--model_path mlm_en_2048.pth             #: model location \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8563418955757458
      ],
      "excerpt": "Apply sentence-piece-model (SPM) encoding to input text: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984,
        0.8380237256501376
      ],
      "excerpt": "all_layers = xlmr.extract_features(zh_tokens, return_all_hiddens=True) \nassert len(all_layers) == 25 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.811854372964597,
        0.86158766293465
      ],
      "excerpt": "XLM (MLM) | 15 | 83.2 | 76.3 | 74.2 | 68.5 | 71.9 | 63.4 \nXLM (MLM+TLM) | 15 | 85.0 | 78.9 | 77.8 | 73.1 | 76.5 | 67.3 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8396096014388166
      ],
      "excerpt": "XLM (MLM) | 100 | 83.7 | 76.6 | 73.6 | 67.4 | 71.7 | 62.9 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8101858378667569
      ],
      "excerpt": "--clm_steps ''                             #: CLM objective (for training GPT-2 models) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.812687570852783
      ],
      "excerpt": "--gelu_activation true                     #: GELU instead of ReLU \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.816257322486634
      ],
      "excerpt": "--epoch_size 300000                        #: number of sentences per epoch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8451189345317334
      ],
      "excerpt": "--fp16 true                                #: use fp16 training \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.812687570852783
      ],
      "excerpt": "--gelu_activation true                  #: GELU instead of ReLU \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.816257322486634
      ],
      "excerpt": "--epoch_size 200000                     #: number of sentences per epoch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.812687570852783
      ],
      "excerpt": "--gelu_activation true                                        #: GELU instead of ReLU \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.816257322486634
      ],
      "excerpt": "--epoch_size 200000                                           #: number of sentences per epoch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.812687570852783
      ],
      "excerpt": "--gelu_activation true                   #: GELU instead of ReLU \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.816257322486634
      ],
      "excerpt": "--epoch_size 200000                      #: number of sentences per epoch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python glue-xnli.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8399851383657487
      ],
      "excerpt": "--model_path mlm_tlm_xnli15_1024.pth     #: model location \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.816257322486634
      ],
      "excerpt": "--epoch_size 20000                       #: number of sentences per epoch \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/duongkstn/XLM-duong/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Roff",
      "C++",
      "C",
      "Perl",
      "Python",
      "Shell",
      "HTML",
      "Makefile",
      "Smalltalk",
      "JavaScript",
      "PHP",
      "M4",
      "Jupyter Notebook",
      "CSS",
      "Yacc",
      "Batchfile",
      "Emacs Lisp",
      "CMake",
      "Assembly",
      "Java",
      "Objective-C",
      "Logos",
      "Ruby",
      "NewLisp",
      "Raku",
      "SystemVerilog",
      "OCaml",
      "AngelScript",
      "nesC",
      "Starlark",
      "Slash",
      "E",
      "Forth"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/duongkstn/XLM-duong/gpus/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'The MIT License\\n\\nCopyright (c) 2019 Guillaume Lample,Timoth\\xc3\\xa9e Lacroix\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "XLM",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "XLM-duong",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "duongkstn",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/duongkstn/XLM-duong/blob/gpus/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Python 3\n- [NumPy](http://www.numpy.org/)\n- [PyTorch](http://pytorch.org/) (currently tested on version 0.4 and 1.0)\n- [fastBPE](https://github.com/facebookresearch/XLM/tree/master/tools#fastbpe) (generate and apply BPE codes)\n- [Moses](https://github.com/facebookresearch/XLM/tree/master/tools#tokenizers) (scripts to clean and tokenize text only - no installation required)\n- [Apex](https://github.com/nvidia/apex#quick-start) (for fp16 training)\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "XLM supports both multi-GPU and multi-node training, and was tested with up to 128 GPUs. To run an experiment with multiple GPUs on a single machine, simply replace `python train.py` in the commands above with:\n\n```\nexport NGPU=8; python -m torch.distributed.launch --nproc_per_node=$NGPU train.py\n```\n\nThe multi-node is automatically handled by SLURM.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 08:41:25 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Before running the scripts below, make sure you download the tokenizers from the [tools/](https://github.com/facebookresearch/XLM/tree/master/tools) directory.\n\n",
      "technique": "Header extraction"
    }
  ]
}