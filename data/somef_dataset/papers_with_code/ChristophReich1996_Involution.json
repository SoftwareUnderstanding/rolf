{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Unofficial **PyTorch** reimplementation of the paper [Involution: Inverting the Inherence of Convolution for Visual Recognition](https://arxiv.org/pdf/2103.06255.pdf)\nby Duo Li, Jie Hu, Changhu Wang et al. published at CVPR 2021.\n\n**This repository includes a pure PyTorch implementation of a 2D and 3D involution.**\n\nPlease note that the [official implementation](https://github.com/d-li14/involution) provides a more memory efficient\nCuPy implementation of the 2D involution. Additionally, [shikishima-TasakiLab](https://github.com/shikishima-TasakiLab) provides a fast and memory efficent [CUDA implementation](https://github.com/shikishima-TasakiLab/Involution-PyTorch) of the 2D Involution.\n\n",
      "technique": "Header extraction"
    }
  ],
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "````bibtex\n@inproceedings{Li2021,\n    author = {Li, Duo and Hu, Jie and Wang, Changhu and Li, Xiangtai and She, Qi and Zhu, Lei and Zhang, Tong and Chen, Qifeng},\n    title = {Involution: Inverting the Inherence of Convolution for Visual Recognition},\n    booktitle = {IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},\n    month = {June},\n    year = {2021}\n}\n````\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{Li2021,\n    author = {Li, Duo and Hu, Jie and Wang, Changhu and Li, Xiangtai and She, Qi and Zhu, Lei and Zhang, Tong and Chen, Qifeng},\n    title = {Involution: Inverting the Inherence of Convolution for Visual Recognition},\n    booktitle = {IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},\n    month = {June},\n    year = {2021}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ChristophReich1996/Involution",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-03-12T00:35:45Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-16T02:55:56Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "PyTorch reimplementation of the paper \"Involution: Inverting the Inherence of Convolution for Visual Recognition\" (2D and 3D Involution) [CVPR 2021].",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ChristophReich1996/Involution/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 19,
      "date": "Sat, 25 Dec 2021 00:40:39 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ChristophReich1996/Involution/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ChristophReich1996/Involution",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The 2D and 3D involution can be easily installed by using `pip`.\n````shell script\npip install git+https://github.com/ChristophReich1996/Involution\n````\n\n",
      "technique": "Header extraction"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ChristophReich1996/Involution/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2021 Christoph Reich\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Involution: Inverting the Inherence of Convolution for Visual Recognition",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Involution",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ChristophReich1996",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ChristophReich1996/Involution/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 87,
      "date": "Sat, 25 Dec 2021 00:40:39 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "involution",
      "deep-learning",
      "computer-vision",
      "machine-learning",
      "2d-involution",
      "visual-recognition",
      "pytorch",
      "3d-involution",
      "cvpr2021"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Additional examples, such as strided involutions or transposed convolution like involutions, can be found in the \n[example.py](examples.py) file.\n\nThe 2D involution can be used as a `nn.Module` as follows:\n````python\nimport torch\nfrom involution import Involution2d\n\ninvolution = Involution2d(in_channels=32, out_channels=64)\noutput = involution(torch.rand(1, 32, 128, 128))\n````\n\nThe 2D involution takes the following parameters.\n\n| Parameter | Description | Type |\n| ------------- | ------------- | ------------- |\n| in_channels | Number of input channels | int |\n| out_channels | Number of output channels | int |\n| sigma_mapping | Non-linear mapping as introduced in the paper. If none BN + ReLU is utilized (default=None) | Optional[nn.Module] |\n| kernel_size | Kernel size to be used (default=(7, 7)) | Union[int, Tuple[int, int]] |\n| stride | Stride factor to be utilized (default=(1, 1)) | Union[int, Tuple[int, int]] |\n| groups | Number of groups to be employed (default=1) | int |\n| reduce_ratio | Reduce ration of involution channels (default=1) | int |\n| dilation | Dilation in unfold to be employed (default=(1, 1)) | Union[int, Tuple[int, int]] |\n| padding | Padding to be used in unfold operation (default=(3, 3)) | Union[int, Tuple[int, int]] |\n| bias | If true bias is utilized in each convolution layer (default=False) | bool |\n| **kwargs | Unused additional key word arguments | Any |\n\nThe 3D involution can be used as a `nn.Module` as follows:\n````python\nimport torch\nfrom involution import Involution3d\n\ninvolution = Involution3d(in_channels=8, out_channels=16)\noutput = involution(torch.rand(1, 8, 32, 32, 32))\n````\n\nThe 3D involution takes the following parameters.\n\n| Parameter | Description | Type |\n| ------------- | ------------- | ------------- |\n| in_channels | Number of input channels | int |\n| out_channels | Number of output channels | int |\n| sigma_mapping | Non-linear mapping as introduced in the paper. If none BN + ReLU is utilized | Optional[nn.Module] |\n| kernel_size | Kernel size to be used (default=(7, 7, 7)) | Union[int, Tuple[int, int, int]] |\n| stride | Stride factor to be utilized (default=(1, 1, 1)) | Union[int, Tuple[int, int, int]] |\n| groups | Number of groups to be employed (default=1) | int |\n| reduce_ratio | Reduce ration of involution channels (default=1) | int |\n| dilation | Dilation in unfold to be employed (default=(1, 1, 1)) | Union[int, Tuple[int, int, int]] |\n| padding | Padding to be used in unfold operation (default=(3, 3, 3)) | Union[int, Tuple[int, int, int]] |\n| bias | If true bias is utilized in each convolution layer (default=False) | bool |\n| **kwargs | Unused additional key word arguments | Any |\n\n\n",
      "technique": "Header extraction"
    }
  ]
}