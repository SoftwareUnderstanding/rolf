{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1812.05905",
      "https://arxiv.org/abs/2012.10504",
      "https://arxiv.org/abs/2012.10504"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- [V\u00e1zquez-Canteli, J.R., Dey, S., Henze, G., and Nagy, Z.,  \"CityLearn: Standardizing Research in Multi-Agent Reinforcement Learning for Demand Response and Urban Energy Management\", 2020.](https://arxiv.org/abs/2012.10504)\n- [V\u00e1zquez-Canteli, J.R., K\u00e4mpf, J., Henze, G., and Nagy, Z., \"CityLearn v1.0: An OpenAI Gym Environment for Demand Response with Deep Reinforcement Learning\", Proceedings of the 6th ACM International Conference, ACM New York p. 356-357, New York, 2019](https://dl.acm.org/citation.cfm?id=3360998)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8356013927728488,
        0.8924911576939673,
        0.9692507790140911
      ],
      "excerpt": "  - net_electric_consumption: district net electricity consumption \n  - net_electric_consumption_no_storage: district net electricity consumption if there were no cooling storage, heating storage and DHW storage \n  - net_electric_consumption_no_pv_no_storage: district net electricity consumption if there were no cooling storage, heating storage, DHW storage and PV generation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9566725103450877
      ],
      "excerpt": "  - net_electric_consumption_no_pv_no_storage: building net electricity consumption if there were no cooling, heating and DHW storage and PV generation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9243188970772274
      ],
      "excerpt": "month: 1 (January) through 12 (December) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "rh_out_pred_24h: outdoor relative humidity predicted 24h ahead (accuracy: +-10%) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "diffuse_solar_rad_pred_24h: diffuse solar radiation predicted 24h ahead (accuracy: +-10%) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9749893391642742
      ],
      "excerpt": "V\u00e1zquez-Canteli, J.R., Dey, S., Henze, G., and Nagy, Z.,  \"CityLearn: Standardizing Research in Multi-Agent Reinforcement Learning for Demand Response and Urban Energy Management\", 2020. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.933119419779785
      ],
      "excerpt": "V\u00e1zquez-Canteli, J.R., and Nagy, Z., \u201cReinforcement Learning for Demand Response: A Review of algorithms and modeling techniques\u201d, Applied Energy 235, 1072-1089, 2019. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/intelligent-environments-lab/CityLearn",
    "technique": "GitHub API"
  },
  "contact": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Email: citylearn@utexas.edu\n- [Jos\u00e9 R. V\u00e1zquez-Canteli](https://www.researchgate.net/profile/Jose_Vazquez-Canteli2), PhD Candidate at The University of Texas at Austin, Department of Civil, Architectural, and Environmental Engineering. [Intelligent Environments Laboratory (IEL)](https://nagy.caee.utexas.edu/). \n- [Dr. Zoltan Nagy](https://nagy.caee.utexas.edu/team/prof-zoltan-nagy-phd/), Assistant Professor at The University of Texas at Austin, Department of Civil, Architectural, and Environmental Engineering.\n\n",
      "technique": "Header extraction"
    }
  ],
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-06-30T02:41:48Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-16T04:17:14Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Districts and cities have periods of high demand for electricity, which raise electricity prices and the overall cost of the power distribution networks. Flattening, smoothening, and reducing the overall curve of electrical demand helps reduce operational and capital costs of electricity generation, transmission, and distribution networks. Demand response is the coordination of electricity consuming agents (i.e. buildings) in order to reshape the overall curve of electrical demand.\nCityLearn allows the easy implementation of reinforcement learning agents in a multi-agent setting to reshape their aggregated curve of electrical demand by controlling the storage of energy by every agent. Currently, CityLearn allows controlling the storage of domestic hot water (DHW), and chilled water (for sensible cooling and dehumidification). CityLearn also includes models of air-to-water heat pumps, electric heaters, solar photovoltaic arrays, and the pre-computed energy loads of the buildings, which include space cooling, dehumidification, appliances, DHW, and solar generation.\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9962969592096163
      ],
      "excerpt": "CityLearn is an open source OpenAI Gym environment for the implementation of Multi-Agent Reinforcement Learning (RL) for building energy coordination and demand response in cities. Its objective is to facilitiate and standardize the evaluation of RL agents such that different algorithms can be easily compared with each other. Try it out using our example in Google Colab! \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8607365086447996
      ],
      "excerpt": "energy_models.py: Contains the classes Building, HeatPump, EnergyStorage, and Battery which are called by the CityLearn class. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8484674482882888,
        0.8039769342892616,
        0.822545939506842
      ],
      "excerpt": "example_rbc.ipynb: jupyter lab file. Example of the implementation of a manually optimized Rule-based controller (RBC) that can be used for comparison \nexample_sac.ipynb: jupyter lab file. Example of the implementation of a soft-actor-critic (SAC) controller that can be used for comparison \nexample_marlisa.ipynb: jupyter lab file. Example of the implementation of multi-agent reinforcement learning controller with iterative sequential  action selection (MARLISA) that can be used for comparison. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8776749616055148
      ],
      "excerpt": "This class of type OpenAI Gym Environment contains all the buildings and their subclasses. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9009747865014796
      ],
      "excerpt": "  - building_attributes: name of the file containing the charactieristics of the energy supply and storage systems of the buildings \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9780336400526016
      ],
      "excerpt": "  - building_ids: list with the building IDs of the buildings to be simulated \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8774123046443799,
        0.9543073245621245
      ],
      "excerpt": "  - cost_function: list with the cost functions to be minimized. \n  - central_agent: allows using CityLearn in central agent mode or in decentralized agents mode. If True, CityLearn returns a list of observations, a single reward, and takes a list of actions. If False, CityLearn will allow the easy implementation of decentralized RL agents by returning a list of lists (as many as the number of building) of states, a list of rewards (one reward for each building), and will take a list of lists of actions (one for every building). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9429304562684405,
        0.9429304562684405,
        0.9429304562684405,
        0.9969816763549912,
        0.9969816763549912,
        0.9969816763549912
      ],
      "excerpt": "  - electric_consumption_dhw_storage: electricity consumed in the district to increase DHW energy stored (when > 0) and electricity that the decrease in DHW energy stored saves from consuming in the district (when < 0). \n  - electric_consumption_cooling_storage: electricity consumed in the district to increase cooling energy stored (when > 0) and electricity that the decrease in cooling energy stored saves from consuming in the district (when < 0). \n  - electric_consumption_heating_storage: electricity consumed in the district to increase heating energy stored (when > 0) and electricity that the decrease in heating energy stored saves from consuming in the district (when < 0). \n  - electric_consumption_dhw: electricity consumed to satisfy the DHW demand of the district. \n  - electric_consumption_cooling: electricity consumed to satisfy the cooling demand of the district. \n  - electric_consumption_heating: electricity consumed to satisfy the heating demand of the district. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8713331625794014
      ],
      "excerpt": "  - electric_generation: electricity generated in the district. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8255331588811408,
        0.887701312692086,
        0.9159077664725914,
        0.9895061604039562,
        0.9579430102017211
      ],
      "excerpt": "  - get_state_action_spaces(): returns state-action spaces for all the buildings \n  - next_hour(): advances simulation to the next time-step \n  - get_building_information(): returns attributes of the buildings that can be used by the RL agents (i.e. to implement building-specific RL agents based on their attributes, or control buildings with correlated demand profiles by the same agent) \n  - get_baseline_cost(): returns the costs of a Rule-based controller (RBC), which is used to divide the final cost by it. \n  - cost(): returns the normlized cost of the enviornment after it has been simulated. cost < 1 when the controller's performance is better than the RBC. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9270251002077048,
        0.82511309786935
      ],
      "excerpt": "  - step(): advances simulation to the next time-step and takes an action based on the current state \n  - _get_ob(): returns all the states \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9785705823267529,
        0.8325034027326664
      ],
      "excerpt": "The DHW, cooling and heating demands of the buildings have been pre-computed and obtained from EnergyPlus. The DHW and, cooling and heating supply systems (HVAC system) are sized such that the DHW, cooling and heating demands are always satisfied. CityLearn automatically sets constraints to the actions from the controllers to guarantee that the DHW, cooling and heating demands are satisfied, and that the building does not receive from the storage units more energy than it needs.  \nThe file building_attributes.json contains the attributes of each building, which can be modified. We do not advise to modify the attributes Building -> HeatPump -> nominal_power and Building -> ElectricHeater -> nominal_power from their default value \"autosize\", as they guarantee that the DHW, cooling and heating demand are always satisfied. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9305595802008404,
        0.9213083527447093,
        0.9717937620521172
      ],
      "excerpt": "  - cooling_demand_building: demand for cooling energy to cool down and dehumidify the building. \n  - heating_demand_building: demand for heating energy to heat up the building. \n  - dhw_demand_building: demand for heat to supply the building with domestic hot water (DHW). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8134572810128794,
        0.9843395223096139,
        0.9843395223096139
      ],
      "excerpt": "  - electric_generation: electricity generated by the solar panels. \n  - electric_consumption_cooling: electricity consumed to satisfy the cooling demand of the building. \n  - electric_consumption_heating: electricity consumed to satisfy the heating demand of the building. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9843395223096139
      ],
      "excerpt": "  - electric_consumption_dhw: electricity consumed to satisfy the DHW demand of the building. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9498149426119001,
        0.9114767787541995,
        0.9114767787541995,
        0.954670016785484,
        0.954670016785484,
        0.9921711657731347,
        0.9921711657731347,
        0.9114767787541995,
        0.9114767787541995,
        0.954670016785484,
        0.9921711657731347
      ],
      "excerpt": "  - hvac_device_to_building: cooling and heating energy supplied by the HVAC device (i.e. heat pump) to the building \n  - cooling_storage_to_building: cooling energy supplied by the cooling storage device to the building \n  - heating_storage_to_building: heating energy supplied by the heating storage device to the building \n  - hvac_device_to_cooling_storage: cooling energy supplied by the HVAC device to the cooling storage device \n  - hvac_device_to_heating_storage: heatinf energy supplied by the HVAC device to the heating storage device \n  - cooling_storage_soc: state of charge of the cooling storage device \n  - heating_storage_soc: state of charge of the heating storage device \n  - dhw_heating_device_to_building: DHW heating energy supplied by the heating device to the building \n  - dhw_storage_to_building: DHW heating energy supplied by the DHW storage device to the building \n  - dhw_heating_device_to_storage: DHW heating energy supplied by the heating device to the DHW storage device \n  - dhw_storage_soc: state of charge of the DHW storage device \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8951772298258487,
        0.9899111808306535,
        0.8773543391532245,
        0.9892898546960383,
        0.9536121657313833,
        0.9968115369824893,
        0.9938834817350185
      ],
      "excerpt": "set_state_space() and set_action_space() set the state-action space of each building \nset_storage_dhw(), set_storage_cooling() and set_storage_heating() set the state of charge of the EnergyStorage device to the specified value and within the physical constraints of the system. Returns the total electricity consumption of the building for dhw heating, space heating and space cooling respectively at that time-step. \nget_non_shiftable_load(), get_solar_power(), get_dhw_electric_demand(), get_cooling_electric_demand() and get_heating_electric_demand() get the different types of electricity demand and generation. \nIts efficiency is given by the coefficient of performance (COP), which is calculated as a function of the outdoor air temperature and of the following parameters: \n-eta_tech: technical efficiency of the heat pump \n-T_target: target temperature. Conceptually, it is  equal to the logarithmic mean of the temperature of the supply water of the storage device and the temperature of the water returning from the building. Here it is assumed to be constant and defined by the user in the building_attributes.json file.  For cooling, values between 7C and 10C are reasonable. \nAny amount of cooling demand of the building that isn't satisfied by the EnergyStorage device is automatically supplied by the HeatPump directly to the Building, guaranteeing that the cooling and heating demands are always satisfied. The HeatPump is more efficient (has a higher COP) if the outdoor air temperature is lower, and less efficient (lower COP) when the outdoor temperature is higher (typically during the day time). On the other hand, the electricity demand is typically higher during the daytime and lower at night. cooling_energy_generated = COP*electricity_consumed, COP &gt; 1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.973681859671528,
        0.973681859671528,
        0.9394449182630016,
        0.9394449182630016
      ],
      "excerpt": "  - cop_heating: coefficient of performance for heating supply \n  - cop_cooling:  coefficient of performance for cooling supply \n  - electrical_consumption_cooling: electricity consumed for cooling supply (kWh) \n  - electrical_consumption_heating: electricity consumed for heating supply (kWh) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9551519646452168,
        0.9585463540946615,
        0.9749379735550705
      ],
      "excerpt": "  - get_max_cooling_power() and get_max_heating_power() compute the maximum amount of heating or cooling that the heat pump can provide based on its nominal power of the compressor and its COP.  \n  - get_electric_consumption_cooling() and get_electric_consumption_heating() return the amount of electricity consumed by the heat pump for a given amount of supplied heating or cooling energy. \nStorage devices allow heat pumps to store energy that can be later released into the building. Typically every building will have its own storage device, but CityLearn also allows defining a single instance of the EnergyStorage for multiple instances of the class Building, therefore having a group of buildings sharing a same energy storage device. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9482136550438316
      ],
      "excerpt": "soc: state of charge (kWh) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.987991790263943,
        0.9414247291720518
      ],
      "excerpt": "charge() increases (+) or decreases (-) of the amount of energy stored. The input is the amount of energy as a ratio of the total capacity of the storage device (can vary from -1 to 1). Outputs the energy balance of the storage device. \nThe battery class allows the building to store electricity and release it at an appropriate time to supply the electrical demand of the building or the whole district's power grid. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8135551788611354
      ],
      "excerpt": "  - capacity_loss_coef: rate at which the capacity of the battery decreases after each charge-discharge cycle \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.964993706892596
      ],
      "excerpt": "  - capacity_power_curve: battery maximum power as a function of the current state of charge of the battery \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9482136550438316
      ],
      "excerpt": "  - soc: state of charge (kWh) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.987991790263943,
        0.821795819675019
      ],
      "excerpt": "    - charge() increases (+) or decreases (-) of the amount of energy stored. The input is the amount of energy as a ratio of the total capacity of the storage device (can vary from -1 to 1). Outputs the energy balance of the storage device. \nThe file buildings_state_action_space.json contains all the states and action variables that the buildings can possibly return: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9173594810438697,
        0.821266511304669
      ],
      "excerpt": "hour: hour of day (from 1 to 24). \ndaylight_savings_status: indicates if the building is under daylight savings period (0 to 1). 0 indicates that the building has not changed its electricity consumption profiles due to daylight savings, while 1 indicates the period in which the building may have been affected. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9641028057568586
      ],
      "excerpt": "avg_unmet_setpoint: average difference between the indoor temperatures and the cooling temperature setpoints in the different zones of the building in Celcius degrees. sum((t_in - t_setpoint).clip(min=0) * zone_volumes)/total_volume \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8880245875252756,
        0.8472511730687479,
        0.9808769918824836,
        0.9808769918824836,
        0.9791835612672276,
        0.941758467320486
      ],
      "excerpt": "non_shiftable_load: electricity currently consumed by electrical appliances in kW. \nsolar_gen: electricity currently being generated by photovoltaic panels in kWh. \ncooling_storage_soc: state of the charge (SOC) of the cooling storage device. From 0 (no energy stored) to 1 (at full capacity). \nheating_storage_soc: state of the charge (SOC) of the heating storage device. From 0 (no energy stored) to 1 (at full capacity). \ndhw_storage_soc: state of the charge (SOC) of the domestic hot water (DHW) storage device. From 0 (no energy stored) to 1 (at full capacity). \nnet_electricity_consumption: net electricity consumption of the building (including all energy systems) in the current time step. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.990788014335157,
        0.9423345773045843,
        0.9423345773045843,
        0.9489987300406266,
        0.9530163869571534,
        0.8673025988163278
      ],
      "excerpt": "C determines the capacity of the storage device and is defined as a multiple of the maximum thermal energy consumption by the building. \n- cooling_storage: increase (action > 0) or decrease (action < 0) of the amount of cooling energy stored in the cooling storage device. -1/C <= action <= 1/C (attempts to decrease or increase the cooling energy stored in the storage device by an amount equal to the action times the storage device's maximum capacity). In order to decrease the energy stored in the device (action < 0), the energy must be released into the building's cooling system. Therefore, the state of charge will not decrease proportionally to the action taken if the demand for cooling of the building is lower than the action times the maximum capacity of the cooling storage device. \n- heating_storage: increase (action > 0) or decrease (action < 0) of the amount of heating energy stored in the heating storage device. -1/C <= action <= 1/C (attempts to decrease or increase the heating energy stored in the storage device by an amount equal to the action times the storage device's maximum capacity). In order to decrease the energy stored in the device (action < 0), the energy must be released into the building's heating system. Therefore, the state of charge will not decrease proportionally to the action taken if the demand for heating of the building is lower than the action times the maximum capacity of the heating storage device. \n- dhw_storage: increase (action > 0) or decrease (action < 0) of the amount of DHW stored in the DHW storage device. -1/C <= action <= 1/C (attempts to decrease or increase the DHW stored in the storage device by an amount equivalent to action times its maximum capacity). In order to decrease the energy stored in the device, the energy must be released into the building. Therefore, the state of charge will not decrease proportionally to the action taken if the demand for DHW of the building is lower than the action times the maximum capacity of the DHW storage device. \nNote that the action of the user-implemented controller can be bounded between -1/C and 1/C because the capacity of the storage unit, C, is defined as a multiple of the maximum thermal energy consumption by the building. For instance, if C_cooling = 3 and the peak cooling energy consumption of the building during the simulation is 20 kWh, then the storage unit will have a total capacity of 60 kWh. \nelectrical_storage: increase (action > 0) or decrease (action < 0) of the amount of electricity stored in the battery. -1.0 <= action <= 1.0 (attempts to decrease or increase the electricity stored in the battery by an amount equivalent to action times its maximum capacity). In order to decrease the energy stored in the device, the energy must be released into whole micro-grid. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9538285387433104,
        0.9766960420503168,
        0.9450106319200593
      ],
      "excerpt": "reward_function_ma: it is a multi-agent reward function that takes the total net electricity consumption of each building (< 0 if generation is higher than demand), and the carbon intensity at a given time and returns a list with as many rewards as the number of agents. It can also be initialized with some information about the number of buildings and some information about them as provided by the variable building_info \nenv.cost() is returns the performance metrics of the environment, which the RL controller must minimize. There are multiple metrics available, which are all defined as a function of the total non-negative net electricity consumption of the whole neighborhood: \n1- ramping: sum(|e(t)-e(t-1)|), where e is the net non-negative electricity consumption every time-step. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9365422430194558,
        0.9963241164354253,
        0.9566507169022076
      ],
      "excerpt": "7- quadratic: sum(e^2), where e is the net non-negative electricity consumption every time-step. (Not used in The CityLearn Challenge). \nAll these metrics are divided by the metrics of a reference rule-based controller (RBC). Therefore, any metric > 1 is worse than that of the RBC, and < 1 means that the controller is minimizing that metric better than the RBC. Since the metrics are normalized using the RBC results, it is possible to have results in which for example average_daily_peak > peak_demand. This just means that the RL controller minimized the total peak demand more than it minimized the average daily peak demand with respect to the RBC. \nOnly single-zone buildings are supported hence, simultaneous space cooling and heating loads are not allowed. Therefore, at any given timestep, the product of  Cooling Load [kWh] and Heating Load [kWh] must equal 0. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9109225108359444
      ],
      "excerpt": "Total - Average of the metrics 1, 2, 3, 4, 5, and 6 for the full simulated period (4 years) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9671997278784812,
        0.8278468274348848
      ],
      "excerpt": "Coordination Score - Average of the metrics 1, 2, 3, and 4 for the full simulated period (4 years) \nCoordination Score Last Year - Average of the metrics 1, 2, 3, and 4 for the last year of the simulation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9869509932149734,
        0.9938815980012811,
        0.9970764478594258,
        0.8487794937001403,
        0.9857367889600285,
        0.9029798790684062,
        0.8169633355193939,
        0.9077620040590453
      ],
      "excerpt": "building_loader(demand_file, weather_file, buildings) receives a dictionary with all the building instances and their respectives IDs, and loads them with the data of heating and cooling loads from the simulations. \nauto_size(buildings, t_target_heating, t_target_cooling) automatically sizes the heat pumps and the storage devices. It assumes fixed target temperatures of the heat pump for heating and cooling, which combines with weather data to estimate their hourly COP for the simulated period. The HeatPump is sized such that it will always be able to fully satisfy the heating and cooling demands of the building. This function also sizes the EnergyStorage devices, setting their capacity as 3 times the maximum hourly cooling and heating demand in the simulated period. \nA good control policy for cooling and heating is trivial, and consists on storing cooling and heating energy during the night (when the cooling and heating demand of the building is low and the COP of the heat pump is higher), and releasing the stored cooling and heating energy into the building during the day (high demand for cooling and heating and low COP). \nIf controlled independently of each other and without coordination or sharing any information, the buildings will tend to consume more electricity simultaneously, which may not be optimal if the objective is peak reduction and load flattening. \nCoordinate multiple RL agents or a single centralized agent to control all the buildings. The agents may share certain information with each other. The objective is to reduce the cost function by smoothing, reducing, and flattening the total net demand for electricity in the whole district. Electric heaters supplies the heating energy for the DHW system (no air heating), air-to-water heat pumps provide cooling energy for the building, and batteries allow storing electricity. Check out our CityLearn Challenge \nV\u00e1zquez-Canteli, J.R., Dey, S., Henze, G., and Nagy, Z.,  \"CityLearn: Standardizing Research in Multi-Agent Reinforcement Learning for Demand Response and Urban Energy Management\", 2020. \nV\u00e1zquez-Canteli, J.R., G. Henze, and Nagy, Z., \u201cMARLISA: Multi-Agent Reinforcement Learning with Iterative Sequential Action Selection for Load Shaping of Grid-Interactive Connected Buildings\u201d, BuildSys, 2020 \nV\u00e1zquez-Canteli, J.R., and Nagy, Z., \u201cReinforcement Learning for Demand Response: A Review of algorithms and modeling techniques\u201d, Applied Energy 235, 1072-1089, 2019. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9840128446011738,
        0.9667932058391125,
        0.9417060947796289,
        0.9805536799007405
      ],
      "excerpt": "It seems that the building heating_by_device is supplied by electric heater exclusively and cooling_by_device  by heat pump exclusively. So it is correct to assume that the heat pump does not provide heating at all? \nIn the models provided for the challenge, the heat pump only provides cooling, and the DHW is only provided by the electric heater. Not all buildings have DHW demand and the electric heater supplying it, but all the buildings do have a heat pump supplying cooling energy. \nDo we have limits on storage SOC (Minimum & maximum amount of thermal energy at any given time step)? From cooling_storage_soc it seems that it can be 0 or 1 (full capacity). \nYes, it can be 0 (empty) and 1 (full capacity), or any value in between at any time-steps. The cooling or DHW demands of the building and the power of the energy supply devices also limit the additional energy that can be stored or released on any of theses storage devices at any given time-step. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.985028470686358
      ],
      "excerpt": "We provide as states those variables that we could easily obtained in a real-world implementation. You can only use as states those variables we have provided as such, in the file buildings_state_action_space.json. However, instead of using the predicted values of generation, cooling or heating, you can use other variables as states that are good predictors of those variables. For example, the solar irradiation is a good predictor of the solar generation, the outdoor temperature (and the relative humidity to some extent) are also good predictors of the demand for cooling, and the current electricity consumption from non-shiftable loads may also be a decent predictor of the electricity consumption in the next hour.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9394686466334432
      ],
      "excerpt": "Is electric_generation the net solar_gen? \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Official reinforcement learning environment for demand response and load shaping",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/intelligent-environments-lab/CityLearn/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 82,
      "date": "Sat, 25 Dec 2021 18:28:18 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/intelligent-environments-lab/CityLearn/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "intelligent-environments-lab/CityLearn",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/intelligent-environments-lab/CityLearn/master/main.ipynb",
      "https://raw.githubusercontent.com/intelligent-environments-lab/CityLearn/master/examples/example_marlisa.ipynb",
      "https://raw.githubusercontent.com/intelligent-environments-lab/CityLearn/master/examples/example_sac.ipynb",
      "https://raw.githubusercontent.com/intelligent-environments-lab/CityLearn/master/examples/example_rbc.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8448944309153953
      ],
      "excerpt": "All the costs are normalized by the costs a rule-based controller would have. Therefore, the different costs are normalized by different values and that is why the average_daily_peak cost may be higher than the peak_demand cost. To see the factors by which they are being normalized, you can run env.cost_rbc after the environment has run through at least one episode. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8983753361203861
      ],
      "excerpt": "It's also worth mentioning that within your controller you can do any feature engineering you want using these observed variables that CityLearn returns. You need to use these observed variables from the  buildings_state_action_space.json only, but you can process them as you wish within your controller. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9336801098518991,
        0.9336801098518991,
        0.9336801098518991
      ],
      "excerpt": "    \u251c\u2500\u2500 marlisa.py \n    \u251c\u2500\u2500 rbc.py \n    \u2514\u2500\u2500 sac.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": "    \u2514\u2500\u2500 rl.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.887348249053625
      ],
      "excerpt": "    \u251c\u2500\u2500 agent.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": "    \u2514\u2500\u2500 reward_function.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9417633550640381
      ],
      "excerpt": "main.py: Copy of main.ipynb as a .py  file. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.825333224239483
      ],
      "excerpt": "- CityLearn input attributes \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.82121615208816
      ],
      "excerpt": "  - weather_file: name of the file containing the weather variables \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8012410768552026
      ],
      "excerpt": "  - power_efficiency_curve: battery efficiency as a function of the power input or output \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8091566192485801,
        0.8091566192485801
      ],
      "excerpt": "5- net_electricity_consumption: total amount of electricity consumed. \n6- carbon_emissions: total amount of carbon emissions. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/intelligent-environments-lab/CityLearn/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\r\\n\\r\\nCopyright (c) 2020 Jose Ramon Vazquez-Canteli, Intelligent Environments Laboratory\\r\\n\\r\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\r\\nof this software and associated documentation files (the \"Software\"), to deal\\r\\nin the Software without restriction, including without limitation the rights\\r\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\r\\ncopies of the Software, and to permit persons to whom the Software is\\r\\nfurnished to do so, subject to the following conditions:\\r\\n\\r\\nThe above copyright notice and this permission notice shall be included in all\\r\\ncopies or substantial portions of the Software.\\r\\n\\r\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\nSOFTWARE.\\r\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "CityLearn",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "CityLearn",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "intelligent-environments-lab",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/intelligent-environments-lab/CityLearn/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "kingsleynweye",
        "body": "## What's Changed\r\n* Space heating by @kingsleynweye in https://github.com/intelligent-environments-lab/CityLearn/pull/9\r\n* See updated [README.md](https://github.com/intelligent-environments-lab/CityLearn/tree/v1.1.0/README.md)\r\n\r\n## New Contributors\r\n* @kingsleynweye made their first contribution in https://github.com/intelligent-environments-lab/CityLearn/pull/9\r\n\r\n**Full Changelog**: https://github.com/intelligent-environments-lab/CityLearn/compare/v1.0.0...v1.1.0",
        "dateCreated": "2021-11-30T22:46:01Z",
        "datePublished": "2021-11-30T22:51:07Z",
        "html_url": "https://github.com/intelligent-environments-lab/CityLearn/releases/tag/v1.1.0",
        "name": "v1.1.0",
        "tag_name": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/intelligent-environments-lab/CityLearn/tarball/v1.1.0",
        "url": "https://api.github.com/repos/intelligent-environments-lab/CityLearn/releases/54365588",
        "zipball_url": "https://api.github.com/repos/intelligent-environments-lab/CityLearn/zipball/v1.1.0"
      },
      {
        "authorType": "User",
        "author_name": "kingsleynweye",
        "body": "**Full Changelog**: https://github.com/intelligent-environments-lab/CityLearn/commits/v1.0.0\r\n# Description\r\nThis version contains the distribution used in the [2021 CityLearn Challenge](https://sites.google.com/view/citylearnchallenge).\r\n\r\n# Related Publications\r\n[Zoltan Nagy, Jos\u00e9 R. V\u00e1zquez-Canteli, Sourav Dey, and Gregor Henze. 2021. The citylearn challenge 2021. In Proceedings of the 8th ACM International Conference on Systems for Energy-Efficient Buildings, Cities, and Transportation (BuildSys '21). Association for Computing Machinery, New York, NY, USA, 218\u2013219. DOI:https://doi.org/10.1145/3486611.3492226](https://doi.org/10.1145/3486611.3492226)\r\n\r\n# Contributors\r\n@canteli",
        "dateCreated": "2021-11-16T10:29:21Z",
        "datePublished": "2021-11-29T17:48:34Z",
        "html_url": "https://github.com/intelligent-environments-lab/CityLearn/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "tag_name": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/intelligent-environments-lab/CityLearn/tarball/v1.0.0",
        "url": "https://api.github.com/repos/intelligent-environments-lab/CityLearn/releases/54261141",
        "zipball_url": "https://api.github.com/repos/intelligent-environments-lab/CityLearn/zipball/v1.0.0"
      }
    ],
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Refer to [requirements.txt](requirements.txt) for a list of CityLearn Python library dependencies. You may install the required libraries by executing the following command:\n```console\npip install -r requirements.txt\n```\n\nCityLearn may still work with some earlier versions of these libraries, but we have tested it with those.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 189,
      "date": "Sat, 25 Dec 2021 18:28:18 GMT"
    },
    "technique": "GitHub API"
  }
}