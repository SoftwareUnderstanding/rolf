{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[image1]: https://user-images.githubusercontent.com/10624937/43851024-320ba930-9aff-11e8-8493-ee547c6af349.gif \"Trained Agent\"\n[image3]: https://video.udacity-data.com/topher/2018/July/5b48f845_unknown/unknown.png\n[image2]: https://user-images.githubusercontent.com/10624937/43851646-d899bf20-9b00-11e8-858c-29b5c2c94ccc.png \"Crawler\"\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9939474302521022
      ],
      "excerpt": "    * Look at the priority function in this paper https://arxiv.org/pdf/1707.08817.pdf \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Zartris/TD3_continuous_control",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-12-15T20:16:46Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-12-23T10:19:44Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "For this project, you will work with the [Reacher](https://github.com/Unity-Technologies/ml-agents/blob/master/docs/Learning-Environment-Examples.md#reacher) environment.\n\n![Trained Agent][image1]\n\nIn this environment, a double-jointed arm can move to target locations. A reward of +0.1 is provided for each step that the agent's hand is in the goal location. Thus, the goal of your agent is to maintain its position at the target location for as many time steps as possible.\n\nThe observation space consists of 33 variables corresponding to position, rotation, velocity, and angular velocities of the arm. Each action is a vector with four numbers, corresponding to torque applicable to two joints. Every entry in the action vector should be a number between -1 and 1.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9333028795320086
      ],
      "excerpt": "For this project, we will provide you with two separate versions of the Unity environment: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8295283045732491,
        0.947628010224073,
        0.9327097921158771,
        0.9594771669072674,
        0.9893331481362309,
        0.901985721900579,
        0.9213280796958198,
        0.9172005819073034
      ],
      "excerpt": "- The second version contains 20 identical agents, each with its own copy of the environment.   \nThe second version is useful for algorithms like PPO, A3C, and D4PG that use multiple (non-interacting, parallel) copies of the same agent to distribute the task of gathering experience. \nNote that your project submission need only solve one of the two versions of the environment. \nThe task is episodic, and in order to solve the environment,  your agent must get an average score of +30 over 100 consecutive episodes. \nThe barrier for solving the second version of the environment is slightly different, to take into account the presence of many agents.  In particular, your agents must get an average score of +30 (over 100 consecutive episodes, and over all agents).  Specifically, \n- After each episode, we add up the rewards that each agent received (without discounting), to get a score for each agent.  This yields 20 (potentially different) scores.  We then take the average of these 20 scores.  \n- This yields an average score for each episode (where the average is over all 20 agents). \nThe environment is considered solved, when the average (over 100 episodes) of those average scores is at least +30. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9218151055885556,
        0.9747579013900716
      ],
      "excerpt": "The environment is considered solved, when the average (over 100 episodes) of those average scores is at least +30. In the case of the plot above, the environment was solved at episode 63, since the average of the average scores from episodes 64 to 163 (inclusive) was greater than +30. \nThe following list is more of notes to myself. It contains further improvement i want to implement and test out: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9495422066629952
      ],
      "excerpt": "* Improved Critic with better model (maybe fit own rainbow implementation) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9077169173069086,
        0.9797085475254466
      ],
      "excerpt": "Reason is, the parameters vary a lot depending on the modifications. \nThrough this project I have found the information on the following sites to be a very big help in form of easy explaination and simple follow through of the TD3 algorithm, a big thanks for all the good explaination they have given us for free: \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Zartris/TD3_continuous_control/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 22:54:34 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Zartris/TD3_continuous_control/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Zartris/TD3_continuous_control",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Zartris/TD3_continuous_control/master/DDPG.ipynb",
      "https://raw.githubusercontent.com/Zartris/TD3_continuous_control/master/Continuous_Control.ipynb",
      "https://raw.githubusercontent.com/Zartris/TD3_continuous_control/master/optional/Crawler.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8617734106092565
      ],
      "excerpt": "- The second version contains 20 identical agents, each with its own copy of the environment.   \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Zartris/TD3_continuous_control/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "(Image References)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "TD3_continuous_control",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Zartris",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Zartris/TD3_continuous_control/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Wed, 29 Dec 2021 22:54:34 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Download the environment from one of the links below.  You need only select the environment that matches your operating system:\n\n    - **_Version 1: One (1) Agent_**\n        - Linux: [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/one_agent/Reacher_Linux.zip)\n        - Mac OSX: [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/one_agent/Reacher.app.zip)\n        - Windows (32-bit): [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/one_agent/Reacher_Windows_x86.zip)\n        - Windows (64-bit): [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/one_agent/Reacher_Windows_x86_64.zip)\n\n    - **_Version 2: Twenty (20) Agents_**\n        - Linux: [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/Reacher_Linux.zip)\n        - Mac OSX: [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/Reacher.app.zip)\n        - Windows (32-bit): [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/Reacher_Windows_x86.zip)\n        - Windows (64-bit): [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/Reacher_Windows_x86_64.zip)\n    \n    (_For Windows users_) Check out [this link](https://support.microsoft.com/en-us/help/827218/how-to-determine-whether-a-computer-is-running-a-32-bit-version-or-64) if you need help with determining if your computer is running a 32-bit version or 64-bit version of the Windows operating system.\n\n    (_For AWS_) If you'd like to train the agent on AWS (and have not [enabled a virtual screen](https://github.com/Unity-Technologies/ml-agents/blob/master/docs/Training-on-Amazon-Web-Service.md)), then please use [this link](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/one_agent/Reacher_Linux_NoVis.zip) (version 1) or [this link](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/Reacher_Linux_NoVis.zip) (version 2) to obtain the \"headless\" version of the environment.  You will **not** be able to watch the agent without enabling a virtual screen, but you will be able to train the agent.  (_To watch the agent, you should follow the instructions to [enable a virtual screen](https://github.com/Unity-Technologies/ml-agents/blob/master/docs/Training-on-Amazon-Web-Service.md), and then download the environment for the **Linux** operating system above._)\n\n2. Place the file in the DRLND GitHub repository, in the `TD3_continuous_control/` folder, and unzip (or decompress) the file. \n3. Rename the file to Reacher\n4. Install environment\n\n    1. pip install matplotlib\n    2. pip install mlagents\n    3. pip install numpy\n    4. pip install tensorboardx\n    5. pip install tensorboard\n5. In the `TD3_continuous_control/` folder run command: `python train.py --eval_load_best=True` or `python train.py --eval_load_best=True --slow_and_pretty=True` for a slow representation\n",
      "technique": "Header extraction"
    }
  ]
}