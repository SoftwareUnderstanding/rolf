{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1706.08442\nhttps://towardsdatascience.com/lane-detection-with-deep-learning-part-1-9e096f3320b7\nhttps://towardsdatascience.com/lane-detection-with-deep-learning-part-2-3ba559b5c5af\nhttps://arxiv.org/abs/1710.06288\nhttps://arxiv.org/abs/1605.06211\nhttp://www.cvlibs.net/datasets/kitti/eval_road.php\n\n\n",
      "https://arxiv.org/abs/1710.06288\nhttps://arxiv.org/abs/1605.06211\nhttp://www.cvlibs.net/datasets/kitti/eval_road.php\n\n\n",
      "https://arxiv.org/abs/1605.06211\nhttp://www.cvlibs.net/datasets/kitti/eval_road.php\n\n\n"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[image1]: ./examples/undistort_output.png \"Undistorted\"\n[image2]: ./test_images/test1.jpg \"Road Transformed\"\n[image3]: ./examples/binary_combo_example.jpg \"Binary Example\"\n[image4]: ./examples/warped_straight_lines.jpg \"Warp Example\"\n[image5]: ./examples/color_fit_lines.jpg \"Fit Visual\"\n[image6]: ./examples/example_output.jpg \"Output\"\n[video1]: ./project_video.mp4 \"Video\"\n\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Ceachi/Project-Self-Driving-Car-Advanced-Lane-Lines",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-10-06T10:42:25Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-09-28T15:58:53Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9039468928572164,
        0.9791762129011239,
        0.9748956060950598
      ],
      "excerpt": "In this project, the goal was to write a software pipeline to identify the lane boundaries in a video. \nThe Project \nThe goals / steps of this project are the following: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8201392644743549
      ],
      "excerpt": "Apply a perspective transform to rectify binary image (\"birds-eye view\"). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.984716517434955
      ],
      "excerpt": "Determine the curvature of the lane and vehicle position with respect to center. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9098333531770808
      ],
      "excerpt": "Output visual display of the lane boundaries and numerical estimation of lane curvature and vehicle position. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8303942629756282,
        0.8827151813173969,
        0.9624780970513047,
        0.9110136586362483,
        0.9459824942870655
      ],
      "excerpt": "The line detection code could be found at In [9] of the main project.  \nThe algorithm calculates the histogram on the X axis. \nFinds the picks on the right and left side of the image, and collect the non-zero points contained on those windows. \nWhen all the points are collected, a polynomial fit is used (using np.polyfit) to find the line model. \nOn the same code, another polynomial fit is done on the same points transforming pixels to meters to be used later on the curvature calculation.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9768841909550641
      ],
      "excerpt": "On the step 4 a polynomial was calculated on the meters space to be used here to calculate the curvature. The formula is the following: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8905740233944551
      ],
      "excerpt": "where fit is the the array containing the polynomial, yRange is the max Y value and ym_per_pix is the meter per pixel value. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8020201356210429,
        0.9570564222735798,
        0.9304684996079156,
        0.8928900397152556,
        0.8668207340522787
      ],
      "excerpt": "Calculate the lane center by evaluating the left and right polynomials at the maximum Y and find the middle point. \nCalculate the vehicle center transforming the center of the image from pixels to meters. \nThe sign between the distance between the lane center and the vehicle center gives if the vehicle is on to the left or the right. \nThe code used to calculate this could be found at In [18]. \nThe project video was processed and the results at video_output \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9110286543841859
      ],
      "excerpt": "- frame to frame to improve robustness of the process \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Project Self Driving Car ",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Ceachi/Project-Self-Driving-Car-Advanced-Lane-Lines/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 28 Dec 2021 21:44:49 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Ceachi/Project-Self-Driving-Car-Advanced-Lane-Lines/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Ceachi/Project-Self-Driving-Car-Advanced-Lane-Lines",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Ceachi/Project-Self-Driving-Car-Advanced-Lane-Lines/master/Step_1_Camera_Calibration.ipynb",
      "https://raw.githubusercontent.com/Ceachi/Project-Self-Driving-Car-Advanced-Lane-Lines/master/Project.%20Advance%20Lane%20Lines.ipynb",
      "https://raw.githubusercontent.com/Ceachi/Project-Self-Driving-Car-Advanced-Lane-Lines/master/Step_2_Color_Transform_and_Gradients_Threshold.ipynb",
      "https://raw.githubusercontent.com/Ceachi/Project-Self-Driving-Car-Advanced-Lane-Lines/master/Step_3_Apply_Perspective_transformation.ipynb",
      "https://raw.githubusercontent.com/Ceachi/Project-Self-Driving-Car-Advanced-Lane-Lines/master/.ipynb_checkpoints/Step_1_Camera_Calibration-checkpoint.ipynb",
      "https://raw.githubusercontent.com/Ceachi/Project-Self-Driving-Car-Advanced-Lane-Lines/master/.ipynb_checkpoints/Project.%20Advance%20Lane%20Lines-checkpoint.ipynb",
      "https://raw.githubusercontent.com/Ceachi/Project-Self-Driving-Car-Advanced-Lane-Lines/master/.ipynb_checkpoints/Step_2_Color_Transform_and_Gradients_Threshold-checkpoint.ipynb",
      "https://raw.githubusercontent.com/Ceachi/Project-Self-Driving-Car-Advanced-Lane-Lines/master/.ipynb_checkpoints/Step_3_Apply_Perspective_transformation-checkpoint.ipynb",
      "https://raw.githubusercontent.com/Ceachi/Project-Self-Driving-Car-Advanced-Lane-Lines/master/examples/example.ipynb",
      "https://raw.githubusercontent.com/Ceachi/Project-Self-Driving-Car-Advanced-Lane-Lines/master/examples/.ipynb_checkpoints/example-checkpoint.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Ceachi/Project-Self-Driving-Car-Advanced-Lane-Lines/master/set_git.sh"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Ceachi/Project-Self-Driving-Car-Advanced-Lane-Lines/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2016-2018 Udacity, Inc.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Advanced Lane Finding",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Project-Self-Driving-Car-Advanced-Lane-Lines",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Ceachi",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Ceachi/Project-Self-Driving-Car-Advanced-Lane-Lines/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Tue, 28 Dec 2021 21:44:49 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The camera calibration code for this step could be found on the [Step_1_Camera_Calibration notebook](Step_1_Camera_Calibration.ipynb).\n\nI start by preparing \"object points\", which will be the (x, y, z) coordinates of the chessboard corners in the world. Here I am assuming the chessboard is fixed on the (x, y) plane at z=0, such that the object points are the same for each calibration image.  Thus, `objp` is just a replicated array of coordinates, and `objpoints` will be appended with a copy of it every time I successfully detect all chessboard corners in a test image.  `imgpoints` will be appended with the (x, y) pixel position of each of the corners in the image plane with each successful chessboard detection.  \n\nI then used the output `objpoints` and `imgpoints` to compute the camera calibration and distortion coefficients using the `cv2.calibrateCamera()` function.  I applied this distortion correction to the test image using the `cv2.undistort()` function.\n\nUsing `cv2.findChessboardCorners`, the corners points are stored in an array `imgpoints` for each calibration image where the chessboard could be found. The object points will always be the same as the known coordinates of the chessboard with zero as 'z' coordinate because the chessboard is flat. The object points are stored in an array called `objpoints`. \n\nI then used the output objpoints and imgpoints to compute the camera calibration and distortion coefficients using the `cv2.calibrateCamera` function. I applied this distortion correction to the test image using the `cv2.undistort` function and obtained this result:\n\n![Camera calibratio undistort result](./results_images/camera_calibration_undistort_result.PNG)\n\nThe camera calibration and distortion coefficients(mtx, dist) are stored using `pickle`(in folder ./pickled_data/camera_calibration.p) to be used on the main [notebook](Project.%20Advance%20Lane%20Lines.ipynb)\n\nA short description of the images in [Step_1_Camera_Calibration notebook](Step_1_Camera_Calibration.ipynb) to compute the camera calibration matrix and distortion coefficients given a set of chessboard images:\n```\nreadChessImages(): Load calibration images(chess boards in different angles from our camera_cal folder)\nshowImages(calibrationImages): Method for displaying the images\nfindingPoints(calibrationImages): Method for detecting the points in chess images (objpoints and imgpoints)\ngetCoefficients(objpoints, imgpoints, originalImage): Method for returning camera matrix, mtx, and the distortion coefficients dist\n\nHOW TO USE THESE FUNCTIONS: \n\n#: Read images\ncalibrationImages = readChessImages()\n#: Return object points and image points\nobjpoints, imgpoints, originalImages, outimages = findingPoints(calibrationImages)\n#: Save coefficients into pickle\noriginalImage = originalImages[10]\n\n#:Getting the coefficients we need for camera calibration\nmtx,dist = getCoefficients(objpoints, imgpoints, originalImage)\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "To demonstrate this step, I will describe how I apply the distortion correction to one of the test images like this one:\n![Camera calibration](./results_images/original-to-undistort.png)\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "The code used to experiment with color, gradients, and thresholds could be found on the [Step 2. Color Transform and Gradients Threshold notebook](Step_2_Color_Transform_and_Gradients_Threshold.ipynb).\n\nA color transformation to HLS was done, and the S channel was selected because it shows more contracts on the lane lines. Here are the results for all the testing images:\n![S_channel_result](./results_images/s_channel.png)\n\nNext step was to calculte the gradients:\n- Sobel X and Sobel Y: `In [7]` and `In [8]`\n- Magnitude : `In [10]`\n- Gradient direction : `In [12]`\n- Combination of all the above (Sobel X and Sobel Y) or (Magnitude and Gradient): `In [13]`\n\nAfter applying thresholds here are the results:\n![Results combined](./results_images/show_compared_results.png)\n\nWe can observe that the combination of these gradients leads to a \"noisy\" binary images. For this reason, on the main project, presented in the [Project. Advance Lane Lines notebook](Project.%20Advance%20Lane%20Lines.ipynb) notebook, only the combination of `Sobel X` and `Sobel Y` was used to continue with the pipeline. \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "The perspective transformation code could be found on [Step_3 Apply Perspective transformation notebook(Step_3_Apply_Perspective_transformation.ipynb). \n\nFour points where selected on the first image as the source of the perspective transformation. Those points are highlighted on the following image:\n![Straight lane lines](./results_images/draw_lines.png)\n\nHow we draw the vertices can be found in the method `get_Rectangle_Vertices(image)` in `In [4]`:\n```\nimgHeight = int(image.shape[0])\nimgWidth = int(image.shape[1])\n\nvertice_1 = (190, imgHeight)\nvertice_2 = (int(imgWidth/2 - imgWidth*.038), int(imgHeight/2 + imgHeight*.08 + 30))\nvertice_3 = (int(imgWidth/2 + imgWidth*.038), int(imgHeight/2 + imgHeight*.08 + 30))\nvertice_4 = (imgWidth-160, imgHeight)\nvertices = (vertice_1, vertice_2, vertice_3, vertice_4)\n```\nUsing `cv2.getPerspectiveTransform`, a transformation matrix was calculated, and an inverse transformation matrix was also calculated to map the points back to the original space (In [6]). The result of the transformation on a test image is the following:\n![Perspective transformation of the lines](./results_images/image_side_by_side.png)\n\nThe transformation matrix and the inverse transformation matrix was stored using `pickle` to be used on the main project. The following picture shows the binary images results after the perspective transformation:\n![Binary images transformed](./results_images/result_perspective.png)\n\n![Detect Lines & Determine Curvature](./results_images/lane_curvature.PNG)\n\nRadius of Curvature, awsome tutorial here: https://www.intmath.com/applications-differentiation/8-radius-curvature.php\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "To display the lane lines on the image, the polynomials where evaluated on a lineal space of the Y coordinates. \nThe generated points where mapped back to the image space using the inverse transformation matrix generated by the perspective transformation. The following images are examples of this mapping:\n![Lane lines fit](./results_images/pipeline.png)\n\n",
      "technique": "Header extraction"
    }
  ]
}