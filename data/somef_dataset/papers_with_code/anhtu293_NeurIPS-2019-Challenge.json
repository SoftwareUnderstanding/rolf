{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/anhtu293/NeurIPS-2019-Challenge",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-10-01T16:35:09Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-07T12:40:31Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9212333310772897,
        0.954845551048797,
        0.9683142687851979,
        0.892019575004963
      ],
      "excerpt": "In this project, we used the musculoskeletal reinforcement learning environment made by Standford University (http://osim-rl.stanford.edu/). \nOur purpose was to create a model using Reinforcement Learning which can fall in the direction we want (left, right, front, behind). \nWe used DDPG Actor-Critic for this project. All the components were implemented by Python 3.6.1, Tensorflow 1.14 and executed on Google Engine. \nFor exploration of the model, we added OU-Noise directly to each action during training.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.946337675021652
      ],
      "excerpt": "Because the action space and observation space were very large, it was very difficult for the model to choose a good action \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9730289665465434
      ],
      "excerpt": "We didn't vary the architecture of neural networks in Actor and Critic in this project but tried many approaches for reward function \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8918191213348825
      ],
      "excerpt": "The direction of body was not defined by default in the environment so that we had to find to define this very important component. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9889223048012219,
        0.8574152683039087
      ],
      "excerpt": "This image shows all the positions in the low party of body. For the direction of body, we took the midpoint of right talus and  \nleft talus, then calculated the vector from this point to center mass of the body. This approach was not always exact, especially \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9380972733442039,
        0.9542959009531503,
        0.8380259990680353,
        0.894978089411834,
        0.9258114524632609
      ],
      "excerpt": "The image also shows the direction of the body in 3 axis ; X, Y, Z. At the begining of each episode, the body was symetric by \nthe axis Oy. Therefore, the left of body was the negative direction of axis Oz and the right was vector Oz. By this definition, \nwe can easily difnie the direction that we want the body to fall. \nWe have tried 3 different approaches based on 2 definitions above for reward function. \nOur purpose was to make the body fall in the direction we had chosen. It means that the angle between the body and the  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370748005059245
      ],
      "excerpt": "the direction of body and the chosen direction so that during training, the model would learn how to fall in the direction  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.913250209032214,
        0.8547283314239837,
        0.9400517428827384
      ],
      "excerpt": "The model was converged very quickly, just after about 450 episodes. We observed the log during training and we found that  \nmodel stuck in local optimum. It did find the way to minimize the penalization it received by falling as soon as possible  \nin a random direction. It didn't care about the direction that we had chosen. We tried to add many noise to get a better  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.877766083921834
      ],
      "excerpt": "As we mentionned before, we want to minimize the angle between the body and the direction we want to fall. Consequently,  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8954200899745829,
        0.8378413707678544,
        0.8807217888283744,
        0.9633128097745094,
        0.8117089860478847,
        0.8883097846745758,
        0.9081176171475078
      ],
      "excerpt": "We added many noise to this model and the noise decaying was slow. After the fine-tuning, we had a model that can fall  \nabout 45\u00b0 which. \nand the actual angle between the body and the direction we want to fall \nWe always wanted to minimize the angle between the body and the direction we want to fall. Hence, we encouraged the model to \nto move to the direction we want it to fall each time step. If it can tend to the direction we want it to fall after each  \ntime step, we give it a reward, or else a penalization.  \nWe got an interesting result : the model could fall about 47\u00b0 in the direction we had chosen. We visualized the model and we  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9041158083259588,
        0.9533051747639729,
        0.9891785691729262,
        0.9917748274780234,
        0.9582130608987995,
        0.9871355481822579,
        0.9426837129991009,
        0.9734151580033881,
        0.9148268501095213,
        0.9652299374787676,
        0.8745489032441004,
        0.8237443454380216
      ],
      "excerpt": "After the fine tuning, we have got 2 models which can fall in the direction we had chosen. In this case, we fixed the right \nas the direction we want the model to fall. The model falling to the right has the same behaviors because our environment \nis symetric.  \nAs we see in the image, to be able to fall to the right, the model tried to raise his right leg which led to a imbalance  \nstate so that the body can fall to the right. It was reasonable because the observation space has only the components of  \nlow party of the body. We observed the log during training and we found that the model couldn't fall with an angle more \nthan 55\u00b0, and in training it rarely fell with an angle more than 47\u00b0. This was the best result we could have with these approaches.  \nWe can explain this problem due to the lack of inforamtion about the relationship between the components of the body and  \nthe direction of the body. If we have more information, we can modelize a new reward function more directly to the observation \nspace of the environment. \n./src : All the important sources for DDPG and PER \n./Actor_Critic : sources of Actor-Critic algorithm \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Learning to fall by Reinforcement Learning (A2C)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/anhtu293/NeurIPS-2019-Challenge/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 17:12:43 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/anhtu293/NeurIPS-2019-Challenge/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "anhtu293/NeurIPS-2019-Challenge",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/anhtu293/NeurIPS-2019-Challenge/master/Actor_Critic/train.sh",
      "https://raw.githubusercontent.com/anhtu293/NeurIPS-2019-Challenge/master/Actor_Critic/visualization.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9346350125484372
      ],
      "excerpt": "train.sh : modify the hyper-parameters for training. run bash train.sh \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8608389274713609
      ],
      "excerpt": "train.sh : modify the hyper-parameters for training. run bash train.sh \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/anhtu293/NeurIPS-2019-Challenge/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "NeurIPS 2019 Challenge : Learn to Move - Walk Around",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "NeurIPS-2019-Challenge",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "anhtu293",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/anhtu293/NeurIPS-2019-Challenge/blob/master/readme.MD",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 17:12:43 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "reinforcement-learning",
      "tensorflow"
    ],
    "technique": "GitHub API"
  }
}