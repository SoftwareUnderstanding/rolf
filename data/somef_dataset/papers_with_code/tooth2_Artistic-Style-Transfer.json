{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1508.06576",
      "https://arxiv.org/abs/1508.06576"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The Neural Style Transfer algorithm was due to Gatys et al. (2015). \n* Leon A. Gatys, Alexander S. Ecker, Matthias Bethge, (2015) [A Neural Algorithm of Artistic Style](https://arxiv.org/abs/1508.06576)\n* Karen Simonyan and Andrew Zisserman (2015). [Very deep convolutional networks for large-scale image recognition](https://arxiv.org/pdf/1409.1556.pdf)\n* TensorFlow Implementation of [\"A Neural Algorithm of Artistic Style\"](http://www.chioka.in/tensorflow-implementation-neural-algorithm-of-artistic-style)\n* Harish Narayanan, [Convolutional neural networks for artistic style transfer](https://harishnarayanan.org/writing/artistic-style-transfer/)\n* [Tensorflow Artistic-Style-Transfer](https://www.tensorflow.org/lite/models/style_transfer/overview)\n* [Pytorch transfer learning](https://pytorch.org/tutorials/beginner/transfer_learning_tutorial.html)\n* [MatConvNet](http://www.vlfeat.org/matconvnet/pretrained/)\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tooth2/Artistic-Style-Transfer",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-01-12T16:35:41Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-04-15T02:08:06Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.817040577473844
      ],
      "excerpt": "This project demonstrates the use of Style Transfer in python, iOS, Android mobile applications inspired by Neural Style Transfer algorithm by Gatys et al.(2015). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.972622028009067,
        0.9107324470534438
      ],
      "excerpt": "Neural Style Transfer (NST) uses a previously trained convolutional network, and builds on top of that. As seen below, it merges two images, namely, a \"content\" image (C) and a \"style\" image (S), such as an artwork by a famous painter or a texture photo to resemble and blend them together , in order to create a \"generated\" image (G). The generated image G combines the \"content\" of the image C with the \"style\" of image S. So the output image looks like the content image, but \"painted\" in the style of the style reference image. \nAs for pre-trained convolutional model, we use VGG-19, a 19-layer version of the VGG network. This model has already been trained on the very large ImageNet competition database, and thus has learned to recognize a variety of low level features (at the earlier layers) and high level features (at the deeper layers). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8755228582170933,
        0.8599097369493641
      ],
      "excerpt": "* PyTorch VGG-19 pretrained model based style transfer \n* Tensorflow VGG-19 pretrained model based style transfer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9277439668139511
      ],
      "excerpt": "These mobile platform requires lite-weight cpu-intensive model so that a pre-trained TensorFlow Lite model and its API are used.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9000550216887162
      ],
      "excerpt": "Load the VGG16 model and un on Cuda / Tensorflow session \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8203018004890369
      ],
      "excerpt": "Run the content image through the VGG16 model and compute the content cost \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8044050682670907
      ],
      "excerpt": "Define the optimizer and the learning rate \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "This example projects demonstrate the use of Style Transfer in python, Android and etc.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tooth2/Artistic-Style-Transfer/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 02:10:33 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/tooth2/Artistic-Style-Transfer/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "tooth2/Artistic-Style-Transfer",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/tooth2/Artistic-Style-Transfer/main/Art%2BGeneration%2Bwith%2BNeural%2BStyle%2BTransfer%2B-%2Bv2.ipynb",
      "https://raw.githubusercontent.com/tooth2/Artistic-Style-Transfer/main/Style_Transfer_PyTorch.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8891360949742395
      ],
      "excerpt": "Main folder contains two notebooks: one implemented using GPU/PyTorch and the other implemented using GPU/Tensorflow.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8896587926331652
      ],
      "excerpt": "Train/Run Model on GPU: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8878117972549626
      ],
      "excerpt": "Train/Run Model on GPU: \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/tooth2/Artistic-Style-Transfer/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Artistic-Style-Transfer",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Artistic-Style-Transfer",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "tooth2",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tooth2/Artistic-Style-Transfer/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Sat, 25 Dec 2021 02:10:33 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "vgg-19",
      "artistic-style-transfer",
      "tensorflow",
      "tensorflow-lite",
      "pytorch",
      "android"
    ],
    "technique": "GitHub API"
  }
}