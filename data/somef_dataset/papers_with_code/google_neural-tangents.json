{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1912.02803",
      "https://arxiv.org/abs/2111.06063",
      "https://arxiv.org/abs/2111.03543",
      "https://arxiv.org/abs/2111.00034",
      "https://arxiv.org/abs/2110.03922",
      "https://arxiv.org/abs/2109.06099",
      "https://arxiv.org/abs/2109.12534",
      "https://arxiv.org/abs/2107.13034",
      "https://arxiv.org/abs/2107.03144",
      "https://arxiv.org/abs/2107.08924",
      "https://arxiv.org/abs/2107.08706",
      "https://arxiv.org/abs/2107.01408",
      "https://arxiv.org/abs/2106.12627",
      "https://arxiv.org/abs/2106.07052",
      "https://arxiv.org/abs/2106.09017",
      "https://arxiv.org/abs/2106.07052",
      "https://arxiv.org/abs/2106.06770",
      "https://arxiv.org/abs/2106.06510",
      "https://arxiv.org/abs/2106.05566",
      "https://arxiv.org/abs/2106.03186",
      "https://arxiv.org/abs/2106.02713",
      "https://arxiv.org/abs/2106.02261",
      "https://arxiv.org/abs/2105.14301",
      "https://arxiv.org/abs/2104.11667",
      "https://arxiv.org/abs/2104.01351",
      "https://arxiv.org/abs/2102.07169",
      "https://arxiv.org/abs/2102.06701",
      "https://arxiv.org/abs/2101.04097",
      "https://arxiv.org/abs/2011.00050",
      "https://arxiv.org/abs/2010.15110",
      "https://arxiv.org/abs/2010.12859",
      "https://arxiv.org/abs/2010.11775",
      "https://arxiv.org/abs/2010.09654",
      "https://arxiv.org/abs/2010.07344",
      "https://arxiv.org/abs/2009.12820",
      "https://arxiv.org/abs/2009.11848",
      "https://arxiv.org/abs/2008.00029",
      "https://arxiv.org/abs/2008.08675",
      "https://arxiv.org/abs/2007.15801",
      "https://arxiv.org/abs/2007.05864",
      "https://arxiv.org/abs/2006.14599",
      "https://arxiv.org/abs/2006.13409",
      "https://arxiv.org/abs/2006.13198",
      "https://arxiv.org/abs/2006.10541",
      "https://arxiv.org/abs/2006.10540",
      "https://arxiv.org/abs/2006.10739",
      "https://arxiv.org/abs/2006.08228",
      "https://arxiv.org/abs/2006.03875",
      "https://arxiv.org/abs/2004.05867",
      "https://arxiv.org/abs/2003.02218",
      "https://arxiv.org/abs/2002.02561",
      "https://arxiv.org/abs/2002.04010",
      "https://arxiv.org/abs/2001.07301",
      "https://arxiv.org/abs/1912.13053",
      "https://arxiv.org/abs/1911.09189",
      "https://arxiv.org/abs/1905.13654",
      "https://arxiv.org/abs/1902.06720",
      "https://arxiv.org/abs/1810.05148",
      "https://arxiv.org/abs/1606.05340",
      "https://arxiv.org/abs/1611.01232",
      "https://arxiv.org/abs/1711.00165",
      "https://arxiv.org/abs/1804.11271",
      "https://arxiv.org/abs/1806.05393",
      "https://arxiv.org/abs/1810.05148",
      "https://arxiv.org/abs/1808.05587",
      "https://arxiv.org/abs/1806.07572",
      "https://arxiv.org/abs/1902.06720",
      "https://arxiv.org/abs/1902.04760",
      "https://arxiv.org/abs/1712.08969",
      "https://arxiv.org/abs/1605.07146",
      "https://arxiv.org/abs/2001.07301",
      "https://arxiv.org/abs/2003.02237"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use the code in a publication, please cite our ICLR 2020 paper:\n\n```\n@inproceedings{neuraltangents2020,\n    title={Neural Tangents: Fast and Easy Infinite Neural Networks in Python},\n    author={Roman Novak and Lechao Xiao and Jiri Hron and Jaehoon Lee and Alexander A. Alemi and Jascha Sohl-Dickstein and Samuel S. Schoenholz},\n    booktitle={International Conference on Learning Representations},\n    year={2020},\n    url={https://github.com/google/neural-tangents}\n}\n```\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{neuraltangents2020,\n    title={Neural Tangents: Fast and Easy Infinite Neural Networks in Python},\n    author={Roman Novak and Lechao Xiao and Jiri Hron and Jaehoon Lee and Alexander A. Alemi and Jascha Sohl-Dickstein and Samuel S. Schoenholz},\n    booktitle={International Conference on Learning Representations},\n    year={2020},\n    url={https://github.com/google/neural-tangents}\n}",
      "technique": "File Exploration"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{neuraltangents2020,\n    title={Neural Tangents: Fast and Easy Infinite Neural Networks in Python},\n    author={Roman Novak and Lechao Xiao and Jiri Hron and Jaehoon Lee and Alexander A. Alemi and Jascha Sohl-Dickstein and Samuel S. Schoenholz},\n    booktitle={International Conference on Learning Representations},\n    year={2020},\n    url={https://github.com/google/neural-tangents}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8944178096468923
      ],
      "excerpt": "ICLR 2020 Video \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9521604751129622
      ],
      "excerpt": "x = random.normal(key, (10, 100)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8387611005341266
      ],
      "excerpt": "  Shortcut = stax.Identity() if not channel_mismatch else stax.Conv( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "init_fn, apply_fn, kernel_fn = WideResnet(block_size=4, k=1, num_classes=10) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9146894306581513
      ],
      "excerpt": "| Platform                    | Precision | Milliseconds / NTK entry | Max batch size (NxN) | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8729393277090676
      ],
      "excerpt": "| NVIDIA P100                 | 64        |  11.349                  |    18                  | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9146894306581513
      ],
      "excerpt": "| Platform                    | Precision | Milliseconds / NTK entry | Max batch size (NxN)            | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9360720202136275
      ],
      "excerpt": "If your performance differs significantly, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8120028684652324
      ],
      "excerpt": "Provably efficient machine learning for quantum many-body problems \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.978499794947095
      ],
      "excerpt": "Bridging Multi-Task Learning and Meta-Learning: Towards Efficient Training and Effective Adaptation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8918718771383289
      ],
      "excerpt": "Spectrum Dependent Learning Curves in Kernel Regression and Wide Neural Networks \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/google/neural-tangents",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "How to Contribute\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\nContributor License Agreement\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to https://cla.developers.google.com/ to see\nyour current agreements on file or to sign a new one.\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\nCode reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\nGitHub Help for more\ninformation on using pull requests.\nCommunity Guidelines\nThis project follows\nGoogle's Open Source Community Guidelines.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-04-08T16:48:48Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-24T03:07:19Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The `neural_tangents` (`nt`) package contains the following modules and functions:\n\n* `stax` - primitives to construct neural networks like `Conv`, `Relu`, `serial`, `parallel` etc.\n\n* `predict` - predictions with infinite networks:\n\n  * `predict.gradient_descent_mse` - inference with a single infinite width / linearized network trained on MSE loss with continuous gradient descent for an arbitrary finite or infinite (`t=None`) time. Computed in closed form.\n\n  * `predict.gradient_descent` - inference with a single infinite width / linearized network trained on arbitrary loss with continuous (momentum) gradient descent for an arbitrary finite time. Computed using an ODE solver.\n\n  * `predict.gradient_descent_mse_ensemble` - inference with an infinite ensemble of infinite width networks, either fully Bayesian (`get='nngp'`) or inference with MSE loss using continuous gradient descent (`get='ntk'`). Finite-time Bayesian inference (e.g. `t=1., get='nngp'`) is interpreted as gradient descent on the top layer only [[11]](#11-wide-neural-networks-of-any-depth-evolve-as-linear-models-under-gradient-descent), since it converges to exact Gaussian process inference with NNGP (`t=None, get='nngp'`). Computed in closed form.\n\n  * `predict.gp_inference` - exact closed form Gaussian process inference using NNGP (`get='nngp'`), NTK (`get='ntk'`), or both (`get=('nngp', 'ntk')`). Equivalent to `predict.gradient_descent_mse_ensemble` with `t=None` (infinite training time), but has a slightly different API (accepting precomputed kernel matrix `k_train_train` instead of `kernel_fn` and `x_train`).\n\n* `monte_carlo_kernel_fn` - compute a Monte Carlo kernel estimate  of _any_ `(init_fn, apply_fn)`, not necessarily specified via `nt.stax`, enabling the kernel computation of infinite networks without closed-form expressions.\n\n* Tools to investigate training dynamics of _wide but finite_ neural networks, like `linearize`, `taylor_expand`, `empirical_kernel_fn` and more. See [Training dynamics of wide but finite networks](#training-dynamics-of-wide-but-finite-networks) for details.\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9176194240510516
      ],
      "excerpt": "Today (Dec 14) we are at the NeurIPS Bayesian Deep Learning Workshop at poster 3E, talking about upcoming speed-ups to the finite width NTK (nt.empirical). See also our PDF note. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9287939592702565,
        0.9886420173183147,
        0.9744611326884716,
        0.9475326670015228,
        0.8666068801872302
      ],
      "excerpt": "Neural Tangents is a high-level neural network API for specifying complex, hierarchical, neural networks of both finite and infinite width. Neural Tangents allows researchers to define, train, and evaluate infinite networks as easily as finite ones. \nInfinite (in width or channel count) neural networks are Gaussian Processes (GPs) with a kernel function determined by their architecture. See References for details and nuances of this correspondence. Also see this listing of papers written by the creators of Neural Tangents which study the infinite width limit of neural networks. \nNeural Tangents allows you to construct a neural network model from common building blocks like convolutions, pooling, residual connections, nonlinearities, and more, and obtain not only the finite model, but also the kernel function of the respective GP. \nThe library is written in python using JAX and leveraging XLA to run out-of-the-box on CPU, GPU, or TPU. Kernel computation is highly optimized for speed and memory efficiency, and can be automatically distributed over multiple accelerators with near-perfect scaling. \nNeural Tangents is a work in progress. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9908072189313893
      ],
      "excerpt": "An easy way to get started with Neural Tangents is by playing around with the following interactive notebooks in Colaboratory. They demo the major features of Neural Tangents and show how it can be used in research. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9254751311447194
      ],
      "excerpt": "Weight Space Linearization \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8727043812266633,
        0.9373216968946545,
        0.9667805715835497
      ],
      "excerpt": ": Simple benchmark for Myrtle kernels used in [16]. Also see Performance. \n<b>See this Colab for a detailed tutorial. Below is a very quick introduction.</b> \nOur library closely follows JAX's API for specifying neural networks,  stax. In stax a network is defined by a pair of functions (init_fn, apply_fn) initializing the trainable parameters and computing the outputs of the network respectively. Below is an example of defining a 3-layer network and computing it's outputs y given inputs x. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577302739126875,
        0.8577302739126875,
        0.8577302739126875
      ],
      "excerpt": "    stax.Dense(512), stax.Relu, \n    stax.Dense(512), stax.Relu, \n    stax.Dense(1) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9952080208637499
      ],
      "excerpt": "Neural Tangents is designed to serve as a drop-in replacement for stax, extending the (init_fn, apply_fn) tuple to a triple (init_fn, apply_fn, kernel_fn), where kernel_fn is the kernel function of the infinite network (GP) of the given architecture. Below is an example of computing the covariances of the GP between two batches of inputs x1 and x2. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577302739126875,
        0.8577302739126875,
        0.8577302739126875
      ],
      "excerpt": "    stax.Dense(512), stax.Relu(), \n    stax.Dense(512), stax.Relu(), \n    stax.Dense(1) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8306020398616069
      ],
      "excerpt": "Note that kernel_fn can compute two covariance matrices corresponding to the Neural Network Gaussian Process (NNGP) and Neural Tangent (NT) kernels respectively. The NNGP kernel corresponds to the Bayesian infinite neural network [1-5]. The NTK corresponds to the (continuous) gradient descent trained infinite network [10]. In the above example, we compute the NNGP kernel but we could compute the NTK or both: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9161799945556875
      ],
      "excerpt": ": Get kernel of a single type \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490037945672047
      ],
      "excerpt": ": Unpack the kernels namedtuple \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9840313276592193
      ],
      "excerpt": "Doing inference with infinite networks trained on MSE loss reduces to classical GP inference, for which we also provide convenient tools: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490037945672047
      ],
      "excerpt": ": Unpack the predictions namedtuple \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577302739126875
      ],
      "excerpt": "      stax.Dense(num_classes, 1., 0.)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8646711401955661
      ],
      "excerpt": "We remark the following differences between our library and the JAX one. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.968950151583114
      ],
      "excerpt": "For CNNs w/ pooling, our CPU and TPU performance is suboptimal due to low core \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9063338207543676,
        0.9917083176481466,
        0.9795675598127738
      ],
      "excerpt": "in the meantime. See Performance. \nThe kernel of an infinite network kernel_fn(x1, x2).ntk combined with  nt.predict.gradient_descent_mse together allow to analytically track the outputs of an infinitely wide neural network trained on MSE loss througout training. Here we discuss the implications for wide but finite neural networks and present tools to study their evolution in weight space (trainable parameters of the network) and function space (outputs of the network). \nContinuous gradient descent in an infinite network has been shown in [11] to correspond to training a linear (in trainable parameters) model, which makes linearized neural networks an important subject of study for understanding the behavior of parameters in wide models. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9130756512372344
      ],
      "excerpt": "which allow to linearize or get an arbitrary-order Taylor expansion of any function apply_fn(params, x) around some initial parameters params_0 as apply_fn_lin = nt.linearize(apply_fn, params_0). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.971012716177266,
        0.9691955892165968,
        0.857176710262632
      ],
      "excerpt": "(including as an input to JAX optimizers). This makes it easy to compare the \ntraining trajectory of neural networks with that of its linearization. \nPrevious theory and experiments have examined the linearization of neural \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8677463998758039,
        0.9969104841481176,
        0.9268212712309596,
        0.9183757951440201
      ],
      "excerpt": "post-activations which are substantially more nonlinear. \nOutputs of a linearized model evolve identically to those of an infinite one [11] but with a different kernel - specifically, the Neural Tangent Kernel [10] evaluated on the specific apply_fn of the finite network given specific params_0 that the network is initialized with. For this we provide the nt.empirical_kernel_fn function that accepts any apply_fn and returns a kernel_fn(x1, x2, get, params) that allows to compute the empirical NTK and/or NNGP (based on get) kernels on specific params. \nThe success or failure of the linear approximation is highly architecture \ndependent. However, some rules of thumb that we've observed are: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.972537248981341,
        0.8824600438803588
      ],
      "excerpt": "     agreement by the time the layer-width is 512 (RMSE of about 0.05 at the \n     end of training). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9717482942629594
      ],
      "excerpt": "     agreement by the time the number of channels is 512. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9890344725901652
      ],
      "excerpt": "With a new model it is therefore advisable to start with a very large model on \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9227314179600234,
        0.8863191939257068
      ],
      "excerpt": "In the table below we measure time to compute a single NTK \nentry in a 21-layer CNN (3x3 filters, no strides, SAME padding, ReLU) on inputs of shape 3x32x32. Precisely: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9743361621266515
      ],
      "excerpt": "Note that runtime is proportional to the depth of your network. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8739726186355957,
        0.87777366989944
      ],
      "excerpt": "On the Equivalence between Neural Network and Support Vector Machine \nAn Empirical Study of Neural Kernel Bandits \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.841674322540565
      ],
      "excerpt": "Understanding Deep Learning via Analyzing Dynamics of Gradient Descent \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8363465990921337,
        0.8183631933358207
      ],
      "excerpt": "Uniform Generalization Bounds for Overparameterized Neural Networks \nData Summarization via Bilevel Optimization \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8663757398598904
      ],
      "excerpt": "Scale Mixtures of Neural Network Gaussian Processes \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9035786172848376
      ],
      "excerpt": "Spectral bias and task-model alignment explain generalization in kernel regression and infinitely wide neural networks \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9855209064651739,
        0.8635407826138274,
        0.9625986132973225,
        0.9552576204032259,
        0.8288758746406191
      ],
      "excerpt": "Measuring the sensitivity of Gaussian processes to kernel choice \nA Neural Tangent Kernel Perspective of GANs \nOn the Power of Shallow Learning \nLearning Curves for SGD on Structured Features \nOut-of-Distribution Generalization in Kernel Regression \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9323987298014063,
        0.9615835869623237,
        0.9403970418592825
      ],
      "excerpt": "Scalable and Flexible Deep Bayesian Optimization with Auxiliary Information for Scientific Problems \nRandom Features for the Neural Tangent Kernel \nMulti-Level Fine-Tuning: Closing Generalization Gaps in Approximation of Solution Maps under a Limited Budget for Training Data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.910767644114287
      ],
      "excerpt": "Correlated Weights in Infinite Limits of Deep Convolutional Neural Networks \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.967337111850438
      ],
      "excerpt": "Deep learning versus kernel learning: an empirical study of loss landscape geometry and the time evolution of the Neural Tangent Kernel \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8279099879959776
      ],
      "excerpt": "Label-Aware Neural Tangent Kernel: Toward Better Generalization and Local Elasticity \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8658687829262139,
        0.95717886949811,
        0.8212487348604165,
        0.8804469545859581
      ],
      "excerpt": "Temperature check: theory and practice for training models with softmax-cross-entropy losses \nExperimental Design for Overparameterized Learning with Application to Single Shot Deep Active Learning \nHow Neural Networks Extrapolate: From Feedforward to Graph Neural Networks \nExploring the Uncertainty Properties of Neural Networks\u2019 Implicit Priors in the Infinite-Width Limit \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8009582271426459
      ],
      "excerpt": "Asymptotics of Wide Convolutional Neural Networks \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.973240073481278
      ],
      "excerpt": "The Surprising Simplicity of the Early-Time Learning Dynamics of Neural Networks \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8455869558537855
      ],
      "excerpt": "Statistical Mechanics of Generalization in Kernel Regression \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9561263829614471,
        0.9500440216962107
      ],
      "excerpt": "Infinite attention: NNGP and NTK for deep attention networks \nFourier Features Let Networks Learn High Frequency Functions in Low Dimensional Domains \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.921394409015476,
        0.9922876567850732,
        0.926664094144291,
        0.8232477859667896
      ],
      "excerpt": "Coresets via Bilevel Optimization for Continual Learning and Streaming \nOn the Neural Tangent Kernel of Deep Networks with Orthogonal Initialization \nThe large learning rate phase of deep learning: the catapult mechanism \nSpectrum Dependent Learning Curves in Kernel Regression and Wide Neural Networks \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9516847736725474,
        0.948145939799905,
        0.8571068201993393,
        0.8326734468298851,
        0.9176903909263217,
        0.8758729999545668
      ],
      "excerpt": "On the Infinite Width Limit of Neural Networks with a Standard Parameterization \nDisentangling Trainability and Generalization in Deep Learning \nInformation in Infinite Ensembles of Infinitely-Wide Neural Networks \nTraining Dynamics of Deep Networks using Stochastic Gradient Descent via Neural Tangent Kernel \nWide Neural Networks of Any Depth Evolve as Linear Models Under Gradient Descent \nBayesian Deep Convolutional Networks with Many Channels are Gaussian Processes \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Fast and Easy Infinite Neural Networks in Python",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/google/neural-tangents/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 187,
      "date": "Fri, 24 Dec 2021 05:06:17 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/google/neural-tangents/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "google/neural-tangents",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/google/neural-tangents/tree/main/docs"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/neural_tangents_cookbook.ipynb",
      "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/Disentangling_Trainability_and_Generalization.ipynb",
      "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/myrtle_kernel_with_neural_tangents.ipynb",
      "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/phase_diagram.ipynb",
      "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/weight_space_linearization.ipynb",
      "https://raw.githubusercontent.com/google/neural-tangents/main/notebooks/function_space_linearization.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To use GPU, first follow [JAX's](https://www.github.com/google/jax/) GPU installation instructions. Otherwise, install JAX on CPU by running\n\n```\npip install jax jaxlib --upgrade\n```\n\nOnce JAX is installed install Neural Tangents by running\n\n```\npip install neural-tangents\n```\nor, to use the bleeding-edge version from GitHub source,\n\n```\ngit clone https://github.com/google/neural-tangents; cd neural-tangents\npip install -e .\n```\n\nYou can now run the examples (using [`tensorflow_datasets`](https://github.com/tensorflow/datasets))\nand tests by calling:\n\n```\npip install tensorflow tensorflow-datasets more-itertools --upgrade\n\npython examples/infinite_fcn.py\npython examples/weight_space.py\npython examples/function_space.py\n\nset -e; for f in tests/*.py; do python $f; done\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9675937378023954
      ],
      "excerpt": "| Install guide \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.801083591072351
      ],
      "excerpt": "both = kernel_fn(x1, x2, ('nngp', 'ntk')) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8891401888405708
      ],
      "excerpt": "y_test_nngp = predict_fn(x_test=x_test, get='nngp') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8891401888405708
      ],
      "excerpt": "y_test_ntk = predict_fn(x_test=x_test, get='ntk') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9305494428776154
      ],
      "excerpt": "both = predict_fn(x_test=x_test, get=('nngp', 'ntk')) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8891401888405708
      ],
      "excerpt": "y_test_nngp, y_test_ntk = predict_fn(x_test=x_test, get=('nngp', 'ntk')) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9351865395579816
      ],
      "excerpt": "Tested using version 0.2.1. All GPU results are per single accelerator. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8618150443179252,
        0.8801854956928516
      ],
      "excerpt": "from jax import random \nfrom jax.example_libraries import stax \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8166533918724266,
        0.822697971909916
      ],
      "excerpt": "x = random.normal(key, (10, 100)) \n_, params = init_fn(key, input_shape=x.shape) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8618150443179252,
        0.8801854956928516
      ],
      "excerpt": "from jax import random \nfrom neural_tangents import stax \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8360952591184758,
        0.8161604412893626
      ],
      "excerpt": "x1 = random.normal(key1, (10, 100)) \nx2 = random.normal(key2, (20, 100)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8989120467860466,
        0.8989120467860466
      ],
      "excerpt": "nngp = kernel_fn(x1, x2, 'nngp') #: (10, 20) np.ndarray \nntk = kernel_fn(x1, x2, 'ntk') #: (10, 20) np.ndarray \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.887373174103313
      ],
      "excerpt": "import neural_tangents as nt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.884654479807887,
        0.8342761955252483
      ],
      "excerpt": "y_train = random.uniform(key1, shape=(10, 1))  #: training targets \npredict_fn = nt.predict.gradient_descent_mse_ensemble(kernel_fn, x_train, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8291504185281857
      ],
      "excerpt": ": (20, 1) np.ndarray test predictions of an infinite Bayesian network \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8708301271076276
      ],
      "excerpt": ": (20, 1) np.ndarray test predictions of an infinite continuous \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from neural_tangents import stax \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8142835995138061
      ],
      "excerpt": "  Main = stax.serial( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8367373747856013
      ],
      "excerpt": "as an example. With NVIDIA V100 64-bit precision, nt took 316/330/508 GPU-hours on full 60k CIFAR-10 dataset for Myrtle-5/7/10 kernels. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/google/neural-tangents/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/google/neural-tangents/main/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'\\n                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "News:",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "neural-tangents",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "google",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/google/neural-tangents/blob/main/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "romanngg",
        "body": "New Features:\r\n* [New nonlinearities](0409a42fadd9e6da1ec6680c23bddfd64e9d32ce): \r\n  * [`stax.Hermite`](https://neural-tangents.readthedocs.io/en/latest/neural_tangents.stax.html#neural_tangents.stax.Hermite);\r\n  * [`stax.Exp`](https://neural-tangents.readthedocs.io/en/latest/neural_tangents.stax.html#neural_tangents.stax.Exp);\r\n  * [`stax.Gaussian`](https://neural-tangents.readthedocs.io/en/latest/neural_tangents.stax.html#neural_tangents.stax.Gaussian);\r\n  * [`stax.ExpNormalized`](https://neural-tangents.readthedocs.io/en/latest/neural_tangents.stax.html#neural_tangents.stax.ExpNormalized).\r\n* [Support and default to `b_std=None` in `stax` layers, treated as symbolic zero, i.e. providing same behavior as `b_std=0.`, but without creating a redundant bias array.](7d01d6513bf7bce5d227aa9f223eb8353cc8c74b)\r\n\r\nBreaking changes:\r\n* [Bump requirements to JAX v0.2.25](65d80277e4f2d2b0c285bca52937a3248200877f). In consequence, drop CUDA 10 support to prevent https://github.com/google/neural-tangents/issues/122\r\n* [The `b_std=None` change could be breaking in very rare edge cases. The dummy bias array is replaced with `None` in this case and might potentially break your serialization routine.](7d01d6513bf7bce5d227aa9f223eb8353cc8c74b)",
        "dateCreated": "2021-11-17T06:10:15Z",
        "datePublished": "2021-11-17T06:35:11Z",
        "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.9",
        "name": "v0.3.9",
        "tag_name": "v0.3.9",
        "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.9",
        "url": "https://api.github.com/repos/google/neural-tangents/releases/53527865",
        "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.9"
      },
      {
        "authorType": "User",
        "author_name": "romanngg",
        "body": "New Features:\r\n\r\n* [`stax.Elementwise`](https://github.com/google/neural-tangents/commit/25788a98b4a93b80f4f695247c745453baa48bc5) - a layer for generic elementwise functions requiring the user to specify _only_ scalar-valued `nngp_fn : (cov12, var1, var2) |-> E[fn(x_1) * fn(x_2)]`. The NTK computation (thanks to @SiuMath) and vectorization over the underlying `Kernel` happen automatically under the hood. If you can't derive the `nngp_fn` for your function, use [`stax.ElementwiseNumerical`](https://neural-tangents.readthedocs.io/en/latest/neural_tangents.stax.html#neural_tangents.stax.ElementwiseNumerical). See [docs](https://neural-tangents.readthedocs.io/en/latest/neural_tangents.stax.html#neural_tangents.stax.Elementwise) for more details.\r\n\r\nBugfixes:\r\n\r\n* Compatibility with [JAX 0.2.21](https://github.com/google/jax/releases/tag/jax-v0.2.21).\r\n\r\n**Full Changelog**: https://github.com/google/neural-tangents/compare/v0.3.7...v0.3.8",
        "dateCreated": "2021-10-01T22:10:59Z",
        "datePublished": "2021-10-07T00:14:06Z",
        "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.8",
        "name": "v0.3.8",
        "tag_name": "v0.3.8",
        "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.8",
        "url": "https://api.github.com/repos/google/neural-tangents/releases/50928629",
        "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.8"
      },
      {
        "authorType": "User",
        "author_name": "romanngg",
        "body": "New Features:\r\n* [`nt.stax.Cos`](68e8df0ca2c0007b535ef8cd85c3a0d5a5392b68)\r\n* [`nt.stax.ImageResize`](f8a964feab46a96426440f8998c9039403f2a1d6)\r\n* [New implementation `implementation=\"SPARSE\"` in `nt.stax.Aggregate` for efficient handling of sparse graphs (see #86, #9)](b29337daf9a4e1f5b817f1689809021f52385f02)\r\n* [Support `approximate=True` in `nt.stax.Gelu`](6ab76aa3ed072f6c34bb61784178eb2d8b85c2cb)\r\n\r\nBugfixes:\r\n* [Fix a bug that might alter `Kernel` requirements](199b077fd0c6d4267db8e927a0c3c2a4e0a095cd)\r\n* [Fix `nt.batch` handling of `diagonal_axes` (see #87)](fd1611660c87edcb0c2e50403f691b60d2cc252b)\r\n* [Remove the frequent but redundant warning about type conversion in `kernel_fn`](b6eede90b7e89208e95d4154e0586c80a69d42a3)\r\n* [Minor fixes to documentation and code clean-up](https://github.com/google/neural-tangents/commit/8ca8b985f13ad431eb818e7e5f8986f693651de7#diff-0c18e3e747635221997019d022bea51886f28fa1f153e93f50069b763ee83710)\r\n\r\nBreaking changes:\r\n* [Parameters initialized by `init_fn` now follow the setting of `JAX_ENABLE_X64` instead of always defaulting to 32-bit (see #112)](https://github.com/google/jax/commit/693d2e20cf40e17b567c4a252f37a4d6b9366e5d)\r\n* [Drop python 3.6 support and add python 3.9 support](https://github.com/google/neural-tangents/commit/42cf4d55d4ab7525bd183b3f9e4d7dd889c3f810)",
        "dateCreated": "2021-08-23T21:30:53Z",
        "datePublished": "2021-08-23T23:15:21Z",
        "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.7",
        "name": "v0.3.7",
        "tag_name": "v0.3.7",
        "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.7",
        "url": "https://api.github.com/repos/google/neural-tangents/releases/48315121",
        "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.7"
      },
      {
        "authorType": "User",
        "author_name": "romanngg",
        "body": "New Features:\r\n* [`nt.stax.Sign`](https://github.com/google/neural-tangents/commit/dacd4f9c5531e93b4a0b70b9102414391c2f7b16)\r\n* [Allow to pass a `to_dense` function to `nt.stax.Aggregate` to allow storing the entire graph in a sparse format in GNNs.](https://github.com/google/neural-tangents/commit/9bb8816c7953aa97630a7984f9eae7a59c472d8f) See #86. \r\n* [Support `get=\"ntkgp\"` in `nt.predict.gp_inference (thanks @bobby-he!).](https://github.com/google/neural-tangents/commit/ae3af8aa677f71416a56c45545c593ca18060ce7) See #93 and https://arxiv.org/abs/2007.05864.\r\n\r\nBugfixes:\r\n* [Improve numerical stability of differentiating nonlinearities, and avoid `NaN`s, notably in `nt.stax.Relu`](https://github.com/google/neural-tangents/commit/b1e750cb86f98e73cfe426494e8c647a271df928). See #88 and #73.\r\n* [Allow to pass different test/train `kwargs` in `nt.predict.gradient_descent_mse_ensemble`](https://github.com/google/neural-tangents/commit/2d199177911f6939ad850be3f745f28f5b48f612). See #79.",
        "dateCreated": "2021-01-25T21:28:09Z",
        "datePublished": "2021-01-25T23:20:02Z",
        "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.6",
        "name": "v0.3.6",
        "tag_name": "v0.3.6",
        "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.6",
        "url": "https://api.github.com/repos/google/neural-tangents/releases/36887340",
        "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.6"
      },
      {
        "authorType": "User",
        "author_name": "romanngg",
        "body": "New features:\r\n- [Major speedup of the empirical NTK via `vmap_axes` ](https://github.com/google/neural-tangents/commit/f15b6528a47a73b1940f069309e69111b5235e13) - please see https://neural-tangents.readthedocs.io/en/latest/neural_tangents.empirical.html and discussion in #30\r\n- [Allow to compute maximum theoretical learning rate for a momentum optimizer](https://github.com/google/neural-tangents/commit/0916a4ff28be66c1664d331ca2aa2805340abbe3)\r\n- [Add an IMDB sentiment analysis example](https://github.com/google/neural-tangents/commit/49ace9611e3f459fe3fe91ba32d8748642d19e57)\r\n- [Allow pytrees as outputs of functions to linearize/taylorize](https://github.com/google/neural-tangents/commit/e639f6a857f2d588032b7f9e16144ee5e74846aa)\r\n\r\nBreaking changes:\r\n- [Fuse `nt.empirical_direct_ntk_fn`,  `nt.empirical_ntk_fn` into a single `nt.empirical_direct_ntk_fn` accepting `implementation=1/2` argument (`1` - direct, default; `2` - implicit)](https://github.com/google/neural-tangents/commit/f15b6528a47a73b1940f069309e69111b5235e13)\r\n- [Rename `nt.stax.NumericalActivation` into `nt.stax.ElementwiseNumerical`](https://github.com/google/neural-tangents/commit/8ac41614c60824ffd654b518c4c21d18f82b2945)\r\n\r\n[Minor bugfixes](https://github.com/google/neural-tangents/commit/06e8ffed34547f833d224899a0facb644a1e10be)\r\n",
        "dateCreated": "2020-11-18T01:42:02Z",
        "datePublished": "2020-11-18T04:34:54Z",
        "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.5",
        "name": "v0.3.5",
        "tag_name": "v0.3.5",
        "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.5",
        "url": "https://api.github.com/repos/google/neural-tangents/releases/34097302",
        "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.5"
      },
      {
        "authorType": "User",
        "author_name": "romanngg",
        "body": "New layers:\r\n* [`nt.stax.DotGeneral`](https://github.com/google/neural-tangents/commit/b582a89600860d331cb91064e3b0075a9e898c89)\r\n* [`nt.stax.ConvTranspose`](https://github.com/google/neural-tangents/commit/780ad0ce22d482bcefd12f4d3390090de7206da5)\r\n* [`nt.stax.ConvLocal`](https://github.com/google/neural-tangents/commit/cb6cf8027ecc72bc4964f7e24f56508f668678d2)\r\n\r\nNew features:\r\n* [Support arbitrary nested structures of arrays (tuples, lists of lists etc) as inputs and/or outputs](https://github.com/google/neural-tangents/commit/8a627885296715e51d162e326ebcb5796e30fe4b)\r\n* [You can now debug your NT code with `config.update('jax_numpy_rank_promotion', 'raise')`, as NT and related JAX code no longer rank-promote](https://github.com/google/neural-tangents/commit/be351c56e0b5ed293527292afdc9df48a21dc064)\r\n\r\nBreaking changes:\r\n* [Remove `nt.stax.GeneralConv` (use `nt.stax.Conv` instead)](https://github.com/google/neural-tangents/commit/dcc77da2c5aef24c2dd9baca00edd98dc47408f7)",
        "dateCreated": "2020-10-15T00:45:04Z",
        "datePublished": "2020-10-15T01:43:25Z",
        "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.4",
        "name": "v0.3.4",
        "tag_name": "v0.3.4",
        "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.4",
        "url": "https://api.github.com/repos/google/neural-tangents/releases/32592993",
        "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.4"
      },
      {
        "authorType": "User",
        "author_name": "romanngg",
        "body": "* [`nt.stax.Sigmoid_like`](https://github.com/google/neural-tangents/commit/de2a61d3097f9691290f2c67d61ed4f345b53bb6)\r\n* [`nt.stax.FanInProd`](https://github.com/google/neural-tangents/commit/484dfa24b95722206134bbc8a2c457988c794822)\r\n* [Speedup masking](https://github.com/google/neural-tangents/commit/74498fc8d106842869dda14cedf391f524d7c8be)\r\n* [Bugfixes](https://github.com/google/neural-tangents/commit/cfcda489548b0e5bf6e499416ac8b68bf4c612dc)",
        "dateCreated": "2020-09-01T23:59:56Z",
        "datePublished": "2020-09-02T00:54:22Z",
        "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.3",
        "name": "v0.3.3",
        "tag_name": "v0.3.3",
        "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.3",
        "url": "https://api.github.com/repos/google/neural-tangents/releases/30546471",
        "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.3"
      },
      {
        "authorType": "User",
        "author_name": "romanngg",
        "body": "* [Arbitrary nonlinearity approximation via Gaussian quadrature (`stax.NumericalActivation`)](https://github.com/google/neural-tangents/commit/841a33a03081680b6f09ebcdcc7b4e7b12378d22)\r\n* [Initial support for Graph Neural Networks (`stax.Aggregate`)](https://github.com/google/neural-tangents/commit/03be2577e82c35a3ddd95ef478976ead722e039b)\r\n* [Further improvements and new features for attention (`stax.GlobalSelfAtttention`)](https://github.com/google/neural-tangents/commit/253ddeaa4c34d75baac129efd9891e9c27efc5ee) from [Infinite attention: NNGP and NTK for deep attention networks](https://arxiv.org/abs/2006.10540)",
        "dateCreated": "2020-07-27T13:26:38Z",
        "datePublished": "2020-07-27T13:51:03Z",
        "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.2",
        "name": "v0.3.2",
        "tag_name": "v0.3.2",
        "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.2",
        "url": "https://api.github.com/repos/google/neural-tangents/releases/28987535",
        "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.2"
      },
      {
        "authorType": "User",
        "author_name": "romanngg",
        "body": "* New nonlinearities:  [`a Erf(b x + c)`](https://github.com/google/neural-tangents/commit/d7fc2dbb6844096fd382be78a0869de653542db0), [`Gelu`](https://github.com/google/neural-tangents/commit/70b983d5cb437c06baf213595da0a1c57f6a9533), [`RBF`](https://github.com/google/neural-tangents/commit/6be0179a252b4ff5b1fe8ba7426804f582e9ce1c)\r\n* [Numpy `1.19` compatibility](https://github.com/google/neural-tangents/commit/11d70e11c3ddcc11feae65f502ac0c42291b52ce)\r\n* Bugfixes and documentation improvements",
        "dateCreated": "2020-07-10T21:47:56Z",
        "datePublished": "2020-07-11T00:10:04Z",
        "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.1",
        "name": "v0.3.1",
        "tag_name": "v0.3.1",
        "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.1",
        "url": "https://api.github.com/repos/google/neural-tangents/releases/28460799",
        "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.1"
      },
      {
        "authorType": "User",
        "author_name": "romanngg",
        "body": "* [Huge overhaul of `nt.predict` and `nt.utils.empirical` for improved performance and cleaner API](https://github.com/google/neural-tangents/commit/a76bbb494f19af4f8c9c1a1b0904e91b105f769e) - breaking change!\r\n\r\n* [Support for `a sin(b x + c)` activation.](https://github.com/google/neural-tangents/commit/a936d8794c4cefc27359484c01eac77b4a4ddde1)\r\n\r\n* [Much improved and expanded documentation and type annotations](https://neural-tangents.readthedocs.io/en/latest/index.html)",
        "dateCreated": "2020-06-25T10:54:22Z",
        "datePublished": "2020-06-25T13:07:05Z",
        "html_url": "https://github.com/google/neural-tangents/releases/tag/v0.3.0",
        "name": "v0.3.0",
        "tag_name": "v0.3.0",
        "tarball_url": "https://api.github.com/repos/google/neural-tangents/tarball/v0.3.0",
        "url": "https://api.github.com/repos/google/neural-tangents/releases/27915958",
        "zipball_url": "https://api.github.com/repos/google/neural-tangents/zipball/v0.3.0"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1642,
      "date": "Fri, 24 Dec 2021 05:06:17 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "neural-networks",
      "infinite-networks",
      "gaussian-processes",
      "training-dynamics",
      "neural-tangents",
      "jax",
      "kernel",
      "deep-networks",
      "kernel-computation",
      "gradient-descent",
      "bayesian-networks",
      "bayesian-inference",
      "gradient-flow"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```python\nimport jax.numpy as np\nimport neural_tangents as nt\n\ndef apply_fn(params, x):\n  W, b = params\n  return np.dot(x, W) + b\n\nW_0 = np.array([[1., 0.], [0., 1.]])\nb_0 = np.zeros((2,))\n\napply_fn_lin = nt.linearize(apply_fn, (W_0, b_0))\nW = np.array([[1.5, 0.2], [0.1, 0.9]])\nb = b_0 + 0.2\n\nx = np.array([[0.3, 0.2], [0.4, 0.5], [1.2, 0.2]])\nlogits = apply_fn_lin((W, b), x)  #: (3, 2) np.ndarray\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```python\nimport jax.random as random\nimport jax.numpy as np\nimport neural_tangents as nt\n\ndef apply_fn(params, x):\n  W, b = params\n  return np.dot(x, W) + b\n\nW_0 = np.array([[1., 0.], [0., 1.]])\nb_0 = np.zeros((2,))\nparams = (W_0, b_0)\n\nkey1, key2 = random.split(random.PRNGKey(1), 2)\nx_train = random.normal(key1, (3, 2))\nx_test = random.normal(key2, (4, 2))\ny_train = random.uniform(key1, shape=(3, 2))\n\nkernel_fn = nt.empirical_kernel_fn(apply_fn)\nntk_train_train = kernel_fn(x_train, None, 'ntk', params)\nntk_test_train = kernel_fn(x_test, x_train, 'ntk', params)\nmse_predictor = nt.predict.gradient_descent_mse(ntk_train_train, y_train)\n\nt = 5.\ny_train_0 = apply_fn(params, x_train)\ny_test_0 = apply_fn(params, x_test)\ny_train_t, y_test_t = mse_predictor(t, y_train_0, y_test_0, ntk_test_train)\n#: (3, 2) and (4, 2) np.ndarray train and test outputs after `t` units of time\n#: training with continuous gradient descent\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}