{
  "citation": [
    {
      "confidence": [
        0.9330162938110961
      ],
      "excerpt": "this_player_action_space = {Action.FOLD, Action.CHECK, Action.CALL, Action.RAISE_POT, Action.RAISE_HAlF_POT} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9077026332015017
      ],
      "excerpt": "How to integrate your code on Github \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8095264976037084
      ],
      "excerpt": "Push your changes to your origin (your fork) (CTRL+SHIFT+K) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/dickreuter/neuron_poker",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-06-26T18:15:38Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-23T12:26:26Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9693233393948762
      ],
      "excerpt": "How to contribute \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9212677896369599
      ],
      "excerpt": "added to the table. As a third step the game is kicked off with a reset. Agents with autoplay set to True will automatically \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9785527303219189,
        0.8071903101910697
      ],
      "excerpt": "when using other packages which are designed to interface with the gym, such as keras-rl. \nAdding a new model / agent \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8796250201302246
      ],
      "excerpt": "To build a new agent, an agent needs to be created, where the follwing \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9832045181315443
      ],
      "excerpt": "which contains the current state of the table, the players and and the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9643108248241185
      ],
      "excerpt": "\"\"\"Mandatory method that calculates the move based on the observation array and the action space.\"\"\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8069284714157333
      ],
      "excerpt": "The state is represented as a numpy array that contains the following \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.952467879908543,
        0.9113928559706497
      ],
      "excerpt": "self.community_pot: float: the full pot of this hand \n        self.current_round_pot: float: the pot of funds added in this round \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9011904123700305
      ],
      "excerpt": "How to integrate your code on Github \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9057895904890082,
        0.9150795890823098
      ],
      "excerpt": "Add as remote the original repository where you created the fork from and call it upstream (the connection to your fork should be called origin). This can be done with vcs --> git --> remotes \nCreate a new branch: click on master at the bottom right, and then click on 'new branch' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9084008290071794,
        0.9231006063030855,
        0.921535555972569
      ],
      "excerpt": "To bring your branch up to date with upstream master, if it has moved on: rebase onto upstream master: click on your branch name at the bottom right of pycharm, then click on upstream/master, then rebase onto. You may need to resolve soe conflicts. Once this is done, make sure to always force-push (ctrl+shift+k), (not just push). This can be done by selecting the dropdown next to push and choose force-push (important: don't push and merge a rebased branch with your remote) \nCreate a pull request on your github.com to merge your branch with the upstream master. \nWhen your pull request is approved, it will be merged into the upstream/master. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Texas holdem OpenAi gym poker environment with reinforcement learning based on keras-rl. Includes virtual rendering and montecarlo for equity calculation.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/dickreuter/neuron_poker/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 117,
      "date": "Thu, 23 Dec 2021 23:26:34 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/dickreuter/neuron_poker/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "dickreuter/neuron_poker",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/dickreuter/neuron_poker/master/tools/speed_comparison.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8105027413050352
      ],
      "excerpt": "Training can be observed via tensorboard (run tensorboard --logdir=./Graph from command line) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.803524882913156
      ],
      "excerpt": "As you can see, as a first step, the environment needs to be created. As a second step, different agents need to be \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8787432216438114,
        0.9991591753392098
      ],
      "excerpt": "To contribute do the following: \nGet Pycharm and build the virtual python environment. Use can do: pip install -r requirements.txt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9351708831304723
      ],
      "excerpt": "Clone your fork to your local machine. You can do this directly from pycharm: VCS --> check out from version control --> git \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9303991875214563
      ],
      "excerpt": "Make your edits. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8411506094429749
      ],
      "excerpt": "Push your changes to your origin (your fork) (CTRL+SHIFT+K) \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9142789739573552
      ],
      "excerpt": "Launching from main.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8761281968404877
      ],
      "excerpt": "In main.py an agent is launched as follows (here adding 6 random \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8507524043464432
      ],
      "excerpt": "line, simply add another line in the docstring at the top of main.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8945951213914135
      ],
      "excerpt": "An example agent can be seen in random_agent.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8261645781685609
      ],
      "excerpt": "Ensure all tests pass. Under file --> settings --> python integrated tools switch to pytest (see screenshot). |image1| You can then just right click on the tests folder and run all tests. All tests need to pass. Make sure to add your own tests by simply naming the funtion test_... \\ \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/dickreuter/neuron_poker/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "C++",
      "Jupyter Notebook",
      "CMake"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Nicolas Dickreuter\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Neuron Poker: OpenAi gym environment for texas holdem poker",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "neuron_poker",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "dickreuter",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/dickreuter/neuron_poker/blob/master/readme.rst",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 342,
      "date": "Thu, 23 Dec 2021 23:26:34 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "poker",
      "openai-gym",
      "holdem",
      "reinforcement-learning",
      "neural-network",
      "gym-environment",
      "pokerbot"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- nb_steps_warmup = 75  ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "- nb_steps = 10000  ",
      "technique": "Header extraction"
    }
  ]
}