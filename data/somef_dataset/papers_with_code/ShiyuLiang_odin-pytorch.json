{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1706.02690",
      "https://arxiv.org/abs/1608.06993",
      "https://arxiv.org/abs/1605.07146",
      "https://arxiv.org/abs/1608.06993",
      "https://arxiv.org/abs/1605.07146",
      "https://arxiv.org/abs/1608.06993",
      "https://arxiv.org/abs/1605.07146"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "DenseNet-BC     |  4.81       | 22.37 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9398974979104496
      ],
      "excerpt": "DenseNet-BC trained on CIFAR-10| densenet10 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ShiyuLiang/odin-pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-06-05T16:53:55Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-14T03:47:03Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9816503906228724
      ],
      "excerpt": "This is a PyTorch implementation for detecting out-of-distribution examples in neural networks. The method is described in the paper Principled Detection of Out-of-Distribution Examples in Neural Networks by S. Liang, Yixuan Li and R. Srikant. The method reduces the false positive rate from the baseline 34.7% to 4.3% on the DenseNet (applied to CIFAR-10) when the true positive rate is 95%.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8500957040138919,
        0.9455066034426804,
        0.9023520991287051
      ],
      "excerpt": "We used two neural network architectures, DenseNet-BC and Wide ResNet. \nThe PyTorch implementation of DenseNet-BC is provided by Andreas Veit and Brandon Amos. The PyTorch implementation of Wide ResNet is provided  by Sergey Zagoruyko. \nThe experimental results are shown as follows. The definition of each metric can be found in the paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9193576610282301
      ],
      "excerpt": "args.nn: the arguments of neural networks are shown as follows \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9531661652739969,
        0.859425253488482
      ],
      "excerpt": "* args.out_dataset: the arguments of out-of-distribution datasets are shown as follows \nOut-of-Distribution Datasets     | args.out_dataset \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.890121537498454,
        0.859425253488482
      ],
      "excerpt": "args.magnitude: the optimal noise magnitude can be found below. In practice, the optimal choices of noise magnitude are model-specific and need to be tuned accordingly.  \nOut-of-Distribution Datasets        |   densenet10     |  densenet100  | wideresnet10   | wideresnet100 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.94167528662844
      ],
      "excerpt": "args.temperature: temperature is set to 1000 in all cases.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665037306309319
      ],
      "excerpt": "                      Baseline         Our Method \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Principled Detection of Out-of-Distribution Examples in Neural Networks",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "We provide download links of five out-of-distributin datasets:\n\n* **[Tiny-ImageNet (crop)](https://www.dropbox.com/s/avgm2u562itwpkl/Imagenet.tar.gz)**\n* **[Tiny-ImageNet (resize)](https://www.dropbox.com/s/kp3my3412u5k9rl/Imagenet_resize.tar.gz)**\n* **[LSUN (crop)](https://www.dropbox.com/s/fhtsw1m3qxlwj6h/LSUN.tar.gz)** \n* **[LSUN (resize)](https://www.dropbox.com/s/moqh2wh8696c3yl/LSUN_resize.tar.gz)** \n* **[iSUN](https://www.dropbox.com/s/ssz7qxfqae0cca5/iSUN.tar.gz)**\n\nHere is an example code of downloading Tiny-ImageNet (crop) dataset. In the **root** directory, run\n\n```\nmkdir data\ncd data\nwget https://www.dropbox.com/s/avgm2u562itwpkl/Imagenet.tar.gz\ntar -xvzf Imagenet.tar.gz\ncd ..\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "We provide download links of four pre-trained models. \n\n* **[DenseNet-BC trained on CIFAR-10](https://www.dropbox.com/s/wr4kjintq1tmorr/densenet10.pth.tar.gz)** \n* **[DenseNet-BC trained on CIFAR-100](https://www.dropbox.com/s/vxuv11jjg8bw2v9/densenet100.pth.tar.gz)**\n* **[Wide ResNet trained on CIFAR-10](https://www.dropbox.com/s/uiye5nw0uj6ie53/wideresnet10.pth.tar.gz)**\n* **[Wide ResNet trained on CIFAR-100](https://www.dropbox.com/s/uiye5nw0uj6ie53/wideresnet100.pth.tar.gz)** \n\nHere is an example code of downloading DenseNet-BC trained on CIFAR-10. In the **root** directory, run\n\n```\nmkdir models\ncd models\nwget https://www.dropbox.com/s/wr4kjintq1tmorr/densenet10.pth.tar.gz\ntar -xvzf densenet10.pth.tar.gz\ncd ..\n```\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ShiyuLiang/odin-pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 37,
      "date": "Sun, 26 Dec 2021 22:17:36 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ShiyuLiang/odin-pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ShiyuLiang/odin-pytorch",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9688026198411371,
        0.8404276047750752
      ],
      "excerpt": "args.gpu: make sure you use the following gpu when running the code: \nNeural Network Models |  args.gpu \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8741542412426502
      ],
      "excerpt": "<img src=\"./figures/original_optimal_shade.png\" width=\"500\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8638773573510456
      ],
      "excerpt": "Here is an example of output.  \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ShiyuLiang/odin-pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "ODIN: Out-of-Distribution Detector for Neural Networks",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "odin-pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ShiyuLiang",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ShiyuLiang/odin-pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* CUDA 8.0\n* PyTorch\n* Anaconda2 or 3\n* At least **three** GPU\n\n\t**Note:** Reproducing results of DenseNet-BC only requires **one** GPU, but reproducing results of Wide ResNet requires **three** GPUs. Single GPU version for Wide ResNet will be released soon in the future.  \n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Here is an example code reproducing the results of DenseNet-BC trained on CIFAR-10 where TinyImageNet (crop) is the out-of-distribution dataset. The temperature is set as 1000, and perturbation magnitude is set as 0.0014. In the **root** directory, run\n\n```\ncd code\n#: model: DenseNet-BC, in-distribution: CIFAR-10, out-distribution: TinyImageNet (crop)\n#: magnitude: 0.0014, temperature 1000, gpu: 0\npython main.py --nn densenet10 --out_dataset Imagenet --magnitude 0.0014 --temperature 1000 --gpu 0\n```\n**Note:** Please choose arguments according to the following. \n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 183,
      "date": "Sun, 26 Dec 2021 22:17:36 GMT"
    },
    "technique": "GitHub API"
  }
}