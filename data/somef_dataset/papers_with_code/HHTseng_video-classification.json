{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1512.03385"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9125460218470658
      ],
      "excerpt": "  - https://pythonprogramming.net/loading-video-python-opencv-tutorial/ \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/HHTseng/video-classification",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-11-15T01:30:50Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-23T08:52:21Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.914257599452163
      ],
      "excerpt": "The repository builds a quick and simple code for video classification (or action recognition) using UCF101 with PyTorch. A video is viewed as a 3D image or several continuous 2D images (Fig.1). Below are two simple neural nets models: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9377622707925597,
        0.9879489650111125,
        0.8450211884632544,
        0.926603277717877,
        0.8293671712747785
      ],
      "excerpt": "Use several 3D kernels of size (a,b,c) and channels n,  e.g., (a, b, c, n) = (3, 3, 3, 16) to convolve with video input, where videos are viewed as 3D images. Batch normalization and dropout are also used. \nThe CRNN model is a pair of CNN encoder and RNN decoder (see figure below): \n[encoder] A CNN function encodes (meaning compressing dimension) every 2D image x(t) into a 1D vector z(t) by <img src=\"./fig/f_CNN.png\" width=\"140\"> \n[decoder] A RNN receives a sequence input vectors z(t) from the CNN encoder and outputs another 1D sequence h(t). A final fully-connected neural net is concatenated at the end for categorical predictions.  \nHere the decoder RNN uses a long short-term memory (LSTM) network and the CNN encoder can be: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8535380487483905
      ],
      "excerpt": "a pretrained model ResNet-152 using image dataset ILSVRC-2012-CLS. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9940473462764737,
        0.9663815337614194
      ],
      "excerpt": "For 3D CNN: \nThe videos are resized as (t-dim, channels, x-dim, y-dim) = (28, 3, 256, 342) since CNN requires a fixed-size input. The minimal frame number 28 is the consensus of all videos in UCF101. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9716089060263335
      ],
      "excerpt": "For CRNN, the videos are resized as (t-dim, channels, x-dim, y-dim) = (28, 3, 224, 224) since the ResNet-152 only receives RGB inputs of size (224, 224). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9619379211780488,
        0.8496348847616915
      ],
      "excerpt": "In the test phase, the models are almost the same as the training phase, except that dropout has to be removed and batchnorm layer uses moving average and variance instead of mini-batch values. These are taken care by using \"model.eval()\". \nFor 3D CNN/ CRNN/ ResNetCRNN model, in each folder run \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8117766311465622
      ],
      "excerpt": "By default, the model outputs: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8971303408077181
      ],
      "excerpt": "To check model prediction: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9424580152628985,
        0.9693233393948762
      ],
      "excerpt": "As of today (May 31, 2019), it is found that in Pytorch 1.1.0 flatten_parameters() doesn't work under torch.no_grad and DataParallel (for multiple GPUs). Early versions before Pytorch 1.0.1 still run OK. See Issues \nThanks to raghavgarg97's report. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9356365560175316
      ],
      "excerpt": "Some pretrained models can be found here, thanks to the suggestion of MinLiAmoy. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9781178010151815,
        0.9392373251571594,
        0.9392373251571594
      ],
      "excerpt": "3D CNN                  |   4  |  50.84 % |  \n2D CNN + LSTM           |  25  |  54.62 % |  \n2D ResNet152-CNN + LSTM |  53  |85.68 % |       \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Tutorial for video classification/ action recognition using 3D CNN/ CNN+RNN on UCF101",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "For convenience, we use preprocessed UCF101 dataset already sliced into RGB images [feichtenhofer/twostreamfusion](https://github.com/feichtenhofer/twostreamfusion):\n\n\n- **UCF101 RGB:** [**part1**](http://ftp.tugraz.at/pub/feichtenhofer/tsfusion/data/ucf101_jpegs_256.zip.001),\n[**part2**](http://ftp.tugraz.at/pub/feichtenhofer/tsfusion/data/ucf101_jpegs_256.zip.002),\n[**part3**](http://ftp.tugraz.at/pub/feichtenhofer/tsfusion/data/ucf101_jpegs_256.zip.003) \n\n\nPut the 3 parts in same folder to unzip. The folder has default name: **jpegs_256**.\n\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/HHTseng/video-classification/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 176,
      "date": "Thu, 23 Dec 2021 15:13:41 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/HHTseng/video-classification/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "HHTseng/video-classification",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/HHTseng/video-classification/master/ResNetCRNN/check_predictions/check_video_predictions.ipynb",
      "https://raw.githubusercontent.com/HHTseng/video-classification/master/ResNetCRNN/check_predictions/.ipynb_checkpoints/check_video_predictions-checkpoint.ipynb",
      "https://raw.githubusercontent.com/HHTseng/video-classification/master/ResNetCRNN/outputs/replot_loss.ipynb",
      "https://raw.githubusercontent.com/HHTseng/video-classification/master/ResNetCRNN/outputs/.ipynb_checkpoints/replot_loss-checkpoint.ipynb",
      "https://raw.githubusercontent.com/HHTseng/video-classification/master/CRNN/check_predictions/check_video_predictions.ipynb",
      "https://raw.githubusercontent.com/HHTseng/video-classification/master/CRNN/outputs/replot_loss.ipynb",
      "https://raw.githubusercontent.com/HHTseng/video-classification/master/ResNetCRNN_varylength/check_predictions/check_video_predictions.ipynb",
      "https://raw.githubusercontent.com/HHTseng/video-classification/master/ResNetCRNN_varylength/results/replot_loss.ipynb",
      "https://raw.githubusercontent.com/HHTseng/video-classification/master/Conv3D/check_predictions/check_video_predictions.ipynb",
      "https://raw.githubusercontent.com/HHTseng/video-classification/master/Conv3D/check_predictions/.ipynb_checkpoints/check_video_predictions-checkpoint.ipynb",
      "https://raw.githubusercontent.com/HHTseng/video-classification/master/Conv3D/outputs/replot_loss.ipynb",
      "https://raw.githubusercontent.com/HHTseng/video-classification/master/Conv3D/outputs/.ipynb_checkpoints/replot_loss-checkpoint.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "In `UCF101_CRNN.py`, for example set \n```\ndata_path = \"./UCF101/jpegs_256/\"         #: UCF101 video path\naction_name_path = \"./UCF101actions.pkl\"\nsave_model_path = \"./model_ckpt/\"\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9147635191344903
      ],
      "excerpt": "<img src=\"./fig/CRNN.png\" width=\"650\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "$ python UCF101_3DCNN/CRNN/ResNetCRNN.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8241072527732797
      ],
      "excerpt": "  - Run check_model_prediction.py to load best training model and generate all 13,320 video prediction list in Pandas dataframe. File output: UCF101_Conv3D_videos_prediction.pkl. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9147635191344903
      ],
      "excerpt": "<img src=\"./fig/wrong_pred.png\" width=\"600\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9147635191344903,
        0.9147635191344903,
        0.9147635191344903
      ],
      "excerpt": "<img src=\"./fig/loss_3DCNN.png\" width=\"650\"> \n<img src=\"./fig/loss_CRNN.png\" width=\"650\"> \n<img src=\"./fig/loss_ResNetCRNN.png\" width=\"650\"> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/HHTseng/video-classification/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Video Classification",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "video-classification",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "HHTseng",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/HHTseng/video-classification/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- [Python 3.6](https://www.python.org/)\n- [PyTorch 1.0.0](https://pytorch.org/)\n- [Numpy 1.15.0](http://www.numpy.org/)\n- [Sklearn 0.19.2](https://scikit-learn.org/stable/)\n- [Matplotlib](https://matplotlib.org/)\n- [Pandas](https://pandas.pydata.org/)\n- [tqdm](https://github.com/tqdm/tqdm)\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 676,
      "date": "Thu, 23 Dec 2021 15:13:41 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "action-recognition",
      "video-classification",
      "pytorch-tutorial",
      "cnn",
      "rnn",
      "lstm",
      "resnet",
      "ucf101",
      "transfer-learning"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "For tutorial purpose, I try to build code as simple as possible. Essentially, **only 3 files are needed to for each model**. *eg.,* for 3D-CNN model\n  - `UCF101_3DCNN.py`: model parameters, training/testing process.\n  - `function.py`: modules of 3DCNN & CRNN, data loaders, and some useful functions.\n  - `UCF101actions.pkl`: 101 action names (labels), e.g, *'BenchPress', 'SkyDiving' , 'Bowling', etc.*\n\n",
      "technique": "Header extraction"
    }
  ]
}