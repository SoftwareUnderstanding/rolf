{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1312.6114",
      "https://arxiv.org/abs/1506.07365",
      "https://arxiv.org/abs/1312.6114](https://arxiv.org/abs/1312.6114))\n - A Linear Latent Dynamic Variational AutoEncoder (LLD VAE) in\n   [`benchmarks/VAE_LLD.py`](benchmarks/VAE_LLD.py) (paper\n   [https://arxiv.org/abs/1506.07365](https://arxiv.org/abs/1506.07365))\n \n After training an autoencoder, it can be used by setting one of these\n Jitterbug attributes to True, depending on the autoencoder to use:\n `self.use_autoencoder`, `self.use_denoising_autoencoder`,\n `self.use_VAE`, `self.use_VAE_LLD`.\n Note that the name of the file containing the autoencoder model needs to be\n specified in the `self.jitterbug_autoencder.load_autoencoder()` function.\n\n### Augmented Sequential Learning\n\nTo make the learning process more robust, `benchmark.py` offers the\npossibility to learn sequentially using augmented Jitterbugs.\nAn augmented Jitterbug is a randomly modified version of the original XML file. \nTo sequentially run 10 simulations with different randomly shaped Jitterbugs,\nenter the command\n`python benchmark.py --alg sac --task move_in_direction --logdir /path/to/desired/directory/ --domain augmented_jitterbug --num_sim 10`.\nFrom this, it will execute the following algorithm:\n \n - Step 1: Generate an `augmented_jitterbug.xml` file by randomly modifying\n   the original `jitterbug.xml` file.\n - Step 2: Start learning a policy for 1e6 steps.\n - Step 3: Save the policy and go back to step 1. Repeat the process 10 times.\n \nThe results of such a sequential learning are shown in figure\n[`manuscript/figures/sac10seq.pdf`](manuscript/figures/sac10seq.pdf).\n \nNote that by default, only the shape of the legs and the mass are modified.\nMore features can be tweaked such as (see\n[`jitterbug_dmc/augmented_jitterbug.py`](jitterbug_dmc/augmented_jitterbug.py):\n \n - CoreBody1 density\n - CoreBody2 density\n - The global density\n - The gear\n \nExamples of augmented Jitterbugs are displayed below:\n\nAugmented Jitterbug #1\n![Augmented Jitterbug #1](figures/aj1.png)\n\nAugmented Jitterbug #2\n![Augmented Jitterbug #2](figures/aj2.png)\n\n## Common Problems\n\n### Ubuntu: Problems with GLFW drivers \n\nIf you're using Ubuntu 16.04, you may have problems with the GLFW dirvers.\nSwitching to osmesa (software rendering) may fix this,\n\n```bash\nexport MUJOCO_GL=osmesa\n```\n\n### OpenMPI Wheel Fails To Build\n\n\n\n### `libprotobuf` Version Mismatch Error\n\nWe observed this happening sometimes on Ubuntu 16.04.5 LTS when running\n`import jitterbug_dmc` from python, even when the installed version of protobuf\nis correct.\nIt seems to be something wrong with the Ubuntu tensorflow build that gets\ninstalled by pip.\nHowever, this doesn't seem to stop the `benchmarks/benchmark.py` file from\nworking.\n\n```bash\n[libprotobuf FATAL google/protobuf/stubs/common.cc:61] This program requires version 3.7.0 of the Protocol Buffer runtime library, but the installed version is 2.6.1.  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"bazel-out/k8-opt/genfiles/tensorflow/core/framework/tensor_shape.pb.cc\".)\nterminate called after throwing an instance of 'google::protobuf::FatalException'\n  what():  This program requires version 3.7.0 of the Protocol Buffer runtime library, but the installed version is 2.6.1.  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"bazel-out/k8-opt/genfiles/tensorflow/core/framework/tensor_shape.pb.cc\".)\n```\n\nSome links to more information;\n\n - https://devtalk.nvidia.com/default/topic/1037736/jetson-tx2/protobuf-version-error/\n - https://devtalk.nvidia.com/default/topic/1046492/tensorrt/extremely-long-time-to-load-trt-optimized-frozen-tf-graphs/post/5315675/#5315675\n - https://askubuntu.com/questions/1029394/protobuf-error-on-ubuntu-16-using-tensorflow\n - https://devtalk.nvidia.com/default/topic/1008180/tensorflow-and-protobuf-/\n - https://github.com/NVIDIA/DIGITS/issues/2061\n - https://stackoverflow.com/questions/46627874/protobuf-version-mismatch#50481381",
      "https://arxiv.org/abs/1506.07365](https://arxiv.org/abs/1506.07365))\n \n After training an autoencoder, it can be used by setting one of these\n Jitterbug attributes to True, depending on the autoencoder to use:\n `self.use_autoencoder`, `self.use_denoising_autoencoder`,\n `self.use_VAE`, `self.use_VAE_LLD`.\n Note that the name of the file containing the autoencoder model needs to be\n specified in the `self.jitterbug_autoencder.load_autoencoder()` function.\n\n### Augmented Sequential Learning\n\nTo make the learning process more robust, `benchmark.py` offers the\npossibility to learn sequentially using augmented Jitterbugs.\nAn augmented Jitterbug is a randomly modified version of the original XML file. \nTo sequentially run 10 simulations with different randomly shaped Jitterbugs,\nenter the command\n`python benchmark.py --alg sac --task move_in_direction --logdir /path/to/desired/directory/ --domain augmented_jitterbug --num_sim 10`.\nFrom this, it will execute the following algorithm:\n \n - Step 1: Generate an `augmented_jitterbug.xml` file by randomly modifying\n   the original `jitterbug.xml` file.\n - Step 2: Start learning a policy for 1e6 steps.\n - Step 3: Save the policy and go back to step 1. Repeat the process 10 times.\n \nThe results of such a sequential learning are shown in figure\n[`manuscript/figures/sac10seq.pdf`](manuscript/figures/sac10seq.pdf).\n \nNote that by default, only the shape of the legs and the mass are modified.\nMore features can be tweaked such as (see\n[`jitterbug_dmc/augmented_jitterbug.py`](jitterbug_dmc/augmented_jitterbug.py):\n \n - CoreBody1 density\n - CoreBody2 density\n - The global density\n - The gear\n \nExamples of augmented Jitterbugs are displayed below:\n\nAugmented Jitterbug #1\n![Augmented Jitterbug #1](figures/aj1.png)\n\nAugmented Jitterbug #2\n![Augmented Jitterbug #2](figures/aj2.png)\n\n## Common Problems\n\n### Ubuntu: Problems with GLFW drivers \n\nIf you're using Ubuntu 16.04, you may have problems with the GLFW dirvers.\nSwitching to osmesa (software rendering) may fix this,\n\n```bash\nexport MUJOCO_GL=osmesa\n```\n\n### OpenMPI Wheel Fails To Build\n\n\n\n### `libprotobuf` Version Mismatch Error\n\nWe observed this happening sometimes on Ubuntu 16.04.5 LTS when running\n`import jitterbug_dmc` from python, even when the installed version of protobuf\nis correct.\nIt seems to be something wrong with the Ubuntu tensorflow build that gets\ninstalled by pip.\nHowever, this doesn't seem to stop the `benchmarks/benchmark.py` file from\nworking.\n\n```bash\n[libprotobuf FATAL google/protobuf/stubs/common.cc:61] This program requires version 3.7.0 of the Protocol Buffer runtime library, but the installed version is 2.6.1.  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"bazel-out/k8-opt/genfiles/tensorflow/core/framework/tensor_shape.pb.cc\".)\nterminate called after throwing an instance of 'google::protobuf::FatalException'\n  what():  This program requires version 3.7.0 of the Protocol Buffer runtime library, but the installed version is 2.6.1.  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"bazel-out/k8-opt/genfiles/tensorflow/core/framework/tensor_shape.pb.cc\".)\n```\n\nSome links to more information;\n\n - https://devtalk.nvidia.com/default/topic/1037736/jetson-tx2/protobuf-version-error/\n - https://devtalk.nvidia.com/default/topic/1046492/tensorrt/extremely-long-time-to-load-trt-optimized-frozen-tf-graphs/post/5315675/#5315675\n - https://askubuntu.com/questions/1029394/protobuf-error-on-ubuntu-16-using-tensorflow\n - https://devtalk.nvidia.com/default/topic/1008180/tensorflow-and-protobuf-/\n - https://github.com/NVIDIA/DIGITS/issues/2061\n - https://stackoverflow.com/questions/46627874/protobuf-version-mismatch#50481381"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8690140377415217
      ],
      "excerpt": "   benchmarks/VAE.py (paper arXiv:1312.6114) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9490753289412834
      ],
      "excerpt": "   arXiv:1506.07365) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/RoboticsDesignLab/jitterbug",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-04-30T09:47:53Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-09-22T17:08:45Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8064847830302502,
        0.9118586819557846
      ],
      "excerpt": "implemented using the MuJoCo physics engine and \ndistributed as an extension to the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9851794891783014
      ],
      "excerpt": "This model is also available on the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8071772579651838
      ],
      "excerpt": "Upon importing jitterbug_dmc, the domain and tasks are added to the standard \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9301555403158001,
        0.8508434549116414
      ],
      "excerpt": "For convenience, we also provide an OpenAI Gym \ncompatible interface to this environment using the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8233873079052552
      ],
      "excerpt": "We provide a heuristic reference policy for each task in the module \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8570592151161502
      ],
      "excerpt": "All tasks require the jitterbug to remain upright at all times. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8345365203930989
      ],
      "excerpt": "Four algorithms are implemented in benchmark.py, all using the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9646822501020927
      ],
      "excerpt": "The learning performances of the 4 algorithms on each task is shown in \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.844532940616944
      ],
      "excerpt": " Note that the name of the file containing the autoencoder model needs to be \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8129305160888957,
        0.9091094122788279,
        0.9123305920037443
      ],
      "excerpt": "To make the learning process more robust, benchmark.py offers the \npossibility to learn sequentially using augmented Jitterbugs. \nAn augmented Jitterbug is a randomly modified version of the original XML file.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9538833884703802
      ],
      "excerpt": "The results of such a sequential learning are shown in figure \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9682927598151877,
        0.9357124945066555
      ],
      "excerpt": "Note that by default, only the shape of the legs and the mass are modified. \nMore features can be tweaked such as (see \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490037945672047
      ],
      "excerpt": "The gear \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A Jitterbug dm_control Reinforcement Learning domain",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/RoboticsDesignLab/jitterbug/releases",
    "technique": "GitHub API"
  },
  "faq": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you're using Ubuntu 16.04, you may have problems with the GLFW dirvers.\nSwitching to osmesa (software rendering) may fix this,\n\n```bash\nexport MUJOCO_GL=osmesa\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "We observed this happening sometimes on Ubuntu 16.04.5 LTS when running\n`import jitterbug_dmc` from python, even when the installed version of protobuf\nis correct.\nIt seems to be something wrong with the Ubuntu tensorflow build that gets\ninstalled by pip.\nHowever, this doesn't seem to stop the `benchmarks/benchmark.py` file from\nworking.\n\n```bash\n[libprotobuf FATAL google/protobuf/stubs/common.cc:61] This program requires version 3.7.0 of the Protocol Buffer runtime library, but the installed version is 2.6.1.  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"bazel-out/k8-opt/genfiles/tensorflow/core/framework/tensor_shape.pb.cc\".)\nterminate called after throwing an instance of 'google::protobuf::FatalException'\n  what():  This program requires version 3.7.0 of the Protocol Buffer runtime library, but the installed version is 2.6.1.  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"bazel-out/k8-opt/genfiles/tensorflow/core/framework/tensor_shape.pb.cc\".)\n```\n\nSome links to more information;\n\n - https://devtalk.nvidia.com/default/topic/1037736/jetson-tx2/protobuf-version-error/\n - https://devtalk.nvidia.com/default/topic/1046492/tensorrt/extremely-long-time-to-load-trt-optimized-frozen-tf-graphs/post/5315675/#5315675\n - https://askubuntu.com/questions/1029394/protobuf-error-on-ubuntu-16-using-tensorflow\n - https://devtalk.nvidia.com/default/topic/1008180/tensorflow-and-protobuf-/\n - https://github.com/NVIDIA/DIGITS/issues/2061\n - https://stackoverflow.com/questions/46627874/protobuf-version-mismatch#50481381\n",
      "technique": "Header extraction"
    }
  ],
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Tue, 28 Dec 2021 07:11:50 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/RoboticsDesignLab/jitterbug/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "RoboticsDesignLab/jitterbug",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/RoboticsDesignLab/jitterbug/master/fig-heatmap.ipynb",
      "https://raw.githubusercontent.com/RoboticsDesignLab/jitterbug/master/fig-heatmap-dae.ipynb",
      "https://raw.githubusercontent.com/RoboticsDesignLab/jitterbug/master/fig-motor-hist.ipynb",
      "https://raw.githubusercontent.com/RoboticsDesignLab/jitterbug/master/fig-rl-perf.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This package is not distributed on PyPI - you will have to install it from\nsource:\n\n```bash\n$> git clone github.com/aaronsnoswell/jitterbug-dmc\n$> cd jitterbug-dmc\n$> pip install .\n```\n\nTo test the installation:\n\n```bash\n$> cd ~\n$> python\n>>> import jitterbug_dmc\n>>> jitterbug_dmc.demo()\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9762051993497409
      ],
      "excerpt": "following command from the 'benchmarks' directory: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8274624028883069
      ],
      "excerpt": "enter the command \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8327775533971152,
        0.8801854956928516,
        0.9133368656218674,
        0.9457175861910134
      ],
      "excerpt": "from dm_control import suite \nfrom dm_control import viewer \nimport jitterbug_dmc \nimport numpy as np \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "    visualize_reward=True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8669917184076883
      ],
      "excerpt": "    return np.random.uniform( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.812800519552845
      ],
      "excerpt": "        size=action_spec.shape \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8327775533971152,
        0.9133368656218674
      ],
      "excerpt": "from dm_control import suite \nimport jitterbug_dmc \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "        visualize_reward=True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8807391006917342
      ],
      "excerpt": "python benchmark.py --alg sac --task move_in_direction --logdir /path/to/desired/directory/. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": "   benchmarks/autoencoder.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": "   benchmarks/denoising_autoencoder.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": "   benchmarks/ddae.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8823290917930633
      ],
      "excerpt": "python benchmark.py --alg sac --task move_in_direction --logdir /path/to/desired/directory/ --domain augmented_jitterbug --num_sim 10. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/RoboticsDesignLab/jitterbug/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "TeX",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "jitterbug-dmc",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "jitterbug",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "RoboticsDesignLab",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/RoboticsDesignLab/jitterbug/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This package is designed for Python 3.6+ (but may also work with Python 3.5) \nunder Windows, Mac or Linux.\n\nThe only pre-requisite package is\n[`dm_control`](https://github.com/deepmind/dm_control).\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Tue, 28 Dec 2021 07:11:50 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "reinforcement-learning",
      "machine-learning",
      "continuous-control",
      "deepmind",
      "deep-learning",
      "benchmark",
      "mujoco"
    ],
    "technique": "GitHub API"
  }
}