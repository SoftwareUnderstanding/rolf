{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1705.01968",
      "https://arxiv.org/abs/1602.04938"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9993073610965789
      ],
      "excerpt": "Published at IEEE VAST 2017. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "        \"=[0, 10)\", \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nyuvis/explanation_explorer",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-04-20T21:02:06Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-12T20:28:20Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9061824928190968,
        0.9067401417772669,
        0.8754812988446453
      ],
      "excerpt": "The Explanation Explorer is a visual interface to explore similarly explained data items. \nHaving a trained machine learning model it is possible to create explanations for \ndata items by probing model inputs. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9788041399836664
      ],
      "excerpt": "an interactive way of exploring the significants and quantity of those explanations \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9357180350971048
      ],
      "excerpt": "A Workflow for Visual Diagnostics of Binary Classifiers using Instance-Level Explanations; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9258800243958166
      ],
      "excerpt": "In order to create explanations you can implement a subclass of the Model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.889355152009312,
        0.8596108881278283,
        0.8594402071730894,
        0.864473450983862
      ],
      "excerpt": "file in the current folder) which contains the definition of YourModel which \nis a subclass of defs.Model. output is the folder where the two output \nfiles (the input to ./server.py) are written to. \n./create_explanations.py uses an adaption of the LIME algorithm by default. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8430542051916434,
        0.9227403266715706
      ],
      "excerpt": "As of now the project requires two input files. \nThe input data and the explanation description. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9003863391151292
      ],
      "excerpt": "the file should only contain rows of the validation data set. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9953979881798097,
        0.8873710501536166
      ],
      "excerpt": "of the features that are 1 (the data has to be binary for that). \nThe explanation description is a JSON file of the following format: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8060704607338698
      ],
      "excerpt": "  \"test_auc\": 0.85, // area under ROC curve for the explained set \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.970156403207563,
        0.9825652318235221
      ],
      "excerpt": "  \"total_rows\": 135, // number of rows in the input data that belong to the explained set (used for integrity check) \n  \"total_true\": 71, // number of rows with a `1` label in the input data that belong to the explained set (used for integrity check) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9579647568252985,
        0.9084348787394072
      ],
      "excerpt": "  \"features\": [ \"foo\", \"bar\", ... ], // names of the features corresponding to the input data \n  \"expls\": [ // array of explanations for each data item in order of the ixs array \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8982146475114987,
        0.8490037945672047
      ],
      "excerpt": "      \"pred_label\": 0, // the predicted label 0 or 1 using the threshold from above (used for integrity check) \n      \"expl\": [ // the explanation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9052656557997021
      ],
      "excerpt": "pred (containing the prediction score of the current row between 0.0 and 1.0). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8873710501536166
      ],
      "excerpt": "The explanation description is a JSON file of the following format: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9797796693232885,
        0.9564904050032768,
        0.9378421901790875,
        0.970156403207563,
        0.9825652318235221,
        0.8841573939880707,
        0.9579647568252985,
        0.9084348787394072
      ],
      "excerpt": "  \"ixs\": [ 0, 1, 2, ... ], // indices of rows in the input data that belong to the explained set \n  \"train_ixs\": [ 135, 136, 137, ... ], // indices of rows in the input data that belong to the training set \n  \"total_features\": 1400, // number of features (used for integrity check) \n  \"total_rows\": 135, // number of rows in the input data that belong to the explained set (used for integrity check) \n  \"total_true\": 71, // number of rows with a `1` label in the input data that belong to the explained set (used for integrity check) \n  \"train_preds\": [ 0.2, 0.113, ... ], // prediction scores for training data in order of the train_ixs array \n  \"features\": [ \"foo\", \"bar\", ... ], // names of the features corresponding to the input data \n  \"expls\": [ // array of explanations for each data item in order of the ixs array \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9304215796699792
      ],
      "excerpt": "      \"down\": [ // removing features (aka. setting features to 0) to reduce the prediction score \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9227321581415983
      ],
      "excerpt": "      \"up\": [ // removing features to increase the prediction score \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A user interface to interpret machine learning models.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nyuvis/explanation_explorer/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Fri, 24 Dec 2021 12:38:52 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/nyuvis/explanation_explorer/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "nyuvis/explanation_explorer",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/nyuvis/explanation_explorer/master/example/airbnb/airbnb_new_york.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8417614701186072
      ],
      "excerpt": "      \"pred_label\": 0, // the predicted label 0 or 1 using the threshold from above (used for integrity check) \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8375351490039238
      ],
      "excerpt": "class in defs.py. Then you can call create_explanations.py with: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9360510332665533
      ],
      "excerpt": "./create_explanations.py yourfile YourModel output \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8011699591975879
      ],
      "excerpt": "is a subclass of defs.Model. output is the folder where the two output \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8459470946456739
      ],
      "excerpt": "example_airbnb.py contains an example implementation for a text data set \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9360510332665533
      ],
      "excerpt": "./create_explanations.py example_airbnb AirbnbModel output \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8833908339984571
      ],
      "excerpt": "./server.py output/airbnbmodel.csr output/airbnbmodel.lime.json \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9360510332665533
      ],
      "excerpt": "./create_explanations.py example_mushroom MushroomModel output \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9083595491232276,
        0.8075178075772667
      ],
      "excerpt": "./server.py output/mushroommodel.csv output/mushroommodel.lime.json \nAs of now the project requires two input files. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8099729796196791
      ],
      "excerpt": "  \"features\": [ \"foo\", \"bar\", ... ], // names of the features corresponding to the input data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8099729796196791
      ],
      "excerpt": "  \"features\": [ \"foo\", \"bar\", ... ], // names of the features corresponding to the input data \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/nyuvis/explanation_explorer/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "JavaScript",
      "Python",
      "HTML",
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "BSD 3-Clause \"New\" or \"Revised\" License",
      "url": "https://api.github.com/licenses/bsd-3-clause"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Explanation Explorer",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "explanation_explorer",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "nyuvis",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nyuvis/explanation_explorer/blob/master/readme.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 68,
      "date": "Fri, 24 Dec 2021 12:38:52 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "visualization-application",
      "visual-interface",
      "machine-learning",
      "interpretability"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The project consists of a `python` server with a web front-end.\nTo get started clone the repository and run:\n\n```bash\ngit submodule update --init --recursive\npip install -r requirements.txt\n```\n\nAfter that the project is ready to run.\n\n```bash\n./server.py input.csv expl.json\n```\n\nwhere `input.csv` and `expl.json` are files as described [below](#input-format)\nor as created with [`create_explanations.py`](#creating-explanations).\nOnce the server is started navigate to the URL as prompted in the server output.\n\nRun `./server.py -h` to get a list of all input arguments.\n\n",
      "technique": "Header extraction"
    }
  ]
}