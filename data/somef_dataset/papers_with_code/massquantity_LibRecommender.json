{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "|     Algorithm     | Category | Paper                                                        |\n| :---------------: | :------: | :----------------------------------------------------------- |\n| userCF / itemCF |   pure   | [Item-Based Collaborative Filtering Recommendation Algorithms](http://www.ra.ethz.ch/cdstore/www10/papers/pdf/p519.pdf) |\n|        SVD        |   pure   | [Matrix Factorization Techniques for Recommender Systems](https://datajobs.com/data-science-repo/Recommender-Systems-[Netflix].pdf) |\n|      SVD ++       |   pure   | [Factorization Meets the Neighborhood: a Multifaceted Collaborative Filtering Model](https://dl.acm.org/citation.cfm?id=1401944) |\n|        ALS        |   pure   | 1. [Matrix Completion via Alternating Least Square(ALS)](https://stanford.edu/~rezab/classes/cme323/S15/notes/lec14.pdf) / <br>2. [Collaborative Filtering for Implicit Feedback Datasets](http://yifanhu.net/PUB/cf.pdf) / <br>3. [Applications of the Conjugate Gradient Method for Implicit Feedback Collaborative Filtering](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.379.6473&rep=rep1&type=pdf) |\n|        NCF        |   pure   | [Neural Collaborative Filtering](https://arxiv.org/pdf/1708.05031.pdf) |\n|        BPR        |   pure   | [BPR: Bayesian Personalized Ranking from Implicit Feedback](https://arxiv.org/ftp/arxiv/papers/1205/1205.2618.pdf) |\n|    Wide & Deep    |   feat   | [Wide & Deep Learning for Recommender Systems](https://arxiv.org/pdf/1606.07792.pdf) |\n|        FM         |   feat   | [Factorization Machines](https://www.csie.ntu.edu.tw/~b97053/paper/Rendle2010FM.pdf) |\n|      DeepFM       |   feat   | [DeepFM: A Factorization-Machine based Neural Network for CTR Prediction](https://arxiv.org/pdf/1703.04247.pdf) |\n|   YouTubeMatch  YouTubeRanking |   feat, seq   | [Deep Neural Networks for YouTube Recommendations](<https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/45530.pdf>) |\n| AutoInt | feat | [AutoInt: Automatic Feature Interaction Learning via Self-Attentive Neural Networks](https://arxiv.org/pdf/1810.11921.pdf) |\n|        DIN        |   feat, seq   | [Deep Interest Network for Click-Through Rate Prediction](https://arxiv.org/pdf/1706.06978.pdf) |\n| Item2Vec | pure, seq | [Item2Vec: Neural Item Embedding for Collaborative Filtering](https://arxiv.org/pdf/1603.04259.pdf) |\n| RNN4Rec / GRU4Rec | pure, seq | [Session-based Recommendations with Recurrent Neural Networks](https://arxiv.org/pdf/1511.06939.pdf) |\n| Caser | pure, seq | [Personalized Top-N Sequential Recommendation via Convolutional Sequence Embedding](https://arxiv.org/pdf/1809.07426.pdf) |\n| WaveNet | pure, seq | [WaveNet: A Generative Model for Raw Audio](https://arxiv.org/pdf/1609.03499.pdf) |\n\n> `pure` means collaborative-filtering algorithms which only use behavior data,  `feat` means other features can be included, `seq` means sequence or graph algorithms.\n\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/massquantity/LibRecommender",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-03-08T07:58:27Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-20T09:23:24Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9664491454063684,
        0.892545380676276,
        0.9200284178862491
      ],
      "excerpt": "LibRecommender is an easy-to-use recommender system focused on end-to-end recommendation. The main features are: \nImplemented a number of popular recommendation algorithms such as SVD++, DeepFM, BPR etc, see full algorithm list. \nA hybrid recommender system, which allows user to use either collaborative-filtering or content-based features or both. New features can be added on the fly. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.876661440176167,
        0.9122108981235724
      ],
      "excerpt": "Making use of Cython or Tensorflow for high-speed model training. \nProvide end-to-end workflow, i.e. data handling / preprocessing -> model training -> evaluate -> serving. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9924578318850789
      ],
      "excerpt": "Provide unified and friendly API for all algorithms. Easy to retrain model with new users/items. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.953877561138451
      ],
      "excerpt": "For how to serve a trained model in LibRecommender, see Serving Guide . \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Versatile End-to-End Recommender System",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/massquantity/LibRecommender/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 33,
      "date": "Tue, 21 Dec 2021 16:17:51 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/massquantity/LibRecommender/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "massquantity/LibRecommender",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "From pypi : &nbsp;\n\n```shell\n$ pip install LibRecommender==0.6.10\n```\n\nTo build from source, you 'll first need [Cython](<https://cython.org/>) and [Numpy](<https://numpy.org/>):\n\n```shell\n$ #: pip install numpy cython\n$ git clone https://github.com/massquantity/LibRecommender.git\n$ cd LibRecommender\n$ python setup.py install\n```\n\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8015989282008071
      ],
      "excerpt": "Low memory usage, automatically convert categorical and multi-value categorical features to sparse representation. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/massquantity/LibRecommender/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Cython",
      "Scala"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'The MIT License (MIT)\\n\\nCopyright 2019 massquantity \\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\xe2\\x80\\x9cSoftware\\xe2\\x80\\x9d), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\xe2\\x80\\x9cAS IS\\xe2\\x80\\x9d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE..'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "LibRecommender",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "LibRecommender",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "massquantity",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/massquantity/LibRecommender/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "massquantity",
        "body": "Add macOS support",
        "dateCreated": "2021-07-03T09:03:27Z",
        "datePublished": "2021-07-03T09:07:11Z",
        "html_url": "https://github.com/massquantity/LibRecommender/releases/tag/v0.6.8",
        "name": "v0.6.8",
        "tag_name": "v0.6.8",
        "tarball_url": "https://api.github.com/repos/massquantity/LibRecommender/tarball/v0.6.8",
        "url": "https://api.github.com/repos/massquantity/LibRecommender/releases/45655694",
        "zipball_url": "https://api.github.com/repos/massquantity/LibRecommender/zipball/v0.6.8"
      },
      {
        "authorType": "User",
        "author_name": "massquantity",
        "body": "Fix some bugs.",
        "dateCreated": "2021-03-02T18:24:51Z",
        "datePublished": "2021-04-22T15:34:04Z",
        "html_url": "https://github.com/massquantity/LibRecommender/releases/tag/v0.6.4",
        "name": "v0.6.4",
        "tag_name": "v0.6.4",
        "tarball_url": "https://api.github.com/repos/massquantity/LibRecommender/tarball/v0.6.4",
        "url": "https://api.github.com/repos/massquantity/LibRecommender/releases/41850593",
        "zipball_url": "https://api.github.com/repos/massquantity/LibRecommender/zipball/v0.6.4"
      },
      {
        "authorType": "User",
        "author_name": "massquantity",
        "body": "",
        "dateCreated": "2021-02-06T15:12:26Z",
        "datePublished": "2021-02-07T05:21:18Z",
        "html_url": "https://github.com/massquantity/LibRecommender/releases/tag/v0.6.0",
        "name": "v0.6.0",
        "tag_name": "v0.6.0",
        "tarball_url": "https://api.github.com/repos/massquantity/LibRecommender/tarball/v0.6.0",
        "url": "https://api.github.com/repos/massquantity/LibRecommender/releases/37563874",
        "zipball_url": "https://api.github.com/repos/massquantity/LibRecommender/zipball/v0.6.0"
      },
      {
        "authorType": "User",
        "author_name": "massquantity",
        "body": "Add new models: Caser, WaveNet.\r\nAdd model save/load.",
        "dateCreated": "2021-01-16T17:05:50Z",
        "datePublished": "2021-01-16T17:08:03Z",
        "html_url": "https://github.com/massquantity/LibRecommender/releases/tag/v0.4.0",
        "name": "v0.4.0",
        "tag_name": "v0.4.0",
        "tarball_url": "https://api.github.com/repos/massquantity/LibRecommender/tarball/v0.4.0",
        "url": "https://api.github.com/repos/massquantity/LibRecommender/releases/36499345",
        "zipball_url": "https://api.github.com/repos/massquantity/LibRecommender/zipball/v0.4.0"
      },
      {
        "authorType": "User",
        "author_name": "massquantity",
        "body": "Add new models: Item2Vec, RNN4Rec.\r\nAdd multi-value feature processing.",
        "dateCreated": "2020-11-17T06:25:33Z",
        "datePublished": "2020-11-17T06:41:28Z",
        "html_url": "https://github.com/massquantity/LibRecommender/releases/tag/v0.2.0",
        "name": "v0.2.0",
        "tag_name": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/massquantity/LibRecommender/tarball/v0.2.0",
        "url": "https://api.github.com/repos/massquantity/LibRecommender/releases/34040686",
        "zipball_url": "https://api.github.com/repos/massquantity/LibRecommender/zipball/v0.2.0"
      },
      {
        "authorType": "User",
        "author_name": "massquantity",
        "body": "**Add compatibility with tf2.x and fix some bugs**",
        "dateCreated": "2020-09-15T14:04:57Z",
        "datePublished": "2020-09-15T14:37:31Z",
        "html_url": "https://github.com/massquantity/LibRecommender/releases/tag/v0.1.0",
        "name": "v0.1.0",
        "tag_name": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/massquantity/LibRecommender/tarball/v0.1.0",
        "url": "https://api.github.com/repos/massquantity/LibRecommender/releases/31333877",
        "zipball_url": "https://api.github.com/repos/massquantity/LibRecommender/zipball/v0.1.0"
      },
      {
        "authorType": "User",
        "author_name": "massquantity",
        "body": "**Add serving part**",
        "dateCreated": "2020-07-29T09:10:26Z",
        "datePublished": "2020-07-29T09:18:27Z",
        "html_url": "https://github.com/massquantity/LibRecommender/releases/tag/v0.0.8",
        "name": "v0.0.8",
        "tag_name": "v0.0.8",
        "tarball_url": "https://api.github.com/repos/massquantity/LibRecommender/tarball/v0.0.8",
        "url": "https://api.github.com/repos/massquantity/LibRecommender/releases/29063511",
        "zipball_url": "https://api.github.com/repos/massquantity/LibRecommender/zipball/v0.0.8"
      },
      {
        "authorType": "User",
        "author_name": "massquantity",
        "body": "",
        "dateCreated": "2020-07-09T10:07:30Z",
        "datePublished": "2020-07-09T10:26:53Z",
        "html_url": "https://github.com/massquantity/LibRecommender/releases/tag/v0.0.6",
        "name": "",
        "tag_name": "v0.0.6",
        "tarball_url": "https://api.github.com/repos/massquantity/LibRecommender/tarball/v0.0.6",
        "url": "https://api.github.com/repos/massquantity/LibRecommender/releases/28395469",
        "zipball_url": "https://api.github.com/repos/massquantity/LibRecommender/zipball/v0.0.6"
      }
    ],
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "From pypi : &nbsp;\n\n```shell\n$ pip install LibRecommender==0.6.10\n```\n\nTo build from source, you 'll first need [Cython](<https://cython.org/>) and [Numpy](<https://numpy.org/>):\n\n```shell\n$ #: pip install numpy cython\n$ git clone https://github.com/massquantity/LibRecommender.git\n$ cd LibRecommender\n$ python setup.py install\n```\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "- Python >= 3.6\n- TensorFlow >= 1.14\n- Numpy >= 1.15.4\n- Cython >= 0.29.0\n- Pandas >= 0.23.4\n- Scipy >= 1.2.1\n- scikit-learn >= 0.20.0\n- gensim >= 4.0.0\n- tqdm >= 4.46.0\n- [hnswlib](https://github.com/nmslib/hnswlib)\n\n`LibRecommender` is tested under TensorFlow 1.14 and 2.5. If you encounter any problem during running, feel free to open an issue.\n\n**Known issue**: TensorFlow 2.x is not fully compatible with Numpy >= 1.20. Try downgrading Numpy `pip install numpy==1.19.5` if you encounter tf errors. Refer to [Numpy v1.20+ compatibility](https://github.com/tensorflow/tensorflow/issues/47691)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "+ flask >= 1.0.0\n+ requests >= 2.22.0\n+ [redis](<https://redis.io/>) == 3.0.6\n+ [redis-py](https://github.com/andymccurdy/redis-py) >= 3.3.5\n+ [faiss](https://github.com/facebookresearch/faiss) == 1.5.2\n+ [Tensorflow Serving](<https://github.com/tensorflow/serving>)\n\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 128,
      "date": "Tue, 21 Dec 2021 16:17:51 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "recommender-system",
      "tensorflow",
      "deep-learning",
      "recommender",
      "collaborative-filtering",
      "matrix-factorization",
      "implicit-datasets",
      "als",
      "bpr",
      "deepfm",
      "fm",
      "cython",
      "autoint",
      "youtube-dl"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```python\nimport numpy as np\nimport pandas as pd\nfrom libreco.data import random_split, DatasetPure\nfrom libreco.algorithms import SVDpp  #: pure data, algorithm SVD++\nfrom libreco.evaluation import evaluate\n\ndata = pd.read_csv(\"examples/sample_data/sample_movielens_rating.dat\", sep=\"::\",\n                   names=[\"user\", \"item\", \"label\", \"time\"])\n\n#: split whole data into three folds for training, evaluating and testing\ntrain_data, eval_data, test_data = random_split(data, multi_ratios=[0.8, 0.1, 0.1])\n\ntrain_data, data_info = DatasetPure.build_trainset(train_data)\neval_data = DatasetPure.build_evalset(eval_data)\ntest_data = DatasetPure.build_testset(test_data)\nprint(data_info)   #: n_users: 5894, n_items: 3253, data sparsity: 0.4172 %\n\nsvdpp = SVDpp(task=\"rating\", data_info=data_info, embed_size=16, n_epochs=3, lr=0.001,\n              reg=None, batch_size=256)\n#: monitor metrics on eval_data during training\nsvdpp.fit(train_data, verbose=2, eval_data=eval_data, metrics=[\"rmse\", \"mae\", \"r2\"])\n\n#: do final evaluation on test data\nprint(\"evaluate_result: \", evaluate(model=svdpp, data=test_data,\n                                    metrics=[\"rmse\", \"mae\"]))\n#: predict preference of user 2211 to item 110\nprint(\"prediction: \", svdpp.predict(user=2211, item=110))\n#: recommend 7 items for user 2211\nprint(\"recommendation: \", svdpp.recommend_user(user=2211, n_rec=7))\n\n#: cold-start prediction\nprint(\"cold prediction: \", svdpp.predict(user=\"ccc\", item=\"not item\",\n                                         cold_start=\"average\"))\n#: cold-start recommendation\nprint(\"cold recommendation: \", svdpp.recommend_user(user=\"are we good?\",\n                                                    n_rec=7,\n                                                    cold_start=\"popular\"))\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```python\nimport numpy as np\nimport pandas as pd\nfrom libreco.data import split_by_ratio_chrono, DatasetFeat\nfrom libreco.algorithms import YouTubeRanking  #: feat data, algorithm YouTubeRanking\n\ndata = pd.read_csv(\"examples/sample_data/sample_movielens_merged.csv\", sep=\",\", header=0)\ndata[\"label\"] = 1  #: convert to implicit data and do negative sampling afterwards\n\n#: split into train and test data based on time\ntrain_data, test_data = split_by_ratio_chrono(data, test_size=0.2)\n\n#: specify complete columns information\nsparse_col = [\"sex\", \"occupation\", \"genre1\", \"genre2\", \"genre3\"]\ndense_col = [\"age\"]\nuser_col = [\"sex\", \"age\", \"occupation\"]\nitem_col = [\"genre1\", \"genre2\", \"genre3\"]\n\ntrain_data, data_info = DatasetFeat.build_trainset(\n    train_data, user_col, item_col, sparse_col, dense_col\n)\ntest_data = DatasetFeat.build_testset(test_data)\ntrain_data.build_negative_samples(data_info)  #: sample negative items for each record\ntest_data.build_negative_samples(data_info)\nprint(data_info)  #: n_users: 5962, n_items: 3226, data sparsity: 0.4185 %\n\nytb_ranking = YouTubeRanking(task=\"ranking\", data_info=data_info, embed_size=16,\n                             n_epochs=3, lr=1e-4, batch_size=512, use_bn=True,\n                             hidden_units=\"128,64,32\")\nytb_ranking.fit(train_data, verbose=2, shuffle=True, eval_data=test_data,\n                metrics=[\"loss\", \"roc_auc\", \"precision\", \"recall\", \"map\", \"ndcg\"])\n\n#: predict preference of user 2211 to item 110\nprint(\"prediction: \", ytb_ranking.predict(user=2211, item=110))\n#: recommend 7 items for user 2211\nprint(\"recommendation(id, probability): \", ytb_ranking.recommend_user(user=2211, n_rec=7))\n\n#: cold-start prediction\nprint(\"cold prediction: \", ytb_ranking.predict(user=\"ccc\", item=\"not item\",\n                                               cold_start=\"average\"))\n#: cold-start recommendation\nprint(\"cold recommendation: \", ytb_ranking.recommend_user(user=\"are we good?\",\n                                                          n_rec=7,\n                                                          cold_start=\"popular\"))\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}