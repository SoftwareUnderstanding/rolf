{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vcadillog/PPO-Mario-Bros-Tensorflow-2",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-11-06T05:20:24Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-25T08:44:58Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9650759960287032
      ],
      "excerpt": "A modular implementation for Proximal Policy Optimization in Tensorflow 2 using Eagerly Execution for the Super Mario Bros enviroment. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9218760866142831,
        0.9310999251691612
      ],
      "excerpt": "Eight actors were trained in the first level of Mario, and this is how it learned to finish it. \nA plot how the average reward evolved vs the time steps, the model was trained in four steps due ethernet connection, the reward isn't the same as the raw output of Kautenja's implementation, it was previously scaled for this model, all the data pre processing is in the Datapreprocessing.py file. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9531944417911677,
        0.9567955850657639,
        0.8807223699553386,
        0.8956936697499244
      ],
      "excerpt": "The train function saves the weights of the model every 1000 timesteps, also creates summary files to visualize the change of the average total reward, the average of the x position and the max value of x position. The load of weights is True by default. \nThe test function loads the weights of the model and test in the selected levels with deterministic actions, the train do stochastic actions to encourage to the agent to explore and avoid getting stucked in a local optimal; and creates in MP4 videos of how the agent did as many of defined numbers of test was selected. \nThe Common_constants.py file contains all the parameters needed for tune the algorithm, it transfer the parameters across the other files, also calls the Enviroment.py file to create the enviroment. \nThe Enviroment.py file defines the enviroment of four diferent levels of Super Mario Bros and calls the preprocessing functions. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9057909088028763,
        0.8970374112130958,
        0.9046768374389289,
        0.9719535619249132,
        0.9916867716611139,
        0.9974702855467272,
        0.9850510970640692
      ],
      "excerpt": "Reset the enviroment after dying, this gives an additional negative reward of 50. \nReset the enviroment after getting the flag or completing the level, this adds a positive reward of 100. \nScalation of the reward, by a 0.05 factor. \nResize the image and grayscaling for a faster performance of the neural network. \nStochastic skipping of frames, based on [2], to add a randomness to the enviroment. \nStacking of frames to create a sense of movement, based on the Atari DeepMind's implementation. \nScaling the pixels of the image with 255 to get a range of [0-1] values.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8742004236749744
      ],
      "excerpt": "The MultiEnv.py file create a callable with multiple Proccess to create several actors, and also calcules the advantage estimator defined in [1]. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9496171443185881
      ],
      "excerpt": "The NeuralNets.py file contains two classes of models, for the actor and the critic. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8697378431169969
      ],
      "excerpt": "[2] Gotta Learn Fast: A New Benchmark for Generalization in RL. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9919249856951023
      ],
      "excerpt": "[3] The implementation of Ping Pong - Atari in tensorflow 1 of \"coreystaten\". \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9816265175552128
      ],
      "excerpt": "[4] Some of parameters of the convolutional neural network of \"jakegrigsby\". \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9694185734875681
      ],
      "excerpt": "[5] OpenAI Baselines of Atari and Retro wrappers for pre processing. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9333972827332465
      ],
      "excerpt": "[6] The implementation of Super Mario Brothers by \"Kautenja\". \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A modular implementation for Proximal Policy Optimization in Tensorflow 2 using Eagerly Execution for the Super Mario Bros enviroment.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vcadillog/PPO-Mario-Bros-Tensorflow-2/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Sat, 25 Dec 2021 19:12:13 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/vcadillog/PPO-Mario-Bros-Tensorflow-2/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "vcadillog/PPO-Mario-Bros-Tensorflow-2",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/vcadillog/PPO-Mario-Bros-Tensorflow-2/master/EXAMPLE_OF_USE.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Clone the repository,\n\nChange the path to the cloned repository\n\n```\nimport os\nos.chdir('./PPO-Mario-Bros-Tensorflow-2')\n```\n\nFor training, run:\n```\npython -c 'from Main import train; train(True)'\n```\nThe argument of training enables the load of weights of the trained model.\n\nFor testing the model:\n```\npython -c 'from Main import test; test(10,0)'\n```\n\nWhere the first argument of test is the number of episodes to test the model, and the second is the number of the enviroment to test.\n\nFor the code the enviroments available are the next ones:\n```\n0 : SuperMarioBros-1-1-v0\nThe first level of the first world\n1 : SuperMarioBros-1-2-v0 \nThe second level of the first world\n2 : SuperMarioBros-1-3-v0\nThe third level of the first world\n3 : SuperMarioBros-2-2-v0\nThe second level of the second world\n```\n\nTo change the enviroments, modify the Enviroments.py file.\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.930219896896087
      ],
      "excerpt": "The Main.py file contains the train and test functions for the model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8423712267727103
      ],
      "excerpt": "The PPO.py file contains tf functions to calculate the total loss defined in [1] and run gradients in eagerly execution of tensorflow 2. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/vcadillog/PPO-Mario-Bros-Tensorflow-2/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "PPO-Mario-Bros-Tensorflow-2",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "PPO-Mario-Bros-Tensorflow-2",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "vcadillog",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vcadillog/PPO-Mario-Bros-Tensorflow-2/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 10,
      "date": "Sat, 25 Dec 2021 19:12:13 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "There's an easy example of how to use this repo, in the EXAMPLE_OF_USE.ipynb notebook for Google Colab, just download it and upload to colab, there's not need to have python installed in your machine, the generated videos are in the branch of gloned repo.\nOr open this link:\n\nhttps://colab.research.google.com/drive/16xgJeXjteuw3WNVfHtp_t_VsXLQyumGa\n\n\n",
      "technique": "Header extraction"
    }
  ]
}