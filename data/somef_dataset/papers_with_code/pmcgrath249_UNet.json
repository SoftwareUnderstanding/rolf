{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1505.04597\n\nFramework:  PyTorch\n\nRepo is following the structure suggested by:   \nhttps://github.com/moemen95/Pytorch-Project-Template  \nAdaptation: config EasyDict can be created from /utils/MIS_U_Net_utils\n\n# Instructions  \n\n## Installation \n```\ncd /path/to/repo/repo\npip3 install -r requirements.txt  \npython3 -m pip install \n```\nYou need to install it as the scripts are using relative paths to access each other.  \n  \nCreate config dict using the get_config function in utils. All parameters that are flexible in this setup can be changed in the config dict. \nMost functions require to pass this config dict, and maybe booleans values regarding certain options.  \n  \n## Data  \nPut your data into /path/to/repo/data. If you prefer keeping it somewhere else, speficy the path in config.dir.data\nRight now there are no explicit dimension checks implemented -> data propagation simply breaks the network if dimensions do not fit!\n  \n## Basic setup:  \nImport config and agent and start training. Change the config to your liking before passing it to the agent. \n```\nfrom UNet.utils.U_Net_utils import get_config\nfrom UNet.agents.U_Net_Agent import U_Net_Agent\n\nconfig = get_config('path/to/repo/config'"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/p-mc-grath/UNet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-09-07T09:32:48Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-09-28T12:57:16Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8210904433424604
      ],
      "excerpt": "Repo is following the structure suggested by:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Implementation according to the corresponding paper",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/pmcgrath249/UNet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sun, 26 Dec 2021 13:28:15 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/p-mc-grath/UNet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "p-mc-grath/UNet",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Import config and agent and start training. Change the config to your liking before passing it to the agent. \n```\nfrom UNet.utils.U_Net_utils import get_config\nfrom UNet.agents.U_Net_Agent import U_Net_Agent\n\nconfig = get_config('path/to/repo/config')\nagent = U_Net_Agent(config)\nagent.run()\n```\n  \nThe agent creates log and summaries, readable by tensorboard.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```\ncd /path/to/repo/repo\npip3 install -r requirements.txt  \npython3 -m pip install \n```\nYou need to install it as the scripts are using relative paths to access each other.  \n  \nCreate config dict using the get_config function in utils. All parameters that are flexible in this setup can be changed in the config dict. \nMost functions require to pass this config dict, and maybe booleans values regarding certain options.  \n  \n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8818611124925723
      ],
      "excerpt": "Repo is following the structure suggested by:  \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/p-mc-grath/UNet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 pmcgrath249\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "UNet implementation according to the paper",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "UNet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "p-mc-grath",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/p-mc-grath/UNet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sun, 26 Dec 2021 13:28:15 GMT"
    },
    "technique": "GitHub API"
  }
}