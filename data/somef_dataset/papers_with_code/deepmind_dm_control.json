{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2006.12983\n[`ctypes`]: https://docs.python.org/3/library/ctypes.html\n[`dm_control.mjcf`]: dm_control/mjcf/README.md\n[`dm_control.mujoco`]: dm_control/mujoco/README.md\n[`dm_control.suite`]: dm_control/suite/README.md\n[`dm_control.viewer`]: dm_control/viewer/README.md\n[`dm_control.locomotion`]: dm_control/locomotion/README.md\n[`dm_control.locomotion.soccer`]: dm_control/locomotion/soccer/README.md"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{tassa2020dmcontrol,\n    title={dm_control: Software and Tasks for Continuous Control},\n    author={Yuval Tassa and Saran Tunyasuvunakool and Alistair Muldal and\n            Yotam Doron and Siqi Liu and Steven Bohez and Josh Merel and\n            Tom Erez and Timothy Lillicrap and Nicolas Heess},\n    year={2020},\n    eprint={2006.12983},\n    archivePrefix={arXiv},\n    primaryClass={cs.RO}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "    physics engine. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8109194328925066,
        0.9784326838820158
      ],
      "excerpt": "[dm_control.locomotion.soccer]: Multi-agent soccer tasks. \nIf you use this package, please cite our accompanying [tech report]: \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/deepmind/dm_control",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "How to Contribute\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\nContributor License Agreement\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution,\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to https://cla.developers.google.com/ to see\nyour current agreements on file or to sign a new one.\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\nCode reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\nGitHub Help for more\ninformation on using pull requests.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-12-29T18:13:15Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-27T06:21:40Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9149852607758406
      ],
      "excerpt": "DeepMind's software stack for physics-based simulation and Reinforcement \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9623970670555095
      ],
      "excerpt": "An introductory tutorial for this package is available as a Colaboratory \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9110830728530033,
        0.8086907409305354
      ],
      "excerpt": "This package consists of the following \"core\" components: \n[dm_control.mujoco]: Libraries that provide Python bindings to the MuJoCo \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9504560814960451
      ],
      "excerpt": "Additionally, the following components are available for the creation of more \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8248517927999688,
        0.9480107493241788,
        0.946474394667279,
        0.9289732502416503
      ],
      "excerpt": "dm_control is released on a rolling basis: the latest commit on the master \nbranch of our GitHub repository represents our latest release. Our Python \npackage is versioned 0.0.N, where N is the number that appears in the \nPiperOrigin-RevId field of the commit message. We always ensure that N \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8869714330991696
      ],
      "excerpt": "Hardware rendering with a windowing system is supported via GLFW and GLEW. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "DeepMind's software stack for physics-based simulation and Reinforcement Learning environments, using MuJoCo.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/deepmind/dm_control/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 475,
      "date": "Mon, 27 Dec 2021 07:37:00 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/deepmind/dm_control/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "deepmind/dm_control",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/deepmind/dm_control/master/tutorial.ipynb",
      "https://raw.githubusercontent.com/deepmind/dm_control/master/dm_control/mujoco/tutorial.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "`dm_control` is regularly tested on Ubuntu 16.04 against the following Python\nversions:\n\n*   3.7\n*   3.8\n*   3.9\n\nVarious people have been successful in getting `dm_control` to work on other\nLinux distros, macOS, and Windows. We do not provide active support for these,\nbut will endeavour to answer questions on a best-effort basis.\n\nFollow these steps to install `dm_control`:\n\n1.  Download MuJoCo 2.1.1 from the\n    [Releases page on the MuJoCo GitHub repository]. MuJoCo must be installed\n    before `dm_control`, since `dm_control`'s install script generates Python\n    [`ctypes`] bindings based on MuJoCo's header files. By default, `dm_control`\n    assumes that MuJoCo is installed via the following instructions:\n\n    -   On Linux, extract the tarball into `~/.mujoco`.\n    -   On Windows, extract the zip archive into either `%HOMEPATH%\\MuJoCo` or\n        `%PUBLIC%\\MuJoCo`.\n    -   On macOS, either place `MuJoCo.app` into `/Applications`, or place\n        `MuJoCo.Framework` into `~/.mujoco`.\n\n2.  Install the `dm_control` Python package by running `pip install dm_control`.\n    We recommend `pip install`ing into a `virtualenv`, or with the `--user` flag\n    to avoid interfering with system packages. At installation time,\n    `dm_control` looks for the MuJoCo headers at the paths described in Step 1\n    by default, however this path can be configured with the `headers-dir`\n    command line argument.\n\n3.  If the shared library provided by MuJoCo (i.e. `libmujoco.so.2.1.1` or\n    `libmujoco.2.1.1.dylib` or `mujoco.dll`) is installed at a non-default path,\n    specify its location using the `MJLIB_PATH` environment variable. This\n    environment variable should be set to the full path to the library file\n    itself, e.g. `export MJLIB_PATH=/path/to/libmujoco.so.2.1.1`.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9369147796875916,
        0.9492935275585643,
        0.9912841064139293
      ],
      "excerpt": "all versions to PyPI, and occasionally the latest version on PyPI may lag behind \nthe latest commit on GitHub. Should this happen, you can still install the \nnewest version available by running pip install \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9844047695831297,
        0.8574630892430953,
        0.9571015205374649
      ],
      "excerpt": "    On Linux these can be installed using your distribution's package manager. \n    For example, on Debian and Ubuntu, this can be done by running sudo apt-get \n    install libglfw3 libglew2.0. Please note that: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9965577720539317
      ],
      "excerpt": "    can be installed via sudo apt-get install libglew2.0. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9966053687778483
      ],
      "excerpt": "    be installed using sudo apt-get install libgl1-mesa-glx libosmesa6. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8722835890589054,
        0.9330853082942475,
        0.9865763738726153,
        0.8171185787415628,
        0.9166507746091438,
        0.8019056908711474
      ],
      "excerpt": "rendering with EGL, you can also specify which GPU to use for rendering by \nsetting the environment variable EGL_DEVICE_ID= to the target GPU ID. \nThe above instructions using pip should work, provided that you use a \n    Python interpreter that is installed by Homebrew (rather than the \n    system-default one). \nBefore running, the DYLD_LIBRARY_PATH environment variable needs to be \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/deepmind/dm_control/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Original work: Copyright (c) 2017, Kinova Robotics inc.\\nModified work: Copyright (c) 2018, The dm_control Authors.\\n\\nAll rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without modification,\\nare permitted provided that the following conditions are met:\\n\\n    * Redistributions of source code must retain the above copyright notice,\\n      this list of conditions and the following disclaimer.\\n    * Redistributions in binary form must reproduce the above copyright notice,\\n      this list of conditions and the following disclaimer in the documentation\\n      and/or other materials provided with the distribution.\\n    * Neither the name of the copyright holder nor the names of its contributors\\n      may be used to endorse or promote products derived from this software\\n      without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "`dm_control`: DeepMind Infrastructure for Physics-Based Simulation.",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "dm_control",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "deepmind",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/deepmind/dm_control/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "`dm_control` is regularly tested on Ubuntu 16.04 against the following Python\nversions:\n\n*   3.7\n*   3.8\n*   3.9\n\nVarious people have been successful in getting `dm_control` to work on other\nLinux distros, macOS, and Windows. We do not provide active support for these,\nbut will endeavour to answer questions on a best-effort basis.\n\nFollow these steps to install `dm_control`:\n\n1.  Download MuJoCo 2.1.1 from the\n    [Releases page on the MuJoCo GitHub repository]. MuJoCo must be installed\n    before `dm_control`, since `dm_control`'s install script generates Python\n    [`ctypes`] bindings based on MuJoCo's header files. By default, `dm_control`\n    assumes that MuJoCo is installed via the following instructions:\n\n    -   On Linux, extract the tarball into `~/.mujoco`.\n    -   On Windows, extract the zip archive into either `%HOMEPATH%\\MuJoCo` or\n        `%PUBLIC%\\MuJoCo`.\n    -   On macOS, either place `MuJoCo.app` into `/Applications`, or place\n        `MuJoCo.Framework` into `~/.mujoco`.\n\n2.  Install the `dm_control` Python package by running `pip install dm_control`.\n    We recommend `pip install`ing into a `virtualenv`, or with the `--user` flag\n    to avoid interfering with system packages. At installation time,\n    `dm_control` looks for the MuJoCo headers at the paths described in Step 1\n    by default, however this path can be configured with the `headers-dir`\n    command line argument.\n\n3.  If the shared library provided by MuJoCo (i.e. `libmujoco.so.2.1.1` or\n    `libmujoco.2.1.1.dylib` or `mujoco.dll`) is installed at a non-default path,\n    specify its location using the `MJLIB_PATH` environment variable. This\n    environment variable should be set to the full path to the library file\n    itself, e.g. `export MJLIB_PATH=/path/to/libmujoco.so.2.1.1`.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2604,
      "date": "Mon, 27 Dec 2021 07:37:00 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "machine-learning",
      "artificial-intelligence",
      "neural-networks",
      "deep-learning",
      "reinforcement-learning",
      "physics-simulation",
      "mujoco"
    ],
    "technique": "GitHub API"
  }
}