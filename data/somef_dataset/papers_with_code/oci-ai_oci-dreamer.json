{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1409.4842\n\n## Docker image\n\nThe simplest way to explore and run the notebooks and scripts here is\nto build the required software and dependencies into a `docker` container\nand executing from that container.\n\nThe external dependencies and some starter notebooks are included\nin the container.  In addition a command line ready version\nof the model executions is included so that frames can be generated\nfor one of more model layers without rendering the intermediate\nresults.\n\n### Building\n\nThere is a single *dockerfile* included here which builds the\nCPU based version of caffe and provides the GoogLeNet model definition\nand parameters for use.  This is the same model as in the google/deepdream\nsubmodule.\n\nTo build the image, run the following `bash` command:\n\n```bash\ndocker build -t notebook .\n```\n\n### Running Notebooks\n\nTo execute the container to allow access to the *dream.ipynb* notebook,\nuse the following `bash` command:\n\n```bash\ndocker run -d --rm -v $(pwd"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Description of the `caffe` model and parameters - the layers\nand training data and mechanisms:\n\nGoogLeNet model\nhttps://github.com/BVLC/caffe/tree/master/models/bvlc_googlenet\n\nThe original paper describing the GoogLeNet inception\narchitecture:\n\nGoing Deeper with Convolutions (Inception)\nhttps://arxiv.org/abs/1409.4842\n\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/oci-ai/oci-dreamer",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-10-20T04:44:53Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-10-25T05:02:29Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9895697219954648,
        0.9918242773248236,
        0.862463825870089
      ],
      "excerpt": "sequences are based on the originall Google Deepdream work.  This work is included here \nas a submodule.  The work is based on the original \nGoogle blog post, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9290783576567039,
        0.8795360166090554,
        0.9285532728811053
      ],
      "excerpt": "mechanisms and techniques used to invert the training - meaning that the trained architecture model is presented with a starting \nimage and that image modified using gradient ascent in order to create an input image that maximizes a selected layer. \nTo ensure that you have the up to date Google repository content, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9062868037225269,
        0.9550362707557487
      ],
      "excerpt": "The dream.ipynb notebook here is a slightly modified copy of \nthe notebook in the deepedream submodule.  It executes using \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9100048873945213
      ],
      "excerpt": "to allow it to be imported into other python code as well as \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9635390270328001,
        0.9203064292629345
      ],
      "excerpt": "of the model executions is included so that frames can be generated \nfor one of more model layers without rendering the intermediate \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9195516791161636,
        0.9589114320539621,
        0.9788951768095648
      ],
      "excerpt": "There is a single dockerfile included here which builds the \nCPU based version of caffe and provides the GoogLeNet model definition \nand parameters for use.  This is the same model as in the google/deepdream \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Exploring Google's deepdream",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/oci-ai/oci-dreamer/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Thu, 23 Dec 2021 19:12:31 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/oci-ai/oci-dreamer/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "oci-ai/oci-dreamer",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/oci-ai/oci-dreamer/master/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/oci-ai/oci-dreamer/master/dream.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9549613113737652
      ],
      "excerpt": "execute the following bash command: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9737343359900718
      ],
      "excerpt": "To build the image, run the following bash command: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9008191266223742
      ],
      "excerpt": "The dream.py python script in the src directory is structured \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8018569318642937
      ],
      "excerpt": "directly from the command line. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/oci-ai/oci-dreamer/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "oci-dreamer",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "oci-dreamer",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "oci-ai",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/oci-ai/oci-dreamer/blob/master/Readme.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To execute the container to allow access to the *dream.ipynb* notebook,\nuse the following `bash` command:\n\n```bash\ndocker run -d --rm -v $(pwd):/home/jovyan/local -p 2112:8888 --name notebook notebook\n```\n\nThis will start a `jupyter` notebook server with the local directory\nmounted in the `jupyter` directory named `local`.  When stopping or\nkilling a notebook container, remember to remove it from the docker\nengine if you want to restart another container with the same name.\n\nAccess the notebook by pointing you browser at *http://localhost:2112/login* and\nentering the value `demo` when asked for a passowrd or token.  This\nwill give you access to the installed notebooks and images as well\nas the mounted directories on the host.  If you want to save the\nresults of your notebook exploration beyond the current session, you\nwill want to create / copy your notebooks in / to the *local* subdirectory\nwhich is mounted from the host so that any saved results will be\nretained after the notebook and docker execution have completed.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "The container includes the *dream.py* script in the */app*\ndirectory of the container.  This script should be executed\nas a python script using the python command from within the\ncontainer, where all required dependencies are already\npresent.  No modifications to the host machine are needed.\n\nYou can execute the *dream.py* script from the command line by\nexecuting the following `bash` command:\n \n```bash\ndocker run -it --rm -v $(pwd):/home/jovyan/local --name dream-generator oci-dream-nb python /app/dream.py --image local/images/sky1024px.jpg -o local/frames\n```\n\nNote that the local direcory is mounted in the container at\n*/home/jovyan/local* which is a directory within the starting\nwork directory of the container.  To retain any updates of output\nfrom execution, all of the output data should be directed to\nwithin this *local* subdirectory.\n\nThis holds for input data as well, so referencing image files\nthat are not present in the built container should be done via\nthis path as well.  The command line above illustrates these\nprincipals.\n\n---\n\nTo start at an intermediate location in the frame generation,\nyou need to specify the starting image and the starting frame\nnumber.  Note that the script will only work correctly if these\nstarting points are at the beginning of a model layer.  That is\nthe start frame should be a multiple of 100 and the starting image\nshould be the final image from the previous layer.  So, for\nexample, this command will restart processing from the end\nof the 8th layer and start building frames from the 9th layer:\n \n```bash\ndocker run -v $(pwd):/home/jovyan/local --name dream-generator oci-dream-nb python /app/dream.py --image local/frames/00799.jpg -o local/frames --start 800\n```",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 19:12:31 GMT"
    },
    "technique": "GitHub API"
  }
}