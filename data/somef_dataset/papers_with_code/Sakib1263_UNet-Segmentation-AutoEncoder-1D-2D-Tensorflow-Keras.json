{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1505.04597.  \n**[2]** Zhou, Z., Siddiquee, M., Tajbakhsh, N., & Liang, J. (2021",
      "https://arxiv.org/abs/1807.10165.  \n**[4]** Ibtehaz, Nabil, and M. Sohel Rahman. \u201cMultiresunet : Rethinking the u-Net Architecture for Multimodal Biomedical Image Segmentation.\u201d ArXiv.org, 11 Feb. 2019, arxiv.org/abs/1902.04049v1.  \n**[5]** Wang, L., Lee, C., Tu, Z., & Lazebnik, S. (2021",
      "https://arxiv.org/abs/1505.02496.  \n**[6]** Chang, H. (2021",
      "https://arxiv.org/abs/1802.10171>.  "
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**[1]** Ronneberger, O., Fischer, P., & Brox, T. (2021). U-Net: Convolutional Networks for Biomedical Image Segmentation. arXiv.org. Retrieved 30 August 2021, from https://arxiv.org/abs/1505.04597.  \n**[2]** Zhou, Z., Siddiquee, M., Tajbakhsh, N., & Liang, J. (2021). UNet++: Redesigning Skip Connections to Exploit Multiscale Features in Image Segmentation. Arxiv-vanity.com. Retrieved 30 August 2021, from https://www.arxiv-vanity.com/papers/1912.05074/.  \n**[3]**  Zhou, Z., Siddiquee, M., Tajbakhsh, N., & Liang, J. (2021). UNet++: A Nested U-Net Architecture for Medical Image Segmentation. arXiv.org. Retrieved 30 August 2021, from https://arxiv.org/abs/1807.10165.  \n**[4]** Ibtehaz, Nabil, and M. Sohel Rahman. \u201cMultiresunet : Rethinking the u-Net Architecture for Multimodal Biomedical Image Segmentation.\u201d ArXiv.org, 11 Feb. 2019, arxiv.org/abs/1902.04049v1.  \n**[5]** Wang, L., Lee, C., Tu, Z., & Lazebnik, S. (2021). Training Deeper Convolutional Networks with Deep Supervision. arXiv.org. Retrieved 30 August 2021, from https://arxiv.org/abs/1505.02496.  \n**[6]** Chang, H. (2021). A Method of Brain Image Optimization based on an Autoencoder Unet. Journal Of Physics: Conference Series, 1952(2), 022064. https://doi.org/10.1088/1742-6596/1952/2/022064  \n**[7]** Transposed Convolution Demystified. Medium. (2021). Retrieved 1 September 2021, from https://towardsdatascience.com/transposed-convolution-demystified-84ca81b4baba.  \n**[8]** Li, K., Wu, Z., Peng, K., Ernst, J. and Fu, Y., 2021. Tell Me Where to Look: Guided Attention Inference Network. [online] arXiv.org. Available at: <https://arxiv.org/abs/1802.10171>.  \n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Sakib1263/UNet-Segmentation-AutoEncoder-1D-2D-Tensorflow-Keras",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-08-10T10:01:55Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-18T12:26:49Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9785778865071468
      ],
      "excerpt": "This repository contains 1D and 2D Signal Segmentation Model Builder for UNet and several of its variants developed in Tensorflow-Keras. The code supports Deep Supervision, Autoencoder mode and other options explained in the DEMO. The segmentation models can be used for binary or multiclass segmentation, or for regression tasks. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9933245053589288
      ],
      "excerpt": "As it can be seen, from UNet to UNet++, the models become more nested and denser (so heavier i.e., more parameters). UNet++ is like a combination of UNetE and UNet+. Normally users do not try UNet+ or UNetE. But for some problems, UNet++ might overfit. In those cases, these intermediate models can be tried instead of using a shallower or narrower UNet++ model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9675657287736594
      ],
      "excerpt": "MultiResUNet has an interesting Residual path for the skip connection and uses MultiRes Blocks instead of normal CNN blocks for deep learning. MultiResUNet model also uses Transposed Convolutions in the encoder by default instead of UpSampling. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9464896599934555,
        0.9497974096007392
      ],
      "excerpt": "Internal structure for the MultiResUNet block is shown below [4]. As it can be seen, the MultiRes Block goes through convolutions of different Kernel sizes, then concatenates in the end. \nMultiRes Block of MultiResUNet   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9635035265653802,
        0.9322313722149861
      ],
      "excerpt": "The speciality about this model is its flexibility, such as: \n1. The user can choose any of the 5 available UNet variants for either 1D or 2D Segmentation tasks. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8777450563375656
      ],
      "excerpt": "3. The models allow Deep Supervision [5] with flexibility during Segmentation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9655916990076435,
        0.8547691460398803,
        0.8777683396559007
      ],
      "excerpt": "6. The depth of all the models can be varied to form very shallow to very deep networks. \n7. Number of input kernel/filter, commonly known as Width of the model can be varied. \n8. Number of classes for Classification tasks and number of extracted features for Regression tasks can be varied. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Models Supported: UNet, UNet-Ensembled, UNet+, UNet++, MultiResUNet (with Deep Supervision, Guided Attention, and Autoencoder modes for 1D or 2D).",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Sakib1263/UNet-Segmentation-AutoEncoder-1D-2D-Tensorflow-Keras/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Wed, 29 Dec 2021 05:03:58 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Sakib1263/UNet-Segmentation-AutoEncoder-1D-2D-Tensorflow-Keras/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Sakib1263/UNet-Segmentation-AutoEncoder-1D-2D-Tensorflow-Keras",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Sakib1263/UNet-Segmentation-AutoEncoder-1D-2D-Tensorflow-Keras/main/Codes/UNet_2DCNN%20based%20End-to-End%20MultiClass%20Satellite%20Image%20Segmentation%20Pipeline.ipynb"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Sakib1263/UNet-Segmentation-AutoEncoder-1D-2D-Tensorflow-Keras/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2021 Sakib Mahmud\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "UNet-Model-Builder-Tensorflow-Keras",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "UNet-Segmentation-AutoEncoder-1D-2D-Tensorflow-Keras",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Sakib1263",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Sakib1263/UNet-Segmentation-AutoEncoder-1D-2D-Tensorflow-Keras/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 8,
      "date": "Wed, 29 Dec 2021 05:03:58 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "unet",
      "unet-ensembled",
      "unet-plus",
      "unet-plusplus",
      "segmentation",
      "autoencoder",
      "multiresunet",
      "deep-learning",
      "convolutional-neural-networks",
      "keras-tensorflow",
      "feature-extraction",
      "deep-supervision",
      "unet-nested",
      "keras-tensoflow",
      "tensorflow2",
      "guided-attention",
      "python3",
      "attention-guided"
    ],
    "technique": "GitHub API"
  }
}