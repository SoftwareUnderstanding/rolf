{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1602.01783"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/openai/universe-starter-agent",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-11-17T21:47:52Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-12T13:55:40Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9805369519232582
      ],
      "excerpt": "It contains a basic implementation of the A3C algorithm, adapted for real-time environments. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9382818024964237,
        0.945894991985517
      ],
      "excerpt": "* ps - the parameter server, which synchronizes the parameters among the different workers \n* tb - a tensorboard process for convenient display of the statistics of learning \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9433834040129173
      ],
      "excerpt": "To access TensorBoard to see various monitoring metrics of the agent, open http://localhost:12345/ in a browser. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.888433340083322
      ],
      "excerpt": "Using 32 workers, the agent is able to solve the same environment in 10 minutes on an m4.16xlarge instance. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9616089888619821
      ],
      "excerpt": "For best performance, it is recommended for the number of workers to not exceed available number of CPU cores. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8559372016622159,
        0.9258621166774124
      ],
      "excerpt": "The main difference with the previous experiment is that now we are going to play the game through VNC protocol. \nThe VNC environments are hosted on the EC2 cloud and have an interface that's different from a conventional Atari Gym \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8188355308989064,
        0.9419432979679261,
        0.9190729761918582,
        0.9022111375421829
      ],
      "excerpt": "the experience should be similar to the agent as if it was played locally. The problem itself is more difficult \nbecause the observations and actions are delayed due to the latency induced by the network. \nMore interestingly, you can also peek at what the agent is doing with a VNCViewer. \nNote that the default behavior of train.py is to start the remotes on a local machine. Take a look at https://github.com/openai/universe/blob/master/doc/remotes.rst for documentation on managing your remotes. Pass additional -r flag to point to pre-existing instances. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.861098271121299
      ],
      "excerpt": "Peeking into the agent's environment with TurboVNC \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9891785691729262,
        0.9796984608335757,
        0.9473047761890111,
        0.9383474139554648,
        0.9447434250563963,
        0.8468397582937947,
        0.824308334512971
      ],
      "excerpt": "VNC password is \"openai\". \nOne of the novel challenges in using Universe environments is that \nthey operate in real time, and in addition, it takes time for the \nenvironment to transmit the observation to the agent.  This time \ncreates a lag: where the greater the lag, the harder it is to solve \nenvironment with today's RL algorithms.  Thus, to get the best \npossible results it is necessary to reduce the lag, which can be \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.930542958214768
      ],
      "excerpt": "machines, and the agent on another machine that can speak to the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.824594272262442
      ],
      "excerpt": "environments and the agent on the same EC2/Azure region.  Other \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9616157369651801
      ],
      "excerpt": "To keep track of your lag, look for the phrase reaction_time in \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9981041108340791,
        0.8169288072501664
      ],
      "excerpt": "The reaction_time statistic is printed to stderr because we wrap our \nenvironment with the Logger wrapper, as done in \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9373682154061577,
        0.9226587302334683,
        0.873053670855043,
        0.8301803949824655
      ],
      "excerpt": "games that place a lot of emphasis on reaction time.  For example, \nthis agent is able to solve VNC Pong \n(gym-core.PongDeterministic-v3) in under 2 hours when both the agent \nand the environment are co-located on the cloud, but this agent had \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8077511958979352,
        0.8993546298252187
      ],
      "excerpt": "This implementation has been tuned to do well on VNC Pong, and we do not guarantee \nits performance on other tasks.  It is meant as a starting point. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9834151333843607
      ],
      "excerpt": "Getting 80% of the maximal score takes between 1 and 2 hours with 16 workers, and getting to 100% of the score \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A starter agent that can solve a number of universe environments.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/openai/universe-starter-agent/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 310,
      "date": "Sat, 25 Dec 2021 20:42:30 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/openai/universe-starter-agent/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "openai/universe-starter-agent",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8779130923205137
      ],
      "excerpt": "Once in the tmux session, you can see all your windows with ctrl-b w. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8405794591920944
      ],
      "excerpt": "environments with low latency.  Alternatively, you can run the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8696634698445973
      ],
      "excerpt": "stderr.  If you run both the agent and the environment on nearby \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8651214946664492
      ],
      "excerpt": "(you can connect to this view via note above) \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9153596448115597,
        0.8106760062555034
      ],
      "excerpt": "python train.py --num-workers 2 --env-id PongDeterministic-v3 --log-dir /tmp/pong \nThe command above will train an agent on Atari Pong using ALE simulator. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9153596448115597
      ],
      "excerpt": "python train.py --num-workers 2 --env-id PongDeterministic-v3 --log-dir /tmp/pong --visualise \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8703176632816132
      ],
      "excerpt": "python train.py --num-workers 2 --env-id gym-core.PongDeterministic-v3 --log-dir /tmp/vncpong \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9153596448115597
      ],
      "excerpt": "python train.py --num-workers 2 --env-id flashgames.NeonRace-v0 --log-dir /tmp/neonrace \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/openai/universe-starter-agent/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2016 openai\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "universe-starter-agent",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "universe-starter-agent",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "openai",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/openai/universe-starter-agent/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Python 2.7 or 3.5\n* [Golang](https://golang.org/doc/install)\n* [six](https://pypi.python.org/pypi/six) (for py2/3 compatibility)\n* [TensorFlow](https://www.tensorflow.org/) 0.12\n* [tmux](https://tmux.github.io/) (the start script opens up a tmux session with multiple windows)\n* [htop](https://hisham.hm/htop/) (shown in one of the tmux windows)\n* [gym](https://pypi.python.org/pypi/gym)\n* gym[atari]\n* libjpeg-turbo (`brew install libjpeg-turbo`)\n* [universe](https://pypi.python.org/pypi/universe)\n* [opencv-python](https://pypi.python.org/pypi/opencv-python)\n* [numpy](https://pypi.python.org/pypi/numpy)\n* [scipy](https://pypi.python.org/pypi/scipy)\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1064,
      "date": "Sat, 25 Dec 2021 20:42:30 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\nconda create --name universe-starter-agent python=3.5\nsource activate universe-starter-agent\n\nbrew install tmux htop cmake golang libjpeg-turbo      #: On Linux use sudo apt-get install -y tmux htop cmake golang libjpeg-dev\n\npip install \"gym[atari]\"\npip install universe\npip install six\npip install tensorflow\nconda install -y -c https://conda.binstar.org/menpo opencv3\nconda install -y numpy\nconda install -y scipy\n```\n\n\nAdd the following to your `.bashrc` so that you'll have the correct environment when the `train.py` script spawns new bash shells\n```source activate universe-starter-agent```\n\n",
      "technique": "Header extraction"
    }
  ]
}