{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1712.01815. A simple version of the learning loop is as follows:\n\n\n1. Initialize neural network with random weights \n1. Self-play the network against itself with random noise added for diversity in moves\n1. Train next iteration of the neural network with the winner of games from step 2.\n1. Repeat steps 2-4.\n\n\nBurrus comes with an extremely performant Othello engine to compute legal moves and gamestates efficiently. Bitboard calculations are adapted and applied to this new game domain from the modern literature on writing performant chess engines (for example of performant chess engine, see: Stockfish https://github.com/official-stockfish/Stockfish"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "./param_serial -rank 0 -ngames 10 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/aduerig/burrus",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-02-26T19:59:43Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-12T06:58:37Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Burrus is an AI programmed to learn how to play Othello. Othello is a two-player, perfect information game that is also known as Reversi. Read more about the game here:\nhttps://en.wikipedia.org/wiki/Reversi\n\nBurrus uses reinforcement learning with a neural network to learn how to play Othello from scratch. The core learning algorithm is a re-implementation of the novel algorithm introduced in the paper \"Mastering Chess and Shogi by Self-Play with a General Reinforcement Learning Algorithm\" published by Google DeepMind: https://arxiv.org/abs/1712.01815. A simple version of the learning loop is as follows:\n\n\n1. Initialize neural network with random weights \n1. Self-play the network against itself with random noise added for diversity in moves\n1. Train next iteration of the neural network with the winner of games from step 2.\n1. Repeat steps 2-4.\n\n\nBurrus comes with an extremely performant Othello engine to compute legal moves and gamestates efficiently. Bitboard calculations are adapted and applied to this new game domain from the modern literature on writing performant chess engines (for example of performant chess engine, see: Stockfish https://github.com/official-stockfish/Stockfish)\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8985038180835693
      ],
      "excerpt": "Human: Accepts input from the keyboard for moves to make. Takes in an integer from 0-63 starting in the upper left and going right. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8326371850273536
      ],
      "excerpt": "MonteCarlo: AI that uses the AlphaZero rollout algorithm to select its next move. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8286265461291429,
        0.955580154377341
      ],
      "excerpt": "The engine for the othello game. Handles playing moves, finding legal moves, and tracking the board state. \nDefinitions for types of players. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "C++ / Python - Othello (Reversi) AI trained using reinforcement learning",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/aduerig/burrus/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 17:18:13 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/aduerig/burrus/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "aduerig/burrus",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/aduerig/burrus/master/train_serial.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9344174150249609
      ],
      "excerpt": "then run train_serial.sh \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8298405377254383,
        0.8495067357616555
      ],
      "excerpt": "The main model for the MonteCarlo players to use. Uses tensorflow. Contains the train() script that play_and_train.py calls. \nPlays a certain number of games on one processor. Command line args are -rank and -ngames. Spawns a python_model_communicator.py to comminucate with. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/aduerig/burrus/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "Python",
      "Makefile",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "othello",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "burrus",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "aduerig",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/aduerig/burrus/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Unix based environment\n* Python 3.5 or above\n\t* numpy \n\t* tensorflow \n\t* posix_ipc\n* std c++14\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Unix based environment\n* Python 3.5 or above\n\t* numpy \n\t* tensorflow \n\t* posix_ipc\n* std c++14\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Bridges is a supercomputing cluster that was used during the creation and training of burrus:\nhttps://www.psc.edu/bridges\nBridges allowed burrus to execute hundreds of games in parellel, all with seperate GPUs.\n\n\nTo run interactively (not with a job script):  \n\t- Run \"module load tensorflow/1.5_gpu gcc\"  \n\t- Run \"pip install --user posix_ipc\"  \n\t- Then run \"interact -gpu\" to get a hold of gpu  \n\t- Run \"make\"  \n\t- The bridges environment should be ready to run any of the files outputted from make. \n\nWarning, if \"module purge\" is run, then \"module load slurm/default psc_path/1.1\" must be run to interact with the GPU.\n\nIf you encounter an error that tensorflow session is unable to be created, it means that your GPU memory is full.\n\nRun \"nvidia-smi\" to check on gpu memory usage.\n\nIf you encounter the error: \"Check failed: stream->parent()->GetConvolveAlgorithms( conv_parameters.ShouldIncludeWinogradNonfusedAlgo<T>(), &algorithms)\", then delete the .nv folder from your home directory\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Mon, 27 Dec 2021 17:18:13 GMT"
    },
    "technique": "GitHub API"
  },
  "support": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Bridges is a supercomputing cluster that was used during the creation and training of burrus:\nhttps://www.psc.edu/bridges\nBridges allowed burrus to execute hundreds of games in parellel, all with seperate GPUs.\n\n\nTo run interactively (not with a job script):  \n\t- Run \"module load tensorflow/1.5_gpu gcc\"  \n\t- Run \"pip install --user posix_ipc\"  \n\t- Then run \"interact -gpu\" to get a hold of gpu  \n\t- Run \"make\"  \n\t- The bridges environment should be ready to run any of the files outputted from make. \n\nWarning, if \"module purge\" is run, then \"module load slurm/default psc_path/1.1\" must be run to interact with the GPU.\n\nIf you encounter an error that tensorflow session is unable to be created, it means that your GPU memory is full.\n\nRun \"nvidia-smi\" to check on gpu memory usage.\n\nIf you encounter the error: \"Check failed: stream->parent()->GetConvolveAlgorithms( conv_parameters.ShouldIncludeWinogradNonfusedAlgo<T>(), &algorithms)\", then delete the .nv folder from your home directory\n\n\n",
      "technique": "Header extraction"
    }
  ]
}