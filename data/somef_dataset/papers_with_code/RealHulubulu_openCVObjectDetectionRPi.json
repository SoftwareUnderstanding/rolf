{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1704.04861\n\nUNC Chapel Hill, Zoox, Google, University\nof Michigan Ann-Arbor paper on SSD\nhttps://www.cs.unc.edu/~wliu/papers/ssd.pdf\n\nNotify-Run Website and PyPI page\nhttps://notify.run/\nhttps://pypi.org/project/notify-run/\n"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8532859960841976
      ],
      "excerpt": "State University on April 25th, 2019. This is a poster \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8090016440670298
      ],
      "excerpt": "object again. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "mentioned above. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8018417085901867
      ],
      "excerpt": "-General project description and info on OpenCV DNN- \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8808015544949902
      ],
      "excerpt": "For info about TFRecords and protobuf, see the article \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9146894306581498
      ],
      "excerpt": "object detection. A brief \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8182871566850202
      ],
      "excerpt": "Heartbeat article discussing OpenCV DNN by \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9343900839872272,
        0.8109194328925066
      ],
      "excerpt": "Cornell MobileNets paper summary and info \nUNC Chapel Hill, Zoox, Google, University \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/RealHulubulu/openCVObjectDetectionRPi",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-03-30T20:41:41Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-12-07T00:07:17Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8976427319923757
      ],
      "excerpt": "*Presented the project at C-Day at KSU. We did not win \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9019330069385545,
        0.9126565233524971,
        0.9641413136151883
      ],
      "excerpt": "from 5:28pm to 7:27pm on two dozen glazed donuts. All \ndata from this test is in the new CDayDataSpring2019 \nfolder. The extracted data is also in the foloder as \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9152647773903277,
        0.9413247972620616
      ],
      "excerpt": "*Got a lot of good feedback from C-Day on changes to  \nimplement in the project. Aside from exploring using \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9466149811717739
      ],
      "excerpt": "here is to make object detection for the price of a  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8563822109786647,
        0.9251429693988662
      ],
      "excerpt": "the semester is wrapping up. It will continue over \nthe summer and for the rest of the year.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9302197166521399,
        0.8443792870666329
      ],
      "excerpt": "*The project is being presented at C-Day at Kennesaw \nState University on April 25th, 2019. This is a poster \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.854345519901665
      ],
      "excerpt": "submit projects and research to be judged. We hope to \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490037945672047
      ],
      "excerpt": "the repo. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9900982240538003,
        0.8924945643470663
      ],
      "excerpt": "listed in the list of detectable objects. The plan is \nto keep them removed as counting sinks and toilets is \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9025613584923098,
        0.9003629944045606
      ],
      "excerpt": "*Updated the file structure of the actual repository. \nNow there is a SampleData folder that has all of the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8920209640345875
      ],
      "excerpt": "as the actual test data. There is also an included  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9511267419233329
      ],
      "excerpt": "are handled for calibration and at the start of the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9040241721875536
      ],
      "excerpt": "be detected (which is unlikely) or do not know how to \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.979808573118796
      ],
      "excerpt": "of the detectable objects. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.987880360079995,
        0.9103588320941899
      ],
      "excerpt": "*Here is a linked to a short video of some of the live \ntesting we did today using donuts. Also found in the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9821960311537381
      ],
      "excerpt": "*Updated how data is written to console and to data log  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9193022184948189,
        0.8747434341701635,
        0.9265610491385662
      ],
      "excerpt": "*Added in a section of code specifically for detecting \ndonuts. We have been running a lot of donut tests as of  \nlate. There is an error where when one donut is left in \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9013405095870342,
        0.858241215617331
      ],
      "excerpt": "twice if not using calibration code. It is more obvious \nwhen looking at the code. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8339166323481786,
        0.9434344650872907,
        0.9903700123921236
      ],
      "excerpt": "the top of the objectDetection python file. It is now  \neasier to make this time interval part of the user input \nbut is remaining hardcoded to avoid mistakes when we \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.897435506332733
      ],
      "excerpt": "*Added link to tutorial video of how the code works in \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.872401488191452,
        0.9860459139338609
      ],
      "excerpt": "*Added in Google AI blog link as a reference. \n*Corrected the origin of Mobilenets as a Google project \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9245562398239235,
        0.974621325957668
      ],
      "excerpt": "*Corrected some of the readme as well as added in some \nnotes about some of the code including the algorithm  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9195267528688277
      ],
      "excerpt": "were all on what portions of the code does. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490037945672047,
        0.940551255417426
      ],
      "excerpt": "the runtime displayed. \n*Forgot to mention in the last update that the  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8872170529027735,
        0.845751430842614
      ],
      "excerpt": "track objects that are calibrated. All objects are \nrecorded in log files to keep all data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9095955081693874
      ],
      "excerpt": "are also written to console. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9546627346720485
      ],
      "excerpt": "detected percentage is printed next to the name of the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9282174418041612,
        0.9932223376274617,
        0.8192564749995552,
        0.8048908810792386
      ],
      "excerpt": "reflect what we have written for a paper on this  \n*We have submitted a draft of paper for this project. \nIf we move to get it published, we will put a copy of \nit in this Github. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9255408288493593
      ],
      "excerpt": "counting of objects. It looks at the bounding boxes of  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567887341621398
      ],
      "excerpt": "all are depleted and skip the depletion threshold  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8292220352147017
      ],
      "excerpt": "that said object is depleted. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8604944239939021
      ],
      "excerpt": "of the output from openCV to log all things that are \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9280594880998814
      ],
      "excerpt": "code. Found out that where the items are in the image \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8674013389535393,
        0.9940132385650797
      ],
      "excerpt": "how SSD works for detecting objects. Best advice is  \nto have objects close to the center of the image and \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8852986162555796
      ],
      "excerpt": "some objects are harder to detect than others. Bananas  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.867469656978509
      ],
      "excerpt": "work but has issues with placement within the image as \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.872700733450159,
        0.8916863262233127,
        0.9623417074104724,
        0.980974123772756,
        0.8912804654849583
      ],
      "excerpt": "project itself. \n-General project description and info on OpenCV DNN- \nThe project runs on a Raspberry Pi 3b+.  \nThis project is designed to be a solution for low-cost \nat-home inventory management. The project itself uses a \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8268378836532492,
        0.833350032771181,
        0.961951829951988,
        0.9893455592128102
      ],
      "excerpt": "images of objects pre-trained in data models and counts \nhow many objects there are. It sends notifications saved  \nas text strings to a mobile phone. The notifications  \ncontain the objects detected and the quantities of said  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.996070635344735,
        0.9647628960005479
      ],
      "excerpt": "in this readme. The combination is MobileNet-SSD and is \nthe software behind how the data models are created and \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8195260999227824
      ],
      "excerpt": "DNN. The entire project does object detection on the Pi. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9599926385495294,
        0.8984521947020689,
        0.8872733966650348,
        0.9055508150457171
      ],
      "excerpt": "The code is an implementation of the Object Detection \nTensorflow API found at the bottom of this readme. \nThere is some code taken from rdeepc (Saumya Shovan Roy) \nin his overview of how OpenCV DNN works with his repo \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9419967931601833,
        0.8793993662376602,
        0.9084168346107817
      ],
      "excerpt": "This is a project using OpenCV to detect objects trained  \non models using the coco data set. OpenCV is a library  \nthat can be used in tandem with Tensorflow but also  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9163781585690718
      ],
      "excerpt": "deep learning libraries that are hard for edge devices.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.823065859287841,
        0.8326722387334278,
        0.9897011570990224
      ],
      "excerpt": "uses the Tensorflow Google Protocol Buffer  \n(protobuf / .pb) system that defines data objects, writes  \nthe data to files, and also reads the data. Protobuf is  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8475377411298342
      ],
      "excerpt": "are how trained models are stored. Protobuf is a way to  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9600441164437455
      ],
      "excerpt": ".pbtxt file is a text-based representation of the  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8350261812476607,
        0.9062731875258191,
        0.938381218352565,
        0.8110628731479351
      ],
      "excerpt": "For info about TFRecords and protobuf, see the article \nat the bottom of this readme. \nFor the model, MobileNet-SSD v2 was used. It is used \nin the Heartbeat article as the suggested model due to \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9728620009911562
      ],
      "excerpt": "the classification of objects within a model. SSD is the  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9214525290412446
      ],
      "excerpt": "discussion of MobileNet and SSD can be found in the stack  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8754188810048372,
        0.9702966565784913,
        0.9504855110136745
      ],
      "excerpt": "this readme. MobileNet was created by Google, and the  \nsummary of the work can be found at the bottom of this  \nreadme in the Google AI post and in the paper summary  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8496945292338846,
        0.8001893665712597,
        0.9062731875258191
      ],
      "excerpt": "between UNC Chapel Hill, Zoox, Google, and University  \nMichigan Ann-Arbor, and the paper about SSD can be found  \nat the bottom of this readme. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.861919635671531
      ],
      "excerpt": "This is a link to a YouTube video that shows a tutorial \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8305307407530139,
        0.8132919158581731
      ],
      "excerpt": "Here is a link to a YouTube video from some live testing \nwe did on April 13th, 2019 using donuts on campus at \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8507673267406312
      ],
      "excerpt": "The code is broken into a very readable file structure. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8515073608820161,
        0.9069003620387621
      ],
      "excerpt": "The calibration code starts off with taking a picture \nand uses that picture to calibrate the detection  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9680288655795464
      ],
      "excerpt": "calibrated for in the picture. The objects accepted are \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9546785151855277,
        0.9408862745803656,
        0.9001083172247607,
        0.9435150137034127,
        0.8014754014368612,
        0.9289239225405276
      ],
      "excerpt": "out all of the detectable objects if the input is  \nincorrect. The assumption is made that the user knows \nwhat input is to be used for calibration. Then the user \nis prompted to enter in the number of the object being \nused for calibration. After this, the user is asked if \nmore objects are being used for calibration. The  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.849440603567047
      ],
      "excerpt": "calibration. The suggestion is to use only one or two  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9754274312882192
      ],
      "excerpt": "The calibration portion of the code creates a \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8375444896124522,
        0.9528167810941783,
        0.9584274015622465,
        0.931691821406773
      ],
      "excerpt": "threshold is not used, a default threshold is then \nused instead. It is set to .2 in the objectDetection \ncode as that is a reasonable minimum threshold for our  \npurposes. The .2 eliminates many of the false positives  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8055353687445214
      ],
      "excerpt": "When running the object detection portion of the code \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9367379348519504
      ],
      "excerpt": "There is commented out code for a for loop that can be \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8637426124905045,
        0.9280464683152267
      ],
      "excerpt": "two iteration for loop is the simplest example of use  \nfor our inventory management idea as it can track  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9203973356777121
      ],
      "excerpt": "Within the while loop is an algorithm that detects any \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8820865358748514,
        0.8827930589879583
      ],
      "excerpt": "are double counts of an already detected object, with \nthe double count either being a second count of that  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9576143111297668
      ],
      "excerpt": "banana or count it as a banana and an apple. The  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8632507184410046
      ],
      "excerpt": "similar in position and shape to any exisitng boxes  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9432546722730112,
        0.8208847688331039
      ],
      "excerpt": "The classNames file lists out all of the objects  \npre-trained in the MobileNet-SSD v2 model found in the  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8646872759541281,
        0.9764647360727199
      ],
      "excerpt": "from 1 to 90 but doesn\u2019t have the names of the objects.  \nHence the listing out of the objects in a dictionary. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9137083595914401,
        0.9235698393023449
      ],
      "excerpt": "to COCO data set at the bottom of this readme. \nThe following line of code is the model created using  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8453269358076007,
        0.860059181823877,
        0.8210243898630363
      ],
      "excerpt": "text-based .pbtxt as discussed above. \nmodel = cv2.dnn.readNetFromTensorflow('frozen_inference_graph.pb', 'ssd_mobilenet_v2_coco_2018_03_29.pbtxt') \nPast calibration, each image is double saved as the raw \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8074631776323864,
        0.9412281836085613
      ],
      "excerpt": "with bounding boxes have labels that say what is  \ndetected with a rounded detection percentage next to the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8884083582379352
      ],
      "excerpt": "time between each image taken. Next in the log is an \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.803938783640394,
        0.8947060338376611
      ],
      "excerpt": "positives. The dimensions of the array are 100 rows by 7 \ncolumns. The rows are for each object detected. It is  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8109575858597519
      ],
      "excerpt": "the array is empty. The second entry is the object that \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8484128773205203
      ],
      "excerpt": "is the detection percentage. The last four entries are  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9747034176386913,
        0.9358929230685717
      ],
      "excerpt": "important to have a log of everything that is detected. \nBelow the array is the runtime for detecting all objects \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9443038053247317
      ],
      "excerpt": "after the number of objects is a message that says \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9724897225136321
      ],
      "excerpt": "nothing is detected it prints 'Nothing Detected'. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8605285778100626,
        0.826164314366004
      ],
      "excerpt": "The file itself is created at the start of the \nfor/while loop that the main code is within. Each pass \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9721291161164484
      ],
      "excerpt": "of objects that are in the calibration image. Following \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9475391752131419
      ],
      "excerpt": "with a threshold of 0.9. For each iteration if it is  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.976628110653463,
        0.8863673683460489
      ],
      "excerpt": "the threshold is reduced by .05. This repeats until all  \nobjects are detected. There is no extra code here to  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8996027335835877
      ],
      "excerpt": "only realized after all real objects are detected as  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9683108924908824,
        0.9504759696661907,
        0.9937412632232139
      ],
      "excerpt": "the number of objects the threshold is increased by .01  \nuntil the correct number is reached. At the end of this  \nlog is the runtime of calibration which is measured in \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9859742788557853
      ],
      "excerpt": "readme. It is a library that is used to send \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8216563427607716
      ],
      "excerpt": "There is an issue with a channel not working after  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8255324798490166
      ],
      "excerpt": "info so I don't recommend this method. Using the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9783315145116549
      ],
      "excerpt": "The calibration info and most of the info saved to  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8487837413093884
      ],
      "excerpt": "keep track of what is happening during script runs \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8752756471472596
      ],
      "excerpt": "-References / Resources for more info- \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8304068326568911
      ],
      "excerpt": "Google AI Blog Post Introducing Mobilenets \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.908925214220865
      ],
      "excerpt": "TFRecords and Protobuf \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8528706453189153
      ],
      "excerpt": "(with pre-trained models and code to create  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8392017976072299
      ],
      "excerpt": "General Implementation based on TensorFlow API  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8140975807714469
      ],
      "excerpt": "Cornell MobileNets paper summary and info \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9793920018998821
      ],
      "excerpt": "of Michigan Ann-Arbor paper on SSD \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "object detection on RPi using OpenCV DNN",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/RealHulubulu/openCVObjectDetectionRPi/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 22:06:54 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/RealHulubulu/openCVObjectDetectionRPi/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "RealHulubulu/openCVObjectDetectionRPi",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8060157724499407
      ],
      "excerpt": "the repo. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8677275935505847
      ],
      "excerpt": "https://youtu.be/A0Lc6IlNJRM   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8212766384551468
      ],
      "excerpt": "CPU/GPU than the Pi. The way OpenCV uses .pb files is  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8677275935505847
      ],
      "excerpt": "https://youtu.be/A0Lc6IlNJRM   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8800125242190036
      ],
      "excerpt": "You can do so from commandline or in Python script. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8103532380153152
      ],
      "excerpt": "a QR code for the channel name web address. Any  \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9491720719769071
      ],
      "excerpt": "data from a sample test in the same file folder format \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8200364419796125
      ],
      "excerpt": "console output file to show what prints to console. In \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8098674133178073
      ],
      "excerpt": "SampleData folder. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8631989312836298
      ],
      "excerpt": "are running tests. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.874377238341728
      ],
      "excerpt": "*Updated sample of log file and console output to have \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8836764177981227
      ],
      "excerpt": "models in the same folder as main.py. You can have these  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8019644770030332,
        0.8019644770030332
      ],
      "excerpt": "readNetFromTensorflow('Path/To/File/' + modelName.pb,  \n'Path/To/File/' + modelName.pbtxt). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8315274795726791
      ],
      "excerpt": "found in the array in seconds. Then the next line lists \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8885376692563765
      ],
      "excerpt": "Each log file captures all data per run of the script. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8070961147993696
      ],
      "excerpt": "file names are timestamps, you can know exactly when \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/RealHulubulu/openCVObjectDetectionRPi/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "OpenCV Object Detection without Tensorflow on Raspberry Pi for Automated Inventory Management",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "openCVObjectDetectionRPi",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "RealHulubulu",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/RealHulubulu/openCVObjectDetectionRPi/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Thu, 23 Dec 2021 22:06:54 GMT"
    },
    "technique": "GitHub API"
  }
}