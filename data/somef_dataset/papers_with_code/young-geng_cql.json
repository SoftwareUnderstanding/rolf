{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2006.04779",
      "https://arxiv.org/abs/1812.05905"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The project organization is inspired by [TD3](https://github.com/sfujim/TD3).\nThe SAC implementation is based on [rlkit](https://github.com/vitchyr/rlkit).\nTHe CQL implementation is based on [CQL](https://github.com/aviralkumar2907/CQL).\nThe viskit visualization is taken from [viskit](https://github.com/vitchyr/viskit), which is taken from [rllab](https://github.com/rll/rllab).\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9062726906261342
      ],
      "excerpt": "export WANDB_API_KEY='YOUR W&amp;B API KEY HERE' \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/young-geng/CQL",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-08-17T23:51:08Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-17T02:19:13Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9811331231097978
      ],
      "excerpt": "A simple and modular implementation of the Conservative Q Learning and Soft Actor Critic algorithm in PyTorch. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Conservative Q Learning on top of SAC",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/young-geng/cql/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Fri, 24 Dec 2021 20:45:38 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/young-geng/CQL/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "young-geng/CQL",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Install and use the included Ananconda environment\n```\n$ conda env create -f environment.yml\n$ source activate SimpleSAC\n```\nYou'll need to [get your own MuJoCo key](https://www.roboti.us/license.html) if you want to use MuJoCo.\n\n2. Add this repo directory to your `PYTHONPATH` environment variable.\n```\nexport PYTHONPATH=\"$PYTHONPATH:$(pwd)\"\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8837680365796365
      ],
      "excerpt": "python -m viskit './experiment_output' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8958178975446902,
        0.8837680365796365
      ],
      "excerpt": "Then you can run experiments with W&B logging turned on: \npython -m SimpleSAC.conservative_sac_main \\ \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/young-geng/CQL/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "JavaScript",
      "HTML",
      "CSS"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'The MIT License\\n\\nCopyright (c) 2020 Xinyang Geng.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "CQL",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "CQL",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "young-geng",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/young-geng/CQL/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You can run SAC experiments using the following command:\n```\npython -m SimpleSAC.sac_main \\\n    --env 'HalfCheetah-v2' \\\n    --logging.output_dir './experiment_output'\n```\nAll available command options can be seen in SimpleSAC/conservative\\_sac_main.py and SimpleSAC/conservative_sac.py.\n\n\nYou can run CQL experiments using the following command:\n```\npython -m SimpleSAC.conservative_sac_main \\\n    --env 'halfcheetah-medium-v0' \\\n    --logging.output_dir './experiment_output'\n```\n\nIf you want to run on CPU only, just add the `--device='cpu'` option.\nAll available command options can be seen in SimpleSAC/sac_main.py and SimpleSAC/sac.py.\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "In order to save your time and compute resources, I've done a sweep of CQL on certain\nD4RL environments with various min Q weight values. [The results can be seen here](https://wandb.ai/ygx/CQL--cql_min_q_weight_sweep_1).\nYou can choose the environment to visualize by filtering on `env`. The results for each `cql.cql_min_q_weight` on each `env`\nis repeated and average across 3 random seeds.\n\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 21,
      "date": "Fri, 24 Dec 2021 20:45:38 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "pytorch",
      "reinforcement-learning"
    ],
    "technique": "GitHub API"
  }
}