{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The idea of calculating intersection area is inspired by this paper:\n\n    @INPROCEEDINGS{8886046,\n        author={D. {Zhou} and J. {Fang} and X. {Song} and C. {Guan} and J. {Yin} and Y. {Dai} and R. {Yang}},\n        booktitle={2019 International Conference on 3D Vision (3DV)}, \n        title={IoU Loss for 2D/3D Object Detection}, \n        year={2019},\n        pages={85-94},}\n\nSome code for CUDA extension is modified from:\n\n    @article{pytorchpointnet++,\n        Author = {Erik Wijmans},\n        Title = {Pointnet++ Pytorch},\n        Journal = {https://github.com/erikwijmans/Pointnet2_PyTorch},\n        Year = {2018}\n    }\n\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1911.08287"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@INPROCEEDINGS{8886046,\n    author={D. {Zhou} and J. {Fang} and X. {Song} and C. {Guan} and J. {Yin} and Y. {Dai} and R. {Yang}},\n    booktitle={2019 International Conference on 3D Vision (3DV)}, \n    title={IoU Loss for 2D/3D Object Detection}, \n    year={2019},\n    pages={85-94},}\n\nSome code for CUDA extension is modified from:\n@article{pytorchpointnet++,\n    Author = {Erik Wijmans},\n    Title = {Pointnet++ Pytorch},\n    Journal = {https://github.com/erikwijmans/Pointnet2_PyTorch},\n    Year = {2018}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8982846210657688
      ],
      "excerpt": "[ ] Validate 2d/3d IoU loss in Object detection \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lilanxiao/Rotated_IoU",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-08-11T16:44:51Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-23T08:19:45Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This repo is an unofficial implementation of [IoU Loss for 2D/3D Object Detection](https://arxiv.org/pdf/1908.03851.pdf). It contains the Pytorch function which calculates the intersection area of oriented rectangles using GPU.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8756272574961997
      ],
      "excerpt": "The CUDA extension is modified recently to cover some corner cases. Please consider to update the code and re-compile the extension. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9356540663605066,
        0.9723424170477977
      ],
      "excerpt": "[x] CUDA extension to anti-clockwise sort vertices of the intersection polygon of two rectangles \n[x] Pytorch function to calculate the intersection of area of rectangles using functions above \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8883968109248486
      ],
      "excerpt": "[x] Rotated 2d/3d GIoU and DIoU loss \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Differentiable IoU of rotated bounding boxes using Pytorch",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lilanxiao/Rotated_IoU/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 35,
      "date": "Fri, 24 Dec 2021 06:33:07 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lilanxiao/Rotated_IoU/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "lilanxiao/Rotated_IoU",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.8858971028023249,
        0.8858971028023249
      ],
      "excerpt": "python demo.py --loss giou       \npython demo.py --loss diou \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lilanxiao/Rotated_IoU/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Cuda",
      "C++",
      "C"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Lanxiao Li\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Differentiable IoU of Oriented Boxes",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Rotated_IoU",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "lilanxiao",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lilanxiao/Rotated_IoU/blob/master/readme.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Code is tested on Ubuntu 18.04. Following dependencies are needed\n\n    cudatoolkit=10.2\n    pytorch=1.5         ",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 226,
      "date": "Fri, 24 Dec 2021 06:33:07 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "pytorch",
      "rotated-boxes-iou",
      "object-detection",
      "iou-loss",
      "differentiable-iou"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "First, compile the CUDA extension.\n\n    cd cuda_op\n    python setup.py install\n\nThen, run a demo which validate the Pytorch functions and CUDA extension.\n\n    cd ..\n    python demo.py\n\nThis demo trains a network which takes N set of box corners and predicts the `x, y, w, h` and `angle` of each rotated boxes. In order to do the back-prop, the predicted box parameters and the GT are converted to coordinates of box corners. The area of intersection is calculated using the Pytorch function with CUDA extension. Then, the GIoU loss or DIoU loss can be calculated. This demo first generates data and then do the training.\n\nYou are expected to see some information like followings:\n\n    ... generating 819200 boxes, please wait...\n    ... generating 81920 boxes, please wait...\n    data saved in:  ./data\n    [Epoch 1: 10/200] train loss: 0.6721  mean_iou: 0.3703\n    [Epoch 1: 20/200] train loss: 0.4931  mean_iou: 0.5211\n    [Epoch 1: 30/200] train loss: 0.4532  mean_iou: 0.5546\n    [Epoch 1: 40/200] train loss: 0.4249  mean_iou: 0.5805\n    [Epoch 1: 50/200] train loss: 0.4361  mean_iou: 0.5713\n    [Epoch 1: 60/200] train loss: 0.4148  mean_iou: 0.5910\n    [Epoch 1: 70/200] train loss: 0.4272  mean_iou: 0.5803\n    [Epoch 1: 80/200] train loss: 0.4283  mean_iou: 0.5801\n    [Epoch 1: 90/200] train loss: 0.4203  mean_iou: 0.5879\n\nNote the `train loss` drops and the `mean_iou` increases, which shows the functions are differentiable.\n\n",
      "technique": "Header extraction"
    }
  ]
}