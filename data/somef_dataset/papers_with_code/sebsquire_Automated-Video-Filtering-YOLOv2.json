{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1506.02640"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9978775923203537
      ],
      "excerpt": "Title: Automated Video Filter for traffic analysis \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sebsquire/Automated-Video-Filtering-YOLOv2",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-12-18T17:20:04Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-12-20T19:57:02Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8046803918954334
      ],
      "excerpt": "Reduces specific manual video inspection task by discarding the majority of meaningless videos. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9847176479223733
      ],
      "excerpt": "Problem: A friend mentioned a neighbour of his was receiving significant traffic to their home run business causing disruptions on their usually quiet road, along with extra noise pollution and safety issues. The council was unwilling to hear a case without evidence, which it was unwilling to collect. A fixed motion detecting camera used for security captured areas of the public road but resulted in a large number of videos that were not meaningful - people walking their dogs and putting bins out, trees blowing in the wind, etc. This seemed like the perfect use for machine learning image processing algorithms to filter out the majority of meaningless videos and allow for a drastically reduced manual video filtering task. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8278387043074839,
        0.9194731481471544,
        0.8095357150023427
      ],
      "excerpt": "Method (techniques explained in Module Descriptions and noted code): \n - ~3500 videos/day are produced, presented as two second chunks due to a characteristic of the motion detection camera software. Hence, consecutive videos concerning the same object must be merged for easier watchability. This reduces number of videos needed to be inspected by 90%, although overall length of video to be inspected is the same. \n - Merged videos are searched by the YOLOv2 algorithm to find those containing vehicles and frame by frame results are recorded in individual CSVs for each video. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9339906289722717
      ],
      "excerpt": " - RealTimeVidDetect.py: Detects objects in real time for an input video as a demonstration of the YOLOv2 algorithm. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9015505090655256
      ],
      "excerpt": " - Process.py: Combines previous 3 modules to fully process a batch of input videos and produce a details of videos to be manually inspeced. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9074807531972944
      ],
      "excerpt": "Sample videos contain (once merged) one false positive, two true negatives, and two true positives for illustration of each. The cost of false negatives was deemed to be much higher than false positives so pixel values for vehicle detection are adjusted such as to effectively remove the possibility of false negatives. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8631524310977254,
        0.9645785233704133
      ],
      "excerpt": "Results: Number of videos to be manually inspected decreased by ~98.5%. This is composed of a ~90% decrease through merging consecutive videos and subsequent ~85% decrease through retaining only videos containing vehicles in positions indicating possible business traffic. Hence, ~50 videos must be manually inspected per day, of which around half contain business traffic. \nFYI: The council sought and gained assurances from the neighbour on levels of traffic and he ceased pursuing the case. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9696576033109929
      ],
      "excerpt": " - Mask-R-CNN yields more detailed results allowing for semantic segmentation of different object instances, leading to theoretically perfectly accurate automated video inspection for this application (as vehicle orientation indicated by masks produced can be used to highlight those pulling into the neighbours) but requires significantly more processing time and was deemed inapplicable given the volume of video to be processed per day. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Reduces specific manual video inspection task by retaining only meaningful videos ",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sebsquire/Automated-Video-Filtering-YOLOv2/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 19:45:30 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/sebsquire/Automated-Video-Filtering-YOLOv2/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "sebsquire/Automated-Video-Filtering-YOLOv2",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9824844714479919
      ],
      "excerpt": "Dependencies: Python 3, Darkflow's YOLOv2, OpenCV, NumPy, tqdm, Pandas, glob.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.857453882850984
      ],
      "excerpt": " - Download sample videos from https://www.dropbox.com/sh/8m7xzrxmw75hrlq/AABdE0hD9nAHgHkzoSHc1_SMa?dl=0 \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8075522361238822
      ],
      "excerpt": " - Run Process.py and select Y for each of the 3 options \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/sebsquire/Automated-Video-Filtering-YOLOv2/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Automated-Video-Filtering-YOLOv2",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Automated-Video-Filtering-YOLOv2",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "sebsquire",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sebsquire/Automated-Video-Filtering-YOLOv2/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 19:45:30 GMT"
    },
    "technique": "GitHub API"
  }
}