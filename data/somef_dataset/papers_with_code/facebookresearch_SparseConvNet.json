{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1706.01307",
      "https://arxiv.org/abs/1711.10275",
      "https://arxiv.org/abs/1811.10355",
      "https://arxiv.org/abs/2003.06537",
      "https://arxiv.org/abs/1711.10275",
      "https://arxiv.org/abs/1706.01307](https://arxiv.org/abs/1706.01307",
      "https://arxiv.org/abs/1706.01307",
      "https://arxiv.org/abs/1706.01307"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you find this code useful in your research then please cite:\n\n**[3D Semantic Segmentation with Submanifold Sparse Convolutional Networks, CVPR 2018](https://arxiv.org/abs/1711.10275)** <br />\n[Benjamin Graham](https://research.fb.com/people/graham-benjamin/), <br />\n[Martin Engelcke](http://ori.ox.ac.uk/mrg_people/martin-engelcke/), <br />\n[Laurens van der Maaten](https://lvdmaaten.github.io/), <br />\n\n```\n@article{3DSemanticSegmentationWithSubmanifoldSparseConvNet,\n  title={3D Semantic Segmentation with Submanifold Sparse Convolutional Networks},\n  author={Graham, Benjamin and Engelcke, Martin and van der Maaten, Laurens},\n  journal={CVPR},\n  year={2018}\n}\n```\n\nand/or\n\n**[Submanifold Sparse Convolutional Networks, https://arxiv.org/abs/1706.01307](https://arxiv.org/abs/1706.01307)** <br />\n[Benjamin Graham](https://research.fb.com/people/graham-benjamin/), <br />\n[Laurens van der Maaten](https://lvdmaaten.github.io/), <br />\n\n```\n@article{SubmanifoldSparseConvNet,\n  title={Submanifold Sparse Convolutional Networks},\n  author={Graham, Benjamin and van der Maaten, Laurens},\n  journal={arXiv preprint arXiv:1706.01307},\n  year={2017}\n}\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{SubmanifoldSparseConvNet,\n  title={Submanifold Sparse Convolutional Networks},\n  author={Graham, Benjamin and van der Maaten, Laurens},\n  journal={arXiv preprint arXiv:1706.01307},\n  year={2017}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{3DSemanticSegmentationWithSubmanifoldSparseConvNet,\n  title={3D Semantic Segmentation with Submanifold Sparse Convolutional Networks},\n  author={Graham, Benjamin and Engelcke, Martin and van der Maaten, Laurens},\n  journal={CVPR},\n  year={2018}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9122134139540443
      ],
      "excerpt": "inputSpatialSize = model.input_spatial_size(torch.LongTensor([10, 10])) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "            if c == 'X': \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9598666462236302
      ],
      "excerpt": "Spatially-sparse convolutional neural networks, 2014 SparseConvNets for Chinese handwriting recognition \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9999883317438976,
        0.9625313928258
      ],
      "excerpt": "Sparse 3D convolutional neural networks, BMVC 2015 SparseConvNets for 3D object recognition and (2+1)D video action recognition. \nKaggle plankton recognition competition, 2015 Third place. The competition solution is being adapted for research purposes in EcoTaxa. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9417306175250294
      ],
      "excerpt": "3D Semantic Segmentation with Submanifold Sparse Convolutional Networks, 2017 Semantic segmentation for the ShapeNet Core55 and NYU-DepthV2 datasets, CVPR 2018 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeOfConduct": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://raw.githubusercontent.com/facebookresearch/SparseConvNet/main/CODE_OF_CONDUCT.md",
    "technique": "File Exploration"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/facebookresearch/SparseConvNet",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing to SparseConvNet\nWe want to make contributing to this project as easy and transparent as\npossible.\nPull Requests\nWe actively welcome your pull requests.\n\nFork the repo and create your branch from master.\nEnsure the examples still run.\nIf you haven't already, complete the Contributor License Agreement (\"CLA\").\n\nContributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\nComplete your CLA here: https://code.facebook.com/cla\nIssues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\nFacebook has a bounty program for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\nCoding Style\nWe try to follow the PEP style guidelines and encourage you to as well.\nLicense\nBy contributing to SparseConvNet, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-07-07T15:48:30Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-27T14:04:07Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8735929036597463
      ],
      "excerpt": "This is the PyTorch library for training Submanifold Sparse Convolutional Networks. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9241664853145309
      ],
      "excerpt": "With regular 3x3 convolutions, the set of active (non-zero) sites grows rapidly:<br /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9194319374547486
      ],
      "excerpt": "Disconnected components don't communicate at first, although they will merge due to the effect of strided operations, either pooling or convolutions. Additionally, adding ConvolutionWithStride2-SubmanifoldConvolution-DeconvolutionWithStride2 paths to the network allows disjoint active sites to communicate; see the 'VGG+' networks in the paper.<br /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9615116307812352,
        0.989113264829949
      ],
      "excerpt": "SparseConvNet supports input with different numbers of spatial/temporal dimensions. \nHigher dimensional input is more likely to be sparse because of the 'curse of dimensionality'. <br /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8873504706027814,
        0.9747804988871803,
        0.8275221724571172,
        0.9569123937410655,
        0.951012156767278
      ],
      "excerpt": "  2|Conv2d|Lines in 2D space, e.g. handwriting \n  3|Conv3d|Lines and surfaces in 3D space or (2+1)D space-time \n  4| - |Lines, etc,  in (3+1)D space-time \nWe use the term 'submanifold' to refer to input data that is sparse because it has a lower effective dimension than the space in which it lives, for example a one-dimensional curve in 2+ dimensional space, or a two-dimensional surface in 3+ dimensional space. \nIn theory, the library supports up to 10 dimensions. In practice, ConvNets with size-3 SVC convolutions in dimension 5+ may be impractical as the number of parameters per convolution is growing exponentially. Possible solutions include factorizing the convolutions (e.g. 3x1x1x..., 1x3x1x..., etc), or switching to a hyper-tetrahedral lattice (see Sparse 3D convolutional neural networks). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8341589559722501
      ],
      "excerpt": "model = scn.Sequential().add( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8797889023458116
      ],
      "excerpt": ": Create Nx3 and Nx1 vectors to encode the messages above: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8930901044020226,
        0.9560187895509076
      ],
      "excerpt": "features = [] \nfor batchIdx, msg in enumerate(msgs): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8930901044020226
      ],
      "excerpt": "                features.append([1]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9269059001902568
      ],
      "excerpt": "features = torch.FloatTensor(features).to(device) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9673647674051571
      ],
      "excerpt": ": feature planes, and 10x10 is the spatial size of the output. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.875150674887989
      ],
      "excerpt": "Workshop on Learning to See from 3D Data, 2017 First place in the semantic segmentation competition. Report \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9727637952818214
      ],
      "excerpt": "Unsupervised learning with sparse space-and-time autoencoders (3+1)D space-time autoencoders \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.990409995738931,
        0.9331956258656663,
        0.953514342372835
      ],
      "excerpt": "MinkowskiEngine is an alternative implementation of SparseConvNet; 0.736 average IOU for ScanNet. \nSpConv: PyTorch Spatially Sparse Convolution Library is an alternative implementation of SparseConvNet. \nLive Semantic 3D Perception for Immersive Augmented Reality describes a way to optimize memory access for SparseConvNet. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Submanifold sparse convolutional networks",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/facebookresearch/SparseConvNet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 276,
      "date": "Wed, 29 Dec 2021 07:32:41 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/facebookresearch/SparseConvNet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "facebookresearch/SparseConvNet",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/facebookresearch/SparseConvNet/main/build.sh",
      "https://raw.githubusercontent.com/facebookresearch/SparseConvNet/main/develop.sh",
      "https://raw.githubusercontent.com/facebookresearch/SparseConvNet/main/examples/3d_segmentation/download_and_split_data.sh",
      "https://raw.githubusercontent.com/facebookresearch/SparseConvNet/main/examples/Assamese_handwriting/process.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Tested with PyTorch 1.3, CUDA 10.0, and Python 3.3 with [Conda](https://www.anaconda.com/).\n\n```\nconda install pytorch torchvision cudatoolkit=10.0 -c pytorch #: See https://pytorch.org/get-started/locally/\ngit clone git@github.com:facebookresearch/SparseConvNet.git\ncd SparseConvNet/\nbash develop.sh\n```\nTo run the examples you may also need to install unrar:\n```\napt-get install unrar\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8897925748609287
      ],
      "excerpt": ": Use the GPU if there is one, otherwise CPU \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8359299706379749
      ],
      "excerpt": "  1|Conv1d| Text, audio \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9012248701992861
      ],
      "excerpt": "import sparseconvnet as scn \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8343047107152568
      ],
      "excerpt": ": output will be 10x10 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8087251027473509,
        0.8087251027473509
      ],
      "excerpt": "    for y, line in enumerate(msg): \n        for x, c in enumerate(line): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8733857617343556,
        0.8719491278656056
      ],
      "excerpt": "print('Input SparseConvNetTensor:', input) \noutput = model(input) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9203542097007853
      ],
      "excerpt": "print('Output SparseConvNetTensor:', output) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/facebookresearch/SparseConvNet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "Python",
      "Cuda",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/facebookresearch/SparseConvNet/main/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'BSD License\\n\\nFor SparseConvNet software\\n\\nCopyright (c) Facebook, Inc. and its affiliates. All rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without modification,\\nare permitted provided that the following conditions are met:\\n\\n * Redistributions of source code must retain the above copyright notice, this\\n   list of conditions and the following disclaimer.\\n\\n * Redistributions in binary form must reproduce the above copyright notice,\\n   this list of conditions and the following disclaimer in the documentation\\n   and/or other materials provided with the distribution.\\n\\n * Neither the name Facebook nor the names of its contributors may be used to\\n   endorse or promote products derived from this software without specific\\n   prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Submanifold Sparse Convolutional Networks",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "SparseConvNet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "facebookresearch",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/facebookresearch/SparseConvNet/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1579,
      "date": "Wed, 29 Dec 2021 07:32:41 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Examples in the examples folder include\n* [Assamese handwriting recognition](https://archive.ics.uci.edu/ml/datasets/Online+Handwritten+Assamese+Characters+Dataset#)\n* [Chinese handwriting for recognition](http://www.nlpr.ia.ac.cn/databases/handwriting/Online_database.html)\n* [3D Segmentation](https://shapenet.cs.stanford.edu/iccv17/) using ShapeNet Core-55\n* [ScanNet](http://www.scan-net.org/) 3D Semantic label benchmark\n\nFor example:\n```\ncd examples/Assamese_handwriting\npython VGGplus.py\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}