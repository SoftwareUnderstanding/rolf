{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1505.04597",
      "https://arxiv.org/abs/1511.00561",
      "https://arxiv.org/abs/1412.6980v8"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You can cite the RainNet model repository as follows: \n\n`Ayzel, G.: RainNet: a convolutional neural network for radar-based precipitation nowcasting. GitHub repository, https://github.com/hydrogo/rainnet, 2020.`\n\nBibTeX:\n```\n@misc{Ayzel2020RainNet,\n  author = {Ayzel, Georgy},\n  title = {RainNet: a convolutional neural network for radar-based precipitation nowcasting},\n  year = {2020},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/hydrogo/rainnet}}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{Ayzel2020RainNet,\n  author = {Ayzel, Georgy},\n  title = {RainNet: a convolutional neural network for radar-based precipitation nowcasting},\n  year = {2020},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/hydrogo/rainnet}}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8252756551763226
      ],
      "excerpt": "<img src=\"misc/RainNet_logo.png\" alt=\"RainNet logo\" width=\"10%\"/> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hydrogo/rainnet",
    "technique": "GitHub API"
  },
  "contact": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Feel free to ask any questions about RainNet by [creating an issue](https://github.com/hydrogo/rainnet/issues).\n",
      "technique": "Header extraction"
    }
  ],
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-01-29T05:51:29Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-24T13:34:31Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Here we introduce RainNet -- a convolutional neural network for radar-based precipitation nowcasting. RainNet was trained to predict continuous precipitation intensities at a lead time of five minutes, using several years of quality-controlled weather radar composites provided by the German Weather Service (DWD). \n\nThe source code of the RainNet model written using [_Keras_](https://keras.io) functional API is in the file `rainnet.py`.\n\nThe pretrained instance of `keras` `Model` for RainNet, as well as RainNet's pretrained weights are available on Zenodo: \n\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3630429.svg)](https://doi.org/10.5281/zenodo.3630429)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9811919192920682
      ],
      "excerpt": "The RainNet's design was inspired by the U-Net and SegNet families of deep learning models which were originally designed for binary segmentation tasks. RainNet follows an encoder-decoder architecture in which the encoder progressively downscales the spatial resolution using pooling, followed by convolutional layers; and the decoder progressively upscales the learned patterns to a higher spatial resolution using upsampling, followed by convolutional layers. There are skip connections from the encoder to the decoder branches in order to ensure semantic connectivity between features on different layers. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9988870073430358
      ],
      "excerpt": "One of the prerequisites for U-Net based architectures is that the spatial extent of input data has to be a multiple of 2<sup>n+1</sup>, where n is the number of max pooling layers. As a consequence, the spatial extent on different resolutional levels becomes identical for the decoder and encoder branches. Correspondingly, the radar composite grids were transformed from the native spatial extent of 900x900 cells to the extent of 928x928 cells using mirror padding. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.857463218195823
      ],
      "excerpt": "In total, RainNet has almost 31.4 million parameters. We optimized these parameters using a procedure of which we show one iteration in figure below. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9800424721827222
      ],
      "excerpt": "First, we read a sample of input data that consists of radar scans at time t-15, t-10, t-5 minutes,  and t (where t is nowcast time), and a sample of the observed precipitation at time t+5. For both, input and observation, we increase the spatial extent to 928x928 using mirror padding, and transform precipitation depth x (in mm) as follows : \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.804653689656476,
        0.947307872742417,
        0.9606162531003972,
        0.987660060674801,
        0.9438915571078231
      ],
      "excerpt": "<img src=\"https://latex.codecogs.com/svg.latex?Loss&space;=&space;\\frac{\\sum_{i=1}^{n}\\ln(\\cosh(now_{i}&space;-&space;obs_{i}))}{n};&space;\\cosh(x)&space;=&space;\\frac{1}{2}(e^{x}&space;&plus;&space;e^{-x})\" title=\"Loss = \\frac{\\sum_{i=1}^{n}\\ln(\\cosh(now_{i} - obs_{i}))}{n}; \\cosh(x) = \\frac{1}{2}(e^{x} + e^{-x})\" /> \nwhere now<sub>i</sub> and obs<sub>i</sub> are nowcast and observation at the i-th location, respectively; cosh is the hyperbolic cosine function; n is the number of cells in radar scans. \nFinally, we update RainNet's model parameters to minimize the loss function using backpropagation algorithm where the Adam optimizer is utilized to compute the gradients. \nWe optimized RainNet's parameters using 10 epochs with a mini batch of size 2. The optimization procedure has converged on the 8<sup>th</sup> epoch showing saturation of RainNet's performance on the validation data. \nThe pretrained weights of the RainNet model are available on Zenodo: . \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "RainNet: a convolutional neural network for radar-based precipitation nowcasting",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hydrogo/rainnet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 42,
      "date": "Thu, 23 Dec 2021 20:45:10 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/hydrogo/rainnet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "hydrogo/rainnet",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/hydrogo/rainnet/master/examples/RainNet_Training.ipynb"
    ],
    "technique": "File Exploration"
  },
  "identifier": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://doi.org/10.5281/zenodo.3630429",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://doi.org/10.5281/zenodo.3629951",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://doi.org/10.5281/zenodo.3630429",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://doi.org/10.5281/zenodo.3630429",
      "technique": "Regular expression"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9072039989396692
      ],
      "excerpt": "<img src=\"misc/RainNet_logo.png\" alt=\"RainNet logo\" width=\"10%\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8702637012831911
      ],
      "excerpt": "<img src=\"misc/RainNet_architecture.png\" alt=\"RainNet architecture\" width=\"100%\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8702637012831911
      ],
      "excerpt": "<img src=\"misc/RainNet_training_procedure.png\" alt=\"RainNet architecture\" width=\"100%\"/> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/hydrogo/rainnet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Georgy Ayzel\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "RainNet: a convolutional neural network for radar-based precipitation nowcasting",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "rainnet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "hydrogo",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hydrogo/rainnet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "hydrogo",
        "body": "The current release v1.0-gmdd of the RainNet model supports the model description paper to be submitted in the [GMD Discussions](https://www.geosci-model-dev.net/).",
        "dateCreated": "2020-01-30T05:39:57Z",
        "datePublished": "2020-01-30T05:59:46Z",
        "html_url": "https://github.com/hydrogo/rainnet/releases/tag/v1.0-gmdd",
        "name": "RainNet v1.0-gmdd",
        "tag_name": "v1.0-gmdd",
        "tarball_url": "https://api.github.com/repos/hydrogo/rainnet/tarball/v1.0-gmdd",
        "url": "https://api.github.com/repos/hydrogo/rainnet/releases/23243628",
        "zipball_url": "https://api.github.com/repos/hydrogo/rainnet/zipball/v1.0-gmdd"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 61,
      "date": "Thu, 23 Dec 2021 20:45:10 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**Prerequisites**: \n* Python 3.6+, \n* Keras 2.2+, \n* h5py 2.8\n* pretrained RainNet model (file `rainnet.h5`) and its weights (file `rainnet_weights.h5`) has to be downloaded from the corresponding [Zenodo repository](https://doi.org/10.5281/zenodo.3630429): [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.3630429.svg)](https://doi.org/10.5281/zenodo.3630429)\n\nThere are two scenarios of how to use the pretrained RainNet model.\n\nThe first scenario allows you to load the RainNet's model architecture alongside pretrained weights using built-in `keras` `load_model` function:\n\n```python3\nfrom keras.models import load_model\n\nmodel = load_model(\"rainnet.h5\")\n```\n\nThe second scenario allows you to build the RainNet model from scratch using `rainnet` function from the module `rainnet.py` and then load pretrained weights stored in the file `rainnet_weights.h5`:\n\n```python3\nfrom rainnet import rainnet\n\nmodel = rainnet()\n\nmodel.load_weights(\"rainnet_weights.h5\")\n```\n\nHaving the RainNet model in place, you can then use built-in `keras` [`Model class API`](https://keras.io/models/model/), e.g., for running the RainNet model or evaluating its skill.\n\nSome available options are:\n* `model.predict(X)` -- runs the model with specified input data _X_ to obtain the corresponding nowcast.\n* `model.evaluate(X, y)` -- returns the loss value for the model in test mode. Here X stands for input data, and y specifies ground truth data. \n* `model.summary()` -- creates a brief summary about model's layers and the number of parameters.\n* `model.get_layer(name, index)` -- retrieves a layer based on either its name or index.\n\n\nIn case you only want to train  RainNet from scratch (on RY or some different radar data archive), you can avoid loading the provided pretrained weights. \nThere is also an option to specify the input data shape using `input_shape` argument (just have in mind that the spatial extent of input data has to be a multiple of 2<sup>n+1</sup>, where _n_ is the number of max pooling layers (4 for the vanilla RainNet)). Then, use the code as follows:\n\n```python3\nfrom rainnet import rainnet\n\n#: you can pass the specific input shape of (x,y,z),\n#: where x and y provide the spatial extent, \n#: and z specifies how many previous radar scans\n#: you want to account for.  \nmodel = rainnet(input_shape=(x,y,z))\n```\n\nYou can find more examples of RainNet usage in the corresponding `examples` subfolder, which is provided as a part of this repository.\n\n",
      "technique": "Header extraction"
    }
  ]
}