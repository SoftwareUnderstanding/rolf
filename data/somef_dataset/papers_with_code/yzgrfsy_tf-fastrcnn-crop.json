{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1612.03144",
      "https://arxiv.org/abs/1612.03144",
      "https://arxiv.org/abs/1704.04224",
      "https://arxiv.org/abs/1702.02138",
      "https://arxiv.org/abs/1704.04224"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you find this implementation or the analysis conducted in our report helpful, please consider citing:\n\n    @article{chen17implementation,\n        Author = {Xinlei Chen and Abhinav Gupta},\n        Title = {An Implementation of Faster RCNN with Study for Region Sampling},\n        Journal = {arXiv preprint arXiv:1702.02138},\n        Year = {2017}\n    }\n    \nOr for a formal paper, [Spatial Memory Network](https://arxiv.org/abs/1704.04224):\n\n    @article{chen2017spatial,\n      title={Spatial Memory for Context Reasoning in Object Detection},\n      author={Chen, Xinlei and Gupta, Abhinav},\n      journal={arXiv preprint arXiv:1704.04224},\n      year={2017}\n    }\n\nFor convenience, here is the faster RCNN citation:\n\n    @inproceedings{renNIPS15fasterrcnn,\n        Author = {Shaoqing Ren and Kaiming He and Ross Girshick and Jian Sun},\n        Title = {Faster {R-CNN}: Towards Real-Time Object Detection\n                 with Region Proposal Networks},\n        Booktitle = {Advances in Neural Information Processing Systems ({NIPS})},\n        Year = {2015}\n    }\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{renNIPS15fasterrcnn,\n    Author = {Shaoqing Ren and Kaiming He and Ross Girshick and Jian Sun},\n    Title = {Faster {R-CNN}: Towards Real-Time Object Detection\n             with Region Proposal Networks},\n    Booktitle = {Advances in Neural Information Processing Systems ({NIPS})},\n    Year = {2015}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{chen2017spatial,\n  title={Spatial Memory for Context Reasoning in Object Detection},\n  author={Chen, Xinlei and Gupta, Abhinav},\n  journal={arXiv preprint arXiv:1704.04224},\n  year={2017}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{chen17implementation,\n    Author = {Xinlei Chen and Abhinav Gupta},\n    Title = {An Implementation of Faster RCNN with Study for Region Sampling},\n    Journal = {arXiv preprint arXiv:1702.02138},\n    Year = {2017}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8943024519418389
      ],
      "excerpt": "  - Train on COCO 2014 trainval35k and test on minival (Iterations: 900k/1190k), 30.2. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8494120656278942
      ],
      "excerpt": "  - Train on COCO 2014 trainval35k and test on minival (900k/1190k), 35.4. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8494120656278942
      ],
      "excerpt": "  - Train Resnet50 on COCO 2014 trainval35k and test on minival (900k/1190k), 32.4. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8943024519418389
      ],
      "excerpt": "  - Train Resnet101 on COCO 2014 trainval35k and test on minival (900k/1190k), 37.4. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yzgrfsy/tf-fastrcnn-crop",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-12-19T03:48:30Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-12-19T07:32:22Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9709657536502594,
        0.9913168973017327,
        0.9520291927196594,
        0.9670415052119818
      ],
      "excerpt": "A Tensorflow implementation of faster RCNN detection framework by Xinlei Chen (xinleic@cs.cmu.edu). This repository is based on the python Caffe implementation of faster RCNN available here. \nNote: Several minor modifications are made when reimplementing the framework, which give potential improvements. For details about the modifications and ablative analysis, please refer to the technical report An Implementation of Faster RCNN with Study for Region Sampling. If you are seeking to reproduce the results in the original paper, please use the official code or maybe the semi-official code. For details about the faster RCNN architecture please refer to the paper Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks. \nThe current code supports VGG16, Resnet V1 and Mobilenet V1 models. We mainly tested it on plain VGG16 and Resnet101 (thank you @philokey!) architecture. As the baseline, we report numbers using a single model on a single convolution layer, so no multi-scale, no multi-stage bounding box regression, no skip-connection, no extra input is used. The only data augmentation technique is left-right flipping during training following the original Faster RCNN. All models are released. \nWith VGG16 (conv5_3): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8019629248370846
      ],
      "excerpt": "With Resnet101 (last conv4): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8714172048282937
      ],
      "excerpt": "More Results: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8803750211128674
      ],
      "excerpt": "  - Due to the randomness in GPU training with Tensorflow especially for VOC, the best numbers are reported (with 2-3 attempts) here. According to my experience, for COCO you can almost always get a very close number (within ~0.2%) despite the randomness. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9383667034651,
        0.821398214001502,
        0.9439099324423044,
        0.9037475352530888
      ],
      "excerpt": "  - Since we keep the small proposals (\\< 16 pixels width/height), our performance is especially good for small objects. \n  - We do not set a threshold (instead of 0.05) for a detection to be included in the final result, which increases recall. \n  - Weight decay is set to 1e-4. \n  - For other minor modifications, please check the report. Notable ones include using crop_and_resize, and excluding ground truth boxes in RoIs during training. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9586115152738285,
        0.9086856961213169,
        0.8290056923818434,
        0.8380990540926213
      ],
      "excerpt": "  - For Resnets, we fix the first block (total 4) when fine-tuning the network, and only use crop_and_resize to resize the RoIs (7x7) without max-pool (which I find useless especially for COCO). The final feature maps are average-pooled for classification and regression. All batch normalization parameters are fixed. Learning rate for biases is not doubled. \n  - For Mobilenets, we fix the first five layers when fine-tuning the network. All batch normalization parameters are fixed. Weight decay for Mobilenet layers is set to 4e-5. \n  - For approximate FPN baseline setup we simply resize the image with 800 pixels, add 32^2 anchors, and take 1000 proposals during testing. \n  - Check out here/here/here for the latest models, including longer COCO VGG16 models and Resnet ones. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8411427044783083,
        0.978822405335542,
        0.9390434731139468,
        0.968966523355069
      ],
      "excerpt": "Additional features not mentioned in the report are added to make research life easier: \n  - Support for train-and-validation. During training, the validation data will also be tested from time to time to monitor the process and check potential overfitting. Ideally training and validation should be separate, where the model is loaded every time to test on validation. However I have implemented it in a joint way to save time and GPU memory. Though in the default setup the testing data is used for validation, no special attempts is made to overfit on testing set. \n  - Support for resuming training. I tried to store as much information as possible when snapshoting, with the purpose to resume training from the latest snapshot properly. The meta information includes current image index, permutation of images, and random state of numpy. However, when you resume training the random seed for tensorflow will be reset (not sure how to save the random state of tensorflow now), so it will result in a difference. Note that, the current implementation still cannot force the model to behave deterministically even with the random seeds set. Suggestion/solution is welcome and much appreciated. \n  - Support for visualization. The current implementation will summarize ground truth boxes, statistics of losses, activations and variables during training, and dump it to a separate folder for tensorboard visualization. The computing graph is also saved for debugging. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924212690395703
      ],
      "excerpt": "   mv vgg_16.ckpt vgg16.ckpt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.965651939988263
      ],
      "excerpt": "  #: NET in {vgg16, res50, res101, res152} is the network arch to use \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.965651939988263
      ],
      "excerpt": "  #: NET in {vgg16, res50, res101, res152} is the network arch to use \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "output  tensorboard    in      https://pan.baidu.com/s/1PDd7wY7XZzlrCGB-56jsEA",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yzgrfsy/tf-fastrcnn-crop/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sun, 26 Dec 2021 20:37:31 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yzgrfsy/tf-fastrcnn-crop/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "yzgrfsy/tf-fastrcnn-crop",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/yzgrfsy/tf-fastrcnn-crop/master/experiments/scripts/convert_vgg16.sh",
      "https://raw.githubusercontent.com/yzgrfsy/tf-fastrcnn-crop/master/experiments/scripts/test_faster_rcnn.sh",
      "https://raw.githubusercontent.com/yzgrfsy/tf-fastrcnn-crop/master/experiments/scripts/train_faster_rcnn.sh",
      "https://raw.githubusercontent.com/yzgrfsy/tf-fastrcnn-crop/master/data/scripts/fetch_faster_rcnn_models.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Please follow the instructions of py-faster-rcnn [here](https://github.com/rbgirshick/py-faster-rcnn#beyond-the-demo-installation-for-training-and-testing-models) to setup VOC and COCO datasets (Part of COCO is done). The steps involve downloading data and optionally creating soft links in the ``data`` folder. Since faster RCNN does not rely on pre-computed proposals, it is safe to ignore the steps that setup proposals.\n\nIf you find it useful, the ``data/cache`` folder created on my side is also shared [here](http://ladoga.graphics.cs.cmu.edu/xinleic/tf-faster-rcnn/cache.tgz).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Clone the repository\n  ```Shell\n  git clone https://github.com/endernewton/tf-faster-rcnn.git\n  ```\n\n2. Update your -arch in setup script to match your GPU\n  ```Shell\n  cd tf-faster-rcnn/lib\n  #: Change the GPU architecture (-arch) if necessary\n  vim setup.py\n  ```\n\n  | GPU model  | Architecture |\n  | ------------- | ------------- |\n  | TitanX (Maxwell/Pascal) | sm_52 |\n  | GTX 960M | sm_50 |\n  | GTX 1080 (Ti) | sm_61 |\n  | Grid K520 (AWS g2.2xlarge) | sm_30 |\n  | Tesla K80 (AWS p2.xlarge) | sm_37 |\n\n  **Note**: You are welcome to contribute the settings on your end if you have made the code work properly on other GPUs. Also even if you are only using CPU tensorflow, GPU based code (for NMS) will be used by default, so please set **USE_GPU_NMS False** to get the correct output.\n\n\n3. Build the Cython modules\n  ```Shell\n  make clean\n  make\n  cd ..\n  ```\n\n4. Install the [Python COCO API](https://github.com/pdollar/coco). The code requires the API to access COCO dataset.\n  ```Shell\n  cd data\n  git clone https://github.com/pdollar/coco.git\n  cd coco/PythonAPI\n  make\n  cd ../../..\n  ```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8324625124654802
      ],
      "excerpt": "  - Due to the randomness in GPU training with Tensorflow especially for VOC, the best numbers are reported (with 2-3 attempts) here. According to my experience, for COCO you can almost always get a very close number (within ~0.2%) despite the randomness. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8254213883331442,
        0.876031526235143,
        0.8725549602927676
      ],
      "excerpt": "   cd data/imagenet_weights \n   wget -v http://download.tensorflow.org/models/vgg_16_2016_08_28.tar.gz \n   tar -xzvf vgg_16_2016_08_28.tar.gz \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466,
        0.8633405492125716
      ],
      "excerpt": "   cd ../.. \n   For Resnet101, you can set up like: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8254213883331442,
        0.876031526235143,
        0.8725549602927676
      ],
      "excerpt": "   cd data/imagenet_weights \n   wget -v http://download.tensorflow.org/models/resnet_v1_101_2016_08_28.tar.gz \n   tar -xzvf resnet_v1_101_2016_08_28.tar.gz \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "   cd ../.. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.884067387307346,
        0.9069687384322455
      ],
      "excerpt": "  ./experiments/scripts/train_faster_rcnn.sh [GPU_ID] [DATASET] [NET] \n  #: GPU_ID is the GPU you want to test on \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9549997561619052
      ],
      "excerpt": "  ./experiments/scripts/train_faster_rcnn.sh 1 coco res101 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.884067387307346,
        0.9069687384322455
      ],
      "excerpt": "  ./experiments/scripts/test_faster_rcnn.sh [GPU_ID] [DATASET] [NET] \n  #: GPU_ID is the GPU you want to test on \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9549997561619052
      ],
      "excerpt": "  ./experiments/scripts/test_faster_rcnn.sh 1 coco res101 \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.80682152106421
      ],
      "excerpt": "  - Train on VOC 2007 trainval and test on VOC 2007 test, 75.7. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8275093558259294
      ],
      "excerpt": "Train (and test, evaluation) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8838148168639296
      ],
      "excerpt": "  #: Examples: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8838148168639296
      ],
      "excerpt": "  #: Examples: \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yzgrfsy/tf-fastrcnn-crop/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell",
      "Cuda",
      "MATLAB",
      "C++",
      "Makefile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "tf-faster-rcnn",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "tf-fastrcnn-crop",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "yzgrfsy",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yzgrfsy/tf-fastrcnn-crop/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "  - A basic Tensorflow installation. The code follows **r1.2** format. If you are using r1.0, please check out the r1.0 branch to fix the slim Resnet block issue. If you are using an older version (r0.1-r0.12), please check out the r0.12 branch. While it is not required, for experimenting the original RoI pooling (which requires modification of the C++ code in tensorflow), you can check out my tensorflow [fork](https://github.com/endernewton/tensorflow) and look for ``tf.image.roi_pooling``.\n  - Python packages you might not have: `cython`, `opencv-python`, `easydict` (similar to [py-faster-rcnn](https://github.com/rbgirshick/py-faster-rcnn)). For `easydict` make sure you have the right version. I use 1.6.\n  - Docker users: Since the recent upgrade, the docker image on docker hub (https://hub.docker.com/r/mbuckler/tf-faster-rcnn-deps/) is no longer valid. However, you can still build your own image by using dockerfile located at `docker` folder (cuda 8 version, as it is required by Tensorflow r1.0.) And make sure following Tensorflow installation to install and use nvidia-docker[https://github.com/NVIDIA/nvidia-docker]. Last, after launching the container, you have to build the Cython modules within the running container. \n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sun, 26 Dec 2021 20:37:31 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Download pre-trained model\n  ```Shell\n  #: Resnet101 for voc pre-trained on 07+12 set\n  ./data/scripts/fetch_faster_rcnn_models.sh\n  ```\n  **Note**: if you cannot download the models through the link, or you want to try more models, you can check out the following solutions and optionally update the downloading script:\n  - Another server [here](http://xinlei.sp.cs.cmu.edu/xinleic/tf-faster-rcnn/).\n  - Google drive [here](https://drive.google.com/open?id=0B1_fAEgxdnvJSmF3YUlZcHFqWTQ).\n\n2. Create a folder and a soft link to use the pre-trained model\n  ```Shell\n  NET=res101\n  TRAIN_IMDB=voc_2007_trainval+voc_2012_trainval\n  mkdir -p output/${NET}/${TRAIN_IMDB}\n  cd output/${NET}/${TRAIN_IMDB}\n  ln -s ../../../data/voc_2007_trainval+voc_2012_trainval ./default\n  cd ../../..\n  ```\n\n3. Demo for testing on custom images\n  ```Shell\n  #: at repository root\n  GPU_ID=0\n  CUDA_VISIBLE_DEVICES=${GPU_ID} ./tools/demo.py\n  ```\n  **Note**: Resnet101 testing probably requires several gigabytes of memory, so if you encounter memory capacity issues, please install it with CPU support only. Refer to [Issue 25](https://github.com/endernewton/tf-faster-rcnn/issues/25).\n\n4. Test with pre-trained Resnet101 models\n  ```Shell\n  GPU_ID=0\n  ./experiments/scripts/test_faster_rcnn.sh $GPU_ID pascal_voc_0712 res101\n  ```\n  **Note**: If you cannot get the reported numbers (79.8 on my side), then probably the NMS function is compiled improperly, refer to [Issue 5](https://github.com/endernewton/tf-faster-rcnn/issues/5).\n\n",
      "technique": "Header extraction"
    }
  ]
}