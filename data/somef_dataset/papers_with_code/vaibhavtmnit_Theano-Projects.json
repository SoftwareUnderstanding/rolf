{
  "citation": [
    {
      "confidence": [
        0.9568193957733768
      ],
      "excerpt": "dataset=data_merged[['snippet', 'title', 'news_description', 'category_id', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if radios=='bar1': \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if radios=='bar1': \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if len(checklists) ==1: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9813161029725735
      ],
      "excerpt": "             'title':xaxis_columns \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9813161029725735
      ],
      "excerpt": "             'title':yaxis_columns \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "         margin={'l': 40, 'b': 40, 't': 10, 'r': 0}, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9813161029725735
      ],
      "excerpt": "            'title': xaxis_column_name, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9813161029725735
      ],
      "excerpt": "            'title': yaxis_column_name, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "        margin={'l': 40, 'b': 40, 't': 10, 'r': 0}, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9813161029725735
      ],
      "excerpt": "            'title':xaxis_column_name_hist \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "NORM_FONT= (\"Verdana\", 10) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "    label.pack(side=\"top\", fill=\"x\", pady=10) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "    if _query: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8028046190715653
      ],
      "excerpt": "        print(\"Complete without fail\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "    if _query: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9620328369818097
      ],
      "excerpt": "        #flash(\"Please click output button for visualization\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if num_cols==[]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if len(num_cols)==1: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if cat_cols==[]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if num_cols==[]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if len(num_cols)==1: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if cat_cols==[]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if num_cols==[]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if len(num_cols)==1: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if cat_cols==[]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if radios=='bar1': \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if radios=='bar1': \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9813161029725735
      ],
      "excerpt": "            'title':xaxis_columns \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9813161029725735
      ],
      "excerpt": "            'title':yaxis_columns \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "        margin={'l': 40, 'b': 40, 't': 10, 'r': 0}, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if num_cols==[]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if len(num_cols)==1: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if cat_cols==[]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if num_cols==[]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if len(num_cols)==1: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if cat_cols==[]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9813161029725735
      ],
      "excerpt": "            'title': xaxis_column_name, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9813161029725735
      ],
      "excerpt": "            'title': yaxis_column_name, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "        margin={'l': 40, 'b': 40, 't': 10, 'r': 0}, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9998184213472832
      ],
      "excerpt": "    <title>Your everyday analytics assitant</title> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9630811906933039
      ],
      "excerpt": "            <button id=\"btnSearch\" class=\"btn btn-lg btn-primary btn-block\" type=\"button\">Query</button> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9630811906933039,
        0.9630811906933039
      ],
      "excerpt": "            <button id=\"btnFireIntermQuery\" class=\"btn btn-lg btn-primary btn-block\" type=\"button\">Search</button> \n            <button id=\"btnReset\" class=\"btn btn-lg btn-primary btn-block\" type=\"button\">Reset</button> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "        <div class=\"col-md-12\" id=\"responseTable\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8772692606136239
      ],
      "excerpt": "        <p>&copy; JPMC 2018</p> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8043073075947367
      ],
      "excerpt": "    if pathname == '/apps/input_app': \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.858364552652157,
        0.858364552652157
      ],
      "excerpt": "            html.Td(\"%Change (KS)\",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  ','width':'10%'}), \n            html.Td(\"%Change (PDO)\",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  ','width':'10%'}) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8130052599129608
      ],
      "excerpt": "        temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px'})) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9083996137433826
      ],
      "excerpt": "return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'5','width':'40%','text-align':'center','margin-left':'30%','margin-right':'30%'}) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8130052599129608
      ],
      "excerpt": "        temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px'})) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8130052599129608,
        0.8130052599129608
      ],
      "excerpt": "            html.Td(\"%Change(KS)\",colSpan='1',style={'border-style':'solid','border-width':'1px'}), \n            html.Td(\"%Change(PDO)\",colSpan='1',style={'border-style':'solid','border-width':'1px'}) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8130052599129608
      ],
      "excerpt": "        temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px'})) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "r_head=['Decile 1','Decile 2','Decile 3','Decile 4','Decile 5','Decile 6','Decile 7','Decile 8','Decile 9','Decile 10'] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8130052599129608
      ],
      "excerpt": "        temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px'})) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8130052599129608
      ],
      "excerpt": "        temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px'})) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "fig = make_subplots(rows=1, cols=10) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.858364552652157,
        0.858364552652157
      ],
      "excerpt": "            html.Td(\"% Change (KS)\",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'10%', 'fontFamily': 'Calibri' }), \n            html.Td(\"% Change (PDO)\",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'10%', 'fontFamily': 'Calibri' }) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8130052599129608
      ],
      "excerpt": "        temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri', 'textAlign': 'left'})) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8456806903995955
      ],
      "excerpt": "                if abs(r) &gt; 20: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.887167692142383
      ],
      "excerpt": "                elif abs(r) &lt; 10:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9083996137433826
      ],
      "excerpt": "return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'5','width':'40%','margin-left':'30%','margin-right':'30%','textAlign': 'center', 'font-size': '12px', 'fontFamily': 'Calibri'}) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8130052599129608
      ],
      "excerpt": "        temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px','text-align':'left'})) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8456806903995955
      ],
      "excerpt": "                if abs(r) &gt; 20: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.887167692142383
      ],
      "excerpt": "                elif abs(r) &lt; 10:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8130052599129608
      ],
      "excerpt": "            html.Td(\"%Change(PDO)\",colSpan='1',style={'border-style':'solid','border-width':'1px', 'fontFamily': 'Calibri', }) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8130052599129608
      ],
      "excerpt": "        temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px', 'fontFamily': 'Calibri', 'textAlign': 'left'})) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8456806903995955
      ],
      "excerpt": "                if abs(r) &gt; 20: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.887167692142383
      ],
      "excerpt": "                elif abs(r) &lt; 10:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8456806903995955
      ],
      "excerpt": "                if abs(r) &gt; 20: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.887167692142383
      ],
      "excerpt": "                elif abs(r) &lt; 10:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "r_head=['Decile 1','Decile 2','Decile 3','Decile 4','Decile 5','Decile 6','Decile 7','Decile 8','Decile 9','Decile 10'] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8130052599129608
      ],
      "excerpt": "        temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px', 'text-align':'left'})) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8130052599129608
      ],
      "excerpt": "        temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px', 'text-align':'left'})) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8456806903995955
      ],
      "excerpt": "                if abs(r) &gt; 20: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.887167692142383
      ],
      "excerpt": "                elif abs(r) &lt; 10:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8456806903995955
      ],
      "excerpt": "                if abs(r) &gt; 20: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.887167692142383
      ],
      "excerpt": "                elif abs(r) &lt; 10:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8868183352878298
      ],
      "excerpt": "  ,style={'border-collapse':'collapse','width':'100%','border-spacing':'0','text-align':'center','width':'40%','margin-left':'30%','margin-right':'30%', 'fontFamily': 'Calibri', 'fontColor': 'white'}) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8252756551763197
      ],
      "excerpt": "               #html.Div(id='dynamic_layout',style={\"height\":\"10%\"}), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "                                                    'border-radius':10}), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "             'maxHeight': '10%', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8840467439138965
      ],
      "excerpt": "            'fontFamily': 'Open Sans', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "    \"if\": {\"row_index\": 'odd'}, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "     \"if\": {\"header_index\":0}, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "                            \"size\":10, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "                            \"size\":10, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9593299683604384
      ],
      "excerpt": "                   tickfont=dict(family='Rockwell', color='black', size=10), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9593299683604384
      ],
      "excerpt": "                  tickfont=dict(family='Rockwell', color='black', size=10), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9593299683604384
      ],
      "excerpt": "tickfont=dict(family='Rockwell', color='black', size=10), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9593299683604384
      ],
      "excerpt": "                   #tickfont=dict(family='Rockwell', color='black', size=10), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9593299683604384
      ],
      "excerpt": "                  #tickfont=dict(family='Rockwell', color='black', size=10), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9593299683604384
      ],
      "excerpt": "                  #tickfont=dict(family='Rockwell', color='black', size=10), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9278824608274014
      ],
      "excerpt": "        \"font\":{\"size\":12,\"color\":\"black\"}, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9278824608274014
      ],
      "excerpt": "        \"font\":{\"size\":12,\"color\":\"black\"} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9278824608274014
      ],
      "excerpt": "        \"font\":{\"size\":12,\"color\":\"black\"} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8367114165595368
      ],
      "excerpt": "                        #'background-image':'url(https://i.ibb.co/M5GgQv4/AIUTO.png)', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "                            'top':'37%', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "                            'border-radius':10}), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "                            #'fontSize':30, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "                            'fontSize':12, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "                            'border-radius':10}), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "                            'fontSize':12, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "                            'border-radius':10}), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "                                                        'fontSize':12, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266,
        0.8356013927728488
      ],
      "excerpt": "                                                       'border-radius':10, \n                                                       'fontSize':12, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "                                                    'fontSize':12, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "                                                    'fontSize':12, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "                                                    'border-radius':10}), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.822158561246296
      ],
      "excerpt": "  #'background-image':'url(https://www.thestartupnetwork.co/wp-content/uploads/2018/04/AI-world-forum-background-cropped-1920x1000.jpg)', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "    if model_no == '555555': \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vaibhavtmnit/Theano-Projects",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-06-10T06:49:15Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-12-11T11:37:36Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "            * No summary available !!!!!!\n        ''',style={'background-color':'#87ceeb',\n                                                                'foreground-color':'red',\n                                                                'color':'black',\n                                                                'fontSize':12,\n                                                                'textAlign': 'left',\n                                                                'verticalAlign':'top',\n                                                                'position':'fixed',\n                                                                'width':'50%',\n                                                                'height':'18%',\n                                                                'top':'80%',\n                                                                'left':'27%',\n                                                                'border-radius':10})\n\n\n#######################\n\n\n#if __name__ == '__main__':\n   ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "            * Tracking is done quarterly at 3 different levels to give us a long term as well as short term indication of model performance\n        ''',style={'background-color':'#87ceeb',\n                                                                'foreground-color':'red',\n                                                                'color':'black',\n                                                                'fontSize':12,\n                                                                'textAlign': 'left',\n                                                                'verticalAlign':'top',\n                                                                'position':'fixed',\n                                                                'width':'50%',\n                                                                'height':'18%',\n                                                                'top':'80%',\n                                                                'left':'27%',\n                                                                'border-radius':10})\n    elif model_no == '111111':\n        return dcc.Markdown('''\n\n        ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "        * Tracking is done quarterly at 3 different levels to give us a long term as well as short term indication of model performance\n        *Results: Q2 UTM Tracking is rates GREEN at overall level\n        * Segment level some deterioration is observed.\n        * Segment 1\u2019s KS/PSI shifts are due to a known issue,where the benchmark dataset with \u201cvery long ARF (Automated Response Format)\u201d records (rich bureau history and FICO scores) were treated incorrectly by FICO during development\n        time. The validation dataset does not have this issue.\n        * Booked PSI shifts for segments 1, 2, and 3 are caused by tightening risk tolerance since the 2010 benchmark time period.\n        * Segment 5's deterioration led to a deep dive in 2018 that found that 3 input attribute's had an amber rating for PSI (>10%)\n        ''',style={'background-color':'#87ceeb',\n                                                                'foreground-color':'red',\n                                                                'color':'black',\n                                                                'fontSize':12,\n                                                                'textAlign': 'left',\n                                                                'verticalAlign':'top',\n                                                                'position':'fixed',\n                                                                'width':'50%',\n                                                                'height':'18%',\n                                                                'top':'80%',\n                                                                'left':'27%',\n                                                                'border-radius':10})\n    elif model_no == '803456':\n        return dcc.Markdown('''\n\n        ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "KJ=[K[:x+5] for x in J] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076,
        0.8647625382803318
      ],
      "excerpt": "TJ=[T[:x+5] for x in J] \nAssuming Linear regression is to be performed on set of array separately, Use simple linear regression as nothing \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9190933658537401,
        0.8994474943665955
      ],
      "excerpt": "Idea of using pooling layer is to reduce size and make it ready for final  \n fully connected layer this is to speed up learning, But a caveat is we shold use pooling layer more than 2x2  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8737038599893614
      ],
      "excerpt": "Instead of pooling now it is suggested to use larger stride in CONV layer once in a while, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9652786615337117,
        0.9336145562002224
      ],
      "excerpt": "Beofre FC one of the many type of nromalization is used. \nCONV layers stacked (with relu) give better coverage of the image, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9571655724324394
      ],
      "excerpt": " help in learning better features than single layer with linearity. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.863340851803972,
        0.8546572401801492,
        0.8503812166387663
      ],
      "excerpt": " identified an edge and the sum of pixels multiplied by filter will be high \n if there is edge and close to zero if filter is not rembled with that edge \n when we stack one after other these conv layers they add up to form elemtns like, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9681137630450494,
        0.9263899387132299
      ],
      "excerpt": " It also helps to describe locations of things of interest. \n The deeper you go, filters tend to have larger receptive field(or area of image covered by filter) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8567876169462214
      ],
      "excerpt": "--  Conv layer should have small features (3x3, 5x5) with stride=1 and padding in such a wayt that conv layer does not alter \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8124795528988009
      ],
      "excerpt": "WHy we cannot use fully connected network instead of convolutional NN, is because the number of wieghts paramters will touch thousand. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9410742034278984
      ],
      "excerpt": "What filters are doing is taking patches of image and trying to predict its class. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9294782784156336,
        0.9464085441904202,
        0.8958140198769565,
        0.976891429671179,
        0.994776329178924,
        0.984571164511907,
        0.9865917999115104
      ],
      "excerpt": "LeNet. The first successful applications of Convolutional Networks were developed by Yann LeCun in 1990\u2019s. Of these, the best known is the LeNet architecture that was used to read zip codes, digits, etc. \nAlexNet. The first work that popularized Convolutional Networks in Computer Vision was the AlexNet, developed by Alex Krizhevsky, Ilya Sutskever and Geoff Hinton. The AlexNet was submitted to the ImageNet ILSVRC challenge in 2012 and significantly outperformed the second runner-up (top 5 error of 16% compared to runner-up with 26% error). The Network had a very similar architecture to LeNet, but was deeper, bigger, and featured Convolutional Layers stacked on top of each other (previously it was common to only have a single CONV layer always immediately followed by a POOL layer). \nZF Net. The ILSVRC 2013 winner was a Convolutional Network from Matthew Zeiler and Rob Fergus. It became known as the ZFNet (short for Zeiler & Fergus Net). It was an improvement on AlexNet by tweaking the architecture hyperparameters, in particular by expanding the size of the middle convolutional layers and making the stride and filter size on the first layer smaller. \nGoogLeNet. The ILSVRC 2014 winner was a Convolutional Network from Szegedy et al. from Google. Its main contribution was the development of an Inception Module that dramatically reduced the number of parameters in the network (4M, compared to AlexNet with 60M). Additionally, this paper uses Average Pooling instead of Fully Connected layers at the top of the ConvNet, eliminating a large amount of parameters that do not seem to matter much. There are also several followup versions to the GoogLeNet, most recently Inception-v4. \nVGGNet. The runner-up in ILSVRC 2014 was the network from Karen Simonyan and Andrew Zisserman that became known as the VGGNet. Its main contribution was in showing that the depth of the network is a critical component for good performance. Their final best network contains 16 CONV/FC layers and, appealingly, features an extremely homogeneous architecture that only performs 3x3 convolutions and 2x2 pooling from the beginning to the end. Their pretrained model is available for plug and play use in Caffe. A downside of the VGGNet is that it is more expensive to evaluate and uses a lot more memory and parameters (140M). Most of these parameters are in the first fully connected layer, and it was since found that these FC layers can be removed with no performance downgrade, significantly reducing the number of necessary parameters. \nResNet. Residual Network developed by Kaiming He et al. was the winner of ILSVRC 2015. It features special skip connections and a heavy use of batch normalization. The architecture is also missing fully connected layers at the end of the network. The reader is also referred to Kaiming\u2019s presentation (video, slides), and some recent experiments that reproduce these networks in Torch. ResNets are currently by far state of the art Convolutional Neural Network models and are the default choice for using ConvNets in practice (as of May 10, 2016). In particular, also see more recent developments that tweak the original architecture from Kaiming He et al. Identity Mappings in Deep Residual Networks (published March 2016). \nVGGNet in detail. Lets break down the VGGNet in more detail as a case study. The whole VGGNet is composed of CONV layers that perform 3x3 convolutions with stride 1 and pad 1, and of POOL layers that perform 2x2 max pooling with stride 2 (and no padding). We can write out the size of the representation at each step of the processing and keep track of both the representation size and the total number of weights: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9854195983714881
      ],
      "excerpt": "As is common with Convolutional Networks, notice that most of the memory (and also compute time) is used in the early CONV layers, and that most of the parameters are in the last FC layers. In this particular case, the first FC layer contains 100M weights, out of a total of 140M. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "    data=df2.to_dict('records'), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "    data= [ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "     data=[ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "     data= [ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "     'data':data, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8559550851088785
      ],
      "excerpt": "    'data':traces, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8559550851088785
      ],
      "excerpt": "    'data':traces, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "        #_query = request.data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "        #data = process_sql(_query) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "        #_query = request.data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259,
        0.8979411005071259
      ],
      "excerpt": "        #data = process_data(_query,metadata_path,input_table_name=\"MOCK_DATA\") \n        #return data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "        data=df.to_dict('records'), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "        'data':data, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8559550851088785
      ],
      "excerpt": "    'data':traces, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for ind,row in em.iterrows(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "        for r in row: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8764525470089386,
        0.8886034359529978
      ],
      "excerpt": "r_head=['Full Model','Seg1- No Records No TL','Seg2- Thin File','Seg3- Severe Derog','Seg4- Delinquent under 90','Seg5- New to Credit','Seg6- Mature Low Utilization','Seg7- Mature High Utilization', \n'Seg8- Mature Less Delinquent','Seg9- Mature More Delinquent'] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for ind,row in dem.iterrows(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "        for r in row: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8181721679277405
      ],
      "excerpt": "    seg=pd.read_pickle(df_seg) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8764525470089386,
        0.8886034359529978
      ],
      "excerpt": "r_head=['Full Model','Seg1- No Records No TL','Seg2- Thin File','Seg3- Severe Derog','Seg4- Delinquent under 90','Seg5- New to Credit','Seg6- Mature Low Utilization','Seg7- Mature High Utilization', \n'Seg8- Mature Less Delinquent','Seg9- Mature More Delinquent'] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9572054388465289
      ],
      "excerpt": "for ind,row in seg.iterrows(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "        for r in row: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for ind,row in ttd.iterrows(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "    for r in row: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for ind,row in ks.iterrows(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "        for r in row: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for ind,row in bseg.iterrows(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "        for r in row: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for ind,row in ttd.iterrows(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "    for r in row: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8912607066182591
      ],
      "excerpt": "fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Full Model\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Full Model\"].values,marker=dict(color=colors), row=1, col=1,showlegend=False,name='Full Model',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Full Model\"].values, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8470026786116545
      ],
      "excerpt": "fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Segment 5 - New to Credit\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 5 - New to Credit\"].values,marker=dict(color=colors), row=1, col=6,showlegend=False,name='Segment 5 - New to Credit',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 5 - New to Credit\"].values, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133027157628301
      ],
      "excerpt": "    \"text\": \"Full Model\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for ind,row in em.iterrows(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "        for r in row[:-2]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "        for r in row[-2:]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8764525470089386,
        0.8886034359529978
      ],
      "excerpt": "r_head=['Full Model','Seg1- No Records No TL','Seg2- Thin File','Seg3- Severe Derog','Seg4- Delinquent under 90','Seg5- New to Credit','Seg6- Mature Low Utilization','Seg7- Mature High Utilization', \n'Seg8- Mature Less Delinquent','Seg9- Mature More Delinquent'] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for ind,row in dem.iterrows(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "        for r in row[:-2]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "        for r in row[-2:]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8181721679277405
      ],
      "excerpt": "    seg=pd.read_pickle(df_seg) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8764525470089386,
        0.8886034359529978
      ],
      "excerpt": "r_head=['Full Model','Seg1- No Records No TL','Seg2- Thin File','Seg3- Severe Derog','Seg4- Delinquent under 90','Seg5- New to Credit','Seg6- Mature Low Utilization','Seg7- Mature High Utilization', \n'Seg8- Mature Less Delinquent','Seg9- Mature More Delinquent'] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9572054388465289
      ],
      "excerpt": "for ind,row in seg.iterrows(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "        for r in row[:-2]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "        for r in row[-2:]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for ind,row in ttd.iterrows(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "    for r in row[:-1]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "    for r in row[1:]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for ind,row in ks.iterrows(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "        for r in row: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for ind,row in bseg.iterrows(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "        for r in row[:-2]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "        for r in row[-2:]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for ind,row in ttd.iterrows(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "    for r in row[:-1]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "    for r in row[1:]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "            } for i in df.columns], \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8263172721965425
      ],
      "excerpt": "               State('upload-data', 'last_modified')]) \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vaibhavtmnit/Theano-Projects/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 21 Dec 2021 04:00:03 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/vaibhavtmnit/Theano-Projects/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "vaibhavtmnit/Theano-Projects",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/vaibhavtmnit/Theano-Projects/master/Vaibhav%20Thakur.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "f = function([x, In(y, value=1)], z)  ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "f=th.fucntion([x],y)  ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "import theano as th\nimport os\nos.environ['KERAS_BACKEND']='theano'\nimport keras as kr\nimport numpy as np\nimport keras as kr\n\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8541278636344212
      ],
      "excerpt": "app = dash.Dash(name) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8541278636344212
      ],
      "excerpt": "app = dash.Dash(name) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "        },name=k \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "        },name=k \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "        },name=k \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8541278636344212
      ],
      "excerpt": "app = Flask(name) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8541278636344212
      ],
      "excerpt": "app = dash.Dash(name \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8541278636344212
      ],
      "excerpt": "app = dash.Dash(name) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8488193261998107
      ],
      "excerpt": "    dash.dependencies.Output('op-table', 'children'), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8541278636344212
      ],
      "excerpt": "app = dash.Dash(name \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9457175861910134,
        0.8401558704798054
      ],
      "excerpt": "import numpy as np \nimport os \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674,
        0.8801854956928516
      ],
      "excerpt": "import nltk \nfrom nltk.corpus import stopwords \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577359947481356
      ],
      "excerpt": "df = dataset.reset_index(drop=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.82570830220013
      ],
      "excerpt": "        text: a string \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8359299706379749,
        0.8359299706379749
      ],
      "excerpt": "text = REPLACE_BY_SPACE_RE.sub(' ', text) \ntext = BAD_SYMBOLS_RE.sub('', text) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8226440209499781
      ],
      "excerpt": "return text \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8997243352845468,
        0.9067208200427276,
        0.8426562855115786,
        0.8793232172800831
      ],
      "excerpt": "        t=np.arange(0,1000-i) \n        exp_arr=np.exp(-np.divide(t,th)) \n        w.append(np.multiply(w_n[i-1],exp_arr)) \n    return np.asarray(w) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8379620129445627
      ],
      "excerpt": "    b_avg.append(lin_re(np.log(TJ[i]).reshape(-1,1),np.log(KJ[i]).reshape(-1,1),q)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8172342705654815
      ],
      "excerpt": "    numobs=len(incrIdx) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9127265043650599,
        0.8808240293052428,
        0.9181985543554948
      ],
      "excerpt": "seriesDiff=np.array([origSeries[x - 1] for x in incrIdx])-np.array(origSeries[:numobs]) \nseriesMoment = sum(np.multiply(wtSeries , np.power(abs(seriesDiff),q))) \ndenomMoment = sum(np.multiply(wtSeries ,np.power(abs(np.array(origSeries[0:numobs])),q))) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8702030122513222
      ],
      "excerpt": "    X=np.array([kq[x] for x in incrteval]).reshape(-1,1) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8172342705654815
      ],
      "excerpt": "seriesLen = len(srcData) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665349899929468
      ],
      "excerpt": "TOTAL params: 138M parameters \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8239297397068231
      ],
      "excerpt": "W = th.shared(np.asarray([0.0,0.0]), 'W') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.902452954842084
      ],
      "excerpt": "print(W.eval())  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8289669050403863,
        0.9133368656218674,
        0.9012248701992861,
        0.9133368656218674,
        0.815409907870878
      ],
      "excerpt": "    output = f([1.0, 1.0], 60.0) \nimport dash \nimport dash_core_components as dcc \nimport dash_table \nimport dash_html_components as html \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.84913613589719,
        0.8596521807794544,
        0.9133368656218674,
        0.9133368656218674,
        0.8801854956928516
      ],
      "excerpt": "import plotly.graph_objs as go \nimport io \nimport xlsxwriter \nimport flask \nfrom flask import send_file \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8534104291876795
      ],
      "excerpt": "        {\"name\": i, \"id\": i, \"deletable\": True} for i in df2.columns \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.823259674009098,
        0.8731562459058029
      ],
      "excerpt": "                options=[{'label': i, 'value': i} for i in cols_g], \n                value='Numeric 1' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.823259674009098,
        0.8731562459058029
      ],
      "excerpt": "                options=[{'label': i, 'value': i} for i in cols_g], \n                value='Numeric 1' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8074024712667096,
        0.8074024712667096,
        0.8074024712667096
      ],
      "excerpt": "        {'label': a , 'value':a }, \n        {'label': b, 'value':b }, \n       {'label': c, 'value':c } \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029
      ],
      "excerpt": "    value=[a, b] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8789571506308317,
        0.8905535152916115
      ],
      "excerpt": "    {'label': 'Bar Chart', 'value': 'bar'}, \n    {'label': 'Line Chart', 'value': 'line+markers'}, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.823259674009098,
        0.8731562459058029
      ],
      "excerpt": "                options=[{'label': i, 'value': i} for i in cols], \n                value='Numeric 1' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.823259674009098,
        0.8731562459058029
      ],
      "excerpt": "                options=[{'label': i, 'value': i} for i in cols], \n                value='TIER_GRP' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.823259674009098,
        0.8731562459058029
      ],
      "excerpt": "                options=[{'label': i, 'value': i} for i in cols], \n                value='TIER_GRP' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.823259674009098,
        0.8731562459058029
      ],
      "excerpt": "                options=[{'label': i, 'value': i} for i in cols], \n                value='Numeric 1' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8303466495986283,
        0.8730290553831829,
        0.8730290553831829,
        0.8730290553831829,
        0.8730290553831829
      ],
      "excerpt": "    Output('indicator-graphic2','figure'), \n    [Input('xaxis-column1','value'), \n    Input('yaxis-column1','value'), \n    Input('checklists','value'), \n    Input('radios','value') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "    print(\"\"\"################################################################# \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "    print(\"\"\" stackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstack \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8272102957395783
      ],
      "excerpt": "    radios='bar' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8747223097433734
      ],
      "excerpt": "         {'x': x_val , 'y': y_val1, 'type': radios, 'name': checklists[0]} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8172342705654815
      ],
      "excerpt": "elif len(checklists)==2: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8747223097433734,
        0.8747223097433734
      ],
      "excerpt": "         {'x': x_val , 'y': y_val1, 'type': radios, 'name': checklists[0]}, \n         {'x': x_val , 'y': y_val2, 'type': radios, 'name': checklists[1]} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8172342705654815
      ],
      "excerpt": "elif len(checklists)==3: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8747223097433734,
        0.8747223097433734,
        0.8747223097433734
      ],
      "excerpt": "         {'x': x_val , 'y': y_val1, 'type': radios, 'name': checklists[0]}, \n         {'x': x_val , 'y': y_val2, 'type': radios, 'name': checklists[1]}, \n         {'x': x_val , 'y': y_val3, 'type': radios, 'name': checklists[2]} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8303466495986283
      ],
      "excerpt": "    Output('indicator-graphic', 'figure'), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8987539924216599,
        0.8987539924216599,
        0.8935832112706656
      ],
      "excerpt": "     Input('xaxis-type', 'value'), \n     Input('yaxis-type', 'value'), \n     Input('color-selector','value') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8369340312199954
      ],
      "excerpt": "            'size': 15, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "        },name=k \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8387898519386147
      ],
      "excerpt": "    'data':traces, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8303466495986283
      ],
      "excerpt": "    Output('indicator-graphic3', 'figure'), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "        },name=k \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8387898519386147
      ],
      "excerpt": "    'data':traces, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8303466495986283
      ],
      "excerpt": "    Output('indicator-graphic4', 'figure'), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8101841531031894
      ],
      "excerpt": "     Input('values-column-pie', 'value') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029
      ],
      "excerpt": "            , textinfo='value',  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8196937101337821
      ],
      "excerpt": "           marker=dict(line=dict(color='#000000', width=2)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8458751354831934,
        0.8100253201807346,
        0.888871787813768,
        0.8722253495125046,
        0.9133368656218674,
        0.9133368656218674,
        0.9012248701992861,
        0.9133368656218674,
        0.815409907870878
      ],
      "excerpt": "if name == 'main': \n    app.run_server(debug=True,host=\"127.1.1.1\") \nfrom flask import Flask, request, render_template, json \nimport random, threading, webbrowser \nimport flask \nimport dash \nimport dash_core_components as dcc \nimport dash_table \nimport dash_html_components as html \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.84913613589719,
        0.8596521807794544,
        0.9133368656218674,
        0.9133368656218674,
        0.8801854956928516
      ],
      "excerpt": "import plotly.graph_objs as go \nimport io \nimport xlsxwriter \nimport flask \nfrom flask import send_file \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8335805565478537,
        0.8265083866775588,
        0.9457175861910134
      ],
      "excerpt": "import os.path \nfrom os import path \nimport numpy as np \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9012248701992861,
        0.8801854956928516,
        0.8801854956928516
      ],
      "excerpt": "import tkinter as tk \nfrom tkinter import ttk \nfrom metadata_v2 import ordered_distance,distance_calc,ordered_distance_two,distance_calc_two,or_two \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8722253495125046
      ],
      "excerpt": "import random, threading, webbrowser \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8246925108250497
      ],
      "excerpt": "    return hello() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8890783336628361,
        0.806971000272797
      ],
      "excerpt": "        return hello(),threading.Timer(.25, lambda: webbrowser.open(viz_url)).start() \nCHANGE IN FINAL MAIN LINE 104 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8246925108250497
      ],
      "excerpt": "        return hello() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785,
        0.936606094659785
      ],
      "excerpt": "        print(_query) \n        print(\"#######################################################################################################\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "        print(_query) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8493255319211476
      ],
      "excerpt": "        #jsonResponse = data.to_json(orient='records', lines=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785,
        0.936606094659785,
        0.8182517083382203,
        0.936606094659785,
        0.936606094659785,
        0.936606094659785,
        0.9337075168182953
      ],
      "excerpt": "        print(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\") \n        print(\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") \n        print(r.content) \n        print(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\") \n        print(\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") \n        print(r) \n        print(type(r)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "        print(\"#######################################################################################################\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8246925108250497
      ],
      "excerpt": "        return hello() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785,
        0.936606094659785
      ],
      "excerpt": "        print(_query) \n        print(metadata_path) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785,
        0.8182517083382203,
        0.9442417739250801,
        0.936606094659785,
        0.936606094659785
      ],
      "excerpt": "        print(\"#######################################################################################################\") \n        print(r.content)  \n        print(r.text) \n        #print(r) \n        print(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785,
        0.8226440209499781
      ],
      "excerpt": "        #print(r) \n        return r.text \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8326286453647793,
        0.8776529861716273
      ],
      "excerpt": "    if path.exists('output.csv'): \n        df=pd.read_csv('output.csv') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9190441862619813,
        0.9190441862619813
      ],
      "excerpt": "    dummy1=np.random.normal(size=len(df)) \n    dummy2=np.random.normal(size=len(df)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9190441862619813
      ],
      "excerpt": "    dummy1=np.random.normal(size=len(df)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8534104291876795
      ],
      "excerpt": "            {\"name\": i, \"id\": i, \"deletable\": True} for i in df.columns \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8025541278662194
      ],
      "excerpt": "    html.A(\"Download CSV\", href=\"/download_excel/\"), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.823259674009098,
        0.8731562459058029
      ],
      "excerpt": "                options=[{'label': i, 'value': i} for i in cat_cols], \n                value=cat_cols[0] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.823259674009098,
        0.8731562459058029
      ],
      "excerpt": "                options=[{'label': i, 'value': i} for i in num_cols], \n                value=num_cols[1] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8789571506308317,
        0.8905535152916115
      ],
      "excerpt": "        {'label': 'Bar Chart', 'value': 'bar'}, \n        {'label': 'Line Chart', 'value': 'line+markers'} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9092660742867391
      ],
      "excerpt": "    value='bar' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8326286453647793,
        0.8776529861716273
      ],
      "excerpt": "    if path.exists('output.csv'): \n        df=pd.read_csv('output.csv') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9190441862619813,
        0.9190441862619813
      ],
      "excerpt": "    dummy1=np.random.normal(size=len(df)) \n    dummy2=np.random.normal(size=len(df)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9190441862619813
      ],
      "excerpt": "    dummy1=np.random.normal(size=len(df)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8289669050403863,
        0.8594142235991984
      ],
      "excerpt": "                 attachment_filename='Output.xlsx', \n                 as_attachment=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8303466495986283,
        0.8730290553831829,
        0.8730290553831829,
        0.8730290553831829
      ],
      "excerpt": "    Output('indicator-graphic2','figure'), \n    [Input('xaxis-column1','value'), \n     Input('yaxis-column1','value'), \n     Input('radios','value')]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8326286453647793,
        0.8776529861716273
      ],
      "excerpt": "    if path.exists('output.csv'): \n        df=pd.read_csv('output.csv') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9190441862619813,
        0.9190441862619813
      ],
      "excerpt": "    dummy1=np.random.normal(size=len(df)) \n    dummy2=np.random.normal(size=len(df)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9190441862619813
      ],
      "excerpt": "    dummy1=np.random.normal(size=len(df)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "    print(\"\"\" stackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstack \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8272102957395783
      ],
      "excerpt": "    radios='bar' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8326286453647793,
        0.8776529861716273
      ],
      "excerpt": "    if path.exists('output.csv'): \n        df=pd.read_csv('output.csv') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9190441862619813,
        0.9190441862619813
      ],
      "excerpt": "    dummy1=np.random.normal(size=len(df)) \n    dummy2=np.random.normal(size=len(df)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9190441862619813
      ],
      "excerpt": "    dummy1=np.random.normal(size=len(df)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8303466495986283
      ],
      "excerpt": "    Output('indicator-graphic', 'figure'), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8987539924216599,
        0.8987539924216599,
        0.8935832112706656
      ],
      "excerpt": "    Input('xaxis-type', 'value'), \n    Input('yaxis-type', 'value'), \n    Input('color-selector','value') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8326286453647793,
        0.8776529861716273
      ],
      "excerpt": "    if path.exists('output.csv'): \n        df=pd.read_csv('output.csv') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9190441862619813,
        0.9190441862619813
      ],
      "excerpt": "    dummy1=np.random.normal(size=len(df)) \n    dummy2=np.random.normal(size=len(df)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9190441862619813
      ],
      "excerpt": "    dummy1=np.random.normal(size=len(df)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8369340312199954
      ],
      "excerpt": "            'size': 15, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "        },name=k \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8387898519386147
      ],
      "excerpt": "    'data':traces, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8458751354831934
      ],
      "excerpt": "if name == 'main': \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8130031331603288,
        0.83166226559178
      ],
      "excerpt": "<div class=\"container\"> \n    <div class=\"header\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8336551011418939
      ],
      "excerpt": "            <input type=\"text\" name=\"inputQuery\" id=\"inputQuery\" class=\"form-control\" placeholder=\"Query\" required autofocus> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8336551011418939
      ],
      "excerpt": "            <!-- <input type=\"text\" name=\"inputIntermQuery\" id=\"inputIntermQuery\" class=\"form-control\" placeholder=\"Query\" required autofocus> --> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8754531884147444
      ],
      "excerpt": "        <p><input type=\"submit\" value=\"Go!\" /></p> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.888871787813768,
        0.8722253495125046
      ],
      "excerpt": "from flask import Flask, request, json \nimport random \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516,
        0.8801854956928516
      ],
      "excerpt": "from DataProcessor import process_data, process_sql \nfrom final_main import process_data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "print(\"############################################^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^################################################\")  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785,
        0.8676146521277561,
        0.8458751354831934,
        0.8039571099652926,
        0.9012248701992861,
        0.815409907870878,
        0.853249644781247
      ],
      "excerpt": "print(\"############################################^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^################################################\")  \nreturn json.dumps(df.to_json(orient='records', lines=True)) \nif name == \"main\": \n    app.run(debug=True, host='127.0.0.1', port=8089) \nimport dash_core_components as dcc \nimport dash_html_components as html \nfrom dash.dependencies import Input, Output \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8458751354831934
      ],
      "excerpt": "if name == 'main': \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674
      ],
      "excerpt": "import dash \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.888871787813768,
        0.8801854956928516,
        0.8722253495125046,
        0.9133368656218674,
        0.9133368656218674,
        0.9012248701992861,
        0.9133368656218674,
        0.815409907870878
      ],
      "excerpt": "from flask import Flask, request, render_template, json \nfrom plotly_future import v4_subplots \nimport random, threading, webbrowser \nimport flask \nimport dash \nimport dash_core_components as dcc \nimport dash_table \nimport dash_html_components as html \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.84913613589719,
        0.8596521807794544,
        0.9133368656218674,
        0.9133368656218674,
        0.8801854956928516
      ],
      "excerpt": "import plotly.graph_objs as go \nimport io \nimport xlsxwriter \nimport flask \nfrom flask import send_file \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8335805565478537,
        0.8265083866775588,
        0.9457175861910134
      ],
      "excerpt": "import os.path \nfrom os import path \nimport numpy as np \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8734126988458827,
        0.8401558704798054
      ],
      "excerpt": "from plotly.subplots import make_subplots \nimport os \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "        print(temp) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8702870203665658
      ],
      "excerpt": "    print(pd.read_pickle('Executive_summary_table1.pkl')) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "        print(temp) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "        print(temp) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "        print(temp) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "        print(temp) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029
      ],
      "excerpt": "    value='ew1', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8074024712667096,
        0.8074024712667096
      ],
      "excerpt": "            {'label': 'KS', 'value': 'KS'}, \n            {'label': 'PDO', 'value': 'PDO'} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029
      ],
      "excerpt": "        value='KS' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8303466495986283,
        0.8730290553831829
      ],
      "excerpt": "        Output('graph1', 'figure'), \n              [Input('model_id', 'value'),Input('xaxis-column1', 'value')]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8430050605053689,
        0.9038125196513738
      ],
      "excerpt": "fig = make_subplots(rows=1, cols=10) \nfig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Full Model\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Full Model\"].values,marker=dict(color=colors), row=1, col=1,showlegend=False,name='Full Model',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Full Model\"].values, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8369340312199954
      ],
      "excerpt": "                    \"size\":15, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8120704114102391
      ],
      "excerpt": "fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Segment 1 - No Record No TL\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 1 - No Record No TL\"].values,marker=dict(color=colors), row=1, col=2,showlegend=False,name='Segment 1 - No Record No TL',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 1 - No Record No TL\"].values, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8369340312199954
      ],
      "excerpt": "                    \"size\":15, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8965534921816621
      ],
      "excerpt": "fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Segment 2 - Thin File\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 2 - Thin File\"].values,marker=dict(color=colors), row=1, col=3,showlegend=False,name='Segment 2 - Thin File' ,text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 2 - Thin File\"].values, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8369340312199954
      ],
      "excerpt": "                    \"size\":15, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.846704476309228
      ],
      "excerpt": "fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Segment 3 - Severe Derog\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 3 - Severe Derog\"].values,marker=dict(color=colors), row=1, col=4,showlegend=False,name='Segment 3 - Severe Derog',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 3 - Severe Derog\"].values, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8369340312199954
      ],
      "excerpt": "                    \"size\":15, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8425764502557253
      ],
      "excerpt": "fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Segment 4 - Delinquent under 90\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 4 - Delinquent under 90\"].values,marker=dict(color=colors), row=1, col=5,showlegend=False,name='Segment 4 - Delinquent under 90',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 4 - Delinquent under 90\"].values, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8369340312199954
      ],
      "excerpt": "                    \"size\":15, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8369340312199954
      ],
      "excerpt": "                    \"size\":15, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8369340312199954
      ],
      "excerpt": "                    \"size\":15, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8030833180774504
      ],
      "excerpt": "fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Segment 7 - Mature High Utilization\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 7 - Mature High Utilization\"].values,marker=dict(color=colors), row=1, col=8,showlegend=False,name='Segment 7 - Mature High Utilization',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 7 - Mature High Utilization\"].values, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8369340312199954
      ],
      "excerpt": "                    \"size\":15, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.846704476309228
      ],
      "excerpt": "fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Segment 8 - Mature Less Delinquent\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 8 - Mature Less Delinquent\"].values,marker=dict(color=colors), row=1, col=9,showlegend=False,name='Segment 8 - Mature Less Delinquent' ,text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 8 - Mature Less Delinquent\"].values, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8369340312199954
      ],
      "excerpt": "                    \"size\":15, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8374794361453513
      ],
      "excerpt": "fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Segment 9 - Mature More Delinquent\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 9 - Mature More Delinquent\"].values,marker=dict(color=colors), row=1, col=10,showlegend=False,name='Segment 9 - Mature More Delinquent' ,text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 9 - Mature More Delinquent\"].values, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8369340312199954
      ],
      "excerpt": "                    \"size\":15, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8060417176113152
      ],
      "excerpt": "fig = fig.update_layout({\"annotations\": [ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8348046695355026
      ],
      "excerpt": "    \"text\": \"Full Model\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.811854372964597
      ],
      "excerpt": "    \"x\": 0.15, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8702815774991463
      ],
      "excerpt": "    \"x\": 0.45, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8433014267599103
      ],
      "excerpt": "#return fig.show() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8458751354831934
      ],
      "excerpt": "if name == 'main': \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674,
        0.9133368656218674
      ],
      "excerpt": "import dash \nimport dash_table \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9012248701992861,
        0.815409907870878
      ],
      "excerpt": "import dash_core_components as dcc \nimport dash_html_components as html \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.853249644781247,
        0.84913613589719,
        0.8734126988458827,
        0.9133368656218674,
        0.8801854956928516,
        0.888871787813768,
        0.888871787813768,
        0.8801854956928516,
        0.8722253495125046,
        0.9133368656218674,
        0.9133368656218674,
        0.9012248701992861,
        0.9133368656218674,
        0.815409907870878
      ],
      "excerpt": "from dash.dependencies import Input, Output \nimport plotly.graph_objects as go \nfrom plotly.subplots import make_subplots \nimport pdfkit \nfrom flask import Flask, render_template, make_response \nfrom flask import Flask, request, render_template, json \nfrom flask import Flask, request, render_template, json \nfrom plotly_future import v4_subplots \nimport random, threading, webbrowser \nimport flask \nimport dash \nimport dash_core_components as dcc \nimport dash_table \nimport dash_html_components as html \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.84913613589719,
        0.8596521807794544,
        0.9133368656218674,
        0.9133368656218674,
        0.8801854956928516
      ],
      "excerpt": "import plotly.graph_objs as go \nimport io \nimport xlsxwriter \nimport flask \nfrom flask import send_file \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8335805565478537,
        0.8265083866775588,
        0.9457175861910134
      ],
      "excerpt": "import os.path \nfrom os import path \nimport numpy as np \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8734126988458827,
        0.8616446206689284,
        0.8401558704798054,
        0.9133368656218674
      ],
      "excerpt": "from plotly.subplots import make_subplots \nimport dash_table as dt \nimport os \nimport pdfkit \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                #print(r) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                    #print(r) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                #print('***************') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "        #print(temp) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8702870203665658
      ],
      "excerpt": "    #print(pd.read_pickle('Executive_summary_table1.pkl')) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                #print(r) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                    #print(r) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                #print('***************') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "        #print(temp) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8024739313330719
      ],
      "excerpt": "return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','width':'100%','text-align':'center', 'font-size': '12px', 'fontFamily': 'Calibri'}) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.822149148268845
      ],
      "excerpt": "            'fontFamily': 'Calibri', 'background-color':'#d6e0ec'},  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                #print(r) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                    #print(r) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                #print('***************') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8024739313330719
      ],
      "excerpt": "return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','width':'100%','text-align':'center', 'fontFamily': 'Calibri', 'font-size': '12px', 'fontFamily': 'Calibri'}) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8048278459895662
      ],
      "excerpt": "             html.Td('MS TTD - Validation (01APR2018-31MAR2019)',colSpan='2',style={'border-style':'solid','border-width':'1px','background-color':'#92adce', 'fontFamily': 'Calibri'}) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                #print(r) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                    #print(r) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                #print('***************') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8758761032232626
      ],
      "excerpt": "    #print(val) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8375732688879862
      ],
      "excerpt": "    #print(ks.head()) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8375732688879862
      ],
      "excerpt": "    #print(ks.head()) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "        #print(temp) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8024739313330719
      ],
      "excerpt": "return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','width':'100%','text-align':'center', 'font-size': '12px', 'fontFamily': 'Calibri'}) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785,
        0.936606094659785,
        0.936606094659785
      ],
      "excerpt": "    print('**') \n    print(plan_name) \n    print('**') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8375732688879862
      ],
      "excerpt": "    #print(ks.head()) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                #print(r) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                    #print(r) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                #print('***************') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8024739313330719
      ],
      "excerpt": "return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','width':'100%', 'font-size': '12px','text-align':'center', 'fontFamily': 'Calibri'}) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                #print(r) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                    #print(r) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "                #print('***************') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8024739313330719
      ],
      "excerpt": "return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','text-align':'center' ,'width':'100%','fontFamily': 'Calibri', 'font-size': '12px'}) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8604225115403983
      ],
      "excerpt": "               #html.A('Download readMe.pdf', download='output.pdf', href='/output.pdf') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8730290553831829
      ],
      "excerpt": "                    [Input('table-dpdn', 'value')]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8984059557146846,
        0.8984059557146846
      ],
      "excerpt": "    #df = pd.read_csv('database/data1.csv',header=None) \n    df = pd.read_csv('database/data1.csv',header=None) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.809174181981322
      ],
      "excerpt": "df.index = range(0,len(df)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "          #,\"deletable\": True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8730290553831829
      ],
      "excerpt": "                [Input('table-dpdn', 'value')]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "  #print(\"#####################\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785,
        0.936606094659785,
        0.936606094659785,
        0.936606094659785,
        0.936606094659785,
        0.936606094659785,
        0.8737721717388864
      ],
      "excerpt": "  print(\"#####################\") \n  print(\"#####################\") \n  print(\"#####################\") \n  print(\"#####################\") \n  print(\"#####################\") \n  print(\"#####################\") \n  print(df['BENCHMARK'].values) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8259263181207405
      ],
      "excerpt": "  fig.add_bar(x=x_labels,y=df['BENCHMARK'].values,marker=dict(color=\"#ff8000\"), row=1, col=1,name='Benchmark', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8644441726908663,
        0.8413067887535226
      ],
      "excerpt": "  fig.add_bar(x=x_labels,y=df['VALIDATION'].values,marker=dict(color=\"#5482ab\"),row=1, col=1,name='Validation', \n              text=df['VALIDATION'], \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8379945274666818
      ],
      "excerpt": "  fig.add_scatter(x=x_labels,y=df2['BENCHMARK'].values,marker=dict(color=\"#ff8000\"), row=1, col=2,showlegend=False, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8050773234396333
      ],
      "excerpt": "                  mode=\"markers+lines+text\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8031434402907102
      ],
      "excerpt": "                            \"size\":10, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8616690645002592,
        0.8413067887535226
      ],
      "excerpt": "  fig.add_scatter(x=x_labels,y=df2['VALIDATION'].values,marker=dict(color=\"#5482ab\"),row=1, col=2,showlegend=False, \n                  text=df2['VALIDATION'], \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8050773234396333
      ],
      "excerpt": "                  mode=\"markers+lines+text\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8031434402907102
      ],
      "excerpt": "                            \"size\":10, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8379945274666818
      ],
      "excerpt": "  fig.add_bar(x=x_labels,y=df3['BENCHMARK'].values,marker=dict(color=\"#ff8000\"), row=1, col=3,showlegend=False, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8616690645002592,
        0.8413067887535226
      ],
      "excerpt": "  fig.add_bar(x=x_labels,y=df3['VALIDATION'].values,marker=dict(color=\"#5482ab\"),row=1, col=3,showlegend=False, \n              text=df3['VALIDATION'], \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "                   #mirror=True, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "                  #mirror=True, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "                   #mirror=True, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "                  #mirror=True, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "                  #mirror=True, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785,
        0.8060417176113152
      ],
      "excerpt": "  #print(\"#####################\") \n  fig = fig.update_layout({\"annotations\": [ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674
      ],
      "excerpt": "import dash \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9012248701992861,
        0.815409907870878
      ],
      "excerpt": "import dash_core_components as dcc \nimport dash_html_components as html \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8214055523315815,
        0.9133368656218674,
        0.9133368656218674,
        0.8596521807794544,
        0.9133368656218674
      ],
      "excerpt": "import pickle \nimport base64 \nimport datetime \nimport io \nimport dash_table \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8401558704798054,
        0.8008481530225495,
        0.8510460242295855
      ],
      "excerpt": "import os \nimage_filename = 'images/logo.png' \nencoded_image = base64.b64encode(open(image_filename, 'rb').read()) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8193236852242003,
        0.8082220330328491
      ],
      "excerpt": "                        #'background-image':html.Img(src=app.get_asset_url('logo.png')), \n                        #'background':\"H:/dash/DUMP/logo.png\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8416709190062809,
        0.8416709190062809,
        0.8416709190062809
      ],
      "excerpt": "                {'label':'Model: 803456','value':'803456'}, \n                {'label':'Model: 555555','value':'555555'}, \n                {'label':'Model: 111111','value':'111111'} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8602109296642789
      ],
      "excerpt": "            ,value='',style={'background-color':'white', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8210693485615894
      ],
      "excerpt": "                            'width':'15%', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8210693485615894
      ],
      "excerpt": "                                                       'width':'15%', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8537492281199132,
        0.8359299706379749
      ],
      "excerpt": "                                                       'text':{'size':1000000000}, \n                                                       'text':{ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.809634249280772
      ],
      "excerpt": "                    \"size\":100, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8210693485615894
      ],
      "excerpt": "                                                    'width':'15%', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.822149148268845
      ],
      "excerpt": "'background-color': 'white', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8152416518617106
      ],
      "excerpt": "  'height':'100%', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8172478663356132
      ],
      "excerpt": "@app.callback(Output('output-state', 'value'), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8188138956216952
      ],
      "excerpt": "@app.callback(Output('output-data-upload', 'children'), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8730290553831829
      ],
      "excerpt": "              [Input('model_selected', 'value')]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674
      ],
      "excerpt": "import dash \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/vaibhavtmnit/Theano-Projects/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "R"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Theano-Projects",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Theano-Projects",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "vaibhavtmnit",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vaibhavtmnit/Theano-Projects/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 21 Dec 2021 04:00:03 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "def lin_re(X,Y,q):\n    \n   \n    ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "W.set_value([0.1, 0.9]) ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "c = theano.tensor.dot(a, a) ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "html.Div([\nhtml.Div([\n        html.Div([\n            dcc.Dropdown(\n                id='xaxis-column',\n                options=[{'label': i, 'value': i} for i in cols],\n                value='Numeric 1'\n            ),\n            dcc.RadioItems(\n                id='xaxis-type',\n                options=[{'label': i, 'value': i} for i in ['Linear', 'Log']],\n                value='Linear',\n                labelStyle={'display': 'inline-block'}\n            )\n        ],\nstyle={'width': '48%', 'display': 'inline-block'}),\n\n html.Div([\n            dcc.Dropdown(\n                id='yaxis-column',\n                options=[{'label': i, 'value': i} for i in cols],\n                value='Numeric 2'\n            ),\n            dcc.RadioItems(\n                id='yaxis-type',\n                options=[{'label': i, 'value': i} for i in ['Linear', 'Log']],\n                value='Linear',\n                labelStyle={'display': 'inline-block'}\n            )\n        ],style={'width': '48%', 'float': 'right', 'display': 'inline-block'})\n\n        \n\n\n    ]),\nhtml.Div([\n\n            dcc.Dropdown(\n                id='color-selector',\n                options=[{'label': i, 'value': i} for i in cols],\n                value='TIER_GRP'\n        )\n        ],style={'width': '48%', 'display': 'inline-block'}),\n\ndcc.Graph(id='indicator-graphic')\n\n]),\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "html.Div([\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "    html.Div([\n    html.Div([\n            html.Div([\n                dcc.Dropdown(\n                    id='xaxis-column',\n                    options=[{'label': i, 'value': i} for i in num_cols],\n                    value=num_cols[0]\n                ),\n                dcc.RadioItems(\n                    id='xaxis-type',\n                    options=[{'label': i, 'value': i} for i in ['Linear', 'Log']],\n                    value='Linear',\n                    labelStyle={'display': 'inline-block'}\n                )\n            ],\n    style={'width': '48%', 'display': 'inline-block'}),\n\n    html.Div([\n                dcc.Dropdown(\n                    id='yaxis-column',\n                    options=[{'label': i, 'value': i} for i in num_cols],\n                    value=num_cols[0]\n                ),\n                dcc.RadioItems(\n                    id='yaxis-type',\n                    options=[{'label': i, 'value': i} for i in ['Linear', 'Log']],\n                    value='Linear',\n                    labelStyle={'display': 'inline-block'}\n                )\n            ],style={'width': '48%', 'float': 'right', 'display': 'inline-block'})\n\n            \n\n\n        ]),\n    html.Div([\n\n                dcc.Dropdown(\n                    id='color-selector',\n                    options=[{'label': i, 'value': i} for i in cat_cols],\n                    value=cat_cols[0]\n            )\n            ],style={'width': '48%', 'display': 'inline-block'}),\n\n    dcc.Graph(id='indicator-graphic')\n\n    ]),\n\n    ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "#df=pd.read_csv('df.csv')\n\n\ndf_def = pd.read_csv('database/definitions.csv')\nks=pd.read_csv('ks.csv')\n#print(ks.head())\n    \n\ndef generate_table():\n    return html.Table(\n        ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "  html.Div(\n  [\n    html.H1(children='CCB Risk - Model Monitoring',style={'text-align': 'left','backgroundColor':' #5381ac','padding-bottom':'5px','padding-top':'5px', \"color\":'white', \n    'fontFamily': 'Calibri',\"border\":\"1px grey solid\", 'padding-left':'20px'}),\n    \n    html.H2(children='31980 - CAF Full Spectrum Indirect Origination(Gen 5b)',style={'text-align': 'left','backgroundColor':' #92adce','padding-bottom':'5px','padding-top':'5px', \"color\":'white', \n    'fontFamily': 'Calibri',\"border\":\"1px grey solid\", 'padding-left':'40px',\n\t\t\t\t   'font-size': '20px' }),\nhtml.Div([definition()],style={'padding-bottom':'20px'}) \n    ,  \n       html.Div([etb()],style={'padding-bottom':'2px'}), \n\n       html.Div([generate_exe(em=dem)],style={'padding-bottom':'12px', 'fontColor': 'blue'}), \n  \n\n  html.H3(\"Select the Plan (Peformance Measure)\",style={'text-align': 'left','backgroundColor':' #92adce','padding-bottom':'5px','padding-top':'5px', \"color\":'white', \n    'fontFamily': 'Calibri',\"border\":\"1px grey solid\", 'padding-left':'40px',\n\t\t\t\t   'font-size': '20px' }),\n\nhtml.Div([dcc.Dropdown(id='table-dpdn',\n    options=[\n        {'label': 'Early Warning 1', 'value': 'ew1'},\n        {'label': 'Early Warning 2', 'value': 'ew2'},\n        {'label':'Model Performance by Model Segments','value':'mperf_ms'}\n    ],\n    value='ew1',\n) ],style={'padding-bottom':'25px'}),\n\n            \n#html.Div([\n#html.Div([ms_ttd()],style={'width':'20%','display': 'inline-block'})\n\nhtml.Div([\n\nhtml.Div(id='op-table',style={'display': 'inline-block', 'width':'80%'}),\nhtml.Div([ms_ttd()],style={'width':'20%','display': 'inline-block'})\n\n],style={'width':'100%'}),\nhtml.Br(),\n        \n        \n\n#html.Div(id='op-table',style={'padding-bottom':'10px', 'width':'80%'}),\nhtml.H3(\"Select the Performance Metric\",style={'text-align': 'left','backgroundColor':' #92adce','padding-bottom':'5px','padding-top':'5px', \"color\":'white', \n    'fontFamily': 'Calibri',\"border\":\"1px grey solid\", 'padding-left':'40px',\n\t\t\t\t   'font-size': '20px' }),\n                        \n                        \nhtml.Div([dcc.Dropdown(id='xaxis-column1',\n    options=[\n            {'label': 'KS', 'value': 'KS'},\n            {'label': 'PDO', 'value': 'PDO'}\n        ],\n        value='KS'\n)\n],style={'padding-bottom':'25px'} ),\n\nhtml.Div([dcc.Graph(id='graph11')],style={\"border\":\"1px grey solid\",'padding-bottom':'15px', 'fontcolor':'white'}),\nhtml.Br(),\n\nhtml.Div([\nhtml.H4(\"Model performance by business segments\",style={'text-align': 'left','backgroundColor':' #92adce','padding-bottom':'5px','padding-top':'5px', \"color\":'white', \n    'fontFamily': 'Calibri',\"border\":\"1px grey solid\", 'padding-left':'40px',\n\t\t\t\t   'font-size': '20px' }),\n\nhtml.Div(id='BS-table',style={'width':'80%','display': 'inline-block'}),\nhtml.Div([bs_ttd()],style={'width':'20%','display': 'inline-block'})\n\n],style={'width':'100%'}),\nhtml.Br(),\n\nhtml.H5(\"Performance on model segment by decile\",style={'text-align': 'left','backgroundColor':' #92adce','padding-bottom':'5px','padding-top':'5px', \"color\":'white', \n    'fontFamily': 'Calibri',\"border\":\"1px grey solid\", 'padding-left':'40px',\n\t\t\t\t   'font-size': '20px' }),\n\nhtml.Div([\n\tdcc.Dropdown(\n    id='Segment-selection',\n    options=[{'label': i,'value': i} for i in list(ks['segment'].unique())],\n   \n    value='Full Model'\n    )],style={'width':'25%','display': 'inline-block'}),\n\nhtml.Div(id = 'Segment-deep-dive',style={'padding-bottom':'10px'}\n),\n  \n  \n  \n  \n  ##################",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "@app.callback(\n        Output('graph11', 'figure'),\n              [Input('table-dpdn', 'value'),Input('xaxis-column1', 'value')])\n        \ndef update(model_value,metric_value):\n    df=pd.read_csv('graph3.csv')\n  \n    if model_value=='ew1':\n      model_value='Early Warning 1'\n    elif model_value=='ew2':\n      model_value='Early Warning 2'\n    elif model_value=='mperf_ms':\n      model_value= 'PERFORMANCE BY MODEL SEGMENT'\n    \n    df1=df[df['Plan_Name']==model_value]\n    \n    \n    data=df1[df1['METRIC_KEY']==metric_value]\n    \n    \n    data=data.sort_values(by='Time_Frame')\n    #print(data['Time_Frame'].unique())\n    \n    #print(df.head(50))\n    \n    fig = make_subplots(rows=1, cols=10)\n    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Full Model\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Full Model\"].values,marker=dict(color=colors), row=1, col=1,showlegend=False,name='Full Model',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Full Model\"].values,\n              textposition=\"auto\",textangle =-90,\n              textfont={\n                        'family':\"calibri\",\n                        \"size\":20,\n                        \"color\":\"white\" \n                        } )\n    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Segment 1 - No Record No TL\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 1 - No Record No TL\"].values,marker=dict(color=colors), \n    row=1, col=2,showlegend=False,name='Segment 1 - No Record No TL',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 1 - No Record No TL\"].values,\n              textposition=\"auto\",textangle =-90,\n              textfont={\n                        'family':\"calibri\",\n                        \"size\":20,\n                        \"color\":\"white\"\n                        }  )\n    \n    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Segment 2 - Thin File\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 2 - Thin File\"].values,marker=dict(color=colors), row=1, col=3,showlegend=False,name='Segment 2 - Thin File' ,text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 2 - Thin File\"].values,\n              textposition=\"auto\",textangle =-90,\n              textfont={\n                        'family':\"calibri\",\n                        \"size\":20,\n                        \"color\":\"white\"\n                        } )\n    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Segment 3 - Severe Derog\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 3 - Severe Derog\"].values,marker=dict(color=colors), \n    row=1, col=4,showlegend=False,name='Segment 3 - Severe Derog',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 3 - Severe Derog\"].values,\n              textposition=\"inside\",textangle =-90,\n              textfont={\n                        'family':\"calibri\",\n                        \"size\":30,\n                        \"color\":\"white\"\n                        }  )\n    \n    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Segment 4 - Delinquent under 90\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 4 - Delinquent under 90\"].values,marker=dict(color=colors), row=1, col=5,showlegend=False,name='Segment 4 - Delinquent under 90',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 4 - Delinquent under 90\"].values,\n              textposition=\"inside\",textangle =-90,\n              textfont={\n                        'family':\"calibri\",\n                        \"size\":30,\n                        \"color\":\"white\"\n                        }  )\n    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Segment 5 - New to Credit\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 5 - New to Credit\"].values,marker=dict(color=colors), row=1, col=6,showlegend=False,name='Segment 5 - New to Credit',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 5 - New to Credit\"].values,\n              textposition=\"inside\",textangle =-90,\n              textfont={\n                        'family':\"calibri\",\n                        \"size\":30,\n                        \"color\":\"white\"\n                        }  )\n    \n    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Segment 6 - Mature Low Utilization\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 6 - Mature Low Utilization\"].values,marker=dict(color=colors), row=1, col=7,showlegend=False,name='Segment 6 - Mature Low Utilization',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 6 - Mature Low Utilization\"].values,\n              textposition=\"inside\",textangle =-90,\n              textfont={\n                        'family':\"calibri\",\n                        \"size\":30,\n                        \"color\":\"white\"\n                        }  )\n    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Segment 7 - Mature High Utilization\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 7 - Mature High Utilization\"].values,marker=dict(color=colors), row=1, col=8,showlegend=False,name='Segment 7 - Mature High Utilization',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 7 - Mature High Utilization\"].values,\n              textposition=\"inside\",textangle =-90,\n              textfont={\n                        'family':\"calibri\",\n                        \"size\":30,\n                        \"color\":\"white\"\n                        }  )\n    \n    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Segment 8 - Mature Less Delinquent\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 8 - Mature Less Delinquent\"].values,marker=dict(color=colors), row=1, col=9,showlegend=False,name='Segment 8 - Mature Less Delinquent' ,text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 8 - Mature Less Delinquent\"].values,\n              textposition=\"inside\",textangle =-90,\n              textfont={\n                        'family':\"calibri\",\n                        \"size\":30,\n                        \"color\":\"white\"\n                        } )\n    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == \"Segment 9 - Mature More Delinquent\"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 9 - Mature More Delinquent\"].values,marker=dict(color=colors), row=1, col=10,showlegend=False,name='Segment 9 - Mature More Delinquent' ,text=data['METRIC_VALUE'][data['SEGMENT_ID'] == \"Segment 9 - Mature More Delinquent\"].values,\n              textposition=\"inside\",textangle =-90,\n              textfont={\n                        'family':\"calibri\",\n                        \"size\":30,\n                        \"color\":\"white\"\n                        } )\n\n    \n    \n    \n    \n    \n    #fig.update_traces(textposition='outside')\n    \n    fig.layout.xaxis.title=None\n    \n    \n    fig.layout.xaxis.tickangle=-70\n    \n    fig.layout.xaxis2.title=None\n    fig.layout.xaxis2.tickangle=-70\n    \n    fig.layout.xaxis3.title=None\n    fig.layout.xaxis3.tickangle=-70\n    \n    fig.layout.xaxis4.title=None\n    fig.layout.xaxis4.tickangle=-70\n    \n    fig.layout.xaxis5.title=None\n    fig.layout.xaxis5.tickangle=-70\n    \n    fig.layout.xaxis6.title=None\n    fig.layout.xaxis6.tickangle=-70\n    \n    fig.layout.xaxis7.title=None\n    fig.layout.xaxis7.tickangle=-70\n    \n    fig.layout.xaxis8.title=None\n    fig.layout.xaxis8.tickangle=-70\n    \n    fig.layout.xaxis9.title=None\n    fig.layout.xaxis9.tickangle=-70\n    \n    fig.layout.xaxis10.title=None\n    fig.layout.xaxis10.tickangle=-70\n    \n    fig.layout.height=500\n    fig.layout.plot_bgcolor = 'white'\n    \n    fig.update_yaxes(showticklabels=False)\n    \n    fig = fig.update_layout({\"annotations\": [\n      {\n        \"x\": 0.04,\n        \"y\": 1.08,\n        \"font\": {\n          \"size\": 11\n        },\n        \"text\": \"Full Model\",\n        \"xref\": \"paper\",\n        \"yref\": \"paper\",\n        \"xanchor\": \"center\",\n        \"yanchor\": \"top\",\n        \"showarrow\": False\n       \n      },\n      {\n        \"x\": 0.15,\n        \"y\": 1.08,\n        \"font\": {\n          \"size\": 11\n        },\n        \"text\": \"Segment 1 <br> No Record No TL\",\n        \"xref\": \"paper\",\n        \"yref\": \"paper\",\n        \"xanchor\": \"center\",\n        \"yanchor\": \"top\",\n        \"showarrow\": False\n      },\n      {\n        \"x\": 0.25,\n        \"y\": 1.08,\n        \"font\": {\n          \"size\": 11\n        },\n        \"text\": \"Segment 2 <br>Thin File\",\n        \"xref\": \"paper\",\n        \"yref\": \"paper\",\n        \"xanchor\": \"center\",\n        \"yanchor\": \"middle\",\n        \"showarrow\": False\n      },\n    {\n        \"x\": 0.35,\n        \"y\": 1.08,\n        \"font\": {\n          \"size\": 11\n        }, \n        \"text\": \"Segment 3 <br> Severe Derog\",\n        \"xref\": \"paper\",\n        \"yref\": \"paper\",\n        \"xanchor\": \"center\",\n        \"yanchor\": \"middle\",\n        \"showarrow\": False\n      },\n    {\n        \"x\": 0.45,\n        \"y\": 1.08,\n       \"font\": {\n          \"size\": 11\n        },\n        \"text\": \"Segment 4 <br> Delinquent under 90\",\n        \"xref\": \"paper\",\n        \"yref\": \"paper\",\n        \"xanchor\": \"center\",\n        \"yanchor\": \"middle\",\n        \"showarrow\": False\n      },\n    {\n        \"x\": 0.55,\n        \"y\": 1.08,\n        \"font\": {\n          \"size\": 11\n        },\n        \"text\": \"Segment 5 <br> New to Credit\",\n        \"xref\": \"paper\",\n        \"yref\": \"paper\",\n        \"xanchor\": \"center\",\n        \"yanchor\": \"middle\",\n        \"showarrow\": False\n      },\n    {\n        \"x\": 0.655,\n        \"y\": 1.08,\n        \"font\": {\n          \"size\": 11\n        },\n        \"text\": \"Segment 6 <br> Mature Low Utilization\",\n        \"xref\": \"paper\",\n        \"yref\": \"paper\",\n        \"xanchor\": \"center\",\n        \"yanchor\": \"middle\",\n        \"showarrow\": False\n      },\n    {\n        \"x\": 0.758,\n        \"y\": 1.08,\n        \"font\": {\n          \"size\": 11\n        },\n        \"text\": \"Segment 7 <br> Mature High Utilization\",\n        \"xref\": \"paper\",\n        \"yref\": \"paper\",\n        \"xanchor\": \"center\",\n        \"yanchor\": \"middle\",\n        \"showarrow\": False\n      },\n    {\n        \"x\": 0.86,\n        \"y\": 1.08,\n        \"font\": {\n          \"size\": 11\n        },\n        \"text\": \"Segment 8 <br> Mature Less Delinquent\",\n        \"xref\": \"paper\",\n        \"yref\": \"paper\",\n        \"xanchor\": \"center\",\n        \"yanchor\": \"middle\",\n        \"showarrow\": False\n      },\n    {\n        \"x\": 0.96,\n        \"y\": 1.08,\n        \"font\": {\n          \"size\": 11\n        },\n        \"text\": \"Segment 9 <br> Mature More Delinquent\",\n        \"xref\": \"paper\",\n        \"yref\": \"paper\",\n        \"xanchor\": \"center\",\n        \"yanchor\": \"middle\",\n        \"showarrow\": False\n      }\n\n    ]})\n\n    return fig.update_traces(marker_color=colors)    \n    #return fig.show()\n\n@app.callback(\n    dash.dependencies.Output('op-table', 'children'),\n    [dash.dependencies.Input(\"table-dpdn\", \"value\")],\n)\n\ndef update_option(search_value):\n\n     return ew11(search_value)\n\n\n\n@app.callback(\n    dash.dependencies.Output('Segment-deep-dive', 'children'),\n    [dash.dependencies.Input('table-dpdn', 'value'),\n    dash.dependencies.Input('Segment-selection', 'value')\n     ])      \n\ndef update_options(search_valuer,sr2):\n    #print(\"Got here , BOOOOO!!!!!!!!!!!!!!!!!!!!!!!!!!!!\")\n    return ks_seg(search_valuer,sr2)\n\n\n@app.callback(\n    dash.dependencies.Output('BS-table', 'children'),\n    [dash.dependencies.Input('table-dpdn', 'value')\n     ])      \n\ndef update_options(search_valuebs):\n    #print(\"Got here , BOOOOO!!!!!!!!!!!!!!!!!!!!!!!!!!!!\")\n    return m_perf_bseg(search_valuebs)\n\n\n###################",
      "technique": "Header extraction"
    }
  ]
}