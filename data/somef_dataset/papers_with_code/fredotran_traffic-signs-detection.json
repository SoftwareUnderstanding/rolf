{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Thank you Joseph Redmon and Ali Farhadi for their incredible work on **YOLO object detector** : **[YOLOv3: An Incremental Improvement](https://arxiv.org/abs/1804.02767)**, *Redmon, Joseph and Farhadi, Ali* ; arXiv, 2018.\n\nThank you AlexeyAB for your repository : **[YOLOv4 improvement](https://github.com/AlexeyAB/darknet)**\n\nThank you Andrew Mvd for your dataset : [Kaggle profile](https://www.kaggle.com/andrewmvd)\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1804.02767"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fredotran/traffic-sign-detector-yolov4",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-01-11T15:42:31Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-19T04:39:15Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9902660612331421
      ],
      "excerpt": "This repository contains my upgraded version of using YoloV3 with OpenCV DNN to detect objects by training a YoloV4 model to recognize and detect 4 specific classes of traffic signs :  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9043231475082056
      ],
      "excerpt": "This dataset contains 877 images of 4 distinct classes for the purpose of road sign detection. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8178214534519551
      ],
      "excerpt": "To test your custom model, this is the same steps to do than training but instead you have to enter this command :  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9771895751974601
      ],
      "excerpt": "Using the weights provided in this repository, the model achieved an accuracy mAp @0.5 of 95.13% (it tooks ~ 2000 iterations) on classification and detection of the 4 different traffic road signs classes. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "This repository contains my upgraded version of using YoloV4 with OpenCV DNN to detect 4 classes of traffic road signs : traffic lights, speed limit signs, crosswalk and stop signs. ",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fredotran/traffic-signs-detection/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Mon, 27 Dec 2021 20:40:15 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/fredotran/traffic-sign-detector-yolov4/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "fredotran/traffic-sign-detector-yolov4",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/fredotran/traffic-signs-detection/main/yolov4-traffic_road_signs-detection-images.ipynb",
      "https://raw.githubusercontent.com/fredotran/traffic-signs-detection/main/yolov4-traffic_road_signs-detection-videos.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "(**Local version**) : I'm providing the dataset **[here](https://github.com/fredotran/traffic-signs-detection/releases/download/weights/Traffic.Road.Signs.YoloV3.format.v2-10-01-2021.darknet.zip)**, if you want to do the splitting, parsing of the train, validation and test sets and extracting the files manually. \n\n/!\\ **In case of laziness** /!\\ (*I know this feeling quite well*), I did \"**two little scripts**\" : [download_sets.py](https://github.com/fredotran/traffic-signs-detection/blob/main/download_sets.py) and [setup_sets.py](https://github.com/fredotran/traffic-signs-detection/blob/main/setup_sets.py) to automate the downloading, extracting and splitting into training, validation and test sets.\n\nIf you want to use my scripts, just open ` Windows Command Prompt`, go to the `traffic-signs-detection` folder and type the following commands by order : \n* `python3 download_sets.py` : it will download the datasets and extract them in the `traffic-signs-detection` folder.\n* `python3 setup_sets.py` : this one will split and copy the **images** and **labels** in the proper folders ([more infos here](https://github.com/AlexeyAB/darknet#how-to-train-to-detect-your-custom-objects)).\n\n**After doing all these steps, you're ready to train your custom model using the downloaded [pre-trained YoloV4 weights](https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.conv.137) !**\n\n---\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "I'll present two ways to do custom training model for this particular detection task : (**Local version**) and **(Easier/cloud version)**. The first one will need to do every steps of installation directly in your code folder (locally), the second one is much easier because everything is done in **[Colab](https://colab.research.google.com/)**.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9331102189374877
      ],
      "excerpt": "Before all, you'll first need to install and setup OpenCV with a GPU back-end, as we will need OpenCV DNN GPU-enabled module : this is mandatory.   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8077692645749085,
        0.8338362680516479
      ],
      "excerpt": "After the OpenCV installation in the root folder containing your traffic-signs-detection folder, you'll have to install and compile the darknet YoloV4 algorithm in your workspace by doing these setups tutorial : if you want to use cmake, and this one if you want to use vcpkg. All the steps to setup and train your custom model are very well explained in AlexeyAB repository so I will not going in details here. The backup folder generated will store your trained weights. \nIf you want to use my pre-trained weights you can simply open a Windows Command Prompt, go to the traffic-signs-detection folder and type the following command : python3 download_weights.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9543828021030443
      ],
      "excerpt": "(Local version) : Now, you can start to train our custom model. In order to see if your darknet installation is working on Windows. To do that, you'll just have to launch a Windows PowerShell Console, go to the traffic-signs-detection folder and type the following command :  \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8237407108731346
      ],
      "excerpt": "Each images contained in the training, test and validation sets are labelled using the YoloV4 Format i.e :  \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/fredotran/traffic-sign-detector-yolov4/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Traffic Signs Detection using YoloV4 custom object detection and OpenCV DNN.",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "traffic-sign-detector-yolov4",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "fredotran",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fredotran/traffic-sign-detector-yolov4/blob/main/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "fredotran",
        "body": "Pre-trained weights for this custom YoloV4 model trained on 4 classes and datasets for traffic road signs detection.",
        "dateCreated": "2021-01-12T13:36:35Z",
        "datePublished": "2021-01-12T19:40:30Z",
        "html_url": "https://github.com/fredotran/traffic-sign-detector-yolov4/releases/tag/weights",
        "name": "YoloV4 custom Road Traffic Signs pre-trained weights",
        "tag_name": "weights",
        "tarball_url": "https://api.github.com/repos/fredotran/traffic-sign-detector-yolov4/tarball/weights",
        "url": "https://api.github.com/repos/fredotran/traffic-sign-detector-yolov4/releases/36298310",
        "zipball_url": "https://api.github.com/repos/fredotran/traffic-sign-detector-yolov4/zipball/weights"
      }
    ],
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* [Cmake](https://cmake.org/runningcmake/)\n* [OpenCV 4.0 or higher](https://opencv.org/releases/) \n* [CUDA 11.0 or higher](https://developer.nvidia.com/cuda-toolkit-archive) \n* [cuDNN 7.0 or higher](https://developer.nvidia.com/rdp/cudnn-archive) \n* [Python3 or higher](https://www.python.org/downloads/)\n* [Visual Studio 15 and higher](https://visualstudio.microsoft.com/fr/downloads/)\n* Windows OS (I haven't tried on other OS)\n* [GPU with CudaCompiler](https://en.wikipedia.org/wiki/CUDA#GPUs_supported)\n* Lot of patience (but worth it)\n\nTo make custom training with YoloV4, we'll need first **to setup our working environment**. To make it easier for people to use, I developped some **utilities python files allowing** the automatisation of this process. So basically, all you'll need to do it's to launch the console (Windows Shell) and execute the commands in the **Python console** (it's not that hard I promise you). \n\n--- \n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 7,
      "date": "Mon, 27 Dec 2021 20:40:15 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "yolov4",
      "opencv-dnn",
      "computer-vision",
      "python3",
      "darknet",
      "object-detection",
      "traffic-sign-recognition",
      "deep-learning"
    ],
    "technique": "GitHub API"
  }
}