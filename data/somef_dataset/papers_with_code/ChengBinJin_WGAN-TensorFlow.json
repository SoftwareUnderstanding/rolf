{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1701.07875v3](https://arxiv.org/pdf/1701.07875.pdf).\n\n<p align='center'>\n  <img src=\"https://user-images.githubusercontent.com/37034031/43870865-b795a83e-9bb4-11e8-8005-461951b3d7b7.png\" width=700)\n</p>\n  \n## Requirements\n- tensorflow 1.9.0\n- python 3.5.3\n- numpy 1.14.2\n- pillow 5.0.0\n- scipy 0.19.0\n- matplotlib 2.2.2\n\n## Applied GAN Structure\n1. **Generator (DCGAN)**\n<p align='center'>\n   <img src=\"https://user-images.githubusercontent.com/37034031/43059677-9688883e-8e88-11e8-84a7-c8f0f6afeca6.png\" width=700>\n</p>\n\n2. **Critic (DCGAN)**\n<p align='center'>\n   <img src=\"https://user-images.githubusercontent.com/37034031/43060075-47f274d0-8e8a-11e8-88ff-3211385c7544.png\" width=500>\n</p>\n\n## Generated Images\n1. **MNIST**\n<p align='center'>\n<img src=\"https://user-images.githubusercontent.com/37034031/43871185-659103d8-9bb6-11e8-848b-94ee5055cbe3.png\" width=900>\n</p>\n<p align='center'>\n   <img src=\"https://user-images.githubusercontent.com/37034031/43871958-1af67c1e-9bba-11e8-8a1c-4422bb19c9d0.png\" width=900>\n</p>\n\n2. **CelebA**\n<p align='center'>\n<img src=\"https://user-images.githubusercontent.com/37034031/43871194-79655ec2-9bb6-11e8-8b85-53fd085b0d23.png\" width=900>\n</p>\n<p align='center'>\n<img src=\"https://user-images.githubusercontent.com/37034031/43871967-26799292-9bba-11e8-843d-08f228616d10.png\" width=900>\n</p>\n**Note:** The results are not good as paper mentioned. We found that the Wasserstein distance can't converge well in the CelebA dataset, but it decreased in MNIST dataset. \n\n## Documentation\n### Download Dataset\nMNIST dataset will be downloaded automatically if in a specific folder there are no dataset. Use the following command to download `CelebA` dataset and copy the `CelebA' dataset on the corresponding file as introduced in **Directory Hierarchy** information.\n```\npython download2.py celebA\n```\n\n### Directory Hierarchy\n``` \n.\n\u2502   WGAN\n\u2502   \u251c\u2500\u2500 src\n\u2502   \u2502   \u251c\u2500\u2500 dataset.py\n\u2502   \u2502   \u251c\u2500\u2500 download2.py\n\u2502   \u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2502   \u251c\u2500\u2500 solver.py\n\u2502   \u2502   \u251c\u2500\u2500 tensorflow_utils.py\n\u2502   \u2502   \u251c\u2500\u2500 utils.py\n\u2502   \u2502   \u2514\u2500\u2500 wgan.py\n\u2502   Data\n\u2502   \u251c\u2500\u2500 celebA\n\u2502   \u2514\u2500\u2500 mnist\n```  \n**src**: source codes of the WGAN\n\n### Implementation Details\nImplementation uses TensorFlow to train the WGAN. Same generator and critic networks are used as described in [Alec Radford's paper](https://arxiv.org/pdf/1511.06434.pdf). WGAN does not use a sigmoid function in the last layer of the critic, a log-likelihood in the cost function. Optimizer is used RMSProp instead of Adam.  \n\n### Training WGAN\nUse `main.py` to train a WGAN network. Example usage:\n\n```\npython main.py --is_train=true --dataset=[celebA|mnist]\n```\n - `gpu_index`: gpu index, default: `0`\n - `batch_size`: batch size for one feed forward, default: `64`\n - `dataset`: dataset name for choice [celebA|mnist], default: `celebA`\n - `is_train`: training or inference mode, default: `False`\n - `learning_rate`: initial learning rate, default: `0.00005`\n - `num_critic`: the number of iterations of the critic per generator iteration, default: `5`\n - `z_dim`: dimension of z vector, default: `100`\n - `iters`: number of interations, default: `100000`\n - `print_freq`: print frequency for loss, default: `50`\n - `save_freq`: save frequency for model, default: `10000`\n - `sample_freq`: sample frequency for saving image, default: `200`\n - `sample_size`: sample size for check generated image quality, default: `64`\n - `load_model`: folder of save model that you wish to test, (e.g. 20180704-1736). default: `None` \n\n### Wasserstein Distance During Training\n1. **MNIST**\n<p align='center'>\n<img src=\"https://user-images.githubusercontent.com/37034031/43872167-3f0341b8-9bbb-11e8-8efa-3a9ffe6072e9.png\" width=900>\n</p>\n\n2. **CelebA**\n<p align='center'>\n<img src=\"https://user-images.githubusercontent.com/37034031/43872137-24c0ff7a-9bbb-11e8-8a35-5dbbba3ed743.png\" width=900>\n</p>\n\n### Evaluate WGAN\nUse `main.py` to evaluate a WGAN network. Example usage:\n\n```\npython main.py --is_train=false --load_model=folder/you/wish/to/test/e.g./20180704-1746\n```\nPlease refer to the above arguments.\n\n### Citation\n```\n  @misc{chengbinjin2018wgan,\n    author = {Cheng-Bin Jin"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n  @misc{chengbinjin2018wgan,\n    author = {Cheng-Bin Jin},\n    title = {WGAN-tensorflow},\n    year = {2018},\n    howpublished = {\\url{https://github.com/ChengBinJin/WGAN-TensorFlow}},\n    note = {commit xxxxxxx}\n  }\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9221746503867223
      ],
      "excerpt": "Please refer to the above arguments. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ChengBinJin/WGAN-TensorFlow",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-08-06T06:58:58Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-08-28T13:20:54Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9664193861892417
      ],
      "excerpt": "This repository is a Tensorflow implementation of Martin Arjovsky's Wasserstein GAN, arXiv:1701.07875v3. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8969038990300419
      ],
      "excerpt": "Note: The results are not good as paper mentioned. We found that the Wasserstein distance can't converge well in the CelebA dataset, but it decreased in MNIST dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "\u2502   Data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9526411132055103,
        0.9342475565386598
      ],
      "excerpt": "src: source codes of the WGAN \nImplementation uses TensorFlow to train the WGAN. Same generator and critic networks are used as described in Alec Radford's paper. WGAN does not use a sigmoid function in the last layer of the critic, a log-likelihood in the cost function. Optimizer is used RMSProp instead of Adam. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9244448456979968
      ],
      "excerpt": " - save_freq: save frequency for model, default: 10000 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8106522976741817,
        0.916376377022999
      ],
      "excerpt": "Please refer to the above arguments. \nThis project borrowed some code from wiseodd \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Wasserstein GAN TensorFlow Implementation",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "MNIST dataset will be downloaded automatically if in a specific folder there are no dataset. Use the following command to download `CelebA` dataset and copy the `CelebA' dataset on the corresponding file as introduced in **Directory Hierarchy** information.\n```\npython download2.py celebA\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ChengBinJin/WGAN-TensorFlow/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 13,
      "date": "Sat, 25 Dec 2021 03:25:55 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ChengBinJin/WGAN-TensorFlow/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ChengBinJin/WGAN-TensorFlow",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.817077406981555
      ],
      "excerpt": " - gpu_index: gpu index, default: 0 \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9151270764930737,
        0.9152750849795331,
        0.9336801098518991,
        0.9285065137266004,
        0.8431690447946779,
        0.9336801098518991,
        0.9586232994076559,
        0.9336801098518991
      ],
      "excerpt": "\u2502   \u251c\u2500\u2500 src \n\u2502   \u2502   \u251c\u2500\u2500 dataset.py \n\u2502   \u2502   \u251c\u2500\u2500 download2.py \n\u2502   \u2502   \u251c\u2500\u2500 main.py \n\u2502   \u2502   \u251c\u2500\u2500 solver.py \n\u2502   \u2502   \u251c\u2500\u2500 tensorflow_utils.py \n\u2502   \u2502   \u251c\u2500\u2500 utils.py \n\u2502   \u2502   \u2514\u2500\u2500 wgan.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9412711081208889,
        0.9479081758858054
      ],
      "excerpt": "Use main.py to train a WGAN network. Example usage: \npython main.py --is_train=true --dataset=[celebA|mnist] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8227549541243099,
        0.8420962928874927,
        0.8150251883454053
      ],
      "excerpt": " - batch_size: batch size for one feed forward, default: 64 \n - dataset: dataset name for choice [celebA|mnist], default: celebA \n - is_train: training or inference mode, default: False \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9064260211056291,
        0.9167653406484904
      ],
      "excerpt": "Use main.py to evaluate a WGAN network. Example usage: \npython main.py --is_train=false --load_model=folder/you/wish/to/test/e.g./20180704-1746 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ChengBinJin/WGAN-TensorFlow/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "WGAN-TensorFlow",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "WGAN-TensorFlow",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ChengBinJin",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ChengBinJin/WGAN-TensorFlow/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- tensorflow 1.9.0\n- python 3.5.3\n- numpy 1.14.2\n- pillow 5.0.0\n- scipy 0.19.0\n- matplotlib 2.2.2\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 42,
      "date": "Sat, 25 Dec 2021 03:25:55 GMT"
    },
    "technique": "GitHub API"
  }
}