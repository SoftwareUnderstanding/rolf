{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1D:\n```bibtex\n@inproceedings{vaswani2017attention,\n  title={Attention is all you need},\n  author={Vaswani, Ashish and Shazeer, Noam and Parmar, Niki and Uszkoreit, Jakob and Jones, Llion and Gomez, Aidan N and Kaiser, {\\L}ukasz and Polosukhin, Illia},\n  booktitle={Advances in neural information processing systems},\n  pages={5998--6008},\n  year={2017}\n}\n```\n\n2D:\n```bibtex\n@misc{wang2019translating,\n    title={Translating Math Formula Images to LaTeX Sequences Using Deep Neural Networks with Sequence-level Training},\n    author={Zelun Wang and Jyh-Charn Liu},\n    year={2019},\n    eprint={1908.11415},\n    archivePrefix={arXiv},\n    primaryClass={cs.LG}\n}\n```\n\n3D:\nComing soon!\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{wang2019translating,\n    title={Translating Math Formula Images to LaTeX Sequences Using Deep Neural Networks with Sequence-level Training},\n    author={Zelun Wang and Jyh-Charn Liu},\n    year={2019},\n    eprint={1908.11415},\n    archivePrefix={arXiv},\n    primaryClass={cs.LG}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{vaswani2017attention,\n  title={Attention is all you need},\n  author={Vaswani, Ashish and Shazeer, Noam and Parmar, Niki and Uszkoreit, Jakob and Jones, Llion and Gomez, Aidan N and Kaiser, {\\L}ukasz and Polosukhin, Illia},\n  booktitle={Advances in neural information processing systems},\n  pages={5998--6008},\n  year={2017}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tatp22/multidim-positional-encoding",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-07-26T11:06:17Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-30T04:13:35Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9905554579474716,
        0.9422810810543389
      ],
      "excerpt": "This is an implemenation of 1D, 2D, and 3D sinusodal positional encoding, being \nable to encode on tensors of the form (batchsize, x, ch), (batchsize, x, y, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9009453367615569
      ],
      "excerpt": "added to the ch dimension. The Attention is All You \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8031958702535795,
        0.9480075024460024
      ],
      "excerpt": "only one dimension, however, this works to extend this to 2 and 3 dimensions. \nNew: This also works on tensors of the form (batchsize, ch, x), etc. For \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8969491568106587,
        0.903158379432229
      ],
      "excerpt": "e.g. for a 1D input of size (batchsize, ch, x), do \nPositionalEncodingPermute1D instead of PositionalEncoding1D. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9654014859874487,
        0.9742032185204672
      ],
      "excerpt": "x is a point in 2d space \ni is an integer in [0, D/2), where D is the size of the ch dimension \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9654014859874487,
        0.9742032185204672
      ],
      "excerpt": "(x,y) is a point in 2d space \ni,j is an integer in [0, D/4), where D is the size of the ch dimension \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9869679087669926,
        0.9742032185204672
      ],
      "excerpt": "(x,y,z) is a point in 3d space \ni,j,k is an integer in [0, D/6), where D is the size of the ch dimension \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9542709574471681,
        0.9279947878841744
      ],
      "excerpt": "This is just a natural extension of the 2D positional encoding used in this paper. \nDon't worry if the input is not divisible by 2 (1D), 4 (2D), or 6 (3D); all the necessary padding will be taken care of. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8149421994111724
      ],
      "excerpt": ": Return the inputs with the position encoding added \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "An implementation of 1D, 2D, and 3D positional encoding in Pytorch and TensorFlow",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tatp22/multidim-positional-encoding/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 9,
      "date": "Thu, 30 Dec 2021 04:45:32 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/tatp22/multidim-positional-encoding/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "tatp22/multidim-positional-encoding",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9741498677201467,
        0.999746712887969
      ],
      "excerpt": "To install, simply run: \npip install positional-encodings \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.925671696398174,
        0.8801854956928516
      ],
      "excerpt": "import tensorflow as tf \nfrom positional_encodings import TFPositionalEncoding2D \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8315489210996131,
        0.9312650322969277
      ],
      "excerpt": "y = tf.zeros((1,8,6,2)) \nprint(p_enc_2d(y).shape) #: (1, 8, 6, 2) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8828786462434947
      ],
      "excerpt": "print(add_p_enc_2d(y) - p_enc_2d(y)) #: tf.ones((1,8,6,2)) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/tatp22/multidim-positional-encoding/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Peter Tatkowski\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "1D, 2D, and 3D Sinusoidal Postional Encoding (Pytorch and Tensorflow)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "multidim-positional-encoding",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "tatp22",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tatp22/multidim-positional-encoding/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 98,
      "date": "Thu, 30 Dec 2021 04:45:32 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "tensorflow",
      "pytorch",
      "deep-learning"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```python3\nimport torch\nfrom positional_encodings import PositionalEncoding1D, PositionalEncoding2D, PositionalEncoding3D\n\np_enc_1d = PositionalEncoding1D(10)\nx = torch.zeros((1,6,10))\nprint(p_enc_1d(x).shape) #: (1, 6, 10)\n\np_enc_2d = PositionalEncoding2D(8)\ny = torch.zeros((1,6,2,8))\nprint(p_enc_2d(y).shape) #: (1, 6, 2, 8)\n\np_enc_3d = PositionalEncoding3D(11)\nz = torch.zeros((1,5,6,4,11))\nprint(p_enc_3d(z).shape) #: (1, 5, 6, 4, 11)\n```\n\nAnd for tensors of the form `(batchsize, ch, x)`, etc:\n\n```python3\nimport torch\nfrom positional_encodings import PositionalEncodingPermute1D, PositionalEncodingPermute2D, PositionalEncodingPermute3D\n\np_enc_1d = PositionalEncodingPermute1D(10)\nx = torch.zeros((1,10,6))\nprint(p_enc_1d(x).shape) #: (1, 10, 6)\n\np_enc_2d = PositionalEncodingPermute2D(8)\ny = torch.zeros((1,8,6,2))\nprint(p_enc_2d(y).shape) #: (1, 8, 6, 2)\n\np_enc_3d = PositionalEncodingPermute3D(11)\nz = torch.zeros((1,11,5,6,4))\nprint(p_enc_3d(z).shape) #: (1, 11, 5, 6, 4)\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}