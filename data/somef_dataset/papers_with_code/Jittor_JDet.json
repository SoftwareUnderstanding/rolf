{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2008.09397",
      "https://arxiv.org/abs/2008.09397",
      "https://arxiv.org/abs/2008.09397",
      "https://arxiv.org/abs/2008.09397",
      "https://arxiv.org/abs/1911.09358",
      "https://arxiv.org/abs/1911.09358",
      "https://arxiv.org/abs/1708.02002",
      "https://arxiv.org/abs/1506.01497",
      "https://arxiv.org/abs/1812.00155"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. [Jittor](https://github.com/Jittor/jittor)\n2. [Detectron2](https://github.com/facebookresearch/detectron2)\n3. [mmdetection](https://github.com/open-mmlab/mmdetection)\n4. [maskrcnn_benchmark](https://github.com/facebookresearch/maskrcnn-benchmark)\n5. [RotationDetection](https://github.com/yangxue0827/RotationDetection)\n6. [s2anet](https://github.com/csuhan/s2anet)\n7. [gliding_vertex](https://github.com/MingtaoFu/gliding_vertex)\n8. [oriented_rcnn](https://github.com/jbwang1997/OBBDetection/tree/master/configs/obb/oriented_rcnn)\n9. [r3det](https://github.com/SJTU-Thinklab-Det/r3det-on-mmdetection)\n10. [AerialDetection](https://github.com/dingjiansw101/AerialDetection)\n11. [DOTA_devkit](https://github.com/CAPTAIN-WHU/DOTA_devkit)\n12. [OBBDetection](https://github.com/jbwang1997/OBBDetection)\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n@article{hu2020jittor,\n  title={Jittor: a novel deep learning framework with meta-operators and unified graph execution},\n  author={Hu, Shi-Min and Liang, Dun and Yang, Guo-Ye and Yang, Guo-Wei and Zhou, Wen-Yang},\n  journal={Science China Information Sciences},\n  volume={63},\n  number={222103},\n  pages={1--21},\n  year={2020}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{hu2020jittor,\n  title={Jittor: a novel deep learning framework with meta-operators and unified graph execution},\n  author={Hu, Shi-Min and Liang, Dun and Yang, Guo-Ye and Yang, Guo-Wei and Zhou, Wen-Yang},\n  journal={Science China Information Sciences},\n  volume={63},\n  number={222103},\n  pages={1--21},\n  year={2020}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8831404568154577
      ],
      "excerpt": "| S2ANet-R50-FPN | DOTA1.0|1024/200| flip|-|  SGD   |   1x    | 74.11   | arxiv| config | model | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "1x : 12 epochs \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Jittor/JDet",
    "technique": "GitHub API"
  },
  "contact": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Website: http://cg.cs.tsinghua.edu.cn/jittor/\n\nEmail: jittor@qq.com\n\nFile an issue: https://github.com/Jittor/jittor/issues\n\nQQ Group: 761222083\n\n\n<img src=\"https://cg.cs.tsinghua.edu.cn/jittor/images/news/2020-12-8-21-19-1_2_2/fig4.png\" width=\"200\"/>\n\n",
      "technique": "Header extraction"
    }
  ],
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-08-04T09:13:15Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-20T09:12:26Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "JDet is an object detection benchmark based on [Jittor](https://github.com/Jittor/jittor), and mainly focus on aerial image object detection (oriented object detection). \n\n<!-- **Features**\n- Automatic compilation. Our framwork is based on Jittor, which means we don't need to Manual compilation for these code with CUDA and C++.\n-  -->\n\n<!-- Framework details are avaliable in the [framework.md](docs/framework.md) -->\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8177769614952565
      ],
      "excerpt": "JDet defines the used model, dataset and training/testing method by config-file, please check the config.md to learn how it works. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8497172707456816
      ],
      "excerpt": "You can choose the visualization style you prefer, for more details about visualization, please refer to visualization.md. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9745463551978923
      ],
      "excerpt": "In this section, we will introduce how to build a new project(model) with JDet. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8149747097467788
      ],
      "excerpt": "ra90: rotate aug with angle 90,180,270 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8918714504612804,
        0.907810918877772
      ],
      "excerpt": ":heavy_check_mark: RetinaNet \n:heavy_check_mark: Faster R-CNN \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.896326751185533
      ],
      "excerpt": ":heavy_check_mark: Oriented R-CNN \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9627487715650112
      ],
      "excerpt": ":clock3: Cascade R-CNN \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "JDet is an object detection benchmark based on Jittor. Mainly focus on aerial image object detection (oriented object detection).",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Jittor/JDet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 7,
      "date": "Tue, 21 Dec 2021 07:24:37 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Jittor/JDet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Jittor/JDet",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/Jittor/JDet/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Jittor/JDet/master/projects/ssd/scripts/val_ssd.sh",
      "https://raw.githubusercontent.com/Jittor/JDet/master/projects/ssd/scripts/train_ssd.sh",
      "https://raw.githubusercontent.com/Jittor/JDet/master/projects/faster_rcnn/scripts/test.sh",
      "https://raw.githubusercontent.com/Jittor/JDet/master/projects/faster_rcnn/scripts/train.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "JDet environment requirements:\n\n* System: **Linux**(e.g. Ubuntu/CentOS/Arch), **macOS**, or **Windows Subsystem of Linux (WSL)**\n* Python version >= 3.7\n* CPU compiler (require at least one of the following)\n    * g++ (>=5.4.0)\n    * clang (>=8.0)\n* GPU compiler (optional)\n    * nvcc (>=10.0 for g++ or >=10.2 for clang)\n* GPU library: cudnn-dev (recommend tar file installation, [reference link](https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html#installlinux-tar))\n\n**Step 1: Install the requirements**\n```shell\ngit clone https://github.com/Jittor/JDet\ncd JDet\npython -m pip install -r requirements.txt\n```\nIf you have any installation problems for Jittor, please refer to [Jittor](https://github.com/Jittor/jittor)\n\n**Step 2: Install JDet**\n \n```shell\ncd JDet\n#: suggest this \npython setup.py develop\n#: or\npython setup.py install\n```\nIf you don't have permission for install,please add ```--user```.\n\nOr use ```PYTHONPATH```: \nYou can add ```export PYTHONPATH=$PYTHONPATH:{you_own_path}/JDet/python``` into ```.bashrc```, and run\n```shell\nsource .bashrc\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8866135513206033
      ],
      "excerpt": "You can also build your own dataset by convert your datas to DOTA format. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8902627162932362,
        0.9906248903846466
      ],
      "excerpt": "mkdir $PROJECT_PATH$ \ncd $PROJECT_PATH$ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8902627162932362
      ],
      "excerpt": "mkdir configs \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8727487047449518
      ],
      "excerpt": ":heavy_check_mark: COCO \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9320489571820629
      ],
      "excerpt": "python tools/run_net.py --config-file=configs/s2anet_r50_fpn_1x_dota.py --task=train \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9325251835599839
      ],
      "excerpt": "python tools/run_net.py --config-file=configs/s2anet_r50_fpn_1x_dota.py --task=test \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9063466064794933
      ],
      "excerpt": "python tools/run_net.py --config-file=configs/s2anet_r50_fpn_1x_dota.py --task=vis_test \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9278027301737428,
        0.9282749786919208,
        0.8342236033294648
      ],
      "excerpt": "python run_net.py --config-file=configs/base.py --task=train \npython run_net.py --config-file=configs/base.py --task=test \n|    Models     | Dataset| Sub_Image_Size/Overlap |Train Aug | Test Aug | Optim | Lr schd | mAP    | Paper | Config     | Download   | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8163390121274977
      ],
      "excerpt": "| OrientedRCNN-R50-FPN |DOTA1.0|1024/200|Flip|-|  SGD   |   1x    | 75.62  | ICCV21| config | model | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9068921662555894
      ],
      "excerpt": ":heavy_plus_sign: Total-Text \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Jittor/JDet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "JDet",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "JDet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Jittor",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Jittor/JDet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 75,
      "date": "Tue, 21 Dec 2021 07:24:37 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "deep-learning",
      "object-detection",
      "oriented-object-detection",
      "aerial-image-detection",
      "jittor"
    ],
    "technique": "GitHub API"
  }
}