{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1810.04805",
      "https://arxiv.org/abs/1910.04732",
      "https://arxiv.org/abs/1810.04805",
      "https://arxiv.org/abs/1910.04732"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n@article{devlin2018bert,\n  title={BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding},\n  author={Devlin, Jacob and Chang, Ming-Wei and Lee, Kenton and Toutanova, Kristina},\n  journal={arXiv preprint arXiv:1810.04805},\n  year={2018}\n}\n@inproceedings{wang2019glue,\n  title={ {GLUE}: A Multi-Task Benchmark and Analysis Platform for Natural Language Understanding},\n  author={Wang, Alex and Singh, Amanpreet and Michael, Julian and Hill, Felix and Levy, Omer and Bowman, Samuel R.},\n  note={In the Proceedings of ICLR.},\n  year={2019}\n}\n@article{wang2019structured,\n  title={Structured Pruning of Large Language Models},\n  author={Wang, Ziheng and Wohlwend, Jeremy and Lei, Tao},\n  journal={arXiv preprint arXiv:1910.04732},\n  year={2019}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{wang2019structured,\n  title={Structured Pruning of Large Language Models},\n  author={Wang, Ziheng and Wohlwend, Jeremy and Lei, Tao},\n  journal={arXiv preprint arXiv:1910.04732},\n  year={2019}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{wang2019glue,\n  title={ {GLUE}: A Multi-Task Benchmark and Analysis Platform for Natural Language Understanding},\n  author={Wang, Alex and Singh, Amanpreet and Michael, Julian and Hill, Felix and Levy, Omer and Bowman, Samuel R.},\n  note={In the Proceedings of ICLR.},\n  year={2019}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{devlin2018bert,\n  title={BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding},\n  author={Devlin, Jacob and Chang, Ming-Wei and Lee, Kenton and Toutanova, Kristina},\n  journal={arXiv preprint arXiv:1810.04805},\n  year={2018}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "cudatoolkit 10.0.130 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Arexh/BERT-Pruning",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "How to Contribute\nBERT needs to maintain permanent compatibility with the pre-trained model files,\nso we do not plan to make any major changes to this library (other than what was\npromised in the README). However, we can accept small patches related to\nre-factoring and documentation. To submit contributes, there are just a few\nsmall guidelines you need to follow.\nContributor License Agreement\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to https://cla.developers.google.com/ to see\nyour current agreements on file or to sign a new one.\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\nCode reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\nGitHub Help for more\ninformation on using pull requests.\nCommunity Guidelines\nThis project follows\nGoogle's Open Source Community Guidelines.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-17T02:51:11Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-02-26T06:50:56Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\nBERT-Pruning\n|-- bert\t#: from https://github.com/google-research/bert\n|-- flop    \t#: flop pruning method's code\n|-- datasets\t#: a collection of datasets,need to download from https://gluebenchmark.com/tasks\n\t|-- MNLI\n\t\t|-- train.tsv\n\t\t|-- dev_matched.tsv\n\t\t|-- test_matched.tsv\n\t|-- MRPC\n\t\t|-- msr_paraphrase_train.txt\n\t\t|-- msr_paraphrase_test.txt\n\t|-- QNLI\n\t\t|-- train.tsv\n\t\t|-- dev.tsv\n\t\t|-- test.tsv\n\t|-- QQP\n\t\t|-- train.tsv\n\t\t|-- dev.tsv\n\t\t|-- test.tsv\n\t|-- RTE\n\t\t|-- train.tsv\n\t\t|-- dev.tsv\n\t\t|-- test.tsv\n\t|-- SST-2\n\t\t|-- train.tsv\n\t\t|-- dev.tsv\n\t\t|-- test.tsv\n\t|-- SST-B\n\t\t|-- train.tsv\n\t\t|-- dev.tsv\n\t\t|-- test.tsv\n\t|-- WNLI\n\t\t|-- train.tsv\n\t\t|-- dev.tsv\n\t\t|-- test.tsv\n|-- uncased_L-12_H-768_A-12\t#: pretained model, from https://storage.googleapis.com/bert_models/2018_10_18/uncased_L-12_H-768_A-12.zip\n|-- uncased_L-12_H-768_A-12_f \t#: factorized model \n|-- uncased_L-12_H-768_A-12_SST-2_f\n|-- run_all.sh\t\t\t#: simple script to fine-tune all tasks\n|-- run.sh\t\t\t#: pruning factorized model\n|-- factorize.sh\t\t#: factorize a BERT model into a new model\n|-- remove_mask.sh\t\t#: remove mask layer from factorized model\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9907936917765925,
        0.9346204545134883
      ],
      "excerpt": "Tensorflow implementation of pruning on [BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding]. Currently, we fine-tune BERT pretrained model uncased_L-12_H-768_A-12  on several GLUE benchmark and evaluate scores on dev set. \nThe code in folder bert  is a clone from google-research/bert, and we add some DataProcessors in run_classifier.py . The STS-B part code is based on @Colanim 's  repo BERT_STS-B, which use a simple regression to output scores. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9867933662400541
      ],
      "excerpt": "The algorithm I implement is from paper [1910.04732]Structured Pruning of Large Language Models, and many code is taken from their repository asappresearch/flop, however some details many be different from them. I also refer to Goggle's l0 regularization pruning code: google-research/google-research/state_of_sparsity. All pruning code is placed under the flop folder. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9754715417417871,
        0.8680725544390044
      ],
      "excerpt": "Factorize the matrix of each dense layer of BERT pretrain model into two submatrix. \nPlace a pruning mask diagonal matrix between every two factorized matrixes, and construct a new intermediate model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.962880565305466,
        0.8826265193719814
      ],
      "excerpt": "Factorize the matrix of each dense layer of this finetuned checkpoint into two submatrix. \nFinetune this intermediate model on down steam task (set model learning rate to 0). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8003641553061944
      ],
      "excerpt": "Finetune again (set model learning rate to 1e-6). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9498612153643143
      ],
      "excerpt": "Adjust arguments if you need, more specific details please check the paper. In addition, in order to solve the problem of overfitting, I also add l2 regularization on dense layers. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8599498779996209
      ],
      "excerpt": "In flop/optimization_flop.py ,  loss, expected sparsity and each parameters' learning rates are summarized. Also, when training the model,  the program will save model's checkpoint per 1000 (parameter save_checkpoints_steps in run_classifier.py) steps, and tf.estimator.train_and_evaluate() evaluate new checkpoint in dev set. The evaluate result will be summarized as well.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9402284758125216,
        0.8980089182188397,
        0.8566722708002841
      ],
      "excerpt": "alpha_lr, lambda_lr, model_lr : Learning rate of alphas, lambdas and BERT model parameters. \nexpected_sparsity , target_sparsity: Expected sparsity calculated by model's alphas parameters, and target sparsity which is warm up by target_sparsity_warmup steps. \nl2_regularization_loss : Sum of all dense layers' l2 regularization value. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9597881214321241
      ],
      "excerpt": "Then we get a model with 92.43% accuracy and 65M parameters, compare with BERT base: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8647574191338324
      ],
      "excerpt": "| Metrics\\Model | BERT base | Pruned model | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Implement pruning algorithm on BERT.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Holldean/BERT-Pruning/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Tue, 21 Dec 2021 01:14:21 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Arexh/BERT-Pruning/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Arexh/BERT-Pruning",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Holldean/BERT-Pruning/master/main.ipynb",
      "https://raw.githubusercontent.com/Holldean/BERT-Pruning/master/bert/predicting_movie_reviews_with_bert_on_tf_hub.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Holldean/BERT-Pruning/master/remove_mask.sh",
      "https://raw.githubusercontent.com/Holldean/BERT-Pruning/master/factorize.sh",
      "https://raw.githubusercontent.com/Holldean/BERT-Pruning/master/run_all.sh",
      "https://raw.githubusercontent.com/Holldean/BERT-Pruning/master/run.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "|                   | MNLI-m (Acc) | QQP (F1) | QNLI (Acc) | SST-2 (Acc) | STS-B (Spearman correlations) | MRPC (F1) | RTE (Acc) | WNLI (Acc) |\n| ----------------- | ------------ | -------- | ---------- | ----------- | ----------------------------- | --------- | --------- | ---------- |\n| Our results       | 84.3         | 88.2     | 91.8       | 93.0        | 78.6 (pearson: 89.6)          | 89.1      | 68.2       | 60.5       |\n| **Paper results** | 84.6         | 71.2     | 90.5       | 93.5        | 85.8                          | 88.9      | 66.4      | None       |\n| Training time     | 5.77h        | 5.17h    | 1.48h      | 0.93h       | 0.09h                         | 0.08h     | 0.05h     | 0.03h      |\n\nThe paper's result is **evaluated by GLUE evaluation server**\uff08BERT base, not sure whether cased or uncased), probably test **on test set**. Since GLUE data set has no test label, we just evaluate these tasks **on dev set**, which means the result on dataset might be **lower** than current result, thus the comparison of results is for reference only.\n\nThe reason for paper **not including WNLI** result is because GLUE webpage notes that there are issues with the construction of this dataset, thus authors consider it as a problematic one.\n\nNote that our result on **STS-2** is not good compare to paper's result on Spearman correlations metric. The most likely cause is a **different implementation of the output layer**. Since **the output of STS-B is a float type**, the paper does not seem to explain in detail how to deal with this situation, thus we just use [`@Colanim`](https://github.com/Colanim) 's idea by using a simple regression as output layer.\n\nHere we follow paper's instructions, fine-tuning model in four different learning rates (results above are highest in each task):\n\n| Learning Rate | MNLI-m (Acc) | QQP (F1) | QNLI (Acc) | SST-2 (Acc) | STS-B (Spearman correlations) | MRPC (F1) | RTE (Acc) | WNLI (Acc) |\n| ------------- | ------------ | -------- | ---------- | ----------- | ----------------------------- | --------- | --------- | ---------- |\n| 2e-5          | 84.2         | 87.9     | 91.8       | 92.8        | 78.6                          | 88.1      | 68.2      | 43.7       |\n| 3e-5          | 84.2         | 88.0     | 91.3       | 92.3        | 77.6                          | 88.8      | 67.1      | 43.7       |\n| 4e-5          | 84.3         | 88.2     | 90.5       | 93.0        | 77.3                          | 89.1      | 52.7      | 45.1       |\n| 5e-5          | 83.9         | 87.9     | 91.0       | 91.3        | 77.0                          | 85.5      | 61.7      | 60.6       |\n\nThe experimental data is stored in the folder [`fine_tune_results`](https://github.com/Holldean/BERT-Pruning/tree/master/fine_tune_results).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8837680365796365
      ],
      "excerpt": "Python 3.7.6 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9387544178107442,
        0.9465718491881494
      ],
      "excerpt": "cd /path/of/BERT-Pruning \nbash run_all.sh \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.912645509091146
      ],
      "excerpt": "Run the script run.sh: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8891771325701191
      ],
      "excerpt": "Following charts will be shown: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9175294146096777
      ],
      "excerpt": "Run the script remove_mask.sh: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9166331100124805
      ],
      "excerpt": "  --output_folder_dir=/path/to/output/directory \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.840995685370445
      ],
      "excerpt": "Tensorflow 1.15.0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8636556631857453
      ],
      "excerpt": "Then the folder fine_tune_outputs will be created in the directory. The result will be in eval_results.txt,  e.g., \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8156126259779192
      ],
      "excerpt": "In first two steps, we need download a BERT checkpoint first, fine-tune it on dataset(SST-2), run the script factorize.sh: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python ./flop/factorize.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8667012491694005
      ],
      "excerpt": "If success, a checkpoint of the result model will be in output directory. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python ./flop/run_classifier.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984,
        0.8594142235991984
      ],
      "excerpt": "    --do_train=true \\ \n    --do_eval=true \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.837291423718494
      ],
      "excerpt": "    --bert_config_file=$BERT_DIR/$CHECKPOINT/bert_config.json \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9198911196460542,
        0.8551920162466844
      ],
      "excerpt": "Each training output will store in a folder named by a timestamp string. For example: SST-2_Pruning/uncased_L-12_H-768_A-12_f/2020-06-02-12:15:59. \nIn flop/optimization_flop.py ,  loss, expected sparsity and each parameters' learning rates are summarized. Also, when training the model,  the program will save model's checkpoint per 1000 (parameter save_checkpoints_steps in run_classifier.py) steps, and tf.estimator.train_and_evaluate() evaluate new checkpoint in dev set. The evaluate result will be summarized as well.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8346654707642227
      ],
      "excerpt": "All hyperparameters will be stored as summary text: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python ./flop/remove_mask.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8409642147647466,
        0.8827439260558635
      ],
      "excerpt": "  --output_folder_dir=/path/to/output/directory \nAfter running, checkpoint and config file will output to output_folder_dir. Parameters information will be shown in info.txt: \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Arexh/BERT-Pruning/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'\\n                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "BERT-Pruning",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "BERT-Pruning",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Arexh",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Arexh/BERT-Pruning/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Tue, 21 Dec 2021 01:14:21 GMT"
    },
    "technique": "GitHub API"
  }
}