{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1904.04123",
      "https://arxiv.org/abs/1910.11609",
      "https://arxiv.org/abs/1711.09846",
      "https://arxiv.org/abs/2104.11522"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{laube2021interchoice,\n  title={Inter-choice dependent super-network weights},\n  author={Kevin Alexander Laube, Andreas Zell},\n  journal={arXiv preprint arXiv:2104.11522},\n  year={2021}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{kl2020uninas,\n  author = {Kevin Alexander Laube},\n  title = {UniNAS},\n  year = {2020},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/cogsys-tuebingen/uninas}}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "- SimpleTrainer.test_last=10 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/cogsys-tuebingen/uninas",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-11-09T10:49:29Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-20T08:27:12Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9819838765603183
      ],
      "excerpt": "(which happens mostly on our internal GitLab, we push only every once in a while to Github) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8534768004845996
      ],
      "excerpt": "sets of operations (primitives), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9539756471316176
      ],
      "excerpt": "... and more \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8662941797574982
      ],
      "excerpt": "compare results of different methods in the same environment \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9343394814336617
      ],
      "excerpt": "integrate new methods and more with fairly little effort \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9539756471316176,
        0.876513459563507,
        0.931187591268525,
        0.8149772111033916
      ],
      "excerpt": "... and more \nExcept for a few pieces, the code is entirely self-written. \nHowever, sometimes the (official) code is useful to learn from or clear up some details, \nand other frameworks can be used for their nice features. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9966474696551649,
        0.8630734914891455
      ],
      "excerpt": "Cream of the Crop \nSome algorithms without a repository: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9114779567962531
      ],
      "excerpt": "Population Based Training of Neural Networks \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8109753353176976
      ],
      "excerpt": "the searchers (SMBO, MCTS, ...) focus on fully training (many) models and are not differentiable  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8392048685320479,
        0.9439871041636955
      ],
      "excerpt": "Everything is an argument. Learning rate? Argument. Scheduler? Argument. \nThe exact topology of a Network, including how many of each cell and \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.866567614024788,
        0.8904704550498014
      ],
      "excerpt": "This is enabled by the idea that each used class (method, network, cells, regularizers, ...) can add arguments to argparse, \nincluding which further classes are required (e.g. a method needs a network, which needs a stem). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8506503921755793,
        0.8928688303245371,
        0.8791511271981489
      ],
      "excerpt": "Since putting together the arguments correctly is not trivial \n(and requires some familiarity with the code base), \nan easier approach is using a GUI. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9669400737794019
      ],
      "excerpt": "based only on the implemented argparse (meta) arguments in the respective classes. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8775394953000145
      ],
      "excerpt": "And they are also available as indexed wildcards: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8831304824004219
      ],
      "excerpt": "(It also grants a certain amount of refactoring-freedom.) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A highly modular PyTorch framework with a focus on Neural Architecture Search (NAS).",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/cogsys-tuebingen/uninas/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Thu, 23 Dec 2021 15:15:03 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/cogsys-tuebingen/uninas/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "cogsys-tuebingen/uninas",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8642263705551807
      ],
      "excerpt": "Single Path One-Shot \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9322609392449874
      ],
      "excerpt": "PyTorch Lightning \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9036977846269241
      ],
      "excerpt": "To see all available (meta) arguments, run Main.list_all_arguments() in uninas/main.py \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/cogsys-tuebingen/uninas/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Kevin Alexander Laube\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "UniNAS",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "uninas",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "cogsys-tuebingen",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/cogsys-tuebingen/uninas/blob/main/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1) Train super-networks, e.g. via *experiments/demo/inter_choice_weights/icw1_train_supernet_nats.py*\n    - you will need Cifar10, but can also easily use fake data or download it\n    - to generate SubImageNet see *uninas/utils/generate/data/subImageNet*\n2) Evaluate the super-network, e.g. via *experiments/demo/inter_choice_weights/icw2_eval_supernet.py*\n    - this step requires you to have the bench data, see https://cs-cloud.cs.uni-tuebingen.de/index.php/s/tBwgjBNcYqsst55\n    - set the path to the bench in the script\n3) View the evaluation results in the save dir, in TensorBoard or plotted directly\n\n\n```\n@article{laube2021interchoice,\n  title={Inter-choice dependent super-network weights},\n  author={Kevin Alexander Laube, Andreas Zell},\n  journal={arXiv preprint arXiv:2104.11522},\n  year={2021}\n}\n```\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 11,
      "date": "Thu, 23 Dec 2021 15:15:03 GMT"
    },
    "technique": "GitHub API"
  }
}