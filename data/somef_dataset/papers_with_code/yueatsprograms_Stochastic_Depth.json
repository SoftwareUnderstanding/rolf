{
  "citation": [
    {
      "confidence": [
        0.8866100174821131
      ],
      "excerpt": "Getting Started on CIFAR-10   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8866100174821131
      ],
      "excerpt": "Getting Started on CIFAR-10 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yueatsprograms/Stochastic_Depth",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-04-01T20:50:07Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-07T18:37:12Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9728440768587929,
        0.9292585520604515,
        0.9968029537584643
      ],
      "excerpt": "This repository hosts the Torch 7 code for the paper Deep Networks with Stochastic Depth \navailable at http://arxiv.org/abs/1603.09382. For now, the code reproduces the results in Figure 3 for CIFAR-10 and CIFAR-100, and Figure 4 left for SVHN. The code for the 1202-layer network is easily modified from the repo fb.resnet.torch using our provided module for stochastic depth. \nTable of Contents \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9692799408282915
      ],
      "excerpt": "Please see the latest implementation of stochastic depth and other cool models (DenseNet etc.) in PyTorch, by Felix Wu and Danlu Chen. Their code is much more memory efficient, more user friendly and better maintained. The 1202-layer architecture on CIFAR-10 can be trained on one TITAN X (amazingly!) under our standard settings. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9340835168952375,
        0.9394290065182666
      ],
      "excerpt": "This command runs the 110-layer ResNet on CIFAR-10 with stochastic depth, using linear decay survival probabilities ending in 0.5. The -device flag allows you to specify which GPU to run on. On our machine with a TITAN X, each epoch takes about 60 seconds, and the program ends with a test error (selected by best validation error) of 5.25%. \nThe default deathRate is set to 0. This is equivalent to a constant depth network, so to run our baseline, enter: <br/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9303877354098473,
        0.8157607618301236,
        0.8379659649265946
      ],
      "excerpt": "On our machine with a TITAN X, each epoch takes about 75 seconds, and this baseline program ends with a test error (selected by best validation error) of 6.41% (see Figure 3 in the paper). \nYou can run on CIFAR-100 by adding the flag -dataset cifar100. Our program provides other options, for example, your network depth (-N), data augmentation (-augmentation), batch size (-batchSize) etc. You can change the optimization hyperparameters in the sgdState variable, and learning rate schedule in the the main function. The program saves a file every epoch to resultFolder/errors_N_dataset_deathMode_deathRate, which has a table of tuples containing your test and validation errors until that epoch. \nThe architecture and number of epochs for SVHN used in our paper are slightly different from the code's default, please use the following command if you would like to replicate our result of 1.75% on SVHN:<br/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9911300206905346
      ],
      "excerpt": "It is normal to get a +/- 0.2% difference from our reported results on CIFAR-10, and analogously for the other datasets. Networks are initialized differently, and most importantly, the validation set is chosen at random (determined by your seed). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9863307147928124
      ],
      "excerpt": "<a href=\"https://github.com/xgastaldi\"> Xavier <a/> reported that the model is able to converge for him on CIFAR-10 only after he uses the following initalization for Batch Normalization model:add(cudnn.SpatialBatchNormalization(_dim_):init('weight', nninit.normal, 1.0, 0.002):init('bias', nninit.constant, 0)). We could not replicate the non-convergence and thus won't put this initialization into our code, but recognize that machines (or the versions of Torch installed) might be different. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Deep Networks with Stochastic Depth",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yueatsprograms/Stochastic_Depth/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 78,
      "date": "Mon, 27 Dec 2021 02:02:49 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yueatsprograms/Stochastic_Depth/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "yueatsprograms/Stochastic_Depth",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8609664299294902
      ],
      "excerpt": "Prerequisites   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9785469432747609
      ],
      "excerpt": "nninit; luarocks install nninit should do the trick. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9879863063452118,
        0.9906248903846466,
        0.9205737535323599,
        0.8001164155342668
      ],
      "excerpt": "git clone https://github.com/yueatsprograms/Stochastic_Depth \ncd Stochastic_Depth \ngit clone https://github.com/soumith/cifar.torch \ncd cifar.torch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "cd .. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8099757883433454
      ],
      "excerpt": "Usage Details   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.835478905332324,
        0.8099757883433454,
        0.8817563697531595
      ],
      "excerpt": "th main.lua -dataRoot cifar.torch/ -resultFolder results/ -deathRate 0.5 \nUsage Details \nth main.lua -dataRoot path_to_data -resultFolder path_to_save -deathRate 0.5<br/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8817563697531595
      ],
      "excerpt": "th main.lua -dataRoot path_to_data -resultFolder path_to_save <br/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9091964020611767
      ],
      "excerpt": "th main.lua -dataRoot path_to_data -resultFolder path_to_save -dataset svhn -N 25 -maxEpochs 50 -deathRate 0.5 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yueatsprograms/Stochastic_Depth/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Lua"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Deep Networks with Stochastic Depth",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Stochastic_Depth",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "yueatsprograms",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yueatsprograms/Stochastic_Depth/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 447,
      "date": "Mon, 27 Dec 2021 02:02:49 GMT"
    },
    "technique": "GitHub API"
  }
}