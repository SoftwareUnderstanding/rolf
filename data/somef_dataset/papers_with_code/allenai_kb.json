{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1901.09590"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{Peters2019KnowledgeEC,\n  author={Matthew E. Peters and Mark Neumann and Robert L Logan and Roy Schwartz and Vidur Joshi and Sameer Singh and Noah A. Smith},\n  title={Knowledge Enhanced Contextual Word Representations},\n  booktitle={EMNLP},\n  year={2019}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8592871015078041
      ],
      "excerpt": "curl https://allennlp.s3-us-west-2.amazonaws.com/knowbert/wiki_entity_linking/$EVALUATION_FILE > $EVALUATION_FILE \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9001257786168221,
        0.9911959320294913
      ],
      "excerpt": "Relation extraction: TACRED and SemEval 2010 Task 8 \nEntity typing (Choi et al 2018) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8090016440670298
      ],
      "excerpt": "perl -w bin/semeval2010_task8_scorer-v1.2.pl knowbert_predictions_semeval2010_task8_test.txt semeval2010_task8_testing_keys.txt \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/allenai/kb",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-09-03T18:05:44Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-15T03:12:03Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.959961309707981
      ],
      "excerpt": ": a pretrained model, e.g. for Wordnet+Wikipedia \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = ModelArchiveFromParams.from_params(params=params) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9919381950242631
      ],
      "excerpt": "sentences = [\"Paris is located in France.\", \"KnowBert is a knowledge enhanced BERT\"] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9322840109050917
      ],
      "excerpt": "    #: model_output['contextual_embeddings'] is (batch_size, seq_len, embed_dim) tensor of top layer activations \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9090182609891825
      ],
      "excerpt": "MODEL_ARCHIVE=..location of model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.991890447160224
      ],
      "excerpt": "The heldout perplexity is key exp(lm_loss_wgt). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9090182609891825
      ],
      "excerpt": "MODEL_ARCHIVE=..location of model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.89215831575589,
        0.8998676226010514
      ],
      "excerpt": "The results are in key 'mrr'. \nTo evaluate the internal WordNet linker on the ALL task evaluation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9090182609891825
      ],
      "excerpt": "MODEL_ARCHIVE=..location of model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9546101654997474
      ],
      "excerpt": "To reproduce the results in Table 3 for KnowBert-W+W: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9090182609891825
      ],
      "excerpt": "MODEL_ARCHIVE=..location of model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8237366985053528,
        0.9424226597050955,
        0.9262905533216935
      ],
      "excerpt": "Results are in key wiki_el_f1. \nFine tuning KnowBert is similar to fine tuning BERT for a downstream task. \nWe provide configuration and model files for the following tasks: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8362299999146948
      ],
      "excerpt": "file in training_config/downstream/, edit the location of the training and dev \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.938056852114343
      ],
      "excerpt": "Similar to BERT, for some tasks performance can vary significantly with hyperparameter \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8287698223850047,
        0.9216555508814551
      ],
      "excerpt": "to perform a small grid search over learning rate, number of epochs and the random seed, \nchoosing the best model based on the validation set. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9162939497385364
      ],
      "excerpt": "To evaluate a model with the official scorer, run: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9729417587776926
      ],
      "excerpt": "Roughly speaking, the process to fine tune BERT into KnowBert is: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9676732301070022
      ],
      "excerpt": "This step pretrains the entity linker while freezing the rest of the network using only supervised data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8696586135614773
      ],
      "excerpt": "The command is similar for WordNet. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9660827314961686
      ],
      "excerpt": "The pretrained models in our paper were trained on a single GPU with 24GB of RAM.  For multiple GPU training, change cuda_device to a list of device IDs. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9204806497568806
      ],
      "excerpt": "\"model_archive\" to point to the model.tar.gz from the previous linker pretraining step. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "KnowBert -- Knowledge Enhanced Contextual Word Representations",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/allenai/kb/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 42,
      "date": "Sun, 26 Dec 2021 18:45:35 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/allenai/kb/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "allenai/kb",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/allenai/kb/master/bin/run_hyperparameter_seeds.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. We have already prepared the knowledge bases for Wikipedia and WordNet.  The necessary files will be automatically downloaded as needed when running evaluations or fine tuning KnowBert.\n2. If you would like to add an additional knowledge source to KnowBert, these are roughly the steps to follow:\n\n    1. Compute entity embeddings for each entity in your knowledge base.\n    2. Write a candidate generator for the entity linkers.  Use the existing WordNet or Wikipedia generators as templates.\n\n3.  Our Wikipedia candidate dictionary list and embeddings were extracted from [End-to-End Neural Entity Linking, Kolitsas et al 2018](https://github.com/dalab/end2end_neural_el) via a manual process.\n\n4. Our WordNet candidate generator is rule based (see code).  The embeddings were computed via a multistep process that combines [TuckER](https://arxiv.org/abs/1901.09590) and [GenSen](https://github.com/Maluuba/gensen) embeddings.  The prepared files contain everything needed to run KnowBert and include:\n\n    1. `entities.jsonl` - metadata about WordNet synsets.\n    2. `wordnet_synsets_mask_null_vocab.txt` and `wordnet_synsets_mask_null_vocab_embeddings_tucker_gensen.hdf5` - vocabulary file and embedding file for WordNet synsets.\n    3. `semcor_and_wordnet_examples.json` annotated training data combining SemCor and WordNet examples for supervising the WordNet linker.\n\n5. If you would like to generate these files yourself from scratch, follow these steps.\n\n   1. Extract the WordNet metadata and relationship graph.\n        ```\n        python bin/extract_wordnet.py --extract_graph --entity_file $WORKDIR/entities.jsonl --relationship_file $WORKDIR/relations.txt\n        ```\n    2. Download the [Words-in-Context dataset](https://pilehvar.github.io/wic/) to exclude from the extracted WordNet example usages.\n        ```\n        WORKDIR=.\n        cd $WORKDIR\n        wget https://pilehvar.github.io/wic/package/WiC_dataset.zip\n        unzip WiC_dataset.zip\n        ```\n    2. Download the [word sense diambiguation data](http://lcl.uniroma1.it/wsdeval/):\n        ```\n        cd $WORKDIR\n        wget http://lcl.uniroma1.it/wsdeval/data/WSD_Evaluation_Framework.zip\n        unzip WSD_Evaluation_Framework.zip\n        ```\n    2. Convert the WSD data from XML to jsonl, and concatenate all evaluation files for easy evaluation:\n        ```\n        mkdir $WORKDIR/wsd_jsonl\n        python bin/preprocess_wsd.py --wsd_framework_root $WORKDIR/WSD_Evaluation_Framework  --outdir $WORKDIR/wsd_jsonl\n        cat $WORKDIR/wsd_jsonl/semeval* $WORKDIR/wsd_jsonl/senseval* > $WORKDIR/semeval2007_semeval2013_semeval2015_senseval2_senseval3.json\n        ```\n    2. Extract all the synset example usages from WordNet (after removing sentences from WiC heldout sets):\n        ```\n        python bin/extract_wordnet.py --extract_examples_wordnet --entity_file $WORKDIR/entities.jsonl --wic_root_dir $WORKDIR --wordnet_example_file $WORKDIR/wordnet_examples_remove_wic_devtest.json\n        ```\n    2. Combine WordNet examples and definitions with SemCor for training KnowBert:\n        ```\n        cat $WORKDIR/wordnet_examples_remove_wic_devtest.json $WORKDIR/wsd_jsonl/semcor.json > $WORKDIR/semcor_and_wordnet_examples.json\n        ```\n    3. Create training and test splits of the relationship graph.\n        ```\n        python bin/extract_wordnet.py --split_wordnet --relationship_file $WORKDIR/relations.txt --relationship_train_file $WORKDIR/relations_train99.txt --relationship_dev_file $WORKDIR/relations_dev01.txt\n        ```\n    4. Train TuckER embeddings on the extracted graph.  The configuration files uses relationship graph files on S3, although you can substitute them for the files generated in the previous step by modifying the configuration file.\n        ```\n        allennlp train -s $WORKDIR/wordnet_tucker --include-package kb.kg_embedding --file-friendly-logging training_config/wordnet_tucker.json\n        ```\n    5. Generate a vocabulary file useful for WordNet synsets with special tokens\n        ```\n        python bin/combine_wordnet_embeddings.py --generate_wordnet_synset_vocab --entity_file $WORKDIR/entities.jsonl --vocab_file $WORKDIR/wordnet_synsets_mask_null_vocab.txt\n        ```\n    6. Get the [GenSen](https://github.com/Maluuba/gensen) embeddings from each synset definition.  First install the code from this link.  Then run\n        ```\n        python bin/combine_wordnet_embeddings.py --generate_gensen_embeddings --entity_file $WORKDIR/entities.jsonl --vocab_file $WORKDIR/wordnet_synsets_mask_null_vocab.txt --gensen_file $WORKDIR/gensen_synsets.hdf5\n        ```\n    7. Extract the TuckER embeddings for the synsets from the trained model\n        ```\n        python bin/combine_wordnet_embeddings.py --extract_tucker --tucker_archive_file $WORKDIR/wordnet_tucker/model.tar.gz --vocab_file $WORKDIR/wordnet_synsets_mask_null_vocab.txt --tucker_hdf5_file $WORKDIR/tucker_embeddings.hdf5\n        ```\n    8. Finally combine the TuckER and GenSen embeddings into one file\n        ```\n        python bin/combine_wordnet_embeddings.py --combine_tucker_gensen --tucker_hdf5_file $WORKDIR/tucker_embeddings.hdf5 --gensen_file $WORKDIR/gensen_synsets.hdf5 --all_embeddings_file $WORKDIR/wordnet_synsets_mask_null_vocab_embeddings_tucker_gensen.hdf5\n        ```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Sentence tokenize your training corpus using spacy, and prepare input files for next-sentence-prediction sampling.  Each file contains one sentence per line with consecutive sentences on subsequent lines and blank lines separating documents.\n2. Run `bin/create_pretraining_data_for_bert.py` to group the sentences by length, do the NSP sampling, and write out files for training.\n3. Reserve one or more of the training files for heldout evaluation.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8595580349154678
      ],
      "excerpt": "archive_file = 'https://allennlp.s3-us-west-2.amazonaws.com/knowbert/models/knowbert_wiki_wordnet_model.tar.gz' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8902627162932362,
        0.9906248903846466
      ],
      "excerpt": "mkdir -p kg_probe \ncd kg_probe \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "cd .. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8043505674059436
      ],
      "excerpt": "Prepare the knowledge bases (not necessary if you are using Wikipedia or WordNet as we have already prepared these). \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8801854956928516,
        0.8801854956928516,
        0.822551505185729
      ],
      "excerpt": "from kb.include_all import ModelArchiveFromParams \nfrom kb.knowbert_utils import KnowBertBatchifier \nfrom allennlp.common import Params \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8060372108626078,
        0.8347190929786527
      ],
      "excerpt": "params = Params({\"archive_file\": archive_file}) \nmodel = ModelArchiveFromParams.from_params(params=params) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8088065623779561
      ],
      "excerpt": "for batch in batcher.iter_batches(sentences, verbose=True): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8921934226216521
      ],
      "excerpt": "Download the heldout data. Then run: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8968045850405657
      ],
      "excerpt": "python bin/evaluate_perplexity.py -m $MODEL_ARCHIVE -e $HELDOUT_FILE \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8082022887640018
      ],
      "excerpt": "unzip kg_probe.zip \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8968045850405657
      ],
      "excerpt": "python bin/evaluate_mrr.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8058760267078988
      ],
      "excerpt": "Then run this command to generate predictions from KnowBert: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8968045850405657
      ],
      "excerpt": "python bin/evaluate_wsd_official.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8554138574456002
      ],
      "excerpt": "    --output_file $KNOWBERT_PREDICTIONS \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8968045850405657
      ],
      "excerpt": "python bin/evaluate_wiki_linking.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8986632404286053
      ],
      "excerpt": "data files, then run (example provided for TACRED): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.90749639567495
      ],
      "excerpt": "To evaluate a model first download the model archive and run: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8968045850405657
      ],
      "excerpt": "python bin/write_tacred_for_official_scorer.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8557559684870459,
        0.8366370148985628
      ],
      "excerpt": "    --output_file knowbert_predictions_tacred_dev_or_test.txt \npython bin/tacred_scorer.py tacred_dev_or_test.gold knowbert_predictions_tacred_dev_or_test.txt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8968045850405657
      ],
      "excerpt": "python bin/write_semeval2010_task8_for_official_eval.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8557559684870459
      ],
      "excerpt": "    --output_file knowbert_predictions_semeval2010_task8_test.txt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8096789361552519
      ],
      "excerpt": "Use bin/write_wic_for_codalab.py to write a file for submission to the CodaLab evaluation server. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8370537644706195
      ],
      "excerpt": "To train the Wikipedia linker for KnowBert-Wiki run: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8152326144674016
      ],
      "excerpt": "Before training, modify the following keys in the config file (or use --overrides flag to allennlp train): \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/allenai/kb/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jsonnet",
      "Perl",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright {yyyy} {name of copyright owner}\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "KnowBert",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "kb",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "allenai",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/allenai/kb/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "First download one of the pretrained models from the previous section.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 279,
      "date": "Sun, 26 Dec 2021 18:45:35 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\ngit clone git@github.com:allenai/kb.git\ncd kb\nconda create -n knowbert python=3.6.7\nsource activate knowbert\npip install torch==1.2.0\npip install -r requirements.txt\npython -c \"import nltk; nltk.download('wordnet')\"\npython -m spacy download en_core_web_sm\npip install --editable .\n```\n\nThen make sure the tests pass:\n\n```\npytest -v tests\n```\n\n\n",
      "technique": "Header extraction"
    }
  ]
}