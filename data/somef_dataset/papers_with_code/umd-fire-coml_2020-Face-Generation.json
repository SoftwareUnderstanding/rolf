{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1710.10196.\n\nLiu, Ziwei & Luo, Ping & Wang, Xiaogang, & Tang, Xiaoou, 2015, Deep Learning Face Attributes in the Wild, Dataset, http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html.\n\nYongWook, Ha, 2018, Keras-GAN, GitHub repository, https://github.com/YongWookHa/DCGAN-Keras."
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Karras, Tero, 2018, Progressive Growing of GANS, GitHub repository, https://github.com/tkarrasprogressive_growing_of_gans.\n\nKarras, Tero & Aila, Temo & Laine, Samuli & Lehtinen, Jaakko, 2017, Progressive Growing on GANs for Improved Quality, Stability, and Variation, ICLR Final, https://arxiv.org/abs/1710.10196.\n\nLiu, Ziwei & Luo, Ping & Wang, Xiaogang, & Tang, Xiaoou, 2015, Deep Learning Face Attributes in the Wild, Dataset, http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html.\n\nYongWook, Ha, 2018, Keras-GAN, GitHub repository, https://github.com/YongWookHa/DCGAN-Keras.\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.972923210548563
      ],
      "excerpt": "Developed by Sean Huang, Kyle Hassold, Khushi Bhansali, and Saachi Sahni. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9116434537713409
      ],
      "excerpt": "git clone https://github.com/umd-fire-coml/2020-Face-Generation \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/umd-fire-coml/2020-Face-Generation",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-09-10T20:29:57Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-04-19T17:29:26Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9962735076658157
      ],
      "excerpt": "In Face Generation project, we defined and trained a Deep Convolutional Generative Adversarial Network (DCGAN) two part model on a dataset of faces. The main objective of our model was to generate new images of fake human faces that look as realistic as possible.  We used the CelebFaces Attributes Dataset (CelebA) which is a large-scale face attributes dataset with more than 200K celebrity images. The Attribute Data Noise is the input to the Generator and GAN Models. It is a random list of 40 elements (1s and 0s) with a float value between 0-1 at the end. This corresponds to the true/false attribute data that comes with the CelebA dataset with a random float value tacked on for noise. The Generator Model uses the Attribute Data Noise as input into a Deep Convolutional Network that starts with a small image and upscales it through each grouping of layers. In the end it creates a batch of rgb images designed to trick the Discriminator Model into thinking it\u2019s a face. The Discriminator model is trained half with real images from the CelebA dataset and half with fake images generated by Generator Model to output  a single value on a scale of 0-1 for each image that represents whether the Model thinks the image contains a face (a value closer to 0) or no face (a value closer to 1). Finally, the complete GAN model is trained so that the generator can train to defeat the discriminator. Through the Attribute Data Noise and fake truth values, Generator Model tricks the Discriminator Model thus producing a trained GAN model. In summary, the training process comprised of defining the loss functions, selecting optimizer, and finally training the model, to generate fake human faces. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8939610573487534
      ],
      "excerpt": "Run the training script. This uses the data generator to generate input data, builds the model, and trains it.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "In Face Generation project, we defined and trained a Deep Convolutional Generative Adversarial Network (DCGAN) two part model on a dataset of faces. The main objective of our model was to generate new images of fake human faces that look as realistic as possible. We used the CelebFaces Attributes Dataset (CelebA) which is a large-scale face attributes dataset with more than 200K celebrity images. The Attribute Data Noise is the input to the Generator and GAN Models.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/umd-fire-coml/2020-Face-Generation/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 20:50:28 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/umd-fire-coml/2020-Face-Generation/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "umd-fire-coml/2020-Face-Generation",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/umd-fire-coml/2020-Face-Generation/master/data_validator.ipynb",
      "https://raw.githubusercontent.com/umd-fire-coml/2020-Face-Generation/master/testing.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* check-env.py - Verify the enviornment to run the code, making sure every all the package needed are installed and functional.\n* data_validator.ipynb - Notebook visualizing the dataset.\n* dataGens.py - Generate fake attributes randomly and image sequence from the data given.\n* dataset.py - Loads all data in a directory in a batch.\n* dcgan.py - Main training file. Generates and trains our facial recognition software with the built generator and dataset.\n* testing.ipynb - Testing notebook for testing and visualizing the results.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8068031206148083,
        0.9372376694035341
      ],
      "excerpt": "Clone the project locally (In a terminal) \ngit clone https://github.com/umd-fire-coml/2020-Face-Generation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.850823820819464,
        0.9606330944381724,
        0.9632347459754548,
        0.9940837022706414,
        0.8736605057927236,
        0.9944602585719593
      ],
      "excerpt": "cd 2020-Face-Generation \nCreate a Conda environment using the environment.yml file \nconda env create -f environment.yml \nActivate the Conda environment \nconda activate face-generation \nRun the environment checker in the current directory to check if the environment has required packages installed \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9246227682586091,
        0.9002327516892754
      ],
      "excerpt": "python check_env.py \nRun the file downloader to download the dataset \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.921108411272225
      ],
      "excerpt": "python dataset.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8216927178622287,
        0.9246227682586091
      ],
      "excerpt": "Run the training script. This uses the data generator to generate input data, builds the model, and trains it.  \npython dcgan.py \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/umd-fire-coml/2020-Face-Generation/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-Face-Generation",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-Face-Generation",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "umd-fire-coml",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/umd-fire-coml/2020-Face-Generation/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "KyleHassold",
        "body": "",
        "dateCreated": "2020-12-14T18:04:38Z",
        "datePublished": "2020-12-14T18:06:28Z",
        "html_url": "https://github.com/umd-fire-coml/2020-Face-Generation/releases/tag/V1.0.0",
        "name": "",
        "tag_name": "V1.0.0",
        "tarball_url": "https://api.github.com/repos/umd-fire-coml/2020-Face-Generation/tarball/V1.0.0",
        "url": "https://api.github.com/repos/umd-fire-coml/2020-Face-Generation/releases/35250426",
        "zipball_url": "https://api.github.com/repos/umd-fire-coml/2020-Face-Generation/zipball/V1.0.0"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 20:50:28 GMT"
    },
    "technique": "GitHub API"
  }
}