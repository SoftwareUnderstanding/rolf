{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2102.05095\">TimeSformer</a>, from Facebook AI. A pure and simple attention-based solution for reaching SOTA on video classification. This repository will only house the best performing variant, 'Divided Space-Time Attention', which is nothing more than attention along the time axis before the spatial.\n\n<a href=\"https://ai.facebook.com/blog/timesformer-a-new-architecture-for-video-understanding/\">Press release</a>\n\n## Usage\n\n```python\nimport torch\nfrom timesformer_pytorch import TimeSformer\n\nmodel = TimeSformer(\n    dim = 512,\n    image_size = 224,\n    patch_size = 16,\n    num_frames = 8,\n    num_target_frames = 4,\n    channels = 3,\n    out_channels = 1,\n    depth = 12,\n    heads = 8,\n    dim_head =  64,\n    attn_dropout = 0.1,\n    ff_dropout = 0.1\n"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bibtex\n@misc{bertasius2021spacetime,\n    title   = {Is Space-Time Attention All You Need for Video Understanding?}, \n    author  = {Gedas Bertasius and Heng Wang and Lorenzo Torresani},\n    year    = {2021},\n    eprint  = {2102.05095},\n    archivePrefix = {arXiv},\n    primaryClass = {cs.CV}\n}\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{bertasius2021spacetime,\n    title   = {Is Space-Time Attention All You Need for Video Understanding?}, \n    author  = {Gedas Bertasius and Heng Wang and Lorenzo Torresani},\n    year    = {2021},\n    eprint  = {2102.05095},\n    archivePrefix = {arXiv},\n    primaryClass = {cs.CV}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/halixness/generative_timesformer_pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-04-14T10:53:26Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-20T19:20:18Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9920241214386851
      ],
      "excerpt": "| :exclamation:  This repository is based on lucidrains/TimeSformer-pytorch   | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.864860410811811,
        0.9000137535247059
      ],
      "excerpt": "This fork attemps to extend the purpose of TimeSformer to video generation for future frame prediction.  \nThe purpose is solely educative and experimental. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9151247374108529,
        0.9516740950265824,
        0.9971121400758206
      ],
      "excerpt": "- for each patch, space attention is computed correspondingly to the other patches in the same frame \nThe original TimeSformer outputs a single classification token, which attends all keys and values when attention is computed. \nThus, the idea is to define N tokens equal to frames * patches_per_frame, which are going to attend all keys and values when attention is computed; a final embedding layer is added to project these tokens to final visual patches, symmetrically to the input of the model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9903901926355767
      ],
      "excerpt": "Implementation of <a href=\"https://arxiv.org/abs/2102.05095\">TimeSformer</a>, from Facebook AI. A pure and simple attention-based solution for reaching SOTA on video classification. This repository will only house the best performing variant, 'Divided Space-Time Attention', which is nothing more than attention along the time axis before the spatial. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Experimental fork of TimeSformer from Facebook AI to extend the attention-based model to video generation.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/halixness/generative_timesformer_pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 07:10:52 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/halixness/generative_timesformer_pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "halixness/generative_timesformer_pytorch",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/halixness/generative_timesformer_pytorch/main/test.ipynb"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/halixness/generative_timesformer_pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2021 Phil Wang\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Generative TimeSformer - Pytorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "generative_timesformer_pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "halixness",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/halixness/generative_timesformer_pytorch/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Wed, 29 Dec 2021 07:10:52 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "video",
      "transformer",
      "attention",
      "vit",
      "facebook",
      "ai",
      "video-prediction",
      "video-generation",
      "timesformer"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```python\nimport torch\nfrom timesformer_pytorch import TimeSformer\n\nmodel = TimeSformer(\n    dim = 512,\n    image_size = 224,\n    patch_size = 16,\n    num_frames = 8,\n    num_target_frames = 4,\n    channels = 3,\n    out_channels = 1,\n    depth = 12,\n    heads = 8,\n    dim_head =  64,\n    attn_dropout = 0.1,\n    ff_dropout = 0.1\n)\n\nvideo = torch.randn(2, 8, 3, 224, 224) #: (batch x frames x channels x height x width)\npred = model(video) #: (2, 4, 1, 224, 224)\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}