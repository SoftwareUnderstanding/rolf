{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/PuchatekwSzortach/voc_ssd",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-07-24T21:16:37Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-09-06T01:25:54Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8721223310616527,
        0.9417232154902393,
        0.8795556503480305
      ],
      "excerpt": "Single Shot MultiBox Detector (SSD) implementation for PASCAL VOC 2012 dataset. \nWhile the general concepts of vanilla SSD algorithm are maintained, several important differences and additions to reference implementation are introduced: \n- data analysis \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9828167885981455
      ],
      "excerpt": "- only blocks 2 to 5 of VGG backbone are used for predictions \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9696203866351782,
        0.9683706328747662,
        0.9136673663944676
      ],
      "excerpt": "Original paper defined sizes and prediction layers for default boxes used in the network without any reference to sizes of objects it was trying to detect. \nIn this work we provide a script to analyze sizes and aspect ratios of objects in data set, which can be used to guide network architecture design. \nGiven sizes and arrangement of default boxes in SSD, it's possible to compute what is the maximum theoretical recall for the network against a given dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9562480581768965
      ],
      "excerpt": "It turns out that for PASCAL VOC 2012 dataset using layers above block 5 is not necessary - all objects in the dataset \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9062949299443277
      ],
      "excerpt": "Analysis also shows that over 70% of annotations require default boxes placed on block 2 and 3 for default boxes \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8238453064176073,
        0.8258376936979009,
        0.9053261656856801
      ],
      "excerpt": "Configuration file provided allows to control which of major VGG blocks outputs should be used to construct prediction \nheads, as well as what should be sizes and aspect ratios of default boxes placed on them.  \nNo changes in code are necessary to adjust network to configuration optimal for a given dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9076025406839099,
        0.8815732117995082,
        0.9796270597631223
      ],
      "excerpt": "- data analysis becomes more difficult, making finding optimal network configuration difficult as well \n- for most VOC images above rescaling decreases image resolution, making small objects, so ones that are particularly hard to detect, even smaller \nIn this work we choose to train and predict on original image resolution, only adjusting image to a size factor of 32, which simplifies computations of default boxes coordinates. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8929750525777587,
        0.9589143977502097
      ],
      "excerpt": "- visualize.py - provides routines to visualize raw data, augmented data, predictions, etc \nLocation of data and model paths, training hyperparameters and other inputs for all scripts are controlled through configuration file parameter. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8081801835595859
      ],
      "excerpt": "This project can be readily reused with different object detection datasets. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8651852388606515
      ],
      "excerpt": "- implement a data loader - look at net.data.VOCSamplesDataLoader for reference \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9525842163406157
      ],
      "excerpt": "Of course I would then advise to use tools project provides to define optimal network configuration for your dataset, going through \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Single Shot MultiBox Detector implementation for PASCAL VOC dataset",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/PuchatekwSzortach/voc_ssd/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Wed, 29 Dec 2021 22:41:13 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/PuchatekwSzortach/voc_ssd/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "PuchatekwSzortach/voc_ssd",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8688239319776075
      ],
      "excerpt": "Following scripts are provided in the scripts directory \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8143552427216878,
        0.8180010628890078
      ],
      "excerpt": "- data_analysis.py - analyzes sizes and aspect ratios of annotations in dataset \n- model_analysis.py - analyzes performance of trained model on a dataset \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8612350678208427
      ],
      "excerpt": "- train.py - trains network \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/PuchatekwSzortach/voc_ssd/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 Jakub Kolodziejczyk\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "voc_ssd",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "voc_ssd",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "PuchatekwSzortach",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/PuchatekwSzortach/voc_ssd/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Wed, 29 Dec 2021 22:41:13 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Original SSD network defines default boxes in `[center_x, center_y, width, height]` format.  \nThis work uses an alternative `[min_x, min_y, max_x, max_y]` format.\nBoth formats are interchangeable, but the latter is far more popular among computer vision frameworks and easier to work with.\n\n",
      "technique": "Header extraction"
    }
  ]
}