{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/espressif/esp-who",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-10-26T11:00:01Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-23T06:05:03Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9351818514798529,
        0.8704948193018717
      ],
      "excerpt": "ESP-WHO is an image processing development platform based on Espressif chips. It contains development examples that may be applied in practical applications. \nESP-WHO provides examples such as Human Face Detection, Human Face Recognition, Cat Face Detection, Gesture Recognition, etc. You can develop a variety of practical applications based on these examples. ESP-WHO runs on ESP-IDF. ESP-DL provides rich deep learning related interfaces for ESP-WHO, which can be implemented with various peripherals to realize many interesting applications. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8747755752509865
      ],
      "excerpt": "We recommend novice developers to use the development boards designed by Espressif. The examples provided by ESP-WHO are developed based on the following Espressif development board, and the corresponding relationships between the development boards and SoC are shown in the table below. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9452198821951366,
        0.8530669393443522,
        0.912534244735963,
        0.8070243751240898,
        0.9267908692581104
      ],
      "excerpt": "Using a development board not mentioned in the table above, configure pins assigned to peripherals manually, such as camera, LCD, and buttons. \nIf not using the Espressif development boards mentioned in Hardware, configure the camera pins manually. Enter idf.py menuconfig in the terminal and click (Top) -> Component config -> ESP-WHO Configuration to enter the ESP-WHO configuration interface, as shown below: \nClick Camera Configuration to select the pin configuration of the camera according to the development board you use, as shown in the following figure: \nIf the board you are using is not shown in the figure above, please select Custom Camera Pinout and configure the corresponding pins correctly, as shown in the following figure: \nIf the output of example is displayed on web server, click Wi-Fi Configuration to configure Wi-Fi password and other parameters, as shown in the following figure: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Face detection and recognition framework",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/espressif/esp-who/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 314,
      "date": "Mon, 27 Dec 2021 07:34:31 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/espressif/esp-who/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "espressif/esp-who",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/espressif/esp-who/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/espressif/esp-who/master/tools/ci/build_examples_cmake.sh",
      "https://raw.githubusercontent.com/espressif/esp-who/master/tools/ci/build_examples.sh",
      "https://raw.githubusercontent.com/espressif/esp-who/master/components/modules/web/www/compress_pages.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Open the terminal and go to any folder that stores examples (e.g. examples/human_face_detection/lcd). Run the following command to set the target chip: \n\n```bash\nidf.py set-target [SoC]\n```\n\nReplace [SoC] with your target chip, e.g. esp32, esp32s2, esp32s3.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.909150026808282
      ],
      "excerpt": "The default binaries for each development board are stored in the folder default_bin. You can use Flash Download Tool (https://www.espressif.com/en/support/download/other-tools) to flash binaries. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8231427514499966
      ],
      "excerpt": "    <img width=\"%\" src=\"./img/architecture_en.drawio.svg\">  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8115068504330526
      ],
      "excerpt": "idf.py flash monitor \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/espressif/esp-who/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C",
      "HTML",
      "C++",
      "Shell",
      "CMake",
      "Makefile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/espressif/esp-who/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b' ESPRESSIF MIT License\\n \\n Copyright (c) 2018 <ESPRESSIF SYSTEMS (SHANGHAI) PTE LTD>\\n \\n Permission is hereby granted for use on all ESPRESSIF SYSTEMS products, in which case,\\n it is free of charge, to any person obtaining a copy of this software and associated\\n documentation files (the \"Software\"), to deal in the Software without restriction, including\\n without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\\n and/or sell copies of the Software, and to permit persons to whom the Software is furnished\\n to do so, subject to the following conditions:\\n \\n The above copyright notice and this permission notice shall be included in all copies or\\n substantial portions of the Software.\\n \\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\\n FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\n COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\\n IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\\n CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "ESP-WHO [[\u4e2d\u6587]](./README_CN.md)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "esp-who",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "espressif",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/espressif/esp-who/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "XiaochaoGONG",
        "body": "This is a pre-release for esp-eye.\r\n\r\n# New Functionalities\r\n- Face recognition based on face detection\r\n- Enrollment of face ids in Flash\r\n- Displaying images in web browser\r\n- Speech wake-up\r\n# Supported Development Boards\r\nThe series of development boards with esp32 chip are compatible with the algorithm, but some peripherals, e.g. camera, digital microphone, etc, are required to get data. [ESP-EYE](https://github.com/espressif/esp-who/blob/master/docs/en/get-started/ESP-EYE_V2.0_Getting_Started_Guide.md) is specially designed for face recognition and speech wake up task.\r\n# New Examples\r\n- Camera Web Server\r\n- Recognition Solution\r\n# Binary File\r\nThe binary file is for the `Recognition Solution`, flash address is 0x0000.\r\n# Get This Release\r\n```\r\ngit clone -https://github.com/espressif/esp-who.git\r\ncd esp-who\r\ngit checkout v0.9.0\r\ngit submodule update --init --recursive\r\n```",
        "dateCreated": "2018-12-29T10:16:00Z",
        "datePublished": "2019-01-03T13:23:57Z",
        "html_url": "https://github.com/espressif/esp-who/releases/tag/v0.9.0",
        "name": "Face recognition and speech wake up for esp-eye",
        "tag_name": "v0.9.0",
        "tarball_url": "https://api.github.com/repos/espressif/esp-who/tarball/v0.9.0",
        "url": "https://api.github.com/repos/espressif/esp-who/releases/14780186",
        "zipball_url": "https://api.github.com/repos/espressif/esp-who/zipball/v0.9.0"
      },
      {
        "authorType": "User",
        "author_name": "XiaochaoGONG",
        "body": "## Face Detection\r\n[face_detection.zip](https://github.com/espressif/esp-who/files/2638829/face_detection.zip)\r\n\r\nTo flash all build output, run:\r\n```\r\npython $IDF_PATH/components/esptool_py/esptool/esptool.py --chip esp32 --port /dev/ttyUSB1 --baud 921600 --before default_reset --after hard_reset write_flash -z --flash_mode dio --flash_freq 80m --flash_size detect 0x1000 bootloader.bin 0x10000 detection_command_line.bin 0x8000 partitions.bin\r\n```\r\n## Face Recognition\r\n[face_recognition.zip](https://github.com/espressif/esp-who/files/2638823/face_recognition.zip)\r\n\r\nTo flash all build output, run:\r\n```\r\npython $IDF_PATH/components/esptool_py/esptool/esptool.py --chip esp32 --port /dev/ttyUSB1 --baud 921600 --before default_reset --after hard_reset write_flash -z --flash_mode dio --flash_freq 80m --flash_size detect 0x1000 bootloader.bin 0x10000 recognition_command_line.bin 0x8000 partitions.bin\r\n```\r\n\r\n\r\n",
        "dateCreated": "2018-11-23T08:05:18Z",
        "datePublished": "2018-12-03T09:10:26Z",
        "html_url": "https://github.com/espressif/esp-who/releases/tag/v0.5.0",
        "name": "Face Detection + Recognition",
        "tag_name": "v0.5.0",
        "tarball_url": "https://api.github.com/repos/espressif/esp-who/tarball/v0.5.0",
        "url": "https://api.github.com/repos/espressif/esp-who/releases/14309436",
        "zipball_url": "https://api.github.com/repos/espressif/esp-who/zipball/v0.5.0"
      }
    ],
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "All examples of ESP-WHO are stored in [examples](./examples) folder. Structure of this folder is shown below:\n\n```bash\n\u251c\u2500\u2500 examples\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cat_face_detection          // Cat Face Detection examples\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 lcd                     // Output displayed on LCD screen\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 terminal                // Output displayed on terminal\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 code_recognition            // Barcode and QR Code Recognition examples\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 human_face_detection        // Human Face Detection examples\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 lcd\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 terminal\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 human_face_recognition      // Human Face Recognition examples\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 lcd\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 terminal\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md               // Detailed description of examples\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 motion_detection            // Motion Detection examples\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 lcd\u00a0\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 terminal\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 web\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 README.rst              \n```\n\nFor the development boards mentioned in [Hardware](#Hardware), all examples are available out of the box. To run the examples, you only need to perform [Step 1: Set the target chip] (#Step-1 Set the target chip) and [Step 4: Launch and monitor] (#Step-4 Launch and monitor).\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1156,
      "date": "Mon, 27 Dec 2021 07:34:31 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "ESP-WHO runs on ESP-IDF. For details on getting ESP-IDF, please refer to [ESP-IDF Programming Guide](https://idf.espressif.com/).\n\n> Please use the latest version of ESP-IDF on the master branch.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Run the following commands in your terminal to download ESP-WHO:\n\n```bash\ngit clone --recursive https://github.com/espressif/esp-who.git\n```\n\n> Remember to use ``git submodule update --recursive --init`` to pull and update submodules of ESP-WHO.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "All examples of ESP-WHO are stored in [examples](./examples) folder. Structure of this folder is shown below:\n\n```bash\n\u251c\u2500\u2500 examples\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cat_face_detection          // Cat Face Detection examples\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 lcd                     // Output displayed on LCD screen\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 terminal                // Output displayed on terminal\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 code_recognition            // Barcode and QR Code Recognition examples\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 human_face_detection        // Human Face Detection examples\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 lcd\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 terminal\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 human_face_recognition      // Human Face Recognition examples\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 lcd\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 terminal\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md               // Detailed description of examples\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 motion_detection            // Motion Detection examples\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 lcd\u00a0\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 terminal\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 web\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 README.rst              \n```\n\nFor the development boards mentioned in [Hardware](#Hardware), all examples are available out of the box. To run the examples, you only need to perform [Step 1: Set the target chip] (#Step-1 Set the target chip) and [Step 4: Launch and monitor] (#Step-4 Launch and monitor).\n\n",
      "technique": "Header extraction"
    }
  ]
}