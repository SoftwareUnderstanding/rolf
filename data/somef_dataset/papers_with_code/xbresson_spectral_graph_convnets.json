{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1606.09375](https://arxiv.org/pdf/1606.09375.pdf) <br>\n<br>\n\n### Code objective\nThe code provides a simple example of graph ConvNets for the MNIST classification task.<br>\nThe graph is a 8-nearest neighbor graph of a 2D grid.<br>\nThe signals on graph are the MNIST images vectorized as $28^2 \\times 1$ vectors.<br>\n<br>\n\n\n### Installation\n   ```sh\n   git clone https://github.com/xbresson/graph_convnets_pytorch.git\n   cd graph_convnets_pytorch\n   pip install -r requirements.txt # installation for python 3.6.2\n   python check_install.py\n   jupyter notebook # run the 2 notebooks\n   ```\n\n<br>\n\n\n\n### Results\nGPU Quadro M4000<br>\n* Standard ConvNets: **01_standard_convnet_lenet5_mnist_pytorch.ipynb**, accuracy= 99.31, speed= 6.9 sec/epoch. <br>\n* Graph ConvNets: **02_graph_convnet_lenet5_mnist_pytorch.ipynb**, accuracy= 99.19, speed= 100.8 sec/epoch <br>\n<br>\n\n\n### Note\nPyTorch has not yet implemented function torch.mm(sparse, dense) for variables: https://github.com/pytorch/pytorch/issues/2389. It will be certainly implemented but in the meantime, I defined a new autograd function for sparse variables, called \"my_sparse_mm\", by subclassing torch.autograd.function and implementing the forward and backward passes.\n\n\n```python\nclass my_sparse_mm(torch.autograd.Function):\n    \"\"\"\n    Implementation of a new autograd function for sparse variables, \n    called \"my_sparse_mm\", by subclassing torch.autograd.Function \n    and implementing the forward and backward passes.\n    \"\"\"\n    \n    def forward(self, W, x):  # W is SPARSE\n        self.save_for_backward(W, x)\n        y = torch.mm(W, x)\n        return y\n    \n    def backward(self, grad_output):\n        W, x = self.saved_tensors \n        grad_input = grad_output.clone()\n        grad_input_dL_dW = torch.mm(grad_input, x.t()) \n        grad_input_dL_dx = torch.mm(W.t(), grad_input )\n        return grad_input_dL_dW, grad_input_dL_dx\n```\n<br>\n\n\n### When to use this algorithm?\nAny problem that can be cast as analyzing a set of signals on a fixed graph, and you want to use ConvNets for this analysis.<br>\n\n<br>\n\n<br>\n<br>\n"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9222383658450612
      ],
      "excerpt": "October 15, 2017 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/xbresson/spectral_graph_convnets",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-10-01T03:47:33Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-09T06:23:04Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Prototype implementation in PyTorch of the NIPS'16 paper:<br>\nConvolutional Neural Networks on Graphs with Fast Localized Spectral Filtering<br>\nM Defferrard, X Bresson, P Vandergheynst<br>\nAdvances in Neural Information Processing Systems, 3844-3852, 2016<br>\nArXiv preprint: [arXiv:1606.09375](https://arxiv.org/pdf/1606.09375.pdf) <br>\n<br>\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9443990361033846,
        0.9415672800455636
      ],
      "excerpt": "The code provides a simple example of graph ConvNets for the MNIST classification task.<br> \nThe graph is a 8-nearest neighbor graph of a 2D grid.<br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8950533139370278
      ],
      "excerpt": "    Implementation of a new autograd function for sparse variables,  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "PyTorch implementation of spectral graph ConvNets, NIPS\u201916",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/xbresson/spectral_graph_convnets/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 68,
      "date": "Tue, 28 Dec 2021 02:07:08 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/xbresson/spectral_graph_convnets/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "xbresson/spectral_graph_convnets",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/xbresson/spectral_graph_convnets/master/02_graph_convnet_lenet5_mnist_pytorch.ipynb",
      "https://raw.githubusercontent.com/xbresson/spectral_graph_convnets/master/01_standard_convnet_lenet5_mnist_pytorch.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "   ```sh\n   git clone https://github.com/xbresson/graph_convnets_pytorch.git\n   cd graph_convnets_pytorch\n   pip install -r requirements.txt #: installation for python 3.6.2\n   python check_install.py\n   jupyter notebook #: run the 2 notebooks\n   ```\n\n<br>\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9748709027320682
      ],
      "excerpt": "GPU Quadro M4000<br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.933538006273495
      ],
      "excerpt": "    grad_input = grad_output.clone() \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9026007091259286,
        0.9035792485953562,
        0.8359898000522127,
        0.8788671093914776
      ],
      "excerpt": "<img src=\"pic/graph_convnet.jpg\" align=\"right\" width=\"200\"/> \n<img src=\"pic/home100.jpg\" width=\"15\" height=\"15\"/> http://www.ntu.edu.sg/home/xbresson<br> \n<img src=\"pic/github100.jpg\" width=\"15\" height=\"15\"/> https://github.com/xbresson<br> \n<img src=\"pic/twitter100.jpg\" width=\"15\" height=\"15\"/> https://twitter.com/xbresson <br> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/xbresson/spectral_graph_convnets/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "HTML",
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2017 Xavier Bresson\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Graph ConvNets in PyTorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "spectral_graph_convnets",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "xbresson",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/xbresson/spectral_graph_convnets/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 282,
      "date": "Tue, 28 Dec 2021 02:07:08 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Any problem that can be cast as analyzing a set of signals on a fixed graph, and you want to use ConvNets for this analysis.<br>\n\n<br>\n\n<br>\n<br>\n\n",
      "technique": "Header extraction"
    }
  ]
}