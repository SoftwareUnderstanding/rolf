{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This work is supported partly by the National Key Research and Development Program of China, by the National Natural Science Foundation of China, by the Beijing Advanced Innovation Center for Big Data and Brain Computing (BDBC), by the Fundamental Research Funds for the Central Universities, by the Beijing S&T Committee and by the State Key Laboratory of Software Development Environment. The authors specially thank Linfang Hou for helpful discussions.\n\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2010.04925"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If this work is helpful, please cite as:\n\n```bibtex\n@inproceedings{zheng2020regularizing,\n  title={Regularizing Neural Networks via Adversarial Model Perturbation},\n  author={Zheng, Yaowei and Zhang, Richong and Mao, Yongyi},\n  booktitle={{CVPR}},\n  year={2021}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{zheng2020regularizing,\n  title={Regularizing Neural Networks via Adversarial Model Perturbation},\n  author={Zheng, Yaowei and Zhang, Richong and Mao, Yongyi},\n  booktitle={{CVPR}},\n  year={2021}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hiyouga/AMP-Regularizer",
    "technique": "GitHub API"
  },
  "contact": [
    {
      "confidence": [
        1
      ],
      "excerpt": "hiyouga [AT] buaa [DOT] edu [DOT] cn\n\n",
      "technique": "Header extraction"
    }
  ],
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-09-16T13:28:23Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-25T13:44:26Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Adversarial Model Perturbation (AMP) effectively improves the generalization performance of deep models by minimizing an \"AMP loss\" that can find flat local minima via applying a \"worst\" norm-bounded perturbation on the model parameter.\n\n![method](assets/method.jpg)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.93503408268992
      ],
      "excerpt": "A PyTorch implementation for our CVPR 2021 paper \"Regularizing Neural Networks via Adversarial Model Perturbation\". \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9990702665851572
      ],
      "excerpt": "Effective regularization techniques are highly desired in deep learning for alleviating overfitting and improving generalization. This work proposes a new regularization scheme, based on the understanding that the flat local minima of the empirical risk cause the model to generalize better. This scheme is referred to as adversarial model perturbation (AMP), where instead of directly minimizing the empirical risk, an alternative \"AMP loss\" is minimized via SGD. Specifically, the AMP loss is obtained from the empirical risk by applying the \"worst\" norm-bounded perturbation on each point in the parameter space. Comparing with most existing regularization schemes, AMP has strong theoretical justifications, in that minimizing the AMP loss can be shown theoretically to favour flat local minima of the empirical risk. Extensive experiments on various modern deep architectures establish AMP as a new state of the art among regularization schemes. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8348621760756569
      ],
      "excerpt": "| params (iterable)                | iterable of trainable parameters                             | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9783235481401541,
        0.8220901390777454
      ],
      "excerpt": "| **kwargs                           | keyword arguments passed to the __init__ method of base_optimizer | \nPerforms AMP optimization step. Noting that AMP requires a closure to perform a optimization step. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8851037269479367
      ],
      "excerpt": "| closure (callable, required) | a closure-based function that does a full forward-backward pass on the optimized model | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9172801259724391
      ],
      "excerpt": "models: Description for several model architectures. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Code for our paper \"Regularizing Neural Networks via Adversarial Model Perturbation\", CVPR2021",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "> ",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hiyouga/AMP-Regularizer/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Thu, 30 Dec 2021 06:50:46 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/hiyouga/AMP-Regularizer/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "hiyouga/AMP-Regularizer",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9893272198983933,
        0.954950449355536,
        0.9770335174395833,
        0.9979947896609701
      ],
      "excerpt": "git clone https://github.com/hiyouga/AMP-Regularizer.git \nconda create -n amp python=3.7 \nconda activate amp \npip install -r requirements.txt \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8018351993319549
      ],
      "excerpt": "| base_optimizer (class, optional) | basic optimizer class (default: SGD)                       | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8293869119418764
      ],
      "excerpt": "| Optimizer            | Test error  | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8892720917670781
      ],
      "excerpt": "main.py: Scripts for training the models. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/hiyouga/AMP-Regularizer/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 hiyouga\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "AMP-Regularizer",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "AMP-Regularizer",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "hiyouga",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hiyouga/AMP-Regularizer/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Python >= 3.7\n- Torch >= 1.6.0\n- TorchVision >= 0.7.0\n- NumPy >= 1.18.5\n- Pillow >= 6.1.0\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 26,
      "date": "Thu, 30 Dec 2021 06:50:46 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "machine-learning",
      "neural-network",
      "regularization",
      "deep-learning",
      "deep-learning-algorithms",
      "cvpr",
      "cvpr2021",
      "computer-vision",
      "image-classification",
      "regularizing-neural-networks"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You can use AMP as a regular optimizer with a `closure` function.\n\n```python\nfrom amp import AMP\n\noptimizer = AMP(model.parameters(), lr=0.1, epsilon=0.5, momentum=0.9)\n\nfor inputs, targets in dataset:\n    def closure():\n        optimizer.zero_grad()\n        outputs = model(inputs)\n        loss = loss_fn(outputs, targets)\n        loss.backward()\n        return outputs, loss\n\n    outputs, loss = optimizer.step(closure)\n```\n\nRun an example:\n\n```bash\npython main.py --dataset cifar100 --model preactresnet18 --epsilon 0.5 --inner_lr 1 --inner_iter 1\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}