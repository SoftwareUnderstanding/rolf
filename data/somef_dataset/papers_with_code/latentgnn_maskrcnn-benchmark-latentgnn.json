{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1901.03353",
      "https://arxiv.org/abs/1904.01355"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Please consider citing this project in your publications if it helps your research. The following is a BibTeX reference. The BibTeX entry requires the `url` LaTeX package.\n```\n@misc{massa2018mrcnn,\nauthor = {Massa, Francisco and Girshick, Ross},\ntitle = {{maskrcnn-benchmark: Fast, modular reference implementation of Instance Segmentation and Object Detection algorithms in PyTorch}},\nyear = {2018},\nhowpublished = {\\url{https://github.com/facebookresearch/maskrcnn-benchmark}},\nnote = {Accessed: [Insert date here]}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{massa2018mrcnn,\nauthor = {Massa, Francisco and Girshick, Ross},\ntitle = {{maskrcnn-benchmark: Fast, modular reference implementation of Instance Segmentation and Object Detection algorithms in PyTorch}},\nyear = {2018},\nhowpublished = {\\url{https://github.com/facebookresearch/maskrcnn-benchmark}},\nnote = {Accessed: [Insert date here]}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9878217113125949,
        0.9218387569487573
      ],
      "excerpt": "  Cheng-Yang Fu, Mykhailo Shvets, and Alexander C. Berg. \n  Tech report, arXiv,1901.03353. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeOfConduct": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/CODE_OF_CONDUCT.md",
    "technique": "File Exploration"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/latentgnn/maskrcnn-benchmark-latentgnn",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing to Mask-RCNN Benchmark\nWe want to make contributing to this project as easy and transparent as\npossible.\nOur Development Process\nMinor changes and improvements will be released on an ongoing basis. Larger changes (e.g., changesets implementing a new paper) will be released on a more periodic basis.\nPull Requests\nWe actively welcome your pull requests.\n\nFork the repo and create your branch from master.\nIf you've added code that should be tested, add tests.\nIf you've changed APIs, update the documentation.\nEnsure the test suite passes.\nMake sure your code lints.\nIf you haven't already, complete the Contributor License Agreement (\"CLA\").\n\nContributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\nComplete your CLA here: https://code.facebook.com/cla\nIssues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\nFacebook has a bounty program for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\nCoding Style\n\n4 spaces for indentation rather than tabs\n80 character line length\nPEP8 formatting following Black\n\nLicense\nBy contributing to Mask-RCNN Benchmark, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-09-02T03:57:43Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-07-07T12:37:22Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9962023999602315,
        0.938903613346767,
        0.8276788648824105
      ],
      "excerpt": "This project is built on the top of maskrcnn-benchmark. We introduce the LatentGNN to incorporate the non-local relations in an efficient way. \nAll highlights of the original maskrcnn-benchmark. \nExtendibility: easy to plug other global context modul to verify. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8679584484468544,
        0.8008429079547844
      ],
      "excerpt": "For that, all you need to do is to modify maskrcnn_benchmark/config/paths_catalog.py to \npoint to the location where your dataset is stored. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9290588165016882
      ],
      "excerpt": "Most of the configuration files that we provide assume that we are running on 8 GPUs. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9068075750396347,
        0.9515987478979276,
        0.9150702841864603
      ],
      "excerpt": "This should work out of the box and is very similar to what we should do for multi-GPU training. \nBut the drawback is that it will use much more GPU memory. The reason is that we set in the \nconfiguration files a global batch size that is divided over the number of GPUs. So if we only \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.912799824094703
      ],
      "excerpt": "to out-of-memory errors. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9846648517808161
      ],
      "excerpt": "Here is an example for Mask R-CNN R-50 FPN with the 1x schedule: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9356291442486512
      ],
      "excerpt": "We also changed the batch size during testing, but that is generally not necessary because testing \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8336106900943077
      ],
      "excerpt": "Furthermore, we set MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN 2000 as the proposals are selected for per the batch rather than per image in the default training. The value is calculated by 1000 x images-per-gpu. Here we have 2 images per GPU, therefore we set the number as 1000 x 2 = 2000. If we have 8 images per GPU, the value should be set as 8000. Note that this does not apply if MODEL.RPN.FPN_POST_NMS_PER_BATCH is set to False during training. See #672 for more details. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8521223203177771,
        0.9532121337225697
      ],
      "excerpt": "Note we should set MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN follow the rule in Single-GPU training. \nYou can test your model directly on single or multiple gpus. Here is an example for Mask R-CNN R-50 FPN with the 1x schedule on 8 GPUS: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9828127235304283
      ],
      "excerpt": "For more information on some of the main abstractions in our implementation, see ABSTRACTIONS.md. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8715535020839494,
        0.9613777704908333
      ],
      "excerpt": "free to open a new issue. \nRetinaMask: Learning to predict masks improves state-of-the-art single-shot detection for free.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "maskrcnn with Latent Graph Neural Network, experiments of \"LatentGNN\"(ICML2019)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/latentgnn/maskrcnn-benchmark-latentgnn/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Thu, 30 Dec 2021 03:01:07 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/latentgnn/maskrcnn-benchmark-latentgnn/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "latentgnn/maskrcnn-benchmark-latentgnn",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/docker/Dockerfile",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/docker/docker-jupyter/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/demo/Mask_R-CNN_demo.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-50/e2e_mask_rcnn_R_50_FPN_A4_1x_kernel1_exp3.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-50/e2e_mask_rcnn_R_50_FPN_A4_1x_kernel1_exp4.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-50/e2e_mask_rcnn_R_50_FPN_A345_1x_kernel1_latentoriginal_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-50/e2e_mask_rcnn_R_50_FPN_A3_1x_kernel1_exp2.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-50/e2e_mask_rcnn_R_50_FPN_A4_1x_kernel1_exp2.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-50/e2e_mask_rcnn_R_50_FPN_A4_1x_kernel1_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-50/e2e_mask_rcnn_R_50_FPN_A345_1x_kernel1_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-50/e2e_mask_rcnn_R_50_FPN_A3_1x_kernel1_latentoriginal_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-50/e2e_mask_rcnn_R_50_FPN_A5_1x_kernel1_latentoriginal_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-50/e2e_mask_rcnn_R_50_FPN_A3_1x_kernel1_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-50/e2e_mask_rcnn_R_50_FPN_A5_1x_kernel1_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-50/e2e_mask_rcnn_R_50_FPN_A4_1x_kernel1_latentoriginal_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-101/e2e_mask_rcnn_R_101_FPN_A345_1x_kernel1_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-101/e2e_mask_rcnn_R_101_FPN_A5_1x_kernel1_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-101/e2e_mask_rcnn_R_101_FPN_A345_1x_kernel1_exp2.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-101/e2e_mask_rcnn_R_101_FPN_A345_1x_kernel1_exp3.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-101/e2e_mask_rcnn_R_101_FPN_A4_1x_kernel1_exp2.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-101/e2e_mask_rcnn_R_101_FPN_A4_1x_kernel1_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-101/e2e_mask_rcnn_R_101_FPN_A345_1x_kernel1_exp4.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-101/e2e_mask_rcnn_R_101_FPN_A345_1x_kernel1_latentoriginal_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/latentgnn/resnet-101/e2e_mask_rcnn_R_101_FPN_A3_1x_kernel1_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/baseline/e2e_mask_rcnn_R_50_FPN_1x.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/grouplatentgnn/resnet-50/e2e_mask_rcnn_R_50_FPN_A4_1x_kernel1_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/grouplatentgnn/resnet-50/e2e_mask_rcnn_R_50_FPN_A345_1x_kernel1_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/grouplatentgnn/resnet-50/e2e_mask_rcnn_R_50_FPN_A4_1x_kernel1_exp2_kaiming_init.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/grouplatentgnn/resnet-50/e2e_mask_rcnn_R_50_FPN_A3_1x_kernel1_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/grouplatentgnn/resnet-50/e2e_mask_rcnn_R_50_FPN_A5_1x_kernel1_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/grouplatentgnn/resnet-101/e2e_mask_rcnn_R_101_FPN_A345_1x_kernel1_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/grouplatentgnn/resnet-101/e2e_mask_rcnn_R_101_FPN_A5_1x_kernel1_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/grouplatentgnn/resnet-101/e2e_mask_rcnn_R_101_FPN_A4_1x_kernel1_exp1.sh",
      "https://raw.githubusercontent.com/latentgnn/maskrcnn-benchmark-latentgnn/latentgnn/scripts/grouplatentgnn/resnet-101/e2e_mask_rcnn_R_101_FPN_A3_1x_kernel1_exp1.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Check [INSTALL.md](INSTALL.md) for installation instructions.\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9241342904531881,
        0.957524036534409,
        0.8385218634777329
      ],
      "excerpt": "For the following examples to work, you need to first install maskrcnn_benchmark. \nYou will also need to download the COCO dataset. \nWe recommend to symlink the path to the coco dataset to datasets/ as follows \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8453586014693425,
        0.8957597120131504,
        0.9134125685853338
      ],
      "excerpt": ": symlink the coco dataset \ncd ~/github/maskrcnn-benchmark \nmkdir -p datasets/coco \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9253569476729215
      ],
      "excerpt": ": or use COCO 2017 version \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8569965685513768
      ],
      "excerpt": "You can also configure your own paths to the datasets. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8684410238522189
      ],
      "excerpt": "1. Run the following without modifications \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.806186973744316
      ],
      "excerpt": "But the drawback is that it will use much more GPU memory. The reason is that we set in the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8106025703118147
      ],
      "excerpt": "have a single GPU, this means that the batch size for that GPU will be 8x larger, which might lead \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8988821909411175
      ],
      "excerpt": "python /path_to_maskrcnn_benchmark/tools/train_net.py --config-file \"/path/to/config/file.yaml\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421525492577872
      ],
      "excerpt": "python -m torch.distributed.launch --nproc_per_node=$NGPUS /path_to_maskrcnn_benchmark/tools/train_net.py --config-file \"path/to/config/file.yaml\" MODEL.RPN.FPN_POST_NMS_TOP_N_TRAIN images_per_gpu x 1000 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8779394646675144
      ],
      "excerpt": "python -m torch.distributed.launch --nproc_per_node=$NGPUS /path_to_maskrcnn_benchmark/tools/test_net.py --config-file \"configs/e2e_mask_rcnn_R_50_FPN_1x.yaml\" TEST.IMS_PER_BATCH 16 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8155539106212164
      ],
      "excerpt": "Create a script tools/trim_detectron_model.py like here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8061238353465737
      ],
      "excerpt": "Then you can simply point the converted model path in the config file by changing MODEL.WEIGHT. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/latentgnn/maskrcnn-benchmark-latentgnn/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Cuda",
      "Shell",
      "C++",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 Facebook\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Mask R-CNN meets LatentGNN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "maskrcnn-benchmark-latentgnn",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "latentgnn",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/latentgnn/maskrcnn-benchmark-latentgnn/blob/latentgnn/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 11,
      "date": "Thu, 30 Dec 2021 03:01:07 GMT"
    },
    "technique": "GitHub API"
  }
}