{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1704.08545",
      "https://arxiv.org/abs/1612.01105\n",
      "https://arxiv.org/abs/1608.08710\n"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8090016440670298
      ],
      "excerpt": "Oles Andrienko, github: oandrienko \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/mattangus/fast-semantic-segmentation",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-09-27T17:02:29Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-06-05T16:07:55Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9767164770731941
      ],
      "excerpt": "Perform pixel-wise semantic segmentation on high-resolution images in real-time with Image Cascade Network (ICNet), the highly optimized version of the state-of-the-art Pyramid Scene Parsing Network (PSPNet). This project implements ICNet and PSPNet50 in Tensorflow trained on Cityscapes. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9023546715078526
      ],
      "excerpt": "Deploy ICNet and preform inference at over 30fps on Titan X. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9899385494399556
      ],
      "excerpt": "This implementation is based off of the original ICNet paper proposed by Hengshuang Zhao titled ICNet for Real-Time Semantic Segmentation on High-Resolution Images. Some ideas were also taken from their previous PSPNet paper, Pyramid Scene Parsing Network. The Network Compression implemented is based on the paper Pruning Filters for Efficient ConvNets. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9253585740271467,
        0.8967164409599442
      ],
      "excerpt": "The baseline PSPNet50 pre-trained model files have been released publically in the Model Zoo. The accuracy of the model surpases that referenced in the ICNet paper. \nInitial release. Project includes scripts for training ICNet, evaluating ICNet and compressing ICNet from ResNet50 weights. Also includes scripts for training PSPNet and evaluating PSPNet as a baseline. Working on achieving the author's reported accuracy. Will update with links to pre-trained cityscapes checkpoints once the accuracy is matched. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9663747285617093
      ],
      "excerpt": "This project has implemented the ICNet training process, allowing you to train your own model directly from ResNet50 weights as is done in the original work. Other implementations available simply convert the Caffe model to Tensorflow, only allowing for fine-tuning from weights trained on Cityscapes. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9869396980608371,
        0.9551318423919987,
        0.8288362592951017
      ],
      "excerpt": "In order to achieve real-time speeds, ICNet uses a form of network compression called filter pruning. This drastically reduces the complexity of the model by removing filters from convolutional layers in the network. This project has also implemented this ICNet compression process directly in Tensorflow. \nThe compression is working, however which \"compression scheme\" to use is still somewhat ambiguous when reading the original ICNet paper. This is still a work in progress. Read more about compression <a href='docs/compression.md'>here</a>. \nIn order to also reproduce the baselines used in the original ICNet paper, you will also find implementations and pre-trained models for PSPNet50. Since ICNet can be thought of as a modified PSPNet, it can be useful for comparison purposes. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9837879306149805
      ],
      "excerpt": "This project and it's documentation was highly based on the Tensorflow Object Detection API. It was the initial inspiration for this project. The third_party directory of this project contains files from OpenAI's Gradient Checkpointing project by Tim Salimans and Yaroslav Bulatov. The helper modules found in third_party/model_deploy.py are from the Tensorflow Slim project. Finally, I used another open source ICNet implementation which converts the original ICNet weights as a reference implementation. Find all these projects below: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Forked from https://github.com/oandrienko/fast-semantic-segmentation",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "  * <a href='docs/installation.md'>Installation: Getting the project running on your machine</a><br>\n  * <a href=\"docs/datasets.md\">Datasets: Setting up a TFRecord file for training and evaluation</a><br>\n  * <a href=\"docs/configs.md\">Configs and Fine-tune Training: Setting up your own configuration files for training and evaluation</a><br>\n  * <a href=\"docs/pspnet.md\">PSPNet50: Training a PSPNet50 Walkthrough</a><br>\n  * <a href=\"docs/model_zoo.md\">Model Zoo: Some information about the models in this project and links to checkpoints</a><br>\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/mattangus/fast-semantic-segmentation/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 05:10:06 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/mattangus/fast-semantic-segmentation/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "mattangus/fast-semantic-segmentation",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/mattangus/fast-semantic-segmentation/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/mattangus/fast-semantic-segmentation/master/keeprunning.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This project uses Tensorflow. Make sure you have the latest version (at least v1.8), then clone the project and compile the protobuf files\n\n```\ngit clone https://github.com/oandrienko/fast-semantic-segmentation\ncd fast-semantic-segmentation\nmake build-protos\n```\n\nNext, you will need to <a href=\"docs/datasets.md\">format your dataset</a> into a TFRecord file and <a href=\"docs/configs.md\">modify the sample configs</a> provided in the project.\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8575687454224082
      ],
      "excerpt": "<img src = 'docs/imgs/cityscapes_seq.gif' width = '720px'> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9044073306805348
      ],
      "excerpt": "<img src = 'docs/imgs/icnet_tensorboard.jpg' width='180x'> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9299101244618266,
        0.9503189345333785
      ],
      "excerpt": "Example usage for training ICNet: \npython train.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8195639696257492
      ],
      "excerpt": "    --logdir path/to/train/dir  \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8514616705222126,
        0.8943096850060217,
        0.8131023455653992
      ],
      "excerpt": "Example usage for evaluation with ICNet: \npython eval.py \\ \n    --train_dir path/to/train/dir \\ \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/mattangus/fast-semantic-segmentation/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Makefile",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Real-Time Semantic Segmentation in [TensorFlow](https://github.com/tensorflow/tensorflow)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "fast-semantic-segmentation",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "mattangus",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/mattangus/fast-semantic-segmentation/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Mon, 27 Dec 2021 05:10:06 GMT"
    },
    "technique": "GitHub API"
  }
}