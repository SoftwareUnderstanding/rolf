{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1705.05598\n```\n\nIf you use this code please cite the following paper:\n```\nTODO: Add link to SW paper.\n```\n\n\n## Installation\n\nTo install the code, please clone the repository and run the setup script:\n\n```bash\ngit clone https://github.com/pikinder/nn-patterns.git\ncd nn-patterns\npython setup.py install\n```\n\n## Usage and Examples\n\n#### Explaining\n\nAll the presented methods have in common that they try to explain the output of a specific neuron with respect to input to the neural network.\nTypically one explains the neuron with the largest activation in the output layer.\nNow given the output layer 'output_layer' of a Lasagne network, one can create an explainer by:\n\n```python\nimport nn_patterns\n\noutput_layer = create_a_lasagne_network(",
      "https://arxiv.org/abs/1311.2901",
      "https://arxiv.org/abs/1412.6806",
      "https://arxiv.org/abs/1705.05598",
      "https://arxiv.org/abs/1705.05598"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9565696357172301
      ],
      "excerpt": "pattern = load_pattern() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8745172056583282,
        0.9925046010989326,
        0.8894750347818047
      ],
      "excerpt": "import nn_patterns.pattern \ncomputer = nn_patterns.pattern.CombinedPatternComputer(output_layer) \npatterns = computer.compute_patterns(X, batch_size=batch_size) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/pikinder/nn-patterns",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-05-23T09:18:54Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-07-08T09:16:37Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "PatternNet and PatternLRP are methods that help to interpret decision of non-linear neural networks.\nThey are in a line with the methods DeConvNet, GuidedBackprop and LRP:\n\n![An overview of the different explanation methods.](https://raw.githubusercontent.com/pikinder/nn-patterns/master/images/fig2.png)\n\nand improve on them:\n\n![Different explanation methods on ImageNet.](https://raw.githubusercontent.com/pikinder/nn-patterns/master/images/fig5.png)\n\nFor more details we refer to the paper:\n\n```\nPatternNet and PatternLRP -- Improving the interpretability of neural networks\nPieter-Jan Kindermans, Kristof T. Sch\u00fctt, Maximilian Alber, Klaus-Robert M\u00fcller, Sven D\u00e4hne\nhttps://arxiv.org/abs/1705.05598\n```\n\nIf you use this code please cite the following paper:\n```\nTODO: Add link to SW paper.\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9875587189582578
      ],
      "excerpt": "All the presented methods have in common that they try to explain the output of a specific neuron with respect to input to the neural network. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9411426860377213
      ],
      "excerpt": "and explain the influence of the neural networks input on the output neuron by: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8992895203831661
      ],
      "excerpt": "gradient: The gradient of the output neuron with respect to the input. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9466972758739773,
        0.8265169300110625,
        0.8973926515825525
      ],
      "excerpt": "The pattern parameter is only necessary for PatternNet and PatternLRP. \nThe available options to select the target neuron are: \n\"max_output\" (default): the neuron with the largest activation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9664346214377675,
        0.96077029525115
      ],
      "excerpt": "None: take the activation of the last layer as they are. This results in a superposition of explanations. \nThe methods PatternNet and PatternLRP are based on so called patterns that are network and data specific and need to be computed. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "TODO ;)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/pikinder/nn-patterns/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Thu, 23 Dec 2021 20:37:31 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/pikinder/nn-patterns/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "pikinder/nn-patterns",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/pikinder/nn-patterns/master/examples/all_methods.ipynb",
      "https://raw.githubusercontent.com/pikinder/nn-patterns/master/examples/step_by_step_imagenet.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To install the code, please clone the repository and run the setup script:\n\n```bash\ngit clone https://github.com/pikinder/nn-patterns.git\ncd nn-patterns\npython setup.py install\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9133368656218674
      ],
      "excerpt": "import nn_patterns \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/pikinder/nn-patterns/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2017 Pieter-Jan Kindermans, Maximilian Alber\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "*************************************",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "nn-patterns",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "pikinder",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/pikinder/nn-patterns/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 13,
      "date": "Thu, 23 Dec 2021 20:37:31 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "In the directory [examples](https://github.com/pikinder/nn-patterns/blob/master/examples/) one can find different examples as Python scripts and as Jupyter notebooks:\n\n* **[step_by_step_cifar10]():** explains how to compute patterns for a given neural networks and how to use them with PatternNet and PatternLRP.\n* **[step_by_step_imagenet](https://github.com/pikinder/nn-patterns/blob/master/examples/step_by_step_imagenet.ipynb):** explains how to apply pre-computed patterns for the VGG16 network on ImageNet.\n* **[all_methods](https://github.com/pikinder/nn-patterns/blob/master/examples/all_methods.ipynb):** shows how to use the different methods with VGG16 on ImageNet, i.e. the reproduce the explanation grid above.\n",
      "technique": "Header extraction"
    }
  ]
}