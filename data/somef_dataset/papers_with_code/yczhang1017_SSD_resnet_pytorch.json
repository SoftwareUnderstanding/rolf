{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1409.1556"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Wei Liu, et al. \"SSD: Single Shot MultiBox Detector.\" [ECCV2016]((http://arxiv.org/abs/1512.02325)).\n- SSD model in PyTorch by [Max DeGroot](https://github.com/amdegroot/ssd.pytorch/)\n- [Original Implementation (CAFFE)](https://github.com/weiliu89/caffe/tree/ssd)\n- A huge thank you to [Alex Koltun](https://github.com/alexkoltun) and his team at [Webyclip](webyclip.com) for their help in finishing the data augmentation portion.\n- A list of other great SSD ports that were sources of inspiration (especially the Chainer repo):\n  * [Chainer](https://github.com/Hakuyume/chainer-ssd), [Keras](https://github.com/rykov8/ssd_keras), [MXNet](https://github.com/zhreshold/mxnet-ssd), [Tensorflow](https://github.com/balancap/SSD-Tensorflow)\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9443299173850146
      ],
      "excerpt": "PASCAL VOC: Visual Object Classes \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yczhang1017/SSD_resnet_pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-10-31T22:10:42Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-03T11:45:42Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This is the SSD model based on project by [Max DeGroot](https://github.com/amdegroot/ssd.pytorch/). I corrected some bugs in the code and successfully run the code on GPUs at Google Cloud.  \n\n[SSD (Single Shot MultiBox Object Detector)](https://arxiv.org/pdf/1512.02325.pdf) is able to detect objects in an image with bounding boxes. The method is faster than [faster-RCNN](http://papers.nips.cc/paper/5638-faster-r-cnn-towards-real-time-object-detection-with-region-proposal-networks.pdf) and [mask-RCNN](https://arxiv.org/pdf/1703.06870.pdf%20http://arxiv.org/abs/1703.06870.pdf) and still yield a good accuracy.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.879404401835238
      ],
      "excerpt": "<a href='#introduction'>Introduction</a> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8110779730412633
      ],
      "excerpt": "To make things easy, we provide bash scripts to handle the dataset downloads and setup for you.  We also provide simple dataset loaders that inherit torch.utils.data.Dataset, making them fully compatible with the torchvision.datasets API. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.912673085938244
      ],
      "excerpt": ":adjust the keys in the weights file to fit for current model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9880641293249818
      ],
      "excerpt": "Currently, we got mAP 86% for VGG16 and %67 for resNet50. \n",
      "technique": "Supervised classification"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```Shell\ngit clone https://github.com/yczhang1017/SSD_resnet_pytorch.git\n#: navigate to the home directory of SSD model, dataset will be downloaded into data folder\ncd SSD_resnet_pytorch\n#: specify a directory for dataset to be downloaded into, else default is ~/data/\nsh data/scripts/VOC2007.sh #: <directory>\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```Shell\n#: specify a directory for dataset to be downloaded into, else default is ~/data/\nsh data/scripts/VOC2012.sh #: <directory>\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```Shell\n#: specify a directory for dataset to be downloaded into, else default is ~/data/\nsh data/scripts/COCO2014.sh\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "- We are trying to provide PyTorch `state_dicts` (dict of weight tensors) of the latest SSD model definitions trained on different datasets.  \n- Currently, we provide the following PyTorch models:\n    * SSD300 trained on VOC0712 (newest PyTorch weights)\n      - https://s3.amazonaws.com/amdegroot-models/ssd300_mAP_77.43_v2.pth\n    * SSD300 trained on VOC0712 (original Caffe weights)\n      - https://s3.amazonaws.com/amdegroot-models/ssd_300_VOC0712.pth\n```Shell      \ncd weights\nwget https://s3.amazonaws.com/amdegroot-models/ssd300_mAP_77.43_v2.pth\n#:adjust the keys in the weights file to fit for current model\npython3 ssdweights.py      \n```\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yczhang1017/SSD_resnet_pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 10,
      "date": "Sun, 26 Dec 2021 21:31:08 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yczhang1017/SSD_resnet_pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "yczhang1017/SSD_resnet_pytorch",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/yczhang1017/SSD_resnet_pytorch/master/demo/demo.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/yczhang1017/SSD_resnet_pytorch/master/data/scripts/VOC2007.sh",
      "https://raw.githubusercontent.com/yczhang1017/SSD_resnet_pytorch/master/data/scripts/VOC2012.sh",
      "https://raw.githubusercontent.com/yczhang1017/SSD_resnet_pytorch/master/data/scripts/COCO2014.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Install [PyTorch](http://pytorch.org/) by selecting your environment on the website and running the appropriate command.\n- Clone this repository.\n  * Note: We currently only support Python 3+.\n- Then download the dataset by following the [instructions](#datasets) below.\n- We support [Visdom](https://github.com/facebookresearch/visdom) for real-time loss visualization during training!\n  * To use Visdom in the browser:\n  ```Shell\n  #: First install Python server and client\n  pip install visdom\n  #: Start the server (probably in a screen or tmux)\n  python -m visdom.server\n  ```\n  * Then (during training) navigate to http://localhost:8097/ (see the Train section below for training details).\n- Note: For training, we currently support [VOC](http://host.robots.ox.ac.uk/pascal/VOC/), and aim to add and [COCO](http://mscoco.org/) [ImageNet](http://www.image-net.org/) support in the future.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9287467277036058
      ],
      "excerpt": "<a href='#installation'>Installation</a> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8835572673635612
      ],
      "excerpt": "First download the fc-reduced VGG-16 PyTorch base network weights at:              https://s3.amazonaws.com/amdegroot-models/vgg16_reducedfc.pth \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "cd weights \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "cd .. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8244453191770256
      ],
      "excerpt": "- Note: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9016819624549484
      ],
      "excerpt": "  * For instructions on Visdom usage/installation, see the &lt;a href='#installation'&gt;Installation&lt;/a&gt; section. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8589534893990137,
        0.8633989807152664
      ],
      "excerpt": "<a href='#train'>Train</a> \n<a href='#test'>Test</a> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": "python3 vggweights.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8635353640105476
      ],
      "excerpt": "To train SSD using the train script simply specify the parameters listed in train.py as a flag or manually change them. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.950563948951535
      ],
      "excerpt": "python3 train.py  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9445512438315111
      ],
      "excerpt": "python3 train.py --model 'resnet' --basenet 'resnet50.pth'  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9056410431572448
      ],
      "excerpt": "nohup python3 -u train.py --model 'resnet' --basenet 'resnet50.pth' > r1.log </dev/null 2>&1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8885710678082143
      ],
      "excerpt": "  * You can pick-up training from a checkpoint by specifying the path as one of the training parameters (again, seetrain.py` for options) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9521174821235511
      ],
      "excerpt": "python3 test.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.926401401692365
      ],
      "excerpt": "python3 test.py --model 'resnet' --trained_model 'weights/ssd300_resnet.pth' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9289045461705631
      ],
      "excerpt": "python3 demo.py \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yczhang1017/SSD_resnet_pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2017 Max deGroot, Ellis Brown\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "SSD: Single Shot MultiBox Object Detector, in PyTorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "SSD_resnet_pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "yczhang1017",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yczhang1017/SSD_resnet_pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 45,
      "date": "Sun, 26 Dec 2021 21:31:08 GMT"
    },
    "technique": "GitHub API"
  }
}