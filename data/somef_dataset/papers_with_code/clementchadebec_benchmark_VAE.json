{
  "citation": [
    {
      "confidence": [
        0.8955886365383559,
        0.8955886365383559,
        0.8955886365383559,
        0.8955886365383559,
        0.8444342525991423
      ],
      "excerpt": "| Importance Weighted Autoencoder (IWAE) |  | link  | link                                                                            | \n| Wasserstein Autoencoder (WAE)      |  | link | link                                  | \n| Info Variational Autoencoder (INFOVAE_MMD)      |  | link |                                   | \n| VAMP Autoencoder (VAMP)            |  | link | link                         | \n| Hamiltonian VAE (HVAE)             |  | link | link                       | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8955886365383559
      ],
      "excerpt": "| VAMP prior sampler (VAMPSampler)                   |    VAMP            | link      | link | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "... latent_dim=10 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "... batch_size=10, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "... latent_dim=10 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/clementchadebec/benchmark_VAE",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Welcome to the contributing guidelines !\nWant to contribute to pythae library ? That is cool! Thank you! :smile:\nContributing guidelines\nIf you want to contribute to this repo, please consider following this checklist\n1) Fork this repo\n2) Clone it on your local drive and install the library in editable mode\nbash\n$ git clone git@github.com:your_github_name/benchmark_VAE.git\n$ cd benchmark_VAE\n$ pip install -e .\n3) Create a branch with an explicit name of your contribution\nbash\n$ git checkout -b my_branch_with_contribution\n4) Make sure you add the appropriate tests to test your feature. If the library test coverage reduces\nsignificantly, the contribution will raise some red flags.\n5) Ensure that your contribution passes the existing test suite by running\nbash\npytest tests/ \n- Polish your contribution using black and isort\n\nFinally, open a pull request directly on your Github ! :rocket: \n\nImplementing a new model\nIf you want to add a new model please make sure that you followed the following checklist:\n- [ ] Create a folder named your_model_name in pythae/models and containg a file with the model implementation entitled your_model_name_model.py and a file with the model configuration named your_model_name_config.py.\n- [ ] The your_model_name_model.py file contains a class with the name of your model inheriting from either \n    AE or VAE classes depending on the model architecture. \n- [ ] The your_model_name_config.py files contains a dataclass inheriting from either AEConfig or VAEConfig. See for instance pythae/models/rae_l2 folder for a AE-based models and pythae/models/rhvae folder for a VAE-based models\n- [ ] The model must have a forward method in which the loss is computed and returning a ModelOutput instance with the loss being stored under theloss key.\n- [ ] You also implemented the classmethods load_from_folder and _load_model_config_from_folder allowing to reload the model from a folder. See pythae/models/rae_l2 for instance.\n- [ ] Make your tests in the tests folder. See for instance pythae/tests/test_rae_l2_tests.py. You will see that the tests for the models look the same and cover them quite well. Hence, you can reuse this test suite as an inspiration to test your model.\nImplementing a new sampler\nIf you want to add a new sampler please make sure that you followed the following checklist:\n- [ ] Create a folder named your_sampler_name in pythae/samplers and containg a file with the sampler implementation entitled your_sampler_name_sampler.py and a file with the sampler configuration (if needed) named your_sampler_name_config.py. See pythae/samplers/gaussian_mixture for instance.\n- [ ] The your_sampler_name_sampler.py files contains a class with the name of yoyr sampler inheriting from BaseSampler.\n- [ ] The your_sampler_name_config.py files contains a dataclass inheriting from BaseSamplerConfig. See pythae/samplers/gaussian_mixture/gaussian_mixture_config.py.\n- [ ] The sampler must have a sample method able to save the generated images in a folder and return them if desired.\n- [ ] If the sampler needs to be fitted, a fit merhod can be implemented. See pythae/samplers/gaussian_mixture/gaussian_mixture_samplers.py for example.\n- [ ] Make your tests in the tests folder. See for instance pythae/tests/test_gaussian_mixture_sampler.py. You will see that the tests for the samplers look the same, you can reuse this test suite as an inspiration to test your sampler.\nAny doubts ?\nIn any case if you have any question, do not hesitate to reach out to me directly, I will be happy to help! :smile:",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-02T16:26:24Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-18T13:47:37Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.919779332314943
      ],
      "excerpt": "This library implements some of the most common (Variational) Autoencoder models. In particular it  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9409374313706583,
        0.9860599896180334
      ],
      "excerpt": "allows you to train any of these models with your own data and own Encoder and Decoder neural networks. \nBelow is the list of the models currently implemented in the library. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9559841096191736,
        0.9860599896180334,
        0.8549548194072721
      ],
      "excerpt": "See results for all aforementionned models \nBelow is the list of the models currently implemented in the library. \n|                Samplers               |   Models            | Paper                                             | Official Implementation                   | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8119473266644903,
        0.8119473266644903
      ],
      "excerpt": "| Normal prior (NormalSampler)                         | all models       | link       | \n| Gaussian mixture (GaussianMixtureSampler) | all models          | link      | link | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8092583792488302
      ],
      "excerpt": "| Two stage VAE sampler (TwoStageVAESampler)                    | all VAE based models| link  | link |) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8478136055887731
      ],
      "excerpt": ": Set up the model configuration \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "...     model=my_vae_model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9072065327242744
      ],
      "excerpt": "At the end of training, the best model weights, model configuration and training configuration are stored in a final_model folder available in  my_model/MODEL_NAME_training_YYYY-MM-DD_hh-mm-ss (with my_model being the output_dir argument of the BaseTrainingConfig). If you further set the steps_saving argument to a certain value, folders named checkpoint_epoch_k containing the best model weights, optimizer, scheduler, configuration and training configuration at epoch k will also appear in my_model/MODEL_NAME_training_YYYY-MM-DD_hh-mm-ss. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8678747380096068
      ],
      "excerpt": "See README.md for further details on this script \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "... model=my_trained_vae \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9898980472362281
      ],
      "excerpt": "The samplers can be used with any model as long as it is suited. For instance, aGMMSamplerinstance can be used to generate from any model but aVAMPSamplerwill only be usable with aVAMP` model. Check here to see which ones apply to your model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8478136055887731
      ],
      "excerpt": ": Set up the model configuration \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8240440732482468,
        0.8240440732482468
      ],
      "excerpt": "... encoder=my_encoder, #: pass your encoder as argument when building the model \n... decoder=my_decoder #: pass your decoder as argument when building the model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8821182694327518,
        0.9266126343148107
      ],
      "excerpt": "important note 1: For all AE-based models (AE, WAE, RAE_L2, RAE_GP), both the encoder and decoder must return a ModelOutput instance. For the encoder, the ModelOuput instance must contain the embbeddings under the key embedding. For the decoder, the ModelOuput instance must contain the reconstructions under the key reconstruction. \nimportant note 2: For all VAE-based models (VAE, Beta_VAE, IWAE, HVAE, VAMP, RHVAE), both the encoder and decoder must return a ModelOutput instance. For the encoder, the ModelOuput instance must contain the embbeddings and log-covariance matrices (of shape batch_size x latent_space_dim) respectively under the key embedding and log_covariance key. For the decoder, the ModelOuput instance must contain the reconstructions under the key reconstruction. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9499172988365328,
        0.9861882244941917
      ],
      "excerpt": "... Encoder_AE_MNIST, #: For AE based model (only return embeddings) \n...     Encoder_VAE_MNIST, #: For VAE based model (return embeddings and log_covariances) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9394392674621516,
        0.903122160764486,
        0.8226512866035045
      ],
      "excerpt": "Replace mnist by cifar or celeba to access to other neural nets. \nIf you are experiencing any issues while running the code or request new features/models to be implemented please open an issue on github. \nYou want to contribute to this library by adding a model, a sampler or simply fix a bug ? That's awesome! Thank you! Please see CONTRIBUTING.md to follow the main contributing guidelines. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Library for Variational Autoencoder benchmarking",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://pythae.readthedocs.io/",
      "technique": "Regular expression"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/clementchadebec/benchmark_VAE/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Wed, 29 Dec 2021 18:48:14 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/clementchadebec/benchmark_VAE/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "clementchadebec/benchmark_VAE",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/clementchadebec/benchmark_VAE/tree/main/docs"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/clementchadebec/benchmark_VAE/main/examples/notebooks/making_your_own_autoencoder.ipynb",
      "https://raw.githubusercontent.com/clementchadebec/benchmark_VAE/main/examples/notebooks/models_training/ae_training.ipynb",
      "https://raw.githubusercontent.com/clementchadebec/benchmark_VAE/main/examples/notebooks/models_training/rhvae_training.ipynb",
      "https://raw.githubusercontent.com/clementchadebec/benchmark_VAE/main/examples/notebooks/models_training/wae_training.ipynb",
      "https://raw.githubusercontent.com/clementchadebec/benchmark_VAE/main/examples/notebooks/models_training/vamp_training.ipynb",
      "https://raw.githubusercontent.com/clementchadebec/benchmark_VAE/main/examples/notebooks/models_training/iwae_training.ipynb",
      "https://raw.githubusercontent.com/clementchadebec/benchmark_VAE/main/examples/notebooks/models_training/beta_vae_training.ipynb",
      "https://raw.githubusercontent.com/clementchadebec/benchmark_VAE/main/examples/notebooks/models_training/rae_gp_training.ipynb",
      "https://raw.githubusercontent.com/clementchadebec/benchmark_VAE/main/examples/notebooks/models_training/hvae_training.ipynb",
      "https://raw.githubusercontent.com/clementchadebec/benchmark_VAE/main/examples/notebooks/models_training/info_vae_training.ipynb",
      "https://raw.githubusercontent.com/clementchadebec/benchmark_VAE/main/examples/notebooks/models_training/vae_training.ipynb",
      "https://raw.githubusercontent.com/clementchadebec/benchmark_VAE/main/examples/notebooks/models_training/rae_l2_training.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/clementchadebec/benchmark_VAE/main/examples/scripts/models_to_train.sh",
      "https://raw.githubusercontent.com/clementchadebec/benchmark_VAE/main/examples/scripts/experiments_launcher.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To install the latest version of this library run the following using ``pip``\n\n```bash\n$ pip install git+https://github.com/clementchadebec/benchmark_VAE.git\n``` \n\nor alternatively you can clone the github repo to access to tests, tutorials and scripts.\n```bash\n$ git clone https://github.com/clementchadebec/benchmark_VAE.git\n```\nand install the library\n```bash\n$ cd benchmark_VAE\n$ pip install -e .\n``` \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9139146246791434
      ],
      "excerpt": ": Build the Pipeline \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8630138051648465
      ],
      "excerpt": "We also provide a training script example here that can be used to train the models on benchmarks datasets (mnist, cifar10, celeba ...). The script can be launched with the following commandline \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8319150701702558
      ],
      "excerpt": "Pythae provides you the possibility to define your own neural networks within the VAE models. For instance, say you want to train a Wassertstein AE with a specific encoder and decoder, you can do the following: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8900486270063179,
        0.8801854956928516
      ],
      "excerpt": "from pythae.models import VAE, VAEConfig \nfrom pythae.trainers import BaseTrainingConfig \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8169857908868187,
        0.8169857908868187
      ],
      "excerpt": "... train_data=your_train_data, #: must be torch.Tensor or np.array  \n... eval_data=your_eval_data #: must be torch.Tensor or np.array \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8914961963597592
      ],
      "excerpt": "python training.py --dataset mnist --model_name ae --model_config 'configs/ae_config.json' --training_config 'configs/base_training_config.json' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8900486270063179,
        0.8801854956928516
      ],
      "excerpt": "from pythae.models import VAE \nfrom pythae.samplers import NormalSampler \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8003751159116907
      ],
      "excerpt": "gen_data = normal_samper.sample( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "... return_gen=True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8900486270063179,
        0.8109566186011179
      ],
      "excerpt": "from pythae.models.nn import BaseEncoder, BaseDecoder \nfrom pythae.models.base.base_utils import ModelOuput \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8289669050403863
      ],
      "excerpt": "...     output = ModelOuput( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8113404775112109
      ],
      "excerpt": "...     return output \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8289669050403863
      ],
      "excerpt": "...     output = ModelOuput( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8113404775112109
      ],
      "excerpt": "...     return output \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8900486270063179
      ],
      "excerpt": "from pythae.models import WAE_MMD, WAE_MMD_Config \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8377561343526314
      ],
      "excerpt": "for pythae.models.nn.benchmark.mnist import ( \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/clementchadebec/benchmark_VAE/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "pythae",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "benchmark_VAE",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "clementchadebec",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/clementchadebec/benchmark_VAE/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 7,
      "date": "Wed, 29 Dec 2021 18:48:14 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "benchmarking",
      "vae",
      "variational-autoencoder",
      "pytorch",
      "reproducible-research",
      "reproducibility",
      "deep-learning",
      "machine-learning",
      "research",
      "python",
      "comparison",
      "autoencoder"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To help you to understand the way pythae works and how you can train your models with this library we also\nprovide tutorials:\n\n- [making_your_own_autoencoder.ipynb](https://github.com/clementchadebec/benchmark_VAE/tree/main/examples/notebooks) shows you how to pass your own networks to the models implemented in pythae [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/clementchadebec/benchmark_VAE/blob/main/examples/notebooks/making_your_own_autoencoder.ipynb)\n\n- [models_training](https://github.com/clementchadebec/benchmark_VAE/tree/main/examples/notebooks/models_training) folder provides notebooks showing how to train each implemented model and how to sample from it using `pyhtae.samplers`.\n\n- [scripts](https://github.com/clementchadebec/benchmark_VAE/tree/main/examples/scripts) folder provides in particular an example of a training script to train the models on benchmark data sets (mnist, cifar10, celeba ...)\n\n",
      "technique": "Header extraction"
    }
  ]
}