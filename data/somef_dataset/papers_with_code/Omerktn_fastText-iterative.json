{
  "citation": [
    {
      "confidence": [
        0.9597772511158852
      ],
      "excerpt": "  <k>          (optional; 10 by default) consider score if analogy in top k labels \n",
      "technique": "Supervised classification"
    }
  ],
  "codeOfConduct": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/CODE_OF_CONDUCT.md",
    "technique": "File Exploration"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Omerktn/fastText-iterative",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing to fastText\nWe want to make contributing to this project as easy and transparent as possible.\nIssues\nWe use GitHub issues to track public bugs. Please ensure your description is clear and has sufficient instructions to be able to reproduce the issue.\nReproducing issues\nPlease make sure that the issue you mention is not a result of one of the existing third-party libraries. For example, please do not post an issue if you encountered an error within a third-party Python library. We can only help you with errors which can be directly reproduced either with our C++ code or the corresponding Python bindings. If you do find an error, please post detailed steps to reproduce it. If we can't reproduce your error, we can't help you fix it.\nPull Requests\nPlease post an Issue before submitting a pull request. This might save you some time as it is possible we can't support your contribution, albeit we try our best to accomodate your (planned) work and highly appreciate your time. Generally, it is best to have a pull request emerge from an issue rather than the other way around.\nTo create a pull request:\n\nFork the repo and create your branch from master.\nIf you've added code that should be tested, add tests.\nIf you've changed APIs, update the documentation.\nEnsure the test suite passes.\nMake sure your code lints.\nIf you haven't already, complete the Contributor License Agreement (\"CLA\").\n\nTests\nFirst, you will need to make sure you have the required data. For that, please have a look at the fetch_test_data.sh script under tests. Next run the tests using the runtests.py script passing a path to the directory containing the datasets.\nContributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\nComplete your CLA here: https://code.facebook.com/cla\nLicense\nBy contributing to fastText, you agree that your contributions will be licensed under its MIT license.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-04-16T14:40:56Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-12-02T20:49:14Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.879565877708089
      ],
      "excerpt": "fastText-iterative is a library for creating smaller (but efficient) fastText models. Forked from original fastText. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9792519218753415,
        0.9872300672106717
      ],
      "excerpt": "In our distillation method, we need to get NN info from big models. Therefore, precalculating and using those when it's necessery makes our job easier. \nTo save all NN's of a model: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8615371785521517,
        0.8945084735889994
      ],
      "excerpt": "Where big_NN(target, n) gives the nth nearest neighbor of target in the big model. \nOur Input Smoothing method performs as follows. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Distillation and some other iterative methods for fastText.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Omerktn/fastText-iterative/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 05:16:06 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Omerktn/fastText-iterative/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Omerktn/fastText-iterative",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/Omerktn/fastText-iterative/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/classification-results.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/classification-example.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/word-vector-example.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/get-wikimedia.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/quantization-example.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/iterative/decs.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/scripts/kbcompletion/data.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/scripts/kbcompletion/svo.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/scripts/kbcompletion/fb15k237.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/scripts/kbcompletion/fb15k.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/scripts/kbcompletion/wn18.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/scripts/quantization/quantization-results.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/alignment/example.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/crawl/process_wet_file.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/crawl/filter_dedup.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/crawl/download_crawl.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/tests/fetch_test_data.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/.circleci/gcc_test.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/.circleci/setup_circleimg.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/.circleci/setup_debian.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/.circleci/pull_data.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/.circleci/cmake_test.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/.circleci/run_locally.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/.circleci/python_test.sh",
      "https://raw.githubusercontent.com/Omerktn/fastText-iterative/master/.circleci/pip_test.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8251914410046387
      ],
      "excerpt": "You can start a multithreaded analogy test by running: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8121360110271507
      ],
      "excerpt": "You can start a multithreaded analogy test by running: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.910463540006269,
        0.8556026545429551,
        0.8921824778145484
      ],
      "excerpt": "$ ./fasttext test-analogies <model> <folder> <k> \n<model>      model filename \n  <folder>     directory of analogies text files \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.89238592471341
      ],
      "excerpt": "It will start a thread for each text file in the directory.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8645754169477791,
        0.8038872160990477
      ],
      "excerpt": "$ ./fasttext test-analogies ./models/enwik_e15_d200.bin ../analogy_test \nLoading model ./models/enwik_e15_d200.bin \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.854387785318543,
        0.854387785318543,
        0.844767186264968
      ],
      "excerpt": "[              gram2-opposite.txt ] Correct: 567     Total: 812      Soft10 Acc: 0.6983 \n[           gram3-comparative.txt ] Correct: 308     Total: 1332     Soft10 Acc: 0.2312 \n[    gram1-adjective-to-averb.txt ] Correct: 461     Total: 992      Soft10 Acc: 0.4647 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8556026545429551,
        0.8199747073246194
      ],
      "excerpt": "<model>      model filename \n  <outpath>    where NN file will save \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8838148168639296
      ],
      "excerpt": " examples. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8838148168639296
      ],
      "excerpt": " examples. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Omerktn/fastText-iterative/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "Python",
      "Shell",
      "Makefile",
      "Perl",
      "CMake"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2016-present, Facebook, Inc.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "fastText-iterative",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "fastText-iterative",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Omerktn",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Omerktn/fastText-iterative/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 05:16:06 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "distillation",
      "fasttext",
      "text-classification"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": " \n Let's say you have a big model with 100 dimension. First, create a precomputed nn file using the command mentioned above (This is optional but saves time in multiple uses). In order to create a 60 dimension model with using the distillation method, run:\n \n ```\n $ ./fasttext skipgram -input ./your_data -output ./small_model_dim60 -dim 60 -distillFrom ./models/my_big_model_dim100.bin -precomputedNN ./nnfiles/my_big_model_dim100.nn -outputSmoothing\n ```\n This will train a new model that is distilled from your big model.\n \n ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": " ```\n $ ./fasttext skipgram -input ./your_data -output ./small_model_dim60 -dim 60 -distillFrom ./models/my_big_model_dim100.bin -precomputedNN ./nnfiles/my_big_model_dim100.nn -inputSmoothing\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}