{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2003.08934"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8318826209849475
      ],
      "excerpt": "This should give you a gif like this. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/krrish94/nerf-pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-28T00:28:08Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-24T04:47:18Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8814334309717426,
        0.8758988129405018
      ],
      "excerpt": "A PyTorch re-implementation of Neural Radiance Fields. \nThe current implementation is blazing fast! (~5-9x faster than the original release, ~2-4x faster than this concurrent pytorch implementation) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9868802160556507
      ],
      "excerpt": "Multiple aspects. Besides obvious enhancements such as data caching, effective memory management, etc. I drilled down through the entire NeRF codebase, and reduced data transfer b/w CPU and GPU, vectorized code where possible, and used efficient variants of pytorch ops (wrote some where unavailable). But for these changes, everything else is a faithful reproduction of the NeRF technique we all admire :) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8955258709763266
      ],
      "excerpt": "The NeRF code release has an accompanying Colab notebook, that showcases training a feature-limited version of NeRF on a \"tiny\" scene. It's equivalent PyTorch notebook can be found at the following URL: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8787624800802698,
        0.8622938873236786
      ],
      "excerpt": "A neural radiance field is a simple fully connected network (weights are ~5MB) trained to reproduce input views of a single scene using a rendering loss. The network directly maps from spatial location and viewing direction (5D input) to color and opacity (4D output), acting as the \"volume\" so we can use volume rendering to differentiably render new views. \nOptimizing a NeRF takes between a few hours and a day or two (depending on resolution) and only requires a single GPU. Rendering an image from an optimized NeRF takes somewhere between less than a second and ~30 seconds, again depending on resolution. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8272316223757303
      ],
      "excerpt": "This samples 8192 rays per image from the lego dataset. Each image is 800 x 800 (since halfres is set to False), and 500 such random samples (8192 rays each) are drawn per image. The script takes about 10 minutes to run, but the good thing is, this needs to be run only once per dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9622108362972742
      ],
      "excerpt": "A Colab notebook for the full NeRF model (albeit on low-resolution data) can be accessed here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9773160706308625,
        0.9722119897070196,
        0.9890510953918841
      ],
      "excerpt": "All said, this is not an official code release, and is instead a reproduction from the original code (released by the authors here). \nThe code is thoroughly tested (to the best of my abilities) to match the original implementation (and be much faster)! In particular, I have ensured that \n* Every individual module exactly (numerically) matches that of the TensorFlow implementation. This Colab notebook has all the tests, matching op for op (but is very scratchy to look at)! \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8045397237870066,
        0.8566021157964709
      ],
      "excerpt": "The organization of code WILL change around a lot, because I'm actively experimenting with this. \nPretrained models: Pretrained models for the following scenes are available in the pretrained directory (all of them are currently lowres). I will continue adding models herein. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A PyTorch re-implementation of Neural Radiance Fields",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/krrish94/nerf-pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 70,
      "date": "Fri, 24 Dec 2021 16:48:15 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/krrish94/nerf-pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "krrish94/nerf-pytorch",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8715478849775223
      ],
      "excerpt": "The NeRF code release has an accompanying Colab notebook, that showcases training a feature-limited version of NeRF on a \"tiny\" scene. It's equivalent PyTorch notebook can be found at the following URL: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.969361645779777,
        0.9979947896609701,
        0.9667457818035082,
        0.9033045363286484,
        0.9770335174395833
      ],
      "excerpt": "In a new conda or virtualenv environment, run \npip install -r requirements.txt \nUse the provided environment.yml file to install the dependencies into an environment named nerf (edit the environment.yml if you wish to change the name of the conda environment). \nconda env create \nconda activate nerf \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8770012665412081
      ],
      "excerpt": "    <img src=\"assets/pipeline.jpg\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8647354795712904
      ],
      "excerpt": "    <img src=\"assets/blender-lowres.gif\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8647354795712904
      ],
      "excerpt": "    <img src=\"assets/fern-lowres.gif\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8706925236482582
      ],
      "excerpt": "python train_nerf.py --config config/lego.yml --load-checkpoint path/to/checkpoint.ckpt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8895641621508471
      ],
      "excerpt": "python cache_dataset.py --datapath cache/nerf_synthetic/lego/ --halfres False --savedir cache/legocache/legofull --num-random-rays 8192 --num-variations 50 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8867251879537837
      ],
      "excerpt": "python eval_nerf.py --config pretrained/lego-lowres/config.yml --checkpoint pretrained/lego-lowres/checkpoint199999.ckpt --savedir cache/rendered/lego-lowres \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8647354795712904
      ],
      "excerpt": "    <img src=\"assets/lego-lowres.gif\"> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/krrish94/nerf-pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/krrish94/nerf-pytorch/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Krishna Murthy\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n\\n\\n========================================\\nReproduce license statement from \"nerf\"\\n\\n\\nMIT License\\n\\nCopyright (c) 2020 bmild\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "nerf-pytorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "nerf-pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "krrish94",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/krrish94/nerf-pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Once everything is setup, to run experiments, first edit `config/lego.yml` to specify your own parameters.\n\nThe training script can be invoked by running\n```bash\npython train_nerf.py --config config/lego.yml\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 515,
      "date": "Fri, 24 Dec 2021 16:48:15 GMT"
    },
    "technique": "GitHub API"
  }
}