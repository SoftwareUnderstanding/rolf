{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1711.00937",
      "https://arxiv.org/abs/1805.11063",
      "https://arxiv.org/abs/1512.03385",
      "https://arxiv.org/abs/1805.11063, 2018](https://arxiv.org/abs/1805.11063).\n\n* [He, K et al., 2015] [He, K., Zhang, X., Ren, S and Sun, J. Deep Residual Learning for Image Recognition. arXiv e-prints https://arxiv.org/abs/1502.01852](https://arxiv.org/abs/1512.03385).\n\n* [ksw0306/ClariNet] https://github.com/ksw0306/ClariNet.",
      "https://arxiv.org/abs/1502.01852](https://arxiv.org/abs/1512.03385).\n\n* [ksw0306/ClariNet] https://github.com/ksw0306/ClariNet."
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* [van den Oord et al., 2017] [van den Oord A., and Oriol Vinyals. \"Neural discrete representation learning.\" Advances in Neural Information Processing Systems(NIPS). 2017](https://arxiv.org/abs/1711.00937).\n\n* [Alex Krizhevsky, 2009] [Learning Multiple Layers of Features from Tiny Images](https://www.cs.toronto.edu/~kriz/learning-features-2009-TR.pdf).\n\n* [zalandoresearch/pytorch-vq-vae] https://github.com/zalandoresearch/pytorch-vq-vae.\n\n* [deepmind/sonnet] https://github.com/deepmind/sonnet/blob/master/sonnet/examples/vqvae_example.ipynb.\n\n* [Roy et al., 2018] [A. Roy, A. Vaswani, A. Neelakantan, and N. Parmar. Theory and experiments on vector quantized autoencoders.arXiv preprint arXiv:1805.11063, 2018](https://arxiv.org/abs/1805.11063).\n\n* [He, K et al., 2015] [He, K., Zhang, X., Ren, S and Sun, J. Deep Residual Learning for Image Recognition. arXiv e-prints arXiv:1502.01852](https://arxiv.org/abs/1512.03385).\n\n* [ksw0306/ClariNet] https://github.com/ksw0306/ClariNet.\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/swasun/VQ-VAE-Images",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-02-18T15:10:17Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-07-12T10:23:22Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9848937616146942
      ],
      "excerpt": "The experiments was shorter than necessary as it was only for educational purpose. In order to obtain better image reconstructions, it is necessary to increase the number of residual hidden neurons (ie., 256 instead of 256) and to increase the number of training updates (ie., 250K instead of 25K). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8674947759708511
      ],
      "excerpt": "In my experiments, using the EMA updates proposes in [Roy et al., 2018], the final reconstruction loss was 2.66 times smaller (0.235 instead of 0.627) for shuffled dataset, and similar for unshuffled dataset: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "PyTorch implementation of VQ-VAE applied on CIFAR10 dataset",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/swasun/VQ-VAE-images/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Wed, 29 Dec 2021 21:39:28 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/swasun/VQ-VAE-Images/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "swasun/VQ-VAE-Images",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "It requires python3, python3-pip and the packages listed in [requirements.txt](requirements.txt).\n\nTo install the required packages:\n```bash\npip3 install -r requirements.txt\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/swasun/VQ-VAE-Images/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Charly Lamothe\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Results",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "VQ-VAE-Images",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "swasun",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/swasun/VQ-VAE-Images/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 15,
      "date": "Wed, 29 Dec 2021 21:39:28 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "vq-vae",
      "vae",
      "cifar10",
      "pytorch",
      "autoencoder",
      "vector-quantization",
      "vq-ema"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "First, move to the source directory:\n```bash\ncd src\n```\n\n```bash\npython3 main.py --help\n```\n\nOutput:\n```\nusage: main.py [-h] [--batch_size [BATCH_SIZE]]\n               [--num_training_updates [NUM_TRAINING_UPDATES]]\n               [--num_hiddens [NUM_HIDDENS]]\n               [--num_residual_hiddens [NUM_RESIDUAL_HIDDENS]]\n               [--num_residual_layers [NUM_RESIDUAL_LAYERS]]\n               [--embedding_dim [EMBEDDING_DIM]]\n               [--num_embeddings [NUM_EMBEDDINGS]]\n               [--commitment_cost [COMMITMENT_COST]] [--decay [DECAY]]\n               [--learning_rate [LEARNING_RATE]]\n               [--use_kaiming_normal [USE_KAIMING_NORMAL]]\n               [--shuffle_dataset [SHUFFLE_DATASET]] [--data_path [DATA_PATH]]\n               [--results_path [RESULTS_PATH]]\n               [--loss_plot_name [LOSS_PLOT_NAME]] [--model_name [MODEL_NAME]]\n               [--original_images_name [ORIGINAL_IMAGES_NAME]]\n               [--validation_images_name [VALIDATION_IMAGES_NAME]]\n               [--use_cuda_if_available [USE_CUDA_IF_AVAILABLE]]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --batch_size [BATCH_SIZE]\n                        The size of the batch during training (default: 32)\n  --num_training_updates [NUM_TRAINING_UPDATES]\n                        The number of updates during training (default: 25000)\n  --num_hiddens [NUM_HIDDENS]\n                        The number of hidden neurons in each layer (default:\n                        128)\n  --num_residual_hiddens [NUM_RESIDUAL_HIDDENS]\n                        The number of hidden neurons in each layer within a\n                        residual block (default: 32)\n  --num_residual_layers [NUM_RESIDUAL_LAYERS]\n                        The number of residual layers in a residual stack\n                        (default: 2)\n  --embedding_dim [EMBEDDING_DIM]\n                        Representing the dimensionality of the tensors in the\n                        quantized space (default: 64)\n  --num_embeddings [NUM_EMBEDDINGS]\n                        The number of vectors in the quantized space (default:\n                        512)\n  --commitment_cost [COMMITMENT_COST]\n                        Controls the weighting of the loss terms (default:\n                        0.25)\n  --decay [DECAY]       Decay for the moving averages (set to 0.0 to not use\n                        EMA) (default: 0.99)\n  --learning_rate [LEARNING_RATE]\n                        The learning rate of the optimizer during training\n                        updates (default: 0.0003)\n  --use_kaiming_normal [USE_KAIMING_NORMAL]\n                        Use the weight normalization proposed in [He, K et\n                        al., 2015] (default: True)\n  --unshuffle_dataset\n                        Do not shuffle the dataset before training (default: False)\n  --data_path [DATA_PATH]\n                        The path of the data directory (default: data)\n  --results_path [RESULTS_PATH]\n                        The path of the results directory (default: results)\n  --loss_plot_name [LOSS_PLOT_NAME]\n                        The file name of the training loss plot (default:\n                        loss.png)\n  --model_name [MODEL_NAME]\n                        The file name of trained model (default: model.pth)\n  --original_images_name [ORIGINAL_IMAGES_NAME]\n                        The file name of the original images used in\n                        evaluation (default: original_images.png)\n  --validation_images_name [VALIDATION_IMAGES_NAME]\n                        The file name of the reconstructed images used in\n                        evaluation (default: validation_images.png)\n  --use_cuda_if_available [USE_CUDA_IF_AVAILABLE]\n                        Specify if GPU will be used if available (default:\n                        True)\n```\n\nUse default vector quantized algorithm, do not shuffle the dataset and do not use [He, K et al., 2015] weight normalization:\n```bash\npython main.py --results_path=\"results/unshuffled/\" --use_kaiming_normal=False --decay=0.0 --unshuffle_dataset\n```\n\nUse EMA vector quantized algorithm, do not shuffle the dataset and do not use [He, K et al., 2015] weight normalization:\n```bash\npython main.py --results_path=\"results/unshuffled/\" --use_kaiming_normal=False --decay=0.99 --loss_plot_name=\"loss_ema.png\" --model_name=\"model_ema.pth\" --original_images_name=\"original_images_ema.png\" --validation_images_name=\"validation_images_ema.png\" --unshuffle_dataset\n```\n\nUse EMA vector quantized algorithm, do not shuffle the dataset and do use [He, K et al., 2015] weight normalization:\n```bash\npython main.py --results_path=\"results/unshuffled/\" --use_kaiming_normal=True --decay=0.99 --loss_plot_name=\"loss_ema_norm_he-et-al.png\" --model_name=\"model_ema_norm_he-et-al.pth\" --original_images_name=\"original_images_ema_norm_he-et-al.png\" --validation_images_name=\"validation_images_ema_norm_he-et-al.png\" --unshuffle_dataset\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Example of usage (see [here](src/main.py) for the complete example):\n```py\nconfiguration = Configuration.build_from_args(args) #: Get the dataset and model hyperparameters\ndataset = Cifar10Dataset(configuration.batch_size, dataset_path) #: Create an instance of CIFAR10 dataset\nauto_encoder = AutoEncoder(device, configuration).to(device) #: Create an AutoEncoder model using our GPU device\n\noptimizer = optim.Adam(auto_encoder.parameters(), lr=configuration.learning_rate, amsgrad=True) #: Create an Adam optimizer instance\ntrainer = Trainer(device, auto_encoder, optimizer, dataset) #: Create a trainer instance\ntrainer.train(configuration.num_training_updates) #: Train our model on the CIFAR10 dataset\ntrainer.save_loss_plot(results_path + os.sep + 'loss.png') #: Save the loss plot\nauto_encoder.save(results_path + os.sep + 'model.pth') #: Save our trained model\n\nevaluator = Evaluator(device, auto_encoder, dataset) #: Create en Evaluator instance to evaluate our trained model\nevaluator.reconstruct() #: Reconstruct our images from the embedded space\nevaluator.save_original_images_plot(results_path + os.sep + 'original_images.png') #: Save the original images for comparaison purpose\nevaluator.save_validation_reconstructions_plot(results_path + os.sep + 'validation_images.png') #: Reconstruct the decoded images and save them\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}