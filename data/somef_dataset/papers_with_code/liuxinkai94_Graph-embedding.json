{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1706.07845",
      "https://arxiv.org/abs/1711.08267"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you find HARP useful in your research, please cite our paper:\n\n\t@inproceedings{harp,\n\t\ttitle={HARP: Hierarchical Representation Learning for Networks},\n\t\tauthor={Chen, Haochen and Perozzi, Bryan and Hu, Yifan and Skiena, Steven},\n\t\tbooktitle={Proceedings of the Thirty-Second AAAI Conference on Artificial Intelligence},\n\t\tyear={2018},\n\t\torganization={AAAI Press}\n\t}\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{harp,\n    title={HARP: Hierarchical Representation Learning for Networks},\n    author={Chen, Haochen and Perozzi, Bryan and Hu, Yifan and Skiena, Steven},\n    booktitle={Proceedings of the Thirty-Second AAAI Conference on Artificial Intelligence},\n    year={2018},\n    organization={AAAI Press}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8019518914504621
      ],
      "excerpt": "| Node2Vec  | [KDD 2016]node2vec: Scalable Feature Learning for Networks | \u3010Graph Embedding\u3011Node2Vec\uff1a\u7b97\u6cd5\u539f\u7406\uff0c\u5b9e\u73b0\u548c\u5e94\u7528  | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9402598405854866
      ],
      "excerpt": "Code for the AAAI 2018 paper \"HARP: Hierarchical Representation Learning for Networks\". \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8858696991275667
      ],
      "excerpt": "You can read the preprint of our paper on Arxiv. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9999985043772839,
        0.9999196986266967
      ],
      "excerpt": "Hongwei Wang, Jia Wang, Jialin Wang, Miao Zhao, Weinan Zhang, Fuzheng Zhang, Xing Xie, Minyi Guo \n32nd AAAI Conference on Artificial Intelligence, 2018 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/liuxinkai94/Graph-embedding",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-06-26T12:54:46Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-09-08T10:55:23Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "A tensorflow re-implementation of Self-Paced Network Embedding,use random walk to get positive pair\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = SDNE(G,hidden_size=[256,128]) #:init model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8623487423101672
      ],
      "excerpt": "Tensorflow implementation of Self-Paced Network Embedding \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8250202348973374,
        0.8855610200697894
      ],
      "excerpt": "Code for the AAAI 2018 paper \"HARP: Hierarchical Representation Learning for Networks\". \nHARP is a meta-strategy to improve several state-of-the-art network embedding algorithms, such as DeepWalk, LINE and Node2vec. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9875910683680211,
        0.8801593608722454,
        0.8620200956062818
      ],
      "excerpt": "SFDP is a library for multi-level graph drawing, which is a part of GraphViz. \nWe use SFDP for graph coarsening in this implementation. \nNote that SFDP is included as a binary file under /bin; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8791786095453662,
        0.9787915260343932,
        0.8361753800360552
      ],
      "excerpt": "Currently we have the binary files under OSX, Linux and Windows. \nThis repository is the implementation of GraphGAN (arXiv): \nGraphGAN: Graph Representation Learning With Generative Adversarial Nets \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8602176846326643,
        0.9596290065860019
      ],
      "excerpt": "GraphGAN unifies two schools of graph representation learning methodologies: generative methods and discriminative methods, via adversarial training in a minimax game. \nThe generator is guided by the signals from the discriminator and improves its generating performance, while the discriminator is pushed by the generator to better distinguish ground truth from generated samples. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9234410727402818
      ],
      "excerpt": "results/: evaluation results and the learned embeddings of the generator and the discriminator \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9317686896132875
      ],
      "excerpt": "The input data should be an undirected graph in which node IDs start from 0 to N-1 (N is the number of nodes in the graph). Each line contains two node IDs indicating an edge in the graph. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/liuxinkai94/Graph-embedding/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Thu, 23 Dec 2021 15:00:49 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/liuxinkai94/Graph-embedding/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "liuxinkai94/Graph-embedding",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The following Python packages are required to install HARP.\n\n[magicgraph](https://github.com/phanein/magic-graph) is a library for processing graph data.\nTo install, run the following commands:\n\n\tgit clone https://github.com/phanein/magic-graph.git\n\tcd magic-graph\n\tpython setup.py install\n\nThen, install HARP and the other requirements:\n\n\tgit clone https://github.com/GTmac/HARP.git\n\tcd HARP\n\tpip install -r requirements.txt\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8172959497885965
      ],
      "excerpt": "G = nx.read_edgelist('../data/wiki/Wiki_edgelist.txt',create_using=nx.DiGraph(),nodetype=None,data=[('weight',int)])#: Read graph \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8737873112808705
      ],
      "excerpt": "model.train(window_size=5,iter=3)#: train model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8172959497885965,
        0.8543048995140122,
        0.8815598107964063
      ],
      "excerpt": "G = nx.read_edgelist('../data/wiki/Wiki_edgelist.txt',create_using=nx.DiGraph(),nodetype=None,data=[('weight',int)])#:read graph \nmodel = LINE(G,embedding_size=128,order='second') #:init model,order can be ['first','second','all'] \nmodel.train(batch_size=1024,epochs=50,verbose=2)#: train model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8169810609605592,
        0.8737873112808705
      ],
      "excerpt": "model = Node2Vec(G, walk_length = 10, num_walks = 80,p = 0.25, q = 4, workers = 1)#:init model \nmodel.train(window_size = 5, iter = 3)#: train model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8172959497885965
      ],
      "excerpt": "G = nx.read_edgelist('../data/wiki/Wiki_edgelist.txt',create_using=nx.DiGraph(),nodetype=None,data=[('weight',int)])#:read graph \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8540580153770052
      ],
      "excerpt": "model.train(batch_size=3000,epochs=40,verbose=2)#: train model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8737873112808705
      ],
      "excerpt": "model.train(window_size = 5, iter = 3)#: train model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9328678098686317
      ],
      "excerpt": "python src/scoring.py -e citeseer.npy -i example_graphs/citeseer/citeseer.mat -t 1 2 3 4 5 6 7 8 9 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8949812968164477
      ],
      "excerpt": "data/: training and test data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.847174917208011
      ],
      "excerpt": "Note: the dimension of pre-trained node embeddings should equal n_emb in src/GraphGAN/config.py \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/liuxinkai94/Graph-embedding/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Weichen Shen\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Graph-embedding-master",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Graph-embedding",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "liuxinkai94",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/liuxinkai94/Graph-embedding/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "python 3.6, tensorflow 1.12.0\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "The code has been tested running under Python 3.6.5, with the following packages installed (along with their dependencies):\n\n- tensorflow == 1.8.0\n- tqdm == 4.23.4 (for displaying the progress bar)\n- numpy == 1.14.3\n- sklearn == 0.19.1\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. clone the repo and make sure you have installed `tensorflow` or `tensorflow-gpu` on your local machine. \n2. run following commands\n```bash\npython setup.py install\ncd examples\npython deepwalk_wiki.py\n```\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Thu, 23 Dec 2021 15:00:49 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. clone the repo and make sure you have installed `tensorflow` or `tensorflow-gpu` on your local machine. \n2. run following commands\n```bash\npython setup.py install\ncd examples\npython deepwalk_wiki.py\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "To run the codes, use:\npython seedne_new.py\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "To run HARP on the *CiteSeer* dataset using *LINE* as the underlying network embedding model, run the following command:\n\n``python src/harp.py --input example_graphs/citeseer/citeseer.mat --model line --output citeseer.npy --sfdp-path bin/sfdp_linux``\n\nParameters available:\n\n**--input:** *input_filename*\n1. ``--format mat`` for a Matlab .mat file containing an adjacency matrix.\nBy default, the variable name of the adjacency matrix is ``network``;\nyou can also specify it with ``--matfile-variable-name``.\n2. ``--format adjlist`` for an adjacency list, e.g:\n\n\t``1 2 3 4 5 6 7 8 9 11 12 13 14 18 20 22 32``\n\t\n\t``2 1 3 4 8 14 18 20 22 31``\n\t\n\t``3 1 2 4 8 9 10 14 28 29 33``\n\t\n\t``...``\n\n3. ``--format edgelist`` for an edge list, e.g:\n\n\t``1 2``\n\t\n\t``1 3``\n\t\n\t``1 4``\n\t\n\t``2 5``\n\t\n\t``...``\n\n**--output:** *output_filename*\nThe output representations in Numpy ``.npy`` format.\nNote that we assume the nodes in your input file are indexed **from 0 to N - 1**.\n\n**--model** *model_name*\nThe underlying network embeddings model to use. Could be ``deepwalk``, ``line`` or ``node2vec``.\nNote that ``node2vec`` uses the default parameters, which is p=1.0 and q=1.0.\n\n**--sfdp-path** *sfdp_path*\nPath to the binary file of SFDP, which is the module we used for graph coarsening.\nYou can set it to ``sfdp_linux``, ``sfdp_osx`` or ``sfdp_windows.exe`` depending on your operating system.\n\n**More options:** The full list of command line options is available with ``python src/harp.py --help``.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```mkdir cache```   \n```cd src/GraphGAN```  \n```python graph_gan.py```\n",
      "technique": "Header extraction"
    }
  ]
}