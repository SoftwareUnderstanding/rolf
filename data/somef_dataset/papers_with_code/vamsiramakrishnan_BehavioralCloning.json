{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1511.07289\n * NVIDIA End to End Model architecture and train from scratch\n \nLayer Name                   |  Size                  | Number of Parameters\n-----------------------------|------------------------|--------------------\ncropping2d_1 (Cropping2D"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9218476887215062
      ],
      "excerpt": "Switched from ReLU to ELU for activations after reading this paper-https://arxiv.org/abs/1511.07289 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8109194328925066,
        0.8109194328925066,
        0.8109194328925066
      ],
      "excerpt": "conv2d_5 (Conv2D)            |  (None, 1, 18, 64)     |    36928    \nbatch_normalization_5 (Batch |  (None, 1, 18, 64)     |    256      \nelu_5 (ELU)                  |  (None, 1, 18, 64)     |    0        \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9076501442428265,
        0.9030859728368266,
        0.9030859728368266,
        0.9030859728368266
      ],
      "excerpt": "dense_4 (Dense)              |  (None, 10)            |    510      \nbatch_normalization_9 (Batch |  (None, 10)            |    40       \nelu_9 (ELU)                  |  (None, 10)            |    0        \ndropout_2 (Dropout)          |  (None, 10)            |    0        \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vamsiramakrishnan/BehavioralCloning",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-05-25T07:57:43Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-03-11T06:48:24Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9721830219103427
      ],
      "excerpt": "Tutorial for building a deep learning model that generates steering angle based on image input. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8404098721561014
      ],
      "excerpt": "Cloud based ML environment on AWS for Model Training.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8007335372853809
      ],
      "excerpt": "The data is of the format  Drive_Log.csv which contains the path information where the images are sampled from the video and the actual images are stored in IMG. Each image is timestamped. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.823416213101631
      ],
      "excerpt": "Analyze, Augment and PreProcess Data offline \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8426821362029552
      ],
      "excerpt": "Upload Data to Cloud - AWS Machine Learning system .  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9544398392719157,
        0.9332240442151554,
        0.9118736380165798
      ],
      "excerpt": "Visualization to understand the distribution and quality of data.  \nDistribution Plot to see the spread and quantity of data \nTime Series Plot to understand the quality of data. (To see noise to determine if filters are required) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8506426664247994,
        0.9275856239441737,
        0.876099762087781,
        0.927649107628428
      ],
      "excerpt": "Visualizing collected data from driving the simulator shows that the dataset looks entirely different for Keyboard and Mouse \nSo we pass the data through a Savitzky Golay filter that averages out the samples but maintains the  \nArea = (Steering_angle x Time) this effectively filters out the noise without destroying the signal. \nBased on the histogram distribution plots collecting data by using certain driving styles. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.908925214220865,
        0.9631890958163911
      ],
      "excerpt": "Keyboard and Mouse \nAfter initial model save and testing driving and training in problem areas to improve model on subset of data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8473594681632817,
        0.9940142237701356
      ],
      "excerpt": "Reduce the time spent on data gathering through data augmentation techniques \nBrightness Perturbation : Random perturbation of brightness of the image. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.83999491407838
      ],
      "excerpt": "Adaptive Histogram Equalization : Can greatly help in the model learning the features quickly \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9851773987394963,
        0.9684007442132099,
        0.9141533640624078
      ],
      "excerpt": "These steps increase the challenge and generalization capability by creating harder images for the model to train on. Below is an example of augmented and perturbed image batch that is linked with the image generator that generates images during model training on the go. Seen below are the distribution of data and images of one random sample generated by the generator. \nSince the distribution is clearly tri modal (peaks around 0 for Center Camera , + 0.25 and -0.25 for left and right cameras respectievely ) it is an unbalanced dataset. \nAlthough significant efforts have been taken gather more data around turns , there is just simply more data around 0 and +/-0.25 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9536562352012504,
        0.9714906365495001,
        0.8727221658192876,
        0.9663679018165064,
        0.8115960846115109,
        0.9798176164716377
      ],
      "excerpt": "The method used to do downsampling is Weighted Random Normal Sampling . \nWhy we choose this is because , the dominant characteristic of the system is to stay around 0/.25 so we make sure we don't mess with that. \nThe steering angles are Discretized i.e made to fall under categories/ Bins \nCounts are taken for each group and the weights are given as 1/ Counts in that group. \nThese weights are then Normalized - When summed up they need to be equal to 1 \nThen the batch size is used to sample this out of the data frame using the Sampling with weights  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9234584465213387
      ],
      "excerpt": "Resize image to increase model performance \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8036799694223529
      ],
      "excerpt": "Tried by adding multiple dropouts but it did need seem to have an effect on improving validation losses. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577302739126875
      ],
      "excerpt": "dense_1 (Dense)              |  (None, 1164)          |    1342092  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8732915750241484
      ],
      "excerpt": "dense_3 (Dense)              |  (None, 50)            |    5050     \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577302739126875
      ],
      "excerpt": "dense_5 (Dense)              |  (None, 1)             |    11         \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Tutorial for building a model that generates steering angle based on image input. The model is then deployed on to a video game for testing. The complete description can be found on the readme.md document.   ",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vamsiramakrishnan/BehavioralCloning/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Fri, 24 Dec 2021 12:44:07 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/vamsiramakrishnan/BehavioralCloning/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "vamsiramakrishnan/BehavioralCloning",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/vamsiramakrishnan/BehavioralCloning/master/PreProcessing_Model.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- **Hyperparameters**: **Epochs** , **Steps per Epoch** and **Learning Rate** decided based on search epochs on subset of data\n- **Greedy best save** and **checkpoint** implementation.\n- **Metrics** is a purely **loss** based. Since the label(Steering angle) here is numeric and non-categorical , RMS Loss is used as the loss type. \n\nHyperparameter Name  | Value                   |     Comments     \n---------------------|-------------------------|--------------------------------------------\nEpochs               | 10                      | Additional Epochs for special problem areas\nLearning Rate        | 1e-4                    | Default Learning rate of 1e-2 unsuitable results\nBatch Size           | 32                      | Chosen due to best trade off between CPU & GPU performance\nMetric               | Loss                    | Accuracy is unsuitable as exact steering angle prediction is not what matters\nLoss Type            | Root Mean Squared Error | As loss is non-categorical closeness to predicted angle is what matters\nOptimizer Type       | Adam                    | Chosen from http://sebastianruder.com/optimizing-gradient-descent/index.html\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8271898822703373
      ],
      "excerpt": "Get more Data if required. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9519965730449642,
        0.9519965730449642,
        0.8846937572834757
      ],
      "excerpt": "Smooth Turn from both Tracks (MAC & Windows) \nRecovery driving from both Tracks (MAC & Windows) \nProblem Areas in both tracks (MAC & Windows) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8002311912968945
      ],
      "excerpt": "Data Sources   | Mac, Windows, Linux Sim \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8690066696745442
      ],
      "excerpt": "Simulator - Generate Data in Training Mode \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8798146999519002,
        0.8434421333451504
      ],
      "excerpt": "Run the Model Training.  \nDownload Model and run simulator in autonomous mode.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8890818307099057
      ],
      "excerpt": "<img src= \"Track1_SteeringAngle_Dist.png\" width=\"750\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8890818307099057
      ],
      "excerpt": "<img src= \"Track1vsTrack2.png\" width=\"750\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8415360554279765
      ],
      "excerpt": "Name           | Values \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8890818307099057
      ],
      "excerpt": "<img src= \"Udacity_StockData.png\" width=\"750\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8890818307099057
      ],
      "excerpt": "<img src= \"Cw_vsACW.png\" width=\"750\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8890818307099057
      ],
      "excerpt": "<img src= \"Sample_Distribution.png\" width=\"750\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8890818307099057
      ],
      "excerpt": "<img src= \"Sample_PreProcessed_Image_Batch.png\" width=\"1500\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490523934172997
      ],
      "excerpt": "Layer Name                   |  Size                  | Number of Parameters \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.837303060995734
      ],
      "excerpt": "batch_normalization_7 (Batch |  (None, 100)           |    400      \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8890818307099057
      ],
      "excerpt": "<img src= \"EndToEnd_NVIDIA.png\" width=\"1500\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8705050761500154
      ],
      "excerpt": "<img src= \"run1.gif\" width=\"1000\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8705050761500154
      ],
      "excerpt": "<img src= \"run2.gif\" width=\"1000\"/> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/vamsiramakrishnan/BehavioralCloning/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "BehavioralCloning",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "BehavioralCloning",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "vamsiramakrishnan",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vamsiramakrishnan/BehavioralCloning/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Fri, 24 Dec 2021 12:44:07 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Offline installation - Install ![Anaconda](https://www.continuum.io/downloads) , use \n![environment.yml](https://github.com/vamsiramakrishnan/BehavioralCloning/blob/master/environment.yml)\n2. Cloud Environment - This is a ![medium post](https://medium.com/@vamsiramakrishnan/setup-a-cloud-based-machine-learning-system-from-scratch-aws-ec2-g-2x2-9216449d558d) written to help you with the cloud based environment setup.\n3. Clone this repository to both the cloud and the local environment![Behavioral Cloning Repo](https://github.com/udacity/CarND-Behavioral-Cloning-P3).\n4. Simulator Repo - ![Link](https://github.com/udacity/self-driving-car-sim) \n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "* Model_Preprocessing.ipynb is the scratchpad that was used to try and experiment with building the model.It helps us extract and preprocess information and combine it. \n* Model.py is the Keras Model that contains \n    * Model \n    * Image Aug Generators\n* It obtains data from complete_data.csv which contains the sum total of all images , steering angles and their paths. \n* The data is obatined by running the simulator / stock data given by udacity itself. \n",
      "technique": "Header extraction"
    }
  ]
}