{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1908.07442 \"TabNet\""
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/96imranahmed/TabNet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-08-30T14:26:10Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-06-30T04:16:55Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "TabNet should **not act as a replacement to boosted methods** for typical data science use-cases. However, it may provide improved performance in use-cases where the labelled dataset is large (e.g., millions of examples), or in situations where only an unsupervised model is needed (e.g., fraud detection).\n\n- **Performance:** While the paper demonstrates promising results, my TabNet implemention underperformed XGBoost in `adult_census` and only slightly outperformed XGBoost in `forest_census` (likely driven by the larger size of the dataset). These results are produced without hyperparamater tuning.\n- **Training time:** The training time for TabNet models is considerably higher than the XGBoost counterpart on CPU, though this difference is lower on GPU. As such, TabNet should only be considered when plenty of samples are available (e.g., as with `Forest Cover`)\n- **Interpretability:** Aside from (i) visualising the embedding space of categorical features, and (ii) providing some intuition on which features the model was attending to while predicting on a text example, the vanilla TabNet model does not provide much additional interpretability over the importance plots already available in XGBoost. \n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8909884455030582,
        0.9311383492362197
      ],
      "excerpt": "(Yet another) PyTorch implementation of TabNet. \nImplements base model code, including categorical embeddings, but does not implement interpretability measures as outlined in the paper \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8180212975672679
      ],
      "excerpt": "[ ] Add ability to handle NaN and/or missing inputs \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Reproduction of Google's Tabnet - https://arxiv.org/pdf/1908.07442.pdf",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/96imranahmed/TabNet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Sun, 26 Dec 2021 16:03:38 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/96imranahmed/TabNet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "96imranahmed/TabNet",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.8174894670197019
      ],
      "excerpt": "Note: Tests can be replicated by running the appropriate files in /tests/examples. Datasets will be downloaded with the repository. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/96imranahmed/TabNet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Imran Ahmed\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "TabNet",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "TabNet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "96imranahmed",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/96imranahmed/TabNet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Sun, 26 Dec 2021 16:03:38 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The TabNet implementation is highly configurable, facilitated by the large number of input parameters. A full list of parameters can be found at the top of `/src/train.py`.\n\nSupports Pandas or numpy arrays as inputs. Handles categorical inputs out-of-box, provided they are correctly configured (see `forest_cover.csv` for an example).\n\nA TabNet model can be trained as follows: \n```python\nimport sys\nsys.path.append(os.path.abspath(\"../../src/\"))\nfrom train import TabNet\n\nfc_tabnet_model = TabNet(model_params=model_params)\nfc_tabnet_model.fit(\n\tX_train,\n\ty_train,\n\tX_val,\n\ty_val,\n\ttrain_params=train_params,\n\tsave_params={\n\t\t\"model_name\": data_params[\"model_save_name\"],\n\t\t\"tensorboard_folder\": \"../../runs/\",\n\t\t\"save_folder\": data_params[\"model_save_dir\"],\n\t},\n)\nfc_tabnet_model = TabNet(save_file=save_file)\ny_tabnet_val_pred = fc_tabnet_model.predict(X_val)\n```\n\nTraining / validation losses are logged to Tensorboard. Run `tensorboard --logdir=./runs/` in your terminal to access this data.\n\n",
      "technique": "Header extraction"
    }
  ]
}