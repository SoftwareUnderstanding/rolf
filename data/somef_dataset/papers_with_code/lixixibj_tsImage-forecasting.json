{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1512.03385",
      "https://arxiv.org/abs/1512.03385"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lixixibj/forecasting-with-time-series-imaging",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-05-15T14:31:02Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-25T08:59:04Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.985082172935846
      ],
      "excerpt": "The structure of the project \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9236585593987031,
        0.8225684698238819,
        0.860250611056287
      ],
      "excerpt": "In the folder feature_extraction/feature_extraction_with_sift, the function image_based_batch_ts_feature_extraction_with_sift() in the file compute_features_sift.py is used to compute features of time series image. The parameters explaination for this function image_based_batch_ts_feature_extraction_with_sift(file_path_of_ts,file_path_of_feature,num_cores): \nfile_path_of_ts: the file path of your time series data and it is saved in the format of csv. You can dowoload M4 dataset from here. Then, zip it and put it in feature_extraction/ts-data/M4/MM4DataSet/. \nfile_path_of_feature: the file path where you want to save the extracted feature. In this project, we save the extracted features in feature_extraction/feature_extraction_with_sift/sift-features. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9750182233112087
      ],
      "excerpt": "We show an exmple of extracting sift features of M4 mmonthly dataset: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9732298431526675,
        0.9082454701748288,
        0.8225684698238819,
        0.9300203630903561
      ],
      "excerpt": "The ouput is features of time series images and its shape is n-by-4200, where n is the number of time series. \nIn the folder feature_extraction/feature_extraction_with_pretrained_CNN, the function image_based_batch_ts_feature_extraction_with_sift() in the file compute_features_cnn.py is used to compute features of time series image. Parameters explaination for function image_based_batch_ts_feature_extraction_with_cnn(file_path_of_ts,file_path_of_feature,cnn_model_name,file_path_of_pretrained_model): \nfile_path_of_ts: the file path of your time series data and it is saved in the format of csv. You can dowoload M4 dataset from here. Then, zip it and put it in feature_extraction/ts-data/M4/MM4DataSet/. \nfile_path_of_feature: the file path where you want to save the extracted feature. In this project, we save the extracted features in feature_extraction/feature_extraction_with_pretrained_CNN/cnn-features. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.964379966239256
      ],
      "excerpt": "We show an exmple of extracting inception-v1 features of M4 monthly dataset: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9923793446160196,
        0.9309719436523205,
        0.962835340055219,
        0.962835340055219,
        0.95258920418577
      ],
      "excerpt": "The ouput is features of time series images and its shape is n-by-m, where n is the number of time series and m is the dimension of the features. \nDimension of the output of the pretrained Inception-v1 model: 1024. \nDimension of the output of the pretrained ResNet-v1-101 model: 2048. \nDimension of the output of the pretrained ResNet-v1-50 model: 2048. \nDimension of the output of the pretrained VGG model: 1000. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8624032438581825,
        0.9252626473947965
      ],
      "excerpt": "In the table below, we list each model, the corresponding \nTensorFlow model file, the link to the model checkpoint\u3002 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9651888424598197,
        0.9143360038859245,
        0.9269623470707264
      ],
      "excerpt": "Based on the extracted features above, we can do model combination. \nIn the folder model_combination/R, the main function image.based.model.combination() in the file model.comb.main.for.Tourism.R is used to do model combination for Tourism dataset using M4 dataset as training data. \nIn the folder model_combination/R, the file model.comb.main.for.M4.R is used to do model combination for M4 dataset using M4 temporal holdout dataset as training data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9829869264200638,
        0.980744055465703,
        0.9602798783253138,
        0.8090358535688021,
        0.9207985869153841
      ],
      "excerpt": "forec_methods_list.R: it is used to compute the forecasts of 9 candidate methods. \nprocess_dataset.R: it is used to compute the accuracy of forecasting methods. \ncombination_ensemble.R: it is used to define the custom loss function of xgboost. \nensemble_classifier.R: it is used to train and test the  xgboost model. \nhyperparam.R: hyperparameters optimization for xgboost. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9822357676315644
      ],
      "excerpt": "tourism.benchmarks.R: it is used to compute forecasts of the top methods in toursim competition. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9130445673987007
      ],
      "excerpt": " image.based.model.combination( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8206413237078153
      ],
      "excerpt": "    #:#: 'yearly','quarterly','monthly','weekly','daily' and so on \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8206413237078153
      ],
      "excerpt": "#:#: 'yearly','quarterly','monthly','weekly','daily' and so on \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9921849611313832
      ],
      "excerpt": "#:#: where n is the number of time series and f is the dimension of features \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9921849611313832
      ],
      "excerpt": "#:#: where n is the number of time series and f is the dimension of features \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9177002529476118,
        0.884160720262821
      ],
      "excerpt": "#:#: file path of the forecasts of 9 methods of training data, in 'rda' \n#:#: format, we provide an example in the project \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9361093711843869,
        0.8899846964310701
      ],
      "excerpt": "#:#: file path of the forecasts of 9 methods of testing data, in 'rda' format, we \n#:#: provide an example in the project \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9394449182630016
      ],
      "excerpt": "#:#: params for xgboost \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9880239431963114
      ],
      "excerpt": "We show an example of getting forecasts of Tourism monthly data with M4 monthly data as training data: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9132348557482654,
        0.9365725570208634
      ],
      "excerpt": "data.type.of.training.data = 'Monthly' \ndata.type.of.testing.data = 'MONTHLY' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9365725570208634
      ],
      "excerpt": "                              data.type.of.testing.data, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.93528416746474
      ],
      "excerpt": "Then, we can get the forecasting accuracy of the combination method on the targeted dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "time series forecasting with image",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lixixibj/tsImage-forecasting/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 15,
      "date": "Wed, 29 Dec 2021 20:17:27 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lixixibj/forecasting-with-time-series-imaging/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "lixixibj/forecasting-with-time-series-imaging",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9967777177014457,
        0.998877000272434,
        0.992220865872013,
        0.992220865872013
      ],
      "excerpt": "pip install tensorflow==1.2.1  \npip install scipy==1.2.1 \npip install opencv-contrib-python==3.4.2.17 \npip install opencv-contrib-python==3.4.2.17 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8039412239030347
      ],
      "excerpt": "file_path_of_pretrained_model: file path of pretrained models. You can download all the pretrained models in the following content. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9312713339938348
      ],
      "excerpt": "You can download all models here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8216289191180633,
        0.8174800211939968
      ],
      "excerpt": "Inception V1|Code|inception_v1_2016_08_28.tar.gz \nResNet V1 50|Code|resnet_v1_50_2016_08_28.tar.gz \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9035243881387833
      ],
      "excerpt": "#:#: you can choose M4 or tourism \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9035243881387833
      ],
      "excerpt": "#:#: you can choose M4 or tourism \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8395611995037205
      ],
      "excerpt": "file_path_of_ts: the file path of your time series data and it is saved in the format of csv. You can dowoload M4 dataset from here. Then, zip it and put it in feature_extraction/ts-data/M4/MM4DataSet/. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.913420136449776
      ],
      "excerpt": "file_path_of_ts = '../ts-data/M4/M4DataSet/Monthly-train.csv' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8054944700528244,
        0.8395611995037205
      ],
      "excerpt": "In the folder feature_extraction/feature_extraction_with_pretrained_CNN, the function image_based_batch_ts_feature_extraction_with_sift() in the file compute_features_cnn.py is used to compute features of time series image. Parameters explaination for function image_based_batch_ts_feature_extraction_with_cnn(file_path_of_ts,file_path_of_feature,cnn_model_name,file_path_of_pretrained_model): \nfile_path_of_ts: the file path of your time series data and it is saved in the format of csv. You can dowoload M4 dataset from here. Then, zip it and put it in feature_extraction/ts-data/M4/MM4DataSet/. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8138406309330397
      ],
      "excerpt": "file_path_of_pretrained_model: file path of pretrained models. You can download all the pretrained models in the following content. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.913420136449776
      ],
      "excerpt": "file_path_of_ts = '../ts-data/M4/M4DataSet/Monthly-train.csv' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8079001845166274
      ],
      "excerpt": "file_path_of_pretrained_model = 'pretrained-models/inception_v1.ckpt' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8020910500869427
      ],
      "excerpt": "Dimension of the output of the pretrained ResNet-v1-101 model: 2048. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8038896673176134
      ],
      "excerpt": "You can download all models here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8443904378176373,
        0.9144046013601745
      ],
      "excerpt": "TensorFlow model file, the link to the model checkpoint\u3002 \nModel | TF-Slim File | Checkpoint  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8698213188976955,
        0.8488945713476173
      ],
      "excerpt": "In the folder model_combination/R, the main function image.based.model.combination() in the file model.comb.main.for.Tourism.R is used to do model combination for Tourism dataset using M4 dataset as training data. \nIn the folder model_combination/R, the file model.comb.main.for.M4.R is used to do model combination for M4 dataset using M4 temporal holdout dataset as training data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8065788792791942
      ],
      "excerpt": "ensemble_classifier.R: it is used to train and test the  xgboost model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8544284782797991
      ],
      "excerpt": "hyperparam.search.main.R:  an example show how to get opyimal hyperparameters for xgboost. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9087327971626905
      ],
      "excerpt": "#:#: file path of your training data features, in 'csv' format, shape:n*f, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9023933753326996
      ],
      "excerpt": "#:#: file path of your testing data features, in 'csv' format, shape:n*f, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8721076031960073
      ],
      "excerpt": "We show an example of getting forecasts of Tourism monthly data with M4 monthly data as training data: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8737043910631452,
        0.8595399216896705,
        0.8498633314750149,
        0.8238804509358295
      ],
      "excerpt": "data.type.of.training.data = 'Monthly' \ndata.type.of.testing.data = 'MONTHLY' \ntraining.dataset = M4 \ntesting.dataset = tourism \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.910585278736009,
        0.9019033244817575
      ],
      "excerpt": "file.path.of.training.data.prediction.value = './forecasts/M4/Monthly_ff.rda' \nfile.path.of.testing.data.prediction.value = './forecasts/Tourism/MONTHLY_ff.rda' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8595399216896705,
        0.8498633314750149,
        0.8238804509358295
      ],
      "excerpt": "                              data.type.of.testing.data, \n                              training.dataset, \n                              testing.dataset, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8351750222716143,
        0.8210931675065144,
        0.910585278736009,
        0.9019033244817575,
        0.8060372108626078
      ],
      "excerpt": "                              file.path.of.training.data.features, \n                              file.path.of.testing.data.features, \n                              file.path.of.training.data.prediction.value, \n                              file.path.of.testing.data.prediction.value, \n                              params) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lixixibj/forecasting-with-time-series-imaging/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "R"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Forecasting with time series imaging",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "forecasting-with-time-series-imaging",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "lixixibj",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lixixibj/forecasting-with-time-series-imaging/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 22,
      "date": "Wed, 29 Dec 2021 20:17:27 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "image",
      "based",
      "time",
      "series",
      "forecasting"
    ],
    "technique": "GitHub API"
  }
}