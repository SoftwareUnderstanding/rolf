{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2004.10934\n* Infos zum Darknet framework: http://pjreddie.com/darknet/\n* Infos zu OpenCV findet Ihr hier: https://opencv.org/\n\n#### Um den Videostream per Smartphone an den NVIDIA\u00ae Jetson\u2122 zu \u00fcbertragen, wurde die folgende App verwendet:\n* **IP Webcam** https://play.google.com/store/apps/details?id=com.pas.webcam.pro&hl=de\n* Nat\u00fcrlich k\u00f6nnen auch andere Apps und Plattformen (Android, iOS, ..."
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9944484218006108
      ],
      "excerpt": "Dokument zu Yolo(v4): https://arxiv.org/abs/2004.10934 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9278824608274014
      ],
      "excerpt": "Infos zu OpenCV findet Ihr hier: https://opencv.org/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8550101043698384
      ],
      "excerpt": "CUDA 10.2 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8786044417622563
      ],
      "excerpt": "Dazu den Wert von 1 auf 2 \u00e4ndern. Es wird dann der letztg\u00fcltige Stand der jeweiligen Version installiert: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8818900735767716
      ],
      "excerpt": "Empfehlung: In der App auf dem Smartphone sollte die FPS - Rate auf einen Wert gestellt werden, welcher der Performance der Plattform entspricht. Dazu einfach mit 30 FPS testen und im Terminal die FPS - Rate kontrollieren. Dann den Wert entsprechend anpassen. Wenn beispielsweise im Terminal 9.1 FPS beim Xavier angezeigt werden, dann den Wert in der App auf 9 setzen um die Kommunikation reibungslos laufen zu lassen. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/wiegehtki/nvjetson_opencv_gsi",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-04-17T06:17:02Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-01-11T10:03:13Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Installation von OpenCV und Yolov3 auf dem NVIDIA Jetson Nano ",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": " \n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/wiegehtki/nvjetson_opencv_gsi/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 12:21:09 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/wiegehtki/nvjetson_opencv_gsi/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "wiegehtki/nvjetson_opencv_gsi",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/Installv2.3.6.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/videoanalyse.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/LadeYoloWeights.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/smartcam.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/nvidia2sudoers.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/Installv2.3.8.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/nvidiaNOsudoers.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/Finalisieren.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/darknet.repo/image_yolov2.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/darknet.repo/video_v2.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/darknet.repo/json_mjpeg_streams.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/darknet.repo/image_yolov3.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/darknet.repo/build.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/darknet.repo/smartcam.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/darknet.repo/net_cam_v3.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/darknet.repo/video_yolov3.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/darknet.repo/scripts/dice_label.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/darknet.repo/scripts/setup.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/darknet.repo/scripts/get_imagenet_train.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/darknet.repo/scripts/gen_tactic.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/darknet.repo/scripts/get_coco_dataset.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/darknet.repo/scripts/imagenet_label.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/darknet.repo/scripts/windows/windows_imagenet_train.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/darknet.repo/scripts/windows/windows_imagenet_label.sh",
      "https://raw.githubusercontent.com/wiegehtki/nvjetson_opencv_gsi/master/darknet.repo/scripts/windows/otb_get_labels.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1.  Einloggen und das **Terminal** \u00f6ffnen\n2.  **Einstellungen -> Terminal -> Scrolling** deaktivieren (Limit auf 10000 lines ausschalten)\n3.  Im Terminal dann folgende Befehle eingeben:\n```\n       cd ~\n       git clone https://github.com/wiegehtki/nvjetson_opencv_gsi.git\n       cp nvjetson_opencv_gsi/*sh .\n       sudo chmod +x *sh\n       sudo su\n       ./nvidia2sudoers.sh\n       exit \n       cd ~\n       ./Installv2.3.8.sh\n```\n**Wichtig:** Der Benutzer **nvidia** wird dabei in die **sudoers** (Superuser) - Gruppe aufgenommen. Der Hintergrund ist, dass die Installation lange laufen wird (ca. 6-7 Stunden) und Ihr ansonsten immer wieder das Kennwort des Benutzers eingeben m\u00fcsst damit einige Installationsschritte mit **sudo** - Rechten durchgef\u00fchrt werden k\u00f6nnen. Das ist nervig und kann entsprechend mit den vorgenannten Schritten vermieden werden. Ihr k\u00f6nnt die sudo - Rechte nach der Installation bei Bedarf wieder wegnehmen, indem ihr im Terminal folgende Befehle ausf\u00fchrt:\n```\n   cd ~\n   sudo su\n   ./nvidiaNOsudoers.sh\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8717512021797373
      ],
      "excerpt": "Infos zu OpenCV findet Ihr hier: https://opencv.org/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8185254928179275,
        0.8152876480181622
      ],
      "excerpt": "Intro: https://www.youtube.com/watch?v=_ndzsZ66SLQ \nBasiswissen Objekterkennung mit YOLO: https://www.youtube.com/watch?v=WXuqsRGIyg4&t=1586s \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9098176974169331
      ],
      "excerpt": "Installation dieses Repository's auf dem NANO: https://www.youtube.com/watch?v=ZuGNQYPJqKk&t=2793s \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9717106327039013
      ],
      "excerpt": "Dazu den Wert von 1 auf 2 \u00e4ndern. Es wird dann der letztg\u00fcltige Stand der jeweiligen Version installiert: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.834045144016186
      ],
      "excerpt": "Verwendet bei der Installation bitte als Benutzer nvidia da leider etliche Scripte, die man im Internet findet und verwenden m\u00f6chte, diesen Benutzer hardcodiert haben. Alternativ m\u00fcsst Ihr solche 3rd Party - Scripte debuggen und anpassen. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9430264214296286,
        0.9769420979004304
      ],
      "excerpt": "Ein weiteres Terminalfenster \u00f6ffnen und mit cat Installation.log den Fortschritt der Installation kontrollieren. \nNach der Installation sollte der Rechner automatisch einen reboot ausf\u00fchren. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8514763608467749
      ],
      "excerpt": "Falls nicht, hier die Download-Links: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8074939156657442,
        0.9928369746570656,
        0.8773931054404585
      ],
      "excerpt": "H\u00e4nger beim Image vom April 2020: Version JP 4.4 vom 07.07.2020 oder Neuer benutzen \nInstallation l\u00e4uft durch aber beim Aufruf von ./smartcam.sh kommen Meldungen bez\u00fcglich fehlender Dateien: Wahrscheinlich passt die CUDA- bzw. cuDNN-Versionen nicht mehr zur vorkompilierten YOLO - Installation. Folgende Befehle sollten diesen Fehler beheben: \ncd ~/darknet/obj \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/wiegehtki/nvjetson_opencv_gsi/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C",
      "C++",
      "Cuda",
      "Shell",
      "Python",
      "CMake",
      "PowerShell",
      "Makefile",
      "Batchfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                  YOLO LICENSE\\n                             Version 2, July 29 2016\\n\\nTHIS SOFTWARE LICENSE IS PROVIDED \"ALL CAPS\" SO THAT YOU KNOW IT IS SUPER\\nSERIOUS AND YOU DON\\'T MESS AROUND WITH COPYRIGHT LAW BECAUSE YOU WILL GET IN\\nTROUBLE HERE ARE SOME OTHER BUZZWORDS COMMONLY IN THESE THINGS WARRANTIES\\nLIABILITY CONTRACT TORT LIABLE CLAIMS RESTRICTION MERCHANTABILITY. NOW HERE\\'S\\nTHE REAL LICENSE:\\n\\n0. Darknet is public domain.\\n1. Do whatever you want with it.\\n2. Stop emailing me about it!\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "nvjetson_opencv_gsi by Udo W\u00fcrtz, WIEGEHTKI.DE",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "nvjetson_opencv_gsi",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "wiegehtki",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/wiegehtki/nvjetson_opencv_gsi/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Wed, 29 Dec 2021 12:21:09 GMT"
    },
    "technique": "GitHub API"
  }
}