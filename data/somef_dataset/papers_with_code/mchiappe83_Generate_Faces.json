{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/mchiappe83/Generate_Faces",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-06-22T14:15:27Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-06-22T16:52:26Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8547805338571979
      ],
      "excerpt": "Some Links that will help you get better understanding of GAN's: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8091526284080166
      ],
      "excerpt": "Links from where you can see all variants of GAN's: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9438403822713569,
        0.9729587921349752
      ],
      "excerpt": "TensorFlow programs use a tensor data structure to represent all data -- only tensors are passed between operations in the computation graph. You can think of a TensorFlow tensor as an n-dimensional array or list. A tensor has a static type, a rank, and a shape. \nIn the TensorFlow system, tensors are described by a unit of dimensionality known as rank. Tensor rank is not the same as matrix rank. Tensor rank (sometimes referred to as order or degree or n-dimension) is the number of dimensions of the tensor. For example, the following tensor (defined as a Python list) has a rank of 2: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9738391885366882
      ],
      "excerpt": "A rank two tensor is what we typically think of as a matrix, a rank one tensor is a vector. For a rank two tensor you can access any element with the syntax t[i, j]. For a rank three tensor you would need to address an element with t[i, j, k]. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9559620853242675
      ],
      "excerpt": "Batch normalization is recommended in DCGAN model (as mentioned in original paper). Batch normalization helps as we initialize the BatchNorm Parameters to transform the input to zero mean/unit variance distributions but during training they can learn that any other distribution might be better. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9826698893207844
      ],
      "excerpt": "Answer Well, we know that normalization (shifting inputs to zero-mean and unit variance) is often used as a pre-processing step to make the data comparable across features. As the data flows through a deep network, the weights and parameters adjust those values, sometimes making the data too big or too small again - a problem the authors refer to as \"internal covariate shift\". By normalizing the data in each mini-batch, this problem is largely avoided. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8291600177127685
      ],
      "excerpt": "Answer: To encourage the discriminator to estimate soft probabilities rather than to extrapolate to extremely confident classification, we can use a technique called one-sided label smoothing. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9724527614301072
      ],
      "excerpt": "When is_training parameter of batch_normalisation is true the moving_mean and moving_variance need to be updated, by default the update_ops are placed in tf.GraphKeys.UPDATE_OPS so they need to be added as a dependency to the g_train_op, thus the location chosen by you is correct. Here's a link for more details and a possible implementation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8453723697656865
      ],
      "excerpt": "* Optimize generator for more times than discriminator. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/mchiappe83/Generate_Faces/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 20:37:02 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/mchiappe83/Generate_Faces/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "mchiappe83/Generate_Faces",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/mchiappe83/Generate_Faces/master/dlnd_face_generation.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8701086188863125
      ],
      "excerpt": "Some Links that will help you get better understanding of GAN's: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8441591556160959,
        0.8214240062596623
      ],
      "excerpt": "https://github.com/sugyan/tf-dcgan/blob/master/dcgan.py to get an idea on implementing leaky relu. \nhttps://github.com/sugyan/tf-dcgan/blob/master/dcgan.py to get an idea for implementing better DCGAN. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8699535516314665
      ],
      "excerpt": "https://github.com/soumith/ganhacks Here you can find all good tips and tricks to make GANs work. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/mchiappe83/Generate_Faces/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "HTML",
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Generate_Faces - Feedback and insights collected from reviews, forums & slack channel",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Generate_Faces",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "mchiappe83",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/mchiappe83/Generate_Faces/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 20:37:02 GMT"
    },
    "technique": "GitHub API"
  }
}