{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1811.02084"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "> N. Shazeer, Y. Cheng, N. Parmar, D. Tran, A. Vaswani, P. Koanantakool,\n> P. Hawkins, H. Lee, M. Hong, C. Young, R. Sepassi, and B. Hechtman.\n> [Mesh-TensorFlow: Deep learning for supercomputers.](https://arxiv.org/abs/1811.02084)\n> In _Neural Information Processing Systems_, 2018.\n\n```none\n@inproceedings{shazeer2018mesh,\n  author = {Noam Shazeer and Youlong Cheng and Niki Parmar and Dustin Tran and Ashish Vaswani and Penporn Koanantakool and Peter Hawkins and HyoukJoong Lee and Mingsheng Hong and Cliff Young and Ryan Sepassi and Blake Hechtman},\n  title = {{Mesh-TensorFlow}: Deep Learning for Supercomputers},\n  booktitle = {Neural Information Processing Systems},\n  year = {2018},\n}\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{shazeer2018mesh,\n  author = {Noam Shazeer and Youlong Cheng and Niki Parmar and Dustin Tran and Ashish Vaswani and Penporn Koanantakool and Peter Hawkins and HyoukJoong Lee and Mingsheng Hong and Cliff Young and Ryan Sepassi and Blake Hechtman},\n  title = {{Mesh-TensorFlow}: Deep Learning for Supercomputers},\n  booktitle = {Neural Information Processing Systems},\n  year = {2018},\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9353799258965515
      ],
      "excerpt": "mesh = mtf.Mesh(graph, \"my_mesh\") \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tensorflow/mesh",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "How to Contribute\nIssues\n\nPlease tag your issue with bug, feature request, or question to help us\n  effectively respond.\nPlease include the versions of TensorFlow and Mesh TensorFlow you are running\n  (run pip list | grep tensor)\nPlease provide the command line you ran as well as the log output.\n\nPull Requests\nPlease send in fixes and feature additions through Pull Requests.\nContributor License Agreement\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution,\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to https://cla.developers.google.com/ to see\nyour current agreements on file or to sign a new one.\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\nCode reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\nGitHub Help for more\ninformation on using pull requests.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-09-20T20:23:34Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-21T11:43:22Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Mesh TensorFlow (`mtf`) is a language for distributed deep learning, capable of\nspecifying a broad class of distributed tensor computations.  The purpose of\nMesh TensorFlow is to formalize and implement distribution strategies for your\ncomputation graph over your hardware/processors. For example: \"Split the batch\nover rows of processors and split the units in the hidden layer across columns\nof processors.\" Mesh TensorFlow is implemented as a layer over TensorFlow.\n\nWatch our [YouTube video](https://www.youtube.com/watch?v=HgGyWS40g-g).\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8841034725692192,
        0.9362509184486397,
        0.9293557781671267,
        0.8452906361537527,
        0.8485755377261596
      ],
      "excerpt": "for more sophisticated parallel computation are: \nThe parameters of the model do not fit on one device - e.g. a \n5-billion-parameter language model. \nAn example is so large that the activations do not fit on one device. - e.g. \nlarge 3D image model(experimental/unet.py). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8517892816178659,
        0.8925039230035318
      ],
      "excerpt": "A \"Mesh\" is an n-dimensional array of processors, connected by a network. \nEach tensor is distributed (split and/or replicated) across all processors \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8351351320848085
      ],
      "excerpt": "Tensor dimensions and mesh dimensions are named.  The layouts of all tensors \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.967607819002736,
        0.8967430122034442
      ],
      "excerpt": "The implementation of an operation involves parallel computation on all \n  processors in the mesh, and sometimes also collective communication.  A \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.951860938462543
      ],
      "excerpt": "  resident on that processor, and produces the slice of the output that goes on \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9722708193352143,
        0.9598726441778868
      ],
      "excerpt": "On each processor, compute the einsum of the slices of the two operands that \n  are local to that processor. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8276459594072967
      ],
      "excerpt": "  on the resulting slices - summing across any mesh dimensions over which the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8725092895510242
      ],
      "excerpt": "For example, in a data-parallel layout where the \"batch\" dimension is split, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9161829677044951,
        0.8248437104715688,
        0.9202271464515759,
        0.9427357822555852
      ],
      "excerpt": "While results do not depend on layout (except in the realm of roundoff errors \nand random seeds), performance and memory consumption depend heavily on layout. \nFortunately, the auto_mtf subpackage provides a method for automatically \nchoosing a layout.  For more information about what auto_mtf is doing to choose \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9307810088700289,
        0.8434963032177618,
        0.8763291181531313
      ],
      "excerpt": "It is possible for advanced users to eke out additional performance by tuning \nthe layout (and model) further.  Mesh TensorFlow helps by accumulating and \nprinting counters of computation/communication.  To start, here are some \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9623890127362654
      ],
      "excerpt": "It is illegal for two dimensions of the same tensor to be split across the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8340832472958476,
        0.889678218273001,
        0.9087034030438377
      ],
      "excerpt": "  mesh-dimensions are used to split dimensions of the inputs or outputs. \n  Otherwise, computation is duplicated. \nTo keep the ratio of compute/communication high (i.e. not be bandwidth-bound), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8338301272059301,
        0.9581092577061044
      ],
      "excerpt": "  data-parallelism case, where we want a large batch size per processor to avoid \n  spending most of our time communicating. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9418390233859543,
        0.9199578585689444,
        0.8508458960531837,
        0.8997734753397594
      ],
      "excerpt": "part of a TensorFlow graph.  The user first builds a mtf.Graph (the analog of \na TensorFlow graph) made up of mtf.Tensors and mtf.Operations.  As in \nTensorFlow, this graph consists of simple Python objects.  The user then creates \na mtf.Lowering object, which lowers the mtf.Graph into TensorFlow, adding to \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9699431978979831,
        0.8591796071452367
      ],
      "excerpt": "The Mesh TensorFlow language is nearly identical to TensorFlow, with the \nfamiliar notion of a Graph, Tensors, Operations, and automatic gradient \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8205377855782863,
        0.9767676869511881,
        0.8640417225350904
      ],
      "excerpt": "A Mesh is a n-dimensional array of processors with named dimensions.  Each \nTensor is assigned to a Mesh, instead of a device. \nEach Tensor has a static Shape, which is a tuple of different \"Dimensions\". \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9341959302618957,
        0.9070272076203981
      ],
      "excerpt": "\"layout\", is an injective partial map specifying which dimensions of the tensor \nare (evenly) split across which dimensions of the mesh.  No dimension of a \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8238924177512225
      ],
      "excerpt": "output_shape), using the (named) Dimensions as the symbols.  Matrix \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8640803498583095,
        0.9542896846966525
      ],
      "excerpt": "as special cases of mtf.einsum, though the familiar interfaces are also \nsupported.  The operation is lowered to slice-wise tf.einsums, followed by \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8306399982619806,
        0.8338677649815108,
        0.8616141173928973
      ],
      "excerpt": "mtf.reshape(x, new_shape) is used to change a Tensor's shape, potentially \nleading to a new tensor layout and hence network communication. \nMesh TensorFlow works on CPU, GPU and TPU.  The TPU implementation is very \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9270934107499377
      ],
      "excerpt": "TPU meshes are implemented in with SimdMeshImpl.  In this case, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9404324014098023
      ],
      "excerpt": "the perspective of one core, and this same program runs on every core, relying \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9188548510189827,
        0.8100180616839904,
        0.8254160944536865,
        0.8635973536751756
      ],
      "excerpt": "piggy-backs on the TPU data-parallelism infrastructure, which operates the same \nway.  This \"SIMD\" approach keeps the TensorFlow and XLA graphs from growing with \nthe number of cores.  The differences between cores are as follows: \ndifferent slices of the variables (this works now) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.979946610779651
      ],
      "excerpt": "different slices of the infed and outfed tensors.  We currently work around \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8360217812460669
      ],
      "excerpt": "The input pipeline of Mesh Tensorflow models might become a bottleneck, when \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8225371810303819,
        0.8732358738501851,
        0.8876659385427095
      ],
      "excerpt": "folder. We suggest that you give them a try when your input is so large that \nrunning Mesh Tensorflow models with the default APIs is almost infeasible. \nTo be more specific: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9635121162802103
      ],
      "excerpt": "  of tens of millions of pixels). We provide a new input pipeline: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.965593371078216
      ],
      "excerpt": "We believe that some debugging would be required for it to work on GPUs. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Mesh TensorFlow: Model Parallelism Made Easier",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tensorflow/mesh/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 207,
      "date": "Tue, 21 Dec 2021 17:36:05 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/tensorflow/mesh/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "tensorflow/mesh",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/tensorflow/mesh/master/oss_scripts/oss_release.sh",
      "https://raw.githubusercontent.com/tensorflow/mesh/master/oss_scripts/oss_pip_install.sh",
      "https://raw.githubusercontent.com/tensorflow/mesh/master/oss_scripts/oss_tests.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To install the latest stable version, run\n\n```sh\npip install mesh-tensorflow\n```\n\nTo install the latest development version, run\n\n```sh\npip install -e \"git+https://github.com/tensorflow/mesh.git#:egg=mesh-tensorflow\"\n```\n\nInstalling `mesh-tensorflow` does not automatically install or update\nTensorFlow. We recommend installing it via `pip install tensorflow` or `pip\ninstall tensorflow-gpu`. See TensorFlow\u2019s\n[installation instructions for details](https://www.tensorflow.org/install/).\nIf you're using a development version of Mesh TensorFlow, you may need to\nuse TensorFlow's nightly package (`tf-nightly`).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.905920805528604
      ],
      "excerpt": "different from the CPU/GPU implementation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9587474690805893
      ],
      "excerpt": "git clone https://github.com/tensorflow/mesh.git \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9133368656218674
      ],
      "excerpt": "import mesh_tensorflow.auto_mtf \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/tensorflow/mesh/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'\\n                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Mesh TensorFlow - Model Parallelism Made Easier",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "mesh",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "tensorflow",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tensorflow/mesh/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "dustinvtran",
        "body": "",
        "dateCreated": "2018-12-11T00:00:21Z",
        "datePublished": "2018-12-11T00:09:43Z",
        "html_url": "https://github.com/tensorflow/mesh/releases/tag/0.0.5",
        "name": "v0.0.5",
        "tag_name": "0.0.5",
        "tarball_url": "https://api.github.com/repos/tensorflow/mesh/tarball/0.0.5",
        "url": "https://api.github.com/repos/tensorflow/mesh/releases/14454405",
        "zipball_url": "https://api.github.com/repos/tensorflow/mesh/zipball/0.0.5"
      },
      {
        "authorType": "User",
        "author_name": "dustinvtran",
        "body": "",
        "dateCreated": "2018-11-13T04:31:51Z",
        "datePublished": "2018-11-13T04:37:41Z",
        "html_url": "https://github.com/tensorflow/mesh/releases/tag/0.0.4",
        "name": "v0.0.4",
        "tag_name": "0.0.4",
        "tarball_url": "https://api.github.com/repos/tensorflow/mesh/tarball/0.0.4",
        "url": "https://api.github.com/repos/tensorflow/mesh/releases/13966807",
        "zipball_url": "https://api.github.com/repos/tensorflow/mesh/zipball/0.0.4"
      },
      {
        "authorType": "User",
        "author_name": "dustinvtran",
        "body": "",
        "dateCreated": "2018-10-29T23:13:34Z",
        "datePublished": "2018-10-30T00:58:19Z",
        "html_url": "https://github.com/tensorflow/mesh/releases/tag/0.0.3",
        "name": "v0.0.3",
        "tag_name": "0.0.3",
        "tarball_url": "https://api.github.com/repos/tensorflow/mesh/tarball/0.0.3",
        "url": "https://api.github.com/repos/tensorflow/mesh/releases/13721624",
        "zipball_url": "https://api.github.com/repos/tensorflow/mesh/zipball/0.0.3"
      },
      {
        "authorType": "User",
        "author_name": "dustinvtran",
        "body": "",
        "dateCreated": "2018-10-17T17:51:05Z",
        "datePublished": "2018-10-30T00:57:34Z",
        "html_url": "https://github.com/tensorflow/mesh/releases/tag/0.0.2",
        "name": "v0.0.2",
        "tag_name": "0.0.2",
        "tarball_url": "https://api.github.com/repos/tensorflow/mesh/tarball/0.0.2",
        "url": "https://api.github.com/repos/tensorflow/mesh/releases/13721618",
        "zipball_url": "https://api.github.com/repos/tensorflow/mesh/zipball/0.0.2"
      }
    ],
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Please go through the\n[Transformer tutorial](https://cloud.google.com/tpu/docs/tutorials/transformer).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```sh\npip install tensorflow_datasets\n\ncd mesh/\nDATA_DIR=gs://noam-mtf/data\nMODEL_DIR=gs://noam-mtf/transformer_standalone\nTPU=noam-mtf-donut\n\n#: MODEL HPARAMS AND DIRECTORY  (uncomment one)\n#: base model\nMODEL=./transformer/gin/model_base.gin\n#: 5B parameters (too big for this dataset, only trains with model-parallelism)\n#: MODEL=./transformer/gin/model_5b.gin\n\n#: UNCOMMENT ONE OF THESE\n#: Data-parallelism\nLAYOUT=./transformer/gin/layout_data_parallel.gin\n#: Model-parallelism\n#: LAYOUT=./transformer/gin/layout_model_parallel.gin\n#: Data-parallelism and Model-Parallelism\n#: LAYOUT=./transformer/gin/layout_data_and_model_parallel.gin\n\n#: TRAIN\npython examples/transformer_standalone.py \\\n  --tpu=$TPU --data_dir=$DATA_DIR --model_dir=$MODEL_DIR --gin_file=$MODEL \\\n  --gin_file=$LAYOUT --gin_param=\"run.mode='train'\"\n\n#: EVAL\npython examples/transformer_standalone.py \\\n  --tpu=$TPU --data_dir=$DATA_DIR --model_dir=$MODEL_DIR --gin_file=$MODEL \\\n  --gin_file=$LAYOUT --gin_param=\"run.mode='evaluate'\"\n```\n\nThe above code will train on the LM1B language modeling benchmark, as specified\nin `examples/transformer_standalone_defaults.gin`. To train a\nsequence-to-sequence model on WMT14 en-de, change `utils.run.dataset` to\n`wmt_translate_ende/ende_subwords8k_t2t` and set `utils.run.mode` to `True`.\nNote that the `wmt_translate_ende/ende_subwords8k_t2t` dataset was removed from\nTensorFlow Datasets in\n[commit 211cb6f](https://github.com/tensorflow/datasets/commit/211cb6f082c5cc3c482e37d70234142a8fda2db3),\nso in order to train a model using this dataset you need to install a version of\nTFDS before this commit. Then, you can decode the WMT en-de development set\nand evaluate it using [SacreBLEU](https://github.com/mjpost/sacreBLEU) like so:\n\n```\n#: INFER\npip3 install sacrebleu\nmkdir ~/input ~/output\nDECODE_INPUT=/home/$USER/input/ende.dev\nDECODE_OUTPUT=/home/$USER/output/ende.dev.out\n~/.local/bin/sacrebleu -t wmt13 -l en-de --echo src > $DECODE_INPUT\npython examples/transformer_standalone.py \\\n  --tpu=$TPU --data_dir=$DATA_DIR --model_dir=$MODEL_DIR --gin_file=$MODEL \\\n  --gin_file=$LAYOUT \\\n  --gin_param=\"decode_from_file.input_filename='$DECODE_INPUT'\" \\\n  --gin_param=\"decode_from_file.output_filename='$DECODE_OUTPUT'\" \\\n  --gin_param=\"run.mode='infer'\"\n\n#: Compute BLEU score for dev set\ncat $DECODE_OUTPUT | ~/.local/bin/sacrebleu -t wmt13 -l en-de -tok intl\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "  This toy model contains two fully-connected layers which aim to train a\n  identity function: f(x) = x. Since there are 8 TPU cores, we can arbitrary\n  change the FLAGS.mesh_shape and FLAGS.layout to achieve different\n  data-parallelism and model-parallelism strategies.\n\n```sh\nMODEL_DIR=gs://xxxx\nTPU_NAME=ylc-mtf-donut\n\n#: 2 ways data-parallelism and 4 ways model-parallelism.\n#: In this configuration, we split the batch dimension into 2 cores and the\n#: hidden dimension into 4 cores.\npython examples/toy_model_tpu.py \\\n  --tpu=$TPU \\\n  --model_dir=$MODEL_DIR \\\n  --io_size=8 \\\n  --hidden_size=8 \\\n  --mesh_shape='x:2;y:4' \\\n  --layout='batch:x;hidden:y'\n\n#: 8 ways model-parallelism.\n#: In this configuration, We split the hidden dimension into 8 cores.\npython examples/toy_model_tpu.py \\\n  --tpu=$TPU \\\n  --model_dir=$MODEL_DIR \\\n  --io_size=8 \\\n  --hidden_size=8 \\\n  --mesh_shape='all:8' \\\n  --layout='hidden:all'\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Note: It requires `tensorflow>=1.11.0`.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```sh\npip install tensorflow_datasets\n\ncd mesh/\nDATA_DIR=gs://noam-mtf/data\nMODEL_DIR=gs://noam-mtf/transformer_standalone\nTPU=noam-mtf-donut\n\n#: MODEL HPARAMS AND DIRECTORY  (uncomment one)\n#: base model\nMODEL=./transformer/gin/model_base.gin\n#: 5B parameters (too big for this dataset, only trains with model-parallelism)\n#: MODEL=./transformer/gin/model_5b.gin\n\n#: UNCOMMENT ONE OF THESE\n#: Data-parallelism\nLAYOUT=./transformer/gin/layout_data_parallel.gin\n#: Model-parallelism\n#: LAYOUT=./transformer/gin/layout_model_parallel.gin\n#: Data-parallelism and Model-Parallelism\n#: LAYOUT=./transformer/gin/layout_data_and_model_parallel.gin\n\n#: TRAIN\npython examples/transformer_standalone.py \\\n  --tpu=$TPU --data_dir=$DATA_DIR --model_dir=$MODEL_DIR --gin_file=$MODEL \\\n  --gin_file=$LAYOUT --gin_param=\"run.mode='train'\"\n\n#: EVAL\npython examples/transformer_standalone.py \\\n  --tpu=$TPU --data_dir=$DATA_DIR --model_dir=$MODEL_DIR --gin_file=$MODEL \\\n  --gin_file=$LAYOUT --gin_param=\"run.mode='evaluate'\"\n```\n\nThe above code will train on the LM1B language modeling benchmark, as specified\nin `examples/transformer_standalone_defaults.gin`. To train a\nsequence-to-sequence model on WMT14 en-de, change `utils.run.dataset` to\n`wmt_translate_ende/ende_subwords8k_t2t` and set `utils.run.mode` to `True`.\nNote that the `wmt_translate_ende/ende_subwords8k_t2t` dataset was removed from\nTensorFlow Datasets in\n[commit 211cb6f](https://github.com/tensorflow/datasets/commit/211cb6f082c5cc3c482e37d70234142a8fda2db3),\nso in order to train a model using this dataset you need to install a version of\nTFDS before this commit. Then, you can decode the WMT en-de development set\nand evaluate it using [SacreBLEU](https://github.com/mjpost/sacreBLEU) like so:\n\n```\n#: INFER\npip3 install sacrebleu\nmkdir ~/input ~/output\nDECODE_INPUT=/home/$USER/input/ende.dev\nDECODE_OUTPUT=/home/$USER/output/ende.dev.out\n~/.local/bin/sacrebleu -t wmt13 -l en-de --echo src > $DECODE_INPUT\npython examples/transformer_standalone.py \\\n  --tpu=$TPU --data_dir=$DATA_DIR --model_dir=$MODEL_DIR --gin_file=$MODEL \\\n  --gin_file=$LAYOUT \\\n  --gin_param=\"decode_from_file.input_filename='$DECODE_INPUT'\" \\\n  --gin_param=\"decode_from_file.output_filename='$DECODE_OUTPUT'\" \\\n  --gin_param=\"run.mode='infer'\"\n\n#: Compute BLEU score for dev set\ncat $DECODE_OUTPUT | ~/.local/bin/sacrebleu -t wmt13 -l en-de -tok intl\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```sh\ngit clone https://github.com/tensorflow/tensor2tensor.git\ncd tensor2tensor/\npip install --user  .\n```\n\nBefore running the model, you need to prepare the training data and bucket for\nstoring checkpoints. Refer to the\n[Transformer tutorial](https://cloud.google.com/tpu/docs/tutorials/transformer)\nto learn how to generate the training data and create buckets.\n\n```sh\nCONF=mtf_transformer_paper_tr_0_mesh_8\nNAME=ende_$CONF\\_0828\nMODEL=mtf_transformer\nPROBLEM=translate_ende_wmt32k_packed\n\nDATA_DIR=gs://xxxx\nOUT_DIR=gs://xxxx\nTPU_NAME=ylc-mtf-donut\n\ntensor2tensor/bin/t2t-trainer \\\n  --model=$MODEL \\\n  --hparams_set=$CONF \\\n  --problem=$PROBLEM \\\n  --train_steps=10000 \\\n  --eval_steps=200 \\\n  --data_dir=$DATA_DIR \\\n  --output_dir=$OUT_DIR \\\n  --use_tpu=True \\\n  --cloud_tpu_name=$TPU_NAME\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "  This toy model contains two fully-connected layers which aim to train a\n  identity function: f(x) = x. Since there are 8 TPU cores, we can arbitrary\n  change the FLAGS.mesh_shape and FLAGS.layout to achieve different\n  data-parallelism and model-parallelism strategies.\n\n```sh\nMODEL_DIR=gs://xxxx\nTPU_NAME=ylc-mtf-donut\n\n#: 2 ways data-parallelism and 4 ways model-parallelism.\n#: In this configuration, we split the batch dimension into 2 cores and the\n#: hidden dimension into 4 cores.\npython examples/toy_model_tpu.py \\\n  --tpu=$TPU \\\n  --model_dir=$MODEL_DIR \\\n  --io_size=8 \\\n  --hidden_size=8 \\\n  --mesh_shape='x:2;y:4' \\\n  --layout='batch:x;hidden:y'\n\n#: 8 ways model-parallelism.\n#: In this configuration, We split the hidden dimension into 8 cores.\npython examples/toy_model_tpu.py \\\n  --tpu=$TPU \\\n  --model_dir=$MODEL_DIR \\\n  --io_size=8 \\\n  --hidden_size=8 \\\n  --mesh_shape='all:8' \\\n  --layout='hidden:all'\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1166,
      "date": "Tue, 21 Dec 2021 17:36:05 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To illustrate, let us consider a simple model for the MNIST image-classification\ntask.  Our network has one hidden layer with 1024 units, and an output layer\nwith 10 units (corresponding to the 10 digit classes).\n\nThe code consists of two parts, the first describing the mathematical\noperations, and the second describing the devices and tensor/computation layout.\nFor the full example, see [`examples/mnist.py`](\nhttps://github.com/tensorflow/mesh/blob/master/examples/mnist.py).\nTODO(noam): verify that this code works.\n\n```Python\n#: tf_images is a tf.Tensor with shape [100, 28, 28] and dtype tf.float32\n#: tf_labels is a tf.Tensor with shape [100] and dtype tf.int32\ngraph = mtf.Graph()\nmesh = mtf.Mesh(graph, \"my_mesh\")\nbatch_dim = mtf.Dimension(\"batch\", 100)\nrows_dim = mtf.Dimension(\"rows\", 28)\ncols_dim = mtf.Dimension(\"cols\", 28)\nhidden_dim = mtf.Dimension(\"hidden\", 1024)\nclasses_dim = mtf.Dimension(\"classes\", 10)\nimages = mtf.import_tf_tensor(\n    mesh, tf_images, shape=[batch_dim, rows_dim, cols_dim])\nlabels = mtf.import_tf_tensor(mesh, tf_labels, [batch_dim])\nw1 = mtf.get_variable(mesh, \"w1\", [rows_dim, cols_dim, hidden_dim])\nw2 = mtf.get_variable(mesh, \"w2\", [hidden_dim, classes_dim])\n#: einsum is a generalization of matrix multiplication (see numpy.einsum)\nhidden = mtf.relu(mtf.einsum(images, w1, output_shape=[batch_dim, hidden_dim]))\nlogits = mtf.einsum(hidden, w2, output_shape=[batch_dim, classes_dim])\nloss = mtf.reduce_mean(mtf.layers.softmax_cross_entropy_with_logits(\n    logits, mtf.one_hot(labels, classes_dim), classes_dim))\nw1_grad, w2_grad = mtf.gradients([loss], [w1, w2])\nupdate_w1_op = mtf.assign(w1, w1 - w1_grad * 0.001)\nupdate_w2_op = mtf.assign(w2, w2 - w2_grad * 0.001)\n```\n\nIn the code above, we have built a Mesh TensorFlow graph, which is simply\na Python structure.  We have completely defined the mathematical operations.\nIn the code below, we specify the mesh of processors and the layout of the\ncomputation.\n\n```Python\ndevices = [\"gpu:0\", \"gpu:1\", \"gpu:2\", \"gpu:3\"]\nmesh_shape = [(\"all_processors\", 4)]\nlayout_rules = [(\"batch\", \"all_processors\")]\nmesh_impl = mtf.placement_mesh_impl.PlacementMeshImpl(\n    mesh_shape, layout_rules, devices)\nlowering = mtf.Lowering(graph, {mesh:mesh_impl})\ntf_update_ops = [lowering.lowered_operation(update_w1_op),\n                 lowering.lowered_operation(update_w2_op)]\n```\n\nThe particular layout above implements data-parallelism, splitting the batch of\nexamples evenly across all four processors.  Any Tensor with a \"batch\" dimension\n(e.g. `images`, `h`, `logits`, and their gradients) is split in that dimension\nacross all processors, while any tensor without a \"batch\" dimension (e.g. the\nmodel parameters) is replicated identically on every processor.\n\nAlternatively, for model-parallelism, we can set\n`layout_rules=[(\"hidden\", \"all_processors\")]`.  In this case,\nany tensor with a \"hidden\" dimension (e.g. `hidden`, `w1`, `w2`)  is split,\nwhile any other tensor (e.g. `image`, `logits`) is fully replicated.\n\nWe can even combine data-parallelism and model-parallelism on a 2-dimensional\nmesh of processors.  We split the batch along one dimension of the mesh, and the\nunits in the hidden layer along the other dimension of the mesh, as below.  In\nthis case, the hidden layer is actually tiled between the four processors, being\nsplit in both the \"batch\" and \"hidden_units\" dimensions.\n\n```Python\nmesh_shape = [(\"processor_rows\", 2), (\"processor_cols\", 2)]\nlayout_rules = [(\"batch\", \"processor_rows\"), (\"hidden\", \"processor_cols\")]\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Take our example `Tensor` `image_batch` with shape: \n`[(\"batch\", 100), (\"rows\", 28\"), (\"cols\", 28), (\"channels\", 3)]`\n\nAssume that this `Tensor` is assigned to a mesh of 8 processors with shape:\n`[(\"processor_rows\", 2), (\"processor_cols\", 4)]`\n\n* If we use an empty set of layout rules `[]`, we get no splitting.  Each\n  processor contains the whole `Tensor`.\n\n* If we use the layout rules `\"batch:processor_cols\"`, then the `\"batch\"`\n  dimension of the `Tensor` is split across the `\"processor_cols\"` dimension of\n  the batch.  This means that each processor contains a Tensor slice with shape\n  `[25, 28, 28, 3]`.  For example, processors (0, 3) and (1, 3) contain\n  identical slices - `image_batch[75:100, :, :, :]`.\n\n* If we use the layout rules `\"rows:processor_rows;cols:processor_cols\"`, \n  then the image is split in two dimensions, with each processor containing one\n  spatial tile with shape `[100, 14, 7, 3]`.   For example, processor (0, 1)\n  contains the slice `image_batch[:, 0:14, 7:14, :]`.\n\nSome layout rules would lead to illegal layouts:\n\n* `\"batch:processor_rows;rows:processor_rows\"` is illegal because two tensor\n  dimensions could not be split across the same mesh dimension.\n\n* `\"channels:processor_rows\"` is illegal because the size of the tensor\n  dimension is not evenly divisible by the size of the mesh dimension.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "TODO(trandustin,ylc): update given mtf pypi package\n\n```sh\nctpu up -name=ylc-mtf-donut -tf-version=nightly -tpu-size=v2-8 -zone=us-central1-b\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}