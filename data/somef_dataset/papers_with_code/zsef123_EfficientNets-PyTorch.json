{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1905.11946"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zsef123/EfficientNets-PyTorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-05-30T13:20:42Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-02T12:10:32Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9717875137101485
      ],
      "excerpt": "A PyTorch implementation of EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9709349755409172,
        0.8008071228545321,
        0.9413599531778414,
        0.9310019991908102,
        0.8996460734080466
      ],
      "excerpt": "Implement based on Official TF Repo. Only opened EfficientNet is included. <br> \nThis repo not contains baseline network search(Mnas-Net) and compound coefficient search methods.<br> \n<b>Some details(HyperParams, transform, EMA ...) are different with Original repo.</b> \nThis is not end-to-end imagenet trainning weight. \nUsing the Official TF Pretrained weight. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8715237653670386
      ],
      "excerpt": "Implementation of Resolution Change \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A PyTorch implementation of \" EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks.\"",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zsef123/EfficientNets-PyTorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 43,
      "date": "Thu, 23 Dec 2021 03:12:24 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zsef123/EfficientNets-PyTorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "zsef123/EfficientNets-PyTorch",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/zsef123/EfficientNets-PyTorch/master/pretrained_example.ipynb"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zsef123/EfficientNets-PyTorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "EfficientNet",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "EfficientNets-PyTorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "zsef123",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zsef123/EfficientNets-PyTorch/blob/master/readme.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 291,
      "date": "Thu, 23 Dec 2021 03:12:24 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "pytorch",
      "efficientnet",
      "deep-learning"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\npython3 main.py -h\nusage: main.py [-h] --save_dir SAVE_DIR [--root ROOT] [--gpus GPUS]\n               [--num_workers NUM_WORKERS] [--model {b0}] [--epoch EPOCH]\n               [--batch_size BATCH_SIZE] [--test]\n               [--dropout_rate DROPOUT_RATE]\n               [--dropconnect_rate DROPCONNECT_RATE] [--optim {adam,rmsprop}]\n               [--lr LR] [--beta [BETA [BETA ...]]] [--momentum MOMENTUM]\n               [--eps EPS] [--decay DECAY]\n\nPytorch EfficientNet\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --save_dir SAVE_DIR   Directory name to save the model\n  --root ROOT           The Directory of data path.\n  --gpus GPUS           Select GPU Numbers | 0,1,2,3 |\n  --num_workers NUM_WORKERS\n                        Select CPU Number workers\n  --model {b0}          The type of Efficient net.\n  --epoch EPOCH         The number of epochs\n  --batch_size BATCH_SIZE\n                        The size of batch\n  --test                Only Test\n  --dropout_rate DROPOUT_RATE\n  --dropconnect_rate DROPCONNECT_RATE\n  --optim {adam,rmsprop}\n  --lr LR               Base learning rate when train batch size is 256.\n  --beta [BETA [BETA ...]]\n  --momentum MOMENTUM\n  --eps EPS\n  --decay DECAY\n```\n\n<hr>\n\n",
      "technique": "Header extraction"
    }
  ]
}