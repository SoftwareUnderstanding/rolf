{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "https://github.com/tensorflow/models\n\nhttps://cloud.google.com/solutions/creating-object-detection-application-tensorflow\n\nhttps://github.com/tensorflow/models/blob/master/research/object_detection/object_detection_tutorial.ipynb\n\nhttps://github.com/GoogleCloudPlatform/tensorflow-object-detection-example/blob/master/object_detection_app/app.py\n\nhttps://tensorflow-object-detection-api-tutorial.readthedocs.io/en/latest/training.html",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9017912595277376
      ],
      "excerpt": "$ git clone https://github.com/raycad/object-detection.git \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9787862678699186
      ],
      "excerpt": "$ cp -rf object_detection_tutorial/* object-detection/research/object_detection \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9985853347032329
      ],
      "excerpt": "(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research$ export PYTHONPATH=~/dev/tensorflow/object-detection:~/dev/tensorflow/object-detection/research:~/dev/tensorflow/object-detection/research/slim \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/raycad/object-detection",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "How to Contribute\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\nContributor License Agreement\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to https://cla.developers.google.com/ to see\nyour current agreements on file or to sign a new one.\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\nCode reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\nGitHub Help for more\ninformation on using pull requests.\nCommunity Guidelines\nThis project follows Google's Open Source Community\nGuidelines.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-04-27T23:49:52Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-06-14T07:24:49Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9370731437017926,
        0.8320887847443593
      ],
      "excerpt": "The goal of this tutorial is to guide you how to apply Faster-RCNN to build and train step by step a model for the specific problem. \nRegarding the concept of Faster-RCNN please take a look at the paper links:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9269525387068506
      ],
      "excerpt": "NOTE: Every time the \"tensorflow_cpu\" virtual environment is exited, the PYTHONPATH variable is reset and needs to be set up again \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.88040654354013
      ],
      "excerpt": "Now that training is complete, the last step is to generate the frozen inference graph (.pb file). From the /object_detection folder, issue the following command, where \u201cXXXX\u201d in \"model.ckpt-XXXX\" should be replaced with the highest-numbered .ckpt file in the training folder: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Build and train object detection models using tensorflow",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n#: Download the latest Anaconda\n$ wget https://repo.anaconda.com/archive/Anaconda3-2019.03-Linux-x86_64.sh\n\n$ chmod a+x Anaconda3-2019.03-Linux-x86_64.sh\n\n#: Install the Anaconda \n$ ./Anaconda3-2019.03-Linux-x86_64.sh\n\n#: Activating the Installation\n$ source ~/.bashrc\n\n#: Install essential development packages\n$ sudo apt install build-essential\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/raycad/object-detection/releases",
    "technique": "GitHub API"
  },
  "faq": [
    {
      "confidence": [
        1
      ],
      "excerpt": "In **QC Process** we need to manually inspect the products to verify if the given icons on the products shown or not after performing an action. This tutorial will guide you how to apply **Faster RCNN** to automate testing HMI by recognizing the given icons shown or not in each test case.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```\nINFO:tensorflow:global step 5778: loss = 0.0613 (2.646 sec/step)\nINFO:tensorflow:global step 5778: loss = 0.0613 (2.646 sec/step)\nINFO:tensorflow:global step 5779: loss = 0.0551 (2.673 sec/step)\nINFO:tensorflow:global step 5779: loss = 0.0551 (2.673 sec/step)\nINFO:tensorflow:global step 5780: loss = 0.0558 (2.737 sec/step)\nINFO:tensorflow:global step 5780: loss = 0.0558 (2.737 sec/step)\nINFO:tensorflow:global step 5781: loss = 0.0759 (2.663 sec/step)\nINFO:tensorflow:global step 5781: loss = 0.0759 (2.663 sec/step)\nINFO:tensorflow:global step 5782: loss = 0.0798 (2.706 sec/step)\nINFO:tensorflow:global step 5782: loss = 0.0798 (2.706 sec/step)\nINFO:tensorflow:global step 5783: loss = 0.0396 (2.661 sec/step)\nINFO:tensorflow:global step 5783: loss = 0.0396 (2.661 sec/step)\nKilled\n```\n\nIt was caused by out-of-memory. Please check your RAM consumption.\n\n",
      "technique": "Header extraction"
    }
  ],
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 20 Dec 2021 17:51:56 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/raycad/object-detection/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "raycad/object-detection",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/syntaxnet/Dockerfile",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/syntaxnet/dragnn/viz/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/gan/tutorial.ipynb",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/slim/slim_walkthrough.ipynb",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/slim/nets/mobilenet/mobilenet_example.ipynb",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/syntaxnet/examples/dragnn/interactive_text_analyzer.ipynb",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/syntaxnet/examples/dragnn/trainer_tutorial.ipynb",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/deeplab/deeplab_demo.ipynb",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/nst_blogpost/4_Neural_Style_Transfer_with_Eager_Execution.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/gan/cifar/launch_jobs.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/gan/mnist_estimator/launch_jobs.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/gan/pix2pix/launch_jobs.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/gan/mnist/launch_jobs.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/gan/image_compression/launch_jobs.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/cognitive_mapping_and_planning/scripts/script_preprocess_annoations_S3DIS.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/cognitive_mapping_and_planning/scripts/script_preprocess_meshes_S3DIS.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/cognitive_mapping_and_planning/scripts/script_download_init_models.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/cognitive_mapping_and_planning/scripts/script_test_pretrained_models.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/cognitive_mapping_and_planning/patches/apply_patches.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/brain_coder/single_task/launch_tuning.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/brain_coder/single_task/launch_training.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/cognitive_planning/train_supervised_active_vision.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/feelvos/train.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/feelvos/eval.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/feelvos/datasets/download_and_convert_davis17.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/feelvos/correlation_cost/get_code.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/feelvos/correlation_cost/fix_code.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/feelvos/correlation_cost/build.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/feelvos/correlation_cost/clone_dependencies.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/feelvos/correlation_cost/compile.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/swivel/distributed.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/lfads/synth_data/run_generate_synth_data.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/fivo/experimental/run.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/fivo/bin/run_train.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/fivo/bin/run_eval.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/fivo/bin/run_sample.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/fivo/bin/run_tests.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/fivo/bin/download_pianorolls.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/deep_speech/run_deep_speech.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/im2txt/im2txt/data/download_and_preprocess_mscoco.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/cvt_text/fetch_data.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/slim/scripts/export_mobilenet.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/slim/scripts/finetune_inception_v1_on_flowers.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/slim/scripts/finetune_inception_resnet_v2_on_flowers.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/slim/scripts/train_lenet_on_mnist.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/slim/scripts/finetune_resnet_v1_50_on_flowers.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/slim/scripts/train_cifarnet_on_cifar10.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/slim/scripts/finetune_inception_v3_on_flowers.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/slim/datasets/download_and_convert_imagenet.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/slim/datasets/download_imagenet.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/video_prediction/download_data.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/syntaxnet/dragnn/viz/compile-minified.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/syntaxnet/dragnn/viz/develop.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/syntaxnet/dragnn/tools/model_trainer_test.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/syntaxnet/dragnn/conll2017/conll_parser_trainer.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/syntaxnet/examples/dragnn/test_run_all_tutorials.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/syntaxnet/syntaxnet/demo.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/syntaxnet/syntaxnet/parser_trainer_test.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/syntaxnet/docker-devel/build_devel.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/syntaxnet/docker-devel/build_wheels.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/deeplab/local_test.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/deeplab/local_test_mobilenetv2.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/deeplab/datasets/download_and_convert_voc2012.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/deeplab/datasets/convert_cityscapes.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/deeplab/datasets/download_and_convert_ade20k.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/inception/inception/data/download_and_preprocess_flowers_mac.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/inception/inception/data/download_and_preprocess_imagenet.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/inception/inception/data/download_imagenet.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/inception/inception/data/download_and_preprocess_flowers.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/object_detection/dataset_tools/download_and_preprocess_mscoco.sh",
      "https://raw.githubusercontent.com/raycad/object-detection/master/research/object_detection/dataset_tools/create_pycocotools_package.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n#: [NOTE]: Install one by one package\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ conda install -c anaconda protobuf\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install pillow\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install lxml\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install Cython\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install jupyter\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install matplotlib\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install pandas\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install opencv-python\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install pycocotools\n\n#: Upgrade the tensorflow. It works with tensorflow 1.13.0\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install --upgrade tensorflow\n\n$ pip list | grep tensorflow\t\n\ttensorflow           1.13.1  \n\ttensorflow-estimator 1.13.0  \n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n#: Download the latest Anaconda\n$ wget https://repo.anaconda.com/archive/Anaconda3-2019.03-Linux-x86_64.sh\n\n$ chmod a+x Anaconda3-2019.03-Linux-x86_64.sh\n\n#: Install the Anaconda \n$ ./Anaconda3-2019.03-Linux-x86_64.sh\n\n#: Activating the Installation\n$ source ~/.bashrc\n\n#: Install essential development packages\n$ sudo apt install build-essential\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.987920405542396,
        0.9542765074894728
      ],
      "excerpt": "$ git clone https://github.com/tensorflow/models.git tensorflow_models \n$ git clone https://github.com/raycad/object-detection.git \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9885369577806237,
        0.9583330382015716,
        0.9770335174395833,
        0.8797036750079712,
        0.871527752452272
      ],
      "excerpt": "$ conda create -n tensorflow_cpu pip python=3.6 \n: Activate the newly created virtual environment \n$ conda activate tensorflow_cpu \n: Deactivate created virtual environment \n$ conda deactivate \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8653245217434171
      ],
      "excerpt": "This creates a train_labels.csv and test_labels.csv file in the /object_detection/images folder \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8239433070032498
      ],
      "excerpt": "Open the generate_tfrecord.py file in a text editor then replace the label map starting at line 31 with your own label map, where each object is assigned an ID number \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8017135994656857
      ],
      "excerpt": ": This same number assignment will be used when configuring the labelmap.pbtxt file \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8387325295851983,
        0.8879759298015856,
        0.8890121518703014
      ],
      "excerpt": ": These generate a train.record and a test.record file in \"/object_detection\". These will be used to train the new object detection classifier. \n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ python generate_tfrecord.py --csv_input=images/train_labels.csv --image_dir=images/train --output_path=train.record \n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ python generate_tfrecord.py --csv_input=images/test_labels.csv --image_dir=images/test --output_path=test.record \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9087436918906394
      ],
      "excerpt": ": Run with old train.py\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8350991143584072
      ],
      "excerpt": "(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ python train.py --logtostderr --train_dir=training/ --pipeline_config_path=training/faster_rcnn_inception_v2_pets.config \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8179112513121203
      ],
      "excerpt": "(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ python export_inference_graph.py --input_type image_tensor --pipeline_config_path training/faster_rcnn_inception_v2_pets.config --trained_checkpoint_prefix training/model.ckpt-XXXX --output_directory inference_graph \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8250573013514237
      ],
      "excerpt": "(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ python export_inference_graph.py --input_type image_tensor --pipeline_config_path training/faster_rcnn_inception_v2_pets.config --trained_checkpoint_prefix training/model.ckpt-10000 --output_directory inference_graph \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9264766893637243
      ],
      "excerpt": "chedules.py\", line 160, in manual_stepping \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9586232994076559
      ],
      "excerpt": "$ nano utils/learning_schedules.py \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/raycad/object-detection/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook",
      "C++",
      "Shell",
      "HTML",
      "JavaScript",
      "Makefile",
      "Dockerfile",
      "GLSL"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'/\\n * The authors of this software are Rob Pike and Ken Thompson.\\n *              Copyright (c) 1998-2002 by Lucent Technologies.\\n * Permission to use, copy, modify, and distribute this software for any\\n * purpose without fee is hereby granted, provided that this entire notice\\n * is included in all copies of any software which is or includes a copy\\n * or modification of this software and in all copies of the supporting\\n * documentation for such software.\\n * THIS SOFTWARE IS BEING PROVIDED \"AS IS\", WITHOUT ANY EXPRESS OR IMPLIED\\n * WARRANTY.  IN PARTICULAR, NEITHER THE AUTHORS NOR LUCENT TECHNOLOGIES MAKE ANY\\n * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY\\n * OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.\\n /\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Object Detection Using Deep-Learning Faster-RCNN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "object-detection",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "raycad",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/raycad/object-detection/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n#: [NOTE]: Install one by one package\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ conda install -c anaconda protobuf\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install pillow\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install lxml\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install Cython\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install jupyter\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install matplotlib\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install pandas\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install opencv-python\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install pycocotools\n\n#: Upgrade the tensorflow. It works with tensorflow 1.13.0\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ pip install --upgrade tensorflow\n\n$ pip list | grep tensorflow\t\n\ttensorflow           1.13.1  \n\ttensorflow-estimator 1.13.0  \n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research$ protoc ./object_detection/protos/*.proto --python_out=.\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research$ python setup.py build\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research$ python setup.py install\n\n#: Test TensorFlow setup to verify it works\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ jupyter notebook object_detection_tutorial.ipynb\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Edit the **line 51** in the **object_detection_image.py** file to the number of classes the object detector can identify\n\n```\n$ python object_detection_image.py\n```\n\n![Result](./doc/ret1.png)\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Mon, 20 Dec 2021 17:51:56 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Download the model from http://download.tensorflow.org/models/object_detection/faster_rcnn_inception_v2_coco_2018_01_28.tar.gz\n```\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ wget http://download.tensorflow.org/models/object_detection/faster_rcnn_inception_v2_coco_2018_01_28.tar.gz\n#: Extract the faster_rcnn_inception_v2_coco_2018_01_28 folder to the \"object_detection\" folder\n(tensorflow_cpu) seedotech@tensorflow:~/dev/tensorflow/object-detection/research/object_detection$ tar -zxvf faster_rcnn_inception_v2_coco_2018_01_28.tar.gz\n\n#: Create Label Map and Configure Training\n#: Update information of the files in the \"object-detection/research/object_detection/training\" folder. Note to set the absolute path for \"fine_tune_checkpoint\", \"train_input_reader\" and \"eval_input_reader\"\n\nLine 9. Change num_classes to the number of different objects you want the classifier to detect. For the above basketball, shirt, and shoe detector, it would be num_classes : 3 .\n\nfine_tune_checkpoint: \"/home/seedotech/dev/tensorflow/object-detection/research/object_detection/faster_rcnn_inception_v2_coco_2018_01_28/model.ckpt\"\n\ntrain_input_reader: {\n  tf_record_input_reader {\n    input_path: \"/home/seedotech/dev/tensorflow/object-detection/research/object_detection/train.record\"\n  }\n  label_map_path: \"/home/seedotech/dev/tensorflow/object-detection/research/object_detection/training/labelmap.pbtxt\"\n}\n\neval_config: {\n  #: Change num_examples to the number of images you have in the /images/test directory.\n  num_examples: 16\n  #: Note: The below line limits the evaluation process to 10 evaluations.\n  #: Remove the below line to evaluate indefinitely.\n  max_evals: 10\n}\n\neval_input_reader: {\n  tf_record_input_reader {\n    input_path: \"/home/seedotech/dev/tensorflow/object-detection/research/object_detection/test.record\"\n  }\n  label_map_path: \"/home/seedotech/dev/tensorflow/object-detection/research/object_detection/training/labelmap.pbtxt\"\n  shuffle: false\n  num_readers: 1\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Edit the **line 51** in the **object_detection_image.py** file to the number of classes the object detector can identify\n\n```\n$ python object_detection_image.py\n```\n\n![Result](./doc/ret1.png)\n\n",
      "technique": "Header extraction"
    }
  ]
}