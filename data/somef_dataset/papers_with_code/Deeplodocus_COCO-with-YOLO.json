{
  "citation": [
    {
      "confidence": [
        0.8944178096468923
      ],
      "excerpt": "      #: Label Entry \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8786044417622563,
        0.8786044417622563
      ],
      "excerpt": "input entry source root \ninput entry source annFile \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9837146436132654,
        0.9845600173250374
      ],
      "excerpt": "1. [You Only Look Once: Unified Real-Time Object Detection](https://arxiv.org/pdf/1506.02640.pdf) \n2. [YOLO9000: Better, Faster, Stronger](https://arxiv.org/pdf/1612.08242.pdf) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9055392137394023
      ],
      "excerpt": "      lab_col: [32, 200, 32]                        #: Color for drawing ground truth boxes (BGR) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Deeplodocus/COCO-with-YOLO",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-18T13:58:37Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-06T21:03:22Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9641414056401794
      ],
      "excerpt": "In this tutorial, we will walk through each step to configure a Deeplodocus project for object detection on the COCO dataset using our implementation of YOLOv3. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9791762129011239,
        0.8809772073506031,
        0.8790444523141344
      ],
      "excerpt": "Initialise the Project \nData Configuration \nModel Configuration \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9255484867232134,
        0.9643358462282913
      ],
      "excerpt": "A copy of this project can be cloned from here - but don't forget to follow the prerequisite steps below. \nInitialise a new Deeplodocus project in your terminal with: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9391000943127142
      ],
      "excerpt": "deeplodocus new-project COCO-with-YOLO \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9257292677595845
      ],
      "excerpt": "After initialising your project and extracting COCO, the data in your project should be structured like this:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9873884243835298
      ],
      "excerpt": "Setting up the data configurations is one of most complicated steps in this project - but bare with us, we'll soon be feeding COCO efficiently into our data-hungry network.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9140194669049057
      ],
      "excerpt": "At the top of the file you'll see the entry for dataloader, use this to set the batch size and the number of workers.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8044899941880441,
        0.9382212068345064
      ],
      "excerpt": "Next, us the enabled entry to enable different types of pipeline.  \nAs we only have training and validation data in this case, we need to enable just the trainer and validator as follows: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8425847368502954
      ],
      "excerpt": "  predict: False        #: There is no prediction data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9752520191438967
      ],
      "excerpt": "We define this with a list of two items, which configure the training and validation portions of the dataset respectively.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8663243189818037,
        0.9693233393948762
      ],
      "excerpt": "        convert_to: float32         #: Convert to float32 (after data transforms) \n        move_axis: [2, 0, 1]        #: Permute : (h x w x ch) to (ch x h x w) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.87336937793355
      ],
      "excerpt": "              root: data/train2017          \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8663243189818037
      ],
      "excerpt": "        convert_to: float32         #: Convert to float32 (after data transforms) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8033352584413563
      ],
      "excerpt": "        enable_cache: False         #: No other entries need access to this data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.87336937793355
      ],
      "excerpt": "              root: data/val2017 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8709172819103368
      ],
      "excerpt": "    When using torchvision datasets, the input and label entries are loaded together in a list.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8259642799516802
      ],
      "excerpt": "kwargs:                                 #: Keyword arguments for the model class \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9449783287825729,
        0.9331063965065698
      ],
      "excerpt": "    kwargs:                                     #: Keyword arguments for the backbone   \n      num_channels: 3                           #: Tell it to expect an input with 3 channels  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8387816555770682,
        0.8685662885910539
      ],
      "excerpt": "That's it!  \nYOLO is configured and ready to go.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.926090616215761
      ],
      "excerpt": "    For an in-depth understanding of the network architecture, we strongly recommend reading the YOLO papers: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9403047257516475,
        0.8943440572170539
      ],
      "excerpt": "We have implemented these loss functions as explained by the original YOLO paper, and all source code is published here. \nCurrently, Deeplodocus does not include any of the traditional metrics for evaluating object detection. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9738326109020741,
        0.8120050003695061
      ],
      "excerpt": "The final critical step is the configuration of two data transformers: \nAn input transformer to pre-process images and labels before they are given to the network. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9392426291801588
      ],
      "excerpt": "    To keep the bounding boxes labels relevant, we need to normalise them by the width and height of their associated image before it is resized.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9273911084868642
      ],
      "excerpt": "We now need to define the input transformer that defines the sequence of functions to apply.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8150771532802734
      ],
      "excerpt": "method: sequential \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9013823747028039,
        0.8893018082567579,
        0.8261875300828374
      ],
      "excerpt": "An input (image) is given to the reformat_pointer function, which returns: \nthe image (unchanged) and, \na TransformData object that stores the shape of the given image as well as a second transform function named reformat. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.946252650092033,
        0.9358945563388192,
        0.9712520178620396
      ],
      "excerpt": "The second stage is responsible for resizing the input image to (448 x 448 x 3).  \nThe image is inputted to the resize function, which returns: \nthe image, resized to (448 x 448) and, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.935607917194909,
        0.9325285576063859,
        0.8485476581221368,
        0.9870171572119129
      ],
      "excerpt": "The label is given to the empty transform. \nThis is just a place holder transform - the label is returned unchanged. \nThis process is illustrated below: \nTo visualise the outputs of our YOLO model during training or validation, we can apply some post-processing transforms.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.935200770812982
      ],
      "excerpt": ": A skip of 20 will cause the transforms to only process every 20th batch. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8390671765035873
      ],
      "excerpt": "      skip: skip                                   #: How many batches to skip \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9394449182630016,
        0.8726031645600245,
        0.8390671765035873
      ],
      "excerpt": "      iou_threshold: 0.5                            #: IoU threshold for NMS \n      obj_threshold: 0.5                            #: Threshold for suppression by objectness score \n      skip: skip                                   #: How many batches to skip \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9090457572901566
      ],
      "excerpt": "      wait: 1                                       #: How long to wait (ms) (0 = wait for a keypress) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8390671765035873
      ],
      "excerpt": "      skip: *skip                                   #: How many batches to skip \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9180127544726323,
        0.9159403980447383
      ],
      "excerpt": "The first transform, collects all of the YOLO detections from each of the three scales into a single array. \nThe second applies removes all detections with object scores below obj_threshold and applies non-maximum suppression according to the given IoU threshold.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A Deeplodocus project for object detection on the COCO data set with an implementation YOLOv3. ",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "First of all, let's download the appropriate data from the [COCO website](http://cocodataset.org/).\n\nSpecifically, we need the following items: \n\n- 2017 Train images [download [18GB]](http://images.cocodataset.org/zips/train2017.zip)\n- 2017 Val images [download [1GB]](http://images.cocodataset.org/zips/val2017.zip)\n- 2017 Train/Val annotations [download [241MB]](http://images.cocodataset.org/annotations/annotations_trainval2017.zip)\n\nWhen you have initialised your Deeplodocus project, extract each of these into the data folder. \n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Deeplodocus/COCO-with-YOLO/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Tue, 28 Dec 2021 09:32:30 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Deeplodocus/COCO-with-YOLO/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Deeplodocus/COCO-with-YOLO",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "We also need the to install [pycocotools](https://github.com/cocodataset/cocoapi/tree/master/PythonAPI/pycocotools), on which the CocoDataset torchvision module is dependent. \n\npycocotool requires Cython, so we'll install that first, with:\n\n```bash\npip3 install Cython\n```\n\nThen we can install pycocotools itself with:\n\n```bash\npip3 install pycocotools\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8797992689461779,
        0.8401486719022587,
        0.9865262589539948
      ],
      "excerpt": "Prerequisite steps: \nDownload the COCO Detection Dataset \nInstall pycocotools \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8308688426403081
      ],
      "excerpt": "A copy of this project can be cloned from here - but don't forget to follow the prerequisite steps below. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8958969141234748
      ],
      "excerpt": "If you have limited GPU memory, you may need to reduce your batch size. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8948812598215196
      ],
      "excerpt": "  num_workers: 4        #: This will depend on your CPU, you probably have at least 4 cores \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.878870718697305
      ],
      "excerpt": "  - name: COCO Train 2017           #: Human-readable name \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8542259572971521
      ],
      "excerpt": "      - name: COCO Image            #: Human-readable name \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "          - name: CocoDetection              \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8695452596610841
      ],
      "excerpt": "      - name: COCO Label            #: Human-readable name \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8297757258855606
      ],
      "excerpt": "dataset name \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8724306754083815
      ],
      "excerpt": "      - name: COCO Image \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "          - name: CocoDetection \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8792348576226597
      ],
      "excerpt": "      - name: COCO Label \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "          - name: SourcePointer  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "name: YOLO                              #: Select YOLO \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.816783678993444
      ],
      "excerpt": "Additionally, our source code for [YOLO](https://github.com/Deeplodocus/deeplodocus/blob/master/deeplodocus/app/models/yolo.py) and [Darknet](https://github.com/Deeplodocus/deeplodocus/blob/master/deeplodocus/app/models/darknet.py) can be found on GitHub. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8540806150636807
      ],
      "excerpt": "  name: ObjectLoss                        #: Name of the Python class to use \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8540806150636807
      ],
      "excerpt": "  name: BoxLoss                           #: Name of the Python class to use \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8540806150636807
      ],
      "excerpt": "  name: ClassLoss                         #: Name of the Python class to use \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "name: \"Adam\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8244453191770256
      ],
      "excerpt": "!!! note  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8030411653755463
      ],
      "excerpt": "  name: Train Transform Manager \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8053505952371625
      ],
      "excerpt": "    - config/transformers/output.yaml     #: Path to output transformer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8053505952371625
      ],
      "excerpt": "    - config/transformers/output.yaml     #: Path to output transformer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8294130488500974
      ],
      "excerpt": "name: Transformer for COCO input \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "      name: reformat_pointer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "      name: resize \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8833268802260206
      ],
      "excerpt": "name: Output Transformer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "    name: Concatenate \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "    name: NonMaximumSuppression \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8161222418214344
      ],
      "excerpt": "    name: Visualize \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8289669050403863
      ],
      "excerpt": "Output Transformer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8639986685036579,
        0.8639986685036579
      ],
      "excerpt": "\u2502   \u251c\u2500  000000000000.jpg \n\u2502   \u251c\u2500  000000000001.jpg \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8639986685036579,
        0.8639986685036579
      ],
      "excerpt": "    \u251c\u2500  000000000000.jpg \n    \u251c\u2500  000000000001.jpg \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8062096572431047
      ],
      "excerpt": "Open up the config/data.yaml file, and let's get started. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8615571295074884,
        0.8052878963248418
      ],
      "excerpt": "  test: False           #: There is no test data \n  predict: False        #: There is no prediction data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8174540907975313
      ],
      "excerpt": "  #: Training portion \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.94846955277491
      ],
      "excerpt": "    type: train                     #: Dataset type (train/validation/test/predict) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "          - name: CocoDetection              \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8351051954308356
      ],
      "excerpt": "              annFile: data/annotations/instances_train2017.json \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8650817032288081,
        0.8259016237823025
      ],
      "excerpt": "dataset name \ndataset type \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8005125128546755
      ],
      "excerpt": "    type: validation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8136664267539465
      ],
      "excerpt": "        type: input \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "        enable_cache: True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "          - name: CocoDetection \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8351051954308356
      ],
      "excerpt": "              annFile: data/annotations/instances_val2017.json \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "          - name: SourcePointer  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8023998772509551
      ],
      "excerpt": "Open and edit the config/model.yaml file to specify our object detector.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "name: YOLO                              #: Select YOLO \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8191948444479459,
        0.8085274640633393
      ],
      "excerpt": "from_file: False                        #: Don't try to load from file \nfile: Null                              #: No need to specify a file to load from \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "name: \"Adam\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8136770257814594
      ],
      "excerpt": "    - config/transformers/input.yaml      #: Path to input transformer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8268942914185129
      ],
      "excerpt": "    - '*inputs:0'                         #: Point to the first input transformer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8680787258257262
      ],
      "excerpt": "    - config/transformers/output.yaml     #: Path to output transformer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8136770257814594
      ],
      "excerpt": "    - config/transformers/input.yaml      #: Path to input transformer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8268942914185129
      ],
      "excerpt": "    - '*inputs:0'                         #: Point to the first input transformer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8680787258257262
      ],
      "excerpt": "    - config/transformers/output.yaml     #: Path to output transformer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8431263088072368
      ],
      "excerpt": "Open the config/transformers/input.yaml file and edit as follows:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "      name: reformat_pointer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "      name: resize \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8276331250869491
      ],
      "excerpt": "The first stage is use to format the label into an array of size (100 x 5), then normalise the box coordinates by the corresponding image shape. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.863442676885932
      ],
      "excerpt": "deeplodocus output-transformer output.yaml \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979340603630218
      ],
      "excerpt": "name: Output Transformer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "    name: Concatenate \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "    name: NonMaximumSuppression \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8341678913838143
      ],
      "excerpt": "Now you're good to go! Just run the project main file, enter load(), train() and let it run. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Deeplodocus/COCO-with-YOLO/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Deeplodocus\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "COCO with YOLO",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "COCO-with-YOLO",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Deeplodocus",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Deeplodocus/COCO-with-YOLO/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Tue, 28 Dec 2021 09:32:30 GMT"
    },
    "technique": "GitHub API"
  }
}