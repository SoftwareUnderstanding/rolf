{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/mavenlin/cuda-convnet",
    "technique": "GitHub API"
  },
  "contributors": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributors (in approximate order of appearance)\n[See also the ChangeLog file where individuals are\nattributed in log entries. Likewise in the FAQ file.]\nBen Elliston        bje at cygnus dot com\n                    Initiated the project;\n                    setup the project infrastructure (CVS, web page, etc.);\n                    early prototype routines.\nRoss Johnson        Ross dot Johnson at  dot homemail dot com dot au\n                    early prototype routines;\n                    ongoing project coordination/maintenance;\n                    implementation of spin locks and barriers;\n                    various enhancements;\n                    bug fixes;\n                    documentation;\n                    testsuite.\nRobert Colquhoun    rjc at trump dot net dot au\n                    Early bug fixes.\nJohn E. Bossom      John dot Bossom at cognos dot com\n                    Contributed substantial original working implementation;\n                    bug fixes;\n                    ongoing guidance and standards interpretation.\nAnders Norlander    anorland at hem2 dot passagen dot se\n                    Early enhancements and runtime checking for supported\n                    Win32 routines.\nTor Lillqvist       tml at iki dot fi\n                    General enhancements;\n                    early bug fixes to condition variables.\nScott Lightner      scott at curriculum dot com\n                    Bug fix.\nKevin Ruland        Kevin dot Ruland at anheuser-busch dot com\n                    Various bug fixes.\nMike Russo      miker at eai dot com\n                    Bug fix.\nMark E. Armstrong   avail at pacbell dot net\n                    Bug fixes.\nLorin Hochstein     lmh at xiphos dot ca\n                    general bug fixes; bug fixes to condition variables.\nPeter Slacik        Peter dot Slacik at tatramed dot sk\n                    Bug fixes.\nMumit Khan      khan at xraylith dot wisc dot edu\n                    Fixes to work with Mingw32.\nMilan Gardian       mg at tatramed dot sk\n                    Bug fixes and reports/analyses of obscure problems.\nAurelio Medina      aureliom at crt dot com\n                    First implementation of read-write locks.\nGraham Dumpleton    Graham dot Dumpleton at ra dot pad dot otc dot telstra dot com dot au\n                    Bug fix in condition variables.\nTristan Savatier    tristan at mpegtv dot com\n                    WinCE port.\nErik Hensema        erik at hensema dot xs4all dot nl\n                    Bug fixes.\nRich Peters     rpeters at micro-magic dot com\nTodd Owen       towen at lucidcalm dot dropbear dot id dot au\n                    Bug fixes to dll loading.\nJason Nye       jnye at nbnet dot nb dot ca\n                    Implementation of async cancelation.\nFred Forester       fforest at eticomm dot net\nKevin D. Clark      kclark at cabletron dot com\nDavid Baggett       dmb at itasoftware dot com\n                    Bug fixes.\nPaul Redondo        paul at matchvision dot com\nScott McCaskill     scott at 3dfx dot com\n                    Bug fixes.\nJef Gearhart        jgearhart at tpssys dot com\n                    Bug fix.\nArthur Kantor       akantor at bexusa dot com\n                    Mutex enhancements.\nSteven Reddie       smr at essemer dot com dot au\n                    Bug fix.\nAlexander Terekhov  TEREKHOV at de dot ibm dot com\n                    Re-implemented and improved read-write locks;\n                    (with Louis Thomas) re-implemented and improved\n                    condition variables;\n                    enhancements to semaphores;\n                    enhancements to mutexes;\n                    new mutex implementation in 'futex' style;\n                    suggested a robust implementation of pthread_once\n                    similar to that implemented by V.Kliathcko;\n                    system clock change handling re CV timeouts;\n                    bug fixes.\nThomas Pfaff        tpfaff at gmx dot net\n                    Changes to make C version usable with C++ applications;\n                    re-implemented mutex routines to avoid Win32 mutexes\n                    and TryEnterCriticalSection;\n                    procedure to fix Mingw32 thread-safety issues.\nFranco Bez      franco dot bez at gmx dot de\n                    procedure to fix Mingw32 thread-safety issues.\nLouis Thomas        lthomas at arbitrade dot com\n                    (with Alexander Terekhov) re-implemented and improved\n                    condition variables.\nDavid Korn      dgk at research dot att dot com\n                    Ported to UWIN.\nPhil Frisbie, Jr.   phil at hawksoft dot com\n                    Bug fix.\nRalf Brese      Ralf dot Brese at pdb4 dot siemens dot de\n                    Bug fix.\nprionx at juno dot com  prionx at juno dot com\n                    Bug fixes.\nMax Woodbury        mtew at cds dot duke dot edu\n                    POSIX versioning conditionals;\n                    reduced namespace pollution;\n                    idea to separate routines to reduce statically\n                    linked image sizes.\nRob Fanner      rfanner at stonethree dot com\n                    Bug fix.\nMichael Johnson     michaelj at maine dot rr dot com\n                    Bug fix.\nNicolas Barry       boozai at yahoo dot com\n                    Bug fixes.\nPiet van Bruggen    pietvb at newbridges dot nl\n                    Bug fix.\nMakoto Kato     raven at oldskool dot jp\n                    AMD64 port.\nPanagiotis E. Hadjidoukas   peh at hpclab dot ceid dot upatras dot gr\n                                phadjido at cs dot uoi dot gr\n                    Contributed the QueueUserAPCEx package which\n                    makes preemptive async cancelation possible.\nWill Bryant     will dot bryant at ecosm dot com\n                    Borland compiler patch and makefile.\nAnuj Goyal      anuj dot goyal at gmail dot com\n                    Port to Digital Mars compiler.\nGottlob Frege       gottlobfrege at  gmail dot com\n                    re-implemented pthread_once (version 2)\n                    (pthread_once cancellation added by rpj).\nVladimir Kliatchko  vladimir at kliatchko dot com\n                    reimplemented pthread_once with the same form\n                    as described by A.Terekhov (later version 2);\n                    implementation of MCS (Mellor-Crummey/Scott) locks.\nRamiro Polla        ramiro.polla at gmail dot com\n                    static library auto init/cleanup on application\n                    start/exit via RT hooks (MSC and GCC compilers only).\nDaniel Richard G.           skunk at iSKUNK dot org\n                    Patches and cleanups for x86 and x64, particularly\n                    across a range of MS build environments.\nJohn Kamp       john dot kamp at globalgraphics dot com\n                    Patches to fix various problems on x64; brutal testing\n                    particularly using high memory run environments.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2014-02-21T06:51:22Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-11-30T02:01:20Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8515555762070063
      ],
      "excerpt": "started from Alex's code on google code \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9903249328866008
      ],
      "excerpt": "The datasets are preprocessed according to maxout networks using the python code in pylearn. How to preprocess the data is detailed here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9166100700438801
      ],
      "excerpt": "The preprocessed CIFAR-10, CIFAR-100 and MNIST datasets are available on my google drive (just follow the link), but SVHN will not as it is around 20G after preprocessing. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8181961103775476
      ],
      "excerpt": "    cPickle.dump(data, open('data_batch_%d' % (i+1), 'w')) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8181961103775476
      ],
      "excerpt": "cPickle.dump(data, open('data_batch_6', 'w')) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9657341595292932
      ],
      "excerpt": "This trains the model defined in NIN/cifar-10_def using the the parameter in NIN/cifar-10_params for 200 epochs. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8710081133409939
      ],
      "excerpt": "After this, edit the NIN/cifar-10_params file by changing all the epsW to one tenth of the original value. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8349257228543475
      ],
      "excerpt": "CIFAR-100 is similar to CIFAR-10 but just replace some parameters in the script. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8146754139690273
      ],
      "excerpt": "The rest is the same with CIFAR-10 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "started from Alex's code on google code",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/mavenlin/cuda-convnet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 24,
      "date": "Wed, 22 Dec 2021 15:25:15 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/mavenlin/cuda-convnet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "mavenlin/cuda-convnet",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/mavenlin/cuda-convnet/master/build.sh",
      "https://raw.githubusercontent.com/mavenlin/cuda-convnet/master/clean.sh",
      "https://raw.githubusercontent.com/mavenlin/cuda-convnet/master/setupldpath.sh",
      "https://raw.githubusercontent.com/mavenlin/cuda-convnet/master/Kernel/build.sh",
      "https://raw.githubusercontent.com/mavenlin/cuda-convnet/master/Kernel/unittest/groupSparsity/build.sh",
      "https://raw.githubusercontent.com/mavenlin/cuda-convnet/master/PluginsSrc/build.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9373477070850949
      ],
      "excerpt": "To compile this code, cuda-5.0 or cuda-5.5 is required. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8718703538450283,
        0.9011192331172769
      ],
      "excerpt": "Setup the paths in the build.sh script under Kernel and PluginSrc. \nRun ./build.sh under the main directory. A dist directory will be created with all python codes and built shared libraries inside. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8482792761349012
      ],
      "excerpt": "Here is an example code to convert the pylearn preprocessed train.pkl and test.pkl to cuda-convnet data_batch_x files for CIFAR-10 data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674,
        0.8877186685739473
      ],
      "excerpt": "import cPickle \nimport numpy \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9072574238106633,
        0.8020783089486989,
        0.8163399357276135,
        0.8063014662048662,
        0.9072574238106633,
        0.8020783089486989,
        0.8163399357276135
      ],
      "excerpt": "    data=cPickle.load(open('../cifar-10-batches-py/data_batch_%d' % (i+1), 'r')) \n    data['data']=numpy.require(sub.T, numpy.float32, 'C') \n    cPickle.dump(data, open('data_batch_%d' % (i+1), 'w')) \nsub = test.dict['X'] \ndata=cPickle.load(open('../cifar-10-batches-py/data_batch_6', 'r')) \ndata['data']=numpy.require(sub.T, numpy.float32, 'C') \ncPickle.dump(data, open('data_batch_6', 'w')) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9420515045830189
      ],
      "excerpt": "python convnet.py --data-path /path/to/cifar-10/pickled/data --data-provider cifar --layer-def ../NIN/cifar-10_def --layer-params ../NIN/cifar_10-params --train-range 1-5 --test-range 6 --save-path /path/to/save/the/model/ --test-freq 20 --epochs 200 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8026741219402354
      ],
      "excerpt": "Then the error rate will be 10.4% \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9436794114333772
      ],
      "excerpt": "python convnet.py --data-path /path/to/cifar-100/pickled/data --data-provider cifar --layer-def ../NIN/cifar-100_def --layer-params ../NIN/cifar_100-params --train-range 1-5 --test-range 6 --save-path /path/to/save/the/model/ --test-freq 20 --epochs 200 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/mavenlin/cuda-convnet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C",
      "Cuda",
      "Python",
      "C++",
      "Makefile",
      "MATLAB",
      "Shell",
      "Objective-C",
      "Perl"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "NIN is now in Caffe Model Zoo",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "cuda-convnet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "mavenlin",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/mavenlin/cuda-convnet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "I implemented cccp (cascadable cross channel parameteric) pooling in this code.\nThe NIN structure is in my paper: Network In Network submitted on ICLR2014.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 42,
      "date": "Wed, 22 Dec 2021 15:25:15 GMT"
    },
    "technique": "GitHub API"
  }
}