{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1912.02762.\n\n[2] Dinh, L., Sohl-Dickstein, J. and Bengio, S., 2016. Density estimation using Real NVP. https://arxiv.org/abs/1605.08803.",
      "https://arxiv.org/abs/1605.08803."
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[1] Papamakarios, G., Nalisnick, E., Rezende, D.J., Mohamed, S. and Lakshminarayanan, B., 2019. *Normalizing Flows for Probabilistic Modeling and Inference*. https://arxiv.org/abs/1912.02762.\n\n[2] Dinh, L., Sohl-Dickstein, J. and Bengio, S., 2016. Density estimation using Real NVP. https://arxiv.org/abs/1605.08803.\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ispamm/realnvp-demo-pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-18T16:07:52Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-13T10:29:50Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9619787000264083
      ],
      "excerpt": "Facing directly an image generation task with a NF is challenging! For this reason, we simplify the model and train a RealNVP model on the intermediate embeddings generated by an auxiliary autoencoder: \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ispamm/realnvp-demo-pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Mon, 27 Dec 2021 19:16:20 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ispamm/realnvp-demo-pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ispamm/realnvp-demo-pytorch",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/ispamm/realnvp-demo-pytorch/master/Normalizing_Flow_for_Embedding_Generation.ipynb"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ispamm/realnvp-demo-pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "RealNVP on MNIST (PyTorch, demo)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "realnvp-demo-pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ispamm",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ispamm/realnvp-demo-pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You can run the example in the [corresponding notebook](Normalizing_Flow_for_Embedding_Generation.ipynb). We first train the autoencoder on MNIST, then the RealNVP architecture. Below some generated samples after both trainings:\n\n<p align=\"center\">\n<img src=\"https://github.com/ispamm/ae_nf/blob/master/images.png?raw=true\" width=\"250\">\n</p>\n\nThe code of the RealNVP can be found in `realnvp.py`:\n\n* `LinearBatchNorm`, `LinearCouplingLayer`, and `Permutation` are the basic layers of the NF;\n* `SequentialFlow` defines a generic NF as a sequence of layers, by extending `torch.nn.Sequential`;\n* `RealNVP` builds the actual RealNVP used in our demo.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 8,
      "date": "Mon, 27 Dec 2021 19:16:20 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**Normalizing flows** (NFs) are an exciting new family of neural networks for density estimation, sampling, and likelihood inference [1]. A NF is built by combining *invertible* components with tractable Jacobian computations, and they are shown to generalize many known models, such as invertible ResNets or autoregressive architectures.\n\nThis code provides a self-contained demo in pure PyTorch of a real-world NF (RealNVP, [2]). We try to make our code as concise and simple as possible, with low dependency on external libraries.\n\n",
      "technique": "Header extraction"
    }
  ]
}