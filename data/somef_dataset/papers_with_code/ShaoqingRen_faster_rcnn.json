{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1703.06870",
      "https://arxiv.org/abs/1506.01497"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you find Faster R-CNN useful in your research, please consider citing:\n\n    @article{ren15fasterrcnn,\n        Author = {Shaoqing Ren, Kaiming He, Ross Girshick, Jian Sun},\n        Title = {{Faster R-CNN}: Towards Real-Time Object Detection with Region Proposal Networks},\n        Journal = {arXiv preprint arXiv:1506.01497},\n        Year = {2015}\n    }\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{ren15fasterrcnn,\n    Author = {Shaoqing Ren, Kaiming He, Ross Girshick, Jian Sun},\n    Title = {{Faster R-CNN}: Towards Real-Time Object Detection with Region Proposal Networks},\n    Journal = {arXiv preprint arXiv:1506.01497},\n    Year = {2015}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9999678587394437
      ],
      "excerpt": "By Shaoqing Ren, Kaiming He, Ross Girshick, Jian Sun at Microsoft Research \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.895067659672329,
        0.9700494325394076,
        0.895067659672329,
        0.9700494325394076
      ],
      "excerpt": "ZF net trained on VOC 07 trainval OneDrive, BaiduYun \nZF net trained on VOC 07/12 trainval OneDrive, BaiduYun \nVGG net trained on VOC 07 trainval OneDrive, BaiduYun \nVGG net trained on VOC 07/12 trainval OneDrive, BaiduYun \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "Zeiler & Fergus (ZF) net OneDrive, DropBox, BaiduYun \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ShaoqingRen/faster_rcnn",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2015-08-06T06:38:25Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-24T07:31:31Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**Faster** R-CNN is an object detection framework based on deep convolutional networks, which includes a Region Proposal Network (RPN) and an Object Detection Network. Both networks are trained for sharing convolutional layers for fast testing. \n\nFaster R-CNN was initially described in an [arXiv tech report](http://arxiv.org/abs/1506.01497).\n\nThis repo contains a MATLAB re-implementation of Fast R-CNN. Details about Fast R-CNN are in: [rbgirshick/fast-rcnn](https://github.com/rbgirshick/fast-rcnn).\n\nThis code has been tested on Windows 7/8 64-bit, Windows Server 2012 R2, and Linux, and on MATLAB 2014a.\n\nPython version is available at [py-faster-rcnn](https://github.com/rbgirshick/py-faster-rcnn).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9896144948635563
      ],
      "excerpt": "Note: The mAP results are subject to random variations. We have run 5 times independently for ZF net, and the mAPs are 59.9 (as in the paper), 60.4, 59.5, 60.1, and 59.5, with a mean of 59.88 and std 0.39. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.851838486566847
      ],
      "excerpt": "Train Fast R-CNN with conv layers tuned using step-1 RPN proposals; evaluate detection mAP. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.851838486566847,
        0.8511496603161611
      ],
      "excerpt": "Train Fast R-CNN with conv layers fixed using step-3 RPN proposals; evaluate detection mAP. \nNote: the entire training time is ~12 hours on K40. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8887506413118699,
        0.8787655747602553,
        0.873917913485684
      ],
      "excerpt": "Note: the entire training time is ~2 days on K40. \nCheck other scripts in ./experiments for more settings. \nNote: This documentation may contain links to third party websites, which are provided for your convenience only. Such third party websites are not under Microsoft\u2019s control. Microsoft does not endorse or make any representation, guarantee or assurance regarding any third party website, content, service or product. Third party websites may be subject to the third party\u2019s terms, conditions, and privacy statements. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9537070975763875
      ],
      "excerpt": "Regions proposals of our trained RPN: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.879214866654318
      ],
      "excerpt": "Note: the proposals are in the format of [left, top, right, bottom, confidence] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Faster R-CNN",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ShaoqingRen/faster_rcnn/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1220,
      "date": "Sun, 26 Dec 2021 21:38:40 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ShaoqingRen/faster_rcnn/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ShaoqingRen/faster_rcnn",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "0.\tRun `fetch_data/fetch_model_ZF.m` to download an ImageNet-pre-trained ZF net.\n0.\tRun `fetch_data/fetch_model_VGG16.m` to download an ImageNet-pre-trained VGG-16 net.\n0.\tDownload VOC 2007 and 2012 data to ./datasets\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "0.\tRun `fetch_data/fetch_caffe_mex_windows_vs2013_cuda65.m` to download a compiled Caffe mex (for Windows only).\n0.\tRun `faster_rcnn_build.m`\n0.\tRun `startup.m`\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8864574716181884
      ],
      "excerpt": "Requirements: hardware \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8028830031079996
      ],
      "excerpt": "If the automatic \"fetch_data\" fails, you may manually download resouces from: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8402531382731471
      ],
      "excerpt": "|                           | training data                          | test data            | mAP   | time/img | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8122380803173714
      ],
      "excerpt": "| Faster RCNN, VGG-16       | VOC 2012 trainval                      | VOC 2012 test        | 67.0% | 198ms | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8073143310286925,
        0.8547782827638951,
        0.8263018749653117
      ],
      "excerpt": "Preparation for Testing \nTesting Demo \nPreparation for Training \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8501129462937325
      ],
      "excerpt": "Run experiments/script_faster_rcnn_VOC2007_VGG16.m to train a model with VGG net. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ShaoqingRen/faster_rcnn/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "MATLAB",
      "C++",
      "Cuda"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/ShaoqingRen/faster_rcnn/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Faster R-CNN\\n\\nThe MIT License (MIT)\\n\\nCopyright (c) 2015 Microsoft Corporation\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n\\n**********\\n\\nTHIRD-PARTY SOFTWARE NOTICES AND INFORMATION\\n\\nThis project, Faster R-CNN, incorporates material from the project(s) listed below (collectively, \"Third Party Code\").  Microsoft is not the original author of the Third Party Code.  The original copyright notice and license under which Microsoft received such Third Party Code are set out below. This Third Party Code is licensed to you under their original license terms set forth below.  Microsoft reserves all other rights not expressly granted, whether by implication, estoppel or otherwise.\\n \\n1.\\tCaffe, version 0.9, (https://github.com/BVLC/caffe/)\\n\\nCOPYRIGHT\\n\\nAll contributions by the University of California:\\nCopyright (c) 2014, 2015, The Regents of the University of California (Regents)\\nAll rights reserved.\\n\\nAll other contributions:\\nCopyright (c) 2014, 2015, the respective contributors\\nAll rights reserved.\\n\\nCaffe uses a shared copyright model: each contributor holds copyright over their contributions to Caffe. The project versioning records all such contribution and copyright details. If a contributor wants to further mark their specific copyright on a particular contribution, they should indicate their copyright solely in the commit message of the change when it is committed.\\n\\nThe BSD 2-Clause License\\n\\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n\\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\n*END OF THIRD-PARTY SOFTWARE NOTICES AND INFORMATION*\\n\\n\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# This repo has been deprecated. Please see [Detectron](https://github.com/facebookresearch/Detectron), which includes an implementation of [Mask R-CNN](https://arxiv.org/abs/1703.06870).",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "faster_rcnn",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ShaoqingRen",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ShaoqingRen/faster_rcnn/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "0. `Caffe` build for Faster R-CNN (included in this repository, see `external/caffe`)\n    - If you are using Windows, you may download a compiled mex file by running `fetch_data/fetch_caffe_mex_windows_vs2013_cuda65.m`\n    - If you are using Linux or you want to compile for Windows, please follow the [instructions](https://github.com/ShaoqingRen/caffe/tree/faster-R-CNN) on our Caffe branch.\n0.\tMATLAB\n \n    \n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "GPU: Titan, Titan Black, Titan X, K20, K40, K80.\n\n0. Region Proposal Network (RPN)\n    - 2GB GPU memory for ZF net\n    - 5GB GPU memory for VGG-16 net\n0. Object Detection Network (Fast R-CNN)\n    - 3GB GPU memory for ZF net\n    - 8GB GPU memory for VGG-16 net\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2481,
      "date": "Sun, 26 Dec 2021 21:38:40 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "0.\tRun `fetch_data/fetch_faster_rcnn_final_model.m` to download our trained models.\n0.\tRun `experiments/script_faster_rcnn_demo.m` to test a single demo image.\n    - You will see the timing information as below. We get the following running time on K40 @ 875 MHz and Intel Xeon CPU E5-2650 v2 @ 2.60GHz for the demo images with VGG-16:\n\t```Shell\n\t001763.jpg (500x375): time 0.201s (resize+conv+proposal: 0.150s, nms+regionwise: 0.052s)\n\t004545.jpg (500x375): time 0.201s (resize+conv+proposal: 0.151s, nms+regionwise: 0.050s)\n\t000542.jpg (500x375): time 0.192s (resize+conv+proposal: 0.151s, nms+regionwise: 0.041s)\n\t000456.jpg (500x375): time 0.202s (resize+conv+proposal: 0.152s, nms+regionwise: 0.050s)\n\t001150.jpg (500x375): time 0.194s (resize+conv+proposal: 0.151s, nms+regionwise: 0.043s)\n\tmean time: 0.198s\n\t```\n\tand with ZF net:\n\t```Shell\n\t001763.jpg (500x375): time 0.061s (resize+conv+proposal: 0.032s, nms+regionwise: 0.029s)\n\t004545.jpg (500x375): time 0.063s (resize+conv+proposal: 0.034s, nms+regionwise: 0.029s)\n\t000542.jpg (500x375): time 0.052s (resize+conv+proposal: 0.034s, nms+regionwise: 0.018s)\n\t000456.jpg (500x375): time 0.062s (resize+conv+proposal: 0.034s, nms+regionwise: 0.028s)\n\t001150.jpg (500x375): time 0.058s (resize+conv+proposal: 0.034s, nms+regionwise: 0.023s)\n\tmean time: 0.059s\n\t```\n    - The visual results might be different from those in the paper due to numerical variations.\t\n    - Running time on other GPUs\n\n    |       GPU / mean time        |        VGG-16        |        ZF     |     \n    | :--------------------------: |:--------------------:|:------------: |\n    |  K40                         |        198ms         |       59ms    |\n    |  Titan Black                 |        174ms         |       56ms    |\n    | Titan X                      |        151ms         |       59ms    |\n\n",
      "technique": "Header extraction"
    }
  ]
}