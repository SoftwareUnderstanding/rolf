{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1802.08435v1",
      "https://arxiv.org/abs/1703.10135",
      "https://arxiv.org/abs/1712.05884"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* [Efficient Neural Audio Synthesis](https://arxiv.org/abs/1802.08435v1)\n* [Tacotron: Towards End-to-End Speech Synthesis](https://arxiv.org/abs/1703.10135)\n* [Natural TTS Synthesis by Conditioning WaveNet on Mel Spectrogram Predictions](https://arxiv.org/abs/1712.05884)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8940583111730483,
        0.9880905697150544
      ],
      "excerpt": "Dipjyoti Paul<sup>a</sup>, Yannis Pantazis<sup>b</sup> and Yannis Stylianou<sup>a</sup> \n<sup>a</sup>Computer Science Department, University of Crete \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/dipjyoti92/SC-WaveRNN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-05-18T09:47:07Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-15T09:32:55Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8800156930028444
      ],
      "excerpt": "Speaker Conditional WaveRNN: Towards Universal Neural Vocoder for Unseen Speaker and Recording Conditions \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.97769977363383,
        0.9992787905360608
      ],
      "excerpt": "<sup>b</sup>Inst. of Applied and Computational Mathematics, Foundation for Research and Technology - Hellas \nRecent advancements in deep learning led to human-level performance in single-speaker speech synthesis. However, there are still limitations in terms of speech quality when generalizing those systems into multiple-speaker models especially for unseen speakers and unseen recording qualities. For instance, conventional neural vocoders are adjusted to the training speaker and have poor generalization capabilities to unseen speakers. In this work, we propose a variant of WaveRNN, referred to as speaker conditional WaveRNN (SC-WaveRNN). We target towards the development of an efficient universal vocoder even for unseen speakers and recording conditions. In contrast to standard WaveRNN, SC-WaveRNN exploits additional information given in the form of speaker embeddings. Using publicly-available data for training, SC-WaveRNN achieves significantly better performance over baseline WaveRNN on both subjective and objective metrics. In MOS, SC-WaveRNN achieves an improvement of about 23% for seen speaker and seen recording condition and up to 95% for unseen speaker and unseen condition. Finally, we extend our work by implementing a multi-speaker text-to-speech (TTS) synthesis similar to zero-shot speaker adaptation. In terms of performance, our system has been preferred over the baseline TTS system by 60% over 15.5% and by 60.9% over 32.6%, for seen and unseen speakers, respectively. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9878976139034862
      ],
      "excerpt": "Pytorch implementation of Tarotron and WaveRNN model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.920614588464027
      ],
      "excerpt": "4 -  Generate Sentences with WaveRNN model: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8716935914993076
      ],
      "excerpt": "And finally, you can always use --help on any of those scripts to see what options are available :) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Official PyTorch implementation of Speaker Conditional WaveRNN",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/dipjyoti92/SC-WaveRNN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 17,
      "date": "Thu, 23 Dec 2021 00:47:23 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/dipjyoti92/SC-WaveRNN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "dipjyoti92/SC-WaveRNN",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Ensure you have:\n\n* Python >= 3.6\n* [Pytorch 1 with CUDA](https://pytorch.org/)\n\nThen install the rest with pip:\n\n> pip install -r requirements.txt\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8824817349845955
      ],
      "excerpt": "Download your Dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356411104181841
      ],
      "excerpt": "Follow repo speaker_embeddings_GE2E \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8208992218424958
      ],
      "excerpt": "2 - You can leave that finish training or at any point you can use: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8216992784356708
      ],
      "excerpt": "4 - Generate Sentences with both models using: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8145801927594881
      ],
      "excerpt": "Download your Dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9160038251717189,
        0.9246227682586091,
        0.8575097158511376
      ],
      "excerpt": "Edit hparams.py, point wav_path to your dataset and run: \npython preprocess.py \nor use preprocess.py --path to point directly to the dataset \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8278121020599903,
        0.9246227682586091
      ],
      "excerpt": "1 - Train Tacotron with: \npython train_tacotron.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python train_tacotron.py --force_gta \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8278121020599903,
        0.9246227682586091
      ],
      "excerpt": "3 - Train WaveRNN with: \npython train_wavernn.py --gta \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9329214170771074
      ],
      "excerpt": "python gen_wavernn.py --file <...> --weights <...> --output <...> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9600005105555015
      ],
      "excerpt": "python gen_tacotron.py --file <...> --weights_path <...> --weights_voc <...> --output <...> --input_text <...> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/dipjyoti92/SC-WaveRNN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Copyright (c) 2017 Keith Ito\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "SC-WaveRNN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "SC-WaveRNN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "dipjyoti92",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/dipjyoti92/SC-WaveRNN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 95,
      "date": "Thu, 23 Dec 2021 00:47:23 GMT"
    },
    "technique": "GitHub API"
  }
}