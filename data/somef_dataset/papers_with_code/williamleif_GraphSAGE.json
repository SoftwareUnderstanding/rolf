{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The original version of this code base was originally forked from https://github.com/tkipf/gcn/, and we owe many thanks to Thomas Kipf for making his code available.\nWe also thank Yuanfang Li and Xin Li who contributed to a course project that was based on this work.\nPlease see the [paper](https://arxiv.org/pdf/1706.02216.pdf) for funding details and additional (non-code related) acknowledgements.\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1403.6652"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9813982797223562,
        0.9759974342673164,
        0.9933537248551054,
        0.9929675603178671,
        0.9884759456492003,
        0.9960965048981569
      ],
      "excerpt": "If you make use of this code or the GraphSage algorithm in your work, please cite the following paper: \n @inproceedings{hamilton2017inductive, \n     author = {Hamilton, William L. and Ying, Rex and Leskovec, Jure}, \n     title = {Inductive Representation Learning on Large Graphs}, \n     booktitle = {NIPS}, \n     year = {2017} \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/williamleif/GraphSAGE",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-05-29T15:36:22Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-25T07:24:57Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.836122705848493,
        0.9890387247948761
      ],
      "excerpt": "GraphSage can be viewed as a stochastic generalization of graph convolutions, and it is especially useful for massive, dynamic graphs that contain rich feature information. \nSee our paper for details on the algorithm. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9672351298431452
      ],
      "excerpt": "The original algorithm and paper are focused on the task of inductive generalization (i.e., generating embeddings for nodes that were not present during training), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.976915446097525,
        0.8705729119079291
      ],
      "excerpt": "Including identity features will increase the runtime, but also potentially increase performance (at the usual risk of overfitting). \nSee the section on \"Running the code\" below. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9428686865490797
      ],
      "excerpt": "The example_data subdirectory contains a small example of the protein-protein interaction data, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.995096831510519
      ],
      "excerpt": "The full Reddit and PPI datasets (described in the paper) are available on the project website. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8013659882375369
      ],
      "excerpt": "As input, at minimum the code requires that a --train_prefix option is specified which specifies the following data files: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8102797930774399,
        0.8272509329037371
      ],
      "excerpt": "<train_prefix>-id_map.json -- A json-stored dictionary mapping the graph node ids to consecutive integers. \n<train_prefix>-class_map.json -- A json-stored dictionary mapping the graph node ids to classes. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8557995018665662
      ],
      "excerpt": "To run random walks for the unsupervised model and to generate the <prefix>-walks.txt file) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9740213450150645,
        0.8940330190882022,
        0.9620242064349239,
        0.8742001871839643,
        0.8663643806374103,
        0.9620242064349239,
        0.9852635929070211
      ],
      "excerpt": "The user must also specify a --model, the variants of which are described in detail in the paper: \n* graphsage_mean -- GraphSage with mean-based aggregator \n* graphsage_seq -- GraphSage with LSTM-based aggregator \n* graphsage_maxpool -- GraphSage with max-pooling aggregator (as described in the NIPS 2017 paper) \n* graphsage_meanpool -- GraphSage with mean-pooling aggregator (a variant of the pooling aggregator, where the element-wie mean replaces the element-wise max). \n* gcn -- GraphSage with GCN-based aggregator \n* n2v -- an implementation of DeepWalk (called n2v for short in the code.) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8935130479267401
      ],
      "excerpt": "The output of the model and log files will be stored in a subdirectory of the base_log_dir. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9536640235152143
      ],
      "excerpt": "Note that the full log outputs and stored embeddings can be 5-10Gb in size (on the full data when running with the unsupervised variant). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Representation learning on large graphs using stochastic graph convolutions.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/williamleif/GraphSAGE/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 729,
      "date": "Sun, 26 Dec 2021 10:48:26 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/williamleif/GraphSAGE/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "williamleif/GraphSAGE",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/williamleif/GraphSAGE/master/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/williamleif/GraphSAGE/master/example_unsupervised.sh",
      "https://raw.githubusercontent.com/williamleif/GraphSAGE/master/example_supervised.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9308802241565115
      ],
      "excerpt": "or start a Jupyter Notebook instead of bash: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8676582071725453,
        0.9035953920195159,
        0.8683762030448401
      ],
      "excerpt": "You can also run the GPU image using nvidia-docker: \n$ docker build -t graphsage:gpu -f Dockerfile.gpu . \n$ nvidia-docker run -it graphsage:gpu bash \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8491726280382825
      ],
      "excerpt": "Finally, a --base_log_dir should be specified (it defaults to the current directory). \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8463362338332842
      ],
      "excerpt": "<train_prefix>-G.json -- A networkx-specified json file describing the input graph. Nodes have 'val' and 'test' attributes specifying if they are a part of the validation and test sets, respectively. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8774619703448931
      ],
      "excerpt": "<train_prefix>-walks.txt [optional] --- A text file specifying random walk co-occurrences (one pair per line) (*only for unsupervised version of graphsage) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8144936398056025
      ],
      "excerpt": "To run random walks for the unsupervised model and to generate the <prefix>-walks.txt file) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.827613632252934,
        0.8510818500008063
      ],
      "excerpt": "The supervised model will output F1 scores, while the unsupervised model will train embeddings and store them. \nThe unsupervised embeddings will be stored in a numpy formated file named val.npy with val.txt specifying the order of embeddings as a per-line list of node ids. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/williamleif/GraphSAGE/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# GraphSage: Representation Learning on Large Graphs",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "GraphSAGE",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "williamleif",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/williamleif/GraphSAGE/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Recent versions of TensorFlow, numpy, scipy, sklearn, and networkx are required (but networkx must be <=1.11). You can install all the required packages using the following command:\n\n\t$ pip install -r requirements.txt\n\nTo guarantee that you have the right package versions, you can use [docker](https://docs.docker.com/) to easily set up a virtual environment. See the Docker subsection below for more info.\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The example_unsupervised.sh and example_supervised.sh files contain example usages of the code, which use the unsupervised and supervised variants of GraphSage, respectively.\n\nIf your benchmark/task does not require generalizing to unseen data, we recommend you try setting the \"--identity_dim\" flag to a value in the range [64,256].\nThis flag will make the model embed unique node ids as attributes, which will increase the runtime and number of parameters but also potentially increase the performance.\nNote that you should set this flag and *not* try to pass dense one-hot vectors as features (due to sparsity).\nThe \"dimension\" of identity features specifies how many parameters there are per node in the sparse identity-feature lookup table.\n\nNote that example_unsupervised.sh sets a very small max iteration number, which can be increased to improve performance.\nWe generally found that performance continued to improve even after the loss was very near convergence (i.e., even when the loss was decreasing at a very slow rate).\n\n*Note:* For the PPI data, and any other multi-ouput dataset that allows individual nodes to belong to multiple classes, it is necessary to set the `--sigmoid` flag during supervised training. By default the model assumes that the dataset is in the \"one-hot\" categorical setting.\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2591,
      "date": "Sun, 26 Dec 2021 10:48:26 GMT"
    },
    "technique": "GitHub API"
  }
}