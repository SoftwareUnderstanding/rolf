{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use this package, please cite. \n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if update_discriminator: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if update_generator: \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Impavidity/relogic",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-07-16T21:46:38Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-10T14:13:49Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This toolkit is for developing the Natural Language Processing (NLP) pipelines, including model design and development, model deployment and distributed computing.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8531082759172386
      ],
      "excerpt": "which is the entry of the training/evaluation process. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8868817758856585
      ],
      "excerpt": "In the Trainer, Task objects will be initialized based on the argument --task_names. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8209306305381165
      ],
      "excerpt": "Batch and Dataflow for your task. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9281002080807639
      ],
      "excerpt": "Define the task type. Currently we categorize the tasks into three types: classification, span_extraction, and tagging. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8417825256549807
      ],
      "excerpt": "train the model, and directly use the probability of softmax as ranking score. For NER task, it can be categorized as tagging \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8488863162643385
      ],
      "excerpt": "step you need to do is to implement a task-specific module. Basically this module takes the contextual representation and \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.868796593534554
      ],
      "excerpt": "Implement the scorer for your task.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8422391191798809,
        0.9654447740817651,
        0.9912835771847361
      ],
      "excerpt": "There are several models are implemented in this toolkit and the instructions will be presented in this section. \nBasically there model are based on contextual encoder such as BERT. For more information, please refer to Devlin et al. \nThe Semantic Role Labeler is trained on CoNLL 2005, CoNLL 2009 and CoNLL 2012. Currently the model of CoNLL 2012 is  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.996714614592072,
        0.8126142254717156
      ],
      "excerpt": "The entity linking model is based on the Wikipedia and Baidu Baike anchors. \nThe basic training procedure of adversarial training is as follows \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8995147140571041
      ],
      "excerpt": "It is recommended to use \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8019824037663037
      ],
      "excerpt": "to explore the data file. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9693233393948762
      ],
      "excerpt": "To publish to permanent storage \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "hopefully I can continuously develop the project. ",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- What is the docsting style to follow?\n  Refer to https://sphinxcontrib-napoleon.readthedocs.io/en/latest/#\n  or https://learn-rst.readthedocs.io/zh_CN/latest/Sphinx\u7b80\u5355\u5165\u95e8.html\n  \n- How to generate the documentation?\n\n  ```bash\n  cd docs\n  make html\n  #: Open html file for checking\n  open _build/html/index.html\n  ```\n\n- How to publish the documentation to website?\n\n  I host the pages in another repo instead of another branch to make the code repo clean.\n\n  ```bash\n  git clone https://github.com/Impavidity/relogic-docs.git\n  ```\n\n  And just copy the generated file in `_build/html` into the repo and commit.\n\n  ```bash\n  cp -r relogic/docs/_build/html/* relogic-docs\n  cd relogic-docs\n  git add *\n  git commit -m \"Update the pages\"\n  git push\n  ```\n\n  And you can check the website here https://impavidity.github.io/relogic-docs\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Impavidity/relogic/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Thu, 30 Dec 2021 01:25:37 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Impavidity/relogic/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Impavidity/relogic",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/Impavidity/relogic/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Impavidity/relogic/master/relogic/logickit/scripts/run_conll_eval.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/relogic/logickit/scripts/fetch_library.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/relogic/logickit/scripts/semantic_role_labeling/generate_segmentor.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/relogic/logickit/scripts/semantic_role_labeling/merge_all.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/relogic/logickit/scripts/semantic_role_labeling/merge_all_gold.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/tests/run_tests.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/tests/experiments/srl_arxiv.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/tests/experiments/doc_ir.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/tests/experiments/pos.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/tests/experiments/ner.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/tests/experiments/doc_ir_regression.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/tests/experiments/ir_regression.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/tests/experiments/ir_siamese.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/tests/experiments/adversarial_ner.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/tests/experiments/predicate_detection.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/tests/experiments/ir.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/tests/experiments/adversarial_ir.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/examples/scripts/glue/mrpc.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/examples/scripts/segmentation/srl_segmentation.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/examples/scripts/pair_matching/pair.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/examples/scripts/semantic_role_labeling/description/conll05_large.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/examples/scripts/semantic_role_labeling/span_type_classification/conll05_large.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/examples/scripts/semantic_role_labeling/span_type_classification/conll12_large.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/examples/scripts/semantic_role_labeling/example_attention/conll05_large.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/examples/scripts/semantic_role_labeling/example_attention/conll12_large.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/examples/scripts/semantic_role_labeling/boundary_detection/conll05_large.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/examples/scripts/semantic_role_labeling/boundary_detection/conll12_large.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/examples/scripts/relation_extraction/tacred/tacred_base.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/examples/scripts/relation_extraction/tacred/tacred_base_dep.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/examples/scripts/relation_extraction/tacred/tacred_base_hybrid.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/examples/scripts/relation_extraction/tacred/tacred_classification.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/examples/semantic-role-labeling/make_conll2012_data.sh",
      "https://raw.githubusercontent.com/Impavidity/relogic/master/examples/semantic-role-labeling/fetch_and_make_conll05_data.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\n#: clone the repo.\ngit clone https://github.com/Impavidity/relogic.git\n#: create data/raw_data folder, where raw datasets are stored.\nmkdir data/raw_data\n#: create a folder for saving the logs.\nmkdir logs\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8118231872503513
      ],
      "excerpt": "Implement Dataflow. You need to define the Example,  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9150949795772364
      ],
      "excerpt": "How to publish the code to support pip install? \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8388826312417043
      ],
      "excerpt": "Here is the example to publish the package to test environment. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9395020408608512
      ],
      "excerpt": "  #: Distribute the package to test environment. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9959326751040033,
        0.9254329789894603
      ],
      "excerpt": "  #: Install newly uploaded package \n  python -m pip install --index-url https://test.pypi.org/simple/ --no-deps relogic \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8164889140046654
      ],
      "excerpt": "  AdvAgent.update(real_encode[\"output\"].detach(), fake_encode[\"output\"].detach()) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8289669050403863,
        0.8289669050403863
      ],
      "excerpt": "  adversarial_loss = AdvAgent.gen_loss(real_encode[\"output\"], fake_encode[\"output\"]) \n  label_loss = cross_entropy_loss(real_encode[\"output\"], gold_label) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8518704234306399
      ],
      "excerpt": "cat data.json | jq . | less \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8712624124811189
      ],
      "excerpt": "  python setup.py sdist bdist_wheel \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Impavidity/relogic/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Peng Shi\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "relogic",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "relogic",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Impavidity",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Impavidity/relogic/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 18,
      "date": "Thu, 30 Dec 2021 01:25:37 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```python\nfrom relogic.pipelines.core import Pipeline\n\npipeline = Pipeline(\n  component_names=[\"predicate_detection\", \"srl\"],\n  component_model_names= {\"predicate_detection\" : \"spacy\" ,\"srl\": \"srl-conll12\"})\n\nfrom relogic.structures.sentence import Sentence\n\nsent = Sentence(\n  text=\"The Lexington-Concord Sesquicentennial half dollar is a fifty-cent piece struck by the United States Bureau of the Mint in 1925 as a commemorative coin in honor of the 150th anniversary of the Battles of Lexington and Concord.\")\n\npipeline.execute([sent])\n```\n\nYou will observe the `srl_labels` in Sentence and their labels sequence matches with the sequence of the predicates, \nwhich is predicted with spacy pos tagger (we simply regard VERB as predicate).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```python\nfrom relogic.graphkit.linking.simple_entity_linker import SimpleEntityLinker\nlinker = SimpleEntityLinker([\"en_wikipedia\", \"zh_baike\"])\nlinker.link(\"Obama\", \"en_wikipedia\").ranked_uris\nlinker.link(\"\u8303\u51b0\u51b0\", \"zh_baike\").ranked_uris\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}