{
  "citation": [
    {
      "confidence": [
        0.8111036989382164,
        0.9146894306581498
      ],
      "excerpt": "NVIDIA Multi-GPU Jacobi Solver | GitHub \nComm|Scope | Paper | GitHub \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8893977543919693
      ],
      "excerpt": "Half-Duplex without peer access | GitHub \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8090016440670298
      ],
      "excerpt": "* MGBench | Github \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8090016440670298
      ],
      "excerpt": "* Scatter-Gather | GitHub \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9313675897188715,
        0.9146894306581498
      ],
      "excerpt": "* Eidetic 3D LSTM | Paper | GitHub \n* Transformer | Paper | GitHub \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ParCoreLab/ComScribe",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-08-15T06:39:16Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-23T21:18:59Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8873739498242248
      ],
      "excerpt": "To obtain the communication matrices of your application (app): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.893657125766897
      ],
      "excerpt": "The communication matrix for a communication type is only generated if it is detected, e.g. if there are no Unified Memory transfers then there will not be any output regarding Unified Memory transfers. For the types of communication detected, the generated figures are saved as PDF files in the directory of the script. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9416123155437394
      ],
      "excerpt": "-n enables the profiling of collectives. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9299058318241681
      ],
      "excerpt": "We have used our tool in an NVIDIA V100 DGX2 system with up to 16 GPUs using CUDA v10.0.130 for the following benchmarks: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8712854613973773,
        0.8051400808038968
      ],
      "excerpt": "Full-Duplex with Unified Memory | GitHub \nHalf-Duplex with peer access | GitHub \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8265843453341714,
        0.8670527347715384
      ],
      "excerpt": "* Game Of Life | GitHub \n* Eidetic 3D LSTM | Paper | GitHub \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "ComScribe is a tool to identify communication among all GPU-GPU and CPU-GPU pairs in a single-node multi-GPU system.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/parcorelab/comscribe/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Tue, 28 Dec 2021 15:55:17 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ParCoreLab/ComScribe/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ParCoreLab/ComScribe",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/parcorelab/comscribe/master/install.sh",
      "https://raw.githubusercontent.com/parcorelab/comscribe/master/nccl/src/collectives/device/gen_rules.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You can directly execute install.sh script \n\n```\n./install.sh\n```\n\nOR\n\nYou can install it manually.\n\nYou will need the following programs:\n\n- [Python](https://www.python.org/): ComScribe is a Python script. It uses several packages listed in [`requirements.txt`](/requirements.txt), which you can install via the command:\n\n```Bash\npip3 install -r requirements.txt\n```\n\n- [nvprof](https://docs.nvidia.com/cuda/profiler-users-guide/index.html#nvprof-overview): ComScribe parses the outputs of NVIDIA's profiler *nvprof*, which is a light-weight command-line profiler available since CUDA 5.\n\n- [NCCL](nccl)[Optional]. ComScribe modifies NCCL library to profile collective communication primitives. If your application does not use any collective operations, you don't have to perform this step.\n\n```bash\ncd nccl && make -j src.build\n```\n\nNo further installation is required.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9205447590612792
      ],
      "excerpt": "ComScribe is a tool that identifies communication among all GPU-GPU and CPU-GPU pairs in a single-node multi-GPU system. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.897405838213466
      ],
      "excerpt": "NVIDIA Multi-GPU Jacobi Solver | GitHub \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8890818307099057
      ],
      "excerpt": "  <img src=\"/example_outputs/transformer.PNG\" width=\"320\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8587476985249702
      ],
      "excerpt": "Usage  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8298895871702687
      ],
      "excerpt": "-i takes the input command as a string such as: -i './app --foo 20 --bar 5' \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ParCoreLab/ComScribe/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "C",
      "Python",
      "Makefile",
      "Cuda",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "BSD 3-Clause \"New\" or \"Revised\" License",
      "url": "https://api.github.com/licenses/bsd-3-clause"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'BSD 3-Clause License\\n\\nCopyright (c) 2020, ParCoreLab @ Ko\\xc3\\xa7 University\\nAll rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met:\\n\\n1. Redistributions of source code must retain the above copyright notice, this\\n   list of conditions and the following disclaimer.\\n\\n2. Redistributions in binary form must reproduce the above copyright notice,\\n   this list of conditions and the following disclaimer in the documentation\\n   and/or other materials provided with the distribution.\\n\\n3. Neither the name of the copyright holder nor the names of its\\n   contributors may be used to endorse or promote products derived from\\n   this software without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "ComScribe",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "ComScribe",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ParCoreLab",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ParCoreLab/ComScribe/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 7,
      "date": "Tue, 28 Dec 2021 15:55:17 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "`python3 comscribe.py -g 4 -i './scope --benchmark_filter=\"Comm_ZeroCopy_GPUToGPU_Read.*18.*\" -n 0' -s log`\n\nGives the bar-chart for Zero-copy memory transfers:\n<p align=\"center\">\n  <img src=\"/example_outputs/commscope_zcm_read.png\" width=\"320\">\n</p>\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "`python3 comscribe.py -g 4 -i './scope --benchmark_filter=\"Comm_Demand_Duplex_GPUGPU.*18.*\"' -s linear`\n\nGives two matrices, bytes transferred (left) and number of transfers made (right):\n<p align=\"center\" float=\"left\">\n  <img src=\"/example_outputs/um_num_bytes.png\" width=\"320\" />\n  <img src=\"/example_outputs/um_num_times.png\" width=\"320\" />\n</p>\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "`python3 comscribe.py -g 4 -i './fullduplex' -s linear`\n\nGives two matrices, bytes transferred (left) and number of transfers made (right):\n<p align=\"center\" float=\"left\">\n  <img src=\"/example_outputs/mgbench_full_duplex_bytes.png\" width=\"320\" />\n  <img src=\"/example_outputs/mgbench_full_duplex_times.png\" width=\"320\" />\n</p>\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "`python3 comscribe.py -g 4 -i './cuIsing -y 32768 -x 65536 -n 128 -p 16 -d 4 -t 1.5' -s log`\n\nGives two matrices, bytes transferred (left) and number of transfers made (right):\n<p align=\"center\" float=\"left\">\n  <img src=\"/example_outputs/ising_gpu_num_bytes.png\" width=\"320\" />\n  <img src=\"/example_outputs/ising_gpu_num_times.png\" width=\"320\" />\n</p>\n\n\n",
      "technique": "Header extraction"
    }
  ]
}