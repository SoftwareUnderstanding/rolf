{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2102.01752",
      "https://arxiv.org/abs/2106.01954",
      "https://arxiv.org/abs/2106.00736",
      "https://arxiv.org/abs/1706.08500"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- [cycleGAN repo](https://github.com/junyanz/CycleGAN) with Winter2Summer and Photo2Monet datasets;\n- [CelebA page](http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html) with faces dataset and [this page](https://www.kaggle.com/jessicali9530/celeba-dataset) with its aligned 64x64 version;\n- [pytorch-fid repo](https://github.com/mseitzer/pytorch-fid) to compute [FID](https://arxiv.org/abs/1706.08500) score;\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n@inproceedings{\n  korotin2021wasserstein,\n  title={Wasserstein-2 Generative Networks},\n  author={Alexander Korotin and Vage Egiazarian and Arip Asadulaev and Alexander Safin and Evgeny Burnaev},\n  booktitle={International Conference on Learning Representations},\n  year={2021},\n  url={https://openreview.net/forum?id=bEoxzW_EXsa}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{\n  korotin2021wasserstein,\n  title={Wasserstein-2 Generative Networks},\n  author={Alexander Korotin and Vage Egiazarian and Arip Asadulaev and Alexander Safin and Evgeny Burnaev},\n  booktitle={International Conference on Learning Representations},\n  year={2021},\n  url={https://openreview.net/forum?id=bEoxzW_EXsa}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8962455610920044
      ],
      "excerpt": "Repository for Continuous Wasserstein-2 Barycenter Estimation without Minimax Optimization paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9105368110547479
      ],
      "excerpt": "    <th><a href=\"https://github.com/harryliew/WGAN-QC\">WGAN-QC</a></th> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/iamalexkorotin/Wasserstein2GenerativeNetworks",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-06-22T12:13:23Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-21T19:56:20Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.982975964864455,
        0.9628367733919245
      ],
      "excerpt": "This is the official Python implementation of the ICLR 2021 paper Wasserstein-2 Generative Networks (paper on openreview) by Alexander Korotin, Vahe Egizarian, Arip Asadulaev, Alexander Safin and Evgeny Burnaev. \nThe repository contains reproducible PyTorch source code for computing optimal transport maps (and distances) in high dimensions via the end-to-end non-minimax method (proposed in the paper) by using input convex neural networks. Examples are provided for various real-world problems: color transfer, latent space mass transport, domain adaptation, style transfer. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9652050256284443,
        0.9016802740908804,
        0.9022713969565378,
        0.9182617462572857
      ],
      "excerpt": "Repository for Continuous Wasserstein-2 Barycenter Estimation without Minimax Optimization paper. \nRepository for Do Neural Optimal Transport Solvers Work? A Continuous Wasserstein-2 Benchmark paper. \nRepository for Large-Scale Wasserstein Gradient Flows paper. \nAll the experiments are issued in the form of pretty self-explanatory jupyter notebooks (notebooks/). For convenience, the majority of the evaluation output is preserved. Auxilary source code is moved to .py modules (src/). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8849204173781505
      ],
      "excerpt": "Transforming single Gaussian to the mixture of 100 Gaussuans without mode dropping/collapse (and some other toy cases). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9448239905563617
      ],
      "excerpt": "Assessing the quality of fitted optimal transport maps between two high-dimensional Gaussians (tested in dim up to 4096). The metric is Unexplained Variance Percentage (UVP, %). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8357722717482288
      ],
      "excerpt": "CelebA 64x64 generated faces. The quality of the model highly depends on the quality of the autoencoder. Use notebooks/AE_Celeba.ipynb to train MSE or perceptual AE (on VGG features,  to improve AE visual quality).<br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9050432967848564
      ],
      "excerpt": "Combining simple pre-trained MSE autoencoder with W2GN is enough to surpass Wasserstein GAN model in Freschet Inception Distance Score (FID). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9733520128903179
      ],
      "excerpt": "Perceptual VGG autoencoder combined with W2GN provides nearly State-of-the-art FID (compared to Wasserstein GAN with Quadratic Cost). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9675895423406526
      ],
      "excerpt": "MNIST-USPS domain adaptation. PCA Visualization of feature spaces (see the paper for metrics). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9551616143893585
      ],
      "excerpt": "Optimal transport map in the space of images. Photo2Cezanne and Winter2Summer datasets are used. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "PyTorch implementation of the paper \"Wasserstein-2 Generative Networks\".",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/iamalexkorotin/Wasserstein2GenerativeNetworks/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Sun, 26 Dec 2021 03:02:46 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/iamalexkorotin/Wasserstein2GenerativeNetworks/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "iamalexkorotin/Wasserstein2GenerativeNetworks",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/iamalexkorotin/Wasserstein2GenerativeNetworks/master/notebooks/AE_Celeba.ipynb",
      "https://raw.githubusercontent.com/iamalexkorotin/Wasserstein2GenerativeNetworks/master/notebooks/W2GN_gaussians_high_dimensions.ipynb",
      "https://raw.githubusercontent.com/iamalexkorotin/Wasserstein2GenerativeNetworks/master/notebooks/W2GN_color_transfer.ipynb",
      "https://raw.githubusercontent.com/iamalexkorotin/Wasserstein2GenerativeNetworks/master/notebooks/W2GN_style_transfer.ipynb",
      "https://raw.githubusercontent.com/iamalexkorotin/Wasserstein2GenerativeNetworks/master/notebooks/W2GN_latent_space_optimal_transport.ipynb",
      "https://raw.githubusercontent.com/iamalexkorotin/Wasserstein2GenerativeNetworks/master/notebooks/W2GN_domain_adaptation.ipynb",
      "https://raw.githubusercontent.com/iamalexkorotin/Wasserstein2GenerativeNetworks/master/notebooks/W2GN_toy_experiments.ipynb"
    ],
    "technique": "File Exploration"
  },
  "invocation": [
    {
      "confidence": [
        0.8252530823673941
      ],
      "excerpt": "<p align=\"center\"><img src=\"pics/mappings.png\" width=\"450\" /></p> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8360724604347454,
        0.820497190751111
      ],
      "excerpt": "<p align=\"center\"><img src=\"pics/icnn.png\" width=\"450\" /></p> \nposter/W2GN_poster.png -- poster (landscape format) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8408011420158433
      ],
      "excerpt": "<p align=\"center\"><img src=\"poster/W2GN_poster.png\" width=\"500\" /></p> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8360724604347454
      ],
      "excerpt": "<p align=\"center\"><img src=\"pics/toy_100g.png\" width=\"650\"/></p> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8360724604347454
      ],
      "excerpt": "<p align=\"center\"><img src=\"pics/gaussian_ot.png\" width=\"300\" /></p> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8566966806568882,
        0.8360724604347454
      ],
      "excerpt": "<p align=\"center\"><img src=\"pics/latent_ot.png\" width=\"400\"/></p> \n<p align=\"center\"><img src=\"pics/celeba_generated_vgg_ae.png\" width=\"700\" /></p> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8890039393215521
      ],
      "excerpt": "    <td>45.23</td> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8360724604347454,
        0.8360724604347454
      ],
      "excerpt": "<p align=\"center\"><img src=\"pics/colortrans_houses_images.png\" width=\"700\" /></p> \n<p align=\"center\"><img src=\"pics/colortrans_houses_palettes.png\" width=\"700\" /></p> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8360724604347454
      ],
      "excerpt": "<p align=\"center\"><img src=\"pics/domain_pca.png\" width=\"700\" /></p> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/iamalexkorotin/Wasserstein2GenerativeNetworks/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Wasserstein-2 Generative Networks",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Wasserstein2GenerativeNetworks",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "iamalexkorotin",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/iamalexkorotin/Wasserstein2GenerativeNetworks/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The implementation is GPU-based. Single GPU (~GTX 1080 ti) is enough to run each particular experiment. Tested with\n\n`torch==1.3.0 torchvision==0.4.1`\n\nThe code might not run as intended in newer `torch` versions. Newer `torchvision` might conflict with FID score evaluation.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 22,
      "date": "Sun, 26 Dec 2021 03:02:46 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "gan",
      "deep-learning",
      "pytorch",
      "generative-adversarial-network",
      "style-transfer",
      "optimal-transport"
    ],
    "technique": "GitHub API"
  }
}