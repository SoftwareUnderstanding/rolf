# Theano-Projects
https://towardsdatascience.com/i-trained-fake-news-detection-ai-with-95-accuracy-and-almost-went-crazy-d10589aa57c

https://towardsdatascience.com/multi-class-text-classification-with-lstm-1590bee1bd17

https://medium.com/@vishwajeetkumar_85368/news-classification-using-bidirectional-lstm-and-attention-a67aa803ca74

https://medium.com/jatana/report-on-text-classification-using-cnn-rnn-han-f0e887214d5f

https://www.kaggle.com/ngyptr/multi-class-classification-with-lstm

https://realpython.com/python-keras-text-classification/

https://www.kaggle.com/shaz13/spooky-author-identification-bert

https://www.kaggle.com/c/spooky-author-identification

https://www.kaggle.com/sudalairajkumar/simple-feature-engg-notebook-spooky-author


# coding: utf-8

# In[124]:

import pandas as pd
import numpy as np
import os
import re
import nltk
from nltk.corpus import stopwords


# In[2]:

cat=pd.read_csv('categories.csv')


# In[3]:

cat.head()


# In[43]:

cat_map=pd.read_excel('category_mapping.xlsx')


# In[16]:

cat_map.head()


# In[89]:

data=pd.read_excel('news_details.xlsx')


# In[18]:

len(data)


# In[20]:

data_merge=pd.merge(data,cat_map,on='news_id',how='inner')


# In[19]:

len(cat_map)


# In[21]:

len(data_merge)


# In[44]:

len(cat_map.news_id.unique())


# In[45]:

cat_map=pd.merge(cat_map,cat,left_on='category_id',right_on='id')


# In[28]:

len(cat_map)


# In[ ]:




# In[32]:

x=pd.groupby(cat_map,['news_id'])['category_id'].nunique()


# In[36]:

x=pd.DataFrame(x)


# In[41]:

x[x.category_id==2]


# In[47]:

cat_map=cat_map[cat_map.news_id!="5cb9464e4f646938b1c283f3_google"]


# In[50]:

cat_map=cat_map[['news_id','category_id','category']]


# In[55]:

len(cat_map.news_id.unique())


# In[56]:

cat_map.drop_duplicates(keep='first',inplace=True)


# In[57]:

len(cat_map.news_id.unique())


# In[91]:

data.drop_duplicates(keep='first',inplace=True)


# In[95]:

len(data)


# In[96]:

len(data.news_id.unique())


# In[76]:

data.isnull().sum()


# In[ ]:

len(data[data.news_description.notnull()].news_description.unique())


# In[66]:

data.columns


# In[102]:

len(data[data.news_description.notnull()].news_description.unique())


# In[87]:

len(data.title.unique())


# In[100]:

len(data[data.news_description.isnull()].snippet.unique())


# In[73]:

data.drop_duplicates(subset='news_id',inplace=True)


# In[94]:

data.drop_duplicates(subset='title',inplace=True)


# In[104]:

data.fillna(value={'news_description':""},inplace=True)


# In[107]:

data.columns


# In[108]:

cat_map.columns


# In[109]:

data_merged=pd.merge(data,cat_map,on='news_id')


# In[110]:

len(data_merged)


# In[113]:

data_merged.columns


# In[115]:

dataset=data_merged[['snippet', 'title', 'news_description', 'category_id',
       'category']].copy()


# In[116]:

dataset.head()


# In[118]:

dataset.category.value_counts()/len(dataset)


# In[119]:

dataset['ts']=dataset['title']+" "+dataset['snippet']


# In[125]:

df = dataset.reset_index(drop=True)
REPLACE_BY_SPACE_RE = re.compile('[/(){}\[\]\|@,;.]')
trailing_space=re.compile(' +')
BAD_SYMBOLS_RE = re.compile('[^0-9a-z #+_]')
STOPWORDS = set(stopwords.words('english'))

def clean_text(text):
    """
        text: a string
        
        return: modified initial string
    """
    text = text.lower() # lowercase text
    text = REPLACE_BY_SPACE_RE.sub(' ', text) # replace REPLACE_BY_SPACE_RE symbols by space in text. substitute the matched string in REPLACE_BY_SPACE_RE with space.
    text=trailing_space.sub('',text)
    text = BAD_SYMBOLS_RE.sub('', text) # remove symbols which are in BAD_SYMBOLS_RE from text. substitute the matched string in BAD_SYMBOLS_RE with nothing. 
    
#    text = re.sub(r'\W+', '', text)
    text = ' '.join(word for word in text.split() if word not in STOPWORDS) # remove stopwors from text
    return text
df['cleaned_ts'] = df['ts'].apply(clean_text)
df['cleaned_ts'] = df['cleaned_ts'].str.replace('\d+', '')



nt_pow=[]
dt_pow=[]
q=2
theta=100
t=1000-np.arange(1,20)
w_not=np.divide((1-exp(-1/theta)),(1-np.exp(np.divide(-t,theta))))

def est_wt(w_n,th):
    w=[]
    for i in range(1,20):
        #w_n=w_n.reshape(-1,1)
        t=np.arange(0,1000-i)
        exp_arr=np.exp(-np.divide(t,th))
        w.append(np.multiply(w_n[i-1],exp_arr))
    return np.asarray(w)
Wt=est_wt(w_n=w_not,th=theta) # 
K=list()
for t in range(1,20):
    # Not taking absolute as taking power of array will turn it into absolute
    dt=S[0,:1000-t] # After resolving end of t+T_max is 1000-T_max while T_max ranges from 1 to 19
    nt=S[0,t:]-dt
    
    nt_pow=np.power(nt,q)
    dt_pow=np.power(dt,q)
    # Assuming Navg Davg are element wise calculation
    n_avg=np.multiply((1/Wt[t-1]),nt_pow)
    d_avg=np.multiply((1/Wt[t-1]),dt_pow)
    
    K.append(np.divide(np.sum(n_avg,axis=0),np.sum(d_avg,axis=0)))
K=np.asarray(K)
    
J=np.arange(0,15)

KJ=[K[:x+5] for x in J]
KJ=np.asarray(KJ)
T=np.arange(1,20)
TJ=[T[:x+5] for x in J]
#Assuming Linear regression is to be performed on set of array separately, Use simple linear regression as nothing
# is specified, Lasso can be used to get better accuracy if required
def lin_re(X,Y,q):
    
   
    # Not scaling Y
    regressor = LinearRegression() 
    regressor.fit(X,Y)
    b=regressor.coef_[0][0]/q
    return b
b_avg=[]
for i in range(len(J)):
    b_avg.append(lin_re(np.log(TJ[i]).reshape(-1,1),np.log(KJ[i]).reshape(-1,1),q))

b_avg=sum(b_avg)/len(b_avg)
    
    
    
    
def genidx(tMax,seriesLen):
    sequenceList=list()
    for i in range(2,tMax+2):
        
        sequenceList.append(list(range(i,seriesLen+1)))
    return sequenceList
 
 def generatew(alpha,sLen):
    wvec=[]
    w0=(1-exp(-alpha))/(1-exp(-alpha*sLen))
    for i in range(sLen):
        wvec.append(w0*exp(-i*alpha))
    return list(reversed(wvec))
    
 def estmoment(q,origSeries,incrIdx,alpha):
    numobs=len(incrIdx)
    wtSeries=generatew(alpha,numobs)
    
    seriesDiff=np.array([origSeries[x - 1] for x in incrIdx])-np.array(origSeries[:numobs])
    
    seriesMoment = sum(np.multiply(wtSeries , np.power(abs(seriesDiff),q)))
    denomMoment = sum(np.multiply(wtSeries ,np.power(abs(np.array(origSeries[0:numobs])),q)))
    
    return(seriesMoment/denomMoment)
    
  def estH(q,kq,incrsize):
    incrteval=list(range(0,incrsize))
    X=np.array([kq[x] for x in incrteval]).reshape(-1,1)
   
    Y=np.array(incrteval)+1
    Y=Y.reshape(-1,1)
    regressor = LinearRegression() 
    
    regressor.fit(np.log(Y),np.log(X))
    b=regressor.coef_/q
    return b
    
 moment = 2
numIncr = 19
srcAlpha = 1/100
S=list(S[0])


srcData=S

seriesLen = len(srcData)
incrIndexes = genidx(numIncr, seriesLen)
seriesWeight = generatew(srcAlpha, seriesLen)

pm=[0]*19
numIncr=19
for i in range(numIncr):
    pm[i]=estmoment(moment,S,incrIndexes[i],srcAlpha)
ba=[]
for i in range(5,20):
    ba.append(estH(moment,pm,i))
b_list=[]
for i in range(15):
    b_list.append(ba[i][0][0])
b_avg=sum(b_list)/len(b_list)








# In[ ]:


# CONvnet Parameter selection 

1. Paramter sharing is to make each conv layer share weight paramater or have same paramter.

2. Each conv layer gets features ( edges, shapes etc) from image so helpful to extract features or Patterns
 from images thus we can use multiple conv layer with relu before using
 pooling layer

 3. Idea of using pooling layer is to reduce size and make it ready for final 
 fully connected layer this is to speed up learning, But a caveat is we shold use pooling layer more than 2x2 
 as serious reduction in info can happen.

 4. Instead of pooling now it is suggested to use larger stride in CONV layer once in a while,
 this wil reduce size without infor loss.

 5. Beofre FC one of the many type of nromalization is used.

 6. CONV layers stacked (with relu) give better coverage of the image,
 instead of a single big receptive layer. Because withitn layer non linearity will 
 help in learning better features than single layer with linearity.

 and single one wil require more memory.


 7. Why multiple conv layers, Lets take example that using filter in first conv layer we have 
 identified an edge and the sum of pixels multiplied by filter will be high
 if there is edge and close to zero if filter is not rembled with that edge
 when we stack one after other these conv layers they add up to form elemtns like,
 hands, paws, etc as edges of these elements are learnt in previous layers.
 It also helps to describe locations of things of interest.
 The deeper you go, filters tend to have larger receptive field(or area of image covered by filter)
which helps in identifying biger region.


 # More number of strdes more steps we have to take.
# input volume is just image
# Increasing stride will make receptive fileds overlap less and smaller spatial dimensions(alternative to pooling)

# Other options for pooling layers are average pooling and L2-norm pooling
# POOLING :: The intuitive reasoning behind this layer is that once we know that a specific feature is in the original input volume (there will be a high activation value), its exact location is not as important as its relative location to the other features
# pooling recudes learing paramters and reduces overfitting.




 ### IMPORTANT ###
 Use whatever works best for IMagenet

# THe more the filters the better we are able to capture curves, edges etc.


# Layer Sizing Patterns
--  Input layer(that contains image) should be divisible by 2 many times e.g. 224,384 and 512.
--  Conv layer should have small features (3x3, 5x5) with stride=1 and padding in such a wayt that conv layer does not alter
the spatial dimensions of the input. e.g. F=3 then P=1, F=5, then p=2 . p=(F-1)/2 
Dont use filter lke 7x7 foor other than first conv image looking at image.
--  If using one stride than leave down sampling to pooling layers.
--  Information at borders may wash away easily so better to use padding



WHy we cannot use fully connected network instead of convolutional NN, is because the number of wieghts paramters will touch thousand.
for 200X200X3 image weight in first layer itself will be 1.2 L this will lead to massive overfitting and 
its impractical.

What filters are doing is taking patches of image and trying to predict its class.





# RESOURCES

https://github.com/gcr/torch-residual-networks
http://torch.ch/blog/2016/02/04/resnets.html
http://cs231n.github.io/

https://adeshpande3.github.io/adeshpande3.github.io/A-Beginner's-Guide-To-Understanding-Convolutional-Neural-Networks/

##### IMPORTANT #####
https://adeshpande3.github.io/adeshpande3.github.io/The-9-Deep-Learning-Papers-You-Need-To-Know-About.html


Feature extraction in CV
https://arxiv.org/pdf/1311.2524.pdf

https://www.edureka.co/blog/convolutional-neural-network/ Explained using bits and very detailed 
theory

 LeNet. The first successful applications of Convolutional Networks were developed by Yann LeCun in 1990’s. Of these, the best known is the LeNet architecture that was used to read zip codes, digits, etc.
AlexNet. The first work that popularized Convolutional Networks in Computer Vision was the AlexNet, developed by Alex Krizhevsky, Ilya Sutskever and Geoff Hinton. The AlexNet was submitted to the ImageNet ILSVRC challenge in 2012 and significantly outperformed the second runner-up (top 5 error of 16% compared to runner-up with 26% error). The Network had a very similar architecture to LeNet, but was deeper, bigger, and featured Convolutional Layers stacked on top of each other (previously it was common to only have a single CONV layer always immediately followed by a POOL layer).
ZF Net. The ILSVRC 2013 winner was a Convolutional Network from Matthew Zeiler and Rob Fergus. It became known as the ZFNet (short for Zeiler & Fergus Net). It was an improvement on AlexNet by tweaking the architecture hyperparameters, in particular by expanding the size of the middle convolutional layers and making the stride and filter size on the first layer smaller.
GoogLeNet. The ILSVRC 2014 winner was a Convolutional Network from Szegedy et al. from Google. Its main contribution was the development of an Inception Module that dramatically reduced the number of parameters in the network (4M, compared to AlexNet with 60M). Additionally, this paper uses Average Pooling instead of Fully Connected layers at the top of the ConvNet, eliminating a large amount of parameters that do not seem to matter much. There are also several followup versions to the GoogLeNet, most recently Inception-v4.
VGGNet. The runner-up in ILSVRC 2014 was the network from Karen Simonyan and Andrew Zisserman that became known as the VGGNet. Its main contribution was in showing that the depth of the network is a critical component for good performance. Their final best network contains 16 CONV/FC layers and, appealingly, features an extremely homogeneous architecture that only performs 3x3 convolutions and 2x2 pooling from the beginning to the end. Their pretrained model is available for plug and play use in Caffe. A downside of the VGGNet is that it is more expensive to evaluate and uses a lot more memory and parameters (140M). Most of these parameters are in the first fully connected layer, and it was since found that these FC layers can be removed with no performance downgrade, significantly reducing the number of necessary parameters.
ResNet. Residual Network developed by Kaiming He et al. was the winner of ILSVRC 2015. It features special skip connections and a heavy use of batch normalization. The architecture is also missing fully connected layers at the end of the network. The reader is also referred to Kaiming’s presentation (video, slides), and some recent experiments that reproduce these networks in Torch. ResNets are currently by far state of the art Convolutional Neural Network models and are the default choice for using ConvNets in practice (as of May 10, 2016). In particular, also see more recent developments that tweak the original architecture from Kaiming He et al. Identity Mappings in Deep Residual Networks (published March 2016).
VGGNet in detail. Lets break down the VGGNet in more detail as a case study. The whole VGGNet is composed of CONV layers that perform 3x3 convolutions with stride 1 and pad 1, and of POOL layers that perform 2x2 max pooling with stride 2 (and no padding). We can write out the size of the representation at each step of the processing and keep track of both the representation size and the total number of weights:

INPUT: [224x224x3]        memory:  224*224*3=150K   weights: 0
CONV3-64: [224x224x64]  memory:  224*224*64=3.2M   weights: (3*3*3)*64 = 1,728
CONV3-64: [224x224x64]  memory:  224*224*64=3.2M   weights: (3*3*64)*64 = 36,864
POOL2: [112x112x64]  memory:  112*112*64=800K   weights: 0
CONV3-128: [112x112x128]  memory:  112*112*128=1.6M   weights: (3*3*64)*128 = 73,728
CONV3-128: [112x112x128]  memory:  112*112*128=1.6M   weights: (3*3*128)*128 = 147,456
POOL2: [56x56x128]  memory:  56*56*128=400K   weights: 0
CONV3-256: [56x56x256]  memory:  56*56*256=800K   weights: (3*3*128)*256 = 294,912
CONV3-256: [56x56x256]  memory:  56*56*256=800K   weights: (3*3*256)*256 = 589,824
CONV3-256: [56x56x256]  memory:  56*56*256=800K   weights: (3*3*256)*256 = 589,824
POOL2: [28x28x256]  memory:  28*28*256=200K   weights: 0
CONV3-512: [28x28x512]  memory:  28*28*512=400K   weights: (3*3*256)*512 = 1,179,648
CONV3-512: [28x28x512]  memory:  28*28*512=400K   weights: (3*3*512)*512 = 2,359,296
CONV3-512: [28x28x512]  memory:  28*28*512=400K   weights: (3*3*512)*512 = 2,359,296
POOL2: [14x14x512]  memory:  14*14*512=100K   weights: 0
CONV3-512: [14x14x512]  memory:  14*14*512=100K   weights: (3*3*512)*512 = 2,359,296
CONV3-512: [14x14x512]  memory:  14*14*512=100K   weights: (3*3*512)*512 = 2,359,296
CONV3-512: [14x14x512]  memory:  14*14*512=100K   weights: (3*3*512)*512 = 2,359,296
POOL2: [7x7x512]  memory:  7*7*512=25K  weights: 0
FC: [1x1x4096]  memory:  4096  weights: 7*7*512*4096 = 102,760,448
FC: [1x1x4096]  memory:  4096  weights: 4096*4096 = 16,777,216
FC: [1x1x1000]  memory:  1000 weights: 4096*1000 = 4,096,000

TOTAL memory: 24M * 4 bytes ~= 93MB / image (only forward! ~*2 for bwd)
TOTAL params: 138M parameters
As is common with Convolutional Networks, notice that most of the memory (and also compute time) is used in the early CONV layers, and that most of the parameters are in the last FC layers. In this particular case, the first FC layer contains 100M weights, out of a total of 140M.

## Setting theano as base framework for Keras ##
import theano as th
import os
os.environ['KERAS_BACKEND']='theano'
import keras as kr
import numpy as np
import keras as kr




# Theano Notes ##

x= th.tensor.fvector('x')             # creating a float type 32 bit variable for theano
W= th.shared(numpy.asarray([0.2,0.7]),'W')   # Shared varaibles are used within functions, These are genrally used to denote weight matrices


W.get_value()  # get value of W
W.set_value([0.1, 0.9]) # Set value for W

f=th.fucntion([x],y)  # Here x is input varaible list and y is output from fucntion

# Comilation can be controlled by setting value of mode in env variable THEANO_FLAGS:  FAST_COMPILE and FAST_RUN

f = function([x, In(y, value=1)], z)  # Use In to provide default value to your variables.

c = theano.tensor.dot(a, a) # Dot Product

# Activation Functions

c = theano.tensor.nnet.sigmoid(a)  # Element wise function will be applied and output will be in format of imput
c = theano.tensor.tanh(a)





x = th.tensor.fvector('x')
target = th.tensor.fscalar('target')
 
W = th.shared(np.asarray([0.0,0.0]), 'W')
y = (x+W).sum()
 
cost = th.tensor.sqr(target - y)
gradients = th.tensor.grad(cost, [W])

W_updated = W - (0.1 * gradients[0])
updates = [(W, W_updated)]
 
f = th.function([x, target], y, updates=updates)
print(W.eval()) 
for i in range(100):
    output = f([1.0, 1.0], 60.0)
    
    
    print(output)

# In this example value for target is 60 where x is [1,1] and we are trying to minimize cost where
# cost is dependent on x and w and target. so while minimizing cost function will try to achieve value of 
# target by learing values for W.


# New App


import dash
import dash_core_components as dcc
import dash_table
import dash_html_components as html
import pandas as pd
import plotly.graph_objs as go
import io
#import xlsxwriter
import flask
from flask import send_file
from dash.dependencies import Input, Output, State
df2=pd.read_csv('test.csv')



app = dash.Dash(__name__)


df=pd.read_csv('test2.csv')
df_g=pd.read_csv('test_graph.csv')
cols=df.columns
cols_g=df_g.columns
a=cols_g[0]
b=cols_g[1]
c=cols_g[2]
def1='Numeric 1'
def2='Numeric 2'
def3='Numeric 3'
numerical_features = df.columns
scatter_cols = [{'label':x.upper(), 'value':x} for x in numerical_features]

app = dash.Dash(__name__)

app.layout = html.Div([
     html.H1(children='AIuto - Your everyday analytics assistant'),

    dash_table.DataTable(
        id='datatable-filtering-fe',
        columns=[
            {"name": i, "id": i, "deletable": True} for i in df2.columns
        ],
        style_table={'width':'100vw',
            'overflowX':'scroll',
        'maxHeight':'300px',
        'overflowY':'scroll'},

        data=df2.to_dict('records'),
      style_cell={'padding': '5px'}, sort_action="native",filter_action="native",
    style_header={
        'backgroundColor': 'white',
        'fontWeight': 'bold'
    }  
    ),
    html.Div(id='datatable-filter-container'),

### Scatter Start here
html.Div([
html.Div([
        html.Div([
            dcc.Dropdown(
                id='xaxis-column',
                options=[{'label': i, 'value': i} for i in cols],
                value='Numeric 1'
            ),
            dcc.RadioItems(
                id='xaxis-type',
                options=[{'label': i, 'value': i} for i in ['Linear', 'Log']],
                value='Linear',
                labelStyle={'display': 'inline-block'}
            )
        ],
style={'width': '48%', 'display': 'inline-block'}),

 html.Div([
            dcc.Dropdown(
                id='yaxis-column',
                options=[{'label': i, 'value': i} for i in cols],
                value='Numeric 2'
            ),
            dcc.RadioItems(
                id='yaxis-type',
                options=[{'label': i, 'value': i} for i in ['Linear', 'Log']],
                value='Linear',
                labelStyle={'display': 'inline-block'}
            )
        ],style={'width': '48%', 'float': 'right', 'display': 'inline-block'})

        


    ]),
html.Div([

            dcc.Dropdown(
                id='color-selector',
                options=[{'label': i, 'value': i} for i in cols],
                value='TIER_GRP'
        )
        ],style={'width': '48%', 'display': 'inline-block'}),

dcc.Graph(id='indicator-graphic')

]),

### Div for Bar chart ###


html.Div([
    html.Div([

dcc.Dropdown(
                id='xaxis-column1',
                options=[{'label': i, 'value': i} for i in cols_g],
                value='Numeric 1'
            )],
            style={'width': '48%', 'display': 'inline-block'}),
    
html.Div([

dcc.Dropdown(
                id='yaxis-column1',
                options=[{'label': i, 'value': i} for i in cols_g],
                value='Numeric 1'
            )],
            style={'width': '48%', 'float': 'right', 'display': 'inline-block'}),

html.Div([
dcc.Checklist(
    id='checklists',
    options=[
        {'label': a , 'value':a },
        {'label': b, 'value':b },
       {'label': c, 'value':c }
    ],
    value=[a, b]
)  
],style={'display': 'inline-block'}),

html.Div([

    dcc.RadioItems(
    id='radios',
    options=[
        {'label': 'Bar Chart', 'value': 'bar'},
        {'label': 'Line Chart', 'value': 'line+markers'},
        {'label': 'Stacked Columns', 'value': 'bar1'}
    ],
    value='bar'
) 
],style={'width': '48%', 'float': 'right', 'display': 'inline-block'})

    ]),

dcc.Graph(id='indicator-graphic2'),

##### Div for Histograma d pie starts here

html.Div([


### Div Histogram
html.Div([
### Div Hist ele
html.Div([

dcc.Dropdown(
                id='xaxis-column-hist',
                options=[{'label': i, 'value': i} for i in cols],
                value='Numeric 1'
),
dcc.Dropdown(
                id='yaxis-column-hist',
                options=[{'label': i, 'value': i} for i in cols],
                value='TIER_GRP'
            )],
            style={'width': '49%','display': 'inline-block'}),

dcc.Graph(id='indicator-graphic3')],style={'width': '49%', 'display': 'inline-block'}),


html.Div([
html.Div([

dcc.Dropdown(
                id='labels-column-pie',
                options=[{'label': i, 'value': i} for i in cols],
                value='TIER_GRP'
            ),
dcc.Dropdown(
                id='values-column-pie',
                options=[{'label': i, 'value': i} for i in cols],
                value='Numeric 1'
            )],
            style={'width': '49%', 'float': 'right', 'display': 'inline-block'}),

dcc.Graph(id='indicator-graphic4')], style={'display': 'inline-block', 'width': '49%'})






])




### This closes the layout ###
])


### Callback for Bar Chart ###

@app.callback(
    Output('indicator-graphic2','figure'),
    [Input('xaxis-column1','value'),
    Input('yaxis-column1','value'),
    Input('checklists','value'),
    Input('radios','value')
])
def update_graph(xaxis_columns,yaxis_columns,checklists,radios):
    df2=df_g
    print("""#################################################################
         ###################################################################################
         ###########################################################################################
         #########################################################################################################
         ################################################################################################################""")
        
    print(radios)
    print("""#################################################################
         ###################################################################################
         ###########################################################################################
         #########################################################################################################
         ################################################################################################################""")
    if radios=='bar1':
        mode='stack'
        print(""" stackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstack
        stackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstack
        stackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstack
        stackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstack
        stackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstack""")
    else :
        mode='group'
    x_val=list(df2[xaxis_columns])
    if radios=='bar1':
        radios='bar'

    if len(checklists) ==1:
        y_val1=list(df2[checklists[0]])
       
        data= [

             {'x': x_val , 'y': y_val1, 'type': radios, 'name': checklists[0]}
        ]
    elif len(checklists)==2:
         y_val1=list(df2[checklists[0]])
         y_val2=list(df2[checklists[1]])
         
         data=[

             {'x': x_val , 'y': y_val1, 'type': radios, 'name': checklists[0]},
             {'x': x_val , 'y': y_val2, 'type': radios, 'name': checklists[1]}
        ]
    elif len(checklists)==3:
         y_val1=list(df2[checklists[0]])
         y_val2=list(df2[checklists[1]])
         y_val3=list(df2[checklists[2]])
         data= [

             {'x': x_val , 'y': y_val1, 'type': radios, 'name': checklists[0]},
             {'x': x_val , 'y': y_val2, 'type': radios, 'name': checklists[1]},
             {'x': x_val , 'y': y_val3, 'type': radios, 'name': checklists[2]}
        ]
    
    return {
         'data':data,
         'layout':go.Layout(

             xaxis={
                 'title':xaxis_columns
             },
             yaxis={
                 'title':yaxis_columns
             },
             margin={'l': 40, 'b': 40, 't': 10, 'r': 0},
             hovermode='closest',
             barmode=mode
         )
    }

@app.callback(
    Output('datatable-filter-container', "children"),
    [Input('datatable-filtering-fe', "data")])
def update_graph(rows):
    if rows is None:
        dff = df2
    else:
        dff = pd.DataFrame(rows)

    return html.Div()

@app.callback(
    Output('indicator-graphic', 'figure'),
    [Input('xaxis-column', 'value'),
     Input('yaxis-column', 'value'),
     Input('xaxis-type', 'value'),
     Input('yaxis-type', 'value'),
     Input('color-selector','value')
     
     ])
def update_graph(xaxis_column_name, yaxis_column_name,
                 xaxis_type, yaxis_type,color_selector_name):
    dff = df
    traces=[]
    for k in df[color_selector_name].unique():
        dff=df[df[color_selector_name]==k]
   
        traces.append(go.Scatter(
            x=dff[xaxis_column_name],
            y=dff[yaxis_column_name],
           
            mode='markers',
            marker={
                'size': 15,
                'opacity': 0.3,
                'line': {'width': 0.5, 'color': 'black'}
            },name=k
        ))
    return { 
        'data':traces,
        'layout': go.Layout(
            xaxis={
                'title': xaxis_column_name,
                'type': 'linear' if xaxis_type == 'Linear' else 'log'
            },
            yaxis={
                'title': yaxis_column_name,
                'type': 'linear' if yaxis_type == 'Linear' else 'log'
            },
            margin={'l': 40, 'b': 40, 't': 10, 'r': 0},
            hovermode='closest'
        )
    }


@app.callback(
    Output('indicator-graphic3', 'figure'),
    [Input('xaxis-column-hist', 'value'),
     Input('yaxis-column-hist', 'value')
     
     ])
def update_graph(xaxis_column_name_hist, color_column_name_hist):
    dff = df_g
    traces=[]
    for k in df[color_column_name_hist].unique():
        dff=df[df[color_column_name_hist]==k]
   
        traces.append(go.Histogram(
            x=dff[xaxis_column_name_hist],
           
           
           
            marker={
                
                'opacity': 0.3,
                'line': {'width': 0.5, 'color': 'black'}
            },name=k
        ))
    return { 
        'data':traces,
        'layout': go.Layout(
            xaxis={
                'title':xaxis_column_name_hist 
                
            },
            
           # margin={'l': 40, 'b': 40, 't': 10, 'r': 0},
            hovermode='closest',
            barmode='overlay'
        )
    }



@app.callback(
    Output('indicator-graphic4', 'figure'),
    [Input('labels-column-pie', 'value'),
     Input('values-column-pie', 'value')
     
     ])
def update_graph(labels_column, values_column):
    dff = df.groupby([labels_column])[values_column].sum().reset_index()
    labels=list(dff[labels_column])
    values=list(dff[values_column])


    return{
        'data':[go.Pie(
                labels=labels, values=values,
                hoverinfo='label+percent'
                , textinfo='value', 
               textfont=dict(size=20),
               marker=dict(line=dict(color='#000000', width=2))
                

               
           
        )],
    
        
        'layout': go.Layout(
            
           # margin={'l': 40, 'b': 40, 't': 10, 'r': 0},
            hovermode='closest'
        )
    }


if __name__ == '__main__':
    app.run_server(debug=True,host="127.1.1.1")
    
    
    
    
    
    
    
    
    
    
    from flask import Flask, request, render_template, json
import random, threading, webbrowser
import flask
import dash
import dash_core_components as dcc
import dash_table
import dash_html_components as html
import pandas as pd
import plotly.graph_objs as go
import io
import xlsxwriter
import flask
from flask import send_file
from dash.dependencies import Input, Output, State
import os.path
from os import path
import numpy as np
import requests
import tkinter as tk
from tkinter import ttk
from metadata_v2 import ordered_distance,distance_calc,ordered_distance_two,distance_calc_two,or_two

#test_file=pd.read_csv('test1_data.csv')
NORM_FONT= ("Verdana", 10)
def popupmsg(msg):
    popup = tk.Tk()
    popup.wm_title("!")
    label = ttk.Label(popup, text=msg, font=NORM_FONT)
    label.pack(side="top", fill="x", pady=10)
    B1 = ttk.Button(popup, text="Ok", command = popup.destroy)
    B1.pack()
    popup.mainloop()
server=Flask(__name__)

viz_url="http://127.1.1.1:{0}/dashboard/".format(8050)
import random, threading, webbrowser

@server.route("/")
def hello():
    return render_template('index.html')

@server.route('/',methods=["GET","POST"])
def viz():
      
    if request.method == "GET":
        return hello()
    elif request.method == "POST":
           
            
            return hello(),threading.Timer(.25, lambda: webbrowser.open(viz_url)).start()



#####CHANGE IN FINAL MAIN LINE 104
metadata_path="C:/Users/O716942/hackathon/final/api/metadata/i697072_K5FRJ8U3\MOCK_DATA"

@server.route('/query', methods=['GET', 'POST'])
def query():
    if request.method == "GET":
        return hello()
    elif request.method == "POST":
        #_query = request.data
        ###### This is Process SQL #######
        _query = request.form['inputIntermQuery']
        if _query:

            print(_query)
            # _query=or_two(word_list=test_file,inp=_query)
            print(_query)
            print("#######################################################################################################")
            
            r = requests.post('http://127.0.0.1:8089/sqlprocess', json={"_query": _query}) 
            print(_query)
            #data = process_sql(_query)
            #jsonResponse = data.to_json(orient='records', lines=True)
            #return json.dumps(jsonResponse)
            #return json.dumps({'html':'<span>All fields good !!</span>'})
            print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
            print("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$")
            print(r.content)
            print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
            print("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$")
            print(r)
            print(type(r))
            popupmsg('Output Ready')
            print("Complete without fail")
        else:
            print("#######################################################################################################")
            return json.dumps({'html':'<span>Enter the SQL Query</span>'})

@server.route('/intermquery', methods=['GET', 'POST'])
def intermquery():
    if request.method == "GET":
        return hello()
    elif request.method == "POST":
        #_query = request.data
        ###### This is Process Data #######
        _query = request.form['inputQuery']
        if _query:
            print(_query)
            print(metadata_path)
            r = requests.post('http://127.0.0.1:8089/process', json={"_query": _query,"metadata_path": metadata_path, "input_table_name":"MOCK_DATA"})
            
            
            print("#######################################################################################################")
            print(r.content) 
            print(r.text)
            #print(r)
            print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
            #data = process_data(_query,metadata_path,input_table_name="MOCK_DATA")

            #return data
            #return json.dumps({'html':'<span>All fields good !!</span>'})
            #print(r)
            
            return r.text
            #flash("Please click output button for visualization")
        else:
            return json.dumps({'html':'<span>Enter the Query</span>'})
            




def app_layout():
    if path.exists('output.csv'):
        df=pd.read_csv('output.csv')
    else :
        df=pd.read_csv('dummy.csv')
    num_cols=list(df._get_numeric_data().columns)

    cat_cols=list(set(df.columns) - set(num_cols))

    if num_cols==[]:
        dummy1=np.random.normal(size=len(df))
        dummy2=np.random.normal(size=len(df))
        df['dummy1']=dummy1
        df['dummy2']=dummy2
    if len(num_cols)==1:
        dummy1=np.random.normal(size=len(df))
        df['dummy1']=dummy1
    if cat_cols==[]:
        df['Category']=['Category']*len(df)
        
    num_cols=list(df._get_numeric_data().columns)
    cat_cols=list(set(df.columns) - set(num_cols))
    
    
    #df2=pd.read_csv('test.csv')
    #df=pd.read_csv('test2.csv')
    #df_g=pd.read_csv('test_graph.csv')
    #cols=df.columns
    #cols_g=df_g.columns
    #a=cols_g[0]
    #b=cols_g[1]
    #c=cols_g[2]
    #def1='Numeric 1'
    #def2='Numeric 2'
    #def3='Numeric 3'
    #numerical_features = df.columns
    #scatter_cols = [{'label':x.upper(), 'value':x} for x in numerical_features]
    return html.Div([
        html.H1(children='AIuto - Your everyday analytics assistant'),

        dash_table.DataTable(
            id='datatable-filtering-fe',
            columns=[
                {"name": i, "id": i, "deletable": True} for i in df.columns
            ],
            style_table={'width':'100vw',
                'overflowX':'scroll',
            'maxHeight':'300px',
            'overflowY':'scroll'},

            data=df.to_dict('records'),
        style_cell={'padding': '5px'}, sort_action="native",filter_action="native",
        style_header={
            'backgroundColor': 'white',
            'fontWeight': 'bold'
        }  
        ),
        html.Div(id='datatable-filter-container'),

        html.A("Download CSV", href="/download_excel/"),

    ### Scatter Start here
    html.Div([
    html.Div([
            html.Div([
                dcc.Dropdown(
                    id='xaxis-column',
                    options=[{'label': i, 'value': i} for i in num_cols],
                    value=num_cols[0]
                ),
                dcc.RadioItems(
                    id='xaxis-type',
                    options=[{'label': i, 'value': i} for i in ['Linear', 'Log']],
                    value='Linear',
                    labelStyle={'display': 'inline-block'}
                )
            ],
    style={'width': '48%', 'display': 'inline-block'}),

    html.Div([
                dcc.Dropdown(
                    id='yaxis-column',
                    options=[{'label': i, 'value': i} for i in num_cols],
                    value=num_cols[0]
                ),
                dcc.RadioItems(
                    id='yaxis-type',
                    options=[{'label': i, 'value': i} for i in ['Linear', 'Log']],
                    value='Linear',
                    labelStyle={'display': 'inline-block'}
                )
            ],style={'width': '48%', 'float': 'right', 'display': 'inline-block'})

            


        ]),
    html.Div([

                dcc.Dropdown(
                    id='color-selector',
                    options=[{'label': i, 'value': i} for i in cat_cols],
                    value=cat_cols[0]
            )
            ],style={'width': '48%', 'display': 'inline-block'}),

    dcc.Graph(id='indicator-graphic')

    ]),

    ### Div for Bar chart ###


    html.Div([
          
        html.Div([

    dcc.Dropdown(
                    id='xaxis-column1',
                    options=[{'label': i, 'value': i} for i in cat_cols],
                    value=cat_cols[0]
                )],
                style={'width': '48%', 'display': 'inline-block'}),
    html.Div([

dcc.Dropdown(
                id='yaxis-column1',
                options=[{'label': i, 'value': i} for i in num_cols],
                value=num_cols[1]
            )],
            style={'width': '48%', 'float': 'right', 'display': 'inline-block'}),
        
    

   

    html.Div([

        dcc.RadioItems(
        id='radios',
        options=[
            {'label': 'Bar Chart', 'value': 'bar'},
            {'label': 'Line Chart', 'value': 'line+markers'}
        ],
        value='bar'
    ) 
    ])

        ]),

    dcc.Graph(id='indicator-graphic2')

   




    ### This closes the layout ###
    ])


    ### Callback for Bar Chart ###
app = dash.Dash(__name__,server=server,routes_pathname_prefix='/dashboard/')
app.layout = app_layout


@app.server.route('/download_excel/')
def download_excel():
    #Create DF
    if path.exists('output.csv'):
        df=pd.read_csv('output.csv')
    else :
        df=pd.read_csv('dummy.csv')
    """num_cols=list(df._get_numeric_data().columns)

    cat_cols=list(set(df.columns) - set(num_cols))

    if num_cols==[]:
        dummy1=np.random.normal(size=len(df))
        dummy2=np.random.normal(size=len(df))
        df['dummy1']=dummy1
        df['dummy2']=dummy2
    if len(num_cols)==1:
        dummy1=np.random.normal(size=len(df))
        df['dummy1']=dummy1
    if cat_cols==[]:
        df['Category']=['Category']*len(df)
        
    num_cols=list(df._get_numeric_data().columns)
    cat_cols=list(set(df.columns) - set(num_cols))
    """

    #Convert DF
    strIO = io.BytesIO()
    excel_writer = pd.ExcelWriter(strIO, engine="xlsxwriter")
    df.to_excel(excel_writer, sheet_name="sheet1")
    excel_writer.save()
    excel_data = strIO.getvalue()
    strIO.seek(0)

    return send_file(strIO,
                     attachment_filename='Output.xlsx',
                     as_attachment=True)



@app.callback(
    Output('indicator-graphic2','figure'),
    [Input('xaxis-column1','value'),
     Input('yaxis-column1','value'),
     Input('radios','value')])
def update_graph(xaxis_columns,yaxis_columns,radios):
    if path.exists('output.csv'):
        df=pd.read_csv('output.csv')
    else :
        df=pd.read_csv('dummy.csv')
    num_cols=list(df._get_numeric_data().columns)

    cat_cols=list(set(df.columns) - set(num_cols))

    if num_cols==[]:
        dummy1=np.random.normal(size=len(df))
        dummy2=np.random.normal(size=len(df))
        df['dummy1']=dummy1
        df['dummy2']=dummy2
    if len(num_cols)==1:
        dummy1=np.random.normal(size=len(df))
        df['dummy1']=dummy1
    if cat_cols==[]:
        df['Category']=['Category']*len(df)
        
    num_cols=list(df._get_numeric_data().columns)
    cat_cols=list(set(df.columns) - set(num_cols))
    
    
    #df2=pd.read_csv('test.csv')
    #df=pd.read_csv('test2.csv')
    #df_g=pd.read_csv('test_graph.csv')
    #cols=df.columns
    #cols_g=df_g.columns
    #a=cols_g[0]
    #b=cols_g[1]
    #c=cols_g[2]
    #def1='Numeric 1'
    #def2='Numeric 2'
    #def3='Numeric 3'
    #numerical_features = df.columns
    #scatter_cols = [{'label':x.upper(), 'value':x} for x in numerical_features]

    #df2=df_g
    print("""#################################################################
        ###################################################################################
        ###########################################################################################
        #########################################################################################################
        ################################################################################################################""")
        
    print(radios)
    print("""#################################################################
        ###################################################################################
        ###########################################################################################
        #########################################################################################################
        ################################################################################################################""")
    if radios=='bar1':
        mode='stack'
        print(""" stackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstack
        stackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstack
        stackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstack
        stackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstack
        stackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstackstack""")
    else :
        mode='group'
    
    #x_val=list(df[xaxis_columns].unique())
    bar_df=pd.DataFrame(df.groupby(xaxis_columns).sum()[yaxis_columns].reset_index())
    x_val=list(bar_df[xaxis_columns].unique())
    y_val=list(bar_df[yaxis_columns].unique())
    
    if radios=='bar1':
        radios='bar'
    data=[{'x':x_val,'y':y_val,'type':radios}]
    #for i in range(len(checklists)):
     #   di={'x':x_val,'y':df[checklists[i]],'type'=radios,'name':checklists[i]}
     #   data.append()

  
    return {
        'data':data,
        'layout':go.Layout(

            xaxis={
                'title':xaxis_columns
            },
            yaxis={
                'title':yaxis_columns
            },
            margin={'l': 40, 'b': 40, 't': 10, 'r': 0},
            hovermode='closest',
            barmode=mode
        )
    }

@app.callback(
    Output('datatable-filter-container', "children"),
    [Input('datatable-filtering-fe', "data")])
def update_graph(rows):
    if path.exists('output.csv'):
        df=pd.read_csv('output.csv')
    else :
        df=pd.read_csv('dummy.csv')
    num_cols=list(df._get_numeric_data().columns)

    cat_cols=list(set(df.columns) - set(num_cols))

    if num_cols==[]:
        dummy1=np.random.normal(size=len(df))
        dummy2=np.random.normal(size=len(df))
        df['dummy1']=dummy1
        df['dummy2']=dummy2
    if len(num_cols)==1:
        dummy1=np.random.normal(size=len(df))
        df['dummy1']=dummy1
    if cat_cols==[]:
        df['Category']=['Category']*len(df)
        
    num_cols=list(df._get_numeric_data().columns)
    cat_cols=list(set(df.columns) - set(num_cols))
        
    #df2=pd.read_csv('test.csv')
    #df=pd.read_csv('test2.csv')
    #df_g=pd.read_csv('test_graph.csv')
    #cols=df.columns
    #cols_g=df_g.columns
    #a=cols_g[0]
    #b=cols_g[1]
    #c=cols_g[2]
    #def1='Numeric 1'
    #def2='Numeric 2'
    #def3='Numeric 3'
    #numerical_features = df.columns
    #scatter_cols = [{'label':x.upper(), 'value':x} for x in numerical_features]

    
    if rows is None:
        dff = df2
    else:
        dff = pd.DataFrame(rows)

    return html.Div()

@app.callback(
    Output('indicator-graphic', 'figure'),
    [Input('xaxis-column', 'value'),
    Input('yaxis-column', 'value'),
    Input('xaxis-type', 'value'),
    Input('yaxis-type', 'value'),
    Input('color-selector','value')
    
    ])
def update_graph(xaxis_column_name, yaxis_column_name,
                xaxis_type, yaxis_type,color_selector_name):
    if path.exists('output.csv'):
        df=pd.read_csv('output.csv')
    else :
        df=pd.read_csv('dummy.csv')
    num_cols=list(df._get_numeric_data().columns)

    cat_cols=list(set(df.columns) - set(num_cols))

    if num_cols==[]:
        dummy1=np.random.normal(size=len(df))
        dummy2=np.random.normal(size=len(df))
        df['dummy1']=dummy1
        df['dummy2']=dummy2
    if len(num_cols)==1:
        dummy1=np.random.normal(size=len(df))
        df['dummy1']=dummy1
    if cat_cols==[]:
        df['Category']=['Category']*len(df)
        
    num_cols=list(df._get_numeric_data().columns)
    cat_cols=list(set(df.columns) - set(num_cols))
                    
    #df2=pd.read_csv('test.csv')
    #df=pd.read_csv('test2.csv')
    #df_g=pd.read_csv('test_graph.csv')
    #cols=df.columns
    #cols_g=df_g.columns
    #a=cols_g[0]
    #b=cols_g[1]
    #c=cols_g[2]
    #def1='Numeric 1'
    #def2='Numeric 2'
    #def3='Numeric 3'
    #numerical_features = df.columns
    #scatter_cols = [{'label':x.upper(), 'value':x} for x in numerical_features]

    
    dff = df
    traces=[]
    for k in df[color_selector_name].unique():
        dff=df[df[color_selector_name]==k]

        traces.append(go.Scatter(
            x=dff[xaxis_column_name],
            y=dff[yaxis_column_name],
        
            mode='markers',
            marker={
                'size': 15,
                'opacity': 0.3,
                'line': {'width': 0.5, 'color': 'black'}
            },name=k
        ))
    return { 
        'data':traces,
        'layout': go.Layout(
            xaxis={
                'title': xaxis_column_name,
                'type': 'linear' if xaxis_type == 'Linear' else 'log'
            },
            yaxis={
                'title': yaxis_column_name,
                'type': 'linear' if yaxis_type == 'Linear' else 'log'
            },
            margin={'l': 40, 'b': 40, 't': 10, 'r': 0},
            hovermode='closest'
        )
    }






if __name__ == '__main__':
    app.run_server( debug = True,host="0.0.0.0") 


<!DOCTYPE html>
<html lang="en">
<head>
    <title>Your everyday analytics assitant</title>
    <link href="../static/bootstrap.css" rel="stylesheet">
    <script src="../static/scripts/jquery-1.10.2.js"></script>
    <script src="../static/scripts/webapp.js"></script>
</head>

<body>

<div class="container">
    <div class="header">
        <h3 class="text-muted">Your personal analytics assitant</h3>
    </div>

    <div class="jumbotron">
        <h1 align="center">AIUTO</h1>
        <br>
        <form class="form-signin" id="formQuery">
            <label for="inputQuery" class="sr-only">Insert query text</label>
            <input type="text" name="inputQuery" id="inputQuery" class="form-control" placeholder="Query" required autofocus>
            <br>
            <button id="btnSearch" class="btn btn-lg btn-primary btn-block" type="button">Query</button>

        </form>
        <br>
        <form class="form-signin" style="display: none" id="formIntermQuery">
            <!-- <input type="text" name="inputIntermQuery" id="inputIntermQuery" class="form-control" placeholder="Query" required autofocus> -->
 <textarea rows="4" cols="50" name="inputIntermQuery" id="inputIntermQuery" class="form-control" placeholder="Query" required autofocus>
 </textarea> 
            <br>
            <button id="btnFireIntermQuery" class="btn btn-lg btn-primary btn-block" type="button">Search</button>
            <button id="btnReset" class="btn btn-lg btn-primary btn-block" type="button">Reset</button>
        </form>
     </form>
    <p></p>
    <form method="post" action=".">
        <p><input type="submit" value="Go!" /></p>
    </form>

    </div>
    <div class="row">
        <div class="col-md-12" id="responseTable">
                

        </div>
    </div>
    <footer class="footer">
        <p>&copy; JPMC 2018</p>
    </footer>
</div>
</body>
</html>




from flask import Flask, request, json
import random
import pandas
from DataProcessor import process_data, process_sql
from final_main import process_data
import pandas as pd


#import requests
app = Flask(__name__)
  

@app.route("/", methods=['GET'])
def home():
    return "Welcome To Aiuto backend!"
  

@app.route("/process", methods=['GET','POST'])
def process_query():
	# Save this file in the NLP code basestring
    # Call the above method process_query and send in the parameter	
    dop=request.get_json()
    print("############################################################################################")
    print(dop)
    print(dop["_query"])
    print(dop["metadata_path"])
    print(dop["input_table_name"])
    print("############################################################################################")
    sql=process_data(dop["_query"],dop["metadata_path"],input_table_name=dop["input_table_name"]) 
    print("############################################^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^################################################")
    print(json.dumps(sql))
    print(sql)
    print("############################################^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^################################################")
    return sql


@app.route("/sqlprocess", methods=['GET','POST'])
def process_datasql():
	# Save this file in the NLP code basestring
    # Call the above method process_query and send in the parameter	
    dop=request.get_json()
    print("************************************************************************************************")
    print(dop)
    print("*********************************************************************************************")
    
    df=process_sql(dop["_query"])
    print("############################################^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^################################################")
    print("############################################^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^################################################")
    print("############################################^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^################################################")
    print("############################################^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^################################################") 
    print(df)
    
    del_cols=df.columns
    print(list(del_cols))
    
    df.to_csv('output.csv',index=False)

    dg=pd.read_csv('output.csv')
    print(dg.head())
    print("############################################^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^################################################")
    print("############################################^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^################################################")
    print("############################################^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^################################################")
    print("############################################^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^################################################") 
    return json.dumps(df.to_json(orient='records', lines=True))
    

if __name__ == "__main__":
    app.run(debug=True, host='127.0.0.1', port=8089)
    
    
    
    import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

from app import app
from apps import input_app,page1


app.layout = html.Div([
    dcc.Location(id='url', refresh=False),
    html.Div(id='page-content')
])


@app.callback(Output('page-content', 'children'),
              [Input('url', 'pathname')])
def display_page(pathname):
    if pathname == '/apps/input_app':
        return input_app.layout
    elif pathname == '/apps/output_app':
        return output_app.layout
    elif pathname == '/apps/page1':
        return page1.layout
    else:
        return '404'

if __name__ == '__main__':
    app.run_server(debug=True,port=8050,host='0.0.0.0')
    
   import dash

#external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__
#, external_stylesheets=external_stylesheets
)
server = app.server
app.config.suppress_callback_exceptions = True

from flask import Flask, request, render_template, json

from _plotly_future_ import v4_subplots
import random, threading, webbrowser
import flask
import dash
import dash_core_components as dcc
import dash_table
import dash_html_components as html
import pandas as pd
import plotly.graph_objs as go
import io
import xlsxwriter
import flask
from flask import send_file
from dash.dependencies import Input, Output, State
import os.path
from os import path
import numpy as np
import requests
from plotly.subplots import make_subplots
import os

os.chdir("H:/fraud_dashboard/vaibhav'")

#df=pd.read_csv('df.csv')

app = dash.Dash(__name__)





def generate_exe(em):
    
    data_rows=[

html.Tr(
				[
					html.Td('Plan Name',rowSpan='3',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
					html.Td("{0} - CAF Full Spectrum Indirect Origination(Gen 5b)".format(31980),colSpan='6',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '})
				]
			),

            html.Tr([

                html.Td("BENCHMARK",colSpan=2,style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("VALIDATION",colSpan='2',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("COMPARISON",colSpan='2',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '})
            ]),
            html.Tr([

                html.Td("KS",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  ','width':'10%'}),
                html.Td("PDO",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  ','width':'10%'}),
                html.Td("KS",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  ','width':'10%'}),
                html.Td("PDO",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  ','width':'10%'}),
                html.Td("%Change (KS)",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  ','width':'10%'}),
                html.Td("%Change (PDO)",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  ','width':'10%'})
            ])]
    
    r_head=['Early Warning 1','Early Warning 2','PERFORMANCE BY MODEL SEGMENT']
    
    i=0   
    for ind,row in em.iterrows():
            temp=[]
            temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px'}))
            for r in row:
                temp.append(html.Td("{0}".format(round(r),2),colSpan='1',style={'border-style':'solid','border-width':'1px'}))
            print(temp)
            data_rows.append(html.Tr(temp))
            i=i+1

    return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'5','width':'40%','text-align':'center','margin-left':'30%','margin-right':'30%'})


def ew11(df_name='ew1'):
    print(pd.read_pickle('Executive_summary_table1.pkl'))
    dem=pd.read_csv(df_name+'.csv')
    data_rows=[

html.Tr(
				[
					html.Td('Segment ID',rowSpan='4',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
					html.Td("{0} - CAF Full Spectrum Indirect Origination(Gen 5b)".format(31980),colSpan='12',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '})
				]
			),

            html.Tr([

                html.Td("Early Warning {0} - 60+ days past due, charged off, repossessed or bankrupt in first 6 months on book".format(1),colSpan='12',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                
            ]),

 html.Tr([

                html.Td("BENCHMARK ({0})".format(1),colSpan='5',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("VALIDATION ({0})".format(1),colSpan='7',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                
            ]),

            html.Tr([

                html.Td("Scores",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("Bad Count",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("Bad Rate",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("KS",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("PDO",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("Scores",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("Bad Count",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("Bad Rate",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("KS",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("PDO",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("%Change(KS)",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("%Change(PDO)",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '})
            ])]
    
    r_head=['Full Model','Seg1- No Records No TL','Seg2- Thin File','Seg3- Severe Derog','Seg4- Delinquent under 90','Seg5- New to Credit','Seg6- Mature Low Utilization','Seg7- Mature High Utilization',
    'Seg8- Mature Less Delinquent','Seg9- Mature More Delinquent']
    
    i=0   
    for ind,row in dem.iterrows():
            temp=[]
            temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px'}))
            for r in row:
                temp.append(html.Td("{0}".format(round(r),2),colSpan='1',style={'border-style':'solid','border-width':'1px'}))
            print(temp)
            data_rows.append(html.Tr(temp))
            i=i+1

    return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','width':'100%','text-align':'center'})

    



def m_perf_seg():
    seg=pd.read_pickle(df_seg)
    
    
    data_rows=[

html.Tr(
				[
					html.Td('Segment ID',rowSpan='4',style={'border-style':'solid','border-width':'1px'}),
					html.Td("{0} - CAF Full Spectrum Indirect Origination(Gen 5b)".format(31980),colSpan='12',style={'border-style':'solid','border-width':'1px'})
				]
			),

            html.Tr([

                html.Td("PERFORMANCE BY MODEL SEGMENT - 90+ days past due, charged off, repossessed or bankrupt in first 18 months on book".format(1),colSpan='12',style={'border-style':'solid','border-width':'1px'}),
                
            ]),

 html.Tr([

                html.Td("BENCHMARK ({0})".format(1),colSpan='5',style={'border-style':'solid','border-width':'1px'}),
                html.Td("VALIDATION ({0})".format(1),colSpan='7',style={'border-style':'solid','border-width':'1px'}),
                
            ]),

            html.Tr([

                html.Td("Scores",colSpan='1',style={'border-style':'solid','border-width':'1px'}),
                html.Td("Bad Count",colSpan='1',style={'border-style':'solid','border-width':'1px'}),
                html.Td("Bad Rate",colSpan='1',style={'border-style':'solid','border-width':'1px'}),
                html.Td("KS",colSpan='1',style={'border-style':'solid','border-width':'1px'}),
                html.Td("PDO",colSpan='1',style={'border-style':'solid','border-width':'1px'}),
                html.Td("Scores",colSpan='1',style={'border-style':'solid','border-width':'1px'}),
                html.Td("Bad Count",colSpan='1',style={'border-style':'solid','border-width':'1px'}),
                html.Td("Bad Rate",colSpan='1',style={'border-style':'solid','border-width':'1px'}),
                html.Td("KS",colSpan='1',style={'border-style':'solid','border-width':'1px'}),
                html.Td("PDO",colSpan='1',style={'border-style':'solid','border-width':'1px'}),
                html.Td("%Change(KS)",colSpan='1',style={'border-style':'solid','border-width':'1px'}),
                html.Td("%Change(PDO)",colSpan='1',style={'border-style':'solid','border-width':'1px'})
            ])]
    
    r_head=['Full Model','Seg1- No Records No TL','Seg2- Thin File','Seg3- Severe Derog','Seg4- Delinquent under 90','Seg5- New to Credit','Seg6- Mature Low Utilization','Seg7- Mature High Utilization',
    'Seg8- Mature Less Delinquent','Seg9- Mature More Delinquent']
    
    i=0   
    for ind,row in seg.iterrows():
            temp=[]
            temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px'}))
            for r in row:
                temp.append(html.Td("{0}".format(round(r),2),colSpan='1',style={'border-style':'solid','border-width':'1px'}))
            print(temp)
            data_rows.append(html.Tr(temp))
            i=i+1

    return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','width':'100%','text-align':'center'})


def MS_ttd():
    
    data_rows=[

html.Tr(
				[
					html.Td('VALIDATION',colSpan='2',style={'border-style':'solid','border-width':'1px'})
                   
					
				]
			),
html.Tr(
				[
             html.Td('{0}'.format(1),colSpan='2',style={'border-style':'solid','border-width':'1px'})

             ]
			)
            ,
html.Tr(
				[
 html.Td('PSI',rowSpan='1',style={'border-style':'solid','border-width':'1px'}),
 html.Td('Scores(Pop Stability)',rowSpan='1',style={'border-style':'solid','border-width':'1px'})
             ]
			)]

    for ind,row in ttd.iterrows():
        temp=[]

        for r in row:
            emp.append(html.Td("{0}".format(round(r),2),colSpan='1',style={'border-style':'solid','border-width':'1px'}))
            
        data_rows.append(html.Tr(temp))

    return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','width':'100%','text-align':'center'})  
            
def ks_seg():

    ks=pd.read_csv('ks.csv')
    data_rows=[


html.Tr(
				[
					html.Td(' ',rowSpan='4',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '})
                ]
			),
html.Tr(
				[
					html.Td('PERFORMANCE BY MODEL SEGMENT OVERALL DECILE',colSpan='13',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '})
                ]
			),
html.Tr(
				[
					html.Td('FULL MODEL',colSpan='13',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '})
                ]
			),
html.Tr(
				[
					html.Td('VALIDATION',colSpan='13',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '})
                ]
			),

html.Tr(
				[
					html.Td('DECILE',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                    html.Td('Min Score',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                    html.Td('Max Score',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                    html.Td('#Accounts',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                    html.Td('#Bad',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                    html.Td('Bad Rate',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                    html.Td('%Total Bad',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                    html.Td('Cumulative Bad Rate',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                    html.Td('#Good',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                    html.Td('Good Rate',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                    html.Td('Cumulative Good Rate',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                    html.Td('KS',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '})

                ]
			)

    ]

    r_head=['Decile 1','Decile 2','Decile 3','Decile 4','Decile 5','Decile 6','Decile 7','Decile 8','Decile 9','Decile 10']
    
    i=0   
    for ind,row in ks.iterrows():
            temp=[]
            temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px'}))
            for r in row:
                temp.append(html.Td("{0}".format(round(r),2),colSpan='1',style={'border-style':'solid','border-width':'1px'}))
            print(temp)
            data_rows.append(html.Tr(temp))
            i=i+1

    return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','width':'100%','text-align':'center'})




def m_perf_bseg():
    bseg=pd.read_csv('mperf_bs.csv')
    
    
    data_rows=[

html.Tr(
				[
					html.Td('Segment ID',rowSpan='4',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
					html.Td("{0} - CAF Full Spectrum Indirect Origination(Gen 5b)".format(31980),colSpan='12',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '})
				]
			),

            html.Tr([

                html.Td("PERFORMANCE BY BUSINESS SEGMENT - 90+ days past due, charged off, repossessed or bankrupt in first 18 months on book".format(1),colSpan='12',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                
            ]),

 html.Tr([

                html.Td("BENCHMARK ({0})".format(1),colSpan='5',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("VALIDATION ({0})".format(1),colSpan='7',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                
            ]),

            html.Tr([

             
                html.Td("Scores",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("Bad Count",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("Bad Rate",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("KS",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("PDO",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("Scores",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("Bad Count",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("Bad Rate",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("KS",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("PDO",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("%Change(KS)",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
                html.Td("%Change(PDO)",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '})
            ])]
    
    r_head=['Full Model',"LTV 0-80","LTV 101-120","LTV 120+","LTV 81-100","Segment - Lease Portfolio","Segment - Manufacturing Portfolio","Segment - Retail Portfolio",
    "Segment A - Sub Prime","Segment B - Near Prime","Segment C- Prime"]
    
    i=0   
    for ind,row in bseg.iterrows():
            temp=[]
            temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px'}))
            for r in row:
                temp.append(html.Td("{0}".format(round(r),2),colSpan='1',style={'border-style':'solid','border-width':'1px'}))
            print(temp)
            data_rows.append(html.Tr(temp))
            i=i+1

    return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','width':'100%','text-align':'center'})


def bs_ttd():
    ttd=pd.read_csv("bs_ttd.csv")
    data_rows=[

html.Tr(
				[
					html.Td('VALIDATION',colSpan='2',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '})
                   
					
				]
			),
html.Tr(
				[
             html.Td('{0}'.format(1),colSpan='2',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '})

             ]
			)
            ,
html.Tr(
				[
 html.Td('PSI',rowSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '}),
 html.Td('Scores(Pop Stability)',rowSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff  '})
             ]
			)]

    for ind,row in ttd.iterrows():
        temp=[]

        for r in row:
            temp.append(html.Td("{0}".format(round(r),2),colSpan='1',style={'border-style':'solid','border-width':'1px'}))
            
        data_rows.append(html.Tr(temp))

    return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','width':'100%','text-align':'center'})  





dem=pd.read_pickle("Executive_summary_table1.pkl")

colors = ['#002db3',]*8 
colors[0] ='#ff8000' 


app.layout = html.Div(
	[

       html.Div([generate_exe(em=dem)],style={'padding-bottom':'12px'}), 
       html.H3("Select the Model",),

html.Div([dcc.Dropdown(id='table-dpdn',
    options=[
        {'label': 'Early Warning 1', 'value': 'ew1'},
        {'label': 'Early Warning 2', 'value': 'ew2'},
        {'label':'Model Performance by Model Segments','value':'mperf_ms'}
    ],
    value='ew1',
) ],style={'padding-bottom':'4px'}),
                       
html.Div([dcc.Dropdown(id='model_id',
  options=[
            {'label': 'Early Warning 1', 'value': 'Early Warning 1'},
            {'label': 'Early Warning 2', 'value': 'Early Warning 2'},
            {'label': 'PERFORMANCE BY MODEL SEGMENT', 'value': 'PERFORMANCE BY MODEL SEGMENT'}
        ],
        value='Early Warning 1'
)
],),
        html.Br(),        
        
        
html.H3("Select the Metric",),
                        
                        
html.Div([dcc.Dropdown(id='xaxis-column1',
    options=[
            {'label': 'KS', 'value': 'KS'},
            {'label': 'PDO', 'value': 'PDO'}
        ],
        value='KS'
)
] ),
        html.Br(),
                html.Br(),


html.Div(id='op-table',style={'padding-bottom':'10px'}),
html.Div([dcc.Graph(id='graph1')],style={"border":"1px grey solid",'padding-bottom':'15px'}),
html.Div([ks_seg()],style={'padding-bottom':'10px'}),

html.Div([

html.Div([m_perf_bseg()],className="ten columns"),
html.Div([bs_ttd()],className="two columns")

],className="row")




       
	]
)


@app.callback(
        Output('graph1', 'figure'),
              [Input('model_id', 'value'),Input('xaxis-column1', 'value')])
        
def update(model_value,metric_value):
    df=pd.read_csv('graph3.csv')
    
    df1=df[df['Plan_Name']==model_value]
    
    
    data=df1[df1['METRIC_KEY']==metric_value]
    
    
    data=data.sort_values(by='Time_Frame')
    print(data['Time_Frame'].unique())
    
    #print(df.head(50))
    
    fig = make_subplots(rows=1, cols=10)
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Full Model"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Full Model"].values,marker=dict(color=colors), row=1, col=1,showlegend=False,name='Full Model',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Full Model"].values,
              textposition="inside",textangle =-90,
              textfont={
                        'family':"sans serif",
                        "size":15,
                        "color":"white" 
                        } )
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 1 - No Record No TL"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 1 - No Record No TL"].values,marker=dict(color=colors), row=1, col=2,showlegend=False,name='Segment 1 - No Record No TL',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 1 - No Record No TL"].values,
              textposition="auto",textangle =-90,
              textfont={
                        'family':"sans serif",
                        "size":15,
                        "color":"white"
                        }  )
    
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 2 - Thin File"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 2 - Thin File"].values,marker=dict(color=colors), row=1, col=3,showlegend=False,name='Segment 2 - Thin File' ,text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 2 - Thin File"].values,
              textposition="inside",textangle =-90,
              textfont={
                        'family':"sans serif",
                        "size":15,
                        "color":"white"
                        } )
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 3 - Severe Derog"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 3 - Severe Derog"].values,marker=dict(color=colors), row=1, col=4,showlegend=False,name='Segment 3 - Severe Derog',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 3 - Severe Derog"].values,
              textposition="inside",textangle =-90,
              textfont={
                        'family':"sans serif",
                        "size":15,
                        "color":"white"
                        }  )
    
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 4 - Delinquent under 90"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 4 - Delinquent under 90"].values,marker=dict(color=colors), row=1, col=5,showlegend=False,name='Segment 4 - Delinquent under 90',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 4 - Delinquent under 90"].values,
              textposition="inside",textangle =-90,
              textfont={
                        'family':"sans serif",
                        "size":15,
                        "color":"white"
                        }  )
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 5 - New to Credit"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 5 - New to Credit"].values,marker=dict(color=colors), row=1, col=6,showlegend=False,name='Segment 5 - New to Credit',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 5 - New to Credit"].values,
              textposition="inside",textangle =-90,
              textfont={
                        'family':"sans serif",
                        "size":15,
                        "color":"white"
                        }  )
    
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 6 - Mature Low Utilization"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 6 - Mature Low Utilization"].values,marker=dict(color=colors), row=1, col=7,showlegend=False,name='Segment 6 - Mature Low Utilization',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 6 - Mature Low Utilization"].values,
              textposition="inside",textangle =-90,
              textfont={
                        'family':"sans serif",
                        "size":15,
                        "color":"white"
                        }  )
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 7 - Mature High Utilization"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 7 - Mature High Utilization"].values,marker=dict(color=colors), row=1, col=8,showlegend=False,name='Segment 7 - Mature High Utilization',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 7 - Mature High Utilization"].values,
              textposition="inside",textangle =-90,
              textfont={
                        'family':"sans serif",
                        "size":15,
                        "color":"white"
                        }  )
    
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 8 - Mature Less Delinquent"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 8 - Mature Less Delinquent"].values,marker=dict(color=colors), row=1, col=9,showlegend=False,name='Segment 8 - Mature Less Delinquent' ,text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 8 - Mature Less Delinquent"].values,
              textposition="inside",textangle =-90,
              textfont={
                        'family':"sans serif",
                        "size":15,
                        "color":"white"
                        } )
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 9 - Mature More Delinquent"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 9 - Mature More Delinquent"].values,marker=dict(color=colors), row=1, col=10,showlegend=False,name='Segment 9 - Mature More Delinquent' ,text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 9 - Mature More Delinquent"].values,
              textposition="inside",textangle =-90,
              textfont={
                        'family':"sans serif",
                        "size":15,
                        "color":"white"
                        } )

    
    
    
    
    
    #fig.update_traces(textposition='outside')
    
    fig.layout.xaxis.title=None
    
    fig.layout.xaxis.tickangle=-70
    
    fig.layout.xaxis2.title=None
    fig.layout.xaxis2.tickangle=-70
    
    fig.layout.xaxis3.title=None
    fig.layout.xaxis3.tickangle=-70
    
    fig.layout.xaxis4.title=None
    fig.layout.xaxis4.tickangle=-70
    
    fig.layout.xaxis5.title=None
    fig.layout.xaxis5.tickangle=-70
    
    fig.layout.xaxis6.title=None
    fig.layout.xaxis6.tickangle=-70
    
    fig.layout.xaxis7.title=None
    fig.layout.xaxis7.tickangle=-70
    
    fig.layout.xaxis8.title=None
    fig.layout.xaxis8.tickangle=-70
    
    fig.layout.xaxis9.title=None
    fig.layout.xaxis9.tickangle=-70
    
    fig.layout.xaxis10.title=None
    fig.layout.xaxis10.tickangle=-70
    
    fig.layout.height=500
    fig = fig.update_layout({"annotations": [
      {
        "x": 0.04,
        "y": 1,
        "font": {
          "size": 11
        },
        "text": "Full Model",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "top",
        "showarrow": False
      },
      {
        "x": 0.15,
        "y": 1,
        "font": {
          "size": 11
        },
        "text": "Segment 1 <br> No Record No TL",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "top",
        "showarrow": False
      },
      {
        "x": 0.25,
        "y": 1,
        "font": {
          "size": 11
        },
        "text": "Segment 2 <br>Thin File",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "middle",
        "showarrow": False
      },
    {
        "x": 0.35,
        "y": 1,
        "font": {
          "size": 11
        }, 
        "text": "Segment 3 <br> Severe Derog",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "middle",
        "showarrow": False
      },
    {
        "x": 0.45,
        "y": 1,
        "font": {
          "size": 11
        },
        "text": "Segment 4 <br> Delinquent under 90",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "middle",
        "showarrow": False
      },
    {
        "x": 0.55,
        "y": 1,
        "font": {
          "size": 11
        },
        "text": "Segment 5 <br> New to Credit",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "middle",
        "showarrow": False
      },
    {
        "x": 0.655,
        "y": 1,
        "font": {
          "size": 11
        },
        "text": "Segment 6 <br> Mature Low Utilization",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "middle",
        "showarrow": False
      },
    {
        "x": 0.758,
        "y": 1,
        "font": {
          "size": 11
        },
        "text": "Segment 7 <br> Mature High Utilization",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "middle",
        "showarrow": False
      },
    {
        "x": 0.86,
        "y": 1,
        "font": {
          "size": 11
        },
        "text": "Segment 8 <br> Mature Less Delinquent",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "middle",
        "showarrow": False
      },
    {
        "x": 0.96,
        "y": 1,
        "font": {
          "size": 11
        },
        "text": "Segment 9 <br> Mature More Delinquent",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "middle",
        "showarrow": False
      }

    ]})

    return fig.update_traces(marker_color=colors)    
    #return fig.show()



@app.callback(
    dash.dependencies.Output('op-table', 'children'),
    [dash.dependencies.Input("table-dpdn", "value")],
)
def update_options(search_value):

     return ew11(search_value)
    

if __name__ == '__main__':
    app.run_server(debug=True)
    
    
    import dash
import dash_table
import pandas as pd
import dash_core_components as dcc
import dash_html_components as html
from app import app
import pandas as pd
from dash.dependencies import Input, Output
import plotly.graph_objects as go
from plotly.subplots import make_subplots
#import pdfkit
from flask import Flask, render_template, make_response
############
from flask import Flask, request, render_template, json

###########################
from flask import Flask, request, render_template, json

from _plotly_future_ import v4_subplots
import random, threading, webbrowser
import flask
import dash
import dash_core_components as dcc
import dash_table
import dash_html_components as html
import pandas as pd
import plotly.graph_objs as go
import io
#import xlsxwriter
import flask
from flask import send_file
from dash.dependencies import Input, Output, State
import os.path
from os import path
import numpy as np
#import requests
from plotly.subplots import make_subplots
import dash_table as dt

import os
#import pdfkit

#os.chdir("H:/fraud_dashboard/vaibhav'")
######################### VAIBHAV DEF START #########################################################################################################


#df=pd.read_csv('df.csv')


df_def = pd.read_csv('database/definitions.csv')
ks=pd.read_csv('ks.csv')
#print(ks.head())
    

def generate_table():
    return html.Table(
        # Header
        [
      html.Tr(
        [
          html.Td('1',rowSpan='3',style={'border-style':'solid','border-width':'1px','background-color':'#1aa3ff', 'fontColor': 'white'}),
          html.Td('2',colSpan='5',style={'border-style':'solid','border-width':'1px'})
        ]
      ),
      html.Tr(
        [
          html.Td('3',rowSpan='2',style={'border-style':'solid','border-width':'1px'}),
          html.Td('4',colSpan='2',style={'border-style':'solid','border-width':'1px'}),
          html.Td('5',colSpan='2',style={'border-style':'solid','border-width':'1px'})
        ]
      ),
      html.Tr(
        [
          html.Td('6',style={'border-style':'solid','border-width':'1px'}),
          html.Td('7',style={'border-style':'solid','border-width':'1px'}),
          html.Td('8',style={'border-style':'solid','border-width':'1px'})
        ]
      )
    ],
    style={'border-collapse':'collapse','border-spacing':'0','width':'100%','text-align':'left','padding':''}
    
    )

def generate_utm():
    r1=[]
    for i in range(0,5):
        r1.append( html.Td('{0}'.format(i),style={'border-style':'solid','border-width':'1px'}))
    
    return html.Table([

    html.Tr(r1),

    ],
    style={'border-collapse':'collapse','border-spacing':'0','width':'100%','text-align':'left'})

def generate_exe(em):
    
    data_rows=[

html.Tr(
        [
          html.Td('Plan Name',rowSpan='3',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','fontFamily': 'Calibri' }),
          
        ]
      ),

            html.Tr([

                html.Td("Benchmark",colSpan=2,style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec', 'fontFamily': 'Calibri'}),
                html.Td("Validation",colSpan='2',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec', 'fontFamily': 'Calibri' }),
                html.Td("Comparison",colSpan='2',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec', 'fontFamily': 'Calibri' })
            ]),
            html.Tr([

                html.Td("KS",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'10%', 'fontFamily': 'Calibri'}),
                html.Td("PDO",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'10%', 'fontFamily': 'Calibri' }),
                html.Td("KS",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'10%', 'fontFamily': 'Calibri' }),
                html.Td("PDO",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'10%', 'fontFamily': 'Calibri' }),
                html.Td("% Change (KS)",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'10%', 'fontFamily': 'Calibri' }),
                html.Td("% Change (PDO)",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'10%', 'fontFamily': 'Calibri' })
            ])]
    
    r_head=['Early Warning 1','Early Warning 2','Performance by model segment']
    
    i=0   
    for ind,row in em.iterrows():
            temp=[]
            temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri', 'textAlign': 'left'}))
            for r in row[:-2]:
                temp.append(html.Td("{0}".format(round(r,2)),colSpan='1',style={'border-style':'solid','border-width':'1px'}))
                
            for r in row[-2:]:
                
                    #print(r)
                    if abs(r) > 20:
                        temp_color = '#ff7f7f'
                    elif abs(r) < 10: 
                        temp_color = '#93c196'
                    else:
                        #print(r)
                        temp_color = '#FFDF80'
                    #print('***************')
                    temp.append(html.Td("{0}".format(round(r,2)),colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'{}'.format(temp_color)}))
            #print(temp)
            data_rows.append(html.Tr(temp))
            i=i+1

    return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'5','width':'40%','margin-left':'30%','margin-right':'30%','textAlign': 'center', 'font-size': '12px', 'fontFamily': 'Calibri'})

def ew11(df_name='ew1'):
    #print(pd.read_pickle('Executive_summary_table1.pkl'))
    dem=pd.read_csv(df_name+'.csv')
    data_rows=[

html.Tr(
        [
          html.Td('Segment ID',rowSpan='4',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'26%', 'fontFamily': 'Calibri'}),
          
        ]
      ),

            html.Tr([

                
            ]),

html.Tr([

                html.Td("Benchmark",colSpan='5',style={'border-style':'solid','border-width':'1px','background-color':'#92adce'}),
                html.Td("Validation",colSpan='5',style={'border-style':'solid','border-width':'1px','background-color':'#c3d3df'}),
                html.Td("Comparison ",colSpan='2',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec'})
                
            ]),
            


            html.Tr([

                html.Td("Scores",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%', 'fontFamily': 'Calibri'}),
                html.Td("Bad Count",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%', 'fontFamily': 'Calibri'}),
                html.Td("Bad Rate",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%', 'fontFamily': 'Calibri'}),
                html.Td("KS",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%', 'fontFamily': 'Calibri'}),
                html.Td("PDO",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%', 'fontFamily': 'Calibri'}),
                html.Td("Scores",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%', 'fontFamily': 'Calibri'}),
                html.Td("Bad Count",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%', 'fontFamily': 'Calibri'}),
                html.Td("Bad Rate",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%', 'fontFamily': 'Calibri'}),
                html.Td("KS",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%', 'fontFamily': 'Calibri'}),
                html.Td("PDO",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%', 'fontFamily': 'Calibri'}),
                html.Td("% Change (KS)",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%', 'fontFamily': 'Calibri'}),
                html.Td("% Change (PDO)",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%', 'fontFamily': 'Calibri'})
            ])]
    
    r_head=['Full Model','Seg1- No Records No TL','Seg2- Thin File','Seg3- Severe Derog','Seg4- Delinquent under 90','Seg5- New to Credit','Seg6- Mature Low Utilization','Seg7- Mature High Utilization',
    'Seg8- Mature Less Delinquent','Seg9- Mature More Delinquent']
    
    i=0   
    for ind,row in dem.iterrows():
            temp=[]
            temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px','text-align':'left'}))
            #print(list(row[-2:]))
            row=list(row)
            for r in row[:-2]:
                temp.append(html.Td("{0}".format(round(r,2)),colSpan='1',style={'border-style':'solid','border-width':'1px'}))
                
            for r in row[-2:]:
                
                    #print(r)
                    if abs(r) > 20:
                        temp_color = '#ff7f7f'
                    elif abs(r) < 10: 
                        temp_color = '#93c196'
                    else:
                        #print(r)
                        temp_color = '#FFDF80'
                    #print('***************')
                    temp.append(html.Td("{0}".format(round(r,2)),colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'{}'.format(temp_color)}))
            #print(temp)
            data_rows.append(html.Tr(temp))
            i=i+1

    return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','width':'100%','text-align':'center', 'font-size': '12px', 'fontFamily': 'Calibri'})

    

def m_perf_seg():
    seg=pd.read_pickle(df_seg)
    
    
    data_rows=[

html.Tr(
        [
          html.Td('Segment ID',rowSpan='4', colSpan='3',style={'border-style':'solid','border-width':'1px'}),
         
        ]
      ),

            html.Tr([

                html.Td("Performance by model segment- 90+ days past due, charged off, repossessed or bankrupt in first 18 months on book".format(1),colSpan='12',style={'border-style':'solid','border-width':'1px',
                'fontFamily': 'Calibri', 'background-color':'#d6e0ec'}, 
                ),
                
            ]),

html.Tr([

                html.Td("Benchmark ({0})".format(1),colSpan='5',style={'border-style':'solid','border-width':'1px', 'fontFamily': 'Calibri', 'background-color':'#d6e0ec'}),
                html.Td("Validation ({0})".format(1),colSpan='7',style={'border-style':'solid','border-width':'1px', 'fontFamily': 'Calibri', 'background-color':'#d6e0ec'}),
                
            ]),

            html.Tr([

                html.Td("Scores",colSpan='1',style={'border-style':'solid','border-width':'1px', 'fontFamily': 'Calibri', 'background-color':'#d6e0ec'}),
                html.Td("Bad Count",colSpan='1',style={'border-style':'solid','border-width':'1px', 'fontFamily': 'Calibri', 'background-color':'#d6e0ec'}),
                html.Td("Bad Rate",colSpan='1',style={'border-style':'solid','border-width':'1px', 'fontFamily': 'Calibri', 'background-color':'#d6e0ec'}),
                html.Td("KS",colSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri', 'background-color':'#d6e0ec'}),
                html.Td("PDO",colSpan='1',style={'border-style':'solid','border-width':'1px', 'fontFamily': 'Calibri','background-color':'#d6e0ec'}),
                html.Td("Scores",colSpan='1',style={'border-style':'solid','border-width':'1px', 'fontFamily': 'Calibri','background-color':'#d6e0ec'}),
                html.Td("Bad Count",colSpan='1',style={'border-style':'solid','border-width':'1px', 'fontFamily': 'Calibri', 'background-color':'#d6e0ec'}),
                html.Td("Bad Rate",colSpan='1',style={'border-style':'solid','border-width':'1px', 'fontFamily': 'Calibri', 'background-color':'#d6e0ec'}),
                html.Td("KS",colSpan='1',style={'border-style':'solid','border-width':'1px', 'fontFamily': 'Calibri', 'background-color':'#d6e0ec'}),
                html.Td("PDO",colSpan='1',style={'border-style':'solid','border-width':'1px', 'fontFamily': 'Calibri', 'background-color':'#d6e0ec'}),
                html.Td("%Change(KS)",colSpan='1',style={'border-style':'solid','border-width':'1px', 'fontFamily': 'Calibri', 'background-color':'#d6e0ec'}),
                html.Td("%Change(PDO)",colSpan='1',style={'border-style':'solid','border-width':'1px', 'fontFamily': 'Calibri', })
            ])]
    
    r_head=['Full Model','Seg1- No Records No TL','Seg2- Thin File','Seg3- Severe Derog','Seg4- Delinquent under 90','Seg5- New to Credit','Seg6- Mature Low Utilization','Seg7- Mature High Utilization',
    'Seg8- Mature Less Delinquent','Seg9- Mature More Delinquent']
    
    i=0   
    for ind,row in seg.iterrows():
            temp=[]
            temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px', 'fontFamily': 'Calibri', 'textAlign': 'left'}))
            row=list(row)
            for r in row[:-2]:
                temp.append(html.Td("{0}".format(round(r,2)),colSpan='1',style={'border-style':'solid','border-width':'1px'}))
                
            for r in row[-2:]:
                
                    #print(r)
                    if abs(r) > 20:
                        temp_color = '#ff7f7f'
                    elif abs(r) < 10: 
                        temp_color = '#93c196'
                    else:
                        #print(r)
                        temp_color = '#FFDF80'
                    #print('***************')
                    temp.append(html.Td("{0}".format(round(r,2)),colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'{}'.format(temp_color)}))
            data_rows.append(html.Tr(temp))
            i=i+1

    return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','width':'100%','text-align':'center', 'fontFamily': 'Calibri', 'font-size': '12px', 'fontFamily': 'Calibri'})

def ms_ttd():
    ttd=pd.read_csv('ms_ttd.csv')
    data_rows=[

      
#html.Tr(
 #       [
  #        html.Td('Segment(Model)-Validation',colSpan='2',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec', 'fontFamily': 'Calibri'})
                   
          
   #     ]
    #  ),

#html.Tr(
 #       [
  #        html.Td('Validation',colSpan='2',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec', 'fontFamily': 'Calibri'})
                   
          
   #     ]
    #  ),
html.Tr(
        [
             html.Td('MS TTD - Validation (01APR2018-31MAR2019)',colSpan='2',style={'border-style':'solid','border-width':'1px','background-color':'#92adce', 'fontFamily': 'Calibri'})

             ]
      )
            ,
html.Tr(
        [
html.Td('PSI',rowSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'24%', 'fontFamily': 'Calibri'}),
html.Td('Scores(Pop Stability)',rowSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'24%', 'fontFamily': 'Calibri'})
             ]
      )]

    for ind,row in ttd.iterrows():
        temp=[]

        row=list(row)
                
        for r in row[:-1]:
                
                    #print(r)
                    if abs(r) > 20:
                        temp_color = '#ff7f7f'
                    elif abs(r) < 10: 
                        temp_color = '#93c196'
                    else:
                        #print(r)
                        temp_color = '#FFDF80'
                    #print('***************')
                    temp.append(html.Td("{0}".format(round(r,2)),colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'{}'.format(temp_color)}))
        for r in row[1:]:
            temp.append(html.Td("{0}".format(round(r,2)),colSpan='1',style={'border-style':'solid','border-width':'1px'}))
            
        data_rows.append(html.Tr(temp))

    return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','width':'100%','text-align':'center','margin-right':'1%', 'fontFamily': 'Calibri', 'font-size': '12px'})  
            
def ks_seg(plan_name, segment_name):
    #print(val)
    ks=pd.read_csv('ks.csv')
    ks = ks[(ks.plan==plan_name) & (ks.segment==segment_name)]
    #ks=ks[ks['segment']==val]
    #print(ks.head())
    ks.drop(['segment','plan'],axis=1,inplace=True)
    #print(ks.head())
    data_rows=[


html.Tr(
        [
          html.Td(' ',rowSpan='4',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'20%','fontFamily': 'Calibri'})
                ]
      ),
html.Tr(
        [
          html.Td('Performance by model segment - overall decile',colSpan='13',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec', 'fontFamily': 'Calibri'})
                ]
      ),
html.Tr(
        [
          html.Td('Full model',colSpan='13',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec', 'fontFamily': 'Calibri'})
                ]
      ),
html.Tr(
        [
          html.Td('Validation',colSpan='13',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec', 'fontFamily': 'Calibri'})
                ]
      ),

html.Tr(
        [
          html.Td('Decile',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'6%', 'fontFamily': 'Calibri'}),
                    html.Td('Min Score',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'6%', 'fontFamily': 'Calibri'}),
                    html.Td('Max Score',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'6%','width':'6%', 'fontFamily': 'Calibri'}),
                    html.Td('# Accounts',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'6%', 'fontFamily': 'Calibri'}),
                    html.Td('Bad Count',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'6%', 'fontFamily': 'Calibri'}),
                    html.Td('Bad Rate',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'6%', 'fontFamily': 'Calibri'}),
                    html.Td('% Total Bad',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'6%','fontFamily': 'Calibri'}),
                    html.Td('% Cumulative Bad',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'6%', 'fontFamily': 'Calibri'}),
                    html.Td('# Good',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'6%', 'fontFamily': 'Calibri'}),
                    html.Td("% Good",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'6%', 'fontFamily': 'Calibri'}),
                    html.Td('% Cumulative Good',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'6%', 'fontFamily': 'Calibri'}),
                    html.Td('KS',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'6%', 'fontFamily': 'Calibri'})

                ]
      )

    ]

    r_head=['Decile 1','Decile 2','Decile 3','Decile 4','Decile 5','Decile 6','Decile 7','Decile 8','Decile 9','Decile 10']
    
    i=0   
    for ind,row in ks.iterrows():
            temp=[]
            temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px', 'text-align':'left'}))
            for r in row:
                temp.append(html.Td("{0}".format(round(r,2)),colSpan='1',style={'border-style':'solid','border-width':'1px'}))
            #print(temp)
            data_rows.append(html.Tr(temp))
            i=i+1

    return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','width':'100%','text-align':'center', 'font-size': '12px', 'fontFamily': 'Calibri'})


def m_perf_bseg(plan_name):
    print('***********')
    print(plan_name)
    print('***********')
    bseg=pd.read_csv('mperf_bs.csv')
    bseg=bseg[bseg['plan']==plan_name]
    #print(ks.head())
    bseg.drop(['plan'],axis=1,inplace=True)

    print(bseg.head())
    data_rows=[

html.Tr(
        [
          html.Td('Segment ID',rowSpan='4',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'26%'}),
          ]
      ),

            html.Tr([

                html.Td("Performance by business segment - 90+ days past due, charged off, repossessed or bankrupt in first 18 months on book".format(1),colSpan='12',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec', 'fontFamily': 'Calibri'}),
                
            ]),

html.Tr([

                html.Td("Benchmark (01OCT2010-30SEP2011)",colSpan='5',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec'}),
                html.Td("Validation (01OCT2016-30SEP2017)",colSpan='7',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec'}),
                
            ]),

            html.Tr([

             
                html.Td("Scores",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%'}),
                html.Td("Bad Count",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%'}),
                html.Td("% Bad",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%'}),
                html.Td("KS",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%'}),
                html.Td("PDO",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%'}),
                html.Td("Scores",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%'}),
                html.Td("Bad Count",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%'}),
                html.Td("% Bad",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%'}),
                html.Td("KS",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%'}),
                html.Td("PDO",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%'}),
                html.Td("% Change(KS)",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%'}),
                html.Td("% Change(PDO)",colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'5%'})
            ])]
    
    r_head=['Full Model',"LTV 0-80","LTV 101-120","LTV 120+","LTV 81-100","Segment - Lease Portfolio","Segment - Manufacturing Portfolio","Segment - Retail Portfolio",
    "Segment A - Sub Prime","Segment B - Near Prime","Segment C- Prime"]
    
    i=0   
    for ind,row in bseg.iterrows():
            temp=[]
            temp.append(html.Td(r_head[i],colSpan='1',style={'border-style':'solid','border-width':'1px', 'text-align':'left'}))
            row=list(row)
            for r in row[:-2]:
                temp.append(html.Td("{0}".format(round(r,2)),colSpan='1',style={'border-style':'solid','border-width':'1px'}))
                
            for r in row[-2:]:
                
                    #print(r)
                    if abs(r) > 20:
                        temp_color = '#ff7f7f'
                    elif abs(r) < 10: 
                        temp_color = '#93c196'
                    else:
                        #print(r)
                        temp_color = '#FFDF80'
                    #print('***************')
                    temp.append(html.Td("{0}".format(round(r,2)),colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'{}'.format(temp_color)}))
            data_rows.append(html.Tr(temp))
            i=i+1

    return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','width':'100%', 'font-size': '12px','text-align':'center', 'fontFamily': 'Calibri'})

def bs_ttd():
    ttd=pd.read_csv("bs_ttd.csv")
    data_rows=[

html.Tr(
        [
          html.Td('BS TTD - Validation',colSpan='2',style={'border-style':'solid','border-width':'1px','background-color':'#92adce','fontFamily': 'Calibri'})
                   
          
        ]
      ),
     

#html.Tr(
 #       [
  #        html.Td('Validation',colSpan='2',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','fontFamily': 'Calibri'})
                   
          
   #     ]
    #  ),
html.Tr(
        [
             html.Td('01APR2018-31MAR2019',colSpan='2',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','fontFamily': 'Calibri'})

             ]
      )
            ,
html.Tr(
        [
html.Td('PSI',rowSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'24%','fontFamily': 'Calibri'}),
html.Td('Scores(Pop Stability)',rowSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','width':'24%','fontFamily': 'Calibri'})
             ]
      )]

    for ind,row in ttd.iterrows():
        temp=[]

        row=list(row)
                
        for r in row[:-1]:
                
                    #print(r)
                    if abs(r) > 20:
                        temp_color = '#ff7f7f'
                    elif abs(r) < 10: 
                        temp_color = '#93c196'
                    else:
                        #print(r)
                        temp_color = '#FFE79F'
                    #print('***************')
                    temp.append(html.Td("{0}".format(round(r,2)),colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'{}'.format(temp_color)}))
        for r in row[1:]:
            temp.append(html.Td("{0}".format(round(r,2)),colSpan='1',style={'border-style':'solid','border-width':'1px'}))
            
        data_rows.append(html.Tr(temp))

    return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','text-align':'center','width':'99%','margin-left':'1%' ,'fontFamily': 'Calibri', 'font-size': '12px'})  

def etb():

  return html.Table([html.Tr([html.Td('Executive Summary',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec', 'fontColor': 'white'})])]
  ,style={'border-collapse':'collapse','width':'100%','border-spacing':'0','text-align':'center','width':'40%','margin-left':'30%','margin-right':'30%', 'fontFamily': 'Calibri', 'fontColor': 'white'})

dem=pd.read_pickle("Executive_summary_table1.pkl")

colors = ['#5482ab',]*8
colors[0] ='#ff8000' 

def definition():
    ttd=pd.read_csv("database/definitions.csv")
    data_rows=[

    html.Tr(
            [
              html.Td('Timeperiod Type',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','fontFamily': 'Calibri'}),
              
              html.Td('Month of Execution Timestamp',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','fontFamily': 'Calibri'}),
              
              html.Td('Plan Name',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','fontFamily': 'Calibri'}),
              
              html.Td('Target Definition',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','fontFamily': 'Calibri'}),
              
              html.Td('Scoring Window',colSpan='1',style={'border-style':'solid','border-width':'1px','background-color':'#d6e0ec','fontFamily': 'Calibri'})
                       
              
            ]
          ),
         

    html.Tr(
            [
              html.Td('Benchmark',rowSpan='3',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}),
              html.Td('{}'.format("November 2017"),rowSpan='3',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}),
              html.Td('{}'.format("Early Warning 1"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}),
                       
              html.Td('{}'.format("60+ days past due, charged off, repossessed, or bankrupt in first 6 months on book"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}), 
              html.Td('{}'.format("01OCT2010-30SEP2011"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}), 
            ]
          ),
    html.Tr(
            [
                 html.Td('{}'.format("Early Warning 2"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}),
                       
                      html.Td('{}'.format("90+ days past due, charged off, repossessed, or bankrupt in first 12 months on book"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}), 
              html.Td('{}'.format("01OCT2010-30SEP201"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}),

                 ]
          )
          ,
          
            html.Tr(
            [
                 html.Td('{}'.format("Perfromance by Model Segment"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}),
                       
                      html.Td('{}'.format("90+ days past due, charged off, repossessed, or bankrupt in first 18 months on book"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}), 
              html.Td('{}'.format("01OCT2010-30SEP201"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}),

                 ]
          )
                ,
                
                
    html.Tr(
            [
              html.Td('Validation',rowSpan='3',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}),
              html.Td('{}'.format("April 2019"),rowSpan='3',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}),
              html.Td('{}'.format("Early waring 1"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}),
                       
                      html.Td('{}'.format("60+ days past due, charged off, repossessed, or bankrupt in first 6 months on book"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}), 
              html.Td('{}'.format("01OCT2017-30SEP2018"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}), 
            ]
          ),
    html.Tr(
            [
                 html.Td('{}'.format("Early Warning 2"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}),
                       
                      html.Td('{}'.format("90+ days past due, charged off, repossessed, or bankrupt in first 12 months on book"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}), 
              html.Td('{}'.format("01APR2017-31MAR2018"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}),

                 ]
          )
          ,
          
            html.Tr(
            [
                 html.Td('{}'.format("Perfromance by Model Segment"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}),
                       
                      html.Td('{}'.format("90+ days past due, charged off, repossessed, or bankrupt in first 18 months on book"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}), 
              html.Td('{}'.format("01OCT2016-30SEP2017"),rowSpan='1',style={'border-style':'solid','border-width':'1px','fontFamily': 'Calibri'}),

                 ]
          )
    ]

    return html.Table(data_rows,style={'border-collapse':'collapse','border-spacing':'0','text-align':'center' ,'width':'100%','fontFamily': 'Calibri', 'font-size': '12px'})  


######################### VAIBHAV DEF END #########################################################################################################




#######################################################



#layout = html.Div([html.H1("Hello")])

layout = html.Div([
######################### VAIBHAV LAYOUT START ###########################################################################
  html.Div(
  [
    html.H1(children='CCB Risk - Model Monitoring',style={'text-align': 'left','backgroundColor':' #5381ac','padding-bottom':'5px','padding-top':'5px', "color":'white', 
    'fontFamily': 'Calibri',"border":"1px grey solid", 'padding-left':'20px'}),
    
    html.H2(children='31980 - CAF Full Spectrum Indirect Origination(Gen 5b)',style={'text-align': 'left','backgroundColor':' #92adce','padding-bottom':'5px','padding-top':'5px', "color":'white', 
    'fontFamily': 'Calibri',"border":"1px grey solid", 'padding-left':'40px',
				   'font-size': '20px' }),
html.Div([definition()],style={'padding-bottom':'20px'}) 
    ,  
       html.Div([etb()],style={'padding-bottom':'2px'}), 

       html.Div([generate_exe(em=dem)],style={'padding-bottom':'12px', 'fontColor': 'blue'}), 
  

  html.H3("Select the Plan (Peformance Measure)",style={'text-align': 'left','backgroundColor':' #92adce','padding-bottom':'5px','padding-top':'5px', "color":'white', 
    'fontFamily': 'Calibri',"border":"1px grey solid", 'padding-left':'40px',
				   'font-size': '20px' }),

html.Div([dcc.Dropdown(id='table-dpdn',
    options=[
        {'label': 'Early Warning 1', 'value': 'ew1'},
        {'label': 'Early Warning 2', 'value': 'ew2'},
        {'label':'Model Performance by Model Segments','value':'mperf_ms'}
    ],
    value='ew1',
) ],style={'padding-bottom':'25px'}),

            
#html.Div([
#html.Div([ms_ttd()],style={'width':'20%','display': 'inline-block'})

html.Div([

html.Div(id='op-table',style={'display': 'inline-block', 'width':'80%'}),
html.Div([ms_ttd()],style={'width':'20%','display': 'inline-block'})

],style={'width':'100%'}),
html.Br(),
        
        

#html.Div(id='op-table',style={'padding-bottom':'10px', 'width':'80%'}),
html.H3("Select the Performance Metric",style={'text-align': 'left','backgroundColor':' #92adce','padding-bottom':'5px','padding-top':'5px', "color":'white', 
    'fontFamily': 'Calibri',"border":"1px grey solid", 'padding-left':'40px',
				   'font-size': '20px' }),
                        
                        
html.Div([dcc.Dropdown(id='xaxis-column1',
    options=[
            {'label': 'KS', 'value': 'KS'},
            {'label': 'PDO', 'value': 'PDO'}
        ],
        value='KS'
)
],style={'padding-bottom':'25px'} ),

html.Div([dcc.Graph(id='graph11')],style={"border":"1px grey solid",'padding-bottom':'15px', 'fontcolor':'white'}),
html.Br(),

html.Div([
html.H4("Model performance by business segments",style={'text-align': 'left','backgroundColor':' #92adce','padding-bottom':'5px','padding-top':'5px', "color":'white', 
    'fontFamily': 'Calibri',"border":"1px grey solid", 'padding-left':'40px',
				   'font-size': '20px' }),

html.Div(id='BS-table',style={'width':'80%','display': 'inline-block'}),
html.Div([bs_ttd()],style={'width':'20%','display': 'inline-block'})

],style={'width':'100%'}),
html.Br(),

html.H5("Performance on model segment by decile",style={'text-align': 'left','backgroundColor':' #92adce','padding-bottom':'5px','padding-top':'5px', "color":'white', 
    'fontFamily': 'Calibri',"border":"1px grey solid", 'padding-left':'40px',
				   'font-size': '20px' }),

html.Div([
	dcc.Dropdown(
    id='Segment-selection',
    options=[{'label': i,'value': i} for i in list(ks['segment'].unique())],
   
    value='Full Model'
    )],style={'width':'25%','display': 'inline-block'}),

html.Div(id = 'Segment-deep-dive',style={'padding-bottom':'10px'}
),
  
  
  
  
  ######################## VAIBHAV LAYOUT END ############################################################################################################
  # dcc.Dropdown(id="dropdown_1",options=[
  #                               {'label': 'Early warning 1', 'value': 'c1'},
  #                               {'label': 'Early warning 2', 'value': 'c2'},
  #                               {'label': 'Early warning 3', 'value': 'c3'}
  #                                   ],
  #                                   value='c1'
  #                               ),
                   html.Br(),
                   html.H3("KS Detail on Gen5B Segments",style={'text-align': 'left','backgroundColor':' #92adce','padding-bottom':'5px','padding-top':'5px', "color":'white', 
    'fontFamily': 'Calibri',"border":"1px grey solid", 'padding-left':'40px',
				   'font-size': '20px' }),
                   #html.Div("__________________________________________________________________________________________________________________________________________________________________________________________________________________________"),
                   #html.Div(id='dynamic_layout',style={"height":"10%"}),
                   html.Br(),
                   html.Div([dcc.Graph(id='plot1_layout')],style={"border":"1px grey solid"}),
                   html.Button('', id='button',style={'width':'0%','height':'0%','left':'0%','top':'0%', 'display':'none'}),
                   #html.A('Download readMe.pdf', download='output.pdf', href='/output.pdf')
                   #html.Button('dddddddd', id='button2',style={'width':'5%','height':'5%','left':'0%','top':'0%', })
                   html.A(html.Button(id='Next page ->', n_clicks=0, children='Next page ->',style={'background-color':'grey',
                                                        'foreground-color':'red',
                                                        'color':'white',
                                                        'textAlign': 'center',
                                                        'verticalAlign':'center',
                                                        'position':'fixed',
                                                        'width':'7%',
                                                        'height':'5%',
                                                        'top':'95%',
                                                        'left':'93%',
                                                        'border-radius':10}),
                  href='http://172.26.101.6:8050/')
                  ],
                   style={'margin':'1%','height':"100%"})
])
@app.callback(Output(component_id='dynamic_layout',component_property='children'),
                    [Input('table-dpdn', 'value')])

def dynamic_layout(dropdown_val):
    #if (n_clicks is None):
    #df = pd.read_csv('database/data1.csv',header=None)
    df = pd.read_csv('database/data1.csv',header=None)
    df = df[(df[8]==dropdown_val)|(df[8]=='category')|(df[8].isnull())]
    del df[8]
    n_headers = 3
    header_list=[]
    for i in range(n_headers):
        header_list.append(df.iloc[i,0])
        
    df = df.iloc[n_headers:,:]
    df.columns = df.iloc[0,:].values
    df = df.iloc[1:,:]
    df.index = range(0,len(df))
    #print(df)
    #print(header_list)
    #df = pd.read_excel('database/data1.xlsx')
    return dash_table.DataTable(
    id='table',
    columns=[{"name": [header_list[0],header_list[1],header_list[2],i], "id": i
              #,"deletable": True
                } for i in df.columns],
    data=df.to_dict('records'),
    #editable=True,
    sort_action="native",
    sort_mode="multi",
    #row_selectable="multi",
    merge_duplicate_headers=True,
    #filtering=True,
    #filtering_type='basic',
    #sortable=True,
    #n_fixed_columns=1,
    #n_fixed_rows=1,
    style_header={'backgroundColor': '#d6e0ec',
                  'fontWeight': 'bold',
                  'color':'white',
                  'border': '1px solid black' },
    style_table={
                 #'overflowX': 'scroll',
                 #'overflowY': 'scroll',
                 'maxHeight': '10%',
                 'maxWidth': '100%',
                 'fontFamily': 'Times New Roman'
                },
    style_data={
                'whitespace':'normal',
                'width':'auto',
                'height':'auto',
                'border': '1px solid black'
                },
    style_cell={
                'fontFamily': 'Open Sans',
                'textAlign': 'center',
                #'padding': '2px 22px',
                'overflow': 'hidden',
                'whiteSpace': 'normal',
                #'textOverflow': 'ellipsis',
                #'height': 'auto',
                #'minWidth': '50px', 
                #'maxWidth': '180px',    
                },
    style_data_conditional=[{
        "if": {"row_index": 'odd'},
        "backgroundColor": "#DEDEDE",
        'color': 'black',
        #'border-collapse':'collapse'
                            }],
     style_header_conditional=[{
         "if": {"header_index":0},
         "backgroundColor": "#DEDEDE",
         'color': 'black',
    #     #'border-collapse':'collapse'
                             }

                                ]
    )




##############PLOTTING###################################

@app.callback(Output('plot1_layout','figure'),
                [Input('table-dpdn', 'value')])

def dynamic_layout_plot(dropdown_val):
  #print("#####################")
    #if (n_clicks is None):
  df = pd.read_csv('database/data_bar.csv')
  df = df[df['input_cat']==dropdown_val]
  del df['input_cat']
  
  
  df2 = pd.read_csv('database/data_lift.csv')
  df2 = df2[df2['input_cat']==dropdown_val]
  del df2['input_cat']
  
  
  df3 = pd.read_csv('database/data_bad_capture.csv')
  df3 = df3[df3['input_cat']==dropdown_val]
  del df3['input_cat']
  print("#####################")
  print("#####################")
  print("#####################")
  print("#####################")
  print("#####################")
  print("#####################")
  print(df['BENCHMARK'].values)
  
  print(df2['BENCHMARK'].values)
  
  print(df3['BENCHMARK'].values)
  
  #x_labels = ['Decile1','Decile2','Decile3','Decile4','Decile5','Decile6','Decile7','Decile8','Decile9','Decile10']
  x_labels = df["Deciles"]
  fig = go.Figure()
  fig = make_subplots(rows=1, cols=3)
  fig.add_bar(x=x_labels,y=df['BENCHMARK'].values,marker=dict(color="#ff8000"), row=1, col=1,name='Benchmark',
              text=df['BENCHMARK'],
              textposition="auto",textangle=-90,
              textfont={
                        'family':"calibri",
                        "size":40,
                        "color":"white"
                        }
              )
  fig.add_bar(x=x_labels,y=df['VALIDATION'].values,marker=dict(color="#5482ab"),row=1, col=1,name='Validation',
              text=df['VALIDATION'],
              textposition="auto",textangle=-90,
              textfont={
                        'family':"calibri",
                        "size":40,
                        "color":"white"
                        }
              )
  fig.add_scatter(x=x_labels,y=df2['BENCHMARK'].values,marker=dict(color="#ff8000"), row=1, col=2,showlegend=False,
                  text=df2['BENCHMARK'],
                  mode="markers+lines+text",
                  textposition="bottom center",
                  textfont={
                            'family':"calibri",
                            "size":10,
                            "color":"orange"
                            }
                  )
  fig.add_scatter(x=x_labels,y=df2['VALIDATION'].values,marker=dict(color="#5482ab"),row=1, col=2,showlegend=False,
                  text=df2['VALIDATION'],
                  textposition="top center",
                  mode="markers+lines+text",
                  textfont={
                            'family':"calibri",
                            "size":10,
                            "color":"blue"
                            }
                        )
  fig.add_bar(x=x_labels,y=df3['BENCHMARK'].values,marker=dict(color="#ff8000"), row=1, col=3,showlegend=False,
              text=df3['BENCHMARK'],
              textposition="auto",textangle=-90,
              textfont={
                        'family':"calibri",
                        "size":40,
                        "color":"white"
                        }
                        )
  fig.add_bar(x=x_labels,y=df3['VALIDATION'].values,marker=dict(color="#5482ab"),row=1, col=3,showlegend=False,
              text=df3['VALIDATION'],
              textposition="auto",textangle=-90,
              textfont={
                        'family':"calibri",
                        "size":40,
                        "color":"white"
                        }
                        )
  fig.layout.yaxis1.gridcolor = 'grey'
  
  fig.layout['yaxis1']['showgrid'] = False
  fig.layout.yaxis2.gridcolor = 'grey'
  
  fig.layout['yaxis2']['showgrid'] = False
  fig.layout.yaxis3.gridcolor = 'grey'
  
  fig.layout['yaxis3']['showgrid'] = False
  fig.layout.plot_bgcolor = 'white'
  fig.layout['yaxis']['showgrid'] = False
  #fig.layout.xaxis.linecolor="black"
  #fig.layout.xaxis2.linecolor="black"
  #fig.layout.xaxis3.linecolor="black"
  #fig.layout.yaxis.linecolor="black"
  #fig.layout.yaxis2.linecolor="black"
  #fig.layout.yaxis3.linecolor="black"
  fig.layout.margin.pad=0
  fig.update_xaxes(linecolor="black",
                   tickangle=310,
                   #mirror=True,
                   tickfont=dict(family='Rockwell', color='black', size=10),
                   row=1,col=1,)
  fig.update_xaxes(linecolor="black",
                  tickangle=310,
                  #mirror=True,
                  tickfont=dict(family='Rockwell', color='black', size=10),
                  row=1,col=2,)
  fig.update_xaxes(linecolor="black",
                  tickangle=310,
                 # mirror=True,
                  tickfont=dict(family='Rockwell', color='black', size=10),
                  row=1,col=3,)
  fig.update_yaxes(linecolor="black",
                   #tickangle=310,
                   #mirror=True,
                   #tickfont=dict(family='Rockwell', color='black', size=10),
                   row=1,col=1, showticklabels=False)
  fig.update_yaxes(linecolor="black",
                  #tickangle=310,
                  #mirror=True,
                  #tickfont=dict(family='Rockwell', color='black', size=10),
                  row=1,col=2,showticklabels=False)
  fig.update_yaxes(linecolor="black",
                  #tickangle=310,
                  #mirror=True,
                  #tickfont=dict(family='Rockwell', color='black', size=10),
                  row=1,col=3,showticklabels=False)
  #print("#####################")
  fig = fig.update_layout({"annotations": [
      {
        "x": 0.145,
        "y": 1.08,
        "font": {
          "size": 16
        },
        "text": "KS by Gen5B Score Decile",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "bottom",
        "showarrow": False,
        "bgcolor":"#d6e0ec",
        "width":467,
        "height":35,
        "font":{"size":12,"color":"black"},
        #"bordercolor":"black"
      },
      {
        "x": 0.50,
        "y": 1.08,
        "font": {
          "size": 16
        },
        "text": "Lift Chart (by Gen5b Score Decile)",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "bottom",
        "showarrow": False,
        "bgcolor":"#d6e0ec",
        "width":470,
        "height":35,
        "font":{"size":12,"color":"black"}
      },
      {
        "x": 0.855,
        "y": 1.08,
        "font": {
          "size": 16
        },
        "text": "Bad Capture by Gen5b Score Decile",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "bottom",
        "showarrow": False,
        "bgcolor":"#d6e0ec",
        "width":470,
        "height":35,
        "font":{"size":12,"color":"black"}
      }]})
  return fig
    

# color
# thickness of plot title
# font of data table
###############################################################################################################################################################################
######################### VAIBHAV CALLBACK START ##############################################################################################################################
@app.callback(
        Output('graph11', 'figure'),
              [Input('table-dpdn', 'value'),Input('xaxis-column1', 'value')])
        
def update(model_value,metric_value):
    df=pd.read_csv('graph3.csv')
  
    if model_value=='ew1':
      model_value='Early Warning 1'
    elif model_value=='ew2':
      model_value='Early Warning 2'
    elif model_value=='mperf_ms':
      model_value= 'PERFORMANCE BY MODEL SEGMENT'
    
    df1=df[df['Plan_Name']==model_value]
    
    
    data=df1[df1['METRIC_KEY']==metric_value]
    
    
    data=data.sort_values(by='Time_Frame')
    #print(data['Time_Frame'].unique())
    
    #print(df.head(50))
    
    fig = make_subplots(rows=1, cols=10)
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Full Model"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Full Model"].values,marker=dict(color=colors), row=1, col=1,showlegend=False,name='Full Model',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Full Model"].values,
              textposition="auto",textangle =-90,
              textfont={
                        'family':"calibri",
                        "size":20,
                        "color":"white" 
                        } )
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 1 - No Record No TL"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 1 - No Record No TL"].values,marker=dict(color=colors), 
    row=1, col=2,showlegend=False,name='Segment 1 - No Record No TL',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 1 - No Record No TL"].values,
              textposition="auto",textangle =-90,
              textfont={
                        'family':"calibri",
                        "size":20,
                        "color":"white"
                        }  )
    
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 2 - Thin File"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 2 - Thin File"].values,marker=dict(color=colors), row=1, col=3,showlegend=False,name='Segment 2 - Thin File' ,text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 2 - Thin File"].values,
              textposition="auto",textangle =-90,
              textfont={
                        'family':"calibri",
                        "size":20,
                        "color":"white"
                        } )
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 3 - Severe Derog"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 3 - Severe Derog"].values,marker=dict(color=colors), 
    row=1, col=4,showlegend=False,name='Segment 3 - Severe Derog',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 3 - Severe Derog"].values,
              textposition="inside",textangle =-90,
              textfont={
                        'family':"calibri",
                        "size":30,
                        "color":"white"
                        }  )
    
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 4 - Delinquent under 90"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 4 - Delinquent under 90"].values,marker=dict(color=colors), row=1, col=5,showlegend=False,name='Segment 4 - Delinquent under 90',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 4 - Delinquent under 90"].values,
              textposition="inside",textangle =-90,
              textfont={
                        'family':"calibri",
                        "size":30,
                        "color":"white"
                        }  )
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 5 - New to Credit"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 5 - New to Credit"].values,marker=dict(color=colors), row=1, col=6,showlegend=False,name='Segment 5 - New to Credit',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 5 - New to Credit"].values,
              textposition="inside",textangle =-90,
              textfont={
                        'family':"calibri",
                        "size":30,
                        "color":"white"
                        }  )
    
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 6 - Mature Low Utilization"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 6 - Mature Low Utilization"].values,marker=dict(color=colors), row=1, col=7,showlegend=False,name='Segment 6 - Mature Low Utilization',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 6 - Mature Low Utilization"].values,
              textposition="inside",textangle =-90,
              textfont={
                        'family':"calibri",
                        "size":30,
                        "color":"white"
                        }  )
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 7 - Mature High Utilization"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 7 - Mature High Utilization"].values,marker=dict(color=colors), row=1, col=8,showlegend=False,name='Segment 7 - Mature High Utilization',text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 7 - Mature High Utilization"].values,
              textposition="inside",textangle =-90,
              textfont={
                        'family':"calibri",
                        "size":30,
                        "color":"white"
                        }  )
    
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 8 - Mature Less Delinquent"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 8 - Mature Less Delinquent"].values,marker=dict(color=colors), row=1, col=9,showlegend=False,name='Segment 8 - Mature Less Delinquent' ,text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 8 - Mature Less Delinquent"].values,
              textposition="inside",textangle =-90,
              textfont={
                        'family':"calibri",
                        "size":30,
                        "color":"white"
                        } )
    fig.add_bar(x=data['Time_Frame'][data['SEGMENT_ID'] == "Segment 9 - Mature More Delinquent"].values,y=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 9 - Mature More Delinquent"].values,marker=dict(color=colors), row=1, col=10,showlegend=False,name='Segment 9 - Mature More Delinquent' ,text=data['METRIC_VALUE'][data['SEGMENT_ID'] == "Segment 9 - Mature More Delinquent"].values,
              textposition="inside",textangle =-90,
              textfont={
                        'family':"calibri",
                        "size":30,
                        "color":"white"
                        } )

    
    
    
    
    
    #fig.update_traces(textposition='outside')
    
    fig.layout.xaxis.title=None
    
    
    fig.layout.xaxis.tickangle=-70
    
    fig.layout.xaxis2.title=None
    fig.layout.xaxis2.tickangle=-70
    
    fig.layout.xaxis3.title=None
    fig.layout.xaxis3.tickangle=-70
    
    fig.layout.xaxis4.title=None
    fig.layout.xaxis4.tickangle=-70
    
    fig.layout.xaxis5.title=None
    fig.layout.xaxis5.tickangle=-70
    
    fig.layout.xaxis6.title=None
    fig.layout.xaxis6.tickangle=-70
    
    fig.layout.xaxis7.title=None
    fig.layout.xaxis7.tickangle=-70
    
    fig.layout.xaxis8.title=None
    fig.layout.xaxis8.tickangle=-70
    
    fig.layout.xaxis9.title=None
    fig.layout.xaxis9.tickangle=-70
    
    fig.layout.xaxis10.title=None
    fig.layout.xaxis10.tickangle=-70
    
    fig.layout.height=500
    fig.layout.plot_bgcolor = 'white'
    
    fig.update_yaxes(showticklabels=False)
    
    fig = fig.update_layout({"annotations": [
      {
        "x": 0.04,
        "y": 1.08,
        "font": {
          "size": 11
        },
        "text": "Full Model",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "top",
        "showarrow": False
       
      },
      {
        "x": 0.15,
        "y": 1.08,
        "font": {
          "size": 11
        },
        "text": "Segment 1 <br> No Record No TL",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "top",
        "showarrow": False
      },
      {
        "x": 0.25,
        "y": 1.08,
        "font": {
          "size": 11
        },
        "text": "Segment 2 <br>Thin File",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "middle",
        "showarrow": False
      },
    {
        "x": 0.35,
        "y": 1.08,
        "font": {
          "size": 11
        }, 
        "text": "Segment 3 <br> Severe Derog",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "middle",
        "showarrow": False
      },
    {
        "x": 0.45,
        "y": 1.08,
       "font": {
          "size": 11
        },
        "text": "Segment 4 <br> Delinquent under 90",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "middle",
        "showarrow": False
      },
    {
        "x": 0.55,
        "y": 1.08,
        "font": {
          "size": 11
        },
        "text": "Segment 5 <br> New to Credit",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "middle",
        "showarrow": False
      },
    {
        "x": 0.655,
        "y": 1.08,
        "font": {
          "size": 11
        },
        "text": "Segment 6 <br> Mature Low Utilization",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "middle",
        "showarrow": False
      },
    {
        "x": 0.758,
        "y": 1.08,
        "font": {
          "size": 11
        },
        "text": "Segment 7 <br> Mature High Utilization",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "middle",
        "showarrow": False
      },
    {
        "x": 0.86,
        "y": 1.08,
        "font": {
          "size": 11
        },
        "text": "Segment 8 <br> Mature Less Delinquent",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "middle",
        "showarrow": False
      },
    {
        "x": 0.96,
        "y": 1.08,
        "font": {
          "size": 11
        },
        "text": "Segment 9 <br> Mature More Delinquent",
        "xref": "paper",
        "yref": "paper",
        "xanchor": "center",
        "yanchor": "middle",
        "showarrow": False
      }

    ]})

    return fig.update_traces(marker_color=colors)    
    #return fig.show()

@app.callback(
    dash.dependencies.Output('op-table', 'children'),
    [dash.dependencies.Input("table-dpdn", "value")],
)

def update_option(search_value):

     return ew11(search_value)



@app.callback(
    dash.dependencies.Output('Segment-deep-dive', 'children'),
    [dash.dependencies.Input('table-dpdn', 'value'),
    dash.dependencies.Input('Segment-selection', 'value')
     ])      

def update_options(search_valuer,sr2):
    #print("Got here , BOOOOO!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
    return ks_seg(search_valuer,sr2)


@app.callback(
    dash.dependencies.Output('BS-table', 'children'),
    [dash.dependencies.Input('table-dpdn', 'value')
     ])      

def update_options(search_valuebs):
    #print("Got here , BOOOOO!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
    return m_perf_bseg(search_valuebs)


######################### VAIBHAV CALLBACK END ##############################################################################################################################



#pdfkit.from_url('http://127.0.0.1:8050/apps/page1', 'out.pdf')
    

# if __name__ == '__main__':
#     app.run_server(debug=True)



import dash
import pandas as pd
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output, State
import pickle
import base64
import datetime
import io
import dash_table
from app import app
#import sqlite3
#import re
import os


image_filename = 'images/logo.png' # replace with your own image
encoded_image = base64.b64encode(open(image_filename, 'rb').read())


layout = html.Div([
    # dcc.Upload(
    #     id='upload-data',
    #     children=html.Div([
    #         'Drag and Drop or ',
    #         html.A('Select Files')
    #     ]),
    #     style={'background-color':'white',
    #         'width': '15%',
    #         'height': '20%',
    #         #'top':'10%',
    #         #'left':'30%',
    #         'lineHeight': '400%',
    #         'borderWidth': '1px',
    #         'borderStyle': 'dashed',
    #         'borderRadius': '1%',
    #         'textAlign': 'center',
    #         'margin': '10px'
    #     },
    #     # Allow multiple files to be uploaded
    #     multiple=True
    # ),

    #html.Div(id='logo',
    html.Img(id='logo',src='data:image/png;base64,{}'.format(encoded_image.decode()),
    style={'background-color':'white',
                            'foreground-color':'black',
                            #'background-image':'url(https://www.sinonimi-contrari.it/includes/images/sharers/sinonimi-di-aiuto.png)',
                            #'background-image':'url(https://i.ibb.co/M5GgQv4/AIUTO.png)',
                            #'background-image':html.Img(src=app.get_asset_url('logo.png')),
                            #'background':"H:/dash/DUMP/logo.png",
                            
                            'textAlign': 'center',
                            'verticalAlign':'top',
                            'position':'fixed',
                            'width':'30%',
                            'height':'35%',
                            'top':'6%',
                            'left':'35%',}),
     html.H5("CCB Risk - Model Monitoring Platform"
            ,style={'background-color':'#5381ac',
                                'foreground-color':'black',
                                'color':'white',
                                'fontSize':20,
                                'textAlign': 'center',
                                'verticalAlign':'middle',
                                'position':'fixed',
                                'width':'35%',
                                'height':'4.0%',
                                'top':'37%',
                                'left':'33%',
                                'fontFamily': 'Calibri',
                                'border-radius':10}),

    html.H5("Select the model here:"
            ,style={'background-color':'white',
                                'foreground-color':'black',
                                'color':'grey',
                                #'fontSize':30,
                                'textAlign': 'left',
                                'verticalAlign':'center',
                                'position':'fixed',
                                'width':'20%',
                                'height':'3%',
                                'top':'46%',
                                'left':'36%',
                                'fontSize':12,
                                'fontFamily': 'Calibri',
                                'border-radius':10}),

    dcc.Dropdown(id='model_selected'
                ,options=[
                    {'label':'Model: 803456','value':'803456'},
                    {'label':'Model: 555555','value':'555555'},
                    {'label':'Model: 111111','value':'111111'}
                ]
                ,value='',style={'background-color':'white',
                                'foreground-color':'black',
                                'color':'blue',
                                'font size':"40",
                                'textAlign': 'left',
                                'verticalAlign':'top',
                                'position':'fixed',
                                'width':'15%',
                                'height':'3%',
                                'top':'47%',
                                'left':'50%',
                                'fontSize':12,
                                'fontFamily': 'Calibri',
                                'border-radius':10}),
    html.A(html.Button(id='submit-button-2', n_clicks=0, children='Model monitoring deep-dive',style={'background-color':'#87ceeb',
                                                            'foreground-color':'red',
                                                            'color':'white',
                                                            'fontSize':12,
                                                            'textAlign': 'center',
                                                            'verticalAlign':'top',
                                                           'position':'fixed',
                                                           'width':'15%',
                                                           'height':'7%',
                                                           'top':'60%',
                                                           'left':'53%',
                                                           'border-radius':10,
                                                           'fontSize':12,
                                                           'fontFamily': 'Calibri',
                                                           'text':{'size':1000000000},
                                                           'text':{
                        'family':"sans serif",
                        "size":100,
                        "color":"black"
                        }}),
            #href='/apps/output_app'
            href='http://172.26.60.130:5000/'
            ),

    html.A(html.Button(id='submit-button-2', n_clicks=0, children='Model monitoring dashboard',style={'background-color':'#87ceeb',
                                                        'foreground-color':'red',
                                                        'color':'white',
                                                        'fontSize':12,
                                                        'textAlign': 'center',
                                                        'verticalAlign':'top',
                                                        'position':'fixed',
                                                        'width':'15%',
                                                        'height':'7%',
                                                        'top':'60%',
                                                        'left':'33%',
                                                        'fontSize':12,
                                                        'fontFamily': 'Calibri',
                                                        'border-radius':10}),
        href='/apps/page1'
        #href='http://172.24.37.110:8050/dashboard/'
        ),
        html.Div(id = "summary_block")

    # dcc.Input(id='input-1-state', type='text', value='',style={'background-color':'white',
    #                                                         'foreground-color':'black',
    #                                                         'color':'black',
    #                                                         'font size':"40",
    #                                                         'textAlign': 'left',
    #                                                         'verticalAlign':'top',
    #                                                        'position':'fixed',
    #                                                        'width':'65%',
    #                                                        'height':'7%',
    #                                                        'top':'50%',
    #                                                        'left':'18%',
    #                                                        'border-radius':10}),
    # html.Button(id='submit-button', n_clicks=0, children='Get SQL',style={'background-color':'#000000',
    #                                                         #'foreground-color':'black',
    #                                                         'color':'white',
    #                                                         'textAlign': 'center',
    #                                                         'verticalAlign':'top',
    #                                                        'position':'fixed',
    #                                                        'width':'10%',
    #                                                        'height':'7%',
    #                                                        'top':'50%',
    #                                                        'left':'84%',
    #                                                        'border-radius':10}),
    # dcc.Input(id='output-state',style={'background-color':'white',
    #                                                         'foreground-color':'black',
    #                                                         'color':'black',
    #                                                         'font size':"10",
    #                                                         'textAlign': 'left',
    #                                                         'verticalAlign':'bottom',
    #                                                        'position':'fixed',
    #                                                        'width':'65%',
    #                                                        'height':'6%',
    #                                                        'top':'60%',
    #                                                        'left':'18%',
    #                                                        'border-radius':10}),


    #         ),
    # html.Div(id='dummy',style={'background-color':'transparent',
    #                         #'foreground-color':'white',
    #                         'color':'white',
    #                         #'background-image':'url(https://www.sinonimi-contrari.it/includes/images/sharers/sinonimi-di-aiuto.png)',
    #                         'textAlign': 'center',
    #                         'verticalAlign':'top',
    #                         'position':'fixed',
    #                         'width':'15%',
    #                         'height':'2.5%',
    #                         'top':'755px',
    #                         'left':'740px',}),
    # html.Div(id='output-data-upload',style={'background-color':'transparent',
    #                         #'foreground-color':'white',
    #                         'color':'black',
    #                         #'background-image':'url(https://www.sinonimi-contrari.it/includes/images/sharers/sinonimi-di-aiuto.png)',
    #                         'textAlign': 'center',
    #                         'verticalAlign':'top',
    #                         'position':'fixed',
    #                         'width':'15%',
    #                         'height':'100%',
    #                         'top':'5%',
    #                         'left':'0.5%',}),
# dcc.Link('', href='/apps/output_app'
#                         ,style={'background-color':'#87ceeb',
#                                 #'foreground-color':'white',
#                                 'color':'white',
#                                 #'background-image':'url(https://www.sinonimi-contrari.it/includes/images/sharers/sinonimi-di-aiuto.png)',
#                                 'textAlign': 'center',
#                                 'verticalAlign':'top',
#                                 'position':'fixed',
#                                 'width':'10%',
#                                 'height':'7%',
#                                 'top':'70%',
#                                 'left':'84%',})

],
style={
  'verticalAlign':'top',
 # 'background-color': '#DDDDDD',
  'background-color': 'white',
  'textAlign': 'center',
  #'background-image':'url(https://www.thestartupnetwork.co/wp-content/uploads/2018/04/AI-world-forum-background-cropped-1920x1000.jpg)',
  #'background-image':'url(https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTekKaIc_9yBNw-OQ5iUkqpm_qUa29M70G9h_yKn8LA9wlb2US75Q&s)',
  
  'position':'fixed',
  'width':'100%',
  'height':'100%',
  'top':'0px',
  'left':'0px',
  'z-index':'1000'
})


@app.callback(Output('output-state', 'value'),
              [Input('submit-button', 'n_clicks')],
              [State('input-1-state', 'value')])
def update_output(n_clicks, input1):
    pass

@app.callback(Output('dummy', 'children'),
              [Input('submit-button-2', 'n_clicks')],
              [State('output-state', 'value')])
def execute_sql(n_clicks, input1):
    pass


@app.callback(Output('output-data-upload', 'children'),
              [Input('upload-data', 'contents')],
              [State('upload-data', 'filename'),
               State('upload-data', 'last_modified')])
def update_output(list_of_contents, list_of_names, list_of_dates):
    pass


@app.callback(Output('summary_block', 'children'),
              [Input('model_selected', 'value')])
def show_summary(model_no):
    if model_no == '555555':
        return dcc.Markdown('''

        ## Executive Summary

        * Tracking is done quarterly at 3 different levels to give us a long term as well as short term indication of model performance
        *Results: Q2 UTM Tracking is rates GREEN at overall level
        * Segment level some deterioration is observed.
        * Segment 1’s KS/PSI shifts are due to a known issue,where the benchmark dataset with “very long ARF (Automated Response Format)” records (rich bureau history and FICO scores) were treated incorrectly by FICO during development
        time. The validation dataset does not have this issue.
        * Booked PSI shifts for segments 1, 2, and 3 are caused by tightening risk tolerance since the 2010 benchmark time period.
        * Segment 5's deterioration led to a deep dive in 2018 that found that 3 input attribute's had an amber rating for PSI (>10%)
        ''',style={'background-color':'#87ceeb',
                                                                'foreground-color':'red',
                                                                'color':'black',
                                                                'fontSize':12,
                                                                'textAlign': 'left',
                                                                'verticalAlign':'top',
                                                                'position':'fixed',
                                                                'width':'50%',
                                                                'height':'18%',
                                                                'top':'80%',
                                                                'left':'27%',
                                                                'border-radius':10})
    elif model_no == '803456':
        return dcc.Markdown('''

        ## Executive Summary

            * Tracking is done quarterly at 3 different levels to give us a long term as well as short term indication of model performance
        ''',style={'background-color':'#87ceeb',
                                                                'foreground-color':'red',
                                                                'color':'black',
                                                                'fontSize':12,
                                                                'textAlign': 'left',
                                                                'verticalAlign':'top',
                                                                'position':'fixed',
                                                                'width':'50%',
                                                                'height':'18%',
                                                                'top':'80%',
                                                                'left':'27%',
                                                                'border-radius':10})
    elif model_no == '111111':
        return dcc.Markdown('''

        ## Executive Summary

            * No summary available !!!!!!
        ''',style={'background-color':'#87ceeb',
                                                                'foreground-color':'red',
                                                                'color':'black',
                                                                'fontSize':12,
                                                                'textAlign': 'left',
                                                                'verticalAlign':'top',
                                                                'position':'fixed',
                                                                'width':'50%',
                                                                'height':'18%',
                                                                'top':'80%',
                                                                'left':'27%',
                                                                'border-radius':10})


#######################


#if __name__ == '__main__':
   # app.run_server(debug=True,port=5000,host='0.0.0.0')
    #app.run_server(debug=True)

import dash

#external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

app = dash.Dash(__name__
#, external_stylesheets=external_stylesheets
)
server = app.server
app.config.suppress_callback_exceptions = True


    
    



