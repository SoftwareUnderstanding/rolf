{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This code heavily uses NVIDIA's original \n[StyleGAN](https://github.com/NVlabs/stylegan) code. We accredit and acknowledge their work here. The \n[Original License](/LICENSE_ORIGINAL.txt) \nis located in the base directory (file named `LICENSE_ORIGINAL.txt`).\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "- **stylegan[official]**: https://github.com/NVlabs/stylegan\n- **pro_gan_pytorch**: https://github.com/akanimax/pro_gan_pytorch\n- **pytorch_style_gan**: https://github.com/lernapparat/lernapparat\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8209707758818588
      ],
      "excerpt": "     <a align=\"center\" href=\"https://github.com/NVlabs/ffhq-dataset\">[FFHQ Dataset](128x128)</a> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8209707758818588
      ],
      "excerpt": "     <a align=\"center\" href=\"https://github.com/NVlabs/ffhq-dataset\">[FFHQ Dataset](1024x1024)</a><br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9840846195802034
      ],
      "excerpt": "     <a align=\"center\" href=\"https://cs.nju.edu.cn/rl/WebCaricature.htm\">[WebCaricatureDataset](128x128)</a><br> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/huangzh13/StyleGAN.pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-10-17T06:18:46Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-28T11:42:02Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9882149491262743
      ],
      "excerpt": "This repository contains the unofficial PyTorch implementation of the following paper: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9944976272873034
      ],
      "excerpt": "Abstract: We propose an alternative generator architecture for generative adversarial networks, borrowing from style transfer literature. The new architecture leads to an automatically learned, unsupervised separation of high-level attributes (e.g., pose and identity when trained on human faces) and stochastic variation in the generated images (e.g., freckles, hair), and it enables intuitive, scale-specific control of the synthesis. The new generator improves the state-of-the-art in terms of traditional distribution quality metrics, leads to demonstrably better interpolation properties, and also better disentangles the latent factors of variation. To quantify interpolation quality and disentanglement, we propose two new, automated methods that are applicable to any generator architecture. Finally, we introduce a new, highly varied and high-quality dataset of human faces. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A PyTorch implementation for StyleGAN with full features.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/huangzh13/StyleGAN.pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 51,
      "date": "Tue, 28 Dec 2021 19:06:31 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/huangzh13/StyleGAN.pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "huangzh13/StyleGAN.pytorch",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.9456991743177758
      ],
      "excerpt": "     <img src=diagrams/grid.png width=100% /> <br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.802257969638364
      ],
      "excerpt": "Resume training from a checkpoint (start form 128x128): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9249258544993056
      ],
      "excerpt": "python train.py --config config/sample.yaml --start_depth 5 --generator_file [] [--gen_shadow_file] --discriminator_file [] --gen_optim_file [] --dis_optim_file [] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8962592619414831
      ],
      "excerpt": "python generate_mixing_figure.py --config config/sample.yaml --generator_file [] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8719170831490617
      ],
      "excerpt": "     <img src=diagrams/figure03-style-mixing-mix.png width=90% /> <br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9076929787493558
      ],
      "excerpt": "python generate_truncation_figure.py --config configs/sample_cari2_128_truncation.yaml --generator_file cari2_128_truncation_gen.pth \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8941104397016074
      ],
      "excerpt": "     <img src=diagrams/figure08-truncation-trick.png width=90% /> <br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9515378884290331
      ],
      "excerpt": "python convert.py --config configs/sample_ffhq_1024.yaml --input_file PATH/karras2019stylegan-ffhq-1024x1024.pkl --output_file ffhq_1024_gen.pth \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8941104397016074
      ],
      "excerpt": "     <img src=diagrams/ffhq_128.png width=90% /> <br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8941104397016074
      ],
      "excerpt": "     <img src=diagrams/ffhq_1024.png width=90% /> <br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8941104397016074
      ],
      "excerpt": "     <img src=diagrams/cari2_128.png width=90% /> <br> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/huangzh13/StyleGAN.pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "StyleGAN.pytorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "StyleGAN.pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "huangzh13",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/huangzh13/StyleGAN.pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- yacs\n- tqdm\n- numpy\n- torch\n- torchvision\n- tensorflow(Optional, for ./convert.py)\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Train from scratch:\n```shell script\npython train.py --config configs/sample.yaml\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 219,
      "date": "Tue, 28 Dec 2021 19:06:31 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "gan",
      "deep-learning",
      "pytorch",
      "pytorch-implmention",
      "stylegan",
      "pytorch-implementation",
      "gan-pytorch",
      "cvpr",
      "cvpr2019",
      "cvpr19",
      "generative-adversarial-network",
      "cv"
    ],
    "technique": "GitHub API"
  }
}