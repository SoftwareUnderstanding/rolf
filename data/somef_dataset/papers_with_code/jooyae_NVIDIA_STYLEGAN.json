{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "We thank Jaakko Lehtinen, David Luebke, and Tuomas Kynk&auml;&auml;nniemi for in-depth discussions and helpful comments; Janne Hellsten, Tero Kuosmanen, and Pekka J&auml;nis for compute infrastructure and help with the code release.\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1812.04948\n>\n> **Abstract:** *We propose an alternative generator architecture for generative adversarial networks, borrowing from style transfer literature. The new architecture leads to an automatically learned, unsupervised separation of high-level attributes (e.g., pose and identity when trained on human faces",
      "https://arxiv.org/abs/1812.04948\n- Video: https://youtu.be/kSLJriaOumA\n- Code: https://github.com/NVlabs/stylegan\n- FFHQ: https://github.com/NVlabs/ffhq-dataset\n\nAdditional material can be found on Google Drive:\n\n| Path | Description\n| :--- | :----------\n| [StyleGAN](https://drive.google.com/open?id=1uka3a1noXHAydRPRbknqwKVGODvnmUBX",
      "https://arxiv.org/abs/1512.00567",
      "https://arxiv.org/abs/1801.03924",
      "https://arxiv.org/abs/1512.00567",
      "https://arxiv.org/abs/1409.1556",
      "https://arxiv.org/abs/1801.03924",
      "https://arxiv.org/abs/1512.00567"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8334710283794773,
        0.8753150968738145
      ],
      "excerpt": "For business inquiries, please contact researchinquiries@nvidia.com<br> \nFor press and other inquiries, please contact Hector Marinez at hmarinez@nvidia.com<br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9977994744046882
      ],
      "excerpt": "Paper: https://arxiv.org/abs/1812.04948 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9092486771425272,
        0.8111036989382164
      ],
      "excerpt": "Code: https://github.com/NVlabs/stylegan \nFFHQ: https://github.com/NVlabs/ffhq-dataset \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jooyae/NVIDIASTYLEGAN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-09-24T08:55:03Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-14T01:46:44Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9771053748142442,
        0.9882372303863715
      ],
      "excerpt": "Picture: These people are not real &ndash; they were produced by our generator that allows control over different aspects of the image. \nThis repository contains the official TensorFlow implementation of the following paper: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9944976272873034
      ],
      "excerpt": "Abstract: We propose an alternative generator architecture for generative adversarial networks, borrowing from style transfer literature. The new architecture leads to an automatically learned, unsupervised separation of high-level attributes (e.g., pose and identity when trained on human faces) and stochastic variation in the generated images (e.g., freckles, hair), and it enables intuitive, scale-specific control of the synthesis. The new generator improves the state-of-the-art in terms of traditional distribution quality metrics, leads to demonstrably better interpolation properties, and also better disentangles the latent factors of variation. To quantify interpolation quality and disentanglement, we propose two new, automated methods that are applicable to any generator architecture. Finally, we introduce a new, highly varied and high-quality dataset of human faces. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9542770895207101
      ],
      "excerpt": "Material related to our paper is available via the following links: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8051988754586414
      ],
      "excerpt": "| &boxvr;&nbsp; stylegan-paper.pdf | High-quality version of the paper PDF. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8216983964400391
      ],
      "excerpt": "| &ensp;&ensp; &boxur;&nbsp; metrics | Auxiliary networks for the quality and disentanglement metrics. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8919362615671552,
        0.8412464389363853,
        0.8760296784729327
      ],
      "excerpt": "| &ensp;&ensp; &ensp;&ensp; &boxvr;&nbsp; celebahq-classifier-00-male.pkl | Binary classifier trained to detect a single attribute of CelebA-HQ. \n| &ensp;&ensp; &ensp;&ensp; &boxur;&nbsp;&#x22ef; | Please see the file listing for remaining networks. \nA minimal example of using a pre-trained StyleGAN generator is given in pretrained_example.py. When executed, the script downloads a pre-trained StyleGAN generator from Google Drive and uses it to generate an image: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.922213228298583
      ],
      "excerpt": "A more advanced example is given in generate_figures.py. The script reproduces the figures from our paper in order to illustrate style mixing, noise inputs, and truncation: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8775776390329579
      ],
      "excerpt": "    #: Gs = Long-term average of the generator. Yields higher-quality results than the instantaneous snapshot. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9651401881890899,
        0.8830907854839266
      ],
      "excerpt": "   The first argument is a batch of latent vectors of shape[num, 512]. The second argument is reserved for class labels (not used by StyleGAN). The remaining keyword arguments are optional and can be used to further modify the operation (see below). The output is a batch of images, whose format is dictated by theoutput_transform` argument. \nUse Gs.get_output_for() to incorporate the generator as a part of a larger TensorFlow expression: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9589038510961784,
        0.9627019913336683,
        0.8618246469878545
      ],
      "excerpt": "   The above code is from metrics/frechet_inception_distance.py. It generates a batch of random images and feeds them directly to the Inception-v3 network without having to convert the data to numpy arrays in between. \nLook up Gs.components.mapping and Gs.components.synthesis to access individual sub-networks of the generator. Similar to Gs, the sub-networks are represented as independent instances of dnnlib.tflib.Network: \n   src_latents = np.stack(np.random.RandomState(seed).randn(Gs.input_shape[1]) for seed in src_seeds) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9589643029001007,
        0.9029463808950026,
        0.9612225415270402
      ],
      "excerpt": "   The above code is from generate_figures.py. It first transforms a batch of latent vectors into the intermediate W space using the mapping network and then turns these vectors into a batch of images using the synthesis network. The dlatents array stores a separate copy of the same w vector for each layer of the synthesis network to facilitate style mixing. \nThe exact details of the generator are defined in training/networks_stylegan.py (see G_style, G_mapping, and G_synthesis). The following keyword arguments can be specified to modify the behavior when calling run() and get_output_for(): \ntruncation_psi and truncation_cutoff control the truncation trick that that is performed by default when using Gs (&psi;=0.7, cutoff=8). It can be disabled by setting truncation_psi=1 or is_validation=True, and the image quality can be further improved at the cost of variation by setting e.g. truncation_psi=0.5. Note that truncation is always disabled when using the sub-networks directly. The average w needed to manually perform the truncation trick can be looked up using Gs.get_var('dlatent_avg'). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979508650824699,
        0.9225017619251502
      ],
      "excerpt": "When using the mapping network directly, you can specify dlatent_broadcast=None to disable the automatic duplication of dlatents over the layers of the synthesis network. \nRuntime performance can be fine-tuned via structure='fixed' and dtype='float16'. The former disables support for progressive growing, which is not needed for a fully-trained generator, and the latter performs all computation using half-precision floating point arithmetic. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8086294239246505,
        0.9418454074084751,
        0.8409785938022337
      ],
      "excerpt": "The training may take several days (or weeks) to complete, depending on the configuration. \nBy default, train.py is configured to train the highest-quality StyleGAN (configuration F in Table 1) for the FFHQ dataset at 1024&times;1024 resolution using 8 GPUs. Please note that we have used 8 GPUs in all of our experiments. Training with fewer GPUs may not produce identical results &ndash; if you wish to compare against our technique, we strongly recommend using the same number of GPUs. \nExpected training times for the default configuration using Tesla V100 GPUs: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.806255452618748
      ],
      "excerpt": "The quality and disentanglement metrics used in our paper can be evaluated using run_metrics.py. By default, the script will evaluate the Fr&eacute;chet Inception Distance (fid50k) for the pre-trained FFHQ generator and write the results into a newly created directory under results. The exact behavior can be changed by uncommenting or editing specific lines in run_metrics.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Tensorflow, Nvidia, generator architecture, FFHQ",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jooyae/NVIDIA_STYLEGAN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sun, 26 Dec 2021 13:26:46 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jooyae/NVIDIASTYLEGAN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "jooyae/NVIDIASTYLEGAN",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The training and evaluation scripts operate on datasets stored as multi-resolution TFRecords. Each dataset is represented by a directory containing the same image data in several resolutions to enable efficient streaming. There is a separate *.tfrecords file for each resolution, and if the dataset contains labels, they are stored in a separate file as well. By default, the scripts expect to find the datasets at `datasets/<NAME>/<NAME>-<RESOLUTION>.tfrecords`. The directory can be changed by editing [config.py](./config.py):\n\n```\nresult_dir = 'results'\ndata_dir = 'datasets'\ncache_dir = 'cache'\n```\n\nTo obtain the FFHQ dataset (`datasets/ffhq`), please refer to the [Flickr-Faces-HQ repository](https://github.com/NVlabs/ffhq-dataset).\n\nTo obtain the CelebA-HQ dataset (`datasets/celebahq`), please refer to the [Progressive GAN repository](https://github.com/tkarras/progressive_growing_of_gans).\n\nTo obtain other datasets, including LSUN, please consult their corresponding project pages. The datasets can be converted to multi-resolution TFRecords using the provided [dataset_tool.py](./dataset_tool.py):\n\n```\n> python dataset_tool.py create_lsun datasets/lsun-bedroom-full ~/lsun/bedroom_lmdb --resolution 256\n> python dataset_tool.py create_lsun_wide datasets/lsun-car-512x384 ~/lsun/car_lmdb --width 512 --height 384\n> python dataset_tool.py create_lsun datasets/lsun-cat-full ~/lsun/cat_lmdb --resolution 256\n> python dataset_tool.py create_cifar10 datasets/cifar10 ~/cifar10\n> python dataset_tool.py create_from_images datasets/custom-dataset ~/custom-images\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8454484804509997,
        0.8742654372449469
      ],
      "excerpt": "Code: https://github.com/NVlabs/stylegan \nFFHQ: https://github.com/NVlabs/ffhq-dataset \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8749076941118147
      ],
      "excerpt": "| StyleGAN | Main folder. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python pretrained_example.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8060372108626078
      ],
      "excerpt": "Gs                              Params    OutputShape          WeightShape \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.853492186136904
      ],
      "excerpt": "Total                           26219627 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python generate_figures.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8737288687529231
      ],
      "excerpt": "   rnd = np.random.RandomState(5) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8179188390243047,
        0.8970261090115176
      ],
      "excerpt": "   fmt = dict(func=tflib.convert_images_to_uint8, nchw_to_nhwc=True) \n   images = Gs.run(latents, None, truncation_psi=0.7, randomize_noise=True, output_transform=fmt) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8843981688057236
      ],
      "excerpt": "   images = Gs_clone.get_output_for(latents, None, is_validation=True, randomize_noise=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8927949441196024
      ],
      "excerpt": "   src_latents = np.stack(np.random.RandomState(seed).randn(Gs.input_shape[1]) for seed in src_seeds) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9523651689170409
      ],
      "excerpt": "Run the training script with python train.py. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jooyae/NVIDIASTYLEGAN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# StyleGAN &mdash; Official TensorFlow Implementation",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "NVIDIASTYLEGAN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "jooyae",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jooyae/NVIDIASTYLEGAN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Both Linux and Windows are supported, but we strongly recommend Linux for performance and compatibility reasons.\n* 64-bit Python 3.6 installation. We recommend Anaconda3 with numpy 1.14.3 or newer.\n* TensorFlow 1.10.0 or newer with GPU support.\n* One or more high-end NVIDIA GPUs with at least 11GB of DRAM. We recommend NVIDIA DGX-1 with 8 Tesla V100 GPUs.\n* NVIDIA driver 391.35 or newer, CUDA toolkit 9.0 or newer, cuDNN 7.3.1 or newer.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sun, 26 Dec 2021 13:26:46 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "deep-learning",
      "generative-adversarial-network"
    ],
    "technique": "GitHub API"
  }
}