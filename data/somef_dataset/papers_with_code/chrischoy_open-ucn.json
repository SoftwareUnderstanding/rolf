{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2003.10071"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The Fully Convolutional Features for 2D Correspondences\n\n```\n@incollection{UCN2016,\n    title = {Universal Correspondence Network},\n    author = {Choy, Christopher B and Gwak, JunYoung and Savarese, Silvio and Chandraker, Manmohan},\n    booktitle = {Advances in Neural Information Processing Systems 29},\n    year = {2016},\n}\n```\n\nFully Convolutional Metric Learning and Hardest Contrastive Loss\n\n```\n@inproceedings{FCGF2019,\n    author = {Christopher Choy and Jaesik Park and Vladlen Koltun},\n    title = {Fully Convolutional Geometric Features},\n    booktitle = {ICCV},\n    year = {2019},\n}\n```\n\nOpen-source Pytorch Implementation\n\n```\n@misc{\n    author = {Christopher Choy and Junha Lee},\n    title = {Open Universal Correspondence Network},\n    howpublished={\\url{https://github.com/chrischoy/open-ucn}},\n    year = {2019},\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{\n    author = {Christopher Choy and Junha Lee},\n    title = {Open Universal Correspondence Network},\n    howpublished={\\url{https://github.com/chrischoy/open-ucn}},\n    year = {2019},\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{FCGF2019,\n    author = {Christopher Choy and Jaesik Park and Vladlen Koltun},\n    title = {Fully Convolutional Geometric Features},\n    booktitle = {ICCV},\n    year = {2019},\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@incollection{UCN2016,\n    title = {Universal Correspondence Network},\n    author = {Choy, Christopher B and Gwak, JunYoung and Savarese, Silvio and Chandraker, Manmohan},\n    booktitle = {Advances in Neural Information Processing Systems 29},\n    year = {2016},\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/chrischoy/open-ucn",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-10-21T22:37:40Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-11T03:51:48Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9926623503202424
      ],
      "excerpt": "This repository contains the pytorch implementation of Universal Correspondence \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8970954373967244
      ],
      "excerpt": "The UCN combines the metric learning (contrastive loss) with the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8157358653685678,
        0.9959612910582911,
        0.9493120268601793
      ],
      "excerpt": "As we are releasing this in 2019, we use a different network with pixel stride \n1 for high resolution features to push the boundary of the dense features and \nsee how far the features would go. The networks are based on Residual Networks \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9624498610198644,
        0.8975890867667505
      ],
      "excerpt": "learning instead of the contrastive loss. This allows using the O(~10k) points \nfor hardest negative mining for all positives O(1k) per single image pair. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9381139946786361,
        0.9309696431492328,
        0.8373799181918714,
        0.8233884069874119,
        0.888459376104394,
        0.993616494122061,
        0.8490037945672047
      ],
      "excerpt": "discard all intermediate computations. This is the crucial component making the \nmetric learning of a large set of points possible. \nFinally, for the ease of implementation and use, we do not use the \nconvolutional spatial transformers (Rigid, SO(2), and Thin-Plate-Spline (TPS) \npredecessor of the deformable convolution) originally proposed in the UCN. \nThe limitations of the patch based feature learning is that: First, extracting a small image patch limits the receptive field of the network but is also computationally inefficient since all intermediate representations are computed separately even for overlapping regions. Second, this allows end-to-end training as the selection process is delegated to the next stage in the pipeline. Third, limiting feature extraction to a keypoints results in lower spatial resolution for subsequent matching stages and can thus reduce registration accuracy. However, this can also results in more computation and increase complexity in discrete keypoint selection process. \nModify the arguments accordingly. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9856586475443353
      ],
      "excerpt": "features, the training only succeeds 1 out of 3 times. However, for 3D space, I \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9084994675724122
      ],
      "excerpt": "the inherent difficulty of the 2D geometric correspondences. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.837364213101127
      ],
      "excerpt": "Note: The code requires GPU with VRAM > 4G by default and would use the most computation heavy method for visualization. There are various NN search methods and try out different modes if things don't work. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.947133728904281,
        0.954502676411583,
        0.9469568705064426,
        0.8978457757655671,
        0.9428747439762254,
        0.9660154912138517
      ],
      "excerpt": "To see more visualizations, visit Youtube link. \nA fully-convolutional model generates dense features. Similar to SIFT, it is crucial to filter out some false positive matches with heuristic methods. Here, we use 1. reciprocity test and 2. stability test. \nReciprocity test simply checks whether the nearest neighbors of image 1 in image 2 fall back to the vicinity of the keypoints in image 1. The idea is that if the feature is discriminative, then it should form a cycle. \nStability test selects features that are shifted randomly by 1 pixel. The idea is that if the features are discriminative, it should be invariant to translation noise. \nFeel free to contribute to the model zoo by submitting your weights and the architecture. \nNote: The models are train only on the YFCC dataset and are not guaranteed to work on other datasets with different statistics. (e.g., white background) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "The first fully convolutional metric learning for geometric/semantic image correspondences.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/chrischoy/open-ucn/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 10,
      "date": "Fri, 24 Dec 2021 06:29:54 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/chrischoy/open-ucn/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "chrischoy/open-ucn",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/chrischoy/open-ucn/master/scripts/download_yfcc.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n#: Follow the instruction on pytorch.org to install pytorch on your environment\ngit clone https://github.com/chrischoy/open-ucn.git\ncd open-ucn\npip install -r requirements.txt\n```\n\nYFCC data download and processing\n\n```\nbash scripts/download_yfcc.sh /path/to/download/yfcc\npython -m scripts.gen_yfcc --source /path/to/download/yfcc --target /path/to/preprocessed/yfcc\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9333574343066754
      ],
      "excerpt": "python demo.py \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/chrischoy/open-ucn/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/chrischoy/open-ucn/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Chris Choy (chrischoy@ai.stanford.edu)\\n                   Junha Lee (junhakiwi@postech.ac.kr)\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of\\nthis software and associated documentation files (the \"Software\"), to deal in\\nthe Software without restriction, including without limitation the rights to\\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\nof the Software, and to permit persons to whom the Software is furnished to do\\nso, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Open Universal Correspondence Network",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "open-ucn",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "chrischoy",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/chrischoy/open-ucn/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 73,
      "date": "Fri, 24 Dec 2021 06:29:54 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "pytorch",
      "metric-learning",
      "fully-convolutional-networks",
      "correspondence",
      "image-analysis"
    ],
    "technique": "GitHub API"
  }
}