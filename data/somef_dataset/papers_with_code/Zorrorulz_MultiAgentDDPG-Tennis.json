{
  "citation": [
    {
      "confidence": [
        0.999839407020045
      ],
      "excerpt": "Please refer to https://arxiv.org/pdf/1706.02275.pdf for understanding of Multi-Agent Deep Deterministic Policy Gradient Algorithm.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9972508553966268
      ],
      "excerpt": "Source: https://arxiv.org/pdf/1706.02275.pdf \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Zorrorulz/MultiAgentDDPG-Tennis",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-04-07T18:22:15Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-04-14T17:51:56Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "For this project, the unity ML [Tennis](https://github.com/Unity-Technologies/ml-agents/blob/master/docs/Learning-Environment-Examples.md#tennis) environment is used . The agent is trained to play [Tennis](https://github.com/Unity-Technologies/ml-agents/blob/master/docs/Learning-Environment-Examples.md#tennis) \n\n\n\n[![Unity ML-Agents Tennis Environment](https://video.udacity-data.com/topher/2018/May/5af7955a_tennis/tennis.png)Unity ML-Agents Tennis Environment](https://classroom.udacity.com/nanodegrees/nd893-ent/parts/0ba70f95-986b-400c-9b2e-59366cca2a49/modules/83e3a45a-a815-4dca-82bc-c6f1b46ac8cd/lessons/c03538e3-4024-41c5-9baa-3be2d91f250c/concepts/da65c741-cdeb-4f34-bb56-d8977385596e#)\n\n\n\nIn this environment, two agents control rackets to bounce a ball over a net. If an agent hits the ball over the net, it receives a reward of +0.1. If an agent lets a ball hit the ground or hits the ball out of bounds, it receives a reward of -0.01. Thus, the goal of each agent is to keep the ball in play.\n\nThe observation space consists of 8 variables corresponding to the position and velocity of the ball and racket. Each agent receives its own, local observation. Two continuous actions are available, corresponding to movement toward (or away from) the net, and jumping.\n\nThe task is episodic, and in order to solve the environment, your agents must get an average score of +0.5 (over 100 consecutive episodes, after taking the maximum over both agents). Specifically,\n\n- After each episode, we add up the rewards that each agent received (without discounting), to get a score for each agent. This yields 2 (potentially different) scores. We then take the maximum of these 2 scores.\n- This yields a single **score** for each episode.\n\nThe environment is considered solved, when the average (over 100 episodes) of those **scores** is at least +0.5.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9914067341381132
      ],
      "excerpt": "This project was developed as part of Udacity Deep Reinforcement Learning Nanodegree course. This project solves Tennis environment by training the agent to using Multi-Agent Deep Deterministic Policy Gradient (MADDPG) algorithm. The environment is based on Unity ML agents. In this environment, two agents bounce a ball with the help of actions taken on the rackets. If an agent hits the ball, it receives a reward of +0.1. If agent does not hit the ball, it receives a reward of -0.01. The environment is considered solved if the agent can keep the ball in play and scores a reward of +0.5. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9780679019804632
      ],
      "excerpt": "MADDPG is a model free off-policy actor-critic multi-agent algorithm that learns directly from observation spaces. Agent trains itself using the local observation and decides the next best course of action, while critic evaluates the quality of the action by looking at all the observations and actions taken by other agents. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9042703931202523,
        0.916849701458555,
        0.9473112953397331
      ],
      "excerpt": "The algorithm is listed below: \nThe repository contains the below files: \nfinal_maddpg_xreplay.ipynb :  Implementation of MADDPG with experienced replay buffer. Training the  agent is implemented here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9747121349531973
      ],
      "excerpt": "Pendulum-v0 environment with Deep Deterministic Policy Gradients (DDPG) is used as reference  to build the model.  The model architecture that is used is: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8482254679938412
      ],
      "excerpt": "    Input(state size of 24) &rarr; Dense Layer(64) &rarr; RELU &rarr; Dense Layer(64) &rarr; RELU &rarr; Dense Layer( action size of 2) &rarr; TANH \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8888119459627323,
        0.9903972959886687
      ],
      "excerpt": "    Actor Local and Critic Local networks are trained and updates the Actor Target and Critic Target networks using weighting factor Tau. \nPlease refer to Report.md for more details on the model and parameters used for tuning \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Multi Agent DDPG agent implementation to train agent to play tennis.",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "http://ipython.readthedocs.io/",
      "technique": "Regular expression"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Zorrorulz/MultiAgentDDPG-Tennis/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 19:15:47 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Zorrorulz/MultiAgentDDPG-Tennis/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Zorrorulz/MultiAgentDDPG-Tennis",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Zorrorulz/MultiAgentDDPG-Tennis/master/final_maddpg_xreplay.ipynb",
      "https://raw.githubusercontent.com/Zorrorulz/MultiAgentDDPG-Tennis/master/models/final_DDPG_variant.ipynb",
      "https://raw.githubusercontent.com/Zorrorulz/MultiAgentDDPG-Tennis/master/models/maddpg_per_work_in_progress.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Unity Environment is already built and made available as part of Deep Reinforcement Learning course at Udacity.\n\n1. Download the environment from one of the links below.  You need only select the environment that matches your operating system:\n\n2. Linux: [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P3/Tennis/Tennis_Linux.zip)\n3. Mac OSX: [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P3/Tennis/Tennis.app.zip)\n4. Windows (32-bit): [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P3/Tennis/Tennis_Windows_x86.zip)\n5. Windows (64-bit): [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P3/Tennis/Tennis_Windows_x86_64.zip)\n6. Place the file in the DRLND GitHub repository, in the `p2_continuous-control/` folder, and unzip (or decompress) the file. \n\nThen, place the file in the `p3_collab-compet/` folder in the DRLND GitHub repository, and unzip (or decompress) the file.\n\n(*For Windows users*) Check out [this link](https://support.microsoft.com/en-us/help/827218/how-to-determine-whether-a-computer-is-running-a-32-bit-version-or-64) if you need help with determining if your computer is running a 32-bit version or 64-bit version of the Windows operating system.\n\n(*For AWS*) If you'd like to train the agent on AWS (and have not [enabled a virtual screen](https://github.com/Unity-Technologies/ml-agents/blob/master/docs/Training-on-Amazon-Web-Service.md)), then please use [this link](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P3/Tennis/Tennis_Linux_NoVis.zip) to obtain the \"headless\" version of the environment. You will **not** be able to watch the agent without enabling a virtual screen, but you will be able to train the agent. (*To watch the agent, you should follow the instructions to [enable a virtual screen](https://github.com/Unity-Technologies/ml-agents/blob/master/docs/Training-on-Amazon-Web-Service.md), and then download the environment for the **Linux** operating system above.*)\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "To set up your python environment to run the code in this repository, follow the instructions below.\n\n1. Create (and activate) a new environment with Python 3.6.\n\n   - **Linux** or **Mac**:\n\n   ```\n   conda create --name drlnd python=3.6\n   source activate drlnd\n   ```\n\n   - **Windows**:\n\n   ```\n   conda create --name drlnd python=3.6 \n   activate drlnd\n   ```\n\n2. Follow the instructions in [this repository](https://github.com/openai/gym) to perform a minimal install of OpenAI gym.\n\n   - Next, install the **classic control** environment group by following the instructions [here](https://github.com/openai/gym#classic-control).\n   - Then, install the **box2d** environment group by following the instructions [here](https://github.com/openai/gym#box2d).\n\n3. Clone the repository (if you haven't already!), and navigate to the `python/` folder. Then, install several dependencies.\n\n```\ngit clone https://github.com/udacity/deep-reinforcement-learning.git\ncd deep-reinforcement-learning/python\npip install .\n```\n\n1. Create an [IPython kernel](http://ipython.readthedocs.io/en/stable/install/kernel_install.html) for the `drlnd` environment.\n\n```\npython -m ipykernel install --user --name drlnd --display-name \"drlnd\"\n```\n\n1. Before running code in a notebook, change the kernel to match the `drlnd` environment by using the drop-down `Kernel` menu.\n\n[![Kernel](https://user-images.githubusercontent.com/10624937/42386929-76f671f0-8106-11e8-9376-f17da2ae852e.png)](https://user-images.githubusercontent.com/10624937/42386929-76f671f0-8106-11e8-9376-f17da2ae852e.png)\n\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8085653636812752,
        0.8085653636812752
      ],
      "excerpt": "checkpoint_actor1_xreplay.pth : Learned model weights for Agent 1 \ncheckpoint_actor2_xreplay.pth : Learned model weights for Agent 2  \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Zorrorulz/MultiAgentDDPG-Tennis/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "HTML",
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Multi-Agent Deep Deterministic Policy Gradient (MADDPG) -Tennis",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "MultiAgentDDPG-Tennis",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Zorrorulz",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Zorrorulz/MultiAgentDDPG-Tennis/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To set up your python environment to run the code in this repository, follow the instructions below.\n\n1. Create (and activate) a new environment with Python 3.6.\n\n   - **Linux** or **Mac**:\n\n   ```\n   conda create --name drlnd python=3.6\n   source activate drlnd\n   ```\n\n   - **Windows**:\n\n   ```\n   conda create --name drlnd python=3.6 \n   activate drlnd\n   ```\n\n2. Follow the instructions in [this repository](https://github.com/openai/gym) to perform a minimal install of OpenAI gym.\n\n   - Next, install the **classic control** environment group by following the instructions [here](https://github.com/openai/gym#classic-control).\n   - Then, install the **box2d** environment group by following the instructions [here](https://github.com/openai/gym#box2d).\n\n3. Clone the repository (if you haven't already!), and navigate to the `python/` folder. Then, install several dependencies.\n\n```\ngit clone https://github.com/udacity/deep-reinforcement-learning.git\ncd deep-reinforcement-learning/python\npip install .\n```\n\n1. Create an [IPython kernel](http://ipython.readthedocs.io/en/stable/install/kernel_install.html) for the `drlnd` environment.\n\n```\npython -m ipykernel install --user --name drlnd --display-name \"drlnd\"\n```\n\n1. Before running code in a notebook, change the kernel to match the `drlnd` environment by using the drop-down `Kernel` menu.\n\n[![Kernel](https://user-images.githubusercontent.com/10624937/42386929-76f671f0-8106-11e8-9376-f17da2ae852e.png)](https://user-images.githubusercontent.com/10624937/42386929-76f671f0-8106-11e8-9376-f17da2ae852e.png)\n\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 19:15:47 GMT"
    },
    "technique": "GitHub API"
  }
}