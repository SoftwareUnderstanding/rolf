{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1802.00910"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Contribute to [pytorch_geometric/examples/ppi.py](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/ppi.py)\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/shawnwang-tech/GeniePath-pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-05-29T01:37:06Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-26T12:35:17Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9864495321282323,
        0.9988224789594883
      ],
      "excerpt": "This is a PyTorch implementation of the GeniePath model in GeniePath: Graph Neural Networks with Adaptive Receptive Paths \nGeniePath, a scalable approach for learning adap- tive receptive fields of neural networks defined on permuta- tion invariant graph data. In GeniePath, we propose an adap- tive path layer consists of two complementary functions de- signed for breadth and depth exploration respectively, where the former learns the importance of different sized neighbor- hoods, while the latter extracts and filters signals aggregated from neighbors of different hops away. Our method works in both transductive and inductive settings, and extensive ex- periments compared with competitive methods show that our approaches yield state-of-the-art results on large graphs \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "This is a PyTorch implementation of the GeniePath model in <GeniePath: Graph Neural Networks with Adaptive Receptive Paths> (https://arxiv.org/abs/1802.00910)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/shawnwang-tech/GeniePath-pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 22,
      "date": "Wed, 29 Dec 2021 16:37:14 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/shawnwang-tech/GeniePath-pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "shawnwang-tech/GeniePath-pytorch",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\npip install -r requirements.txt\n#: pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8992738616058049,
        0.8992738616058049
      ],
      "excerpt": "<img src= \"https://github.com/shawnwang-tech/GeniePath-pytorch/blob/master/doc/GeniePath.png\"/> \n<img src= \"https://github.com/shawnwang-tech/GeniePath-pytorch/blob/master/doc/GeniePathLazy.png\"/> \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8880636280088927
      ],
      "excerpt": "in ppi_geniepath.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.82395093694175,
        0.82395093694175
      ],
      "excerpt": ": from model_geniepath import GeniePath as Net \nfrom model_geniepath import GeniePathLazy as Net \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/shawnwang-tech/GeniePath-pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Shuo Wang\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "GeniePath-pytorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "GeniePath-pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "shawnwang-tech",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/shawnwang-tech/GeniePath-pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- [pyG](https://github.com/rusty1s/pytorch_geometric)\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\npython ppi_geniepath.py\n```\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 83,
      "date": "Wed, 29 Dec 2021 16:37:14 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "graph-network",
      "graph-neural-network",
      "gnn",
      "convolutional-networks",
      "gcn",
      "gat",
      "pyg"
    ],
    "technique": "GitHub API"
  }
}