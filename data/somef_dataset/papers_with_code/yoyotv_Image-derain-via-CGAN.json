{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1701.05957v3 \n\n[[2]](https://arxiv.org/ftp/arxiv/papers/1810/1810.09479.pdf) Bharath Raj N., Venkateswaran N, \"Single Image Haze Removal using a Generative Adversarial Network,\" https://arxiv.org/abs/1810.09479\n \n[[3]](https://arxiv.org/pdf/1611.07004.pdf) Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, Alexei A. Efros \"Image-to-Image Translation with Conditional Adversarial Networks,\" https://arxiv.org/abs/1611.07004",
      "https://arxiv.org/abs/1810.09479\n \n[[3]](https://arxiv.org/pdf/1611.07004.pdf) Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, Alexei A. Efros \"Image-to-Image Translation with Conditional Adversarial Networks,\" https://arxiv.org/abs/1611.07004",
      "https://arxiv.org/abs/1611.07004"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[[1]](https://arxiv.org/pdf/1701.05957v3.pdf) He Zhang, Vishwanath Sindagi, Vishal M. Patel \"Image De-raining Using a Conditional Generative Adversarial Network,\" arXiv:1701.05957v3 \n\n[[2]](https://arxiv.org/ftp/arxiv/papers/1810/1810.09479.pdf) Bharath Raj N., Venkateswaran N, \"Single Image Haze Removal using a Generative Adversarial Network,\" arXiv:1810.09479\n \n[[3]](https://arxiv.org/pdf/1611.07004.pdf) Phillip Isola, Jun-Yan Zhu, Tinghui Zhou, Alexei A. Efros \"Image-to-Image Translation with Conditional Adversarial Networks,\" arXiv:1611.07004\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9030859728368266,
        0.9030859728368266,
        0.9848179726092176,
        0.9030859728368266
      ],
      "excerpt": "|1| SGD / 0.002 | Adam / 0.002 / 0.9 | 1 | 0.01 | 1 | 10 | \n|2| SGD / 0.002 | Adam / 0.0002 / 0.9 | 1 | 0.01 | 1 | 10 | \n|3| SGD / 0.002 | Adam / 0.002 / 0.5 | 1 | 0.015 | 10 | 10 | \n|4| SGD / 0.002 | Adam / 0.002 / 0.5 | 1 | 0.01 | 1 | 10 | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266,
        0.8356013927728488,
        0.8356013927728488
      ],
      "excerpt": "|10| SGD / 0.002 | Adam / 0.0002 / 0.9 | 3 | 0.015 | 15 | 20 | \n|12| SGD / 0.002 | Adam / 0.0002 / 0.9 | 1 | 0.01 | 15 | 5 | \n|12| SGD / 0.002 | Adam / 0.0002 / 0.5 | 1 | 0.01 | 15 | 5 | \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yoyotv/Image-derain-via-CGAN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-06-14T09:16:03Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-08-01T09:42:11Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8973400663976228
      ],
      "excerpt": "I want to thank gsdndeer who worked with me. We develop this repository together. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.982570484254857
      ],
      "excerpt": "Basically, we are doing the re-implementation in [1]. Although completely followed the steps described in [1], we did not get the claimed performance, so refer to [2], we apply vgg19 and using the higher level features described in [2]. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8392771600621903,
        0.9500185724482313
      ],
      "excerpt": "Using Adam optimizer will always cause the discriminator too strong, so we apply SGD in discriminator. Also, as long as the learning rate smaller than 0.002, the discriminator always overcomes the generator. \nWe tried different combinations between coefficients. It seems like the keypoint in this case is the relation between GAN,  ,VGG and Raw loss coefficient. e.g. Model 2, 13, 17, 18 result is quite good (2019.06.18). As my opinion, model 18 is the best. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9293717079377656
      ],
      "excerpt": "Label switch did wrok in this case. Furthermore, it seems like the more label switches, the better performance we could get (Performance : 5 > 10 > 20, number is the switch frequency). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8052833384285909
      ],
      "excerpt": "^From [3] equation (3), using L1 distance to be the raw and vgg loss function instead of L2 distance might improve the performance.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8639007770571488
      ],
      "excerpt": "Some other \"OK\" results we got. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9516754536110577
      ],
      "excerpt": "At first, we try to feed the discriminator only one image, so the discriminator will determine whether it is a rain image or not. The result will feed back to the generator in order to update the generator weight. But no matter how hard we tried, the generator colud not generate an \"OK\" de-raind image. So refer to some other CGAN papers, we decided to feed discriminator two images, which are the output of generator and its relevant ground truth. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Use a CGAN to remove the rain in the image.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yoyotv/Image-derain-via-CGAN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Sat, 25 Dec 2021 17:13:44 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yoyotv/Image-derain-via-CGAN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "yoyotv/Image-derain-via-CGAN",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8837680365796365
      ],
      "excerpt": "Python 2.7 \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9048374123731366,
        0.9246227682586091
      ],
      "excerpt": "Open gan_main.py and modify the training dataset path. \npython gan_main.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428,
        0.9246227682586091
      ],
      "excerpt": "Run  \npython gan_main_deploy.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8471632383263955
      ],
      "excerpt": "| Input | Output | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.901175296008794,
        0.901175296008794
      ],
      "excerpt": "|1| SGD / 0.002 | Adam / 0.002 / 0.9 | 1 | 0.01 | 1 | 10 | \n|2| SGD / 0.002 | Adam / 0.0002 / 0.9 | 1 | 0.01 | 1 | 10 | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.901175296008794,
        0.8301548116944105,
        0.8301548116944105,
        0.8183632955131763,
        0.8183632955131763,
        0.8183632955131763,
        0.8552027441061126,
        0.8598400299742428,
        0.8598400299742428
      ],
      "excerpt": "|4| SGD / 0.002 | Adam / 0.002 / 0.5 | 1 | 0.01 | 1 | 10 | \n|5| SGD / 0.002 | Adam / 0.002 / 0.9 | 1 | 0.01 | 1 | NO | \n|6| Adam / 0.002 | Adam / 0.002 / 0.9 | 1 | 0.01 | 1 | NO | \n|7| SGD / 0.0002 | Adam / 0.0002 / 0.9 | 3 | 0.015 | 15 | 20 | \n|8| SGD / 0.002 | Adam / 0.00002 / 0.9 | 3 | 0.015 | 15 | 20 | \n|9| SGD / 0.002 | Adam / 0.00001 / 0.9 | 3 | 0.015 | 15 | 20 | \n|10| SGD / 0.002 | Adam / 0.0002 / 0.9 | 3 | 0.015 | 15 | 20 | \n|12| SGD / 0.002 | Adam / 0.0002 / 0.9 | 1 | 0.01 | 15 | 5 | \n|12| SGD / 0.002 | Adam / 0.0002 / 0.5 | 1 | 0.01 | 15 | 5 | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.811854372964597
      ],
      "excerpt": "|15| SGD / 0.002 | Adam / 0.0002 / 0.5 | 0.5 | 0.012 | 40 | 5 | \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yoyotv/Image-derain-via-CGAN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 yoyotv\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Image-derain-via-CGAN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Image-derain-via-CGAN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "yoyotv",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yoyotv/Image-derain-via-CGAN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Sat, 25 Dec 2021 17:13:44 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Clone !\n```\ngit clone https://github.com/yoyotv/Image-derain-via-CGAN.git\n```\n\n2. Download the training and testing data from [here](https://drive.google.com/drive/folders/1qCHxRfTEPSm4ap90NOHOqhOcJShqP8dp). Unzip them and put under Image-derain-via-CGAN-master/code/. The dataset is provided by [1].\n\n3. Download the vgg19 pretrain model from [here](https://drive.google.com/drive/folders/1BpIqvXIq__0w6Y3hoOxxmpKFxPTj9htR). Then put it under Image-derain-via-CGAN-master/code/. The model is provided by [machrisaa](https://github.com/machrisaa/tensorflow-vgg).\n\n4. Create two empty folder named \"model\" and \"tensorboard\" in order to store the model and tensorboard files.\n\n",
      "technique": "Header extraction"
    }
  ]
}