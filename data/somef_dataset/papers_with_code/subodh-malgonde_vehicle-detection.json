{
  "citation": [
    {
      "confidence": [
        0.8090016440670298
      ],
      "excerpt": "Confidence = Pr(Object) x IOU_truth_pred.                                                      (1) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9305668685311609
      ],
      "excerpt": "Pr(Class|Object) x Pr(Object) x IOU_truth_pred = Pr(Class) x IOU_truth_pred                    (2) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/subodh-malgonde/vehicle-detection",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-03-09T03:52:57Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-06T12:59:41Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9861784335180702,
        0.8080494454756199
      ],
      "excerpt": "This repository contains code for a project I did as a part of Udacity's Self Driving Car Nano Degree Program. The goal is to write a software pipeline to detect vehicles in a video. \nThe code is available in Vehicle_Detection.ipynb. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8950992043078929
      ],
      "excerpt": "Other approaches like R-CNN use region proposal methods to first generate potential bounding boxes in an image and then run a classifier on these proposed boxes. After classification, post-processing is used to refine the bounding boxes, eliminate duplicate detections, and rescore the boxes based on other objects in the scene. These complex \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9688951496873343
      ],
      "excerpt": "In this project we will implement tiny-YOLO v1. Full details of the network, training and implementation are available in the paper - http://arxiv.org/abs/1506.02640 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9126400424233067
      ],
      "excerpt": "Confidence is defined as (Probability that the grid cell contains an object) multiplied by (Intersection over union of predicted bounding box over the ground truth). Or \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9135941299836956,
        0.8631997068337133
      ],
      "excerpt": "The (x; y) coordinates represent the center of the box relative to the bounds of the grid cell. The width \nand height are predicted relative to the whole image. Finally the confidence prediction represents the IOU between the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9887212457240531,
        0.865566112844505,
        0.8676232227347652
      ],
      "excerpt": "Input to the model is a batch of 448x448 images. So we first determine the area of interest for each image. We only consider this portion of the image for prediction, since cars won't be present all over the image, just on the roads in the lower portion of the image. Then this cropped image is resized to a 448x448 image. \nEach image pixel is normalized to have values between -1 and 1. We use simple min-max normalization to achieve this. \nI have used pre-trained weights for this project. Training is done in 2 parts \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731973886121035
      ],
      "excerpt": "The model is then converted for detection. This is done by adding 3 convolutional layers and 3 fully connected layers. The modified model is then trained on PASCAL VOC detection dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8888646775237067
      ],
      "excerpt": "The model was trained on PASCAL VOC dataset. We use S = 7, B = 2. PASCAL VOC has 20 labelled classes so C = 20. So our final prediction, for each input image, is: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9472768727869252
      ],
      "excerpt": "The structure of the 1470 length tensor is as follows: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.969170675183235
      ],
      "excerpt": "As you can see in the above image, each input image is divided into an S x S grid and for each grid cell, our model predicts B bounding boxes and C confidence scores. There is a fair amount of post-processing involved to arrive at the final bounding boxes based on the model's predictions. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8997474596053486,
        0.9559777173241077
      ],
      "excerpt": "If multiple bounding boxes, for each class overlap and have an IOU of more than 0.4 (intersecting area is 40% of union area of boxes), then we keep the box with the highest class score and reject the other box(es). \nThe predictions (x, y) for each bounding box are relative to the bounds of the grid cell and (w, h) are relative to the whole image. To compute the final bounding box coodinates we have to multiply w & h with the width & height of the portion of the image used as input for the network. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Detect vehicles in a video",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/subodh-malgonde/vehicle-detection/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 35,
      "date": "Sun, 26 Dec 2021 08:18:38 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/subodh-malgonde/vehicle-detection/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "subodh-malgonde/vehicle-detection",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/subodh-malgonde/vehicle-detection/master/Vehicle_Detection.ipynb"
    ],
    "technique": "File Exploration"
  },
  "invocation": [
    {
      "confidence": [
        0.8766112413447108
      ],
      "excerpt": "on the grid cell containing an object. We only predict one set of class probabilities per grid cell, regardless of the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8289669050403863,
        0.8251783938985137,
        0.8289669050403863
      ],
      "excerpt": "output tensor length = S x S x (B x 5 + C) \noutput tensor length = 7 x 7 x (2x5 + 20) \noutput tensor length = 1470. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8171573620431611,
        0.8105657994829848,
        0.8029825812663337
      ],
      "excerpt": "First 980 values corresponds to probabilities for each of the 20 classes for each grid cell. These probabilities are conditioned on objects being present in each grid cell. \nThe next 98 values are confidence scores for 2 bounding boxes predicted by each grid cells. \nThe next 392 values are co-ordinates (x, y, w, h) for 2 bounding boxes per grid cell. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8644951599650731
      ],
      "excerpt": "We reject output from grid cells below a certain threshold (0.2) of class scores (equation 2), computed at test time. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/subodh-malgonde/vehicle-detection/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Vehicle Detection",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "vehicle-detection",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "subodh-malgonde",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/subodh-malgonde/vehicle-detection/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 81,
      "date": "Sun, 26 Dec 2021 08:18:38 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "deep-learning",
      "yolov1-keras",
      "yolov1",
      "yolo",
      "convolutional-neural-networks",
      "vehicle-detection",
      "self-driving-car"
    ],
    "technique": "GitHub API"
  }
}