{
  "citation": [
    {
      "confidence": [
        0.8654671031158477
      ],
      "excerpt": "GSOC project 2019 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.952521919462288
      ],
      "excerpt": "independent github code: https://github.com/backSpace001/poor_man_rekognition \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9891073703441664,
        0.959546310417776,
        0.9146894306581498
      ],
      "excerpt": "2.Facial recognition of a video using deep metric learning - - completed \ud83d\udc4d \n3.Celebrity Recognition - - completed \ud83d\udc4d \n4.Object Detection - - completed \ud83d\udc4d \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8654671031158477
      ],
      "excerpt": "6.Facial Analysis - - completed \ud83d\udc4d \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8109194328925066
      ],
      "excerpt": "7.Scene Detection - - completed \ud83d\udc4d \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8268403266817839
      ],
      "excerpt": "Pickle : For serializing and de-serializing Python object structures \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9086180918996994
      ],
      "excerpt": "        Open http://127.0.0.1:5000/ in your browser \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9836179740804603
      ],
      "excerpt": "2.Facial Recognition \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9513750386240664
      ],
      "excerpt": "Facial Recognition via Deep metric learning involves \u201ctriplet training step\u201d \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.959546310417776
      ],
      "excerpt": "3.Celebrity Recognition \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9146894306581498
      ],
      "excerpt": "4.Object detection \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9836179740804603,
        0.8836323178216633,
        0.8109194328925066,
        0.8592871015078041
      ],
      "excerpt": "6.Facial expression recognition \nhttps://medium.com/@b216029/report-3-494b2fdbb179  (refer this for this part) \n7.Scene detection \nCitation - www.algorithmia.com \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9708746910784417
      ],
      "excerpt": "2.Go to your profile page, click the Credentials tab, and find your API key. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/backSpace001/PMR_WEB_APP1.0",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-07-31T11:12:50Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-08-22T12:12:06Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8081549812323592
      ],
      "excerpt": "Building a free version of Amazon rekognition with maximum possible feature during a 3 months\u2019 time span. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8257355840948595
      ],
      "excerpt": "2.Facial recognition of a video using deep metric learning - - completed \ud83d\udc4d \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8773914832592056
      ],
      "excerpt": "Libraries required: (requirement.txt is already available in the repository)  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8017465673840206,
        0.8700454419065717
      ],
      "excerpt": "Keras : For importing neural network models  \nTensorflow : For CNN\u2019s architecture and training \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8561096481033085
      ],
      "excerpt": "    (note-it is very big so couldn't upload it in the github) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9637124377077839,
        0.989655944353862,
        0.8540388761383025,
        0.9732928863102717
      ],
      "excerpt": "OpenCV comes with a trainer as well as a detector. Here I have used OpenCV for detection and later in the project, I will use it to create an XML file of faces for Face recognition. OpenCV already contains many pre-trained classifiers for face, eyes, smiles, etc. Those XML files are stored in the Library/etc/haarcascades. In this part, I have used face cascade and eye cascade to detect face and eyes in an image. OpenCV uses a machine learning algorithm and it contains pre-trained cascade XML files which can detect a face, eyes, etc. This basically breaks the image into pixels and form blocks, it does a very rough and quick test. If that passes, it does a slightly more detailed test, and so on. The algorithm may have 30 to 50 of these stages or cascades, and it will only detect a face if all stages pass. \nThis technique works on the Viola-Jones Algorithm, which is a part of deep learning. This statement was said on the context of:- deep learning is a class of machine learning algorithm that learns in supervised (e.g., classification) and/or unsupervised (e.g., pattern analysis) manners. \nThis part of face detection is also used in facial recognition section and there I will use this the file as an unrecognized file to be saved in the database and to be used as another face with no name registered. \nExample rectangle features shown relative to the enclosing detection window. The sum of the pixels which lie within the white rectangles is subtracted from the sum of pixels in the grey rectangles. Two-rectangle features are shown in (A) and (B). Figure \u00a9 shows a three-rectangle feature, and (D) a four-rectangle feature. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9527360137109165
      ],
      "excerpt": "I have used Deep Learning face recognition embedding. Here I am using deep learning and this technique is called deep metric learning.In deep learning typically a network is trained to: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9891698373525691
      ],
      "excerpt": "However, deep metric learning is different. Instead, of trying to output a single label (or even the coordinates/bounding box of objects in an image), instead of outputting a real-valued feature vector. For the dlib facial recognition network, the output feature vector is 128-d (i.e., a list of 128 real-valued numbers) that is used to quantify the face. Training the network is done using triplets: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9902035767733475,
        0.8231642462992311
      ],
      "excerpt": "This part is same as the above one the only reason I made it a different sector is because this feature is listed in Amazon\u2019s rekognition project and as this is a similar project I have to add this additional name tag and create a whole new dataset consisting of many known actors. \nHere I have also used deep metric learning techniques. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9874346286244889,
        0.9368576666966936
      ],
      "excerpt": "Object Detection is the process of finding real-world object instances like car, bike, TV, flowers, and humans in still images or Videos. It allows for the recognition, localization, and detection of multiple objects within an image which provides us with a much better understanding of an image as a whole. It is commonly used in applications such as image retrieval, security, surveillance, and advanced driver assistance systems (ADAS). \nI have performed this using YOLOv2 on an image and a video file. You only look once (YOLO) is a state-of-the-art, real-time object detection system. On a Titan X, it processes images at 40\u201390 FPS and has an mAP on VOC 2007 of 78.6% and an mAP of 48.1% on COCO test-dev. One can find all the details about YOLOv2 here: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.993822322523654
      ],
      "excerpt": "Extraction of text from an image is a subpart of image processing and is called OPTICAL CHARACTER RECOGNITION (OCR). I have used Tesseract which is an OCR engine developed by Google. It supports Unicode and has the ability to recognize more than 100 languages. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8488249000240715,
        0.9544560799748677,
        0.962284077215415
      ],
      "excerpt": "I have coded to implement my part so as to perform the task, all the data will be provided by algorithmia and can be seen in the algorithmia website itself. My code will mere be a bridge.  \n[note-this part is not included in the web app because of some complexity] \nScene detection is used for detecting transitions between shots in a video to split it into basic temporal segments. It helps video editors to automate the process of quickly splitting videos in bulk rather than editing it frame by frame by hand. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/backSpace001/PMR_WEB_APP1.0/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 18:26:37 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/backSpace001/PMR_WEB_APP1.0/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "backSpace001/PMR_WEB_APP1.0",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8002472882121324
      ],
      "excerpt": "OpenCV: For using cascade files \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8505119555152794
      ],
      "excerpt": "Cython :  To generate CPython extension modules \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.944216536609695
      ],
      "excerpt": "        Download or clone this repo. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8002050194033901,
        0.9979947896609701
      ],
      "excerpt": "        Get the requirments by typing in the command. \n        pip install -r requirements.txt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8533036997920794
      ],
      "excerpt": "        You are good to go. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9996402727472871
      ],
      "excerpt": "4.Install the Python Algorithmia client using the command \u201cpip install algorithmia\u201c. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8963102856382322
      ],
      "excerpt": "5.Read text in images - - completed  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8620330573281225
      ],
      "excerpt": "        RUN $python app.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8676128652939313
      ],
      "excerpt": "I have first created a database for the training set and encoded (128-d) each face image into a numpy array and turn it into an XML file. Second I have imported that trained XML file into the main script to detect and recognize a face. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8963102856382322
      ],
      "excerpt": "5.Read text in images \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/backSpace001/PMR_WEB_APP1.0/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "HTML",
      "CSS"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "PMR_WEB_APP1.0",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "PMR_WEB_APP1.0",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "backSpace001",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/backSpace001/PMR_WEB_APP1.0/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 18:26:37 GMT"
    },
    "technique": "GitHub API"
  }
}