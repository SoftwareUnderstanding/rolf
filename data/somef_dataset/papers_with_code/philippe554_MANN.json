{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1410.5401\n\n### Differentiable Neural Computer\n\nAdd a read and write head to the MANN (Where the second parameter defines the amount of reading heads",
      "https://arxiv.org/abs/1605.06065\n"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9999741033574142
      ],
      "excerpt": "Alex Graves et Al. Neural Turing Machine. 2014. https://arxiv.org/abs/1410.5401 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.91077322508421
      ],
      "excerpt": "Alex Graves et Al. Hybrid computing using a neural network with dynamic external memory. 2016. https://www.nature.com/articles/nature20101 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/philippe554/MANN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-12-12T10:43:12Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-04-15T02:50:37Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9430425418150542,
        0.8868180694242475,
        0.8868180694242475
      ],
      "excerpt": "This package allows you to make a custom Memory Augmented Neural Network (MANN) by combining different architectures proposed by different papers. It is fully modular, and can be added to any other RNN in Tensorflow. \n3 types of contollers \n2 types of heads \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8147317813459374
      ],
      "excerpt": "compatible with batch training \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9748001912364213
      ],
      "excerpt": "UML Diagram of the code \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9630406722761056
      ],
      "excerpt": "This head is based on the paper: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8777450062612366
      ],
      "excerpt": "Add a read and write head to the MANN (Where the second parameter defines the amount of reading heads): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9630406722761056
      ],
      "excerpt": "This head is based on the paper: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8196657065506153
      ],
      "excerpt": "This head is still in development \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9630406722761056
      ],
      "excerpt": "This head is based on the paper: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Neural Turing Machine",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/philippe554/MANN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Thu, 23 Dec 2021 07:24:51 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/philippe554/MANN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "philippe554/MANN",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The model is setup ready to run, no need to change anything. Run the main.py file to start training. The next paragraph explains what can be changed if needed.\n\nFirst define a MANN in the main.py file as follows (Multiple controllers are put in series, multiple heads are put in parallel):\n\n```\ncell = mann.MANNUnit(\"L1MANN\")\ncell.addMemory(mann.BasicMemory(\"M1\", 20, 12))\ncell.addController(mann.FFCell(\"Controller1\", 32))\ncell.addHead(mann.DNCHead(\"Head1\", 1))\n```\n\nNext create a Generator, this is a class that generates training data and contains the corrosponding settings for the network (Input/output size, entropy, ...)\n\n```\ngenerator = mann.Copy(10,8)\n```\n\nNext define your hyper parameters, default ones are fine in most cases\n\n```\nTrainSetSize = 10000\nTestSetSize = 1000\nBatchSize = 100\nTrainSteps = 100\n```\n\nFinnaly define your optimizer\n\n```\noptimizer = tf.train.RMSPropOptimizer(0.001)\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8993306542362546
      ],
      "excerpt": "generate random toy data to train a model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8018969315242468
      ],
      "excerpt": "Add a read and write head to the MANN: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8018969315242468
      ],
      "excerpt": "Add a read and write head to the MANN: \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/philippe554/MANN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Memory Augmented Neural Network",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "MANN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "philippe554",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/philippe554/MANN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 12,
      "date": "Thu, 23 Dec 2021 07:24:51 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Packages needed:\n\n* Python 3 \n* Numpy\n* Tensorflow\n\nImport this package:\n\n```\nimport mann\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "First define a MANN as describes above, next make a layer:\n\n```\ny = cell.build(x, mask, outputSize)\n```\n\nwhere\n\n* x: the input of the layer with size (BatchSize, len(mask), ?)\n* mask: determains which time steps are used to create the output (See example below)\n* outputSize: the size of the last dimention of the output\n* y: the output of the layer with size (BatchSize, amount of ones in mask, outputSize)\n\nNote: there has not yet been a non linearity applied to y\n\nExample on the mask parameter:\n\nIf mask is\n\n```\nmask = [0,0,0,1,1,1]\n```\n\nThen your input tensor has 6 time steps, and your output tensor has 3 timesteps. The last 3 outputs of the RNN/MANN are used to make the y\n\n",
      "technique": "Header extraction"
    }
  ]
}