{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "spaGO is a personal project that is part of the open-source [NLP Odyssey](https://github.com/nlpodyssey) initiative\ninitiated by members of the EXOP team. I would therefore like to thank [EXOP GmbH](https://www.exop-group.com/en/) here,\nwhich is providing full support for development by promoting the project and giving it increasing importance.\n\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1908.07442"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.959546310417776
      ],
      "excerpt": "  e.g. Named Entities Recognition) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8714162992508173
      ],
      "excerpt": "Machine Translation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8109194328925066
      ],
      "excerpt": "Attention mechanisms (Self-Attention, Multi-Head Attention, ...) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8714162992508173,
        0.959546310417776
      ],
      "excerpt": "Machine Translation \nNamed Entities Recognition \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9800194485988594
      ],
      "excerpt": "You may find a Feature Source Tree useful for a \n",
      "technique": "Supervised classification"
    }
  ],
  "codeOfConduct": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://raw.githubusercontent.com/nlpodyssey/spago/main/CODE_OF_CONDUCT.md",
    "technique": "File Exploration"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nlpodyssey/spago",
    "technique": "GitHub API"
  },
  "contact": [
    {
      "confidence": [
        1
      ],
      "excerpt": "We encourage you to write an issue. This would help the community grow.\n\nIf you really want to write to us privately, please email [Matteo Grella](mailto:matteogrella@gmail.com) with your\nquestions or comments.\n\n",
      "technique": "Header extraction"
    }
  ],
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing Guidelines\nWe're glad you're thinking about contributing to spaGO! If you think something is missing or could be improved, please open issues and pull requests. If you'd like to help this project grow, we'd love to have you! To start contributing, checking issues tagged as \"good-first-issue\" is a good start!\nBranching\nThe preferred flow is to fork the project, create branches in your fork, and submit PRs from your forked branch.\nRequirements\n\nGo 1.15\nGo Modules\n\nAPI Development\nSetup\nSet the desired environment variable, for example:\nconsole\nexport GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport GOBIN=$GOPATH/bin\nexport PATH=$PATH:$GOROOT:$GOPATH:$GOBIN\nInstall the following tools like this, if you haven't already.\nconsole\nbrew install protobuf\ngo get -u google.golang.org/protobuf/proto\ngo get -u google.golang.org/protobuf/protoc-gen-go\ngo get -u google.golang.org/grpc\nconsole\ngo install \\\n    google.golang.org/protobuf/cmd/protoc-gen-go \\\n    google.golang.org/grpc/cmd/protoc-gen-go-grpc\nGenerate API source\nAfter changing the gRPC protobuf specification, run go generate ./... from the top-level folder.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-01-05T20:39:29Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-24T02:48:06Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8075331406717821,
        0.8460682990424768
      ],
      "excerpt": "Character Language Models \nRecurrent Sequence Labeler with CRF on top ( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9106050150634234
      ],
      "excerpt": "Masked Language Model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9354572018154989
      ],
      "excerpt": "Define-and-Run (similar to the static graph of TensorFlow) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9659742621766235
      ],
      "excerpt": "spaGO is compatible with pre-trained state-of-the-art neural models: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9106050150634234
      ],
      "excerpt": "Masked Language Model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8214344703204863
      ],
      "excerpt": "The Docker image can be built like this. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8299154308399809
      ],
      "excerpt": "You can access the core functionality of spaGO, i.e. optimizing mathematical expressions by back-propagating gradients \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9852364827167162,
        0.8581140810247833,
        0.8628895911279713
      ],
      "excerpt": "To get started, look at the implementation of built-in neural models, such as \nthe LSTM. Don't be afraid, it is \nstraightforward Go code. The idea is that you could have written spaGO :) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8886002411150898,
        0.9153293660334874
      ],
      "excerpt": "There is also a repo with handy examples, such as MNIST classification. \nWe're not at a v1.0.0 yet, so spaGO is currently work-in-progress. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.80301115655349
      ],
      "excerpt": "Early adopters may make use of it for production use today as long as they understand and accept that spaGO is not fully \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8904840601407201
      ],
      "excerpt": "Sadly, at the moment, spaGO is not GPU friendly by design. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8467636375998577
      ],
      "excerpt": "open issues and pull requests. If you'd like to help this project grow, we'd love to have you! \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490037945672047,
        0.8547934131706273
      ],
      "excerpt": "the Contributing Guidelines. \nBelow is a list of known projects that use spaGO: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9732069994583706,
        0.8699448447096292
      ],
      "excerpt": "  of \"TabNet: Attentive Interpretable Tabular Learning\". \nWhatsNew - A simple tool to collect and process quite a few web \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9243777463473833,
        0.9629962971611608
      ],
      "excerpt": "We appreciate contributions of all kinds. We especially want to thank spaGO fiscal sponsors who contribute to ongoing \nproject maintenance. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Self-contained Machine Learning and Natural Language Processing library in Go",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nlpodyssey/spago/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 52,
      "date": "Fri, 24 Dec 2021 10:32:19 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/nlpodyssey/spago/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "nlpodyssey/spago",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/nlpodyssey/spago/main/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/nlpodyssey/spago/main/change-float-type.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9128132583843894
      ],
      "excerpt": "Define-by-Run (default, just like PyTorch does) \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8359299706379749
      ],
      "excerpt": "Text Similarity \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8099872927556558
      ],
      "excerpt": "docker build -t spago:main . -f Dockerfile \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/nlpodyssey/spago/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Go",
      "Assembly",
      "Dockerfile",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "BSD 2-Clause \"Simplified\" License",
      "url": "https://api.github.com/licenses/bsd-2-clause"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Copyright \\xc2\\xa92013 The Gonum Authors. All rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met:\\n    * Redistributions of source code must retain the above copyright\\n      notice, this list of conditions and the following disclaimer.\\n    * Redistributions in binary form must reproduce the above copyright\\n      notice, this list of conditions and the following disclaimer in the\\n      documentation and/or other materials provided with the distribution.\\n    * Neither the name of the Gonum project nor the names of its authors and\\n      contributors may be used to endorse or promote products derived from this\\n      software without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Features",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "spago",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "nlpodyssey",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nlpodyssey/spago/blob/main/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "marco-nicola",
        "body": "### Added\r\n- New package `ml/ag/encoding/dot`, for simple serialization of a Graph to \r\n  DOT (Graphviz) format.\r\n- New package `ml/nn/sgu`, implementing a Spatial Gating Unit (SGU) model.\r\n- New package `ml/nn/conv1x1`, implementing a simple 1-dimensional\r\n  1-sized-kernel convolution model.\r\n- New package `ml/nn/gmlp`, implementing a [gMLP](https://arxiv.org/pdf/2105.08050.pdf)\r\n  model.\r\n\r\n### Changed\r\n- `ml/nn/activation/Model.Forward` now simply returns the input as it is if\r\n  the activation function is the identity.\r\n",
        "dateCreated": "2021-05-24T14:55:24Z",
        "datePublished": "2021-05-24T14:57:46Z",
        "html_url": "https://github.com/nlpodyssey/spago/releases/tag/v0.7.0",
        "name": "",
        "tag_name": "v0.7.0",
        "tarball_url": "https://api.github.com/repos/nlpodyssey/spago/tarball/v0.7.0",
        "url": "https://api.github.com/repos/nlpodyssey/spago/releases/43470229",
        "zipball_url": "https://api.github.com/repos/nlpodyssey/spago/zipball/v0.7.0"
      },
      {
        "authorType": "User",
        "author_name": "marco-nicola",
        "body": "### Added\r\n- `ml/losses.WeightedCrossEntropy()`\r\n- `ml/losses.FocalLoss()`\r\n- `ml/losses.WeightedFocalLoss()`\r\n- `nlp/sequencelabeler.LoadModel()` (it replaces `Load()` and `LoadEmbeddings()`)\r\n- `nlp/charlm.LoadModel()`\r\n- `nlp/transformers/bert.Model.PredictMLM()`\r\n- `nlp/transformers/bart/tasks` package\r\n- `nlp/transformers/bert.Model.Vectorize()`\r\n- `ml/ag.Graph.Nodes()` and `ml/ag.Nodes()`\r\n- `ml/nn.Model.Close()`\r\n- `ml/nn.ReifyForTraining()` and `ml/nn.ReifyForInference()`\r\n- `ml/ag.Graph.Backward()` now panics if it is executed with nodes belonging to\r\n  different graphs.\r\n- The new `ml/graphviz` package allows exporting a Graph to [Graphviz](https://graphviz.org/)\r\n  [DOT](https://graphviz.org/pdf/dotguide.pdf) format. To make it possible,\r\n  we introduced a new go-mod dependency [gographviz](https://github.com/awalterschulze/gographviz).\r\n- A custom name can be optionally set to a Graph's Variables. This can be\r\n  useful for debugging purposes and visual graph representation.\r\n  You can now use `Graph.NewVariableWithName()` and `Graph.NewScalarWithName()`\r\n  to create named Variables, and get the name of a Variable with\r\n  `Variable.Name()`.\r\n\r\n### Changed\r\n- All `UnaryElementwise` functions provided by the package `ag/fn` have been\r\n  promoted to separate dedicated structs. This improves debuggability and you\r\n  can get appropriate function names when using reflection. Here is the full\r\n  list of the modified functions: `Tan`, `Tanh`, `Sigmoid`, `HardSigmoid`,\r\n  `HardTanh`, `ReLU`, `Softsign`, `Cos`, `Sin`, `Exp`, `Log`, `Neg`,\r\n  `Reciprocal`, `Abs`, `Mish`, `GELU`, `Sqrt`, `Swish`.\r\n  For the same reason, a dedicated `Square` function is introduced, replacing\r\n  `Prod` with both operands set to the same value.\r\n- `ml/ag` types `Operator`, `Variable`, `Wrapper` are now public.\r\n- `ml/nn.Reify()` now expects a Graph and a Processing Mode arguments\r\n  instead of a `Context` object (removed).\r\n- `ml/nn.BaseModel` has been modified, replacing the field `Ctx Context` with\r\n  a direct reference to the model's Graph and the Processing Mode (fields `G`\r\n  and `ProcessingMode`).\r\n- Refactoring server implementation of `nlp/sequencelabeler`,\r\n  `nlp/transformers/bert`, and `nlp/transformers/bart`.\r\n- Upgrade various dependencies.\r\n- Regenerate protocol buffers files (with `protoc-gen-go` v1.26.0 and\r\n  `protoc` v3.16.0).\r\n\r\n### Removed\r\n- `nlp/sequencelabeler.Load()` and `LoadEmbeddings()` (now replaced by\r\n  `nlp/sequencelabeler.LoadModel()`)\r\n- `ml/nn.Context` (see related changes on `Reify()` and `BaseModel`)\r\n",
        "dateCreated": "2021-05-13T20:12:25Z",
        "datePublished": "2021-05-13T20:13:37Z",
        "html_url": "https://github.com/nlpodyssey/spago/releases/tag/v0.6.0",
        "name": "",
        "tag_name": "v0.6.0",
        "tarball_url": "https://api.github.com/repos/nlpodyssey/spago/tarball/v0.6.0",
        "url": "https://api.github.com/repos/nlpodyssey/spago/releases/42924132",
        "zipball_url": "https://api.github.com/repos/nlpodyssey/spago/zipball/v0.6.0"
      },
      {
        "authorType": "User",
        "author_name": "matteo-grella",
        "body": "### Added\r\n\r\n- Handle multiple BERT pooling strategies (i.e. `CLS_TOKEN`, `REDUCE_MEAN`, `REDUCE_MAX`) in `nlp.transformers.bert.server_encode.go`.\r\n",
        "dateCreated": "2021-03-16T06:55:05Z",
        "datePublished": "2021-03-16T06:59:17Z",
        "html_url": "https://github.com/nlpodyssey/spago/releases/tag/v0.5.2",
        "name": "v0.5.2",
        "tag_name": "v0.5.2",
        "tarball_url": "https://api.github.com/repos/nlpodyssey/spago/tarball/v0.5.2",
        "url": "https://api.github.com/repos/nlpodyssey/spago/releases/39859610",
        "zipball_url": "https://api.github.com/repos/nlpodyssey/spago/zipball/v0.5.2"
      },
      {
        "authorType": "User",
        "author_name": "matteo-grella",
        "body": "### Added\r\n\r\n- Add `nlp.charlm.flair_converter.go` to import [Flair character language models](https://github.com/flairNLP/flair/issues/614).\r\n\r\n### Changed\r\n\r\n- Improve `nlp.transformer.generation` algorithms:\r\n  - optimize `Generator.getTopKScoredTokens()`.\r\n  - optimize `Generator.updateTokensScores()`.\r\n- Simplify `mat32.Dense.Mul` when doing Matrix-Vector multiplication.\r\n- Refactor `math32` functions using [chewxy/math32](https://github.com/chewxy/math32) functions.\r\n- Improve `ag.Graph` efficiency:\r\n  - Use pre-computed cache doing `ag.Graph.groupNodesByHeight()`.\r\n  - Use `sync.pool` to reduce allocations of graph's operators.\r\n\r\n### Fixed\r\n\r\n- Fix past key-values usage on self-attention and cross-attention\r\n",
        "dateCreated": "2021-03-07T18:38:21Z",
        "datePublished": "2021-03-07T18:41:02Z",
        "html_url": "https://github.com/nlpodyssey/spago/releases/tag/v0.5.1",
        "name": "v0.5.1",
        "tag_name": "v0.5.1",
        "tarball_url": "https://api.github.com/repos/nlpodyssey/spago/tarball/v0.5.1",
        "url": "https://api.github.com/repos/nlpodyssey/spago/releases/39400913",
        "zipball_url": "https://api.github.com/repos/nlpodyssey/spago/zipball/v0.5.1"
      },
      {
        "authorType": "User",
        "author_name": "matteo-grella",
        "body": "### Added\r\n\r\n- Implement a beam-search algorithm for conditional generation:\r\n  - `nlp.transformer.generation` package.\r\n- Add implementation of the Sentence-Piece tokenizer:\r\n  - `nlp.tokenizers.sentencepiece` package.\r\n- BART improvements:\r\n  - gRPC and HTTP API to perform Text Generation.\r\n  - Add support for \"Marian\" architecture (used for translation tasks).\r\n  - Add sinusoidal positional encoder (used by Marian).\r\n  - Add \"head\" for conditional generation:\r\n    - `nlp.transformers.bart.head.conditionalgeneration` package.\r\n- Add `nn.Closer` interface (e.g. `embeddings.Model` needs to close the underlying key-value store).\r\n- Add Swish act. function without trainable parameters.\r\n- Add SiLU act. function (it is just an alias for Swish).\r\n- New `pe.SinusoidalPositionalEncoder` (this implementation replaces unused `pe.PositionalEncoder` and `pe.AxialPositionalEncoder`)\r\n\r\n### Changed\r\n\r\n- Update urfave/cli to v2.\r\n- Update dgraph-io/badger to v3.\r\n- Make the BART positional encoder an interface to support various encoding (i.e. trainable vs static).\r\n- Rename to `fn.NewSwish` into `fn.NewSwishB` as this was the Swish variant with trainable parameters (*B*).\r\n- Relax `ag.GetOpName` to match operator names in lower-case.\r\n- Allow arbitrary activation function on BART encoder/decoder layers.\r\n- Use precomputed \"keys\" and \"values\" in self-attention, multi-head attention and BART decoder.\r\n\r\n### Removed\r\n\r\n- In relation to the aforementioned positional encoding changes:\r\n  - `pe.PositionalEncoder` and related functions\r\n  - `pe.AxialPositionalEncoder` and related functions\r\n\r\n### Fixed\r\n\r\n- Fix causal-mask used by `nn.ScaledDotProductAttention`",
        "dateCreated": "2021-02-15T15:49:47Z",
        "datePublished": "2021-02-15T15:52:42Z",
        "html_url": "https://github.com/nlpodyssey/spago/releases/tag/v0.5.0",
        "name": "v0.5.0",
        "tag_name": "v0.5.0",
        "tarball_url": "https://api.github.com/repos/nlpodyssey/spago/tarball/v0.5.0",
        "url": "https://api.github.com/repos/nlpodyssey/spago/releases/38068058",
        "zipball_url": "https://api.github.com/repos/nlpodyssey/spago/zipball/v0.5.0"
      },
      {
        "authorType": "User",
        "author_name": "matteo-grella",
        "body": "### Added\r\n\r\n- New function `ReleaseMatrix` to packages `mat32` and `mat64`.\r\n- New methods to `Matrix` interface, from `mat32` and `mat64`: `Minimum`, `Maximum`, `MulT`, `Inverse`, `DoNonZero`. However, the implementation on sparse matrices is not implemented yet (it always panics).\r\n\r\n### Changed\r\n\r\n- Prefer handling `Matrix` interface values over specific `Dense` or `Sparse` matrices, also avoiding unnecessary type casts. Relevant changes to the public API are listed below.\r\n  - `mat(32|64).Stack` function's arguments and returned value are now `Matrix` interfaces, instead of explicit `Dense` matrices.\r\n  - `Dense.Minimum` and `Dense.Maximum`, from packages `mat32` and `mat64`, return a `Matrix` interface, instead of a specific `Dense` type.\r\n  - The return values of `fofe.EncodeDense`, `fofe.Encode`, and `fofe.BiEncode` are slices of `Matrix` values, instead of `Dense` or `Sparse`.\r\n  - The `z` argument of the function `fofe.Decode` is of type `Matrix`, instead of `Dense`.\r\n  - `ml.optimizers.de` (Differential Evolution optimizer) API was changed handling `Matrix` values, instead of specific `Dense` matrices. Changes include: `Member.TargetVector`, `Member.DonorVector`, `ScoredVector.Vector`, the `vector` argument of `NewMember` function, the `solution` argument of `score` and `validate` functions passed to `NewOptimizer`.\r\n  - `PositionalEncoder.Cache` and `AxialPositionalEncoder.Cache` are slices of `Matrix`, instead of slices of `Dense`.\r\n  - `AxialPositionalEncoder.EncodingAt` returns a `Matrix` value, instead of `Dense`.\r\n  - `nn.DumpParamsVector` returns a `Matrix` value, instead of `Dense`.\r\n  - The `vector` argument of the function `nn.LoadParamsVector` is a `Matrix`, instead of `Dense`.\r\n  - The `value` argument of the method `embeddings.Model.SetEmbedding` is of type `Matrix`, instead of `Dense`.\r\n  - The type of the struct field `evolvingembeddings.WordVectorPair.Vector` is `Matrix`, instead of `Dense`.",
        "dateCreated": "2021-01-22T10:45:45Z",
        "datePublished": "2021-01-22T10:50:51Z",
        "html_url": "https://github.com/nlpodyssey/spago/releases/tag/v0.4.1",
        "name": "v0.4.1",
        "tag_name": "v0.4.1",
        "tarball_url": "https://api.github.com/repos/nlpodyssey/spago/tarball/v0.4.1",
        "url": "https://api.github.com/repos/nlpodyssey/spago/releases/36761507",
        "zipball_url": "https://api.github.com/repos/nlpodyssey/spago/zipball/v0.4.1"
      },
      {
        "authorType": "User",
        "author_name": "matteo-grella",
        "body": "### Added\r\n\r\n- Various new test cases (improving the coverage).\r\n- `nlp.embeddings.syncmap` package.\r\n- `ml.nn.recurrent.srnn.BiModel` which implements a bidirectional variant of the Shuffling Recurrent Neural Networks (SRNN).\r\n- Configurable timeout and request limit to all HTTP and gRPC servers (see also commands help).\r\n\r\n### Changed\r\n\r\n- All CLI commands implementation has been refactored, so that the `docker-entrypoint` can reuse all other `cli.App` objects, instead of just running separate executables. By extension, now the Dockerfile builds a single executable file, and the final image is way smaller.\r\n- All dependencies have been upgraded to the latest version.\r\n- Simplify custom error definitions using `fmt.Errorf` instead of functions from `github.com/pkg/errors`.\r\n- Custom binary data serialization of matrices and models is now achieved with Go's `encoding.gob`. Many specific functions and methods are now replaced by fewer and simpler encoding/decoding methods compatible with `gob`. A list of important related changes follows.\r\n  - `utils.kvdb.KeyValueDB` is no longer an interface, but a struct which directly implements the former \"badger backend\".\r\n  - `utils.SerializeToFile` and `utils.DeserializeFromFile` now handle generic `interface{}` objects, instead of values implementing `Serializer` and `Deserializer`.\r\n  - `mat32` and `mat64` custom serialization functions (e.g. `MarshalBinarySlice`, `MarshalBinaryTo`, ...) are replaced by implementations of `BinaryMarshaler` and `BinaryUnmarshaler` interfaces on `Dense` and `Sparse` matrix types.\r\n  - `PositionalEncoder.Cache` and `AxialPositionalEncoder.Cache` fields (from `ml.encoding.pe` package) are now public.\r\n  - All types implementing `nn.Model` interface are registered for gob serialization (in init functions).\r\n  - `embeddings.Model.UsedEmbeddings` type is now `nlp.embeddings.syncmap.Map`.\r\n  - As a consequence, you will have to re-serialize all your models.\r\n- Flair converter now sets the vocabulary directly in the model, instead of creating a separate file.\r\n- `sequencelabeler.Model.LoadParams` has been renamed to `Load`.\r\n\r\n### Removed\r\n- In relation to the aforementioned gob serialization changes:\r\n  - `nn.ParamSerializer` and related functions\r\n  - `nn.ParamsSerializer` and related functions\r\n  - `utils.Serializer` and `utils.Deserializer` interfaces\r\n  - `utils.ReadFull` function\r\n- `sequencelabeler.Model.LoadVocabulary`\r\n\r\n### Fixed\r\n- `docker-entrypoint` sub-command `hugging-face-importer` has been renamed to `huggingface-importer`, just like the main command itself.\r\n- `docker-entrypoint` sub-command can be correctly specified without leading `./` or `/` when run from a Docker container.\r\n- BREAKING: mat32.Matrix serialization has been fixed, now serializing single values to chunks of 4 bytes (instead of 8, like float64). Serialized 32-bit models will now be half the size! Unfortunately you will have to re-serialize your models (sorry!).",
        "dateCreated": "2021-01-17T02:35:31Z",
        "datePublished": "2021-01-17T02:42:32Z",
        "html_url": "https://github.com/nlpodyssey/spago/releases/tag/v0.4.0",
        "name": "v0.4.0",
        "tag_name": "v0.4.0",
        "tarball_url": "https://api.github.com/repos/nlpodyssey/spago/tarball/v0.4.0",
        "url": "https://api.github.com/repos/nlpodyssey/spago/releases/36507512",
        "zipball_url": "https://api.github.com/repos/nlpodyssey/spago/zipball/v0.4.0"
      },
      {
        "authorType": "User",
        "author_name": "marco-nicola",
        "body": "### Added\r\n- Static analysis job (`golint` and `gocyclo`) to `Go` GitHub workflow.\r\n- You can set a limit for concurrent heavyweight Graph computations (e.g. forward and backward steps) - see `ml.ag.ConcurrentComputations()` (`GraphOption`) and `ml.ag.Graph.ConcurrentComputations()`. If no option is specified, by default the limit is set to `runtime.NumCPU()`.\r\n- You can set a limit for concurrent heavyweight computations of `ml.optimizers.gd.GradientDescent` (e.g. params update step).\r\n- New package `utils.processingqueue`.\r\n- `mat32` package, which operates on `float32` data type.\r\n- It's possible to switch between `float32` and `float64` as default floating-point data type, using the script `change-float-type.sh`\r\n- `Go` GitHub workflow has been adapted to run tests using both `float32` and `float64` as main floating-point data type.\r\n- This CHANGELOG file.\r\n- Pull and convert Hugging Face models automatically if not found locally when starting BERT or BART server.\r\n- Move content from GitHub Wiki to README in related package folders.\r\n\r\n### Changed\r\n- `ml.ag.ConcurrentComputations` (`GraphOption`) expects the maximum number of concurrent computations handled by heavyweight Graph operations (e.g. forward and backward steps).\r\n- `ml.nn.linear.Model` and `ml.nn.convolution.Model` read the concurrent computations limit set on the model's Graph, thus `SetConcurrentComputations()` methods have been removed.\r\n- `mat` has been renamed to `mat64` and some functions have been renamed.\r\n- The whole project now works with `float32` floating-point data type by default, by using the package `mat32`.\r\n- When imported, the new package `mat32` is always aliased as `mat`. Then, explicit usages of `float64` type have been replaced with `mat.Float`. Moreover, bitsize-specific functions have been made more generic (i.e. operating with `mat.Float` type) or split into separate implementation, in `mat32` and `mat64`. In this way, switching the whole project between `float32` and `float64` is just a matter of changing all imports, from `mat32` to `mat64`, or vice-versa (see also the new file `change-float-type.sh`).\r\n- Update internal links to pre-trained NER models to float32 versions.\r\n- `nlp.sequencelabeler.Convert()` now loads and converts original Flair models, instead of pre-processed dumps.\r\n- Change command line arguments to make them more consistent; please refer to the help messages of each command.\r\n- Update Dockerfile using a new base building image and adding bart server.\r\n\r\n### Fixed\r\n- Added dedicated package names to different protocol buffers definition files to avoid name conflicts.\r\n",
        "dateCreated": "2021-01-10T00:14:44Z",
        "datePublished": "2021-01-10T00:18:48Z",
        "html_url": "https://github.com/nlpodyssey/spago/releases/tag/v0.3.0",
        "name": "",
        "tag_name": "v0.3.0",
        "tarball_url": "https://api.github.com/repos/nlpodyssey/spago/tarball/v0.3.0",
        "url": "https://api.github.com/repos/nlpodyssey/spago/releases/36186664",
        "zipball_url": "https://api.github.com/repos/nlpodyssey/spago/zipball/v0.3.0"
      },
      {
        "authorType": "User",
        "author_name": "matteo-grella",
        "body": "## Notable changes:\r\n- Added support for BART model (tested on Natural Language Inference task);\r\n- Added BART API to perform Zero-Shot Text Classification;\r\n- Significant reduction of boilerplate code through the unification of `nn.Model` and `nn.Processor` interfaces:\r\n  - there is now a single `nn.Model` interface that can be reified to become a *neural processor*. See `nn.Reify()`;\r\n  - there was no compelling reason to have a `Forward` method in the `nn.Model` interface so it has been removed, gracefully increasing flexibility in the implementation of a model.",
        "dateCreated": "2020-12-30T22:49:55Z",
        "datePublished": "2020-12-30T23:08:30Z",
        "html_url": "https://github.com/nlpodyssey/spago/releases/tag/v0.2.0",
        "name": "v0.2.0",
        "tag_name": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/nlpodyssey/spago/tarball/v0.2.0",
        "url": "https://api.github.com/repos/nlpodyssey/spago/releases/35858579",
        "zipball_url": "https://api.github.com/repos/nlpodyssey/spago/zipball/v0.2.0"
      },
      {
        "authorType": "User",
        "author_name": "matteo-grella",
        "body": "",
        "dateCreated": "2020-12-09T13:59:07Z",
        "datePublished": "2020-12-09T14:04:14Z",
        "html_url": "https://github.com/nlpodyssey/spago/releases/tag/v0.1.0",
        "name": "First tagged release",
        "tag_name": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/nlpodyssey/spago/tarball/v0.1.0",
        "url": "https://api.github.com/repos/nlpodyssey/spago/releases/35044810",
        "zipball_url": "https://api.github.com/repos/nlpodyssey/spago/zipball/v0.1.0"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1063,
      "date": "Fri, 24 Dec 2021 10:32:19 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "deep-learning",
      "machine-learning",
      "natural-language-processing",
      "neural-network",
      "computation-graph",
      "automatic-differentiation",
      "artificial-intelligence",
      "deeplearning",
      "transformer-architecture",
      "recurrent-networks",
      "lstm",
      "language-model",
      "question-answering",
      "bert",
      "bert-as-service",
      "nlp",
      "automatic-translation",
      "bart",
      "named-entities-recognition"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Requirements:\n\n* [Go 1.15](https://golang.org/dl/)\n* [Go modules](https://blog.golang.org/using-go-modules)\n\nClone this repo or get the library:\n\n```console\ngo get -u github.com/nlpodyssey/spago\n```\n\nspaGO supports two main use cases, which are explained more in detail in the following.\n\n",
      "technique": "Header extraction"
    }
  ]
}