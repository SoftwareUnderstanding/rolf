{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1611.09940]\n  \nPointer Networks is the model architecture proposed by Vinyals et al. 2015\n[https://arxiv.org/abs/1506.03134]\n  \nThis model uses attention mechanism to output a permutation of the input index.\n\n![Screen Shot 2021-02-25 at 12 45 34 AM](https://user-images.githubusercontent.com/51239551/109026426-13756500-7703-11eb-9880-6b8be0b47b4e.png",
      "https://arxiv.org/abs/1506.03134]\n  \nThis model uses attention mechanism to output a permutation of the input index.\n\n![Screen Shot 2021-02-25 at 12 45 34 AM](https://user-images.githubusercontent.com/51239551/109026426-13756500-7703-11eb-9880-6b8be0b47b4e.png"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* https://github.com/higgsfield/np-hard-deep-reinforcement-learning\n* https://github.com/zhengsr3/Reinforcement_Learning_Pointer_Networks_TSP_Pytorch\n* https://github.com/pemami4911/neural-combinatorial-rl-pytorch\n* https://github.com/MichelDeudon/neural-combinatorial-optimization-rl-tensorflow\n* https://github.com/jingw2/neural-combinatorial-optimization-rl\n* https://github.com/dave-yxw/rl_tsp\n* https://github.com/shirgur/PointerNet\n* https://github.com/MichelDeudon/encode-attend-navigate\n* https://github.com/qiang-ma/HRL-for-combinatorial-optimization\n* https://www.youtube.com/watch?v=mxCVgVrUw50&ab_channel=%D0%9A%D0%BE%D0%BC%D0%BF%D1%8C%D1%8E%D1%82%D0%B5%D1%80%D0%BD%D1%8B%D0%B5%D0%BD%D0%B0%D1%83%D0%BA%D0%B8\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Rintarooo/TSP_DRL_PtrNet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-05-11T02:19:16Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-10T10:31:19Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9741032535780807
      ],
      "excerpt": "This is PyTorch implementation of NEURAL COMBINATORIAL OPTIMIZATION WITH REINFORCEMENT LEARNING, Bello et al. 2016 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8358624060540143
      ],
      "excerpt": "Pointer Networks is the model architecture proposed by Vinyals et al. 2015 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9783675691230667,
        0.9467091173332385,
        0.9627269970616479
      ],
      "excerpt": "In this work, we will tackle Traveling Salesman Problem(TSP), which is one of the combinatorial optimization problems known as NP-hard. TSP seeks for the shortest tour for a salesman to visit each city exactly once. \nIn the training phase, this TSP solver will optimize 2 different types of Pointer Networks, Actor and Critic model.  \nGiven a graph of cities where the cities are the nodes, critic model predicts expected tour length, which is generally called state-value. Parameters of critic model are optimized as the estimated tour length catches up with the actual length calculated from the tour(city permutation) predicted by actor model. Actor model updates its policy parameters with the value called advantage which subtracts state-value from the actual tour length. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9471151491119008,
        0.8421410656370898
      ],
      "excerpt": "In this paper, two approaches to find the best tour at inference time are proposed, which we refer to as Sampling and Active Search.  \nSearch strategy called Active Search takes actor model and use policy gradient for updating its parameters to find the shortest tour. Sampling simply just select the shortest tour out of 1 batch. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8723990037527207
      ],
      "excerpt": "-m train could be replaced with -m train_emv. emv is the abbreviation of 'Exponential Moving Average', which doesn't need critic model. Then, go on training. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8153371000633026
      ],
      "excerpt": "If training is done, set the configuration for inference. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "PyTorch1.6, \"Neural Combinatorial Optimization with Reinforcement Learning\", Pointer Networks, Deep RL(Actor-Critic), Traveling Salesman Problem",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Rintarooo/TSP_DRL_PointerNet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 25,
      "date": "Tue, 21 Dec 2021 01:19:09 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Rintarooo/TSP_DRL_PtrNet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Rintarooo/TSP_DRL_PtrNet",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Rintarooo/TSP_DRL_PointerNet/master/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Rintarooo/TSP_DRL_PointerNet/master/docker.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9401115354708366
      ],
      "excerpt": "I leave my own environment below. I tested it out on a single GPU. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8067726614746468,
        0.9748709027320682
      ],
      "excerpt": "    * Linux(Ubuntu 18.04.5 LTS)  \n* GPU: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9504105404325145
      ],
      "excerpt": "* nvidia-docker2(for GPU) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8482611287659393
      ],
      "excerpt": "and nvidia-docker2(for GPU) \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.858567343599558,
        0.8125396164425658
      ],
      "excerpt": "First generate the pickle file contaning hyperparameter values by running the following command   \n(in this example, train mode, batch size 512, 20 city nodes, 13000 steps). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9234920786744425
      ],
      "excerpt": "python config.py -m train -b 512 -t 20 -s 13000 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8472542276768913
      ],
      "excerpt": "python train.py -p Pkl/train20.pkl \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8178339079431222
      ],
      "excerpt": "Now, you can see how the training process went from the csv files in the Csv dir. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9539246005278389
      ],
      "excerpt": "python config.py -m test -t 20 -s 10 -ap Pt/train20_1113_12_12_step14999_act.pt --islogger --seed 123 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8481257201250043
      ],
      "excerpt": "python test.py -p Pkl/test20.pkl \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8390494434073271,
        0.8047602142230071
      ],
      "excerpt": "* NVIDIA\u00ae Driver = 455.45.01 \n* Docker = 20.10.3 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Rintarooo/TSP_DRL_PtrNet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Dockerfile",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Rintarooo\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "TSP Solver with Deep RL",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "TSP_DRL_PtrNet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Rintarooo",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Rintarooo/TSP_DRL_PtrNet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Python = 3.6.10\n* PyTorch = 1.6.0\n* numpy\n* tqdm (if you need)\n* matplotlib (only for plotting)\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 58,
      "date": "Tue, 21 Dec 2021 01:19:09 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "tsp",
      "deep-reinforcement-learning",
      "actor-critic",
      "pointer-networks",
      "active-search"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. build or pull docker image\n\nbuild image(this might take some time)\n```bash\n./docker.sh build\n```\npull image from [dockerhub](https://hub.docker.com/repository/docker/docker4rintarooo/tspdrl/tags?page=1&ordering=last_updated)\n```bash\ndocker pull docker4rintarooo/tspdrl:latest\n```\n\n2. run container using docker image(-v option is to mount directory)\n```bash\n./docker.sh run\n```\nIf you don't have a GPU, you can run\n```bash\n./docker.sh run_cpu\n```\n<br><br>\n\n",
      "technique": "Header extraction"
    }
  ]
}