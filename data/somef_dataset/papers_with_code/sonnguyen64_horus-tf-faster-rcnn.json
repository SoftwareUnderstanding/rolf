{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1612.03144",
      "https://arxiv.org/abs/1612.03144",
      "https://arxiv.org/abs/1702.02138"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you find this implementation or the analysis conducted in our report helpful, please consider citing:\n\n    @article{chen17implementation,\n        Author = {Xinlei Chen and Abhinav Gupta},\n        Title = {An Implementation of Faster RCNN with Study for Region Sampling},\n        Journal = {arXiv preprint arXiv:1702.02138},\n        Year = {2017}\n    }\n    \nFor convenience, here is the faster RCNN citation:\n\n    @inproceedings{renNIPS15fasterrcnn,\n        Author = {Shaoqing Ren and Kaiming He and Ross Girshick and Jian Sun},\n        Title = {Faster {R-CNN}: Towards Real-Time Object Detection\n                 with Region Proposal Networks},\n        Booktitle = {Advances in Neural Information Processing Systems ({NIPS})},\n        Year = {2015}\n    }\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{renNIPS15fasterrcnn,\n    Author = {Shaoqing Ren and Kaiming He and Ross Girshick and Jian Sun},\n    Title = {Faster {R-CNN}: Towards Real-Time Object Detection\n             with Region Proposal Networks},\n    Booktitle = {Advances in Neural Information Processing Systems ({NIPS})},\n    Year = {2015}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{chen17implementation,\n    Author = {Xinlei Chen and Abhinav Gupta},\n    Title = {An Implementation of Faster RCNN with Study for Region Sampling},\n    Journal = {arXiv preprint arXiv:1702.02138},\n    Year = {2017}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8494120656278942
      ],
      "excerpt": "  - Train on COCO 2014 trainval35k and test on minival (900k/1190k), 29.5.  \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sonnguyen64/horus-tf-faster-rcnn",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-08-29T02:02:55Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-08-30T07:48:51Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9709657536502594,
        0.9913168973017327,
        0.9397430292802814,
        0.9670415052119818
      ],
      "excerpt": "A Tensorflow implementation of faster RCNN detection framework by Xinlei Chen (xinleic@cs.cmu.edu). This repository is based on the python Caffe implementation of faster RCNN available here. \nNote: Several minor modifications are made when reimplementing the framework, which give potential improvements. For details about the modifications and ablative analysis, please refer to the technical report An Implementation of Faster RCNN with Study for Region Sampling. If you are seeking to reproduce the results in the original paper, please use the official code or maybe the semi-official code. For details about the faster RCNN architecture please refer to the paper Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks. \nThe current code support VGG16 and Resnet V1 models. We tested it on plain VGG16 and Resnet101 (thank you @philokey!) architecture so far. As the baseline, we report numbers using a single model on a single convolution layer, so no multi-scale, no multi-stage bounding box regression, no skip-connection, no extra input is used. The only data augmentation technique is left-right flipping during training following the original Faster RCNN. All models are released. \nWith VGG16 (conv5_3): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8019629248370846
      ],
      "excerpt": "With Resnet101 (last conv4): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.879544899389321
      ],
      "excerpt": "  - Due to the randomness in GPU training with Tensorflow espeicially for VOC, the best numbers are reported (with 2-3 attempts) here. According to my experience, for COCO you can almost always get a very close number (within 0.2%) despite the randomness. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9383667034651,
        0.9037475352530888,
        0.8003008207809936,
        0.9829272273329012,
        0.8290056923818434,
        0.8127237047934616,
        0.8411427044783083,
        0.975793546904387,
        0.9492480909739089,
        0.9728974738949118
      ],
      "excerpt": "  - Since we keep the small proposals (\\< 16 pixels width/height), our performance is especially good for small objects. \n  - For other minor modifications, please check the report. Notable ones include using crop_and_resize, and excluding ground truth boxes in RoIs during training. \n  - For COCO, we find the performance improving with more iterations (VGG16 350k/490k: 26.9, 600k/790k: 28.3, 900k/1190k: 29.5), and potentially better performance can be achieved with even more iterations.  \n  - For Resnet101, we fix the first block (total 4) when fine-tuning the network, and only use crop_and_resize to resize the RoIs (7x7) without max-pool. The final feature maps are average-pooled for classification and regression. All batch normalization parameters are fixed. Weight decay is set to Renset101 default 1e-4. Learning rate for biases is not doubled. \n  - For approximate FPN baseline setup we simply resize the image with 800 pixels, add 32^2 anchors, and take 1000 proposals during testing. \n  - Check out here/here/here for the latest models, including longer COCO VGG16 models and Resnet101 ones. \nAdditional features not mentioned in the report are added to make research life easier: \n  - Support for train-and-validation. During training, the validation data will also be tested from time to time to monitor the process and check potential overfitting. Ideally training and validation should be separate, where the model is loaded everytime to test on validation. However I have implemented it in a joint way to save time and GPU memory. Though in the default setup the testing data is used for validation, no special attempts is made to overfit on testing set. \n  - Support for resuming training. I tried to store as much information as possible when snapshoting, with the purpose to resume training from the lateset snapshot properly. The meta information includes current image index, permutation of images, and random state of numpy. However, when you resume training the random seed for tensorflow will be reset (not sure how to save the random state of tensorflow now), so it will result in a difference. Note that, the current implementation still cannot force the model to behave deterministically even with the random seeds set. Suggestion/solution is welcome and much appreciated. \n  - Support for visualization. The current implementation will summarize ground truth detections, statistics of losses, activations and variables during training, and dump it to a separate folder for tensorboard visualization. The computing graph is also saved for debugging. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924212690395703
      ],
      "excerpt": "   mv vgg_16.ckpt vgg16.ckpt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.965651939988263
      ],
      "excerpt": "  #: NET in {vgg16, res50, res101, res152} is the network arch to use \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.965651939988263
      ],
      "excerpt": "  #: NET in {vgg16, res50, res101, res152} is the network arch to use \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.987460687849962
      ],
      "excerpt": "The default number of training iterations is kept the same to the original faster RCNN for VOC 2007, however I find it is beneficial to train longer (see report for COCO), probably due to the fact that the image batch size is 1. For VOC 07+12 we switch to a 80k/110k schedule following R-FCN. Also note that due to the nondeterministic nature of the current implementation, the performance can vary a bit, but in general it should be within 1% of the reported numbers for VOC, and 0.2% of the reported numbers for COCO. Suggestions/Contributions are welcome. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "TensorFlow Faster R-CNN Architecture",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sonnguyen64/horus-tf-faster-rcnn/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Fri, 24 Dec 2021 00:56:27 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/sonnguyen64/horus-tf-faster-rcnn/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "sonnguyen64/horus-tf-faster-rcnn",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/sonnguyen64/horus-tf-faster-rcnn/master/export_graph.sh",
      "https://raw.githubusercontent.com/sonnguyen64/horus-tf-faster-rcnn/master/experiments/scripts/convert_vgg16.sh",
      "https://raw.githubusercontent.com/sonnguyen64/horus-tf-faster-rcnn/master/experiments/scripts/test_faster_rcnn.sh",
      "https://raw.githubusercontent.com/sonnguyen64/horus-tf-faster-rcnn/master/experiments/scripts/train_faster_rcnn.sh",
      "https://raw.githubusercontent.com/sonnguyen64/horus-tf-faster-rcnn/master/data/scripts/fetch_faster_rcnn_models.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Please follow the instructions of py-faster-rcnn [here](https://github.com/rbgirshick/py-faster-rcnn#beyond-the-demo-installation-for-training-and-testing-models) to setup VOC and COCO datasets (Part of COCO is done). The steps involve downloading data and optionally creating softlinks in the ``data`` folder. Since faster RCNN does not rely on pre-computed proposals, it is safe to ignore the steps that setup proposals.\n\nIf you find it useful, the ``data/cache`` folder created on my side is also shared [here](http://ladoga.graphics.cs.cmu.edu/xinleic/tf-faster-rcnn/cache.tgz). \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Clone the repository\n  ```Shell\n  git clone https://github.com/endernewton/tf-faster-rcnn.git\n  ```\n\n2. Update your -arch in setup script to match your GPU\n  ```Shell\n  cd tf-faster-rcnn/lib\n  vim setup.py\n  #: Check the GPU architecture, if you are using Pascal arch, please switch to sm_61\n  ```\n\n3. Build the Cython modules\n  ```Shell\n  make clean\n  make\n  cd ..\n  ```\n\n4. Install the [Python COCO API](https://github.com/pdollar/coco). The code requires the API to access COCO dataset.\n  ```Shell\n  cd data\n  git clone https://github.com/pdollar/coco.git\n  cd ..\n  ```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8324625124654802
      ],
      "excerpt": "  - Due to the randomness in GPU training with Tensorflow espeicially for VOC, the best numbers are reported (with 2-3 attempts) here. According to my experience, for COCO you can almost always get a very close number (within 0.2%) despite the randomness. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8254213883331442,
        0.876031526235143,
        0.8725549602927676
      ],
      "excerpt": "   cd data/imagenet_weights \n   wget -v http://download.tensorflow.org/models/vgg_16_2016_08_28.tar.gz \n   tar -xzvf vgg_16_2016_08_28.tar.gz \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466,
        0.8633405492125716
      ],
      "excerpt": "   cd ../.. \n   For Resnet101, you can set up like: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8254213883331442,
        0.876031526235143,
        0.8725549602927676
      ],
      "excerpt": "   cd data/imagenet_weights \n   wget -v http://download.tensorflow.org/models/resnet_v1_101_2016_08_28.tar.gz \n   tar -xzvf resnet_v1_101_2016_08_28.tar.gz \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "   cd ../.. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.884067387307346,
        0.9069687384322455
      ],
      "excerpt": "  ./experiments/scripts/train_faster_rcnn.sh [GPU_ID] [DATASET] [NET] \n  #: GPU_ID is the GPU you want to test on \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9549997561619052
      ],
      "excerpt": "  ./experiments/scripts/train_faster_rcnn.sh 1 coco res101 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.884067387307346,
        0.9069687384322455
      ],
      "excerpt": "  ./experiments/scripts/test_faster_rcnn.sh [GPU_ID] [DATASET] [NET] \n  #: GPU_ID is the GPU you want to test on \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9549997561619052
      ],
      "excerpt": "  ./experiments/scripts/test_faster_rcnn.sh 1 coco res101 \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.80682152106421
      ],
      "excerpt": "  - Train on VOC 2007 trainval and test on VOC 2007 test, 75.2.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8275093558259294
      ],
      "excerpt": "Train (and test, evaluation) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8838148168639296
      ],
      "excerpt": "  #: Examples: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8838148168639296
      ],
      "excerpt": "  #: Examples: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8024269194255869,
        0.8133316360607923
      ],
      "excerpt": " Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.312 \n Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.128 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8024269194255869
      ],
      "excerpt": " Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.312 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/sonnguyen64/horus-tf-faster-rcnn/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell",
      "Cuda",
      "MATLAB",
      "Roff",
      "C++",
      "Makefile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2017 Xinlei Chen\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "tf-faster-rcnn",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "horus-tf-faster-rcnn",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "sonnguyen64",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sonnguyen64/horus-tf-faster-rcnn/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "  - A basic Tensorflow installation. The code follows **r1.0** format. If you are using an order version (r0.1-r0.12), please check out the v0.12 release. While it is not required, for experimenting the original RoI pooling (which requires modification of the C++ code in tensorflow), you can check out my tensorflow [fork](https://github.com/endernewton/tensorflow) and look for ``tf.image.roi_pooling``.\n  - Python packages you might not have: `cython`, `opencv-python`, `easydict` (similar to [py-faster-rcnn](https://github.com/rbgirshick/py-faster-rcnn)). For `easydict` make sure you have the right version, for me it is 1.6.\n  - Docker users: A Docker image containing all of the required dependencies can be found in Docker hub at the ``docker`` folder. The Docker file used to create this image can be found in the docker directory of this repository.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Fri, 24 Dec 2021 00:56:27 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Download pre-trained model\n  ```Shell\n  #: Resnet101 for voc pre-trained on 07+12 set\n  ./data/scripts/fetch_faster_rcnn_models.sh\n  ```\n  **Note**: if you cannot download the models through the link, or you want to try more models, you can check out the following solutions and optionally update the downloading script:\n  - Another server [here](http://gs11655.sp.cs.cmu.edu/xinleic/tf-faster-rcnn/).\n  - Google drive [here](https://drive.google.com/open?id=0B1_fAEgxdnvJSmF3YUlZcHFqWTQ).\n\n2. Create a folder and a softlink to use the pre-trained model\n  ```Shell\n  NET=res101\n  TRAIN_IMDB=voc_2007_trainval+voc_2012_trainval\n  mkdir -p output/${NET}/${TRAIN_IMDB}\n  cd output/${NET}/${TRAIN_IMDB}\n  ln -s ../../../data/voc_2007_trainval+voc_2012_trainval ./default\n  cd ../../..\n  ```\n\n3. Demo for testing on custom images\n  ```Shell\n  #: at reposistory root\n  GPU_ID=0\n  CUDA_VISIBLE_DEVICES=${GPU_ID} ./tools/demo.py \n  ```\n  **Note**: Resnet101 testing probably requires several gigabytes of memory, so if you are using GPUs with a smaller memory capacity, please install it with CPU support only. Refer to [Issue 25](https://github.com/endernewton/tf-faster-rcnn/issues/25). \n\n4. Test with pre-trained Resnet101 models\n  ```Shell\n  GPU_ID=0\n  ./experiments/scripts/test_faster_rcnn.sh $GPU_ID pascal_voc_0712\n  ```\n  **Note**: If you cannot get the reported numbers, then probabaly the NMS function is compiled improperly, refer to [Issue 5](https://github.com/endernewton/tf-faster-rcnn/issues/5). \n\n",
      "technique": "Header extraction"
    }
  ]
}