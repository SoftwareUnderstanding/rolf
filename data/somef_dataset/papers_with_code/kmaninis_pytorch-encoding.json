{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**Context Encoding for Semantic Segmentation** [[arXiv]](https://arxiv.org/pdf/1803.08904.pdf)  \n [Hang Zhang](http://hangzh.com/), [Kristin Dana](http://eceweb1.rutgers.edu/vision/dana.html), [Jianping Shi](http://shijianping.me/), [Zhongyue Zhang](http://zhongyuezhang.com/), [Xiaogang Wang](http://www.ee.cuhk.edu.hk/~xgwang/), [Ambrish Tyagi](https://scholar.google.com/citations?user=GaSWCoUAAAAJ&hl=en), [Amit Agrawal](http://www.amitkagrawal.com/)\n```\n@InProceedings{Zhang_2018_CVPR,\nauthor = {Zhang, Hang and Dana, Kristin and Shi, Jianping and Zhang, Zhongyue and Wang, Xiaogang and Tyagi, Ambrish and Agrawal, Amit},\ntitle = {Context Encoding for Semantic Segmentation},\nbooktitle = {The IEEE Conference on Computer Vision and Pattern Recognition (CVPR)},\nmonth = {June},\nyear = {2018}\n}\n```\n\n**Deep TEN: Texture Encoding Network** [[arXiv]](https://arxiv.org/pdf/1612.02844.pdf)  \n  [Hang Zhang](http://hangzh.com/), [Jia Xue](http://jiaxueweb.com/), [Kristin Dana](http://eceweb1.rutgers.edu/vision/dana.html)\n```\n@InProceedings{Zhang_2017_CVPR,\nauthor = {Zhang, Hang and Xue, Jia and Dana, Kristin},\ntitle = {Deep TEN: Texture Encoding Network},\nbooktitle = {The IEEE Conference on Computer Vision and Pattern Recognition (CVPR)},\nmonth = {July},\nyear = {2017}\n}\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@InProceedings{Zhang_2017_CVPR,\nauthor = {Zhang, Hang and Xue, Jia and Dana, Kristin},\ntitle = {Deep TEN: Texture Encoding Network},\nbooktitle = {The IEEE Conference on Computer Vision and Pattern Recognition (CVPR)},\nmonth = {July},\nyear = {2017}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@InProceedings{Zhang_2018_CVPR,\nauthor = {Zhang, Hang and Dana, Kristin and Shi, Jianping and Zhang, Zhongyue and Wang, Xiaogang and Tyagi, Ambrish and Agrawal, Amit},\ntitle = {Context Encoding for Semantic Segmentation},\nbooktitle = {The IEEE Conference on Computer Vision and Pattern Recognition (CVPR)},\nmonth = {June},\nyear = {2018}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8019992870097058
      ],
      "excerpt": "cd vision \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kmaninis/pytorch-encoding",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-09-28T19:26:22Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-05-27T15:04:51Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.97819763725253,
        0.9312320192259526
      ],
      "excerpt": "The Synchronized Batchnorm package needs installation of Pytorch from source. Since it is not maintained by the PyTorch team, it is not always up-to-date with PyTorch master branch. \nIn order to avoid compatibility issues, this is a modified copy of the repo, and works by following the instructions below. If you use this for your work, please cite the original paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8217255712129009
      ],
      "excerpt": ": Revert to specific commit \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8653492503952268
      ],
      "excerpt": ": Only for Volta GPUs \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kmaninis/pytorch-encoding/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sun, 26 Dec 2021 21:20:53 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/kmaninis/pytorch-encoding/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "kmaninis/pytorch-encoding",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/kmaninis/pytorch-encoding/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/kmaninis/pytorch-encoding/master/clean.sh",
      "https://raw.githubusercontent.com/kmaninis/pytorch-encoding/master/experiments/recognition/model/download_models.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.830121175364258
      ],
      "excerpt": "The Synchronized Batchnorm package needs installation of Pytorch from source. Since it is not maintained by the PyTorch team, it is not always up-to-date with PyTorch master branch. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.979882454121077,
        0.9443504626591593
      ],
      "excerpt": "Download and install Anaconda Python 3.6. Alternatives are ofcourse possible. \nCreate an environment and install dependencies. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9369018928935897,
        0.93239874360503,
        0.9929682021823059,
        0.9471261029350229,
        0.9995234057802402,
        0.9933091740818568,
        0.8681943951087497,
        0.9455750257707145,
        0.992462502505413,
        0.9952653930297553
      ],
      "excerpt": "    conda create -n myenv python=3.6 \n    source activate myenv \n: Needed to install Pytorch \nconda install numpy pyyaml mkl mkl-include setuptools cmake cffi typing requests future \nconda install -c mingfeima mkldnn \nconda install -c pytorch magma-cuda90 \n3. Install PyTorch from source, but revert to a specific commit first to avoid incompatibilities. \n: Clone the repo \ngit clone --recursive https://github.com/pytorch/pytorch.git \ncd pytorch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8660756266539105
      ],
      "excerpt": "git submodule update --init \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9704388237270445,
        0.9820226428242687,
        0.9906248903846466,
        0.8698470263939203,
        0.9872567691813449,
        0.9920340896470246,
        0.9422395008696958,
        0.9820226428242687,
        0.9906248903846466,
        0.8891401888405708,
        0.967457169540752,
        0.8174911807592887
      ],
      "excerpt": ": Install pytorch - be patient please. \npython setup.py install \ncd .. \n4. Install torchvision and ninja. \n: Install torchvision from source \ngit clone https://github.com/pytorch/vision.git \ncd vision \npython setup.py install \ncd .. \n: Get ninja \nwget https://github.com/ninja-build/ninja/releases/download/v1.8.2/ninja-linux.zip \nunzip ninja-linux.zip \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9768957907458959,
        0.9986563398845941,
        0.9950689470929688,
        0.9952653930297553,
        0.9820226428242687,
        0.9906248903846466
      ],
      "excerpt": "Install Synchronized Batchnorm package (my local copy, with the hacks needed to make it work).  \n    #: Install pytorch encoding \n    git clone https://github.com/kmaninis/pytorch-encoding.git \n    cd pytorch-encoding \n    python setup.py install \n    cd .. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/kmaninis/pytorch-encoding/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Cuda",
      "C++",
      "Shell",
      "Makefile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/kmaninis/pytorch-encoding/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2017 Hang Zhang. All rights reserved.\\nCopyright (c) 2018 Amazon.com, Inc. or its affiliates. All rights reserved.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\n1. Redistributions of source code must retain the above copyright\\n   notice, this list of conditions and the following disclaimer.\\n\\n2. Redistributions in binary form must reproduce the above copyright\\n   notice, this list of conditions and the following disclaimer in the\\n   documentation and/or other materials provided with the distribution.\\n\\n3. Neither the name of Amazon Inc nor the names of the contributors may be\\n   used to endorse or promote products derived from this software without\\n   specific prior written permission.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "##  Clone of pytorch-encoding created by [Hang Zhang](http://hangzh.com/):",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pytorch-encoding",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "kmaninis",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kmaninis/pytorch-encoding/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Sun, 26 Dec 2021 21:20:53 GMT"
    },
    "technique": "GitHub API"
  }
}