{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1703.06870",
      "https://arxiv.org/abs/1703.06870"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8203713549942773
      ],
      "excerpt": "The code is documented and designed to be easy to extend. If you use it in your research, please consider referencing this repository. If you work on 3D vision, you might find our recently released Matterport3D dataset useful as well. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Lopezurrutia/DSB_2018",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-07-18T10:10:06Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-29T06:43:15Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9617767103471838,
        0.990199908364928
      ],
      "excerpt": "This solution is based on Matterport's Mask_RCNN implementation on keras/tensorflow. Please look at the original repository (https://github.com/matterport/Mask_RCNN) for specific details. \nThis is an implementation of Mask R-CNN on Python 3, Keras, and TensorFlow. The model generates bounding boxes and segmentation masks for each instance of an object in the image. It's based on Feature Pyramid Network (FPN) and a ResNet101 backbone. I have used the pretrained COCO weights as the starting point for my training on the nuclei segmentation dataset.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9012378813218624
      ],
      "excerpt": "Training was done with a modified version of the dataset as in the discussion forum:  https://www.kaggle.com/c/data-science-bowl-2018/discussion/50518 and mentioned several times in the Official External Data thread as a link to: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8996608558361753
      ],
      "excerpt": "The modifications of files model.py and utils.py are needed for scaling the training set images before random 512x512 crops are taken for training. This scaling that take places in the \"resize_image\" function in utils.py and also includes aspect ratio changes of the images. In addition, code in model.py inside the \"augment\" section of function \"load_image_gt\", allows for further image augmentation of the 512x512 crops, concretely: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9428973290753397
      ],
      "excerpt": "Similar augmentations can be achieved with the imgaug library (see the code for an example), but I have found these slightly underperform compared to my implementation. Also note that my winning implementation contained a bug that I have removed from this source code, so the results of running the training schedule bellow vary slightly from my final implementation. The bug was in the cropping function in utils.py and resulted in my code always taking the same part of an image (after the random rescaling that was working ok). Surprisingly, this bug did not penalize much my score, although I would have gone up one or maybe two positions if I hadn't made this stupid error..... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8370487074722659,
        0.9346797437271649
      ],
      "excerpt": "File \"my_train_1.py\" contains the code for the first training step. This is the most important part of the training, the other two steps don't improve much. Training doesn't have anything fancy, it just trains for 75 epochs, reducing the learning rate at epoch 30 and 50. Training uses the default SGD. \nFile \"my_train_2.py\" contains the second step. In this step we initialize the network with the final epoch weights in step 1. We then train for 40 additional epochs. The difference with step 1 is how images are taken from the training set. In step 1 images are taken one at a time as in most training procedures. But it is easy to see that the types of images and the number of each type are quite different, this makes the training dataset quite unbalanced in regards to the type of images to classify. Because the training set had groups of images of different sizes and usually the smaller images are more abundant I thought that it would be good (given all the cropping done above) that for each epoch we use several times the same image, in particular for the larger images. In summary , the train set as provided has 9 image sizes, each with different number of images: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9279597913726836,
        0.9159394516369352,
        0.9088934059785913,
        0.9840765219169575,
        0.9862418136455959,
        0.97845873577264
      ],
      "excerpt": "So I take 334 copies of the (1040,1388) image and add them to the training set, I take 1 copy of each image in the (256,256) category, 3 copies of each image in the (256,320) category and so on generating a training set that has the same number of images of each size. This makes my training set very large... \nFile \"my_train_3.py\" contains the third step. The final third step takes the weights of the last epoch in Step 2 and repeats the same procedure for a further 5 epochs with slightly larger augmentation parameters. The resulting weights are what have been used for my winning solution. It should be noted, however, that Steps 2 and 3 do not result in significant improvement of the Step 2 predictions (it is easy to say now that we can see the scores... ;) ). The weights for my solution are too large for github, you can download them at : https://drive.google.com/file/d/19kVton20JL9u0CpwGssD7EbBvsWcq1ty/view?usp=sharing \nInference uses the \"pad64\" option of Matterport's Mask_RCNN implementation. \nmy_inference.py contains a basic inference for the test set. Adding a binary dilation operation as simple postprocessing. This is a simplified version that results in equally good results as the test time augmentation (tta) used in my final solution. In fact, I would recommend using this version, the tta has a lot of parameters to tweak and (again it is easy to say when you can see the stage 2 results...) in my opinion it is not really worth it. \nmy_inference_tta.py For each image we make 15 predictions using the same model but different test time augmentations. This takes a long time for the 3k images in the final stage2, in fact, my final solution did not use the multiproccessing that I have added later and speeds up things quite a lot. The 15 augmentations used are based on different combinations of flips 90 degree rotations, channel shift ranges and scaling of the width and length. These are specified in the aug_options list. For example an entry [True, False, 2,7,1.1,1.2] will make an upside-down flip, no left-right flip, rotate 90 degrees two times, randomly shift the channels with a value of 7 and scale the image with a width scaling of 1.1 and height scaling of 1.2. \n Once the 15 predictions for each image are performed we merge the predictions. The function that merges the test time augmentations (TTA) is quite complex so I've tried to document what is going on as much as possible in that python file. As I said, a binary dilation operation on a single prediction (this is not part of my winning solution but I include it in the code) achieves similar results and takes much less time. Also note that this tta hyperparameters are set for my solution that includes the bug documented above. If you want to reproduce the exact result you should include the bug in the image \"random\" cropping. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9951128122208056,
        0.9328830280660902,
        0.980200824961809
      ],
      "excerpt": "This is an implementation of Mask R-CNN on Python 3, Keras, and TensorFlow. The model generates bounding boxes and segmentation masks for each instance of an object in the image. It's based on Feature Pyramid Network (FPN) and a ResNet101 backbone. \nThe repository includes: \n* Source code of Mask R-CNN built on FPN and ResNet101. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9553522167300541
      ],
      "excerpt": "To help with debugging and understanding the model, there are 3 notebooks  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8676484940430731,
        0.9170834915849713,
        0.9388296745477471,
        0.8690788978652966,
        0.985272910237318
      ],
      "excerpt": "This is an example of final detection boxes (dotted lines) and the refinement applied to them (solid lines) in the second stage. \nExamples of generated masks. These then get scaled and placed on the image in the right location. \nOften it's useful to inspect the activations at different layers to look for signs of trouble (all zeros or random noise). \nAnother useful debugging tool is to inspect the weight histograms. These are included in the inspect_weights.ipynb notebook. \nTensorBoard is another great debugging and visualization tool. The model is configured to log losses and save weights at the end of every epoch. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8270568799304001
      ],
      "excerpt": "Start by reading this blog post about the balloon color splash sample. It covers the process starting from annotating images to training to using the results in a sample application. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9122820965888477
      ],
      "excerpt": "This class provides a consistent way to work with any dataset.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9879470973130347
      ],
      "excerpt": "the code of the model. It also supports loading multiple datasets at the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9677108687719861,
        0.9825966053556698,
        0.950988947162637
      ],
      "excerpt": "This implementation follows the Mask RCNN paper for the most part, but there are a few cases where we deviated in favor of code simplicity and generalization. These are some of the differences we're aware of. If you encounter other differences, please do let us know. \nImage Resizing: To support training multiple images per batch we resize all images to the same size. For example, 1024x1024px on MS COCO. We preserve the aspect ratio, so if an image is not square we pad it with zeros. In the paper the resizing is done such that the smallest side is 800px and the largest is trimmed at 1000px. \nBounding Boxes: Some datasets provide bounding boxes and some provide masks only. To support training on multiple datasets we opted to ignore the bounding boxes that come with the dataset and generate them on the fly instead. We pick the smallest box that encapsulates all the pixels of the mask as the bounding box. This simplifies the implementation and also makes it easy to apply image augmentations that would otherwise be harder to apply to bounding boxes, such as image rotation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9502771600953054,
        0.9639843021025845,
        0.928232361960351,
        0.9173091310372988
      ],
      "excerpt": "We found that ~2% of bounding boxes differed by 1px or more, ~0.05% differed by 5px or more,  \nand only 0.01% differed by 10px or more. \nLearning Rate: The paper uses a learning rate of 0.02, but we found that to be \ntoo high, and often causes the weights to explode, especially when using a small batch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8784688533781598
      ],
      "excerpt": "gradients (sum vs mean across batches and GPUs). Or, maybe the official model uses gradient \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9263916241712177
      ],
      "excerpt": "We found that smaller learning rates converge faster anyway so we go with that. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8494666833719585
      ],
      "excerpt": "You can also join our team and help us build even more projects like this one. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Lopezurrutia/DSB_2018/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 36,
      "date": "Tue, 28 Dec 2021 21:52:36 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Lopezurrutia/DSB_2018/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Lopezurrutia/DSB_2018",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Lopezurrutia/DSB_2018/master/samples/demo.ipynb",
      "https://raw.githubusercontent.com/Lopezurrutia/DSB_2018/master/samples/shapes/train_shapes.ipynb",
      "https://raw.githubusercontent.com/Lopezurrutia/DSB_2018/master/samples/coco/inspect_model.ipynb",
      "https://raw.githubusercontent.com/Lopezurrutia/DSB_2018/master/samples/coco/inspect_data.ipynb",
      "https://raw.githubusercontent.com/Lopezurrutia/DSB_2018/master/samples/coco/inspect_weights.ipynb",
      "https://raw.githubusercontent.com/Lopezurrutia/DSB_2018/master/samples/balloon/inspect_balloon_model.ipynb",
      "https://raw.githubusercontent.com/Lopezurrutia/DSB_2018/master/samples/balloon/inspect_balloon_data.ipynb",
      "https://raw.githubusercontent.com/Lopezurrutia/DSB_2018/master/samples/nucleus/inspect_nucleus_data.ipynb",
      "https://raw.githubusercontent.com/Lopezurrutia/DSB_2018/master/samples/nucleus/inspect_nucleus_model.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Install dependencies\n   ```bash\n   pip3 install -r requirements.txt\n   ```\n2. Clone this repository\n3. Run setup from the repository root directory\n    ```bash\n    python3 setup.py install\n    ``` \n3. Download pre-trained COCO weights (mask_rcnn_coco.h5) from the [releases page](https://github.com/matterport/Mask_RCNN/releases).\n4. (Optional) To train or test on MS COCO install `pycocotools` from one of these repos. They are forks of the original pycocotools with fixes for Python3 and Windows (the official repo doesn't seem to be active anymore).\n\n    * Linux: https://github.com/waleedka/coco\n    * Windows: https://github.com/philferriere/cocoapi.\n    You must have the Visual C++ 2015 build tools on your path (see the repo for additional details)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.858886831996798
      ],
      "excerpt": "We're providing pre-trained weights for MS COCO to make it easier to start. You can \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8297320213661676
      ],
      "excerpt": "python3 samples/coco/coco.py train --dataset=/path/to/coco/ --model=coco \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8399644222683978
      ],
      "excerpt": "python3 samples/coco/coco.py train --dataset=/path/to/coco/ --model=/path/to/weights.h5 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8087393406843508
      ],
      "excerpt": "python3 samples/coco/coco.py train --dataset=/path/to/coco/ --model=last \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8834774609522587
      ],
      "excerpt": "You can also run the COCO evaluation code with: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9080812213009163
      ],
      "excerpt": "Some of the Mask-RCNN files are modified, in particular model.py and utils.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8103163727422115,
        0.8315146866225757
      ],
      "excerpt": "File my_bowl_dataset.py generates the bowldataset class to upload the images and masks in the correct format. \nThe modifications of files model.py and utils.py are needed for scaling the training set images before random 512x512 crops are taken for training. This scaling that take places in the \"resize_image\" function in utils.py and also includes aspect ratio changes of the images. In addition, code in model.py inside the \"augment\" section of function \"load_image_gt\", allows for further image augmentation of the 512x512 crops, concretely: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8213442465659659
      ],
      "excerpt": "* Example of training on your own dataset \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8301661069485722
      ],
      "excerpt": "Start by reading this blog post about the balloon color splash sample. It covers the process starting from annotating images to training to using the results in a sample application. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8298128525487963
      ],
      "excerpt": "See examples in samples/shapes/train_shapes.ipynb, samples/coco/coco.py, samples/balloon/balloon.py, and samples/nucleus/nucleus.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8190821438385925
      ],
      "excerpt": "* Visualizations and examples. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Lopezurrutia/DSB_2018/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/Lopezurrutia/DSB_2018/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Mask R-CNN\\n\\nThe MIT License (MIT)\\n\\nCopyright (c) 2017 Matterport, Inc.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Deep Retina 3th place solution to Kaggle's 2018 Data Science Bowl.",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "DSB_2018",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Lopezurrutia",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Lopezurrutia/DSB_2018/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Python 3.4, TensorFlow 1.3, Keras 2.0.8 and other common packages listed in `requirements.txt`.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "To train or test on MS COCO, you'll also need:\n* pycocotools (installation instructions below)\n* [MS COCO Dataset](http://cocodataset.org/#home)\n* Download the 5K [minival](https://dl.dropboxusercontent.com/s/o43o90bna78omob/instances_minival2014.json.zip?dl=0)\n  and the 35K [validation-minus-minival](https://dl.dropboxusercontent.com/s/s3tw5zcg7395368/instances_valminusminival2014.json.zip?dl=0)\n  subsets. More details in the original [Faster R-CNN implementation](https://github.com/rbgirshick/py-faster-rcnn/blob/master/data/README.md).\n\nIf you use Docker, the code has been verified to work on\n[this Docker container](https://hub.docker.com/r/waleedka/modern-deep-learning/).\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 59,
      "date": "Tue, 28 Dec 2021 21:52:36 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* [demo.ipynb](samples/demo.ipynb) Is the easiest way to start. It shows an example of using a model pre-trained on MS COCO to segment objects in your own images.\nIt includes code to run object detection and instance segmentation on arbitrary images.\n\n* [train_shapes.ipynb](samples/shapes/train_shapes.ipynb) shows how to train Mask R-CNN on your own dataset. This notebook introduces a toy dataset (Shapes) to demonstrate training on a new dataset.\n\n* ([model.py](mrcnn/model.py), [utils.py](mrcnn/utils.py), [config.py](mrcnn/config.py)): These files contain the main Mask RCNN implementation. \n\n\n* [inspect_data.ipynb](samples/coco/inspect_data.ipynb). This notebook visualizes the different pre-processing steps\nto prepare the training data.\n\n* [inspect_model.ipynb](samples/coco/inspect_model.ipynb) This notebook goes in depth into the steps performed to detect and segment objects. It provides visualizations of every step of the pipeline.\n\n* [inspect_weights.ipynb](samples/coco/inspect_weights.ipynb)\nThis notebooks inspects the weights of a trained model and looks for anomalies and odd patterns.\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "![Balloon Color Splash](assets/balloon_color_splash.gif)\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "![Mapping Challenge](assets/mapping_challenge.png)\n\n\n",
      "technique": "Header extraction"
    }
  ]
}