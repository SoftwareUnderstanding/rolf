{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1808.03578"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- [1]. https://arxiv.org/pdf/1606.00915.pdf\n- [2]. https://qmro.qmul.ac.uk/xmlui/bitstream/handle/123456789/39785/Stoller%20Wave-U-Net%202018%20Accepted.pdf?sequence=1\n- [3]. https://arxiv.org/abs/1808.03578\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9156566588472104
      ],
      "excerpt": "|Wave-U-Net |my improved version| \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9278824608274014
      ],
      "excerpt": "| SDR=11.83  | SDR=12.51 | \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ShichengChen/WaveUNet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-08-14T12:50:43Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-06T16:38:12Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8832686864895404
      ],
      "excerpt": "implement Wave-U-Net by pytorch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9257387431606404
      ],
      "excerpt": ":#:(for ccmixter only) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9257387431606404
      ],
      "excerpt": ":#:(for musdb18 only) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9042078666339435
      ],
      "excerpt": "pyramidnet.py(in the middle of nework, use different dilation rate filters to extract features, learned from deep lab series) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8031107528158516
      ],
      "excerpt": "unetd.py(use wave-u-net with dilation filters) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "implement Wave-U-Net by pytorch",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ShichengChen/WaveUNet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 9,
      "date": "Wed, 29 Dec 2021 18:50:33 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ShichengChen/WaveUNet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ShichengChen/WaveUNet",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": " - pytorch 0.4\n - tensorboardX (using tensorboard with pytorch, if you do not want to use tensorboard, set USEBOARD as False)\n - soundfile\n - h5py\n - numpy\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8977318807613508
      ],
      "excerpt": "- you can choose one between these two. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8121830975540228
      ],
      "excerpt": "if you only use musdb18, you should have 50.wav, 51.wav, to 199.wav. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8493918735632834
      ],
      "excerpt": "if you just want to train the model, use commandTrain.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8060385393026928
      ],
      "excerpt": "python commandTrain.py --dataset both  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.921108411272225
      ],
      "excerpt": "python commandTrain.py --dataset ccmixter  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.921108411272225
      ],
      "excerpt": "python commandTrain.py --dataset musdb18  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516,
        0.8801854956928516
      ],
      "excerpt": "- from modelStruct.pyramidnet import Unet[1] \n- from modelStruct.unet import Unet[2]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8342236966294383,
        0.8997243352845468,
        0.8342634050770269
      ],
      "excerpt": "training_set = Dataset(np.arange(150), 'ccmixter2/') \ntest_set = Testset(np.arange(140,160), 'ccmixter2/') \nvalidation_set =Valtset(np.arange(150,200), 'ccmixter2/') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9600659928541957,
        0.90921178142873,
        0.8337067346510144,
        0.8337788414971282
      ],
      "excerpt": "transformData.py (same as utils file) \nreadccmu.py (read ccmixter and musdb18) \nreadchinese.py (read 20000 songs) \nreadpiano.py (read piano songs which is download from youtube to train wavenet, but now it is useless) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ShichengChen/WaveUNet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 ShichengChen\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "WaveUNet",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "WaveUNet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ShichengChen",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ShichengChen/WaveUNet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 47,
      "date": "Wed, 29 Dec 2021 18:50:33 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": " - trainForRandomGen.py (use ccmixter and musdb as dataset to train model)\n - trainchinese.py (use chinese songs as dataset to train model)\n - trainclassify.py (use classification instead regression, classification can also generalize as good as regression but much more noise)\n",
      "technique": "Header extraction"
    }
  ]
}