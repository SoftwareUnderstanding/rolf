{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1708.02182",
      "https://arxiv.org/abs/1612.04426",
      "https://arxiv.org/abs/1708.02182"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{merityRegOpt,\n  title={{Regularizing and Optimizing LSTM Language Models}},\n  author={Merity, Stephen and Keskar, Nitish Shirish and Socher, Richard},\n  journal={arXiv preprint arXiv:1708.02182},\n  year={2017}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9995457175598671
      ],
      "excerpt": "If you use this code or our results in your research, please cite: \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Asteur/RERITES-AvgWeightDescentLSTM-PoetryGeneration",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-08-21T22:21:27Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-08-21T22:23:13Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.985311877723753,
        0.9502691437764413,
        0.9821220487466656,
        0.9622729589931469
      ],
      "excerpt": "Salesforce updated Facebook's Pytorch Word-Language-Model, and the results seem to produce a mild improvement in quality of generated text while offering faster convergence during training. \nThis repository contains the code used for Salesforce Research's Regularizing and Optimizing LSTM Language Models paper, originally forked from the PyTorch word level language modeling example. \nThe model comes with instructions to train a word level language model over the Penn Treebank (PTB) and WikiText-2 (WT2) datasets, though the model is likely extensible to many other datasets. \nThe model can be composed of an LSTM or a Quasi-Recurrent Neural Network (QRNN) which is two or more times faster than the cuDNN LSTM in this setup while achieving equivalent or better accuracy. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8111396861526387,
        0.9417042596013939
      ],
      "excerpt": "Finetune the model using finetune.py \nApply the continuous cache pointer to the finetuned model using pointer.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9378103597262917
      ],
      "excerpt": "The codebase was modified during the writing of the paper, preventing exact reproduction due to minor differences in random seeds or similar. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8363225255712923,
        0.8856846211367155,
        0.9598413814546597,
        0.9128763495250674
      ],
      "excerpt": "Next, decide whether to use the QRNN or the LSTM as the underlying recurrent neural network model. \nThe QRNN is many times faster than even Nvidia's cuDNN optimized LSTM (and dozens of times faster than a naive LSTM implementation) yet achieves similar or better results than the LSTM. \nAt the time of writing, the QRNN models use the same number of parameters and are slightly deeper networks but are two to four times faster per epoch and require less epochs to converge. \nThe QRNN model uses a QRNN with convolutional size 2 for the first layer, allowing the model to view discrete natural language inputs (i.e. \"New York\"), while all other layers use a convolutional size of 1. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9870690753066664
      ],
      "excerpt": "The instruction below trains a PTB model that without finetuning achieves perplexities of approximately 61.2 / 58.8 (validation / testing), with finetuning achieves perplexities of approximately 58.8 / 56.5, and with the continuous cache pointer augmentation achieves perplexities of approximately 53.2 / 52.5. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9870690753066664
      ],
      "excerpt": "The instruction below trains a QRNN model that without finetuning achieves perplexities of approximately 60.6 / 58.3 (validation / testing), with finetuning achieves perplexities of approximately 59.1 / 56.7, and with the continuous cache pointer augmentation achieves perplexities of approximately 53.4 / 52.6. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9891164644311351
      ],
      "excerpt": "The instruction below trains a PTB model that without finetuning achieves perplexities of approximately 68.7 / 65.6 (validation / testing), with finetuning achieves perplexities of approximately 67.4 / 64.7, and with the continuous cache pointer augmentation achieves perplexities of approximately 52.2 / 50.6. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9819711850863249
      ],
      "excerpt": "The instruction below will a QRNN model that without finetuning achieves perplexities of approximately 69.3 / 66.8 (validation / testing), with finetuning achieves perplexities of approximately 68.5 / 65.9, and with the continuous cache pointer augmentation achieves perplexities of approximately 53.6 / 52.1. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8235360156362893
      ],
      "excerpt": "The default speeds for the models during training on an NVIDIA Quadro GP100: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9927727818939408,
        0.9540256510762326,
        0.9175356766244863,
        0.9867411433783557,
        0.9700412311787676
      ],
      "excerpt": "The default QRNN models can be far faster than the cuDNN LSTM model, with the speed-ups depending on how much of a bottleneck the RNN is. The majority of the model time above is now spent in softmax or optimization overhead (see PyTorch QRNN discussion on speed). \nSpeeds are approximately three times slower on a K80. On a K80 or other memory cards with less memory you may wish to enable the cap on the maximum sampled sequence length to prevent out-of-memory (OOM) errors, especially for WikiText-2. \nIf speed is a major issue, SGD converges more quickly than our non-monotonically triggered variant of ASGD though achieves a worse overall perplexity. \nFor full details, refer to the PyTorch QRNN repository. \nAll the augmentations to the LSTM, including our variant of DropConnect (Wan et al. 2013) termed weight dropping which adds recurrent dropout, allow for the use of NVIDIA's cuDNN LSTM implementation. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Asteur/RERITES-AvgWeightDescentLSTM-PoetryGeneration/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 05:59:43 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Asteur/RERITES-AvgWeightDescentLSTM-PoetryGeneration/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Asteur/RERITES-AvgWeightDescentLSTM-PoetryGeneration",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Asteur/RERITES-AvgWeightDescentLSTM-PoetryGeneration/master/getdata.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9986563398845941
      ],
      "excerpt": "Install PyTorch 0.2 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8671526817437554
      ],
      "excerpt": "For data setup, run ./getdata.sh. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9559614939205502
      ],
      "excerpt": "PyTorch will automatically use the cuDNN backend if run on CUDA with cuDNN installed. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9030504587953663,
        0.8717294828563956
      ],
      "excerpt": "Train the base model using main.py \nFinetune the model using finetune.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9504400517758302,
        0.9367314112780453,
        0.9022285019093377
      ],
      "excerpt": "python main.py --batch_size 20 --data data/penn --dropouti 0.4 --dropouth 0.25 --seed 141 --epoch 500 --save PTB.pt \npython finetune.py --batch_size 20 --data data/penn --dropouti 0.4 --dropouth 0.25 --seed 141 --epoch 500 --save PTB.pt \npython pointer.py --data data/penn --save PTB.pt --lambdasm 0.1 --theta 1.0 --window 500 --bptt 5000 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9306836061768479,
        0.9100158255801801,
        0.8905714189606874
      ],
      "excerpt": "python -u main.py --model QRNN --batch_size 20 --clip 0.2 --wdrop 0.1 --nhid 1550 --nlayers 4 --emsize 400 --dropouth 0.3 --seed 9001 --dropouti 0.4 --epochs 550 --save PTB.pt \npython -u finetune.py --model QRNN --batch_size 20 --clip 0.2 --wdrop 0.1 --nhid 1550 --nlayers 4 --emsize 400 --dropouth 0.3 --seed 404 --dropouti 0.4 --epochs 300 --save PTB.pt \npython pointer.py --model QRNN --lambdasm 0.1 --theta 1.0 --window 500 --bptt 5000 --save PTB.pt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9232916405646634,
        0.896422779876524,
        0.9022285019093377
      ],
      "excerpt": "python main.py --epochs 750 --data data/wikitext-2 --save WT2.pt --dropouth 0.2 --seed 1882 \npython finetune.py --epochs 750 --data data/wikitext-2 --save WT2.pt --dropouth 0.2 --seed 1882 \npython pointer.py --save WT2.pt --lambdasm 0.1279 --theta 0.662 --window 3785 --bptt 2000 --data data/wikitext-2 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9425436928895772,
        0.9259110775846796,
        0.9150892914480145
      ],
      "excerpt": "python -u main.py --epochs 500 --data data/wikitext-2 --clip 0.25 --dropouti 0.4 --dropouth 0.2 --nhid 1550  --nlayers 4 --seed 4002 --model QRNN --wdrop 0.1 --batch_size 40 --save WT2.pt \npython finetune.py --epochs 500 --data data/wikitext-2 --clip 0.25 --dropouti 0.4 --dropouth 0.2 --nhid 1550 --nlayers 4 --seed 4002 --model QRNN --wdrop 0.1 --batch_size 40 --save WT2.pt \npython -u pointer.py --save WT2.pt --model QRNN --lambdasm 0.1279 --theta 0.662 --window 3785 --bptt 2000 --data data/wikitext-2 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8257593487728601,
        0.8548058306153065
      ],
      "excerpt": "Penn Treebank (batch size 20): LSTM takes 65 seconds per epoch, QRNN takes 28 seconds per epoch \nWikiText-2 (batch size 20): LSTM takes 180 seconds per epoch, QRNN takes 90 seconds per epoch \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Asteur/RERITES-AvgWeightDescentLSTM-PoetryGeneration/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Adapted AWD-LSTM / AWD-QRNN Language Model",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "RERITES-AvgWeightDescentLSTM-PoetryGeneration",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Asteur",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Asteur/RERITES-AvgWeightDescentLSTM-PoetryGeneration/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Python 3 and PyTorch 0.2 are required for the current codebase.\n\nIncluded below are hyper parameters to get equivalent or better results to those included in the original paper.\n\nIf you need to use an earlier version of the codebase, the original code and hyper parameters accessible at the [PyTorch==0.1.12](https://github.com/salesforce/awd-lstm-lm/tree/PyTorch%3D%3D0.1.12) release, with Python 3 and PyTorch 0.1.12 are required.\nIf you are using Anaconda, installation of PyTorch 0.1.12 can be achieved via:\n`conda install pytorch=0.1.12 -c soumith`.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 05:59:43 GMT"
    },
    "technique": "GitHub API"
  }
}