{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "thanks to Philippe Esling (https://github.com/acids-ircam) and Thomas Haferlach (https://github.com/voodoohop) for their help in developping the data preparation pipelines\n\ndata preparation aims at extracting music bars aligned on the downbeat and stretching them to the target BPM\n\nwe either rely on python packages (e.g. librosa, madmom) or on parsing warp markers from Ableton .asd files (https://github.com/voodoohop/extract-warpmarkers)\n\nthanks as well to Antoine Caillon (https://github.com/caillonantoine) for insightful discussion on the challenges of training GANs\n\nand thanks to IRCAM and Compute Canada for the allowed computation ressources for training models\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1910.06711\n\nhttps://github.com/seungwonpark/melgan\n\nWaveGAN\n\nhttps://arxiv.org/abs/1802.04208\n\nhttps://github.com/mostafaelaraby/wavegan-pytorch\n\nnice review of GAN frameworks\n\nhttps://arxiv.org/abs/1807.04720\n\nthe AEs+GANs framework \n\nhttps://arxiv.org/abs/1512.09300\n\n\n## ACKNOWLEDGEMENTS\n\nthanks to Philippe Esling (https://github.com/acids-ircam",
      "https://arxiv.org/abs/1802.04208\n\nhttps://github.com/mostafaelaraby/wavegan-pytorch\n\nnice review of GAN frameworks\n\nhttps://arxiv.org/abs/1807.04720\n\nthe AEs+GANs framework \n\nhttps://arxiv.org/abs/1512.09300\n\n\n## ACKNOWLEDGEMENTS\n\nthanks to Philippe Esling (https://github.com/acids-ircam",
      "https://arxiv.org/abs/1807.04720\n\nthe AEs+GANs framework \n\nhttps://arxiv.org/abs/1512.09300\n\n\n## ACKNOWLEDGEMENTS\n\nthanks to Philippe Esling (https://github.com/acids-ircam",
      "https://arxiv.org/abs/1512.09300\n\n\n## ACKNOWLEDGEMENTS\n\nthanks to Philippe Esling (https://github.com/acids-ircam"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9334341650927139
      ],
      "excerpt": "  <img src=\"./figures/bergan_gan_train.jpg\" width=\"750\" title=\"GAN training\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9546157635310808
      ],
      "excerpt": "  <img src=\"./figures/bergan_interp.jpg\" width=\"750\" title=\"generator interpolation\"> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/adrienchaton/BERGAN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-05-24T14:39:21Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-06-24T13:34:20Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9385814654270617
      ],
      "excerpt": "work in progress, project submitted to an open call \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8982487938001446
      ],
      "excerpt": "these requirements do not cover the data preparation pipelines described at the bottom of the readme \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.893581091577716
      ],
      "excerpt": "without GP the GANs are very prone to mode collapse/overfitting, also avoid BN discriminator with GP \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9129274102350625
      ],
      "excerpt": "VAE/GAN adds the KLD regularization to the encoder and WAE/GAN adds the MMD regularization = both impose a gaussian prior for sampling and interpolation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9755867679327295,
        0.9532657670955043
      ],
      "excerpt": "examples of random linear interpolations with 20 points equally spaced in the generator latent space = 20 bars = 40 sec. \ntraining data is between 5.000 and 20.000 examples of bars extracted from recordings of the \"Raster Norton\" label \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.921881027183007
      ],
      "excerpt": "models were trained for 48 hours on a single V100 GPU (a 12GB GPU is fine too) ; sampling of 40 sec. on Macbook Pro CPU (2015) takes about 3 sec. so the inference speed is reasonable \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.875644904465036
      ],
      "excerpt": "optimize the generator to sample realistic 1 bar audio of 2 sec. (120BPM) at SR=16kHz (extendable to 32kHz or 48kHz) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9364833459962122
      ],
      "excerpt": "sample series of 1 bar audio along a random linear interpolation and concatenate the generator outputs into a track at fixed BPM with progressive variation of rhythmic and acoustic contents \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8399152668005562
      ],
      "excerpt": "nice review of GAN frameworks \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/adrienchaton/BERGAN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 21 Dec 2021 01:16:03 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/adrienchaton/BERGAN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "adrienchaton/BERGAN",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.996803012778452
      ],
      "excerpt": "minimal requirements, can be installed with pip in a python3 virtualenv (pip install -r requirements.txt) \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8700200438755119
      ],
      "excerpt": "code base = __export_interp.py + __nn_utils.py + __train.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8700200438755119
      ],
      "excerpt": "code base = __export_interp_ae.py + __nn_utils_ae.py + __train_ae.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8906698930014693
      ],
      "excerpt": "make a google colab demo (with pretrained models to run in __export_interp.py) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8261677679447108
      ],
      "excerpt": "  <img src=\"./figures/bergan_gan_train.jpg\" width=\"750\" title=\"GAN training\"> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/adrienchaton/BERGAN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "BERGAN: music bar generation and techno music with GANs",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "BERGAN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "adrienchaton",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/adrienchaton/BERGAN/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Tue, 21 Dec 2021 01:16:03 GMT"
    },
    "technique": "GitHub API"
  }
}