{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2003.04297",
      "https://arxiv.org/abs/1911.05722",
      "https://arxiv.org/abs/2003.04297"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "  * K. He, et. al [Momentum Contrast for Unsupervised Visual Representation Learning](https://arxiv.org/abs/1911.05722)\n\n\n  * X. Chen, et. al [Improved Baselines with Momentum Contrastive Learning](https://arxiv.org/abs/2003.04297)\n\n\n  * facebookresearch [MoCo Code](https://github.com/facebookresearch/moco)\n\n\n  * HobbitLong [CMC](https://github.com/HobbitLong/CMC)\n\n\n  * T. Chen, et. al [SimCLR Paper](https://arxiv.org/pdf/2002.05709.pdf)\n\n\n  * noahgolmant [pytorch-lars](https://github.com/noahgolmant/pytorch-lars)\n\n\n  * pytorch [torchvision ResNet](https://github.com/pytorch/vision/blob/master/torchvision/models/resnet.py)\n\n\n  * fabio-deep [Distributed-Pytorch-Boilerplate](https://github.com/fabio-deep/Distributed-Pytorch-Boilerplate)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9818894004866677
      ],
      "excerpt": "Author: Aiden Durrant \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9522918465181198
      ],
      "excerpt": "For more info on multi-node and multi-gpu distributed training refer to https://github.com/hgrover/pytorchdistr/blob/master/README.md \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8941305907757809
      ],
      "excerpt": "[ ] Research and Implement BatchNorm Shuffle for DistributedDataParallel \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/AidenDurrant/MoCo-Pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-04-20T16:16:17Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-13T06:39:33Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9880462365526689,
        0.9922582494994112
      ],
      "excerpt": "Unofficial Pytorch implemnentation of MoCoV2: \"Improved Baselines with Momentum Contrastive Learning.\" \nThis repo uses elements from CMC and MoCo Code, in which the MoCoV2 model is implementated into my existing pytorch Boilerplate and workflow. Additionally, this repo aims to align nicely with my implementation of SimCLR found here:. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8177659158956955
      ],
      "excerpt": "Top-1 Acc / Error of linear evaluation on CIFAR10: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801207104367932
      ],
      "excerpt": "Note: For Linear Evaluation the ResNet is frozen (all layers), training is only perfomed on the supervised Linear Evaluation layer. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.879512719190387
      ],
      "excerpt": "The number of CPU threads to use per process is hard coded to torch.set_num_threads(1) for safety, and can be changed to `your \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9535699035202206
      ],
      "excerpt": "To evaluate the performace of a pre-trained model in a linear classification task just include the flag --finetune and provide a path to the pretrained model to --load_checkpoint_dir. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "             [--dataset_path DATASET_PATH] [--model MODEL] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9600168690874294
      ],
      "excerpt": "--patience PATIENCE   Number of Epochs to Wait for Improvement. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8300458068370943
      ],
      "excerpt": "--jitter_p JITTER_P   Probability to Apply Random Colour Jitter Augmentation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9693233393948762,
        0.8300458068370943
      ],
      "excerpt": "                      Radius to Apply Random Colour Jitter Augmentation \n--blur_p BLUR_P       Probability to Apply Gaussian Blur Augmentation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9152573396340556
      ],
      "excerpt": "                      Create Two Views of the Input for Contrastive \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "An unofficial Pytorch implementation of \"Improved Baselines with Momentum Contrastive Learning\" (MoCoV2) - X. Chen, et al.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/AidenDurrant/MoCo-Pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Thu, 23 Dec 2021 10:57:51 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/AidenDurrant/MoCo-Pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "AidenDurrant/MoCo-Pytorch",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/AidenDurrant/MoCo-Pytorch/master/src/kill_zombie.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.914156645802066,
        0.8230307525305243
      ],
      "excerpt": "Pytorch MocoV2 Args that start with '--' (eg. --dataset) can also be set in a \nconfig file (<PATH>/MoCo-Pytorch/config.conf or specified via -c). Config \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9465559145452165
      ],
      "excerpt": "Launch the script from src/main.py: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8561350384205758
      ],
      "excerpt": "<img src=\"media/CosineAnnealingLR.png\" width=\"50%\" height=\"50%\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8150142126754444
      ],
      "excerpt": "python -m torch.distributed.launch --nnodes=1 --node_rank=0 --nproc_per_node=2 --use_env main.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9333384803827206,
        0.8283495022245155
      ],
      "excerpt": "python main.py --no_distributed \nNote: The default config selects to use --no_distributed, therefore runnning python main.py runs the default hyperparameters without DistributedDataParallel. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.813349825114301
      ],
      "excerpt": "python main.py --no_distributed --finetune --load_checkpoint_dir ~/Documents/MoCo-Pytorch/experiments/yyyy-mm-dd_hh-mm-ss/checkpoint.pt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9390733744466568
      ],
      "excerpt": "usage: main.py [-h] [-c MY_CONFIG] [--dataset DATASET] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8178431130131352
      ],
      "excerpt": "place, then commandline values override config file values which override \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8178447200315933,
        0.8330062873105959
      ],
      "excerpt": "                      config file path \n--dataset DATASET     Dataset, (Options: cifar10, cifar100, stl10, imagenet, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8004058730395989
      ],
      "excerpt": "--model MODEL         Model, (Options: resnet18, resnet34, resnet50, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8319909327176609
      ],
      "excerpt": "                      Number of Samples Per Batch. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8174540907975313
      ],
      "excerpt": "                      Training. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "                      True) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/AidenDurrant/MoCo-Pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Unofficial Pytorch Implementation of MocCoV2",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "MoCo-Pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "AidenDurrant",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/AidenDurrant/MoCo-Pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Install dependencies with `requrements.txt`\n\n  `pip install -r requrements.txt`\n\n```\ntorch\ntorchvision\ntensorboard\ntqdm\nconfigargparse\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 43,
      "date": "Thu, 23 Dec 2021 10:57:51 GMT"
    },
    "technique": "GitHub API"
  }
}