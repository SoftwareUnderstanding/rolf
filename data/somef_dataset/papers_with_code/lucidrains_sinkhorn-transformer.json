{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2002.11296\">Sparse Sinkhorn Attention</a>, with additional enhancements.\n\nIt includes a parameterized sorting network, using sinkhorn normalization to sample a permutation matrix that matches the most relevant buckets of keys to the buckets of queries.\n\nThis work also brings in reversible networks and feed forward chunking (concepts introduced from <a href=\"https://openreview.net/forum?id=rkgNKkHtvB\">Reformer</a>",
      "https://arxiv.org/abs/2002.11296}\n}\n```\n\n```bibtex\n@inproceedings{kitaev2020reformer,\n    title       = {Reformer: The Efficient Transformer},\n    author      = {Nikita Kitaev and Lukasz Kaiser and Anselm Levskaya},\n    booktitle   = {International Conference on Learning Representations},\n    year        = {2020},\n    url         = {https://openreview.net/forum?id=rkgNKkHtvB}\n}\n```\n\n```bibtex\n@misc{lan2019albert,\n    title       = {ALBERT: A Lite BERT for Self-supervised Learning of Language Representations},\n    author      = {Zhenzhong Lan and Mingda Chen and Sebastian Goodman and Kevin Gimpel and Piyush Sharma and Radu Soricut},\n    year        = {2019},\n    url         = {https://arxiv.org/abs/1909.11942}\n}\n```\n\n```bibtex\n@misc{shazeer2020glu,\n    title   = {GLU Variants Improve Transformer},\n    author  = {Noam Shazeer},\n    year    = {2020},\n    url     = {https://arxiv.org/abs/2002.05202}\n}\n```\n\n```bibtex\n@misc{roy*2020efficient,\n    title   = {Efficient Content-Based Sparse Attention with Routing Transformers},\n    author  = {Aurko Roy* and Mohammad Taghi Saffar* and David Grangier and Ashish Vaswani},\n    year    = {2020},\n    url     = {https://openreview.net/forum?id=B1gjs6EtDr}\n}\n```\n\n```bibtex\n@inproceedings{fan2020reducing,\n    title     ={Reducing Transformer Depth on Demand with Structured Dropout},\n    author    ={Angela Fan and Edouard Grave and Armand Joulin},\n    booktitle ={International Conference on Learning Representations},\n    year      ={2020},\n    url       ={https://openreview.net/forum?id=SylO2yStDr}\n}\n```\n\n```bibtex\n@misc{lample2019large,\n    title   = {Large Memory Layers with Product Keys},\n    author  = {Guillaume Lample and Alexandre Sablayrolles and Marc'Aurelio Ranzato and Ludovic Denoyer and Herv\u00e9 J\u00e9gou},\n    year    = {2019},\n    eprint  = {1907.05242},\n    archivePrefix = {arXiv}\n}\n```\n\n```bibtex\n@misc{bhojanapalli2020lowrank,\n    title   = {Low-Rank Bottleneck in Multi-head Attention Models},\n    author  = {Srinadh Bhojanapalli and Chulhee Yun and Ankit Singh Rawat and Sashank J. Reddi and Sanjiv Kumar},\n    year    = {2020},\n    eprint  = {2002.07028}\n}\n```\n\n<img src=\"./divine.png\"></img",
      "https://arxiv.org/abs/1909.11942}\n}\n```\n\n```bibtex\n@misc{shazeer2020glu,\n    title   = {GLU Variants Improve Transformer},\n    author  = {Noam Shazeer},\n    year    = {2020},\n    url     = {https://arxiv.org/abs/2002.05202}\n}\n```\n\n```bibtex\n@misc{roy*2020efficient,\n    title   = {Efficient Content-Based Sparse Attention with Routing Transformers},\n    author  = {Aurko Roy* and Mohammad Taghi Saffar* and David Grangier and Ashish Vaswani},\n    year    = {2020},\n    url     = {https://openreview.net/forum?id=B1gjs6EtDr}\n}\n```\n\n```bibtex\n@inproceedings{fan2020reducing,\n    title     ={Reducing Transformer Depth on Demand with Structured Dropout},\n    author    ={Angela Fan and Edouard Grave and Armand Joulin},\n    booktitle ={International Conference on Learning Representations},\n    year      ={2020},\n    url       ={https://openreview.net/forum?id=SylO2yStDr}\n}\n```\n\n```bibtex\n@misc{lample2019large,\n    title   = {Large Memory Layers with Product Keys},\n    author  = {Guillaume Lample and Alexandre Sablayrolles and Marc'Aurelio Ranzato and Ludovic Denoyer and Herv\u00e9 J\u00e9gou},\n    year    = {2019},\n    eprint  = {1907.05242},\n    archivePrefix = {arXiv}\n}\n```\n\n```bibtex\n@misc{bhojanapalli2020lowrank,\n    title   = {Low-Rank Bottleneck in Multi-head Attention Models},\n    author  = {Srinadh Bhojanapalli and Chulhee Yun and Ankit Singh Rawat and Sashank J. Reddi and Sanjiv Kumar},\n    year    = {2020},\n    eprint  = {2002.07028}\n}\n```\n\n<img src=\"./divine.png\"></img",
      "https://arxiv.org/abs/2002.05202}\n}\n```\n\n```bibtex\n@misc{roy*2020efficient,\n    title   = {Efficient Content-Based Sparse Attention with Routing Transformers},\n    author  = {Aurko Roy* and Mohammad Taghi Saffar* and David Grangier and Ashish Vaswani},\n    year    = {2020},\n    url     = {https://openreview.net/forum?id=B1gjs6EtDr}\n}\n```\n\n```bibtex\n@inproceedings{fan2020reducing,\n    title     ={Reducing Transformer Depth on Demand with Structured Dropout},\n    author    ={Angela Fan and Edouard Grave and Armand Joulin},\n    booktitle ={International Conference on Learning Representations},\n    year      ={2020},\n    url       ={https://openreview.net/forum?id=SylO2yStDr}\n}\n```\n\n```bibtex\n@misc{lample2019large,\n    title   = {Large Memory Layers with Product Keys},\n    author  = {Guillaume Lample and Alexandre Sablayrolles and Marc'Aurelio Ranzato and Ludovic Denoyer and Herv\u00e9 J\u00e9gou},\n    year    = {2019},\n    eprint  = {1907.05242},\n    archivePrefix = {arXiv}\n}\n```\n\n```bibtex\n@misc{bhojanapalli2020lowrank,\n    title   = {Low-Rank Bottleneck in Multi-head Attention Models},\n    author  = {Srinadh Bhojanapalli and Chulhee Yun and Ankit Singh Rawat and Sashank J. Reddi and Sanjiv Kumar},\n    year    = {2020},\n    eprint  = {2002.07028}\n}\n```\n\n<img src=\"./divine.png\"></img"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bibtex\n@misc{tay2020sparse,\n    title   = {Sparse Sinkhorn Attention},\n    author  = {Yi Tay and Dara Bahri and Liu Yang and Donald Metzler and Da-Cheng Juan},\n    year    = {2020},\n    url.    = {https://arxiv.org/abs/2002.11296}\n}\n```\n\n```bibtex\n@inproceedings{kitaev2020reformer,\n    title       = {Reformer: The Efficient Transformer},\n    author      = {Nikita Kitaev and Lukasz Kaiser and Anselm Levskaya},\n    booktitle   = {International Conference on Learning Representations},\n    year        = {2020},\n    url         = {https://openreview.net/forum?id=rkgNKkHtvB}\n}\n```\n\n```bibtex\n@misc{lan2019albert,\n    title       = {ALBERT: A Lite BERT for Self-supervised Learning of Language Representations},\n    author      = {Zhenzhong Lan and Mingda Chen and Sebastian Goodman and Kevin Gimpel and Piyush Sharma and Radu Soricut},\n    year        = {2019},\n    url         = {https://arxiv.org/abs/1909.11942}\n}\n```\n\n```bibtex\n@misc{shazeer2020glu,\n    title   = {GLU Variants Improve Transformer},\n    author  = {Noam Shazeer},\n    year    = {2020},\n    url     = {https://arxiv.org/abs/2002.05202}\n}\n```\n\n```bibtex\n@misc{roy*2020efficient,\n    title   = {Efficient Content-Based Sparse Attention with Routing Transformers},\n    author  = {Aurko Roy* and Mohammad Taghi Saffar* and David Grangier and Ashish Vaswani},\n    year    = {2020},\n    url     = {https://openreview.net/forum?id=B1gjs6EtDr}\n}\n```\n\n```bibtex\n@inproceedings{fan2020reducing,\n    title     ={Reducing Transformer Depth on Demand with Structured Dropout},\n    author    ={Angela Fan and Edouard Grave and Armand Joulin},\n    booktitle ={International Conference on Learning Representations},\n    year      ={2020},\n    url       ={https://openreview.net/forum?id=SylO2yStDr}\n}\n```\n\n```bibtex\n@misc{lample2019large,\n    title   = {Large Memory Layers with Product Keys},\n    author  = {Guillaume Lample and Alexandre Sablayrolles and Marc'Aurelio Ranzato and Ludovic Denoyer and Herv\u00e9 J\u00e9gou},\n    year    = {2019},\n    eprint  = {1907.05242},\n    archivePrefix = {arXiv}\n}\n```\n\n```bibtex\n@misc{bhojanapalli2020lowrank,\n    title   = {Low-Rank Bottleneck in Multi-head Attention Models},\n    author  = {Srinadh Bhojanapalli and Chulhee Yun and Ankit Singh Rawat and Sashank J. Reddi and Sanjiv Kumar},\n    year    = {2020},\n    eprint  = {2002.07028}\n}\n```\n\n<img src=\"./divine.png\"></img>",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{bhojanapalli2020lowrank,\n    title   = {Low-Rank Bottleneck in Multi-head Attention Models},\n    author  = {Srinadh Bhojanapalli and Chulhee Yun and Ankit Singh Rawat and Sashank J. Reddi and Sanjiv Kumar},\n    year    = {2020},\n    eprint  = {2002.07028}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{lample2019large,\n    title   = {Large Memory Layers with Product Keys},\n    author  = {Guillaume Lample and Alexandre Sablayrolles and Marc'Aurelio Ranzato and Ludovic Denoyer and Herv\u00e9 J\u00e9gou},\n    year    = {2019},\n    eprint  = {1907.05242},\n    archivePrefix = {arXiv}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{fan2020reducing,\n    title     ={Reducing Transformer Depth on Demand with Structured Dropout},\n    author    ={Angela Fan and Edouard Grave and Armand Joulin},\n    booktitle ={International Conference on Learning Representations},\n    year      ={2020},\n    url       ={https://openreview.net/forum?id=SylO2yStDr}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{roy*2020efficient,\n    title   = {Efficient Content-Based Sparse Attention with Routing Transformers},\n    author  = {Aurko Roy* and Mohammad Taghi Saffar* and David Grangier and Ashish Vaswani},\n    year    = {2020},\n    url     = {https://openreview.net/forum?id=B1gjs6EtDr}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{shazeer2020glu,\n    title   = {GLU Variants Improve Transformer},\n    author  = {Noam Shazeer},\n    year    = {2020},\n    url     = {https://arxiv.org/abs/2002.05202}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{lan2019albert,\n    title       = {ALBERT: A Lite BERT for Self-supervised Learning of Language Representations},\n    author      = {Zhenzhong Lan and Mingda Chen and Sebastian Goodman and Kevin Gimpel and Piyush Sharma and Radu Soricut},\n    year        = {2019},\n    url         = {https://arxiv.org/abs/1909.11942}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{kitaev2020reformer,\n    title       = {Reformer: The Efficient Transformer},\n    author      = {Nikita Kitaev and Lukasz Kaiser and Anselm Levskaya},\n    booktitle   = {International Conference on Learning Representations},\n    year        = {2020},\n    url         = {https://openreview.net/forum?id=rkgNKkHtvB}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{tay2020sparse,\n    title   = {Sparse Sinkhorn Attention},\n    author  = {Yi Tay and Dara Bahri and Liu Yang and Donald Metzler and Da-Cheng Juan},\n    year    = {2020},\n    url.    = {https://arxiv.org/abs/2002.11296}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": " 204k tokens (demonstration purposes) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "    depth = 12, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "    depth = 12, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "    use_simple_sort_net = True, #: turn off attention sort net \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "    depth = 12, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9105368110547479
      ],
      "excerpt": "Routing Transformer - https://github.com/lucidrains/routing-transformer \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lucidrains/sinkhorn-transformer",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-04-03T17:38:29Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-03T06:07:27Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9177064556395896,
        0.9790135864957823,
        0.9201862012392535
      ],
      "excerpt": "This is a reproduction of the work outlined in <a href=\"https://arxiv.org/abs/2002.11296\">Sparse Sinkhorn Attention</a>, with additional enhancements. \nIt includes a parameterized sorting network, using sinkhorn normalization to sample a permutation matrix that matches the most relevant buckets of keys to the buckets of queries. \nThis work also brings in reversible networks and feed forward chunking (concepts introduced from <a href=\"https://openreview.net/forum?id=rkgNKkHtvB\">Reformer</a>) to bring about further memory savings. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8708402408903373
      ],
      "excerpt": "By default the model will complain if given an input that is not a multiple of the bucket size. To avoid having to make the same padding calculations each time, you can use the helper Autopadder class. It will take care of the input_mask for you as well, if given. Contextual key/values and mask are supported as well. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = SinkhornTransformerLM( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model(x) #: (1, 1117, 20000) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9869465768182171
      ],
      "excerpt": "This repository has diverged from the paper and is now using attention in place of the original sorting net + gumbel sinkhorn sampling. I have not found a noticeable difference in performance yet, and the new scheme allows me to generalize the network to flexible sequence lengths. If you would like to try Sinkhorn, please use the following settings, which only works for non-causal networks. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = SinkhornTransformerLM( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9702624303911027
      ],
      "excerpt": "    non_permutative = False,    #: allow buckets of keys to be sorted to queries more than once \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model(x) #: (1, 8192, 20000) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9838541693009993
      ],
      "excerpt": "To see the benefits of using PKM, the learning rate of the values must be set higher than the rest of the parameters. (Recommended to be 1e-2) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9310930178660156,
        0.9404553927518752
      ],
      "excerpt": "Sinkhorn, when trained on fixed length sequences, seems to have trouble decoding sequences from scratch, mainly due to the fact that the sorting net has trouble generalizing when the buckets are partially filled with padding tokens. \nFortunately, I think I have found a simple solution. During training, for causal networks, randomly truncate the sequences and force the sorting net to generalize. I have provided a flag (randomly_truncate_sequence) for the AutoregressiveWrapper instance to make this easy. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = SinkhornTransformerLM( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = AutoregressiveWrapper(model) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9970579568954944,
        0.9506392518847121
      ],
      "excerpt": "There is a potential problem with the causal sorting network, where the decision of which key/value buckets of the past sorts to a bucket is dependent only on the first token and not the rest (due to the bucketing scheme and preventing leakage of future to past). \nI have attempted to alleviate this problem by rotating half the heads to the left by bucket size - 1, thereby promoting the last token to be first. This is also the reason why the AutoregressiveWrapper defaults to left padding during training, to always make sure that the last token in the sequence have a say in what to retrieve. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Sinkhorn Transformer - Practical implementation of Sparse Sinkhorn Attention",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lucidrains/sinkhorn-transformer/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 13,
      "date": "Tue, 21 Dec 2021 12:03:05 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "lucidrains/sinkhorn-transformer",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\n$ pip install sinkhorn_transformer\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9179688463369292
      ],
      "excerpt": "You can follow the instructions here to set it correctly https://github.com/lucidrains/product-key-memory#learning-rates \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8890818307099057,
        0.8890818307099057
      ],
      "excerpt": "<img src=\"./sinkhorn.png\" width=\"500\"> \n<img src=\"./sortcut.png\" width=\"500\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516,
        0.8801854956928516
      ],
      "excerpt": "from sinkhorn_transformer import SinkhornTransformerLM \nfrom sinkhorn_transformer import Autopadder \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "    causal = True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8797868557111408
      ],
      "excerpt": "model = Autopadder(model, pad_left=True) #: autopadder will fetch the bucket size and autopad input \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from sinkhorn_transformer import SinkhornTransformerLM \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from sinkhorn_transformer import SinkhornTransformerLM, AutoregressiveWrapper \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "    causal = True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.855048412389544
      ],
      "excerpt": "loss = model(x, return_loss = True, randomly_truncate_sequence = True) #: (1, 8192, 20000) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Phil Wang\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Sinkhorn Transformer",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "sinkhorn-transformer",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "lucidrains",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lucidrains/sinkhorn-transformer/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2021-08-10T02:49:35Z",
        "datePublished": "2021-08-10T02:49:49Z",
        "html_url": "https://github.com/lucidrains/sinkhorn-transformer/releases/tag/0.11.4",
        "name": "0.11.4",
        "tag_name": "0.11.4",
        "tarball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/tarball/0.11.4",
        "url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/releases/47575793",
        "zipball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/zipball/0.11.4"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2021-03-18T03:39:15Z",
        "datePublished": "2021-03-18T03:39:27Z",
        "html_url": "https://github.com/lucidrains/sinkhorn-transformer/releases/tag/0.11.3",
        "name": "0.11.3",
        "tag_name": "0.11.3",
        "tarball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/tarball/0.11.3",
        "url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/releases/39980173",
        "zipball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/zipball/0.11.3"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2021-01-02T01:30:25Z",
        "datePublished": "2021-01-02T01:30:40Z",
        "html_url": "https://github.com/lucidrains/sinkhorn-transformer/releases/tag/0.11.2",
        "name": "0.11.2",
        "tag_name": "0.11.2",
        "tarball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/tarball/0.11.2",
        "url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/releases/35903166",
        "zipball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/zipball/0.11.2"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2020-11-04T20:15:43Z",
        "datePublished": "2020-11-04T20:15:59Z",
        "html_url": "https://github.com/lucidrains/sinkhorn-transformer/releases/tag/0.11.1",
        "name": "0.11.1",
        "tag_name": "0.11.1",
        "tarball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/tarball/0.11.1",
        "url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/releases/33471918",
        "zipball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/zipball/0.11.1"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2020-10-29T19:56:56Z",
        "datePublished": "2020-10-29T19:57:11Z",
        "html_url": "https://github.com/lucidrains/sinkhorn-transformer/releases/tag/0.11.0",
        "name": "0.11.0",
        "tag_name": "0.11.0",
        "tarball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/tarball/0.11.0",
        "url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/releases/33239111",
        "zipball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/zipball/0.11.0"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2020-09-17T02:09:40Z",
        "datePublished": "2020-09-17T02:09:58Z",
        "html_url": "https://github.com/lucidrains/sinkhorn-transformer/releases/tag/0.10.3",
        "name": "0.10.3",
        "tag_name": "0.10.3",
        "tarball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/tarball/0.10.3",
        "url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/releases/31438337",
        "zipball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/zipball/0.10.3"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2020-09-17T01:22:58Z",
        "datePublished": "2020-09-17T02:08:00Z",
        "html_url": "https://github.com/lucidrains/sinkhorn-transformer/releases/tag/0.10.2",
        "name": "0.10.2",
        "tag_name": "0.10.2",
        "tarball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/tarball/0.10.2",
        "url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/releases/31438284",
        "zipball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/zipball/0.10.2"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2020-08-05T19:56:25Z",
        "datePublished": "2020-08-05T19:56:42Z",
        "html_url": "https://github.com/lucidrains/sinkhorn-transformer/releases/tag/0.10.1",
        "name": "0.10.1",
        "tag_name": "0.10.1",
        "tarball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/tarball/0.10.1",
        "url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/releases/29380433",
        "zipball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/zipball/0.10.1"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2020-07-14T01:57:26Z",
        "datePublished": "2020-07-14T01:57:39Z",
        "html_url": "https://github.com/lucidrains/sinkhorn-transformer/releases/tag/0.10.0",
        "name": "0.10.0",
        "tag_name": "0.10.0",
        "tarball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/tarball/0.10.0",
        "url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/releases/28525252",
        "zipball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/zipball/0.10.0"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2020-07-05T20:17:37Z",
        "datePublished": "2020-07-05T20:17:59Z",
        "html_url": "https://github.com/lucidrains/sinkhorn-transformer/releases/tag/0.9.1",
        "name": "0.9.1",
        "tag_name": "0.9.1",
        "tarball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/tarball/0.9.1",
        "url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/releases/28235530",
        "zipball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/zipball/0.9.1"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2020-06-22T18:46:12Z",
        "datePublished": "2020-06-22T18:46:53Z",
        "html_url": "https://github.com/lucidrains/sinkhorn-transformer/releases/tag/0.9.0",
        "name": "0.9.0",
        "tag_name": "0.9.0",
        "tarball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/tarball/0.9.0",
        "url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/releases/27799123",
        "zipball_url": "https://api.github.com/repos/lucidrains/sinkhorn-transformer/zipball/0.9.0"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 193,
      "date": "Tue, 21 Dec 2021 12:03:05 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "artificial-intelligence",
      "deep-learning",
      "attention-mechanism",
      "transformers",
      "pytorch"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "A Sinkhorn Transformer based language model\n\n```python\nimport torch\nfrom sinkhorn_transformer import SinkhornTransformerLM\n\nmodel = SinkhornTransformerLM(\n    num_tokens = 20000,\n    dim = 1024,\n    heads = 8,\n    depth = 12,\n    max_seq_len = 8192,\n    bucket_size = 128,        #: size of the buckets\n    causal = False,           #: auto-regressive or not\n    n_sortcut = 2,            #: use sortcut to reduce memory complexity to linear\n    n_top_buckets = 2,        #: sort specified number of key/value buckets to one query bucket. paper is at 1, defaults to 2\n    ff_chunks = 10,           #: feedforward chunking, from Reformer paper\n    reversible = True,        #: make network reversible, from Reformer paper\n    emb_dropout = 0.1,        #: embedding dropout\n    ff_dropout = 0.1,         #: feedforward dropout\n    attn_dropout = 0.1,       #: post attention dropout\n    attn_layer_dropout = 0.1, #: post attention layer dropout\n    layer_dropout = 0.1,      #: add layer dropout, from 'Reducing Transformer Depth on Demand' paper\n    weight_tie = True,        #: tie layer parameters, from Albert paper\n    emb_dim = 128,            #: embedding factorization, from Albert paper\n    dim_head = 64,            #: be able to fix the dimension of each head, making it independent of the embedding dimension and the number of heads\n    ff_glu = True,            #: use GLU in feedforward, from paper 'GLU Variants Improve Transformer'\n    n_local_attn_heads = 2,   #: replace N heads with local attention, suggested to work well from Routing Transformer paper\n    pkm_layers = (4,7),       #: specify layers to use product key memory. paper shows 1 or 2 modules near the middle of the transformer is best\n    pkm_num_keys = 128,       #: defaults to 128, but can be increased to 256 or 512 as memory allows\n)\n\nx = torch.randint(0, 20000, (1, 2048))\nmodel(x) #: (1, 2048, 20000)\n```\n\nA plain Sinkhorn Transformer, layers of sinkhorn attention\n\n```python\nimport torch\nfrom sinkhorn_transformer import SinkhornTransformer\n\nmodel = SinkhornTransformer(\n    dim = 1024,\n    heads = 8,\n    depth = 12,\n    bucket_size = 128\n)\n\nx = torch.randn(1, 2048, 1024)\nmodel(x) #: (1, 2048, 1024)\n```\n\nSinkhorn Encoder / Decoder Transformer\n\n```python\nimport torch\nfrom sinkhorn_transformer import SinkhornTransformerLM\n\nDE_SEQ_LEN = 4096\nEN_SEQ_LEN = 4096\n\nenc = SinkhornTransformerLM(\n    num_tokens = 20000,\n    dim = 512,\n    depth = 6,\n    heads = 8,\n    bucket_size = 128,\n    max_seq_len = DE_SEQ_LEN,\n    reversible = True,\n    return_embeddings = True\n).cuda()\n\ndec = SinkhornTransformerLM(\n    num_tokens = 20000,\n    dim = 512,\n    depth = 6,\n    causal = True,\n    bucket_size = 128,\n    max_seq_len = EN_SEQ_LEN,\n    receives_context = True,\n    context_bucket_size = 128,  #: context key / values can be bucketed differently\n    reversible = True\n).cuda()\n\nx = torch.randint(0, 20000, (1, DE_SEQ_LEN)).cuda()\ny = torch.randint(0, 20000, (1, EN_SEQ_LEN)).cuda()\n\nx_mask = torch.ones_like(x).bool().cuda()\ny_mask = torch.ones_like(y).bool().cuda()\n\ncontext = enc(x, input_mask=x_mask)\ndec(y, context=context, input_mask=y_mask, context_mask=x_mask) #: (1, 4096, 20000)\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}