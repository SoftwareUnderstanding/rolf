{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1701.07875",
      "https://arxiv.org/abs/1411.1784",
      "https://arxiv.org/abs/2101.03037",
      "https://arxiv.org/abs/1701.07875, 2017](https://arxiv.org/abs/1701.07875).\n- Mehdi Mirza, and Simon Osindero. Conditional Generative Adversarial Nets. [https://arxiv.org/abs/1411.1784](https://arxiv.org/abs/1411.1784).\n- Bobak Toussi Kiani, et al. Quantum Earth Mover's Distance: A New Approach to Learning Quantum Data. [https://arxiv.org/abs/2101.03037](https://arxiv.org/abs/2101.03037)\n- Lilian Weng. From GAN to WGAN [https://arxiv.org/abs/1904.08994, 2019](https://arxiv.org/pdf/1904.08994.pdf).\n- Brownlee. J, 2019. [How to Implement Wasserstein Loss for Generative Adversarial Networks](https://machinelearningmastery.com/how-to-implement-wasserstein-loss-for-generative-adversarial-networks/)\n- Brownlee. J, 2019. [How to Develop a Wasserstein Generative Adversarial Network (WGAN) From Scratch](https://machinelearningmastery.com/how-to-code-a-wasserstein-generative-adversarial-network-wgan-from-scratch/)",
      "https://arxiv.org/abs/1411.1784](https://arxiv.org/abs/1411.1784).\n- Bobak Toussi Kiani, et al. Quantum Earth Mover's Distance: A New Approach to Learning Quantum Data. [https://arxiv.org/abs/2101.03037](https://arxiv.org/abs/2101.03037)\n- Lilian Weng. From GAN to WGAN [https://arxiv.org/abs/1904.08994, 2019](https://arxiv.org/pdf/1904.08994.pdf).\n- Brownlee. J, 2019. [How to Implement Wasserstein Loss for Generative Adversarial Networks](https://machinelearningmastery.com/how-to-implement-wasserstein-loss-for-generative-adversarial-networks/)\n- Brownlee. J, 2019. [How to Develop a Wasserstein Generative Adversarial Network (WGAN) From Scratch](https://machinelearningmastery.com/how-to-code-a-wasserstein-generative-adversarial-network-wgan-from-scratch/)",
      "https://arxiv.org/abs/2101.03037](https://arxiv.org/abs/2101.03037)\n- Lilian Weng. From GAN to WGAN [https://arxiv.org/abs/1904.08994, 2019](https://arxiv.org/pdf/1904.08994.pdf).\n- Brownlee. J, 2019. [How to Implement Wasserstein Loss for Generative Adversarial Networks](https://machinelearningmastery.com/how-to-implement-wasserstein-loss-for-generative-adversarial-networks/)\n- Brownlee. J, 2019. [How to Develop a Wasserstein Generative Adversarial Network (WGAN) From Scratch](https://machinelearningmastery.com/how-to-code-a-wasserstein-generative-adversarial-network-wgan-from-scratch/)",
      "https://arxiv.org/abs/1904.08994, 2019](https://arxiv.org/pdf/1904.08994.pdf).\n- Brownlee. J, 2019. [How to Implement Wasserstein Loss for Generative Adversarial Networks](https://machinelearningmastery.com/how-to-implement-wasserstein-loss-for-generative-adversarial-networks/)\n- Brownlee. J, 2019. [How to Develop a Wasserstein Generative Adversarial Network (WGAN) From Scratch](https://machinelearningmastery.com/how-to-code-a-wasserstein-generative-adversarial-network-wgan-from-scratch/)"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Martin Arjovsky, Soumith Chintala, and L\u00e9on Bottou. Wasserstein gan. [arXiv:1701.07875, 2017](https://arxiv.org/abs/1701.07875).\n- Mehdi Mirza, and Simon Osindero. Conditional Generative Adversarial Nets. [arXiv:1411.1784](https://arxiv.org/abs/1411.1784).\n- Bobak Toussi Kiani, et al. Quantum Earth Mover's Distance: A New Approach to Learning Quantum Data. [arXiv:2101.03037](https://arxiv.org/abs/2101.03037)\n- Lilian Weng. From GAN to WGAN [arXiv:1904.08994, 2019](https://arxiv.org/pdf/1904.08994.pdf).\n- Brownlee. J, 2019. [How to Implement Wasserstein Loss for Generative Adversarial Networks](https://machinelearningmastery.com/how-to-implement-wasserstein-loss-for-generative-adversarial-networks/)\n- Brownlee. J, 2019. [How to Develop a Wasserstein Generative Adversarial Network (WGAN) From Scratch](https://machinelearningmastery.com/how-to-code-a-wasserstein-generative-adversarial-network-wgan-from-scratch/)\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Sinestro38/qosf-qgan",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-03-07T23:09:18Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-16T11:34:20Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9809525934853504,
        0.9985341516887523,
        0.880796563017299,
        0.9423017981345051,
        0.9192923326322235,
        0.9685924588960733,
        0.9768840289859794,
        0.907147358604677,
        0.9507404130208205,
        0.9482456284181382,
        0.9156167136504517
      ],
      "excerpt": "This project is an explorative dive into the realm of quantum generative adversarial networks under the context of $DIS stock price prediction. Starting with a simple parameterized quantum circuit, to a quantum Wasserstein generative adversarial network, all notebooks are included in the repo. Through several numerical experiments, we hoped to take small empirical stabs at a few prevalent questions in quantum machine learning like: which hyperparameters are optimal for quantum generative adversarial learning, and how do you overcome vanishing gradients?  \nWith regards to the application of learning consecutive equity prices, we built a proof-of-concept quantum Wasserstein generative adversarial network accompanied with a traditional quantum generative adversarial network and a simple quantum neural network to accomplish the task of predicting the next four days of prices given fifteen prior days of price data. We evaluate quantum model capacity, convergence characteristics, training efficency, and more on the basis of 7 hyperparameters we tuned which were recorded in the hyperparameter tuning logs. \nDon't know where to start? Try out a friendly introduction to quantum generative adversarial networks! \nWould also like to express my gratitude to my QOSF mentor Yunong Shi from AWS Braket who helped give direction throughout this project! Many thanks! \nTo document the complete journey venturing into the space of QGANs, I've uploaded all the notebooks along the way which guided my decisions along the way. \n./QGANs explained.md: Learn what QGANs are all about \u2014 An accessible introduction to quantum generative adversarial networks. \n./QNN Approach/: Preliminary approach \u2014 Here we evaluate the upper bound of the number of data samples a simple quantum neural network can learn/memorize and a naive attempt to see how a simple parameterized quantum circuit could fit to predict DIS stock prices. \n./Conditional QGAN.ipynb/: QGAN approach \u2014 Quantum generative adversarial network used to learn n batches of $DIS data samples. Used for hyperparameter tuning. \n./Conditional QWGAN.ipynb: Final iteration on QGAN approach \u2014 An advanced quantum generative adversarial network architecture leveraging the Wasserstein metric to determine applicability in learning sequential data. Includes a thorough explanation of classical WGANs and the Wasserstein metric! \n./Hyperparameter_tuning_logs.pdf: Hyperparameter logs \u2014 A notion pdf with record of various hyperparameter configurations and the resulting effect on loss and accuracy. \n./data: Data fetching and processing into dataset \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Exploring learnability and optimal hyperparameters of various quantum generative adversarial networks and quantum neural networks using Pennylane. ",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Sinestro38/qosf-qgan/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 7,
      "date": "Thu, 23 Dec 2021 16:41:07 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Sinestro38/qosf-qgan/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Sinestro38/qosf-qgan",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Sinestro38/qosf-qgan/main/Conditional%20QGAN.ipynb",
      "https://raw.githubusercontent.com/Sinestro38/qosf-qgan/main/Conditional%20QWGAN.ipynb",
      "https://raw.githubusercontent.com/Sinestro38/qosf-qgan/main/data/data_processing.ipynb",
      "https://raw.githubusercontent.com/Sinestro38/qosf-qgan/main/data/data_collection.ipynb",
      "https://raw.githubusercontent.com/Sinestro38/qosf-qgan/main/QNN%20Approach/A%20simple%20QNN%20to%20evaluate%20capacity%20of%20ansatzes.ipynb",
      "https://raw.githubusercontent.com/Sinestro38/qosf-qgan/main/QNN%20Approach/A%20simple%20quantum%20neural%20network%20to%20learn%20DIS%20stock%20prices.ipynb"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Sinestro38/qosf-qgan/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Exploring the learnability of QGANs",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "qosf-qgan",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Sinestro38",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Sinestro38/qosf-qgan/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Thu, 23 Dec 2021 16:41:07 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "quantum-computing",
      "quantum-machine-learning"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "![](./images/qgan_ex_1.png)\n![](./images/qgan_ex_2.png)\n![](./images/qgan_ex_3.png)\n![](./images/qgan_ex_4.png)\n\n",
      "technique": "Header extraction"
    }
  ]
}