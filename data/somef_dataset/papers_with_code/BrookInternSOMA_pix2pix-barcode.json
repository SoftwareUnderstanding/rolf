{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This is a port of [pix2pix](https://github.com/phillipi/pix2pix) from Torch to Tensorflow.  It also contains colorspace conversion code ported from Torch.  Thanks to the Tensorflow team for making such a quality library!  And special thanks to Phillip Isola for answering my questions about the pix2pix code.\n",
      "technique": "Header extraction"
    }
  ],
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- [affinelayer/pix2pix-tensorflow](https://github.com/affinelayer/pix2pix-tensorflow)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use this code for your research, please cite the paper this code is based on: <a href=\"https://arxiv.org/pdf/1611.07004v1.pdf\">Image-to-Image Translation Using Conditional Adversarial Networks</a>:\n\n```\n@article{pix2pix2016,\n  title={Image-to-Image Translation with Conditional Adversarial Networks},\n  author={Isola, Phillip and Zhu, Jun-Yan and Zhou, Tinghui and Efros, Alexei A},\n  journal={arxiv},\n  year={2016}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{pix2pix2016,\n  title={Image-to-Image Translation with Conditional Adversarial Networks},\n  author={Isola, Phillip and Zhu, Jun-Yan and Zhou, Tinghui and Efros, Alexei A},\n  journal={arxiv},\n  year={2016}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8095647066877186,
        0.8326585122547221
      ],
      "excerpt": "Based on pix2pix by Isola et al. \nArticle about this implemention \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/BrookInternSOMA/pix2pix-barcode",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-02-06T20:09:40Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-02-08T00:14:56Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9890188673288955
      ],
      "excerpt": "This port is based directly on the torch implementation, and not on an existing Tensorflow implementation.  It is meant to be a faithful implementation of the original work and so does not add anything.  The processing speed on a GPU with cuDNN was equivalent to the Torch implementation in testing. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.893962334658333
      ],
      "excerpt": "No other processing is required, the colorization mode (see Training section below) uses single images instead of image pairs. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/BrookInternSOMA/pix2pix-barcode/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 28 Dec 2021 03:33:53 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/BrookInternSOMA/pix2pix-barcode/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "BrookInternSOMA/pix2pix-barcode",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/BrookInternSOMA/pix2pix-barcode/master/docker/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/BrookInternSOMA/pix2pix-barcode/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9738607088209219
      ],
      "excerpt": "Linux with Tensorflow GPU edition + cuDNN \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8447366828658196
      ],
      "excerpt": "For colorization, your images should ideally all be the same aspect ratio.  You can resize and crop them with the resize command: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8758777794521986
      ],
      "excerpt": "Testing is done with --mode test.  You should specify the checkpoint to use with --checkpoint, this should point to the output_dir that you created previously with --mode train: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8807503653368972
      ],
      "excerpt": "Exporting is done with --mode export.  You should specify the export directory to use with --model_dir: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9378529205150474
      ],
      "excerpt": "<img src=\"docs/examples.jpg\" width=\"900px\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.828344218455681
      ],
      "excerpt": "python tools/split.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091,
        0.8414384768071093
      ],
      "excerpt": "python pix2pix.py \\ \n  --mode train \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8589534893990137
      ],
      "excerpt": "  --input_dir barcode/train \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8765509922440867
      ],
      "excerpt": "<img src=\"docs/tensorboard-scalar.png\" width=\"250px\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8280406780420246
      ],
      "excerpt": "Testing is done with --mode test.  You should specify the checkpoint to use with --checkpoint, this should point to the output_dir that you created previously with --mode train: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091,
        0.8438769870689441
      ],
      "excerpt": "python pix2pix.py \\ \n  --mode test \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8098892235364082,
        0.8883416695073847
      ],
      "excerpt": "The test run will output an HTML file at barcode_test/index.html that shows input/output/target image sets: \n<img src=\"docs/test-index-html.png\" width=\"300px\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python pix2pix.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8099193734823183,
        0.8554138574456002
      ],
      "excerpt": "  --input_file your_input_image_filename \\ \n  --output_file output_filename \\ \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/BrookInternSOMA/pix2pix-barcode/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "JavaScript",
      "Python",
      "HTML",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "pix2pix-tensorflow",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pix2pix-barcode",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "BrookInternSOMA",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/BrookInternSOMA/pix2pix-barcode/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Tensorflow 1.12.0\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 28 Dec 2021 03:33:53 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```sh\n#: clone this repo\ngit clone https://github.com/BrookInternSOMA/pix2pix-tensorflow.git\ncd pix2pix-tensorflow\n#: train the model (this may take 1-8 hours depending on GPU, on CPU you will be waiting for a bit)\npython pix2pix.py \\\n  --mode train \\\n  --output_dir barcode_train \\\n  --max_epochs 1000 \\\n  --input_dir barcode/train \\\n  --which_direction BtoA\n\n#: load checkpoint\n  --checkpoint ./barcode_train\n\n#: test the model\npython pix2pix.py \\\n  --mode test \\\n  --output_dir barcode_test \\\n  --input_dir barcode/val \\\n  --checkpoint barcode_train\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}