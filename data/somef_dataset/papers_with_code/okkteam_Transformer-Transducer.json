{
  "citation": [
    {
      "confidence": [
        0.9999998875807626,
        0.9969354995665183,
        0.9999981357816988,
        0.9970187940576408
      ],
      "excerpt": "[RNN-T 2013] Graves Alex, et al., \"Speech Recognition with Deep Recurrent Neural Networks\", ICASSP, IEEE International Conference on Acoustics, Speech and Signal Processing - Proceedings. 38. 10.1109/ICASSP.2013.6638947, 2013. \n[T-T facebook] C.-F. Yeh, et al., \"Transformertransducer: End-to-end speech recognition with self-attention\", 2019. \n[T-T google] Q. Zhang, et al., \"Transformer transducer: A streamable speech recognition model with transformer encoders and rnn-t loss\", ICASSP 2020 - 2020 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP), May 2020. \n[Conformer-T] Gulati Anmol, et al, \"Conformer: Convolution-Augmented Transformer for Speech Recognition\", Interspeech 2020, 2020, pp. 5036\u20135040. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/oshindow/Transformer-Transducer",
    "technique": "GitHub API"
  },
  "contact": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Email: xintongwang@bjfu.edu.cn\n\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-05-29T14:47:26Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-01T18:08:15Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This is a `pytorch_lightning` reimplementation of the Transducer module from ESPnet.\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8906663269756088,
        0.9367583298470832
      ],
      "excerpt": "* More intuitive \nOnly streaming Transducer model from ESPnet is included here. Currently support \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8193519619680466
      ],
      "excerpt": "[RNN-T 2012] Graves Alex, \"Sequence Transduction with Recurrent Neural Networks\", 2012.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8116629912388119
      ],
      "excerpt": "[T-T facebook] C.-F. Yeh, et al., \"Transformertransducer: End-to-end speech recognition with self-attention\", 2019. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A pytorch_lightning reimplementation of the Transducer module from ESPnet.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/okkteam/Transformer-Transducer/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 15,
      "date": "Mon, 27 Dec 2021 03:33:58 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/oshindow/Transformer-Transducer/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "oshindow/Transformer-Transducer",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/parse_options.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/path.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/cmd.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/run.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/local/timit_data_prep.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/local/timit_format_data.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/local/download_and_untar.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/local/aishell_data_prep.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/asr_align_wav.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/make_fbank.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/eval_source_separation.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/convert_fbank.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/show_result.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/remove_longshortdata.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/score_sclite_wo_dict.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/download_from_google_drive.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/score_bleu.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/translate_wav.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/dump.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/trim_silence.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/data2json.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/generate_wav.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/synth_wav.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/feat_to_shape.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/update_json.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/free-gpu.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/reduce_data_dir.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/score_sclite.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/pack_model.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/recog_wav.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/make_stft.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tt_utils/dump_pcm.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tools/setup_venv.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tools/activate_python.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tools/extra_path.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tools/setup_cuda_env.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tools/installers/install_pesq.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tools/installers/install_py3mmseg.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tools/installers/install_kenlm.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tools/installers/install_sph2pipe.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tools/installers/install_beamformit.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tools/installers/install_sctk.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tools/installers/install_warp-rnnt.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tools/installers/install_mwerSegmenter.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tools/installers/install_pyopenjtalk.sh",
      "https://raw.githubusercontent.com/okkteam/Transformer-Transducer/master/tools/installers/install_nkf.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8202739877485236
      ],
      "excerpt": "|pytorch |   6.1 step/s | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9975394505186967
      ],
      "excerpt": "pip install h5py kaldiio soundfile configargparse dataclasses typeguard \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8525044939356196
      ],
      "excerpt": "Experientments on timit dataset, model = RNN-T, batchsize = 4, GPU = GTX1060. A training step during an epoch cost \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/oshindow/Transformer-Transducer/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell",
      "Perl",
      "Makefile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Introduction",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Transformer-Transducer",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "oshindow",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/oshindow/Transformer-Transducer/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 65,
      "date": "Mon, 27 Dec 2021 03:33:58 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Link complied kaldi to the tools directory, e.g.,` <kaldi-root>=/home/usr_name/kaldi`\n```\ncd ./tools\nln -s <kaldi-root>/tools\n```\n2. Create a new virtual environment from the system python\n```\n./setup_venv.sh $(command -v python3)\n```\n3. Configure the ceated virtual environment\n```\nmake\n```\n4. Link `steps` and `utils` from wsj to the root directory\n```\ncd ..\nln -s <kaldi-root>/egs/wsj/s5/steps .\nln -s <kaldi-root>/egs/wsj/s5/utils .\n```\n5. Run\n```\n./run.sh \n```\n6. Resume \n\nIf the training process is accidentally interrupted, you can resume training by changing the resume variable in front of the run.sh script, e.g.,\n```\nresume='exp/path/to/ckpt'\n```\n7. Data pre-process \n\nThe scripts of English corpus `Timit` and Mandarin corpus `Aishell-1` are already in the local directory.\n\n",
      "technique": "Header extraction"
    }
  ]
}