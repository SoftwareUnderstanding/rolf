{
  "citation": [
    {
      "confidence": [
        0.9831720451916883,
        0.9999823901222282
      ],
      "excerpt": "Python3 implementation of the fairwalk algorithm Tahleen Rahman, Bartlomiej Surma, Michael Backes and Yang Zhang. \nRahman, Tahleen, et al. \"Fairwalk: towards fair graph embedding.\" Proceedings of the 2019 International Joint Conferences on Artifical Intelligence (IJCAI). IJCAI. 2019.\u200f \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/urielsinger/fairwalk",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-04-18T19:15:37Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-09-26T21:11:23Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9491004485254716
      ],
      "excerpt": "weight_key: On weighted graphs, this is the key for the weight attribute (default: 'weight') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8258169863933175
      ],
      "excerpt": "sampling_strategy: Node specific sampling strategies, supports setting node specific 'q', 'p', 'num_walks' and 'walk_length'. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.864915563007469,
        0.8150771532802734
      ],
      "excerpt": "temp_folder: String path pointing to folder to save a shared memory copy of the graph - Supply when working on graphs that are too big to fit in memory during algorithm execution. \nFairWalk.fit method: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9570704945476838,
        0.9670186093346353
      ],
      "excerpt": "The classes are AverageEmbedder, HadamardEmbedder, WeightedL1Embedder and WeightedL2Embedder which their practical definition could be found in the paper on table 1 \nNotice that edge embeddings are defined for any pair of nodes, connected or not and even node with itself. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9111642298982486,
        0.9175559519984601
      ],
      "excerpt": "item - A tuple consisting of 2 nodes from the keyed_vectors passed in the constructor. Will return the embedding of the edge. \nEdgeEmbedder.as_keyed_vectors method: Returns a gensim.models.KeyedVectors instance with all possible node pairs in a sorted manner as string. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Implementation of the fairwalk algorithm.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/urielsinger/fairwalk/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Fri, 24 Dec 2021 06:32:05 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/urielsinger/fairwalk/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "urielsinger/fairwalk",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "`python setup.py install`\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8003380240251364
      ],
      "excerpt": "num_walks: Number of walks per node (default: 10) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/urielsinger/fairwalk/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Uriel Singer\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "FairWalk",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "fairwalk",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "urielsinger",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/urielsinger/fairwalk/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Fri, 24 Dec 2021 06:32:05 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```python\nimport networkx as nx\nfrom fairwalk import FairWalk\n\n#: Create a graph\ngraph = nx.fast_gnp_random_graph(n=100, p=0.5)\nn = len(graph.nodes())\nnode2group = {node: group for node, group in zip(graph.nodes(), (5*np.random.random(n)).astype(int))}\nnx.set_node_attributes(graph, node2group, 'group')\n\n#: Precompute probabilities and generate walks - **ON WINDOWS ONLY WORKS WITH workers=1**\nmodel = FairWalk(graph, dimensions=64, walk_length=30, num_walks=200, workers=4)  #: Use temp_folder for big graphs\n\n#: Embed nodes\nmodel = model.fit(window=10, min_count=1, batch_words=4)  #: Any keywords acceptable by gensim.Word2Vec can be passed, `diemnsions` and `workers` are automatically passed (from the FairWalk constructor)\n\n#: Look for most similar nodes\nmodel.wv.most_similar('2')  #: Output node names are always strings\n\n#: Save embeddings for later use\nmodel.wv.save_word2vec_format(EMBEDDING_FILENAME)\n\n#: Save model for later use\nmodel.save(EMBEDDING_MODEL_FILENAME)\n\n#: Embed edges using Hadamard method\nfrom fairwalk.edges import HadamardEmbedder\n\nedges_embs = HadamardEmbedder(keyed_vectors=model.wv)\n\n#: Look for embeddings on the fly - here we pass normal tuples\nedges_embs[('1', '2')]\n''' OUTPUT\narray([ 5.75068220e-03, -1.10937878e-02,  3.76693785e-01,  2.69105062e-02,\n       ... ... ....\n       ..................................................................],\n      dtype=float32)\n'''\n\n#: Get all edges in a separate KeyedVectors instance - use with caution could be huge for big networks\nedges_kv = edges_embs.as_keyed_vectors()\n\n#: Look for most similar edges - this time tuples must be sorted and as str\nedges_kv.most_similar(str(('1', '2')))\n\n#: Save embeddings for later use\nedges_kv.save_word2vec_format(EDGES_EMBEDDING_FILENAME)\n\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}