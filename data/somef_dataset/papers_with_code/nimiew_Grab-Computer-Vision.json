{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nimiew/grab-cv",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-06-17T14:27:41Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-12-21T15:05:51Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8266480888567229,
        0.9438307458670708
      ],
      "excerpt": "    This script splits the data into the respective train, validation, test folders in the data folder. It also parses \"cars_test_annos_withlabels.mat\" to create \"test_labels.txt\" for testing later. \\ \n    Each partition will be used for a certain purpose. Train data will be used to fit the model. Validation data is used for tuning parameters and trying different models. Testing data is finally used to estimate generalization error on future unseen data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9916203463475748
      ],
      "excerpt": "    This script trains a model on the training data using transfer learning and finetuning. Due to computational constraints, I used EfficientNetB3 which has state-of-the-art performance for its model size (in terms of number of parameters). This is a new model from Google Brain, details can be found here - https://arxiv.org/pdf/1905.11946.pdf. \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9630832900165595
      ],
      "excerpt": "    The model uploaded on github has an accuracy of 0.8627036438253949. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Submission for 2019 Grab AI Challenge (Computer Vision)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nimiew/Grab-Computer-Vision/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 05:13:28 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/nimiew/grab-cv/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "nimiew/grab-cv",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/nimiew/Grab-Computer-Vision/master/Data%20Exploration.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9950115771176394
      ],
      "excerpt": "    On the command line, run \"pip install -r requirements.txt\". \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9013726633176956
      ],
      "excerpt": "    You can choose which gpu to use by changing \"os.environ[\"CUDA_VISIBLE_DEVICES\"]\" in line 3. \\ \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8578376316046292,
        0.8693455978015616
      ],
      "excerpt": "On the command line, run \"python preprocess.py\" Can take quite long. \\ \n    This script splits the data into the respective train, validation, test folders in the data folder. It also parses \"cars_test_annos_withlabels.mat\" to create \"test_labels.txt\" for testing later. \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9239011006333486
      ],
      "excerpt": "On the command line, run \"python car_train.py\". \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9436885342818613
      ],
      "excerpt": "On the command line, run \"python predict.py\". \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9008916868638758
      ],
      "excerpt": "On the command line, run \"evaluate.py\". \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8993844121875839
      ],
      "excerpt": "Put custom test images in the folder data\\custom_test\\images. \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9266433641000421
      ],
      "excerpt": "On the command line, run \"python predict.py --custom_test\" Remember to run with the flag. \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8980983476684101
      ],
      "excerpt": "On the command line, run \"python evaluate.py --custom_test\" Remember to run with the flag. \\ \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/nimiew/grab-cv/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "How to reproduce experiment",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "grab-cv",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "nimiew",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nimiew/grab-cv/blob/master/readme.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Wed, 29 Dec 2021 05:13:28 GMT"
    },
    "technique": "GitHub API"
  }
}