{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* [ENet: A Deep Neural Network Architecture for Real-Time Semantic Segmentation](https://arxiv.org/pdf/1606.02147v1.pdf)\n* [TensorFlow-ENet](https://github.com/kwotsin/TensorFlow-ENet)\n* [Implementation of Max Unpooling](https://github.com/tensorflow/tensorflow/issues/2169)\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8955886365383559
      ],
      "excerpt": "Lane detection: a semantic segmentation approach. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9698483046903941
      ],
      "excerpt": "Alisdair Cameron, Xinqi ZHU, Xuyang SHEN \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/XuyangSHEN/lane_detection_enet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-06-03T11:39:19Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-12T11:23:31Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9467034331749641
      ],
      "excerpt": "Use tensorflow to implement a deep neural network for lane detection based on the paper \u201cENet: A Deep Neural Network Architecture for Real-Time Semantic Segmentation.\u201d You can refer this for more details: https://arxiv.org/pdf/1606.02147v1.pdf \u200b. This model is an encoder-decoder network for general road scene semantic segmentation. We modify that to suit for out task. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9595618006899689
      ],
      "excerpt": "Caused our model is designed based on the TuSimple lane detection competition, we only tested the dataset provided by the TuSimple. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8674237917620291
      ],
      "excerpt": "* Note: Due to the offline generator(for train labels), it is a bit tricky(complex) to guide the training instructions. To make  it clear, we provide two main methods to train the model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8576684862897723
      ],
      "excerpt": "We have uploaded the pre-trained model inside the pre_trained_modelfolder, which is trained based on tusimple benchmark. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9273168501903039
      ],
      "excerpt": "line_connect.py: to fix the gaps for the ground truth \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9247734315841677
      ],
      "excerpt": "ENet_Components: components for the ENet model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8695290272901267
      ],
      "excerpt": "including some sample data and results \n",
      "technique": "Supervised classification"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Requirement:\n* Download the train set:  [The URL for the whole dataset can be referred here](https://github.com/TuSimple/tusimple-benchmark/issues/3)\n* Download the labels represented by tfRecord: [The URL for the whole label set can be referred  here](https://github.com/XuyangSHEN/lane_detection_enet/raw/master/train_set/labels.zip)\n* Download the combination Json file: [JSON Download URL](https://github.com/XuyangSHEN/lane_detection_enet/raw/master/train_set/total_label.zip)\n* Move the downloaded `label` folder into the `train_set` folder\n* Please check whether the `xxxlabel.Json` is inside the `train_set` folder\n\nSample command:\n```bash\n$ python training.py -i (data set path) -m (model storage path) -l no\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/XuyangSHEN/lane_detection_enet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Sun, 26 Dec 2021 23:34:45 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/XuyangSHEN/lane_detection_enet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "XuyangSHEN/lane_detection_enet",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* This software has only been tested on Win10(64-bit), python3.7.1, Cuda-10.0 with a GTX-1060 6GB GPU.\n* Currently, our codes can only run on the tensorflow-gpu, which means it may raise exceptions if the program runs at CPU\n\nPlease install all the required package in your environment: (we also provide the `conda bash` command below)\n> tensorflow: v1.13.1 `conda install -c conda-forge tensorflow`  \n> tensorflow-gpu: v1.13.1 `conda install -c anaconda tensorflow-gpu`  \n> tensorboard: v1.13.1 `conda install -c conda-forge tensorboard`  \n> opencv: v3.4.1 or v4.1.0 `conda install -c conda-forge opencv`  \n> Argparse: v1.3.0 `conda install -c anaconda argparse`  \n> imageio: v1.5.0 `conda install -c menpo imageio`  \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9471328259652276
      ],
      "excerpt": "Notes: The coding environment is python3. Please install correct python interrupter (we suggest the anaconda environment) and follow up the instructions to run the training or prediction. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8744474442449385
      ],
      "excerpt": "The first main method only requires to download the TuSimple train set, while the second one requires to download another training component label_set-tfRecord Download Address. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.938015258397259,
        0.8342636349726604
      ],
      "excerpt": "$ python training.py -h \nusage: training.py [-h] [-i INPUT-PATH] [-m MODEL-PATH] [-l yes/no] [-gt PATH] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8158939308188583
      ],
      "excerpt": "  -m MODEL-PATH         The path to store the training model. (default: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8038393196431355
      ],
      "excerpt": "                        input the json file of the labels \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8238215159710628,
        0.8295865281211637,
        0.8386108717659333
      ],
      "excerpt": "                        input the batch size (default: 4) \n  -f buffer size, --buffer_size buffer size \n                        input the buffer size (default: 150) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.852911262199781,
        0.8951285366484715
      ],
      "excerpt": "$ python prediction.py -h \nusage: prediction.py [-h] [-i INPUT-PATH] [-o OUTPUT-PATH] [-m MODEL-PATH] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.818241673643369,
        0.8831541074009669
      ],
      "excerpt": "  -i INPUT-PATH   The path to the prediction data folder. [Default: 'sample_data/test_set/'] \n  -o OUTPUT-PATH  The path to put the prediction result folder. [Default:'tmp_pred/'] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8182220657224296,
        0.819771396086
      ],
      "excerpt": "* sample command:bash \n$ python prediction.py -i sample_data/test_set/ -o tmp_pred/prediction01/ -m pre_trained_model/ -d no \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8098674133178073,
        0.897187205327848,
        0.8405461554656896
      ],
      "excerpt": "data_provider folder:   \ndata_dataset.py: provide data for training. tf.Dataset version \ndata_np.py:provide data for training. numpy version \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9078365115784762,
        0.8098674133178073
      ],
      "excerpt": "one_hot_coding.py: one hot labeling (differ from tf.one_hot)   \nenet folder: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9147936755567069,
        0.9440279419753022,
        0.908266398602852,
        0.8098674133178073
      ],
      "excerpt": "config.py: command line parser \ntraining.py: to train the ENet \nprediction.py: to predict the result   \npre_trained_model folder: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8098674133178073
      ],
      "excerpt": "sample_data folder: \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/XuyangSHEN/lane_detection_enet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Deep Neural Network for Lane Detection",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "lane_detection_enet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "XuyangSHEN",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/XuyangSHEN/lane_detection_enet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Apart from the large training set, we also provide one sample training set to run a small training.\n\n```bash\nsimple command: \n$ python training.py\nfull command:\n$ python training.py -i  sample_data/train_set/ -m tmp/train_01/ -l no\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Requirement:\n* Download the train set: [The URL for the whole dataset can be referred here](https://github.com/TuSimple/tusimple-benchmark/issues/3)\n* Please select one Json to train(among the `_0301`, `_0501`, `_0601`). We also kindly provide the combination Json to train all of them. [JSON Download URL](https://github.com/XuyangSHEN/lane_detection_enet/raw/master/train_set/total_label.zip)\n* Please check whether the `xxxlabel.Json` is inside the `train_set` folder\n\nSample command:\n```bash\n$ python training.py -i (data set path) -m (model storage path) -l yes -gt (xxx.json) \n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Requirement:\n* Download the train set:  [The URL for the whole dataset can be referred here](https://github.com/TuSimple/tusimple-benchmark/issues/3)\n* Download the labels represented by tfRecord: [The URL for the whole label set can be referred  here](https://github.com/XuyangSHEN/lane_detection_enet/raw/master/train_set/labels.zip)\n* Download the combination Json file: [JSON Download URL](https://github.com/XuyangSHEN/lane_detection_enet/raw/master/train_set/total_label.zip)\n* Move the downloaded `label` folder into the `train_set` folder\n* Please check whether the `xxxlabel.Json` is inside the `train_set` folder\n\nSample command:\n```bash\n$ python training.py -i (data set path) -m (model storage path) -l no\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Sun, 26 Dec 2021 23:34:45 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "tusimple",
      "enet",
      "lane-detection"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Video: [Link](https://youtu.be/tDCkRfYBk4U)\n\n",
      "technique": "Header extraction"
    }
  ]
}