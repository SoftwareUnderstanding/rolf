{
  "citation": [
    {
      "confidence": [
        0.9682006271776246,
        0.9836871398811214
      ],
      "excerpt": "Dropout in RNN theory is described here: https://arxiv.org/pdf/1409.2329.pdf<br/> \nand further developed here: https://arxiv.org/pdf/1512.05287.pdf<br/> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/martin-gorner/tensorflow-rnn-shakespeare",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "How to contribute\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\nContributor License Agreement\nContributions to any Google project must be accompanied by a Contributor License\nAgreement. This is necessary because you own the copyright to your changes, even\nafter your contribution becomes part of this project. So this agreement simply\ngives us permission to use and redistribute your contributions as part of the\nproject. Head over to https://cla.developers.google.com/ to see your current\nagreements on file or to sign a new one.\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\nCode reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult GitHub Help for more\ninformation on using pull requests.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-02-14T10:37:25Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-05T14:42:05Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8410996992062656
      ],
      "excerpt": "The presentation itself is available here: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9084136412551891,
        0.9054329727756998,
        0.8672849664233742,
        0.8982475041894623,
        0.9438389599425895,
        0.8965112383477994,
        0.8744743309197056,
        0.8044110515070536,
        0.9827393740744974
      ],
      "excerpt": "That is because you need to convert vectors of size CELLSIZE to size ALPHASIZE. \nThe reduction of dimensions is best performed by a learned layer. \nYes, a cell is a state machine and can represent state transitions like \nthe fact that there is a pending open parenthesis and that it will need \nto be closed at some point. The problem is to make the network learn those \ntransitions. The learning algorithm only modifies weights and biases. The input \nstate of the cell cannot be modified by it: that is a big problem if the wrong \npredictions returned by the cell are caused by a bad input state. The solution \nis to unroll the cell into a sequence of replicas. Now the learning algorithm \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9753404722575297
      ],
      "excerpt": "in the sequence to the next (with the exception of the input state of the first \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8914891859870593
      ],
      "excerpt": "No, it will be able to learn state transitions over that distance only. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9392107846570923,
        0.9151782220833683
      ],
      "excerpt": "size is 30, the model will be able to correctly open and close parentheses over \ndistances of 100 characters or more. But you will have to teach it this trick \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9052475698924386,
        0.9444455404717607
      ],
      "excerpt": "Not quite, you still need to save the last state of the unrolled sequence of \ncells, and feed it as the input state for the next minibatch in the training loop. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9079290289456475
      ],
      "excerpt": "batch and so on, because all the output states produced by the sequences in the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8949788288347239,
        0.9206479838871751
      ],
      "excerpt": "in the last batch of the epoch: the one where the training text finishes. There \nis no way to continue that one.) So there is no need to reset the state between \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9220548681112548
      ],
      "excerpt": "The first thing to understand is that dropout can be applied to either the inputs of the outputs \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8590035198724274
      ],
      "excerpt": "you realize that applying dropout to inputs is equivalent to dropping lines in the weights matrix \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9411779994436372,
        0.9744967491933081,
        0.9507047742800936
      ],
      "excerpt": "your lines but that is the only difference. \nIn RNNs it is customary to add dropout to inputs in all cell layers as well as the output of the last layer, \nwhich actually serves as the input dropout of the softmax layer so there is no need to add that explicitly. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9708351049732282
      ],
      "excerpt": "a random dropout mask is recomputed at every step of the unrolled sequence. This approach is called \"naive dropout\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9720110415160206,
        0.8832243084856721
      ],
      "excerpt": "using the same dropout mask for all the steps of the unrolled sequence. This approach is called \"variational dropout\" \nand the primitives for implementing it have recently been added to Tensorflow. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8095290757454882
      ],
      "excerpt": "of retropropagation, i.e. the algorithm used to compute gradients across multiple layers \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8192234161053757,
        0.9565697940944957,
        0.8888003909506863
      ],
      "excerpt": "own, or understand how it is done. And it's not that hard. If the explanations do not make \nsense to you, it's probably because the explanations are bad. Google more :-) \nThe second piece of math I would advise you to read on is the math behind \"sampled softmax\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9584192283996658
      ],
      "excerpt": "then try to devise cheap ways of approximating this gradient. This is an active area of \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9699961900956663
      ],
      "excerpt": "The third interesting piece of mathematics is to understand why LSTMs converge while RNNs built with basic \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Code from the \"Tensorflow and deep learning - without a PhD, Part 2\" session on Recurrent Neural Networks.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/martin-gorner/tensorflow-rnn-shakespeare/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 249,
      "date": "Mon, 27 Dec 2021 12:55:24 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/martin-gorner/tensorflow-rnn-shakespeare/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "martin-gorner/tensorflow-rnn-shakespeare",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/martin-gorner/tensorflow-rnn-shakespeare/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8735589314516133
      ],
      "excerpt": "your nodes if you want to target them by name in the restored version (when you \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8316048957809671
      ],
      "excerpt": "If you want to go deeper in the math, the one piece you are missing is the explanation \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8232349496965617
      ],
      "excerpt": "in the last batch of the epoch: the one where the training text finishes. There \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/martin-gorner/tensorflow-rnn-shakespeare/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright {yyyy} {name of copyright owner}\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Code for the Recurrent Neural Network in the presentation \"Tensorflow and deep learning - without a PhD, Part 2\"",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "tensorflow-rnn-shakespeare",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "martin-gorner",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/martin-gorner/tensorflow-rnn-shakespeare/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 532,
      "date": "Mon, 27 Dec 2021 12:55:24 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n> python3 rnn_train.py\n```\nThe script **rnn_train.py** trains a language model on the complete works of William Shakespeare.\nYou can also train on Tensorflow Python code. See comments in the file.\n\nThe file **rnn_train_stateistuple.py** implements the same model using \nthe state_is_tuple=True option in tf.nn.rnn_cell.MultiRNNCell (default).\nTraining is supposedly faster (by ~10%) but handling the state as\na tuple is a bit more cumbersome.\n\n```\n> tensorboard --logdir=log\n```\nThe training script **rnn_train.py** is set up to save training and validation\ndata as \"Tensorboard summaries\" in the \"log\" folder. They can be visualised with Tensorboard.\nIn the screenshot below, you can see the RNN being trained on 6 epochs of Shakespeare.\nThe training and validation curves stay close together which means that overfitting is not a major issue here.\n You can try to add some dropout (pkeep=0.8 for example) but it will not improve the situation much becasue it is already quite good.\n \n![Image](https://martin-gorner.github.io/tensorflow-rnn-shakespeare/tensorboard_screenshot.png)\n```\n> python3 rnn_play.py\n``` \n   \nThe script **rnn_play.py** uses a trained checkpoint to generate a new \"Shakespeare\" play.  \nYou can also generate new \"Tensorflow Python\" code. See comments in the file.\n\nCheckpoint files can be downloaded from here:  \n   \n[Fully trained](https://drive.google.com/file/d/0B5njS_LX6IsDc2lWTmtyanRpOHc/view?usp=sharing)\non Shakespeare or Tensorflow Python source.   \n   \n[Partially trained](https://drive.google.com/file/d/0B5njS_LX6IsDUlFsMkdhclNSazA/view?usp=sharing)\nto see how they make progress in training.\n\n```\n> python3 -m unittest tests.py\n```\nUnit tests can be run with the command above.\n \n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n         TITUS ANDRONICUS\n\n\nACT I\n \nSCENE III\tAn ante-chamber. The COUNT's palace.\n \n[Enter CLEOMENES, with the Lord SAY]\n \nChamberlain\n    Let me see your worshing in my hands.\n \nLUCETTA\n    I am a sign of me, and sorrow sounds it.\n \n[Enter CAPULET and LADY MACBETH]\n \nWhat manner of mine is mad, and soon arise?\n \nJULIA\n    What shall by these things were a secret fool,\n    That still shall see me with the best and force?\n \nSecond Watchman\n    Ay, but we see them not at home: the strong and fair of thee,\n    The seasons are as safe as the time will be a soul,\n    That works out of this fearful sore of feather\n    To tell her with a storm of something storms\n    That have some men of man is now the subject.\n    What says the story, well say we have said to thee,\n    That shall she not, though that the way of hearts,\n    We have seen his service that we may be sad.\n \n[Retains his house]\nADRIANA What says my lord the Duke of Burgons of Tyre?\n \nDOMITIUS ENOBARBUS\n    But, sir, you shall have such a sweet air from the state,\n    There is not so much as you see the store,\n    As if the base should be so foul as you.\n \nDOMITIUS ENOY\n    If I do now, if you were not to seek to say,\n    That you may be a soldier's father for the field.\n \n[Exit]\n ```\n",
      "technique": "Header extraction"
    }
  ]
}