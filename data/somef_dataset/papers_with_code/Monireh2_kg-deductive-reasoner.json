{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1811.04132v1",
      "https://arxiv.org/abs/1811.04132",
      "https://arxiv.org/abs/1811.04132[cs]*.\n\n* Sainbayar Sukhbaatar, Arthur Szlam, Jason Weston, Rob Fergus,\n  \"[End-To-End Memory Networks](http://arxiv.org/abs/1503.08895)\",\n  *https://arxiv.org/abs/1503.08895 [cs.NE]*.",
      "https://arxiv.org/abs/1503.08895 [cs.NE]*."
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Monireh Ebrahimi, Md Kamruzzaman Sarker, Federico Bianchi, Ning Xie, Derek Doran, Pascal Hitzler \n  \"[Reasoning over RDF Knowledge Bases using Deep Learning](https://arxiv.org/abs/1811.04132)\",\n  *arXiv:1811.04132[cs]*.\n\n* Sainbayar Sukhbaatar, Arthur Szlam, Jason Weston, Rob Fergus,\n  \"[End-To-End Memory Networks](http://arxiv.org/abs/1503.08895)\",\n  *arXiv:1503.08895 [cs.NE]*.\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Monireh2/kg-deductive-reasoner",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-08-19T17:15:33Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-05-12T17:44:08Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.994884997774478,
        0.9908691888688379
      ],
      "excerpt": "This is a modification of implementation of MemN2N model in Python for the Deductive Reasoning over Knowledge Graph \nas inspired by the Section 4 of the paper \"End-To-End Memory Networks\". It is based on \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8243205078469206
      ],
      "excerpt": "Web-based Demo \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "knowledge graph deductive reasoning using memory networks",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Monireh2/kg-deductive-reasoner/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 14:32:15 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Monireh2/kg-deductive-reasoner/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Monireh2/kg-deductive-reasoner",
    "technique": "GitHub API"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Monireh2/kg-deductive-reasoner/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/Monireh2/kg-deductive-reasoner/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'BSD License\\n\\nCopyright (c) 2020, Monireh Ebrahimi.\\nCopyright (c) 2016, Vinh Khuc.\\nAll rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without modification,\\nare permitted provided that the following conditions are met:\\n\\n * Redistributions of source code must retain the above copyright notice, this\\n   list of conditions and the following disclaimer.\\n\\n * Redistributions in binary form must reproduce the above copyright notice,\\n   this list of conditions and the following disclaimer in the documentation\\n   and/or other materials provided with the distribution.\\n\\n * Neither the name Facebook nor the names of its contributors may be used to\\n   endorse or promote products derived from this software without specific\\n   prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "## End-To-End Memory Networks for Deductive Reasoning over Knowledge Graph\n\nThis is a modification of implementation of [MemN2N model in Python](https://github.com/vinhkhuc/MemN2N-babi-python) for the [Deductive Reasoning over Knowledge Graph](https://arxiv.org/abs/1811.04132v1)\nas inspired by the Section 4 of the paper \"[End-To-End Memory Networks](http://arxiv.org/abs/1503.08895)\". It is based on\nFacebook's [Matlab code](https://github.com/facebook/MemNN/tree/master/MemN2N-babi-matlab).\n\n[Web-based Demo](Coming soon!)\n\n\n## Requirements\n* Python 2.7\n* Numpy, Flask (only for web-based demo) can be installed via pip:\n```\n$ sudo pip install -r requirements.txt\n```\n* [Sample Normalized KG Dataset](https://drive.google.com/file/d/1qwyiGlxyxrRBV7FoZrHAFe_girUZrBxY/view?usp=sharing) should be downloaded and decompressed to `data`:\n```\n\n$ mkdir data",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "kg-deductive-reasoner",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Monireh2",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Monireh2/kg-deductive-reasoner/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Python 2.7\n* Numpy, Flask (only for web-based demo) can be installed via pip:\n```\n$ sudo pip install -r requirements.txt\n```\n* [Sample Normalized KG Dataset](https://drive.google.com/file/d/1qwyiGlxyxrRBV7FoZrHAFe_girUZrBxY/view?usp=sharing) should be downloaded and decompressed to `data`:\n```\n\n$ mkdir data\n=======\n\n$ tar xvf sample_data_normalized.tar.xz -C data\n\n```\n* [Sample Json Format Dataset](https://drive.google.com/file/d/1Wc50ul4xIrvGAI9HqlFjVS95CgjPXejJ/view?usp=sharing) should be downloaded and decompressed to data in case you want to run the normalization:\n```\n\n$ tar xvf sample_json_files.tar.xz -C data\npython json_reader_normalizer.py\n\n```\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Wed, 29 Dec 2021 14:32:15 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* To run on a knowledge graph reasoning task, use `kg_reasoner_runner.py`. For example,\n```\npython kg_reasoner_runner.py\n```\nThe output will look like:\n```\nUsing data from data/task_name/task_name\nTrain and test for task task_name ...\n1 | train error: 0.876116 | val error: 0.75\n|===================================               | 71% 0.5s\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "* In order to run the Web-based demo using the pretrained model `task_name.pklz` in `trained_model/`, run:\n```\npython -m demo.qa_kg\n```\n\n* Alternatively, you can try the console-based demo:\n```\npython -m demo.qa_kg -console\n```\n\n* The pretrained model `task_name.pklz` can be created by running:\n```\npython -m demo.qa_kg -train\n```\n\n* To show all options, run `python -m demo.qa_kg -h`\n\n\n",
      "technique": "Header extraction"
    }
  ]
}