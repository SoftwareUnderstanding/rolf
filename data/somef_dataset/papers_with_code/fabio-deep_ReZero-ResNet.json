{
  "citation": [
    {
      "confidence": [
        0.9522918465181198
      ],
      "excerpt": "For more info on multi-node and multi-gpu distributed training refer to https://github.com/hgrover/pytorchdistr/blob/master/README.md \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9951658135209925
      ],
      "excerpt": "Author: Fabio De Sousa Ribeiro \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fabio-deep/ReZero-ResNet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-17T14:07:35Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-09-25T04:19:42Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9239622286410937
      ],
      "excerpt": "Trained a couple of nets for (fun) comparisons, using identical hyperparams and early stopping on validation accuracy plateau schedule. \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9350710394403937,
        0.860059181823877
      ],
      "excerpt": "Neat idea which seems to improve ResNet convergence speed, especially at the beggining of training (see figures). \n| Model     | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Unofficial pytorch implementation of ReZero in ResNet",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fabio-deep/ReZero-ResNet/releases",
    "technique": "GitHub API"
  },
  "faq": [
    {
      "confidence": [
        1
      ],
      "excerpt": "|:-----------|:--------:|:--------:|:--------:|:-----------------:|:---------------------:|\n| ResNet-20 | 272,474 | 70m3s | 398 | 7.63 | **7.98** |\n| ResNet-56 | 855,770 | 127m41s | 281 | 6.04 | **6.44** |\n| ResNet-110 | 1,730,768 | 240m53s | 313 | 6 | **6.39** |\n| **ReZero** ResNet-20 | 272,483 | 63m9s | 327 |7.44 | **7.94** |\n| **ReZero** ResNet-56 | 855,797 | 134m44s | 303 |6.31 | **6.55** |\n| **ReZero** ResNet-110 | 1,730,714 | 301m19s | 410 |5.84 | **5.88** |\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "**ResNet-20:**\n\n<img src=\"plots/resnet20_error.png\" width=\"25%\" height=\"25%\"><img src=\"plots/resnet20_loss.png\" width=\"25%\" height=\"25%\"><img src=\"plots/resnet20_error_0_30.png\" width=\"25%\" height=\"25%\"><img src=\"plots/resnet20_loss_0_30.png\" width=\"25%\" height=\"25%\">\n\n**ResNet-56:**\n\n<img src=\"plots/resnet56_error.png\" width=\"25%\" height=\"25%\"><img src=\"plots/resnet56_loss.png\" width=\"25%\" height=\"25%\"><img src=\"plots/resnet56_error_0_30.png\" width=\"25%\" height=\"25%\"><img src=\"plots/resnet56_loss_0_30.png\" width=\"25%\" height=\"25%\">\n\n**ResNet-110:**\n\n<img src=\"plots/resnet110_error.png\" width=\"25%\" height=\"25%\"><img src=\"plots/resnet110_loss.png\" width=\"25%\" height=\"25%\"><img src=\"plots/resnet110_error_0_30.png\" width=\"25%\" height=\"25%\"><img src=\"plots/resnet110_loss_0_30.png\" width=\"25%\" height=\"25%\">\n\n**This repo vs. original ResNet paper:**\n| Model     | (paper) Test error (%) | (this repo) Test error (%) |\n|:-----------|:-----------------:|:---------------------:|\n| ResNet-20 | 8.75 | **7.98** |\n| ResNet-56 | 6.97 | **6.44** |\n| ResNet-110 | 6.43 | **6.39** |\n\n",
      "technique": "Header extraction"
    }
  ],
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Sun, 26 Dec 2021 23:38:25 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/fabio-deep/ReZero-ResNet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "fabio-deep/ReZero-ResNet",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8956313593822063
      ],
      "excerpt": "To train normally using nn.DataParallel or using the CPU: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8222517989851832
      ],
      "excerpt": "All experiments can be reproduced with the code from this repo using the default hyperparameters defined in src/main.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9333384803827206
      ],
      "excerpt": "python main.py --no_distributed \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/fabio-deep/ReZero-ResNet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Fabio De Sousa Ribeiro\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "ReZero ResNet Unofficial Pytorch Implementation.",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "ReZero-ResNet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "fabio-deep",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fabio-deep/ReZero-ResNet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You can launch **Distributed** training from `src/` using:\n\n    python -m torch.distributed.launch --nnodes=1 --node_rank=0 --nproc_per_node=2 --use_env main.py\n\nThis will train on a single machine (`nnodes=1`), assigning 1 process per GPU where `nproc_per_node=2` refers to training on 2 GPUs. To train on `N` GPUs simply launch `N` processes by setting `nproc_per_node=N`.\n\nThe number of CPU threads to use per process is hard coded to `torch.set_num_threads(1)` for safety, and can be changed to `your ",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 23,
      "date": "Sun, 26 Dec 2021 23:38:25 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "resnet",
      "rezero",
      "deep-learning",
      "deep-neural-networks",
      "residual-networks",
      "pytorch",
      "cifar10",
      "python",
      "machine-learning"
    ],
    "technique": "GitHub API"
  }
}