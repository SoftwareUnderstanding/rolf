{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Cubuk, Ekin D., Barret Zoph, Jonathon Shlens, and Quoc V. Le. \u201cRandAugment: Practical Automated Data Augmentation with a Reduced Search Space.\u201d ArXiv:1909.13719 \\[Cs\\], November 13, 2019. [http://arxiv.org/abs/1909.13719].\n\n2. Sohn, Kihyuk, David Berthelot, Chun-Liang Li, Zizhao Zhang, Nicholas Carlini, Ekin D. Cubuk, Alex Kurakin, Han Zhang, and Colin Raffel. \u201cFixMatch: Simplifying Semi-Supervised Learning with Consistency and Confidence.\u201d ArXiv:2001.07685 [Cs, Stat], November 25, 2020. [http://arxiv.org/abs/2001.07685].\n\n3. Xie, Qizhe, Zihang Dai, Eduard Hovy, Minh-Thang Luong, and Quoc V. Le. \u201cUnsupervised Data Augmentation for Consistency Training.\u201d ArXiv:1904.12848 [Cs, Stat], November 5, 2020. [http://arxiv.org/abs/1904.12848].\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/A-Telfer/AugKey",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-02-06T21:21:43Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-05-11T05:13:15Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9337194539239027,
        0.9567863063560471
      ],
      "excerpt": "Unofficial RandAugment[1] implementation for image and keypoint augmentation. \nWhy RandAugment? RandAugment achieves state-of-the-art performance with a greatly reduced augmentation parameter search space. It's received additional attention due to its use in self-supervised learning models such as Unsupervised Data Augmentation(Xie et al., 2020)[3] and FixMatch(Sohn et al., 2020)[2]. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9224640667742637
      ],
      "excerpt": "Provides an easily extendable framework in order to explore different magnitudes, policies, and augmentation operations. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.802010577661213,
        0.9695771858972756
      ],
      "excerpt": "Enables inverse augmentations for keypoints, which moves them back to their original position. \nSupport for Consistency Training: Consistency Training has been used to attain state-of-the-art results on image classification problems [2, 3]. One challenge in adapting the classification technique proposed in [1] to handle keypoints is that the augmentations cause the keypoints to become misaligned. In order to deal with this, we implement a RandAugment.apply_keypoints_inv, which takes keypoint predictions from augmented images and normalizes them so that they can be compared between augmentations. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8457180898147918,
        0.9873995467689216
      ],
      "excerpt": "By default, RandAugment uses the operations discussed in the original paper[1]. \nIn response to discussion about the large impact of augmentations and their magnitude ranges in the original paper[1], this package abstracts operations to make them easier to create and modify. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.84963752072329
      ],
      "excerpt": "    'crop': Crop(np.arange(30)), #: Pass the magnitude_range in as an argument. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "RandAugment with Keypoints Annotation Support.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/A-Telfer/AugKey/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Fri, 24 Dec 2021 20:47:37 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/A-Telfer/AugKey/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "A-Telfer/AugKey",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/A-Telfer/AugKey/tree/main/docs"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/A-Telfer/AugKey/main/demo.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\npython setup.py install\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9133368656218674
      ],
      "excerpt": "import augkey \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8137291148914628,
        0.8929755472885549
      ],
      "excerpt": "        width, height = im.size \n        return image.crop((value, height - value, width - value, value)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8091179191462616,
        0.8210679241246708
      ],
      "excerpt": "    'crop': Crop(np.arange(30)), #: Pass the magnitude_range in as an argument. \n    'rotate': ops.Rotate(np.linspace(0, math.radians(30), 30)), \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/A-Telfer/AugKey/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2021 Andre Telfer\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "RandAugment with Keypoints",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "AugKey",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "A-Telfer",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/A-Telfer/AugKey/blob/main/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Tests require `opencv-python`, install with `pip install opencv-python`\n\nTo run tests: `python -m unittest -v`\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Fri, 24 Dec 2021 20:47:37 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "computer-vision",
      "machine-learning",
      "self-supervised-learning",
      "keypoints",
      "augmentation",
      "randaugment",
      "image-augmentation",
      "deep-learning"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Using RandAugment Keypoints is simple. First use `plan_augment` in order to create `(magnitude, operation, directions)` and then apply them using `apply_image` or `apply_keypoints`.\n\nExample:\n\n```python\nimport augkey\n\nimage = ... #: your PIL.Image\nrandaug = augkey.RandAugment()\nplan = randaug.plan_augment() \naugmented_image = randaug.apply_image(image, *plan)\n```\n\nSee the [demo notebook](demo.ipynb) for more examples.\n\n",
      "technique": "Header extraction"
    }
  ]
}