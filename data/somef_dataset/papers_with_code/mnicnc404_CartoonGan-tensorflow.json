{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Thanks to the author `[Chen et al., CVPR18]` who published this great work\n- [CartoonGAN-Test-Pytorch-Torch](https://github.com/Yijunmaverick/CartoonGAN-Test-Pytorch-Torch) where we extracted pretrained Pytorch model weights for TensorFlow usage\n- [TensorFlow](https://www.tensorflow.org/) which provide many useful tutorials for learning TensorFlow 2.0:\n    - [Deep Convolutional Generative Adversarial Network](https://www.tensorflow.org/alpha/tutorials/generative/dcgan)\n    - [Build a Image Input Pipeline](https://www.tensorflow.org/alpha/tutorials/load_data/images)\n    - [Get started with TensorBoard](https://www.tensorflow.org/tensorboard/r2/get_started)\n    - [Custom layers](https://www.tensorflow.org/tutorials/eager/custom_layers)\n- [Google Colaboratory](https://colab.research.google.com/) which allow us to train the models and [cartoonize images](#cartoonize-using-colab-notebook) using free GPUs\n- [TensorFlow.js](https://www.tensorflow.org/js) team which help us a lot when building the [online demo](https://leemeng.tw/generate-anime-using-cartoongan-and-tensorflow2-en.html) for CartoonGAN\n- [taki0112/CartoonGAN-Tensorflow](https://github.com/taki0112/CartoonGAN-Tensorflow) where we modify [edge_smooth.py](https://github.com/taki0112/CartoonGAN-Tensorflow/blob/master/edge_smooth.py) to fit our needs \n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1508.06576",
      "https://arxiv.org/abs/1807.11164"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9365800403498337
      ],
      "excerpt": ": If you didn't specify --light on your training, you should remove --light \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9365800403498337
      ],
      "excerpt": ": If you didn't specify --light on your training, you should remove --light \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9365800403498337
      ],
      "excerpt": ": If you didn't specify --light on your training, you should remove --light \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/mnicnc404/CartoonGan-tensorflow",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-02-16T01:29:43Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-29T06:46:33Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9952050137497117,
        0.8619839668792443
      ],
      "excerpt": "Check our blog posts with project overview, online demo and gallery of generated anime:  \n| Blog post | Language |  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8161608459287036
      ],
      "excerpt": "| Generate Anime using CartoonGAN and TensorFlow 2.0 | English | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9410416209319031,
        0.9206790476236641
      ],
      "excerpt": "Top-left corner is real world image, and the other 3 images are generated by CartoonGAN using different anime styles. \nThis repo demonstrates how to: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9848273968540274
      ],
      "excerpt": "When we design the light-weight generator, ShuffleNet V2 is taken as our reference. This generator is designed to minimalize inference time while achieving similar effect. We will make some minor adjustments to discriminator as well when --light is specified. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9548261581835681
      ],
      "excerpt": "In addition to metrics and loss functions, it is good practice to keep an eye on the images generated by GAN during training as well. Using our script, monitoring generated images on TensorBoard is a no-brainer: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9587669934928953
      ],
      "excerpt": ": default of --out_dir is out \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8036376512963079
      ],
      "excerpt": "Once your generator is well-trained, you can export your model to tfjs model and SavedModel: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9719148691528827
      ],
      "excerpt": ": default of --out_dir is exported_models \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8519664619128292
      ],
      "excerpt": "Note that the whole model architecture is saved to SavedModel and tfjs model, so you don't need to specify --light anymore. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9587669934928953
      ],
      "excerpt": ": default of --out_dir is out \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9126522184305979,
        0.8914988077167181
      ],
      "excerpt": "Image generated using our exported_models/light_paprika_SavedModel (left: original; right: generated): \nThis script is just a demontration of backward compatibility. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9719148691528827
      ],
      "excerpt": ": default of --out_dir is optimized_pbs \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8407190681953822
      ],
      "excerpt": "In this section, we explain how to generate anime using trained CartoonGAN. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9881473445907984
      ],
      "excerpt": "This is by far the easiest way to interact with the CartoonGAN. Just visit our blog post with web demo and upload your images: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9061635059586208,
        0.951525503480088
      ],
      "excerpt": "Under the hood, the webpage utilize TensorFlow.js to load the pretrained models and transform your images. However, due to the computation limits of the browsers, this approach currently only support static and relatively small images. If you want to transform gifs, keep reading. \nThe most exciting thing is to cartoonize existing gifs. We created a Colab notebook which set up everything including TensorFlow 2.0 for you to achieve that: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8619839668792443
      ],
      "excerpt": "| Blog post | Language |  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8161608459287036
      ],
      "excerpt": "| Generate Anime using CartoonGAN and TensorFlow 2.0 | English | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Generate your own cartoon-style images with CartoonGAN (CVPR 2018), powered by TensorFlow 2.0 Alpha.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/mnicnc404/CartoonGan-tensorflow/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 206,
      "date": "Wed, 29 Dec 2021 10:43:50 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/mnicnc404/CartoonGan-tensorflow/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "mnicnc404/CartoonGan-tensorflow",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You also need to prepare your own dataset and arrange the images under `datasets` folder as below: \n\n```text\ndatasets\n\u2514\u2500\u2500 YourDataset [your dataset name]\n    \u251c\u2500\u2500 testA [(must) 8 real-world images for evaluation]\n    \u251c\u2500\u2500 trainA [(must) (source) real-world images]\n    \u251c\u2500\u2500 trainB [(must) (target) cartoon images]\n    \u2514\u2500\u2500 trainB_smooth [(must, but can be generated by running scripts/smooth.py) cartoon images with smooth edges]\n```    \n\n`trainA` and `testA` folders contain real-world images, while `trainB` contain images with desired cartoon style. Notice that 8 images in `testA` folder will be evaluated after each epoch, so they should not appear in `trainA`. \n\nIn order to generate `trainB_smooth`, you can run `scripts/smooth.py`:\n\n```\npython path/to/smooth.py --path path/to/datasets/YourDataset  #: YourDataset should contain trainB for executing this script\n\n```\n\n[smooth.py credit to taki0112 https://github.com/taki0112/CartoonGAN-Tensorflow/blob/master/edge_smooth.py](https://github.com/taki0112/CartoonGAN-Tensorflow/blob/master/edge_smooth.py)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "First clone this repo:\n\n```bash\ngit clone https://github.com/mnicnc404/CartoonGan-tensorflow.git\n```\n\nTo run code in this repo properly, you will need:\n- [Python 3.6](https://www.python.org/downloads/release/python-360/)\n- [TensorFlow 2.0 Alpha](https://www.tensorflow.org/alpha)\n- [tqdm](https://github.com/tqdm/tqdm)\n- [imageio](https://pypi.org/project/imageio/)\n- [tb-nightly](https://pypi.org/project/tb-nightly/)\n\nFor environment management, we recommend [Conda](https://conda.io/projects/conda/en/latest/user-guide/install/index.html#regular-installation). You can get `conda` by installing [Anaconda](https://www.anaconda.com/distribution/#download-section) or [Miniconda](https://docs.conda.io/en/latest/miniconda.html).\nYou can install all the packages by running the following commands:\n\n```bash\n#: Select .yml file depending on your os and whether GPU is available\n#: environment_linux_gpu.yml for linux with nvidia gpu\n#: environment_linux_cpu.yml for linux without nvidia gpu\n#: environment_mac_cpu.yml for mac without nvidia gpu\nconda env create -n cartoongan -f environment_linux_gpu.yml\n#: Installs python==3.6.8 to the new environment\nconda activate cartoongan\n#: to deactivate this env, run \"conda deactivate\"\n```\n\nIf Anaconda is not available, you can also run:\n\n```bash\npip install -r requirements_gpu.txt\n#: use `requirements_cpu` if GPU is not available\n```\n\nYou will also need TensorFlow version of [keras-contrib](https://github.com/keras-team/keras-contrib) for some custom Keras layers used in our CartoonGAN implementation:\n\n```bash\ngit clone https://www.github.com/keras-team/keras-contrib.git \\\n    && cd keras-contrib \\\n    && python convert_to_tf_keras.py \\\n    && USE_TF_KERAS=1 python setup.py install\n```\n\nIf all above complete successfully, you're good to go.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8119351801076935
      ],
      "excerpt": "- Train your own CartoonGAN \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9116616346486635
      ],
      "excerpt": "    --dataset_name {your dataset name} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8818295955143418
      ],
      "excerpt": "    --out_dir path/to/your/desired/output/folder \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8114853448306886
      ],
      "excerpt": "    --out_dir path/to/your/desired/export/folder \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9202751553616645
      ],
      "excerpt": "You can try cartoonizing with your exported SavedModel: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.895222649498447
      ],
      "excerpt": "    --m_path path/to/your/exported/SavedModelFolder \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8818295955143418
      ],
      "excerpt": "    --out_dir path/to/your/desired/output/folder \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.895222649498447,
        0.8114853448306886
      ],
      "excerpt": "    --m_path path/to/your/exported/SavedModelFolder \\ \n    --out_dir path/to/your/desired/export/folder \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8757828780706873
      ],
      "excerpt": "You got the idea. Try cartoonizing your favorite images using styles available in the notebook. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9290150265443406
      ],
      "excerpt": "When specified, train.py will initialize a light-weight generator for training a CartoonGAN.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8365116126743457
      ],
      "excerpt": "    --dataset_name {your dataset name} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091,
        0.8206613167691293,
        0.834392926644795,
        0.8603952815217164
      ],
      "excerpt": "python inference_with_ckpt.py \\ \n    --m_path path/to/model/folder \\ \n    --img_path path/to/your/img.jpg \\ \n    --out_dir path/to/your/desired/output/folder \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8422466026746916
      ],
      "excerpt": "And generated image will be saved topath/to/your/desired/output/folder/img.jpg`. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8206613167691293
      ],
      "excerpt": "    --m_path path/to/model/folder \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python inference_with_saved_model.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.834392926644795,
        0.8603952815217164
      ],
      "excerpt": "    --img_path path/to/your/img.jpg \\ \n    --out_dir path/to/your/desired/output/folder \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8425172114968145
      ],
      "excerpt": "And generated image will be saved to path/to/your/desired/output/folder/img.jpg. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python to_pb.py \\ \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/mnicnc404/CartoonGan-tensorflow/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Copyright 2019 Meng Lee and Ching Ning Chen.  All rights reserved.\\n\\n                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright 2019, Meng Lee and Ching Ning Chen.\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# This repo is no longer being maintained. To reproduce the result, please 100% follow the instructions including environment settings and training commands.",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "CartoonGan-tensorflow",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "mnicnc404",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/mnicnc404/CartoonGan-tensorflow/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This method is handy if you already clone the repo and set up the environment.\n\nCurrently, there are 4 styles available:\n- `shinkai`\n- `hayao`\n- `hosoda`\n- `paprika`\n\nFor demo purpose, let's assume we want to transform [input_images/temple.jpg](input_images/temple.jpg):\n\n<img src=\"input_images/temple.jpg\" alt=\"temple\" width=\"33%\"/>\n\nTo cartoonize this image with `shinkai` and `hayao` styles, you can run:\n\n```commandline\npython cartoonize.py \\\n    --input_dir input_images \\\n    --output_dir output_images \\\n    --styles shinkai hayao \\\n    --comparison_view horizontal\n```\n\n![cartoonize-script-demo](images/cartoonize-script-demo.gif)\n\nThe transformed result will be saved as [output_images/comparison/temple.jpg](output_images/comparison/temple.jpg) like this:\n\n![transformed_temple.jpg](output_images/comparison/temple.jpg)\n\nThe left-most image will be the original image, followed by the styled result specified using `--styles` option.\n\nTo explore all options with detailed explaination, simply run `python cartoonize.py -h`:\n\n<img src=\"images/cartoonize-script-demo.jpg\" alt=\"demo\" width=\"80%\"/>\n\nCurrently, [cartoonize.py](cartoonize.py) will load pretrained models released by the [author](http://cg.cs.tsinghua.edu.cn/people/~Yongjin/Yongjin.htm) of CartoonGAN and [CartoonGAN-Test-Pytorch-Torch](https://github.com/Yijunmaverick/CartoonGAN-Test-Pytorch-Torch) to turn input images into cartoon-like images.\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 738,
      "date": "Wed, 29 Dec 2021 10:43:50 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "tensorflow",
      "deep-learning",
      "gan",
      "generative-art",
      "generative-adversarial-network",
      "tf-keras",
      "keras",
      "tensorboard",
      "tensorflow2"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Although you may have to tune hyperparameters to generate best result for your own datasets, train following settings that we found effective can be your starting point.\n\nIf you get more than 16GB memory in your GPU, you can try these settings (Note that `--light` indicates that we are training GAN with a light-weight generator):\n\n```bash\npython train.py \\\n    --batch_size 8 \\\n    --pretrain_epochs 1 \\\n    --content_lambda .4 \\\n    --pretrain_learning_rate 2e-4 \\\n    --g_adv_lambda 8. \\\n    --generator_lr 8e-5 \\\n    --discriminator_lr 3e-5 \\\n    --style_lambda 25. \\\n    --light \\\n    --dataset_name {your dataset name}\n```\n\nNote that `style_lambda` is for `style loss` [(source)](https://arxiv.org/abs/1508.06576).\nIf your GPU does not have 16GB memory, you can use a smaller `batch_size` and use lower learning rates accordingly. For example, for `batch_size = 4`, you can try:\n\n```bash\npython train.py \\\n    --batch_size 4 \\\n    --pretrain_epochs 1 \\\n    --content_lambda .4 \\\n    --pretrain_learning_rate 1e-4 \\\n    --g_adv_lambda 8. \\\n    --generator_lr 4e-5 \\\n    --discriminator_lr 1.5e-5 \\\n    --style_lambda 25. \\\n    --light \\\n    --dataset_name {your dataset name}\n```\n\n<img src=\"images/train-demo.gif\" alt=\"train-demo\" width=\"80%\"/>\n\nDetailed log messages, model architecture and progress bar are all provided. This enable you to gain a better understanding of what is happening when training a CartoonGAN. \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Basically, there are 3 approachs to generate cartoon-style images in this repo:\n\n| Approach | Description |\n| ------------- | ------------- |\n| [Cartoonize using TensorFlow.js](#cartoonize-using-tensorflowjs) | Cartoonize images with TensorFlow.js on browser, no setup needed |\n| [Cartoonize using Colab Notebook](#cartoonize-using-colab-notebook) | Google Colab let us use free GPUs to cartoonize images faster |\n| [Clone this repo and run script](#clone-this-repo-and-run-script) | Suitable for power users and those who want to make this repo better :) |\n\nYou can start with preferred approach or watch the demos first (shown below).\n\n",
      "technique": "Header extraction"
    }
  ]
}