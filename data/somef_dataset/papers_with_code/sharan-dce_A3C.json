{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1602.01783  \nAsynchronously updates Policy and Value Nets by training episodes in parallel  \n\n## Running\nTo create logs, checkpoints and gifs directories, run  \nbash ./refresh.sh  \nThen,  \nchmod 777 ./run.sh  \n./run  \n\n\nYou can directly run the module (\\_\\_main\\_\\_.py"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9991295298092048
      ],
      "excerpt": "Paper Link: https://arxiv.org/abs/1602.01783 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sharan-dce/A3C",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-02-03T07:13:51Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-05T17:48:51Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "An implementation of the Asynchronous Advantage Actor Critic (A3C) algorithm for any environment",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sharan-dce/A3C/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 08:36:45 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/sharan-dce/A3C/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "sharan-dce/A3C",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/sharan-dce/A3C/master/runclassic.sh",
      "https://raw.githubusercontent.com/sharan-dce/A3C/master/refresh.sh",
      "https://raw.githubusercontent.com/sharan-dce/A3C/master/run.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9146390198290634
      ],
      "excerpt": "In run.sh, all arguments passed to the main.py script are listed. Modify them as you wish. The environment argument expects a standard gym environment which can be built using gym.make(). Parameters have been shared between the Policy and Value nets. I am using 4 threads for my testing, but use 16 if possible (my lappy cant take more :P).   \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8032572022622921
      ],
      "excerpt": "Will add samples once fine tuning and training is done. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/sharan-dce/A3C/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Asynchronous Advantage Actor Critic (A3C)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "A3C",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "sharan-dce",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sharan-dce/A3C/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To create logs, checkpoints and gifs directories, run  \nbash ./refresh.sh  \nThen,  \nchmod 777 ./run.sh  \n./run  \n\n\nYou can directly run the module (\\_\\_main\\_\\_.py) as:  \n  \npython3 \\_\\_main\\_\\_.py \\\\  \n--learning_rate 0.003 \\\\  \n--gradient_clipping 5.0 \\\\  \n--environment Breakout-v0 \\\\  \n--gamma 0.99 \\\\  \n--checkpoint_dir ./bin/checkpoints/ \\\\  \n--log_dir ./bin/logs \\\\  \n--threads 4 \\\\  \n--critic_coefficient 0.1 \\\\  \n--checkpoint_save_interval 1 \\\\  \n--update_intervals 5 \\\\  \n--gifs_dir ./bin/gifs \\\\  \n--gifs_save_interval 1 \\\\  \n\\",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 08:36:45 GMT"
    },
    "technique": "GitHub API"
  }
}