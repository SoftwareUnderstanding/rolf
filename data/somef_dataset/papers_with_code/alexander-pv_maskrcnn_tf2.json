{
  "citation": [
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "SE-Net [154] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8090016440670298
      ],
      "excerpt": "                                       class_key='object', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8090016440670298
      ],
      "excerpt": "                                     class_key='object', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9960965048981569
      ],
      "excerpt": "                                 year=2017, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9960965048981569
      ],
      "excerpt": "                               year=2017, \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/alexander-pv/maskrcnn_tf2",
    "technique": "GitHub API"
  },
  "contributor": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Alexander Popkov: [@alexander-pv](https://github.com/alexander-pv)\n\nFeel free to write me about the repo issues and its update ideas.\n\n",
      "technique": "Header extraction"
    }
  ],
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-06-26T13:47:09Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-20T08:38:03Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9908551509697938,
        0.9724851796373466,
        0.9846589826264459,
        0.9534973376200873
      ],
      "excerpt": "This repository is based on matterport Mask-RCNN model implementation. The \nmain things about the model were added from the original repository. The repo is an attempt to make Mask-RCNN model more \ntransparent to researchers and more applicable in terms of inference optimization. Besides, new backbones were added in \norder to have a choice in balance between accuracy and speed, to make model more task-specific. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.855770686127011,
        0.8581929906932696,
        0.855770686127011,
        0.8581929906932696
      ],
      "excerpt": "ResNet [18, 34, 50, 101, 152] \nResNeXt [50, 101] \nSE-ResNet [18, 34, 50, 101, 152] \nSE-ResNeXt [50, 101] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9311943093394047
      ],
      "excerpt": ": a list of losses definition and final model compiling with optimizer defined in CONFIG. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9311943093394047
      ],
      "excerpt": ": a list of losses definition and final model compiling with optimizer defined in CONFIG. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9880659039251858,
        0.8030022365823656,
        0.9410525205352408
      ],
      "excerpt": "The project suggests a straightforward way of Mask-RCNN inference optimization on x86_64 architecture and also on \nNVIDIA Jetson devices (AArch64). Here you do not need to fix .uff graph and then optimize it with TensorRT. The model \noptimizing way here is based on pure .onnx graph with only one prepared .onnx graph modification function for TensorRT. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9724568342484701,
        0.924365519236785
      ],
      "excerpt": "Convert your tensorflow.keras model to .onnx with tf2onnx. \nInference with onnxruntime: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.924365519236785,
        0.854242114011356
      ],
      "excerpt": "Inference with TensorRT: \nChange your .onnx graph made on step 2. by including TensorRT-implemented Mask-RCNN layers with \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8696109918699888
      ],
      "excerpt": "Use TensorRT optimization for a modified .onnx-graph to prepare TensoRT-engine: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9496727714953944
      ],
      "excerpt": "One of them is proposalLayerPlugin which contains general parameters to be changed. In this repo parameters are placed in \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9578194846631553
      ],
      "excerpt": "it is important to rebuild nvinfer_plugin with updated config. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8528386496307109
      ],
      "excerpt": ": Set your TensorRT version by switching the branch. Here is an example for 7.2 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8825813575073537
      ],
      "excerpt": "   model configuration that is stored in src/common/config.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9078956358411271
      ],
      "excerpt": "about TensorRT OSS on Jetson was very helpful for the manual: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8825813575073537
      ],
      "excerpt": "   model configuration that is stored in src/common/config.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9645637028794498,
        0.9526793821248092,
        0.9681729226595159
      ],
      "excerpt": "Profiling with trtexec TensorRT tool with default maxBatch (1). For tests we took Mask-RCNN model with 2 classes \nincluding background. Note, that for comparison we used original Mask-RCNN model with ResNet101 and (1, 3, 1024, 1024) \ninput shape and updated tensorflow v2 Mask-RCNN model with all supported backbones and with (1, 1024, 1024, 3), (1, 512, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9771017280723103
      ],
      "excerpt": "of official TensorRT github repository. For this model trtexec command: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Mask R-CNN for object detection and instance segmentation with Keras and TensorFlow V2 and ONNX and TensorRT optimization support. ",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/alexander-pv/maskrcnn_tf2/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Tue, 28 Dec 2021 11:14:24 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/alexander-pv/maskrcnn_tf2/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "alexander-pv/maskrcnn_tf2",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/alexander-pv/maskrcnn_tf2/master/notebooks/example_evaluate_model_balloon.ipynb",
      "https://raw.githubusercontent.com/alexander-pv/maskrcnn_tf2/master/notebooks/example_training_balloon.ipynb",
      "https://raw.githubusercontent.com/alexander-pv/maskrcnn_tf2/master/notebooks/example_data_loader_coco.ipynb",
      "https://raw.githubusercontent.com/alexander-pv/maskrcnn_tf2/master/notebooks/example_data_loader_balloon.ipynb",
      "https://raw.githubusercontent.com/alexander-pv/maskrcnn_tf2/master/notebooks/example_inference_tf_onnx_trt_balloon.ipynb",
      "https://raw.githubusercontent.com/alexander-pv/maskrcnn_tf2/master/notebooks/example_tensorflow_to_onnx_tensorrt_balloon.ipynb",
      "https://raw.githubusercontent.com/alexander-pv/maskrcnn_tf2/master/notebooks/example_training_coco.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. There is a general config about Mask-RCNN building and training in `./src/common/config.py` represented as a dict.\n   Prepare it for a specific task (`CLASS_DICT` dictionary for class ids and names, other parameters are in `CONFIG`\n   dictionary.)\n\n2. Configure your dataset class. In the basic example we use general dataset class named `SegmentationDataset` for\n   dealing with masks made in VGG Image Annotator.\\\n   In `./src/samples/balloon` you can inspect prepared `BalloonDataset` which inherits `SegmentationDataset` and process\n   balloon image samples from the original repository.\\\n   In `./src/samples/coco` you can inspect prepared `CocoDataset` for MS COCO dataset.\\\n   Any prepared dataset class can be passed to DataLoader in  `./src/preprocess/preprocess.py` which generates batches.\\\n   You can also configure your own data augmentation. The default training augmentation is\n   in `./src/preprocess/augmentation.py`\n   in `get_training_augmentation` function. The default augmentation pipeline is based\n   on [albumentations](https://github.com/albumentations-team/albumentations) library.\n\n   See also:\n    * `./notebooks/example_data_loader_balloon.ipynb`\n    * `./notebooks/example_data_loader_coco.ipynb`\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\n#: Define preferred Tensorflow version: tf2.{2,3,4,5}\n#: For example, Tensorflow 2.2 env:\n$ conda create -n tf2.2 python=3.7\n$ conda activate tf2.2\n$ cd ./requirements && pip install -r requirements_tf2.2.txt\n\n#: You may also need onnx_graphsurgeon and tensorrt python binding for TensorRT optimization\n$ pip install <TENSORRT_PATH>/python/<TENSORRT_PYTHON_BINDING.whl>\n$ pip install <TENSORRT_PATH>/onnx_graphsurgeon/onnx_graphsurgeon-x.y.z-py2.py3-none-any.whl\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8798398995912303
      ],
      "excerpt": ": Limit GPU memory for tensorflow container \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8798398995912303
      ],
      "excerpt": ": Limit GPU memory for tensorflow container \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8164452547447889
      ],
      "excerpt": "from samples.coco import coco \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8798398995912303
      ],
      "excerpt": ": Limit GPU memory for tensorflow container \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.830730471053299
      ],
      "excerpt": "You can inspect optimization steps with python in example_tensorflow_to_onnx_tensorrt_balloon.ipynb. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9657127385280285,
        0.9121316021372803
      ],
      "excerpt": "Get your TensorRT path: <TENSORRT_PATH> \nMake sure that the following path in ~/.bashrc: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.933538006273495,
        0.9900911149970294
      ],
      "excerpt": ": Clone TensorRT OSS \n$ git clone https://github.com/NVIDIA/TensorRT.git \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9890804013380797,
        0.8270538936472002,
        0.9935309876697507
      ],
      "excerpt": "$ cd TensorRT/ && git checkout release/7.2 && git pull \n$ git submodule update --init --recursive \n$ mkdir -p build && cd build \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9096104964140866
      ],
      "excerpt": "Build nvinfer_plugin: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8474895321345809
      ],
      "excerpt": "$ make nvinfer_plugin -j$(nproc) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8902627162932362
      ],
      "excerpt": "$ mkdir ~/backups \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8433207766856815
      ],
      "excerpt": ": Update links \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.947829375322817
      ],
      "excerpt": "Basically, terminal does not recognize trtexec command. You can add to ~/.bashrc path to trtexec with alias: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9043929270298233
      ],
      "excerpt": "$ source ~/.bashrc \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.896947640995804
      ],
      "excerpt": "Update cmake on Jetson Ubuntu 18.04 OS: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9557385721310518,
        0.9251682068623595,
        0.9709679278994273
      ],
      "excerpt": "$ wget https://github.com/Kitware/CMake/releases/download/v3.13.5/cmake-3.13.5.tar.gz \n$ tar xvf cmake-3.13.5.tar.gz \n$ cd cmake-3.13.5/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8474895321345809,
        0.9931626210712194
      ],
      "excerpt": "$ make -j$(nproc) \n$ sudo make install \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9900911149970294,
        0.9890804013380797,
        0.8270538936472002
      ],
      "excerpt": "$ git clone https://github.com/NVIDIA/TensorRT.git \n$ cd TensorRT/ &amp;&amp; git checkout release/7.1 &amp;&amp; git pull \n$ git submodule update --init --recursive \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9935309876697507
      ],
      "excerpt": "$ mkdir -p build &amp;&amp; cd build \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9096104964140866
      ],
      "excerpt": "Build nvinfer_plugin: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8474895321345809
      ],
      "excerpt": "$ make nvinfer_plugin -j$(nproc) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8902627162932362
      ],
      "excerpt": "$ mkdir ~/backups \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8433207766856815
      ],
      "excerpt": ": Update links \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9102621601526133
      ],
      "excerpt": "You can add to ~/.bashrc path to trtexec with alias if it is not known in terminal: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9043929270298233
      ],
      "excerpt": "$ source ~/.bashrc \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9009110761608731
      ],
      "excerpt": "Basic example: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.925671696398174,
        0.8801854956928516,
        0.8796325398080971,
        0.9144825998041071,
        0.8934477375241742,
        0.8645247153997478
      ],
      "excerpt": "import tensorflow as tf \nfrom preprocess import preprocess \nfrom preprocess import augmentation as aug \nfrom training import train_model \nfrom model import mask_rcnn_functional \nfrom common.utils import tf_limit_gpu_memory \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8082621466833697,
        0.8123763140827432
      ],
      "excerpt": ": Limit GPU memory for tensorflow container \ntf_limit_gpu_memory(tf, 4500) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8843337329198684,
        0.8745203800765894
      ],
      "excerpt": "Balloon dataset example: \nDownload balloon dataset here \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8401558704798054
      ],
      "excerpt": "import os \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.925671696398174,
        0.8792195917863067,
        0.8801854956928516,
        0.8796325398080971,
        0.9144825998041071,
        0.8934477375241742,
        0.8645247153997478,
        0.8082621466833697,
        0.8123763140827432
      ],
      "excerpt": "import tensorflow as tf \nfrom samples.balloon import balloon \nfrom preprocess import preprocess \nfrom preprocess import augmentation as aug \nfrom training import train_model \nfrom model import mask_rcnn_functional \nfrom common.utils import tf_limit_gpu_memory \n: Limit GPU memory for tensorflow container \ntf_limit_gpu_memory(tf, 4500) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8231212047827607
      ],
      "excerpt": "MS COCO dataset example: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8401558704798054
      ],
      "excerpt": "import os \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.925671696398174
      ],
      "excerpt": "import tensorflow as tf \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516,
        0.8796325398080971,
        0.9144825998041071,
        0.8934477375241742,
        0.8645247153997478,
        0.8082621466833697,
        0.8123763140827432
      ],
      "excerpt": "from preprocess import preprocess \nfrom preprocess import augmentation as aug \nfrom training import train_model \nfrom model import mask_rcnn_functional \nfrom common.utils import tf_limit_gpu_memory \n: Limit GPU memory for tensorflow container \ntf_limit_gpu_memory(tf, 4500) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.807183190356504
      ],
      "excerpt": ": You can also download dataset with auto_download=True argument \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8589534893990137
      ],
      "excerpt": "                                 subset='train', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "                                 auto_download=True, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "                               auto_download=True, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8841046256134723
      ],
      "excerpt": "Logs folder with weights and scalars will appear outside src. Monitoring training with tensorboard tool: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.805369075975246
      ],
      "excerpt": "Convert your tensorflow.keras model to .onnx with tf2onnx. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8073707885066482
      ],
      "excerpt": "src/common/config.py. Thus, to configure MaskRCNN special layers in TensorRT, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8129587159181642
      ],
      "excerpt": "Open header TensorRT/plugin/proposalLayerPlugin/mrcnn_config.h and change Mask-RCNN config according to the trained \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428
      ],
      "excerpt": "Run trtexec: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8129587159181642
      ],
      "excerpt": "Open header TensorRT/plugin/proposalLayerPlugin/mrcnn_config.h and change Mask-RCNN config according to the trained \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428
      ],
      "excerpt": "Run trtexec: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8289669050403863
      ],
      "excerpt": "  $ trtexec --uff=mask_rcnn_resnet101_nchw.uff --uffInput=input_image,3,1024,1024 --output=mrcnn_detection,mrcnn_mask/Sigmoid --workspace=4096 --verbose \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9190597570922576
      ],
      "excerpt": "| Model           |Backbone|Precision|Mean GPU compute, ms|Mean Host latency, ms|Input shape|Total params| \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8128527608644954
      ],
      "excerpt": "|Mask-RCNN|EfficientNetB0|fp16|24.5434|24.8687|(1, 512, 512, 3)|25,001,128| \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9190597570922576
      ],
      "excerpt": "|Model|Backbone|Precision|Mean GPU compute, ms|Mean Host latency, ms|Input shape|Total params| \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8383234821375756,
        0.8383234821375756
      ],
      "excerpt": "|Mask-RCNN|ResNet50|fp32|375.936|376.317|(1, 1024, 1024, 3)|45,668,309| \n|Mask-RCNN|ResNet50|fp16|130.978|131.368|(1, 1024, 1024, 3)|45,668,309| \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8167864595609668
      ],
      "excerpt": "|Mask-RCNN|EfficientNetB0|fp16|66.0013|66.1224|(1, 512, 512, 3)|25,001,128| \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/alexander-pv/maskrcnn_tf2/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/alexander-pv/maskrcnn_tf2/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Mask R-CNN\\n\\nThe MIT License (MIT)\\n\\nCopyright (c) 2017 Matterport, Inc.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n\\n\\nMask R-CNN. Tensorflow v2 support with additional backbones, ONNX&TensorRT inference optimization.\\n\\nThe MIT License (MIT)\\n\\nCopyright (c) 2021 Alexander_Popkov\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Mask-RCNN in Tensorflow v2  ##",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "maskrcnn_tf2",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "alexander-pv",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/alexander-pv/maskrcnn_tf2/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 19,
      "date": "Tue, 28 Dec 2021 11:14:24 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "mask-rcnn",
      "tensorflow2",
      "computer-vision",
      "python",
      "tensorrt",
      "onnx",
      "instance-segmentation"
    ],
    "technique": "GitHub API"
  }
}