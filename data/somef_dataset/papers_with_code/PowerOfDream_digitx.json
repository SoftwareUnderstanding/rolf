{
  "citation": [
    {
      "confidence": [
        0.8207940084462922
      ],
      "excerpt": "bn0 (BatchNormalization)     (None, 32, 32, 16)        64 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.842790493796475
      ],
      "excerpt": "At epoch 992: [5.6470384e-05, 1.0] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9559715772848645,
        0.9559715772848645,
        0.9559715772848645
      ],
      "excerpt": "conv0 (Conv2D)               (None, 32, 32, 32)        832 \nbn0 (BatchNormalization)     (None, 32, 32, 32)        128 \nactivation_28 (Activation)   (None, 32, 32, 32)        0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8444342525991423
      ],
      "excerpt": "Trainable params: 11,745 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.842790493796475
      ],
      "excerpt": "At epoch 992: [0.007384127, 1.0] \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/PowerOfDream/digitx",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-07-25T15:28:50Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-10T02:29:44Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "return model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577302739126875,
        0.8577302739126875,
        0.8577302739126875
      ],
      "excerpt": "after_flatten (Dense)        (None, 128)               131200 \nafter_flatten2 (Dense)       (None, 64)                8256 \nsoftmax_out (Dense)          (None, 11)                715 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "return model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "\u5370\u5237\u4f53\u6570\u5b57\u8bc6\u522bPlayground",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/PowerOfDream/digitx/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 7,
      "date": "Tue, 28 Dec 2021 03:41:49 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/PowerOfDream/digitx/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "PowerOfDream/digitx",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8233588558014837
      ],
      "excerpt": "Google\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0Python\u751f\u6001\u4e0b\u751f\u6210\u56fe\u50cf\u8981\u6bd4C++/Qt\u7b80\u5355\u592a\u591a\u4e86\uff0cPIL + numpy \u4e00\u884c\u4ee3\u7801\u8981\u9876\u51e0\u5341\u884cC++\u4ee3\u7801\u7684\u611f\u89c9\uff01 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8068799384102223,
        0.8661176197453521
      ],
      "excerpt": "X = Conv2D(16, (5, 5), strides = (1, 1), padding = 'same', name = 'conv0')(X_input) \nX = BatchNormalization(axis = 3, name = 'bn0')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "X = MaxPooling2D((2, 2), name = 'max_pool0')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "X = BatchNormalization(axis = 3, name = 'bn1')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "X = MaxPooling2D((2, 2), name = 'max_pool1')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "X = BatchNormalization(axis = 3, name = 'bn2')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "X = MaxPooling2D((2, 2), name = 'max_pool2')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "X = BatchNormalization(axis = 1, name = 'bn3')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "X = BatchNormalization(axis = 3, name = 'bn0')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521,
        0.8068799384102223
      ],
      "excerpt": "X = MaxPooling2D((2, 2), name = 'max_pool0')(X) \nX = Conv2D(16, (1, 1), strides = (1, 1), padding = 'same', name = 'nin0')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "X = BatchNormalization(axis = 3, name = 'bn1')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521,
        0.8068799384102223
      ],
      "excerpt": "X = MaxPooling2D((2, 2), name = 'max_pool1')(X) \nX = Conv2D(16, (1, 1), strides = (1, 1), padding = 'same', name = 'nin1')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "X = BatchNormalization(axis = 3, name = 'bn2')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8304793526948224
      ],
      "excerpt": "X = Conv2D(11, (1, 1), strides = (1, 1), padding = 'same', name = 'nin2')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521,
        0.8661176197453521
      ],
      "excerpt": "X = BatchNormalization(axis = 1, name = 'bn3')(X) \nX = Activation('softmax', name=\"softmax_out\")(X) \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9336801098518991,
        0.9012248701992861,
        0.8779323532116492
      ],
      "excerpt": ": char_img_gen.py \u751f\u6210\u8bad\u7ec3\u6837\u672c \nimport char_img_gen as cg \nX, Y = cg.gen_batch_examples(batch_size = 100, img_size = 32, font_dir = './font', output_path = './examples') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": ": digitx_model.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8207290740316953,
        0.8345902924911094,
        0.8587174708410772
      ],
      "excerpt": "X_input = Input(input_shape, name = 'input') \nX = Conv2D(16, (5, 5), strides = (1, 1), padding = 'same', name = 'conv0')(X_input) \nX = BatchNormalization(axis = 3, name = 'bn0')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "X = MaxPooling2D((2, 2), name = 'max_pool0')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8587174708410772
      ],
      "excerpt": "X = BatchNormalization(axis = 3, name = 'bn1')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179,
        0.8230997826200711,
        0.8587174708410772
      ],
      "excerpt": "X = MaxPooling2D((2, 2), name = 'max_pool1')(X) \nX = Conv2D(64, (3, 3), strides = (1, 1), padding = 'same', name = 'conv2')(X) \nX = BatchNormalization(axis = 3, name = 'bn2')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "X = MaxPooling2D((2, 2), name = 'max_pool2')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8587174708410772
      ],
      "excerpt": "X = BatchNormalization(axis = 1, name = 'bn3')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.906614234580968
      ],
      "excerpt": "Layer (type)                 Output Shape              Param #: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8934745846565956
      ],
      "excerpt": "Total params: 168,267 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9012248701992861
      ],
      "excerpt": "import digitx_model as dm \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8737873112808705
      ],
      "excerpt": "dm.train(model, 1000) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9012248701992861,
        0.9064243972641041
      ],
      "excerpt": "import digitx_model as dm \ndm.test(model = model, example_num = 100000, save_error_image = True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": ": digitx_model.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8207290740316953
      ],
      "excerpt": "X_input = Input(input_shape, name = 'input') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8587174708410772
      ],
      "excerpt": "X = BatchNormalization(axis = 3, name = 'bn0')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179,
        0.8345902924911094
      ],
      "excerpt": "X = MaxPooling2D((2, 2), name = 'max_pool0')(X) \nX = Conv2D(16, (1, 1), strides = (1, 1), padding = 'same', name = 'nin0')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8587174708410772
      ],
      "excerpt": "X = BatchNormalization(axis = 3, name = 'bn1')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179,
        0.8345902924911094
      ],
      "excerpt": "X = MaxPooling2D((2, 2), name = 'max_pool1')(X) \nX = Conv2D(16, (1, 1), strides = (1, 1), padding = 'same', name = 'nin1')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8587174708410772
      ],
      "excerpt": "X = BatchNormalization(axis = 3, name = 'bn2')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8587174708410772
      ],
      "excerpt": "X = BatchNormalization(axis = 1, name = 'bn3')(X) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.906614234580968
      ],
      "excerpt": "Layer (type)                 Output Shape              Param #: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9012248701992861,
        0.8635081453375558,
        0.8737873112808705
      ],
      "excerpt": "import digitx_model as dm \nmodel = dm.create(use_global_average_pooling = True) \ndm.train(model, 1000) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9012248701992861,
        0.8951722220293535
      ],
      "excerpt": "import digitx_model as dm \ndm.test(model = model, example_num = 10000, save_error_image = True) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/PowerOfDream/digitx/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 PowerOfDream\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "\u9879\u76ee\u7b80\u4ecb",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "digitx",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "PowerOfDream",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/PowerOfDream/digitx/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 34,
      "date": "Tue, 28 Dec 2021 03:41:49 GMT"
    },
    "technique": "GitHub API"
  }
}