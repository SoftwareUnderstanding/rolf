{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1406.4729\n\n    Here, the resulting feature maps are flattened into (batch, -1",
      "https://arxiv.org/abs/1612.01105\n\n    Here, the resulting feature maps are not flattened, but rather concatenated into (batch, C', H, W"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9985319060770389
      ],
      "excerpt": "Flattened (1D) concatenation, a la https://arxiv.org/abs/1406.4729 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9971077832068026
      ],
      "excerpt": "2. Feature map (2D) concatenation, a la https://arxiv.org/abs/1612.01105 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/daveboat/spp",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-08-27T15:56:50Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-10-26T14:43:39Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8001123997115024
      ],
      "excerpt": "Module for the spatial pyramid pooling (SPP) module used in classification, object detection, and segmentation tasks in \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9566708972152068
      ],
      "excerpt": "SPP is said to endow local predictions with regional and global context. For example, in the segmentation case, the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.972760223254903,
        0.8646764715302342,
        0.9479034867078703,
        0.9173612626479563,
        0.9717331884484159
      ],
      "excerpt": "These are stacked with the regular CNN base's feature maps for final convolution into class logits for prediction. In \nthis way, each pixel's prediction has direct access to context about the entire image, and its region, as well as local \nfeatures. So, a pixel might be more likely to be considered part of a car if it sees that road-like textures are in the \nimage, or that a tree is nearby. \nThis module is written to accommodate two styles of feature concatenation: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8459725998685368,
        0.8960787504055496
      ],
      "excerpt": "results in a (batch, sum_i (l_i * l_i * in_channels)) output tensor. This more or less faithfully recreates the SPP \nmodule in the original spatial pyramid pooling paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8658203583319357,
        0.9807141694501914
      ],
      "excerpt": "Here, the resulting feature maps are not flattened, but rather concatenated into (batch, C', H, W) tensors, where C' \nis the sum of the channels in the incoming feature maps, plus all pooled feature maps. This results in a \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8509211849130884,
        0.9481765753934187
      ],
      "excerpt": "due to floor division in computing the number of channels each pooled feature map should have, when in_channels is \nnot divisible by the number of levels. This more or less faithfully recreates the SPP module in the PSPNet paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8198387616274312,
        0.961813865139324
      ],
      "excerpt": "a Module, but in the second case, convolutions with weights are needed. \nThis code was written and commented for minimalism and ease of understanding. Yes, it would be easier to do this with \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A minimal and easy-to-understand implementation of spatial pyramid pooling in pytorch",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/daveboat/spp/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Fri, 24 Dec 2021 18:11:54 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/daveboat/spp/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "daveboat/spp",
    "technique": "GitHub API"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/daveboat/spp/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Spatial pyramid pooling",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "spp",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "daveboat",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/daveboat/spp/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Fri, 24 Dec 2021 18:11:54 GMT"
    },
    "technique": "GitHub API"
  }
}