{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1809.11096",
      "https://arxiv.org/abs/1710.10196"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- \\[1\\] [BigGAN](https://arxiv.org/abs/1809.11096) \n- \\[2\\] [PGAN](https://arxiv.org/abs/1710.10196) \n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yaxingwang/MineGAN",
    "technique": "GitHub API"
  },
  "contact": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you run into any problems with this code, please submit a bug report on the Github site of the project. For another inquries pleace contact with me: yaxing@cvc.uab.es\n",
      "technique": "Header extraction"
    }
  ],
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-04T14:28:25Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-04T02:23:32Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9974268042302391
      ],
      "excerpt": "One of the attractive characteristics of deep neural networks is their ability to transfer knowledge obtained in one domain to other related domains. As a result, high-quality networks can be trained in domains with relatively little training data. This property has been extensively studied for discriminative networks but has received significantly less attention for generative models.  Given the often enormous effort required to train GANs, both computationally as well as in the dataset collection, the re-use of pretrained GANs is a desirable objective.  We propose a novel knowledge transfer method for generative models based on mining the knowledge that is most beneficial to a specific target domain, either from a single or multiple pretrained GANs.  This is done using a miner network that identifies which part of the generative distribution of each pretrained GAN outputs samples closest to the target domain.  Mining effectively steers GAN sampling towards suitable regions of the latent space, which facilitates the posterior finetuning and avoids pathologies of other methods such as mode collapse and lack of flexibility.  We perform experiments on several complex datasets using various GAN architectures (BigGAN, Progressive GAN) and show that the proposed method, called MineGAN, effectively transfers knowledge to domains with few target images, outperforming existing methods.  In addition, MineGAN can successfully transfer knowledge from multiple pretrained GANs. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9256189503694028,
        0.9010087782702997,
        0.9380240583004501
      ],
      "excerpt": "Pretrained model: downloading the pretrained model from Biggan, and put it into data/your_data/weights. Note using G_ema.pth to replace G.pth, since we dones't use ema. The pretrained model is moved into MineGA/weights/biggan  \nDownloading inception model and moving it into MineGA  \nPreparing data: leveraging  sh scripts/utils/prepare_data.py, and put it into data/your_data/data. Please check Biggan to learn how to generate the data  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "GAN, transfer learning, few data. ",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yaxingwang/MineGAN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Wed, 22 Dec 2021 01:45:38 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yaxingwang/MineGAN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "yaxingwang/MineGAN",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/install.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/off_manifold/test_noiselen_step3.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/off_manifold/test_noiselen_step2.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/off_manifold/test_unbias.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/off_manifold/test_noiselen_step4.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/off_manifold/test_portions.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/off_manifold/test_noiselen_step1.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/on_manifold/test_noiselen_step3.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/on_manifold/test_noiselen_step2.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/on_manifold/test_unbias.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/on_manifold/test_noiselen_step4.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/on_manifold/test_portions.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/on_manifold/test_noiselen_step1.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/MNISTtf_old/conditional_continue/off_manifold/pretrain_gan.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/MNISTtf_old/conditional_continue/on_manifold/pretrain_gan.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/MNISTtf_old/unconditioanal/off_manifold/pretrain_gan.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/MNISTtf_old/unconditioanal/on_manifold/pretrain_gan.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/MNISTtf_old/unconditioanal/on_manifold/test_portions.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/MNISTtf_old/conditional_one_hot/miner/pretrain_gan.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/MNISTtf_old/conditional_one_hot/off_manifold/pretrain_gan.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/MNISTtf/MNISTtf_old/conditional_one_hot/on_manifold/pretrain_gan.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/scripts/launch_BigGAN_bs256x8.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/scripts/utils/prepare_data.sh",
      "https://raw.githubusercontent.com/yaxingwang/MineGAN/master/scripts/utils/duplicate.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Install tensorflow/pytorch\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9876930950759156
      ],
      "excerpt": "git clone git@github.com:yaxingwang/MineGAN.git to get MineGA \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8192897861637923
      ],
      "excerpt": "Preparing data: leveraging  sh scripts/utils/prepare_data.py, and put it into data/your_data/data. Please check Biggan to learn how to generate the data  \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yaxingwang/MineGAN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell",
      "Cuda",
      "MATLAB",
      "Dockerfile",
      "C++"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Andy Brock\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "MineGAN: effective knowledge transfer from  GANs to target domains with few images",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "MineGAN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "yaxingwang",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yaxingwang/MineGAN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Python2.7, NumPy, SciPy, NVIDIA GPU\n- **Tensorflow/Pytorch:** the version of tensorflow should be more 1.0(https://www.tensorflow.org/), pytorch is more 0.4\n- **Dataset:** MNIST, CelebA, HHFQ, Imagenet, Places365 or your dataset \n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 69,
      "date": "Wed, 22 Dec 2021 01:45:38 GMT"
    },
    "technique": "GitHub API"
  }
}