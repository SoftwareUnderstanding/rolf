{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1512.03385\n  \n  It is observed that as the networks goes deeper and deeper, during the convergence, the degradation of weights is an inevitable problem. The weights get too small which leads to saturated accuracy.\n  To avoid this problem, skip connections are introduced into the architecture so that instead of just stacking up of layers, the prior reidual mapping is also concatenated with the current mapping so that the architecture is explicitly let to fit a residual mapping.\n  Below is a Residual block used in the ResNet architecture. Here the identity mapping of input X is also added to the output of the convolution block. On doing this in all the convolution blocks, the degradation problem is tackled.\n  \n![image](https://user-images.githubusercontent.com/52725044/60933099-83409d00-a2de-11e9-8fe6-7957f2425ff9.png",
      "https://arxiv.org/abs/ https://arxiv.org/abs/1512.03385\n  \n  It is observed that as the networks goes deeper and deeper, during the convergence, the degradation of weights is an inevitable problem. The weights get too small which leads to saturated accuracy.\n  To avoid this problem, skip connections are introduced into the architecture so that instead of just stacking up of layers, the prior reidual mapping is also concatenated with the current mapping so that the architecture is explicitly let to fit a residual mapping.\n  Below is a Residual block used in the ResNet architecture. Here the identity mapping of input X is also added to the output of the convolution block. On doing this in all the convolution blocks, the degradation problem is tackled.\n  \n![image](https://user-images.githubusercontent.com/52725044/60933099-83409d00-a2de-11e9-8fe6-7957f2425ff9.png)\n\nIt is trained on Imagenet and the input shape is configured to 32 x 32 x 3, which is the size of our CIFAR10 dataset\n\n# How Gradcam works:\n\n### Reference: Where CNN is looking? \u2013 Grad CAM (http://www.hackevolve.com/where-cnn-is-looking-grad-cam/)\n\n  Gradient-weighted Class Activation Mapping (Grad-CAM), uses the gradients of any target concept (say logits for \u2018dog\u2019 or even a caption), flowing into the final convolutional layer to produce a coarse localization map highlighting the important regions in the image for predicting the concept.\nProcess:\n\n    1. Compute the gradient of the class output value with respect to the feature map\n    2. Pool the gradients over all the axes leaving out the channel dimension\n    3. Weigh the output feature map with the computed gradient values\n    4. Average the weighed feature map along the channel dimension resulting in a heat map of size same as the input image\n    5. Finally normalize the heat map to make the values in between 0 and 1\n\n3 funtions are written which returns the activation map from thier respective layers as below:\n\n    stage1_unit1_relu2 : Initial stage of the network\n    stage1_unit2_relu2 : Layer approximately in the middle of the architecture\n    stage4_unit1_relu1: Deeper stage of the network\n"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "  Gradient-weighted Class Activation Mapping (Grad-CAM), uses the gradients of any target concept (say logits for \u2018dog\u2019 or even a caption), flowing into the final convolutional layer to produce a coarse localization map highlighting the important regions in the image for predicting the concept.\nProcess:\n\n    1. Compute the gradient of the class output value with respect to the feature map\n    2. Pool the gradients over all the axes leaving out the channel dimension\n    3. Weigh the output feature map with the computed gradient values\n    4. Average the weighed feature map along the channel dimension resulting in a heat map of size same as the input image\n    5. Finally normalize the heat map to make the values in between 0 and 1\n\n3 funtions are written which returns the activation map from thier respective layers as below:\n\n    stage1_unit1_relu2 : Initial stage of the network\n    stage1_unit2_relu2 : Layer approximately in the middle of the architecture\n    stage4_unit1_relu1: Deeper stage of the network\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9905374072495863
      ],
      "excerpt": "5. Upload your GitHub Link here: https://tinyurl.com/yxt6x2qq (https://tinyurl.com/yxt6x2qq) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9945167849443287
      ],
      "excerpt": "Source: https://en.wikipedia.org/wiki/CIFAR-10 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vinay-EIP/EIP-session-5-assignment",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-07-10T00:48:24Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-07-10T05:24:50Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9129209468084093
      ],
      "excerpt": "3. Create a gallery of your GradCam results \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "EIP session 5 assignment",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vinay-EIP/EIP-session-5-assignment/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 04:55:56 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/vinay-EIP/EIP-session-5-assignment/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "vinay-EIP/EIP-session-5-assignment",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/vinay-EIP/EIP-session-5-assignment/master/EIP_session_5_Assignment.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9378336408634791,
        0.8429084939027055
      ],
      "excerpt": "5. Upload your GitHub Link here: https://tinyurl.com/yxt6x2qq (https://tinyurl.com/yxt6x2qq) \n6. You need to attempt this quiz before the next session starts: https://tinyurl.com/y2t2ux8z (https://tinyurl.com/y2t2ux8z) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/vinay-EIP/EIP-session-5-assignment/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "EIP Session-5 Assignment",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "EIP-session-5-assignment",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "vinay-EIP",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vinay-EIP/EIP-session-5-assignment/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "    Keras\n    Classification_models : Github: https://github.com/qubvel/classification_models.git\n    Numpy\n    Matplotlib\n    OpenCV\n    \n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 04:55:56 GMT"
    },
    "technique": "GitHub API"
  }
}