{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1905.11946.\n\n\n## 1. About EfficientNet Models\n\nEfficientNets are a family of image classification models, which achieve state-of-the-art accuracy, yet being an order-of-magnitude smaller and faster than previous models.\n\nWe develop EfficientNets based on AutoML and Compound Scaling. In particular, we first use [AutoML Mobile framework](https://ai.googleblog.com/2018/08/mnasnet-towards-automating-design-of.html",
      "https://arxiv.org/abs/1811.06965",
      "https://arxiv.org/abs/1512.03385",
      "https://arxiv.org/abs/1512.03385"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8625425717964789,
        0.9998416198938155
      ],
      "excerpt": "[1] Mingxing Tan and Quoc V. Le.  EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks. ICML 2019. \n   Arxiv link: https://arxiv.org/abs/1905.11946. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/DableUTeeF/keras-efficientnet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-05-31T10:43:07Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-11-29T13:21:50Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8228533102225415
      ],
      "excerpt": "[1] Mingxing Tan and Quoc V. Le.  EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks. ICML 2019. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9796153583255878,
        0.8440461982986185
      ],
      "excerpt": "EfficientNets are a family of image classification models, which achieve state-of-the-art accuracy, yet being an order-of-magnitude smaller and faster than previous models. \nWe develop EfficientNets based on AutoML and Compound Scaling. In particular, we first use AutoML Mobile framework to develop a mobile-size baseline network, named as EfficientNet-B0; Then, we use the compound scaling method to scale up this baseline to obtain EfficientNet-B1 to B7. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.986383404716351,
        0.9726775843586937,
        0.9819980763163162,
        0.9791207993946961
      ],
      "excerpt": "EfficientNets achieve state-of-the-art accuracy on ImageNet with an order of magnitude better efficiency: \nIn high-accuracy regime, our EfficientNet-B7 achieves state-of-the-art 84.4% top-1 / 97.1% top-5 accuracy on ImageNet with 66M parameters and 37B FLOPS, being 8.4x smaller and 6.1x faster on CPU inference than previous best Gpipe. \nIn middle-accuracy regime, our EfficientNet-B1 is 7.6x smaller and 5.7x faster on CPU inference than ResNet-152, with similar ImageNet accuracy. \nCompared with the widely used ResNet-50, our EfficientNet-B4 improves the top-1 accuracy from 76.3% of ResNet-50 to 82.6% (+6.3%), under similar FLOPS constraint. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "keras-efficientnet: A Keras implementation of EfficientNet",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/DableUTeeF/keras-efficientnet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 7,
      "date": "Mon, 27 Dec 2021 12:57:02 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/DableUTeeF/keras-efficientnet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "DableUTeeF/keras-efficientnet",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.9303755601074072
      ],
      "excerpt": "    <img src=\"./g3doc/params.png\" width=\"100%\" /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8941104397016074
      ],
      "excerpt": "    <img src=\"./g3doc/flops.png\", width=\"90%\" /> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/DableUTeeF/keras-efficientnet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "A Keras implementation of EfficientNet",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "keras-efficientnet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "DableUTeeF",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/DableUTeeF/keras-efficientnet/blob/master/readme.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 17,
      "date": "Mon, 27 Dec 2021 12:57:02 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "In order to get the TF official weights.\n* Create a Colab file in your Google Drive.\n* Mount the drive with \n```\nfrom google.colab import drive\ndrive.mount('/content/drive/')\n```\n* Run this command in your created Colab\n\n```!gsutil cp -r gs://cloud-tpu-checkpoints/efficientnet \"/content/drive/My Drive/effnets/\"```\n* Download the effnets folder from your drive and extract somewhere.\n\n* Extract the weights from each layer to a directory by.\n```python\nfrom extract_weights import extract_tensors_from_checkpoint_file\n\nextract_tensors_from_checkpoint_file('efficientnet-b0/model.ckpt-109400')  #: change this line to your extracted directory\n```\n\n* Each TF weights directory should be like.\n```\nbest_eval.txt\ncheckpoint\nmodel.ckpt-12345.data-00000-of-00001\nmodel.ckpt-12345.index\nmodel.ckpt-12345.meta\n```\n   Use `model.ckpt-12345` in this case.\n\n* Create the hdf5 weights by run the `load_weights.py`, make sure to change `WEIGHTS_DIR` and `model_name` first.\n\n* The example of testing a panda image is in `main.py`\n\n",
      "technique": "Header extraction"
    }
  ]
}