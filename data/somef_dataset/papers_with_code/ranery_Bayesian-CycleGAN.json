{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Code is inspired by [CycleGAN](https://github.com/junyanz/CycleGAN).\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1703.10593",
      "https://arxiv.org/abs/1705.09558"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you find this codebase inspiring for your research, please cite:\n````\n@ARTICLE{you2020bayesian,\n  author={H. {You} and Y. {Cheng} and T. {Cheng} and C. {Li} and P. {Zhou}},\n  journal={IEEE Transactions on Neural Networks and Learning Systems},\n  title={Bayesian Cycle-Consistent Generative Adversarial Networks via Marginalizing Latent Sampling},\n  year={2020},\n  pages={1-15},\n  doi={10.1109/TNNLS.2020.3017669},\n  ISSN={2162-2388},\n}\n````\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@ARTICLE{you2020bayesian,\n  author={H. {You} and Y. {Cheng} and T. {Cheng} and C. {Li} and P. {Zhou}},\n  journal={IEEE Transactions on Neural Networks and Learning Systems},\n  title={Bayesian Cycle-Consistent Generative Adversarial Networks via Marginalizing Latent Sampling},\n  year={2020},\n  pages={1-15},\n  doi={10.1109/TNNLS.2020.3017669},\n  ISSN={2162-2388},\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "        <th>0.12</th> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ranery/Bayesian-CycleGAN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-04-13T12:06:26Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-08T10:40:35Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Recent techniques built on Generative Adversarial Networks (GANs) like [CycleGAN](https://arxiv.org/abs/1703.10593) are able to learn mappings between domains from unpaired datasets through min-max optimization games between generators and discriminators. However, it remains challenging to stabilize the training process and diversify generated results. To address these problems, we present the non-trivial Bayesian extension of cyclic model and an integrated cyclic framework for inter-domain mappings.\n\nThe proposed method stimulated by [Bayesian GAN](https://arxiv.org/abs/1705.09558) explores the full posteriors of Bayesian cyclic model (with latent sampling) and optimizes the model with maximum a posteriori (MAP) estimation. By exploring the full posteriors over model parameters, the Bayesian marginalization could alleviate the risk of model collapse and boost multimodal distribution learning. Besides, we deploy a combination of L1 loss and GANLoss between reconstructed images and source images to enhance the reconstructed learning, we also prove that this variation has a global optimality theoretically and show its effectiveness in experiments.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8678368315698256
      ],
      "excerpt": "This is the PyTorch implementation for Bayesian Cycle-Consistent Generative Adversarial Networks via Marginalizing Latent Sampling published on IEEE TNNLS. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8234855091565759,
        0.916294685799906,
        0.8649240780043623
      ],
      "excerpt": "niter: number of epoches with starting learning rate \nniter_decay\uff1a number of epoches with non-linearly decay learning rate to zero periodically \nbeta1: momentum term of adam \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9646078394000667
      ],
      "excerpt": "The crutial options, like --gamma, take control over our model, which should be set carefully. We recommend batchSize set to 1 in order to get final results, we didn't have time to test other values that may lower FCN scores. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9322857185771739
      ],
      "excerpt": ": for cityscapes (128 x 256) using Bayesian cyclic model with noise margalization. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.926122270061698,
        0.8681897220800598
      ],
      "excerpt": "Our latest model are avaliable in Google drive \nFinal qualitative results samples for Bayesian cyclic model in unsupervised setting under condition gamma = 0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9574810066755987
      ],
      "excerpt": "Comparison about model stability: When gamma = 0.5, our method maintain stable convergence while the original one collapses to one distribution for photo2label task. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8730661073926473
      ],
      "excerpt": "<!-- - FID and Inception score for reconstructed learning --> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9463191226988606
      ],
      "excerpt": "In our experiment, we use Bayesian cyclic model with random noise marginalization for the first 100 epoches, and finetune the model with SFM latent sampling for the later 100 epoches. The results show that Bayesian version cyclic model outperform original one. Pre-trained models are available at Google drive \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9224877941736593
      ],
      "excerpt": "The training command are similar with cityscapes, but you should notice that the figures' size of Maps are resized to 256x256, consequently, --ratio should be 1. The results are illustrated as: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9940411884213334,
        0.9644968722706072
      ],
      "excerpt": "Art mapping is a kind of image style transfer, This dataset is crawled from Wikiart.org and Flickr by Junyan Zhu et all., which contains 1074 Monet artwork and 6853 Photographs. Interestingly, if we imposed restriction on latent space by using the encoder network to generate statistic feature map, Bayesian cyclic model could generate diversified images by replacing SFM with other features in inference process. \nIn our implementation, we use option --use_feat in inference procedure to let us change statistic feature map to any other pictures stored at /dataroot/feat. The results illustrated as follow: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9912859546135762
      ],
      "excerpt": "In cases where paired data is accessible, we can lever-age the condition to train our model in a semi-supervisedsetting. In the training process of Cityscapes, mapping errors often occur, for example, the Gaussian initial model cannot recognize trees, thus, trans-lating trees into something else due to the unsupervised set-ting. To resolve these ambiguities requires weak semanticsupervision, we can use 30 (around 1%) paired data (pictures of cityscape and corresponding label images) to initialize our model at the beginning for each epoch. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Bayesian Cycle-Consistent Generative Adversarial Networks via Marginalizing Latent Sampling",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ranery/Bayesian-CycleGAN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Thu, 23 Dec 2021 22:02:49 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ranery/Bayesian-CycleGAN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ranery/Bayesian-CycleGAN",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/ranery/Bayesian-CycleGAN/master/scripts/test_cyclegan_bayes_lsgan.sh",
      "https://raw.githubusercontent.com/ranery/Bayesian-CycleGAN/master/scripts/train_cyclegan_bayes_5_lsgan.sh",
      "https://raw.githubusercontent.com/ranery/Bayesian-CycleGAN/master/scripts/train_feature.sh",
      "https://raw.githubusercontent.com/ranery/Bayesian-CycleGAN/master/scripts/train_cyclegan_bayes_lsgan.sh",
      "https://raw.githubusercontent.com/ranery/Bayesian-CycleGAN/master/scripts/test_cyclegan_lsgan.sh",
      "https://raw.githubusercontent.com/ranery/Bayesian-CycleGAN/master/scripts/train_cyclegan_lsgan.sh",
      "https://raw.githubusercontent.com/ranery/Bayesian-CycleGAN/master/evaluation/eval_cityscapes/evaluate.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Install the required dependencies\n2. Clone this repository\n3. Download corresponding datasets\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8264750238204351
      ],
      "excerpt": "how_many: how many test images to run \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.811954895402125
      ],
      "excerpt": "python train_bayes_z.py --dataroot ~/data/cityscapes --name cityscapes_bayes_L1_lsgan_noise --batchSize 1 --loadSize 256 --ratio 2 --netG_A global --netG_B global --ngf 32 --num_D_A 1 --num_D_B 1 --mc_x 3 --mc_y 3 --n_blocks_global 6 --n_downsample_global 2 --niter 50 --niter_decay 50 --gamma 0 --lambda_kl 0.1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8589534893990137
      ],
      "excerpt": "continue train \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8059077485775562
      ],
      "excerpt": "python test_bayes_z.py --dataroot ~/data/cityscapes --name cityscapes_bayes_L1_lsgan --phase test --loadSize 256 --ratio 2 --netG_A global --netG_B global --ngf 32 --n_blocks_global 6 --n_downsample_global 2 --which_epoch latest --how_many 500 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.857540686979838
      ],
      "excerpt": "    <img src=\"./assets/cityscapes.PNG\" width = \"500\" alt=\"overlap\"  /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.857540686979838
      ],
      "excerpt": "    <img src=\"./assets/cityscapes_compare.png\" width = \"500\" alt=\"overlap\"  /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.857540686979838
      ],
      "excerpt": "    <img src=\"./assets/cityscapes_rec_fid_inception.png\" width = \"500\" alt=\"overlap\"  /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8151738871953376
      ],
      "excerpt": "    <img src=\"./assets/maps.png\" width = \"600\" alt=\"overlap\"  /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.857540686979838
      ],
      "excerpt": "    <img src=\"./assets/monet2photo.PNG\" width = \"600\" alt=\"overlap\"  /> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ranery/Bayesian-CycleGAN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "MATLAB",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 Haoran You\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Bayesian CycleGAN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Bayesian-CycleGAN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ranery",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ranery/Bayesian-CycleGAN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The code has the following dependencies:\n\n- python 3.5\n- torch 0.3.0\n- torchvision 0.2.0\n- pillow (PIL)\n- NVIDIA GPU + CUDA CuDNN\n\nInstall PyTorch and dependencies on linux please follow instructions at https://pytorch.org/.\nInstall python libraries [visdom](https://github.com/facebookresearch/visdom) and [dominate](https://github.com/Knio/dominate).\n````\npip install visdom\npip install dominate\n````\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 40,
      "date": "Thu, 23 Dec 2021 22:02:49 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "generative-adversarial-network",
      "cyclegan",
      "bayesian-methods",
      "image-segmentation",
      "image-translation"
    ],
    "technique": "GitHub API"
  }
}