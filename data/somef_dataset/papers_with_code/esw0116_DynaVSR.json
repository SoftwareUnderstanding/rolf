{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The code is built based on \n\n- [EDVR-Pytorch](https://github.com/xinntao/EDVR)\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1703.06211"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you like the paper, please cite our paper using:\n```\n@inproceedings{lee2021dynavsr,\n  title={DynaVSR: Dynamic Adaptive Blind Video Super-Resolution},\n  author={Lee, Suyoung and Choi, Myungsub and Lee, Kyoung Mu},\n  booktitle={Proceedings of the IEEE/CVF Winter Conference on Applications of Computer Vision},\n  pages={2093--2102},\n  year={2021}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{lee2021dynavsr,\n  title={DynaVSR: Dynamic Adaptive Blind Video Super-Resolution},\n  author={Lee, Suyoung and Choi, Myungsub and Lee, Kyoung Mu},\n  booktitle={Proceedings of the IEEE/CVF Winter Conference on Applications of Computer Vision},\n  pages={2093--2102},\n  year={2021}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.996702839350232
      ],
      "excerpt": "Link: Paper(Arxiv) | Paper(CVFOpenAccess) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/esw0116/DynaVSR",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-07-15T04:53:33Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-16T13:50:58Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9986825960132271
      ],
      "excerpt": "This repository is the official implementation of DynaVSR, which is accepted in WACV2021. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8428455731562099,
        0.8979411005071259
      ],
      "excerpt": "\u2514\u2500\u2500\u2500pretrained_models - put the downloadedpretrained model here \n\u2502   \u2514\u2500\u2500\u2500data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8481335105706387
      ],
      "excerpt": "|   calc_psnr_ssim.py - code for calculating psnrs and ssims for image sets \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "DynaVSR: Dynamic Adaptive Blind VideoSuper-Resolution",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- You can download pretrained models using the link: [[Google Drive](https://drive.google.com/drive/folders/1zkeCbsS6Eb6e8IZqb34lxa6gNlZLKGNv?usp=sharing)]\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/esw0116/DynaVSR/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 8,
      "date": "Mon, 27 Dec 2021 20:28:19 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/esw0116/DynaVSR/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "esw0116/DynaVSR",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/esw0116/DynaVSR/master/codes/run_downscaling.sh",
      "https://raw.githubusercontent.com/esw0116/DynaVSR/master/codes/run_visual.sh",
      "https://raw.githubusercontent.com/esw0116/DynaVSR/master/codes/data_scripts/prepare_DIV2K_x4_dataset.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- **[Vimeo90K](http://toflow.csail.mit.edu/)**: Training / **[Vid4](https://drive.google.com/drive/folders/10-gUO6zBeOpWEamrWKCtSkkUFukB9W5m)**: Validation\n- **[REDS](https://seungjunnah.github.io/Datasets/reds)**: Training, Validation\n  - download *train_sharp* data\n- after downloading the dataset, use run_downscaling.sh to make lr, slr images\n  - `sh codes/run_downscaling.sh`\n- make symbolic link to the datasets.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.911824578519624
      ],
      "excerpt": "  cd ./codes \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.911824578519624
      ],
      "excerpt": "  cd ./codes \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.911824578519624
      ],
      "excerpt": "cd ./codes \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8147569067276753,
        0.8402977769685178
      ],
      "excerpt": "Or just use run_visual.sh (Uncomment line that you want to execute). \n  sh ./codes/run_visual.sh \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8431533961630051
      ],
      "excerpt": "\u2514\u2500\u2500\u2500pretrained_models - put the downloadedpretrained model here \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991,
        0.9336801098518991,
        0.9336801098518991
      ],
      "excerpt": "\u2502       \u2502   data_sampler.py \n\u2502       \u2502   old_kernel_generator.py \n\u2502       \u2502   random_kernel_generator.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8299200456947862
      ],
      "excerpt": "\u2502   \u2514\u2500\u2500\u2500models - model collections \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9149051736444557
      ],
      "excerpt": "\u2502       \u2502   options.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924976426181745
      ],
      "excerpt": "\u2502   \u2514\u2500\u2500\u2500utils \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8007020879091303
      ],
      "excerpt": "|   make_downscaled_images.py - code for making true slr images \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8313069260189063,
        0.8410005287128097
      ],
      "excerpt": "|   train.py - code for training the VSR network \n|   train_dynavsr.py  - code for training DynaVSR \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8205793946315308
      ],
      "excerpt": "|   test_maml.py - code for testing DynaVSR \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924519046838435
      ],
      "excerpt": "  python -m torch.distributed.launch --nproc_per_node=8 --master_port=4321 train_dynavsr.py -opt options/train/[Path to YML file] --launcher pytorch --exp_name [Experiment Name] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.947450946602608
      ],
      "excerpt": "  python train_dynavsr.py -opt options/train/[Path to YML file] --exp_name [Experiment Name] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8600421329064648
      ],
      "excerpt": "To use your own test set, change the dataroot in EDVR_Demo.yml file to the folder containing images. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9357961493602885
      ],
      "excerpt": "  python test_dynavsr.py -opt options/test/[Path to YML file] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8094837470379743
      ],
      "excerpt": "<center><img src=\"./figures/dynavsr_qualitative1.png\" width=\"100%\"></center> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8323981534827382,
        0.8694512336796177
      ],
      "excerpt": "[2020-12-29] Add arbitrary input data testing script \n[2021-01-05] Add script for testing 4X scale EDVR models \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/esw0116/DynaVSR/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Cuda",
      "C++",
      "MATLAB",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "DynaVSR",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "DynaVSR",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "esw0116",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/esw0116/DynaVSR/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Current version is tested on:\n\n- Ubuntu 18.04\n- Python==3.7.7\n- numpy==1.17\n- [PyTorch](http://pytorch.org/)==1.3.1, torchvision==0.4.2, cudatoolkit==10.0\n- tensorboard==1.14.0\n- etc: pyyaml, opencv, scikit-image, pandas, imageio, tqdm\n\n``` text\n#: Easy installation (using Anaconda environment)\nconda env create -f environment.yml\nconda activate dynavsr\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 50,
      "date": "Mon, 27 Dec 2021 20:28:19 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- To run EDVR, first install [Deformable Convolution](https://arxiv.org/abs/1703.06211). We use [mmdetection](https://github.com/open-mmlab/mmdetection)'s dcn implementation. Please first compile it.\n  ```\n  cd ./codes/models/archs/dcn\n  python setup.py develop\n  ```\n",
      "technique": "Header extraction"
    }
  ]
}