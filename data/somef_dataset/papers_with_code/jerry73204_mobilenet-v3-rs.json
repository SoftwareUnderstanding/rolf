{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1905.02244"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jerry73204/mobilenet-v3-rs",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-06-12T19:56:26Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-07-13T10:46:34Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9673164303170161
      ],
      "excerpt": "Google's MobileNetV3 implemented using tch-rs framework, a Rust-binding of libtorch. MobileNetV3 model design was proposed on arXiv, and this project takes pytorch-mobilenet-v3 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "MobileNetV3 in Rust",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jerry73204/mobilenet-v3-rs/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 03:10:07 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jerry73204/mobilenet-v3-rs/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "jerry73204/mobilenet-v3-rs",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8642275437600669
      ],
      "excerpt": "Make sure your stable Rust and Cargo are ready, and follow cargo build to compile project. It's recommended to check out tch-rs' README to download pre-built libtorch binaries to speed up build process. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jerry73204/mobilenet-v3-rs/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Rust"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Hsiang-Jui Lin\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "MobileNetV3 in Rust",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "mobilenet-v3-rs",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "jerry73204",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jerry73204/mobilenet-v3-rs/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* CIFAR-10: Download binary version from [CIFAR site](https://www.cs.toronto.edu/~kriz/cifar.html), and run:\n\n```sh\ncargo run -- --dataset-name cifar-10 --dataset-dir /path/to/cifar-10-dir\n```\n\n* MNIST: Download and unpack all gzips to a directory from [MNIST site](http://yann.lecun.com/exdb/mnist/), and run:\n\n```sh\ncargo run -- --dataset-name mnist --dataset-dir /path/to/mnist-dir\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 03:10:07 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* CIFAR-10: Download binary version from [CIFAR site](https://www.cs.toronto.edu/~kriz/cifar.html), and run:\n\n```sh\ncargo run -- --dataset-name cifar-10 --dataset-dir /path/to/cifar-10-dir\n```\n\n* MNIST: Download and unpack all gzips to a directory from [MNIST site](http://yann.lecun.com/exdb/mnist/), and run:\n\n```sh\ncargo run -- --dataset-name mnist --dataset-dir /path/to/mnist-dir\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Here is example usage. It's suggested to visit our source code to understand details.\n\n```rust\n// model init\nlet mut vs = VarStore::new(Device::Cuda(0));\nlet root = vs.root();\nlet model = MobileNetV3::new(\n    &root / \"mobilenetv3\",\n    input_channel,\n    n_classes,\n    dropout,\n    width_mult,  // usually 1.0\n    Mode::Large,\n)?;\nlet opt = Adam::default().build(&vs, learning_rate)?;\n\n// training\nlet logits = model.forward_t(&images, true);\nlet loss = prediction_logits.cross_entropy_for_logits(&labels);\nopt.backward_step(&loss);\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}