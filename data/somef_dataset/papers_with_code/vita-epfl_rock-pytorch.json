{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1512.02325",
      "https://arxiv.org/abs/1606.00373",
      "https://arxiv.org/abs/1512.02325",
      "https://arxiv.org/abs/1512.02325",
      "https://arxiv.org/abs/1512.03385"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use this project in your research, please cite the corresponding paper:\n```text\n@inproceedings{mordan2018revisiting,\n  title={Revisiting Multi-Task Learning with {ROCK}: a Deep Residual Auxiliary Block for Visual Detection},\n  author={Mordan, Taylor and Thome, Nicolas and Henaff, Gilles and Cord, Matthieu},\n  booktitle={Advances in Neural Information Processing Systems (NeurIPS)},\n  pages={1310--1322},\n  year={2018}\n}\n```\nThis project was made by David Mizrahi at EPFL/VITA.\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "- Taylor Mordan, et al., [\"Revisiting Multi-Task Learning with ROCK: a Deep Residual Auxiliary Block for Visual Detection\"](http://papers.neurips.cc/paper/7406-revisiting-multi-task-learning-with-rock-a-deep-residual-auxiliary-block-for-visual-detection), NeurIPS 2018\n- Wei Liu, et al., [\"SSD: Single Shot MultiBox Detector\"](https://arxiv.org/abs/1512.02325), ECCV 2016.\n- Kaiming He, et al., [\"Deep Residual Learning for Image Recognition\"](https://arxiv.org/abs/1512.03385), CVPR 2016\n- Nathan Silberman, et al., [\"NYU Depth Dataset v2\"](https://cs.nyu.edu/~silberman/datasets/nyu_depth_v2.html), ECCV 2012\n\n- The SSD implemented in this project has been heavily influenced by these great SSD implementations:\n  * [PyTorch SSD by NVIDIA](https://pytorch.org/hub/nvidia_deeplearningexamples_ssd/)\n  * [ssd.pytorch by amdegroot](https://github.com/amdegroot/ssd.pytorch)\n  * [SSD by lufficc](https://github.com/lufficc/SSD)\n  * [pytorch-ssd by kuangliu](https://github.com/kuangliu/pytorch-ssd)\n  * [ssd.DomainAdaptation by chautan-utk](https://github.com/chauhan-utk/ssd.DomainAdaptation)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{mordan2018revisiting,\n  title={Revisiting Multi-Task Learning with {ROCK}: a Deep Residual Auxiliary Block for Visual Detection},\n  author={Mordan, Taylor and Thome, Nicolas and Henaff, Gilles and Cord, Matthieu},\n  booktitle={Advances in Neural Information Processing Systems (NeurIPS)},\n  pages={1310--1322},\n  year={2018}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.923846101177091
      ],
      "excerpt": "Revisiting Multi-Task Learning with ROCK: a Deep Residual Auxiliary Block for Visual Detection \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8444342525991423
      ],
      "excerpt": "Original      | 18.5%           | 37.6%         | \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vita-epfl/rock-pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-06-19T12:21:34Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-25T03:17:23Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8425646811435835,
        0.9507528655844214,
        0.9279591875205196,
        0.8431947791013584,
        0.9334251881831884,
        0.9365094227196883,
        0.8008882897956979
      ],
      "excerpt": "Revisiting Multi-Task Learning with ROCK: a Deep Residual Auxiliary Block for Visual Detection \nMulti-Task Learning (MTL) is appealing for deep learning regularization. In this \npaper, we tackle a specific MTL context denoted as primary MTL, where the ultimate goal is to \nimprove the performance of a given primary task by leveraging \nseveral other auxiliary tasks. Our main methodological contribution is to introduce \nROCK, a new generic multi-modal fusion block for deep learning tailored to the \nprimary MTL context. ROCK architecture is based on a residual connection, which \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9393839305134118,
        0.8007311280188254
      ],
      "excerpt": "The auxiliary predictor\u2019s architecture is also specifically designed to \nour primary MTL context, by incorporating intensive pooling operators for \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9444931412536032,
        0.9505361357917792,
        0.8763351054040482,
        0.8858661869843051,
        0.9567588029116127
      ],
      "excerpt": "and surface normal estimation as auxiliary tasks) validate the relevance of the \napproach and its superiority to flat MTL approaches. Our method outperforms \nstate-of-the-art object detection models on NYUv2 dataset by a large margin, and \nis also able to handle large-scale heterogeneous inputs (real and synthetic images) \nwith missing annotation modalities. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.951232532257774
      ],
      "excerpt": "Preparing the data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.853134726109167
      ],
      "excerpt": "Project structure \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8751490274772491
      ],
      "excerpt": "To train / evaluate / detect images using a baseline SSD, instead of a SSD with the ROCK block, add the --no_rock argument to the command. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8652745812149198,
        0.8835955896782705,
        0.978341667650876
      ],
      "excerpt": "By default, training implements the ROCK block, which is trained on 3 auxiliary tasks: scene, depth and surface normal prediction.   \nAny of these auxiliary tasks can be disabled during training using the --aux_tasks argument. \nAs ROCK is implemented on top of a Single Shot Detector, this repository can also be used for SSD implementations requiring non-square images.   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9161963792074743,
        0.98237882973777
      ],
      "excerpt": "By default, the model weights are only saved once training is completed. \nUse the --save_best_on_val argument to save the model with the best mAP on the validation data, and the --model_save_freq num_epochs argument to save the model every num_epochs. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9028844287523071
      ],
      "excerpt": "To evaluate the model with COCOeval and obtain the mean Average Precision (mAP), run: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9396990486361558
      ],
      "excerpt": "For evaluation, ground-truth and network output JSON files are created in data/eval in a format similar to the ones of the COCO dataset, which are then used by COCOeval to calculate the mAP. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9641040027667002,
        0.9159707999853204,
        0.9207650633339297
      ],
      "excerpt": "When running detection on a model with the ROCK block, the --scene_output_path, --depth_output_path and --normals_output_path arguments can be added to save the scene, depth and surface normal predictions of each image. \nThe --get_throughput argument can be added to obtain the model throughput (in images/sec). If this argument is added, drawing and saving the output images to a folder are disabled as these operations add a very significant time overhead, and the batch size is set to 1. \nExtra convolutional layers were added to each auxiliary task (between the encoder and the predictor), improving their performance (especially for the depth and scene prediction tasks), which in turn improves the mAP compared to a model without these additional convolutional layers. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9673323354299157,
        0.940560309566436,
        0.9835515339457872,
        0.9525406745010019,
        0.9537209072972889
      ],
      "excerpt": "Reverse Huber loss (berHu loss) used for depth prediction was changed to a Huber loss. The berHu loss, introduced in this paper, causes one pixel of the depth prediction to be extremely inaccurate, which is not desirable. This is a consequence of the threshold between linear and quadratic space being set by the maximal per-batch error. \nThe weight for the localization loss was changed from 3 to 6 to compensate for the difference in complexity between the classification and localization task, resulting in a slightly improved mAP. \n5 additional SSD detection layers are added to the refined feature map, instead of 6 in the original paper. Furthermore, the scale of the prior boxes (set by smin and smax) differs from the ones given in the SSD paper to accommodate for that change. The prior boxes scale used here is commonly used in other SSD implementations as well. \nA different kind of loss was tested for the classification task. Unlike the confidence loss used in both the original SSD paper and ROCK paper, which only picks the top negative examples when sorted by loss so that the ratio between negatives and positives is at most 3:1, this loss takes into account all negative examples, and weighs them relative to the amount of positive examples in each sample to limit imbalance. \nThis loss yields a better mean average precision when trained for the amount of iterations indicated in the paper (21.9% mAP@[0.50:0.95] instead of 19.9% when tested on the validation set).  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8076932235163332
      ],
      "excerpt": "Model         | mAP@[0.50:0.95] | mAP@[0.50]    | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A PyTorch implementation of \"Revisiting Multi-Task Learning with ROCK: a Deep Residual Auxiliary Block for Visual Detection\"",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\nmkdir data\ncd data/\n\nwget http://horatio.cs.nyu.edu/mit/silberman/nyu_depth_v2/nyu_depth_v2_labeled.mat\n\nwget http://horatio.cs.nyu.edu/mit/silberman/indoor_seg_sup/splits.mat\n\nwget https://cs.nyu.edu/~deigen/dnl/normals_gt.tgz\ntar xzf normals_gt.tgz\n\nwget https://github.com/vita-epfl/rock-pytorch/releases/download/v0.1/val_split.txt\n\ncd ..\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vita-epfl/rock-pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 02:48:09 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/vita-epfl/rock-pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "vita-epfl/rock-pytorch",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/vita-epfl/rock-pytorch/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Trained on train set (795 images), evaluated on test set (654 images).\n\nModel trained on a NVIDIA RTX 2080 Ti GPU, with:\n- `--num_iters 30_000`\n- `--lr 5e-5`\n- `--scheduler_milestones 25_000`\n- `--scheduler_gamma 0.1`\n\n\nModel           | mAP@[0.50:0.95]   | mAP@[0.50]    | Training time     | Throughput        |\n----------------|-------------------|---------------|-------------------|-------------------|\nBaseline SSD    | 18.5%             | 35.3%         | <b>2.9 hours</b>  | <b>65.9 FPS</b>   |\nROCK            | <b>20.6%</b>      | <b>39.9%</b>  | 3.3 hours         | 55.8 FPS          |\n\nThe weights for these models can be downloaded here:\n- [Baseline SSD](https://github.com/vita-epfl/rock-pytorch/releases/download/v0.1/baseline_ssd_trained.pt) (480 MB)\n- [ROCK](https://github.com/vita-epfl/rock-pytorch/releases/download/v0.1/rock_trained.pt) (565 MB)\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "As the NYUv2 dataset does not contain object bounding boxes, some pre-processing is needed to add the bounding boxes, format the data in a suitable way for training and create the training / testing (and optionally validation) sets.\nTo do so, run:\n```\npython3 -m rock.run prep\n```\nwith the appropriate optional arguments, if needed.\n\n<b> Note: </b>\nThe validation set, if added using the `--val_split_path` argument, is extracted from the training set.\nIt is therefore important to differentiate between the training set obtained without validation data (which contains the training set in its entirety), and the training set obtained with validation data (from which the images of the validation set have been removed), and it is recommended to save these two datasets under different paths.   \nAn example file structure for the datasets can be found in the [project structure section](#project-structure).\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n#: To clone the repository using HTTPS\ngit clone https://github.com/vita-epfl/rock-pytorch.git\ncd rock-pytorch/\n```\n\nThis project has been tested with python==3.7 and pytorch==1.5.0. All required packages can be found in the `requirements.txt` file.\n\n<b> Note </b>: the pip and conda versions of `pycocotools` are out-of-date and incompatible with `numpy 1.18` or above. To install an up-to-date version of `pycocotools`, run:\n```\npip install cython; pip install -U 'git+https://github.com/cocodataset/cocoapi.git#:subdirectory=PythonAPI'\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8514763608467749
      ],
      "excerpt": "Download links: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9586339947304289,
        0.8148083309861376
      ],
      "excerpt": "- Train / val split: https://github.com/vita-epfl/rock-pytorch/releases/download/v0.1/val_split.txt \nAll the commands can be run through a main file called run.py using subparsers. To check all the possible commands, run: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8246644344449771
      ],
      "excerpt": "- python3 -m rock.run train -h \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8246644344449771
      ],
      "excerpt": "python3 -m rock.run train \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8552746675538669
      ],
      "excerpt": "- run python3 -m rock.run create_image_folder with the appropriate optional arguments if needed, to create a folder containing only the images from a pre-processed NYUv2 dataset (created using rock.run prep). \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8011523095973613,
        0.8008331685760428,
        0.8008331685760428,
        0.8960691809406459,
        0.8059726881648243,
        0.8008331685760428,
        0.8008331685760428,
        0.9164893524687361
      ],
      "excerpt": "All the commands can be run through a main file called run.py using subparsers. To check all the possible commands, run: \n- python3 -m rock.run -h \n- python3 -m rock.run prep -h \n- python3 -m rock.run train -h \n- python3 -m rock.run eval -h \n- python3 -m rock.run create_image_folder -h \n- python3 -m rock.run detect -h \nor check the file: rock/run.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8862230309887746,
        0.8960691809406459
      ],
      "excerpt": "To train the model, run: \npython3 -m rock.run train \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8332655064876293
      ],
      "excerpt": "  - resume training from a checkpoint \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8004641911946673
      ],
      "excerpt": "Use the --checkpoint_path path/to/checkpoint argument to resume training from a checkpoint. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8588805015086598
      ],
      "excerpt": "python3 -m rock.run eval [model_path] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.843185862449741
      ],
      "excerpt": "- run python3 -m rock.run create_image_folder with the appropriate optional arguments if needed, to create a folder containing only the images from a pre-processed NYUv2 dataset (created using rock.run prep). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8500981938211227
      ],
      "excerpt": "python3 -m rock.run detect [model_path] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9014686614732157
      ],
      "excerpt": "The output images are saved in the specified folder (default: data/detection/output) with the same names as the input images. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9190440050840767,
        0.9190440050840767
      ],
      "excerpt": "    <img src=\"docs/rock_0170.png\" alt=\"rock_0170\" width=\"45%\"/> \n    <img src=\"docs/rock_1150.png\" alt=\"rock_1150\" width=\"45%\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9190440050840767,
        0.8739891000537701
      ],
      "excerpt": "    <img src=\"docs/ssd_1302.png\" alt=\"ssd_1302\" width=\"45.3%\"/> \n    <img src=\"docs/rock_1302.png\" alt=\"rock_1302\" width=\"42%\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9190440050840767,
        0.9190440050840767
      ],
      "excerpt": "    <img src=\"docs/ssd_0332.png\" alt=\"ssd_0332\" width=\"45%\"/> \n    <img src=\"docs/rock_0332.png\" alt=\"rock_0332\" width=\"45%\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8567594989573434,
        0.8739891000537701
      ],
      "excerpt": "    <img src=\"docs/ssd_0992.png\" alt=\"ssd_0992\" width=\"41.8%\"/> \n    <img src=\"docs/rock_0992.png\" alt=\"rock_0992\" width=\"47%\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924976426181745
      ],
      "excerpt": "\u251c\u2500\u2500 utils/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8289669050403863
      ],
      "excerpt": "\u2502   \u251c\u2500\u2500 output/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8672809540473905
      ],
      "excerpt": "\u251c\u2500\u2500 eval/   #: folder containg JSON files for COCOeval \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/vita-epfl/rock-pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright 2020 EPFL/VITA\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "rock-pytorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "rock-pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "vita-epfl",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vita-epfl/rock-pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "dmizr",
        "body": "Release adds download links to val split and network weights",
        "dateCreated": "2020-06-19T16:02:36Z",
        "datePublished": "2020-06-19T16:17:28Z",
        "html_url": "https://github.com/vita-epfl/rock-pytorch/releases/tag/v0.1",
        "name": "First release",
        "tag_name": "v0.1",
        "tarball_url": "https://api.github.com/repos/vita-epfl/rock-pytorch/tarball/v0.1",
        "url": "https://api.github.com/repos/vita-epfl/rock-pytorch/releases/27732392",
        "zipball_url": "https://api.github.com/repos/vita-epfl/rock-pytorch/zipball/v0.1"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 7,
      "date": "Wed, 29 Dec 2021 02:48:09 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "pytorch",
      "ssd",
      "resnet-50",
      "multitask-learning",
      "object-detection",
      "deep-learning",
      "nyu-depth-v2",
      "computer-vision"
    ],
    "technique": "GitHub API"
  }
}