{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The author would like to thank Ryuichi Yamamoto ([@r9y9](https://github.com/r9y9)) for his great repository, paper, and valuable discussions.\n\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1910.11480",
      "https://arxiv.org/abs/1910.06711",
      "https://arxiv.org/abs/2005.05106"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- [Parallel WaveGAN](https://arxiv.org/abs/1910.11480)\n- [r9y9/wavenet_vocoder](https://github.com/r9y9/wavenet_vocoder)\n- [LiyuanLucasLiu/RAdam](https://github.com/LiyuanLucasLiu/RAdam)\n- [MelGAN](https://arxiv.org/abs/1910.06711)\n- [descriptinc/melgan-neurips](https://github.com/descriptinc/melgan-neurips)\n- [Multi-band MelGAN](https://arxiv.org/abs/2005.05106)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.980992113017595
      ],
      "excerpt": "Source of the figure: https://arxiv.org/pdf/1910.11480.pdf \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Moon-sung-woo/ParallelWaveGan_korean",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-09-20T14:22:42Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-12-08T12:13:09Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.82003587134171
      ],
      "excerpt": ": Create a wavs folder and push the wav file of kss divided into folders 1,2,3,4 at once. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8659496182058252,
        0.8594374023861839
      ],
      "excerpt": "This repository provides Kaldi-style recipes, as the same as ESPnet. \nCurrently, the following recipes are supported. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9770354714514167
      ],
      "excerpt": "See more info about the recipes in this README. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "init",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Moon-sung-woo/ParallelWaveGan_korean/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Fri, 24 Dec 2021 18:07:18 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Moon-sung-woo/ParallelWaveGan_korean/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Moon-sung-woo/ParallelWaveGan_korean",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Moon-sung-woo/ParallelWaveGan_korean/master/notebooks/convert_melgan_from_pytorch_to_tensorflow.ipynb",
      "https://raw.githubusercontent.com/Moon-sung-woo/ParallelWaveGan_korean/master/notebooks/filter_design_example.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Moon-sung-woo/ParallelWaveGan_korean/master/utils/split_data.sh",
      "https://raw.githubusercontent.com/Moon-sung-woo/ParallelWaveGan_korean/master/utils/parse_options.sh",
      "https://raw.githubusercontent.com/Moon-sung-woo/ParallelWaveGan_korean/master/utils/make_subset_data.sh",
      "https://raw.githubusercontent.com/Moon-sung-woo/ParallelWaveGan_korean/master/utils/combine_data.sh",
      "https://raw.githubusercontent.com/Moon-sung-woo/ParallelWaveGan_korean/master/egs/kss/voc1/path.sh",
      "https://raw.githubusercontent.com/Moon-sung-woo/ParallelWaveGan_korean/master/egs/kss/voc1/cmd.sh",
      "https://raw.githubusercontent.com/Moon-sung-woo/ParallelWaveGan_korean/master/egs/kss/voc1/run.sh",
      "https://raw.githubusercontent.com/Moon-sung-woo/ParallelWaveGan_korean/master/egs/kss/voc1/local/data_download.sh",
      "https://raw.githubusercontent.com/Moon-sung-woo/ParallelWaveGan_korean/master/egs/kss/voc1/local/data_prep.sh",
      "https://raw.githubusercontent.com/Moon-sung-woo/ParallelWaveGan_korean/master/egs/ljspeech/voc1/path.sh",
      "https://raw.githubusercontent.com/Moon-sung-woo/ParallelWaveGan_korean/master/egs/ljspeech/voc1/cmd.sh",
      "https://raw.githubusercontent.com/Moon-sung-woo/ParallelWaveGan_korean/master/egs/ljspeech/voc1/run.sh",
      "https://raw.githubusercontent.com/Moon-sung-woo/ParallelWaveGan_korean/master/egs/ljspeech/voc1/local/data_download.sh",
      "https://raw.githubusercontent.com/Moon-sung-woo/ParallelWaveGan_korean/master/egs/ljspeech/voc1/local/data_prep.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You can select the installation method from two alternatives.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9893272198983933,
        0.9223334315953018,
        0.8474895321345809
      ],
      "excerpt": "$ git clone https://github.com/kan-bayashi/ParallelWaveGAN.git \n$ cd ParallelWaveGAN/tools \n$ make \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9922728809240362,
        0.8474895321345809
      ],
      "excerpt": ": command to install apex. \n$ make apex \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8982400445268062
      ],
      "excerpt": ": You should make files like this \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9855282968473015,
        0.9239741139367359
      ],
      "excerpt": "Note that we specify cuda version used to compile pytorch wheel. \nIf you want to use different cuda version, please check tools/Makefile to change the pytorch wheel to be installed. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "$ cd egs/kss/voc1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8352236542947944,
        0.8996597883265001,
        0.8352236542947944
      ],
      "excerpt": "$ ./run.sh --stage 0 --stop_stage 3 \n: If you want to specify the gpu \n$ CUDA_VISIBLE_DEVICES=1 ./run.sh --stage 2 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.898779401401522
      ],
      "excerpt": "$ ./run.sh --stage 2 --resume <path>/<to>/checkpoint-10000steps.pkl \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Moon-sung-woo/ParallelWaveGan_korean/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python",
      "Perl",
      "Shell",
      "Makefile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'The MIT License (MIT)\\n\\nCopyright (c) 2020 Tomoki Hayashi &#104;&#97;&#121;&#97;&#115;&#104;&#105;&#46;&#116;&#111;&#109;&#111;&#107;&#105;&#64;&#103;&#46;&#115;&#112;&#46;&#109;&#46;&#105;&#115;&#46;&#110;&#97;&#103;&#111;&#121;&#97;&#45;&#117;&#46;&#97;&#99;&#46;&#106;&#112;\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Parallel WaveGAN (+ MelGAN & Multi-band MelGAN) implementation with Pytorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "ParallelWaveGan_korean",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Moon-sung-woo",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Moon-sung-woo/ParallelWaveGan_korean/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This repository is tested on Ubuntu 18.04 with a GPU Titan V.\n\n- Python 3.6+\n- Cuda 10.0\n- CuDNN 7+\n- NCCL 2+ (for distributed multi-gpu training)\n- libsndfile (you can install via `sudo apt install libsndfile-dev` in ubuntu)\n- jq (you can install via `sudo apt install jq` in ubuntu)\n- sox (you can install via `sudo apt install sox` in ubuntu)\n\nDifferent cuda version should be working but not explicitly tested.  \nAll of the codes are tested on Pytorch 1.0.1, 1.1, 1.2, 1.3.1, 1.4, and 1.5.1.\n\nPytorch 1.6 works but there are some issues in cpu mode (See #198).\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Fri, 24 Dec 2021 18:07:18 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\n$ git clone https://github.com/kan-bayashi/ParallelWaveGAN.git\n$ cd ParallelWaveGAN\n$ pip install -e .\n#: If you want to use distributed training, please install\n#: apex manually by following https://github.com/NVIDIA/apex\n$ ...\n#: If you use docker and has error like AttributeError: module 'enum' has no attribute 'IntFlag'\n$ pip3 uninstall -y enum34\n```\nNote that your cuda version must be exactly matched with the version used for the pytorch binary to install apex.  \nTo install pytorch compiled with different cuda version, see `tools/Makefile`.\n\n",
      "technique": "Header extraction"
    }
  ]
}