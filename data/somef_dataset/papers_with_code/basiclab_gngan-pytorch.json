{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2109.02235](https://arxiv.org/abs/2109.02235",
      "https://arxiv.org/abs/2109.02235"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you find our work is relevant to your research, please cite:\n```\n@InProceedings{GNGAN_2021_ICCV,\n    author = {Yi-Lun Wu, Hong-Han Shuai, Zhi Rui Tam, Hong-Yu Chiu},\n    title = {Gradient Normalization for Generative Adversarial Networks},\n    booktitle = {Proceedings of the IEEE International Conference on Computer Vision (ICCV)},\n    month = {Oct},\n    year = {2021}\n}\n```",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@InProceedings{GNGAN_2021_ICCV,\n    author = {Yi-Lun Wu, Hong-Han Shuai, Zhi Rui Tam, Hong-Yu Chiu},\n    title = {Gradient Normalization for Generative Adversarial Networks},\n    booktitle = {Proceedings of the IEEE International Conference on Computer Vision (ICCV)},\n    month = {Oct},\n    year = {2021}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9999683475636963,
        0.9977994744046882
      ],
      "excerpt": "Yi-Lun Wu, Hong-Han Shuai, Zhi-Rui Tam, Hong-Yu Chiu \nPaper: https://arxiv.org/abs/2109.02235 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/basiclab/GNGAN-PyTorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-08-03T07:56:32Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-21T08:55:57Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9674316890246126
      ],
      "excerpt": "This is the official implementation of Gradient Normalized GAN (GN-GAN). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8882780459962271
      ],
      "excerpt": "We obtain celeba-hq from this repository and preprocess it into lmdb file. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "\u2502   \u251c\u2500\u2500 data.mdb \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "    \u251c\u2500\u2500 data.mdb \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "\u251c\u2500\u2500 data.mdb \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9047643497095849
      ],
      "excerpt": "- stl10.unlabeled.48.npz - Unlabeled set of STL10 in resolution 48x48 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9318657072848204
      ],
      "excerpt": "- celebahq.all.256.npz - Full dataset of CelebA-HQ 256x256 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8009512079859675
      ],
      "excerpt": "\u251c\u2500\u2500 celebahq.all.256.npz \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9880530242340722
      ],
      "excerpt": "All the reported values (Inception Score and FID) in our paper are calculated by official implementation instead of our implementation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9493461014526113
      ],
      "excerpt": "The compatible configuration list is shown in the following table: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8776003164584695
      ],
      "excerpt": "The function normalize_gradient is implemented based on torch.autograd module, which can easily normalize your forward propagation of discriminator by updating a single line. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.816120683259992
      ],
      "excerpt": "x_real = ...                                    #: real data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Official implementation for Gradient Normalization for Generative Adversarial Networks",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/basiclab/gngan-pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 7,
      "date": "Wed, 29 Dec 2021 05:09:30 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/basiclab/GNGAN-PyTorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "basiclab/GNGAN-PyTorch",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8017430378541749
      ],
      "excerpt": "Pre-calculated statistics for FID can be downloaded here: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8022349111302232
      ],
      "excerpt": "|Script           |Configurations|Multi-GPU| \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9023697225149864
      ],
      "excerpt": "    sh \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8035763652412508
      ],
      "excerpt": "--save PATH: save the generated images to PATH \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8354173433502667
      ],
      "excerpt": "    python dataset.py path/to/celebahq/256 ./data/celebahq/256 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9010636261369568
      ],
      "excerpt": "We split data into train test splits by filenames, the test set contains images from `27001.jpg` to `30000.jpg`. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9312719700990081
      ],
      "excerpt": "python dataset.py path/to/celebahq/128/train ./data/celebahq/128 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8438909798231485,
        0.8364766389798833
      ],
      "excerpt": "- cifar10.train.npz - Training set of CIFAR10 \n- cifar10.test.npz - Testing set of CIFAR10 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8258730958836661,
        0.8092473267164679
      ],
      "excerpt": "- church.train.256.npz - Training set of LSUN Church Outdoor \nFolder structure: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8502654381883872,
        0.8481210325614933
      ],
      "excerpt": "\u251c\u2500\u2500 cifar10.test.npz \n\u251c\u2500\u2500 cifar10.train.npz \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8051742728649868
      ],
      "excerpt": "train.py supports training gan on CIFAR10 and STL10, e.g., \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "    python train.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8524457426084595
      ],
      "excerpt": "    CUDA_VISIBLE_DEVICES=0,1,2,3 python train_ddp.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8900486270063179
      ],
      "excerpt": "from models.gradnorm import normalize_gradient \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/basiclab/GNGAN-PyTorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Gradient Normalization for Generative Adversarial Networks",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "GNGAN-PyTorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "basiclab",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/basiclab/GNGAN-PyTorch/blob/master/Readme.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Python 3.8.9\n- Python packages\n    ```sh\n    #: update `pip` for installing tensorboard.\n    pip install -U pip setuptools\n    pip install -r requirements.txt\n    ```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 27,
      "date": "Wed, 29 Dec 2021 05:09:30 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "generative-adversarial-network",
      "gradient-normalization",
      "gan",
      "gans",
      "image-generation"
    ],
    "technique": "GitHub API"
  }
}