{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This work is supported by grants IIS-1318759, R01EB020407, R01EB006841, P20GM103472, P30GM122734.\n\nData were provided [in part] by the Human Connectome Project, WU-Minn Consortium (Principal Investigators: David Van Essen and Kamil Ugurbil; 1U54MH091657) funded by the 16 NIH Institutes and Centers that support the NIH Blueprint for Neuroscience Research; and by the McDonnell Center for Systems Neuroscience at Washington University.\n\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1511.07122 Multi-Scale Context Aggregation by Dilated Convolutions. *Fisher Yu, Vladlen Koltun*  \n[2] https://arxiv.org/abs/1612.00940 End-to-end learning of brain tissue segmentation from imperfect labeling. *Alex Fedorov, Jeremy Johnson, Eswar Damaraju, Alexei Ozerin, Vince D. Calhoun, Sergey M. Plis*  \n[3] https://arxiv.org/abs/1711.00457 Almost instant brain atlas segmentation for large-scale studies. *Alex Fedorov, Eswar Damaraju, Vince Calhoun, Sergey Plis*  \n[4] http://www.humanconnectomeproject.org/ Human Connectome Project  \n\n# Previously\n\n## Brain Atlas segmentation with [**brainchop.org**](http://brainchop.org",
      "https://arxiv.org/abs/1612.00940 End-to-end learning of brain tissue segmentation from imperfect labeling. *Alex Fedorov, Jeremy Johnson, Eswar Damaraju, Alexei Ozerin, Vince D. Calhoun, Sergey M. Plis*  \n[3] https://arxiv.org/abs/1711.00457 Almost instant brain atlas segmentation for large-scale studies. *Alex Fedorov, Eswar Damaraju, Vince Calhoun, Sergey Plis*  \n[4] http://www.humanconnectomeproject.org/ Human Connectome Project  \n\n# Previously\n\n## Brain Atlas segmentation with [**brainchop.org**](http://brainchop.org",
      "https://arxiv.org/abs/1711.00457 Almost instant brain atlas segmentation for large-scale studies. *Alex Fedorov, Eswar Damaraju, Vince Calhoun, Sergey Plis*  \n[4] http://www.humanconnectomeproject.org/ Human Connectome Project  \n\n# Previously\n\n## Brain Atlas segmentation with [**brainchop.org**](http://brainchop.org"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[1] https://arxiv.org/abs/1511.07122 Multi-Scale Context Aggregation by Dilated Convolutions. *Fisher Yu, Vladlen Koltun*  \n[2] https://arxiv.org/abs/1612.00940 End-to-end learning of brain tissue segmentation from imperfect labeling. *Alex Fedorov, Jeremy Johnson, Eswar Damaraju, Alexei Ozerin, Vince D. Calhoun, Sergey M. Plis*  \n[3] https://arxiv.org/abs/1711.00457 Almost instant brain atlas segmentation for large-scale studies. *Alex Fedorov, Eswar Damaraju, Vince Calhoun, Sergey Plis*  \n[4] http://www.humanconnectomeproject.org/ Human Connectome Project  \n\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Entodi/meshnet-pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-03-01T22:45:14Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-02-11T20:06:42Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.988282160734556,
        0.9906357960761986
      ],
      "excerpt": "This repository contains a PyTorch implementation of MeshNet architecture. MeshNet is a volumetric convolutional neural network for image segmentation (focused on brain imaging application) based on dilated kernels [1].  \nThis code provides a framework for training and evaluating a model for segmentation of a T1 (+ optional T2) into a 104 class brain atlas. It is a modification of our previous work [3]. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Entodi/meshnet-pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 11:31:48 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Entodi/meshnet-pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Entodi/meshnet-pytorch",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Prepare **T1 or T2 input** with mri_convert from FreeSurfer (https://surfer.nmr.mgh.harvard.edu/) conform T1 to 1mm voxel size in coronal slice direction with side length 256. **You can skip this step if your T1 image is already with slice thickness 1mm x 1mm x 1mm and 256 x 256 x 256.**\n```\nmri_convert [brainDir]/t1.nii [brainDir]/T1.nii.gz -c\n```\n2. Prepare **labels** from aparc+aseg.nii.gz using:\n```\npython prepare_data.py --brains_list [brains_lits.txt]\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8255444504152065
      ],
      "excerpt": "To train the model use the following command: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9297670288526635
      ],
      "excerpt": "python main.py --model ./models_configurations/MeshNet_104_38.yml --train_path ./folds/hcp_example/train.txt --validation_path ./folds/hcp_example/validation.txt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8782453169410075
      ],
      "excerpt": "python evaluation.py --models_file [models_list.txt] --evaluation_path folds/hcp_example/test.txt \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Entodi/meshnet-pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Alex Fedorov\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "MeshNet",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "meshnet-pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Entodi",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Entodi/meshnet-pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Install PyTorch https://pytorch.org/get-started/locally/\n* Install other dependencies\n```\npip install -r requirements.txt\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Mon, 27 Dec 2021 11:31:48 GMT"
    },
    "technique": "GitHub API"
  }
}