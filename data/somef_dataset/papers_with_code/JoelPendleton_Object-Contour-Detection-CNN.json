{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1505.04597\n* UNet++ Paper: https://arxiv.org/abs/1807.10165  \n\nTo install the required environment install anaconda and run the following commands:\n```conda env create -f environment.yml``` and then ```conda activate tensorflow```\n\nTo run the neural network execute the following command in the command line:\n```python main.py --[Command] --[Architecture]```\n\nThe allowed values for **[Command]** and **[Architecture]** arguments/flags are shown in the table below:\n\n<table>\n    <tr>\n      <th>Command</th>\n      <th>Architecture</th>\n    </tr>\n    <tr>\n      <td>Help</td>\n      <td>UNet</td>\n    </tr>\n    <tr>\n      <td>Train</td>\n      <td>UNet++</td>\n    </tr>\n     <tr>\n      <td>Summary</td>\n    </tr>\n     <tr>\n      <td>Evaluate</td>    \n      </tr>\n     <tr>\n      <td>Predict</td>\n    </tr>\n</table>\n\n**Command** refers to the functionality of the **Architecture** you which the utilise.\n\n* **Train** trains the model on the training set.\n* **Summary** outputs a summary of the architecture of the model.\n* **Evaluate** gives the accuracy of the model on the test set.\n* **Predict** generates images of the edges as predicted by the model.\n\n\nTo extract the parameters from the prediction produced by the network, run the following command from the Utilities/ folder:\n```python draw_lines.py```\n\nThe lines are found using the Hough Transform the variable called **threshold** in draw_lines.py \ncan be adjusted to allow for lines to be found that are closer together. \n\nThe parameters will be outputted into a file called diamonds-data.txt (in terms of volts",
      "https://arxiv.org/abs/1807.10165  \n\nTo install the required environment install anaconda and run the following commands:\n```conda env create -f environment.yml``` and then ```conda activate tensorflow```\n\nTo run the neural network execute the following command in the command line:\n```python main.py --[Command] --[Architecture]```\n\nThe allowed values for **[Command]** and **[Architecture]** arguments/flags are shown in the table below:\n\n<table>\n    <tr>\n      <th>Command</th>\n      <th>Architecture</th>\n    </tr>\n    <tr>\n      <td>Help</td>\n      <td>UNet</td>\n    </tr>\n    <tr>\n      <td>Train</td>\n      <td>UNet++</td>\n    </tr>\n     <tr>\n      <td>Summary</td>\n    </tr>\n     <tr>\n      <td>Evaluate</td>    \n      </tr>\n     <tr>\n      <td>Predict</td>\n    </tr>\n</table>\n\n**Command** refers to the functionality of the **Architecture** you which the utilise.\n\n* **Train** trains the model on the training set.\n* **Summary** outputs a summary of the architecture of the model.\n* **Evaluate** gives the accuracy of the model on the test set.\n* **Predict** generates images of the edges as predicted by the model.\n\n\nTo extract the parameters from the prediction produced by the network, run the following command from the Utilities/ folder:\n```python draw_lines.py```\n\nThe lines are found using the Hough Transform the variable called **threshold** in draw_lines.py \ncan be adjusted to allow for lines to be found that are closer together. \n\nThe parameters will be outputted into a file called diamonds-data.txt (in terms of volts"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9977994744046882,
        0.9977994744046882
      ],
      "excerpt": "UNet Paper: https://arxiv.org/abs/1505.04597 \nUNet++ Paper: https://arxiv.org/abs/1807.10165   \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/JoelPendleton/Edge-Detection-CNN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-07-17T12:36:03Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-03T16:09:34Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9598773189697545
      ],
      "excerpt": "Edge Detection CNN using Tensorflow 2 using the U-Net and UNet++ architectures. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9694376271728833,
        0.9089977123794538,
        0.867599653162222
      ],
      "excerpt": "Summary outputs a summary of the architecture of the model. \nEvaluate gives the accuracy of the model on the test set. \nPredict generates images of the edges as predicted by the model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8315224009110209,
        0.8579222712091831,
        0.8478727195963998,
        0.8310214403351389,
        0.9484191869974743
      ],
      "excerpt": "The lines are found using the Hough Transform the variable called threshold in draw_lines.py  \ncan be adjusted to allow for lines to be found that are closer together.  \nThe parameters will be outputted into a file called diamonds-data.txt (in terms of volts). \nThe data found in the line-data.txt file doesn't account for units (it's left in terms of pixel coordinates). \nExample of CNN prediction and draw_lines functionality: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Coulomb diamond edge detection CNN using Tensorflow 2.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/JoelPendleton/Object-Contour-Detection-CNN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Wed, 29 Dec 2021 15:17:43 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/JoelPendleton/Edge-Detection-CNN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "JoelPendleton/Edge-Detection-CNN",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.999096916523003,
        0.9792590459290833,
        0.8015703713753384
      ],
      "excerpt": "To install the required environment install anaconda and run the following commands: \nconda env create -f environment.yml and then conda activate tensorflow \nTo run the neural network execute the following command in the command line: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8266243275533829
      ],
      "excerpt": "To extract the parameters from the prediction produced by the network, run the following command from the Utilities/ folder: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8568192169354335
      ],
      "excerpt": "python main.py --[Command] --[Architecture] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8589534893990137
      ],
      "excerpt": "      <td>Train</td> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8213380337316241
      ],
      "excerpt": "      <td>Predict</td> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8466280728625815
      ],
      "excerpt": "Train trains the model on the training set. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python draw_lines.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8271574358819594
      ],
      "excerpt": "The data found in the line-data.txt file doesn't account for units (it's left in terms of pixel coordinates). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8890818307099057,
        0.9197735714648932
      ],
      "excerpt": "      <td><img src=\"draw_lines_example_1.png\", width = \"500px\"></td> \n      <td><img src=\"draw_lines_example_2.jpg\", width = \"500px\"></td> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/JoelPendleton/Edge-Detection-CNN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Edge Detection CNN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Edge-Detection-CNN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "JoelPendleton",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/JoelPendleton/Edge-Detection-CNN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 15:17:43 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "tensorflow",
      "deep-learning",
      "machine-learning",
      "cnn"
    ],
    "technique": "GitHub API"
  }
}