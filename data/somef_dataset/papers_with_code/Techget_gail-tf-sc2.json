{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1606.03476"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "  Generative Adversarial Nets \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9812097870560689
      ],
      "excerpt": "Jonathan Ho and Stefano Ermon. Generative adversarial imitation learning, [arxiv] \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Techget/gail-tf-sc2",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-04-06T05:20:07Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-04-30T19:36:28Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9519131583416343,
        0.9340398798883013
      ],
      "excerpt": "Tensorflow implementation of Generative Adversarial Imitation Learning, and apply GAIL on PySC2 \ndisclaimers: some code is borrowed from @openai/baselines and @andrewliao \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9437162929145082
      ],
      "excerpt": "model-based GAIL: End-to-End Differentiable Adversarial Imitation Learning \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9677458672817263,
        0.8354646904696805
      ],
      "excerpt": "Some work based on GAIL: \nInferring The Latent Structure of Human Decision-Making from Raw Visual  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8379416772125279
      ],
      "excerpt": "Robust Imitation of Diverse Behaviors \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Generative-Adversarial-Imitation-Learning on PySC2",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Techget/gail-tf-sc2/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 20 Dec 2021 21:31:39 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Techget/gail-tf-sc2/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Techget/gail-tf-sc2",
    "technique": "GitHub API"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Techget/gail-tf-sc2/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'The MIT License\\n\\nCopyright (c) 2017 Andrew Liao\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Generative Adversarial Imitation Learning in tensorflow on PySC2",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "gail-tf-sc2",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Techget",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Techget/gail-tf-sc2/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- python==3.5.2\n- tensorflow==1.1.0\n- gym==0.9.3\n- pysc2\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Actions in PySC2 is composed of action id and extra parameters, eg to move a minion, RL agents need to provide corresponding action id and coordinates on map. I use GAIL to learn to choose reasonable action id, and use a separate supervised learning neural network to obtain correct parameters.\n\nTo get an idea of how I parse the .SC2Replay files, refer to [[parse recording file](https://github.com/Techget/parse-pysc2-replay-files)]\n\nThe trained parameter network should be put under `param_pre_model`. The pre-trained model is trained by running the codes in [[parameter model](https://github.com/Techget/pysc2-pretrained-parameter-model)], this pretrained model is used to supply the parameters for each \n\nIn `master` branch, run `python3 main.py` to start training, the model will be saved every 100 episode\n\nTo evaluate, `git checkout UsePPOParameterSharingEvaluate` to evaluate the model, the trained model should be put in `/checkpoint`.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 7,
      "date": "Mon, 20 Dec 2021 21:31:39 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "gail",
      "imitation-learning",
      "pysc2",
      "reinforcement-learning",
      "ppo",
      "trpo"
    ],
    "technique": "GitHub API"
  }
}