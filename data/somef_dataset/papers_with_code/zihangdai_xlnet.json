{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1901.02860",
      "https://arxiv.org/abs/1906.08237"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8334316807263773
      ],
      "excerpt": "July 16, 2019: XLNet-Base. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zihangdai/xlnet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-06-19T08:16:46Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-29T12:34:54Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**XLNet** is a new unsupervised language representation learning method based on a novel generalized permutation language modeling objective. Additionally, XLNet employs [Transformer-XL](https://arxiv.org/abs/1901.02860) as the backbone model, exhibiting excellent performance for language tasks involving long context. Overall, XLNet achieves state-of-the-art (SOTA) results on various downstream language tasks including question answering, natural language inference, sentiment analysis, and document ranking.\n\nFor a detailed description of technical details and experimental results, please refer to our paper:\n\n\u200b        [XLNet: Generalized Autoregressive Pretraining for Language Understanding](https://arxiv.org/abs/1906.08237)\n\n\u200b        Zhilin Yang\\*, Zihang Dai\\*, Yiming Yang, Jaime Carbonell, Ruslan Salakhutdinov, Quoc V. Le \n\n\u200b        (*: equal contribution) \n\n\u200b        Preprint 2019\n\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8038607547093876,
        0.9839538685741579,
        0.8169815468012596
      ],
      "excerpt": "June 19, 2019: initial release with XLNet-Large and code. \nAs of June 19, 2019, XLNet outperforms BERT on 20 tasks and achieves state-of-the-art results on 18 tasks. Below are some comparison between XLNet-Large and BERT-Large, which have similar model sizes: \nModel | RACE accuracy | SQuAD1.1 EM | SQuAD2.0 EM \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9276647180139648,
        0.860059181823877
      ],
      "excerpt": "We use SQuAD dev results in the table to exclude other factors such as using additional training data or other data augmentation techniques. See SQuAD leaderboard for test numbers. \nModel | IMDB | Yelp-2 | Yelp-5 | DBpedia | Amazon-2 | Amazon-5 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "Model | MNLI | QNLI | QQP | RTE | SST-2 | MRPC | CoLA | STS-B \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9350130811187741
      ],
      "excerpt": "We use single-task dev results in the table to exclude other factors such as multi-task learning or using ensembles. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9512941680425239,
        0.9646404928243335
      ],
      "excerpt": "* XLNet-Base, Cased: 12-layer, 768-hidden, 12-heads. This model is trained on full data (different from the one in the paper). \nWe only release cased models for now because on the tasks we consider, we found: (1) for the base setting, cased and uncased models have similar performance; (2) for the large setting, cased models are a bit better in some tasks. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8784729175563298,
        0.8451620774510373,
        0.9687271626344678,
        0.9876989047796172,
        0.8617299941391003
      ],
      "excerpt": "*   A Sentence Piece model (spiece.model) used for (de)tokenization. \n*   A config file (xlnet_config.json) which specifies the hyperparameters of the model. \nWe also plan to continuously release more pretrained models under different settings, including: \n* A pretrained model that is finetuned on Wikipedia. This can be used for tasks with Wikipedia text such as SQuAD and HotpotQA. \n* Pretrained models with other hyperparameter configurations, targeting specific downstream tasks. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9900876890638917
      ],
      "excerpt": "To receive notifications about updates, announcements and new releases, we recommend subscribing to the XLNet on Google Groups. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9983198878902316,
        0.9430016713801187,
        0.9099658455848275,
        0.8767203599017663
      ],
      "excerpt": "Most of the SOTA results in our paper were produced on TPUs, which generally have more RAM than common GPUs. As a result, it is currently very difficult (costly) to re-produce most of the XLNet-Large SOTA results in the paper using GPUs with 12GB - 16GB of RAM, because a 16GB GPU is only able to hold a <u>single sequence with length 512</u> for XLNet-Large. Therefore, a large number (ranging from 32 to 128, equal to batch_size) of GPUs are required to reproduce many results in the paper. \nWe are experimenting with gradient accumulation to potentially relieve the memory burden, which could be included in a near-future update. \nAlternative methods of finetuning XLNet on constrained hardware have been presented in renatoviolin's repo, which obtained 86.24 F1 on SQuAD2.0 with a 8GB memory GPU. \nGiven the memory issue mentioned above, using the default finetuning scripts (run_classifier.py and run_squad.py), we benchmarked the maximum batch size on a single 16GB GPU with TensorFlow 1.13.1: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9649375588954898
      ],
      "excerpt": "In most cases, it is possible to reduce the batch size train_batch_size or the maximum sequence length max_seq_length to fit in given hardware. The decrease in performance depends on the task and the available resources. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "    --spiece_model_file=${LARGE_DIR}/spiece.model \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8659516481219065
      ],
      "excerpt": "Evaluate the finetuning results with a single GPU by \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "    --spiece_model_file=${LARGE_DIR}/spiece.model \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9756140010656894,
        0.8988133080584673
      ],
      "excerpt": "eval_all_ckpt allows one to evaluate all saved checkpoints (save frequency is controlled by save_steps) after training finishes and choose the best model based on dev performance. \ndata_dir and output_dir refer to the directories of the \"raw data\" and \"preprocessed tfrecords\" respectively, while model_dir is the working directory for saving checkpoints and tensorflow events. model_dir should be set as a separate folder to init_checkpoint. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8314474479020714,
        0.8932263091289536
      ],
      "excerpt": "For GPUs with smaller RAM, please proportionally decrease the train_batch_size and increase num_core_per_host to use the same training setting. \nImportant: we separate the training and evaluation into \"two phases\", as using multi GPUs to perform evaluation is tricky (one has to correctly separate the data across GPUs). To ensure correctness, we only support single-GPU evaluation for now. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9056663176850086
      ],
      "excerpt": "Launch a Google cloud TPU V3-8 instance (see the Google Cloud TPU tutorial for how to set up Cloud TPUs). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "    --spiece_model_file=${LARGE_DIR}/spiece.model \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9455523067513772
      ],
      "excerpt": "To obtain the SOTA on the IMDB dataset, using sequence length 512 is necessary. Therefore, we show how this can be done with a TPU V3-8. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8454254229377506,
        0.8563025382738637
      ],
      "excerpt": "Notice that the data_dir and spiece_model_file both use a local path rather than a Google Storage path. The reason is that data preprocessing is actually performed locally. Hence, using local paths leads to a faster preprocessing speed. \nThe code for the SQuAD dataset is included in run_squad.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.921933148164367,
        0.8602638756552545
      ],
      "excerpt": "This will take quite some time in order to accurately map character positions (raw data) to sentence piece positions (used for training). \nFor faster parallel preprocessing, please refer to the flags --num_proc and --proc_id in run_squad.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.885597095261515
      ],
      "excerpt": "For the best performance, XLNet-Large uses <u>sequence length 512</u> and <u>batch size 48</u> for training. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8815897127514462
      ],
      "excerpt": "run_squad.py will automatically perform threshold searching on the dev set of squad and output the score. With scripts/tpu_squad_large.sh, the expected F1 score should be around 88.6 (median of our multiple runs). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9280759405217103,
        0.9900133722577583
      ],
      "excerpt": "The code for the reading comprehension task RACE is included in run_race.py. \nNotably, the average length of the passages in RACE is over 300 tokens (not peices), which is <u>significantly longer</u> than other popular reading comprehension datasets such as SQuAD. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9445384139231179,
        0.9076431697435848,
        0.9427826313450831,
        0.9535714827999755
      ],
      "excerpt": "The SOTA performance (accuracy 81.75) of RACE is produced using XLNet-Large with sequence length 512 and batch size 32, which requires a large TPU v3-32 in the pod setting. Please refer to the script script/tpu_race_large_bsz32.sh for this setting. \nUsing XLNet-Large with sequence length 512 and batch size 8 on a TPU v3-8 can give you an accuracy of around 80.3 (see script/tpu_race_large_bsz8.sh). \nAn example of using Google Colab with GPUs has been provided. Note that since the hardware is constrained in the example, the results are worse than the best we can get. It mainly serves as an example and should be modified accordingly to maximize performance. \nFor finetuning, it is likely that you will be able to modify existing files such as run_classifier.py, run_squad.py and run_race.py for your task at hand. However, we also provide an abstraction of XLNet to enable more flexible usage. Below is an example: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9829529732162896,
        0.9718907602932217
      ],
      "excerpt": ": initialize instances of tf.Tensor, including input_ids, seg_ids, and input_mask \n: XLNetConfig contains hyperparameters that are specific to a model checkpoint. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9076497459501541
      ],
      "excerpt": ": RunConfig contains hyperparameters that could be different between pretraining and finetuning. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9498045271175745
      ],
      "excerpt": ": Get a summary of the sequence using the last hidden state \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9161390407819401
      ],
      "excerpt": "Below is an example of doing tokenization in XLNet: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9309664536764524,
        0.8165714829462125
      ],
      "excerpt": "whereFLAGS.spiece_model_fileis the SentencePiece model file in the same zip as the pretrained model,FLAGS.uncased` is a bool indicating whether to do uncasing. \nRefer to train.py for pretraining on TPUs and train_gpu.py for pretraining on GPUs. First we need to preprocess the text data into tfrecords. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "    --sp_path=spiece.model \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9363038500004573
      ],
      "excerpt": "where input_glob defines all input text files, save_dir is the output directory for tfrecords, and sp_path is a Sentence Piece model. Here is our script to train the Sentence Piece model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8773116711465619
      ],
      "excerpt": "Special symbols are used, including control_symbols and user_defined_symbols. We use &lt;eop&gt; and &lt;eod&gt; to denote End of Paragraph and End of Document respectively. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9096859299898189
      ],
      "excerpt": "* (Optional) If one also wants to model paragraph structures, &lt;eop&gt; can be inserted at the end of certain lines (without any space) to indicate that the corresponding sentence ends a paragraph. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9917303093026227
      ],
      "excerpt": "This is the second sentence and also the end of the paragraph.<eop> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9144395950418519
      ],
      "excerpt": "After preprocessing, we are ready to pretrain an XLNet. Below are the hyperparameters used for pretraining XLNet-Large: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "  --record_info_dir=$DATA/tfrecords \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "XLNet: Generalized Autoregressive Pretraining for Language Understanding",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zihangdai/xlnet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1144,
      "date": "Wed, 29 Dec 2021 18:54:49 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zihangdai/xlnet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "zihangdai/xlnet",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/zihangdai/xlnet/master/notebooks/colab_imdb_gpu.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/zihangdai/xlnet/master/scripts/tpu_race_large_bsz32.sh",
      "https://raw.githubusercontent.com/zihangdai/xlnet/master/scripts/gpu_squad_base.sh",
      "https://raw.githubusercontent.com/zihangdai/xlnet/master/scripts/tpu_squad_large.sh",
      "https://raw.githubusercontent.com/zihangdai/xlnet/master/scripts/tpu_race_large_bsz8.sh",
      "https://raw.githubusercontent.com/zihangdai/xlnet/master/scripts/prepro_squad.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8644500257064217
      ],
      "excerpt": "  tar zxvf aclImdb_v1.tar.gz \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906813965171598
      ],
      "excerpt": "mkdir -p ${SQUAD_DIR} &amp;&amp; cd ${SQUAD_DIR} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9083677275225813
      ],
      "excerpt": "For training with one TPU v3-8, one can simply run the script scripts/tpu_squad_large.sh after both the TPU and Google storage have been setup. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8618190569255639
      ],
      "excerpt": "Alternatively, one can use XLNet-Base with GPUs (e.g. three V100). One set of reasonable hyper-parameters can be found in the script scripts/gpu_squad_base.sh. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8896420438354725
      ],
      "excerpt": ": Get a sequence output \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8382467308657869
      ],
      "excerpt": ": build your applications based on summary or seq_out \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8033173742302853
      ],
      "excerpt": "Each .zip file contains three items: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8043373533369355
      ],
      "excerpt": "*   A config file (xlnet_config.json) which specifies the hyperparameters of the model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8524457426084595,
        0.8594142235991984
      ],
      "excerpt": "  CUDA_VISIBLE_DEVICES=0,1,2,3 python run_classifier.py \\ \n    --do_train=True \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "    --is_regression=True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8524457426084595
      ],
      "excerpt": "  CUDA_VISIBLE_DEVICES=0 python run_classifier.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "    --do_eval=True \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984,
        0.8594142235991984
      ],
      "excerpt": "    --eval_all_ckpt=True \\ \n    --is_regression=True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8093315345615658
      ],
      "excerpt": "Download and unpack the IMDB dataset by running \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091,
        0.8594142235991984
      ],
      "excerpt": "  python run_classifier.py \\ \n    --use_tpu=True \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984,
        0.8594142235991984,
        0.8594142235991984
      ],
      "excerpt": "    --do_train=True \\ \n    --do_eval=True \\ \n    --eval_all_ckpt=True \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674
      ],
      "excerpt": "import xlnet \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "run_config = xlnet.create_run_config(is_training=True, is_finetune=True, FLAGS=FLAGS) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9012248701992861,
        0.8801854956928516
      ],
      "excerpt": "import sentencepiece as spm \nfrom prepro_utils import preprocess_text, encode_ids \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8613260675451878
      ],
      "excerpt": "text = \"An input text string.\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8359299706379749
      ],
      "excerpt": "ids = encode_ids(sp_model, text) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8075475748912581,
        0.8488871595784178
      ],
      "excerpt": "whereFLAGS.spiece_model_fileis the SentencePiece model file in the same zip as the pretrained model,FLAGS.uncased` is a bool indicating whether to do uncasing. \nRefer to train.py for pretraining on TPUs and train_gpu.py for pretraining on GPUs. First we need to preprocess the text data into tfrecords. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python data_utils.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "    --bi_data=True \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8493555078079723
      ],
      "excerpt": "where input_glob defines all input text files, save_dir is the output directory for tfrecords, and sp_path is a Sentence Piece model. Here is our script to train the Sentence Piece model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8745702408077962
      ],
      "excerpt": "The input text files to data_utils.py must use the following format: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9054770677767892
      ],
      "excerpt": "For example, the text input file could be: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "  --untie_r=True \\ \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zihangdai/xlnet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright 2019 XLNet Authors\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Introduction",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "xlnet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "zihangdai",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zihangdai/xlnet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5789,
      "date": "Wed, 29 Dec 2021 18:54:49 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "tensorflow",
      "nlp",
      "deep-learning"
    ],
    "technique": "GitHub API"
  }
}