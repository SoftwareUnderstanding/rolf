{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1512.02325",
      "https://arxiv.org/abs/1804.02767"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9409741438873975
      ],
      "excerpt": "        \"anchors\":              [5,7, 10,14, 15, 15, 26,32, 45,119, 54,18, 94,59, 109,183, 200,21], \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "    \"batch_size\":           12, \n",
      "technique": "Supervised classification"
    }
  ],
  "codeOfConduct": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/CODE_OF_CONDUCT.md",
    "technique": "File Exploration"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/RentadroneCL/Photovoltaic_Fault_Detector",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing Guidelines\n\nContributions to this repository are welcome, but before you create a pull request, consider the following guidelines:\n\nThe To-do list in the README of this repository defines the main topics for which contributions are welcome. If you want to contribute, ideally contribute to one of the topics listed there.\nIf you'd like to contribute features that are not mentioned on the to-do list in the README, make sure to explain why your proposed change adds value, i.e. what relevant use case it solves. The benefit of any new feature will be compared against the cost of maintaining it and your contribution will be accepter or rejected based on this trade-off.\nOne pull request should be about one specific feature or improvement, i.e. it should not contain multiple unrelated changes. If you want to contribute multiple features and/or improvements, create a separate pull request for every individual feature or improvement.\nWhen you create a pull request, make sure to explain properly\nwhy your propsed change adds value, i.e. what problem or use case it solves,\nall the API changes it will introduce, if any,\nall behavioral changes in any existing parts of the project it will introduce, if any.\n\n\nThis should go without saying, but you are responsible for updating any parts of the code or the tutorial notebooks that are affected by your introduced changes.\nAny submitted code must conform to the coding standards and style of this repository. There is no formal guide for coding standards and style, but here are a few things to note:\nAny new modules, classes or functions must provide proper docstrings unless they are trivial. These docstrings must have sections for Arguments, Returns, and Raises (if applicable). For every argument of a function, the docstring must explain precisely what the argument does, what data type it expects, whether or not it is optional, and any requirements for the range of values it expects. The same goes for the returns. Use existing docstrings as templates.\nNaming:\nClassNames consist of capitalized words without underscores.\nmodule_names.py consist of lower case words connected with underscores.\nfunction_names consist of lower case words connected with underscores.\nvariable_names consist of lower case words connected with underscores.\n\n\nAll module, class, function, and variable names must be descriptive in order to meet the goal that all code should always be as self-explanatory as possible. A longer and descriptive name is always preferable over a shorter and non-descriptive name. Abbreviations are generally to be avoided unless the full words would really make the name too long.\nMore in-line comments are better than fewer in-line comments and all comments should be precise and succinct.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-01-16T13:50:45Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-09T14:32:26Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Model-definition is a deep learning application for fault detection in photovoltaic plants. In this repository you will find trained detection models that point out where the panel faults are by using radiometric thermal infrared pictures. In [Web-API](https://github.com/RentadroneCL/Web-API) contains a performant, production-ready reference implementation of this repository.\n\n![Data Flow](MLDataFlow.svg)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9968945505824907
      ],
      "excerpt": "This project is part of the UNICEF Innovation Fund Discourse community. You can post comments or questions about each category of Rentadrone Developers algorithms. We encourage users to participate in the forum and to engage with fellow users. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8775629178138252
      ],
      "excerpt": "[x] Train and Evaluate Model with own data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9776346744670613,
        0.875735536625782,
        0.9284063040763598
      ],
      "excerpt": "Help improve our software! We welcome contributions from everyone, whether to add new features, improve speed, fix existing bugs or add support. Check our code of conduct, the contributing guidelines and how decisions are made. \nAny code contributions are welcomed as long as they are discussed in Github Issues with maintainers. Be aware that if you decide to change something and submit a PR on your own, it may not be accepted. \nYou can open a new issue based on code from an existing pull request. For more information, see the template for filling issues \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.919366420157966
      ],
      "excerpt": "Grab the pretrained weights of SSD and  YOLO3 from Drive_Weights \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924212690395703
      ],
      "excerpt": "| SSD7/SSD300 |    Weight VGG16| \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9390694842764332
      ],
      "excerpt": "The images used for the design of this model were extracted by air analysis, specifically: FLIR aerial radiometric thermal infrared pictures, taken by UAV (R-JPEG format). Which were converted into .jpg images for the training of these detection models. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "    \"model\" : { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "    \"model\" : { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9496224660315293
      ],
      "excerpt": "Compute the mAP performance of the model defined in saved_weights_name on the validation dataset defined in valid_image_folder and valid_annot_folder. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9471936218643436
      ],
      "excerpt": "All of weights of this trained model grab from Drive_Weights \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Model Photovoltaic Fault Detector based in model detector YOLOv.3, this repository contains four detector model with their weights and the explanation of how to use these models.",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://jupyter.readthedocs.io/",
      "technique": "Regular expression"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/RentadroneCL/model-definition/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Wed, 22 Dec 2021 19:37:27 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/RentadroneCL/Photovoltaic_Fault_Detector/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "RentadroneCL/Photovoltaic_Fault_Detector",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/AI%20Test.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/Code_Example/Panel_Detector_Fault_C_SSD.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/Code_Example/Example_prediction.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/Code_Example/Panel_Detector_Fault_1_SSD.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/Code_Example/Panel_Detector_SSD.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/Code_Example/Example_prediction_Ortofoto.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/Code_Example/Panel_Detector_Fault_SSD.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/Code_Example/Example%20Detection%20AllInOne.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/Code_Example/Example%20Detection%20AllInOne_100Example.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/Code_Example/.ipynb_checkpoints/Example%20Detection%20AllInOne_100Example-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/Code_Example/.ipynb_checkpoints/Example%20Detection%20AllInOne-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/Code_Example/.ipynb_checkpoints/Example_prediction-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/Code_Example/.ipynb_checkpoints/Example_prediction_Ortofoto-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/.ipynb_checkpoints/Problem_weights_saved-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/.ipynb_checkpoints/Example%20Detection%20AllInOne_100Example-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/.ipynb_checkpoints/Panel_Detector_Fault_1_SSD-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/.ipynb_checkpoints/Panel_Detector_Fault_SSD-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/.ipynb_checkpoints/Example%20Detection%20AllInOne-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/.ipynb_checkpoints/Example_prediction-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/.ipynb_checkpoints/Panel_Detector_SSD-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/.ipynb_checkpoints/Example_prediction_Ortofoto-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/ssd_keras-master/ssd300_inference.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/ssd_keras-master/ssd300_evaluation_COCO.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/ssd_keras-master/ssd7_training.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/ssd_keras-master/ssd512_inference.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/ssd_keras-master/weight_sampling_tutorial.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/ssd_keras-master/ssd300_evaluation.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/ssd_keras-master/ssd300_training.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/ssd_keras-master/.ipynb_checkpoints/ssd512_inference-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/GPS_Panel/ClassifierPanel_KML.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/GPS_Panel/Enumeration_KML.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/GPS_Panel/Classifier/Train_Classifier_DEEP_SVC.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/GPS_Panel/Classifier/Train_Classifier_AllDeep.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/GPS_Panel/Classifier/.ipynb_checkpoints/Train_Classifier_DEEP_SVC-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/GPS_Panel/Classifier/.ipynb_checkpoints/Train_Classifier_AllDeep-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/GPS_Panel/.ipynb_checkpoints/Detect_Panel-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/GPS_Panel/.ipynb_checkpoints/Create_PDF-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/GPS_Panel/.ipynb_checkpoints/Classifier_Panel-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/GPS_Panel/.ipynb_checkpoints/ClassifierPanel_KML-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/GPS_Panel/.ipynb_checkpoints/Enumeration_KML-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/GPS_Panel/.ipynb_checkpoints/Panel_Enumeration-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/GPS_Panel/Others/Classifier_Panel.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/GPS_Panel/Others/Detect_Panel.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/GPS_Panel/Others/Create_PDF.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/GPS_Panel/Others/Panel_Enumeration.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/GPS_Panel/Others/.ipynb_checkpoints/Panel_Enumeration-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/Result_ssd7_panel/Panel_Detector.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/Result_ssd7_panel/.ipynb_checkpoints/Panel_Detector-checkpoint.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/Result_ssd300_fault_1/Panel_Detector_Fault_1.ipynb",
      "https://raw.githubusercontent.com/RentadroneCL/model-definition/master/Result_ssd300_fault_1/.ipynb_checkpoints/Panel_Detector_Fault_1-checkpoint.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "`python predict_ssd.py -c config.json -i /path/to/image/or/video -o /path/output/result`\nor\n`python predict_yolo.py -c config.json -i /path/to/image/or/video -o /path/output/result`\n\nIt carries out detection on the image and write the image with detected bounding boxes to the same folder.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "View folder Train&Test_A/ and Train&Test_S/, example of panel anns and soiling fault anns.\n\nOrganize the dataset into 4 folders:\n\n+ train_image_folder <= the folder that contains the train images.\n\n+ train_annot_folder <= the folder that contains the train annotations in VOC format.\n\n+ valid_image_folder <= the folder that contains the validation images.\n\n+ valid_annot_folder <= the folder that contains the validation annotations in VOC format.\n\nThere is a one-to-one correspondence by file name between images and annotations.\nFor create own data set use LabelImg code from :\n[https://github.com/tzutalin/labelImg](https://github.com/tzutalin/labelImg)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9078659415385099
      ],
      "excerpt": "In the root project execute the following command to install all dependencies project \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9979947896609701
      ],
      "excerpt": "pip install -r requirements.txt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9920718696463079,
        0.9751788393753984
      ],
      "excerpt": "You need install Jupyter notebook to see the code example. You can find the installation documentation for the Jupyter platform, on ReadTheDocs or in github page here. \nFor a local installation, make sure you have pip installed and run: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9976882999550629
      ],
      "excerpt": "pip install notebook \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.829941953230852
      ],
      "excerpt": "Before sending your pull requests, make sure you followed this list. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.801061421653822,
        0.8278878753489326,
        0.8083056276184406
      ],
      "excerpt": "[x] Import model detection (SSD & YOLO3) \n[x] Example use Trained Model \n[x] Train and Evaluate Model with own data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8365737075500923
      ],
      "excerpt": "Same image in .jpg format: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8285944623259617
      ],
      "excerpt": "        \"anchors\":              [5,7, 10,14, 15, 15, 26,32, 45,119, 54,18, 94,59, 109,183, 200,21], \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8589534893990137,
        0.8807976765594638,
        0.8589534893990137
      ],
      "excerpt": "\"train\": { \n    \"train_image_folder\":   \"../Train&amp;Test_S/Train/images/\", \n    \"train_annot_folder\":   \"../Train&amp;Test_S/Train/anns/\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.811854372964597
      ],
      "excerpt": "    \"warmup_epochs\":        15, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8025615723747587
      ],
      "excerpt": "    \"debug\":                true \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246570703788872,
        0.9213716497003656
      ],
      "excerpt": "    \"valid_image_folder\":   \"../Train&amp;Test_S/Test/images/\", \n    \"valid_annot_folder\":   \"../Train&amp;Test_S/Test/anns/\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8633989807152664,
        0.9246570703788872,
        0.9213716497003656
      ],
      "excerpt": "\"test\": { \n        \"test_image_folder\":   \"../Train&Test_S/Test/images/\", \n        \"test_annot_folder\":   \"../Train&Test_S/Test/anns/\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8647356979248249
      ],
      "excerpt": "The configuration file for SSD300 is a json file, which looks like this  (example soiling fault ) and .txt with name of images (train.txt): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8589534893990137,
        0.8807976765594638,
        0.8589534893990137,
        0.8726505739930898
      ],
      "excerpt": "\"train\": { \n    \"train_image_folder\":   \"Train&amp;Test_S/Train/images\", \n    \"train_annot_folder\":   \"Train&amp;Test_S/Train/anns\", \n    \"train_image_set_filename\": \"Train&amp;Test_S/Train/train.txt\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8025615723747587
      ],
      "excerpt": "    \"debug\":                true \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246570703788872,
        0.9213716497003656,
        0.9157477248230208
      ],
      "excerpt": "        \"valid_image_folder\":   \"../Train&amp;Test_D/Test/images/\", \n        \"valid_annot_folder\":   \"../Train&amp;Test_D/Test/anns/\", \n        \"valid_image_set_filename\":   \"../Train&amp;Test_D/Test/test.txt\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8633989807152664,
        0.9246570703788872,
        0.9213716497003656,
        0.9157477248230208
      ],
      "excerpt": "\"test\": { \n        \"test_image_folder\":   \"Train&Test_S/Test/images\", \n        \"test_annot_folder\":   \"Train&Test_S/Test/anns\", \n        \"test_image_set_filename\":   \"Train&Test_S/Test/test.txt\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9007133007953726,
        0.8028346616256588
      ],
      "excerpt": "python evaluate.py -c config.json  \npython keras-yolo3-master/evaluate.py -c config_full_yolo_fault_1_infer.json  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8329015283702058
      ],
      "excerpt": "Read contributing guidelines. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/RentadroneCL/Photovoltaic_Fault_Detector/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "HTML",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "GNU General Public License v3.0",
      "url": "https://api.github.com/licenses/gpl-3.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2017 Ngoc Anh Huynh\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Photovoltaic Fault Detector",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Photovoltaic_Fault_Detector",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "RentadroneCL",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/RentadroneCL/Photovoltaic_Fault_Detector/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Python 3.x\n* Numpy\n* TensorFlow 2.x\n* Keras 2.x (in TensorFlow)\n* OpenCV\n* Beautiful Soup 4.x\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 11,
      "date": "Wed, 22 Dec 2021 19:37:27 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "yolo3",
      "detector-model",
      "model-detection",
      "detection-boxes",
      "fault-detection",
      "solar-energy",
      "photovoltaic-panels",
      "hacktoberfest",
      "hacktoberfest2020"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "In ['Example_Prediction'](Code_Example/Example_prediction.ipynb) this is the example of how to implement an already trained model, it can be modified to change the model you have to use and the image in which you want to detect faults.\n\nIn ['Example Prediction AllInOne'](Code_Example/Example%20Detection%20AllInOne.ipynb) this is the example of how implement all trained model, you can use this code for predict a folder of images and have a output image with detection boxes.\n\nIn ['Example_Prediction_Orthophoto'](Code_Example/Example_prediction_Ortofoto.ipynb) this is the example of how implement all trained model, you can use this code for predict a Orthophot and have a output image with detection boxes.\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "`python train_ssd.py -c config.json -o /path/to/result`\n\nor\n`python train_ssd.py -c config.json -o /path/to/result`\n\nBy the end of this process, the code will write the weights of the best model to file best_weights.h5 (or whatever name specified in the setting \"saved_weights_name\" in the config.json file). The training process stops when the loss on the validation set is not improved in 20 consecutive epoches.\n\n",
      "technique": "Header extraction"
    }
  ]
}