{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1506.02640\n- YOLO TensorFlow implementation (darkflow"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "***Main:***\n- YOLOv3 paper: https://arxiv.org/pdf/1804.02767.pdf\n- YOLO original paper: https://arxiv.org/abs/1506.02640\n- YOLO TensorFlow implementation (darkflow): https://github.com/thtrieu/darkflow\n\n***Optional:***\n- More theory: https://www.pyimagesearch.com/2018/11/12/yolo-object-detection-with-opencv/\n- Other trained model weights from official doc: https://pjreddie.com/darknet/yolo/\n\n---\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9146894306581498
      ],
      "excerpt": "Object detection: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9444212796006252
      ],
      "excerpt": "- YOLO treats object detection as a regression problem, taking a given input image and simultaneously learning bounding box coordinates and corresponding class label probabilities. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/saimj7/Social-Distancing-Detection-in-Real-Time",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-11-02T15:08:41Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-22T16:25:11Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8910384896090979
      ],
      "excerpt": "Please refer to the added Features. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8175593778787391,
        0.9257354145704297
      ],
      "excerpt": "Sending an alert to the staff if the people are way over the social distancing limits. \nOptimizing the real-time stream for better performance (with threading). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9143378366138633
      ],
      "excerpt": "- In general, single-stage detectors like YOLO tend to be less accurate than two-stage detectors (R-CNN) but are significantly faster. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8922409339511432
      ],
      "excerpt": "- It is used to return the person prediction probability, bounding box coordinates for the detection, and the centroid of the person. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9286389793469183,
        0.9238819834965523,
        0.9554483531141419
      ],
      "excerpt": "- NMS (Non-maxima suppression) is also used to reduce overlapping bounding boxes to only a single bounding box, thus representing the true detection of the object. Having overlapping boxes is not exactly practical and ideal, especially if we need to count the number of objects in an image. \n- Euclidean distance is then computed between all pairs of the returned centroids. Simply, a centroid is the center of a bounding box. \n- Based on these pairwise distances, we check to see if any two people are less than/close to 'N' pixels apart. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8024819343227143,
        0.8269554079625092,
        0.9184034694613071
      ],
      "excerpt": "- Threading removes OpenCV's internal buffer (which basically stores the new frames yet to be processed until your system processes the old frames) and thus reduces the lag/increases fps. \n- If your system is not capable of simultaneously processing and outputting the result, you might see a delay in the stream. This is where threading comes into action. \n- It is most suitable for solid performance on complex real-time applications. To use threading: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9286673251233224,
        0.8504061703529618
      ],
      "excerpt": "- Similarly MIN_DISTANCE = 50 implies the minimum distance between 2 people. If they fell under 50 px (which is closer than 80), we treat it as a more 'serious' violation (red). \n- Anything above 80 px is considered as a safe distance and thus, 'no' violation (green). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8390397432824835
      ],
      "excerpt": "\ud83c\udf74 Fork this repo and pull request! \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Social distance monitoring in real-time with an IP camera. Optimized for better performance with threading.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/saimj7/Social-Distancing-Detection-in-Real-Time/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 29,
      "date": "Thu, 23 Dec 2021 13:37:59 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/saimj7/Social-Distancing-Detection-in-Real-Time/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "saimj7/Social-Distancing-Detection-in-Real-Time",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8817415589474913,
        0.9175315927851156
      ],
      "excerpt": "\ud83d\udc6f Clone this repo: \n$ git clone https://github.com/saimj7/Social-Distancing-Detection-in-Real-Time.git \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8289669050403863
      ],
      "excerpt": "Output       |  Output \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8100229687036724
      ],
      "excerpt": "set Thread = True in the config. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/saimj7/Social-Distancing-Detection-in-Real-Time/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Sai Subhakar T\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Social-Distancing-in-Real-Time",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Social-Distancing-Detection-in-Real-Time",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "saimj7",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/saimj7/Social-Distancing-Detection-in-Real-Time/blob/main/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Install all the required Python dependencies:\n```\npip install -r requirements.txt\n```\n- If you would like to use GPU, set ```USE_GPU = True``` in the config. options at 'mylib/config.py'.\n\n- Note that you need to build OpenCV with CUDA (for an NVIDIA GPU) support first:\n\n> Click [**here**](https://jamesbowley.co.uk/accelerate-opencv-4-2-0-build-with-cuda-and-python-bindings/) for build instructions on Windows.\n\n> This tutorial also might help. Click [**here**](https://www.youtube.com/watch?v=TT3_dlPL4vo&list=WL&index=108&t=0s).\n\n- Download the weights file from [**here**](https://drive.google.com/file/d/1O2zmGIIHLX8SGs24W7mjRyFKvE_CSY8n/view?usp=sharing) and place it in the 'yolo' folder.\n\n- To run inference on a test video file, head into the directory/use the command:\n```\npython run.py -i mylib/videos/test.mp4\n```\n- To run inference on an IP camera, Setup your camera url in 'mylib/config.py':\n\n```\n#: Enter the ip camera url (e.g., url = 'http://191.138.0.100:8040/video')\nurl = ''\n```\n- Then run with the command:\n\n```\npython run.py\n```\n> Set url = 0 for webcam.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 36,
      "date": "Thu, 23 Dec 2021 13:37:59 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "yolov3",
      "people-counter",
      "covid-19",
      "opencv",
      "social-distancing-detection",
      "deep-learning",
      "social-distancing"
    ],
    "technique": "GitHub API"
  }
}