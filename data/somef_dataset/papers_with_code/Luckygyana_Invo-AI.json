{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Our model demonstrate a higher accuracy with use of Transfer Learning of OCR-Tesseract LSTM on our annotated dataset and can be highly scalable to our documents with small amount of labeled training.\n\nFor this task aslo we applied two methods:\n* Use Pytesseract [https://pypi.org/project/pytesseract/]\n    * Advantage : We can extract text easily from text\n    * Add other\n* Use Text Recognition [https://arxiv.org/abs/1904.01906]\n    * Advantage : It support Multilanguage and no need to optimize and we can train with our data\n    * Distadvantage : It's performance little worse than Pytesseract.\n\nLastly We Used Pytesseract for it's effictiveness with this sample data.\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1911.09070]\n    * Advantage : We tried to divide the image to some classes like Shipping, Buying, Header,Footer, Table. \n        * For this task we used our own labeled dataset of around 2500 images.\n        * With a good training pipeline effdet d5 we able to acheive good loss of 0.83\n        * We added WBF [https://arxiv.org/abs/1910.13302] and get loss of 0.42\n    * Disadvantage : We cannot detect line and words because lack of data \n* Use CRAFT Model [https://arxiv.org/pdf/1904.01941.pdf]\n    * Advantage : We can detect the lines and semantic pair both adjusting the best threshold\n    * Disadvantage : There is no disadvantage but model should need to be optimized\n\n![combine](https://user-images.githubusercontent.com/54680536/89717404-0ba6db00-d9d4-11ea-8619-77db7d248141.jpg",
      "https://arxiv.org/abs/1910.13302] and get loss of 0.42\n    * Disadvantage : We cannot detect line and words because lack of data \n* Use CRAFT Model [https://arxiv.org/pdf/1904.01941.pdf]\n    * Advantage : We can detect the lines and semantic pair both adjusting the best threshold\n    * Disadvantage : There is no disadvantage but model should need to be optimized\n\n![combine](https://user-images.githubusercontent.com/54680536/89717404-0ba6db00-d9d4-11ea-8619-77db7d248141.jpg",
      "https://arxiv.org/abs/1904.01906]\n    * Advantage : It support Multilanguage and no need to optimize and we can train with our data\n    * Distadvantage : It's performance little worse than Pytesseract.\n\nLastly We Used Pytesseract for it's effictiveness with this sample data."
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8609658805709663
      ],
      "excerpt": "Recognition of Text using OCR-Tesseract LSTM \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8433319201465983
      ],
      "excerpt": "Use Pytesseract [https://pypi.org/project/pytesseract/] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9939298692741091
      ],
      "excerpt": "Use EfficientDet [https://arxiv.org/abs/1911.09070] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8949263818659379
      ],
      "excerpt": "We added WBF [https://arxiv.org/abs/1910.13302] and get loss of 0.42 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9764420375557443
      ],
      "excerpt": "Use CRAFT Model [https://arxiv.org/pdf/1904.01941.pdf] \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Luckygyana/Invo-AI",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-02-13T09:42:49Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-06-29T16:38:18Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9895226712418606
      ],
      "excerpt": "We propose an extraction system that use knowledge of the types of the target fields to generate extraction candidates, and a neural network architecture that learns a dense representation of each candidate based on neighbouring words in the document. These learned representations are not only useful in solving the extraction task for unseen document templates from two different domains, but are also interpretable in classic document processing. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8176182315119124
      ],
      "excerpt": "Topic:&emsp; &emsp; &nbsp; &nbsp; &nbsp; &nbsp;Electronic Invoicing using Image Processing <br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.904902795850617,
        0.9693233393948762,
        0.8230014560947049
      ],
      "excerpt": "Our complete Model works in the following eight steps: \nConvert PDF to JPG \nDetecting Bbox for all Text \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8272306091976148
      ],
      "excerpt": "Recognition of Text using OCR-Tesseract LSTM \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9307865934918582,
        0.8221403283656478,
        0.8019843209318974
      ],
      "excerpt": "Segregate the Image into Info (Non-Table Part) and Sheet (The item Table) \nDirect filling the value of Sheet in the XLS file.  \nSearching Key to extract Info values and mapping it in the XLS File. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.856995022191776
      ],
      "excerpt": "- getStructuringElement (to get Kernel size) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8920289785071783
      ],
      "excerpt": "This is main task in overall Process. For this task we applied Three methods. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9297139558541638,
        0.8823004233591147
      ],
      "excerpt": "Advantage : Every Word is Detecting and creating one and more bbox per an word \nDisadvantage : It cannot be able to detect Semantic pair with one bbox like Invoice no and its value is in different bbox \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9467635750923046,
        0.9014715057903714,
        0.9352273130610549
      ],
      "excerpt": "Advantage : We tried to divide the image to some classes like Shipping, Buying, Header,Footer, Table.  \nFor this task we used our own labeled dataset of around 2500 images. \nWith a good training pipeline effdet d5 we able to acheive good loss of 0.83 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.831262257996401,
        0.9897233674201372
      ],
      "excerpt": "Disadvantage : There is no disadvantage but model should need to be optimized \nLastly We Used CRAFT Model for it's effictive ness with less data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "We propose an extraction system that use knowledge of the types of the target fields to generate extraction candidates, and a neural network architecture that learns a dense representation of each candidate based on neighbouring words in the document. These learned representations are not only useful in solving the extraction task for unseen document templates from two different domains, but are also interpretable in classic document processing.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Luckygyana/Invo-AI/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Fri, 24 Dec 2021 22:03:09 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Luckygyana/Invo-AI/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Luckygyana/Invo-AI",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Luckygyana/Invo-AI/master/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8549667776192764
      ],
      "excerpt": "Use Pytesseract [https://pypi.org/project/pytesseract/] \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8502881383372133
      ],
      "excerpt": "  <img src=\"./Results/OCR_Text_Parsing.gif\" align=\"right\" width=450/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594204640167032
      ],
      "excerpt": "Convert PDF to JPG \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8067491370512088
      ],
      "excerpt": "Bbox_mapper extract contours, sort them in all manners and extract text from them. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8067736493152236
      ],
      "excerpt": "Bbox_mapper extract contours, sort them in all manners and extract text from them in sequential Order \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8502881383372133
      ],
      "excerpt": "  <img src=\"./Results/Table_Detection_Algorithm_Demo.gif\" align=\"right\" width=300/> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Luckygyana/Invo-AI/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "TypeScript",
      "JavaScript",
      "HTML",
      "Dockerfile",
      "CSS"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "GNU General Public License v3.0",
      "url": "https://api.github.com/licenses/gpl-3.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Invo-AI: An automatic E-Invoicing using Image Processing",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Invo-AI",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Luckygyana",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Luckygyana/Invo-AI/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Fri, 24 Dec 2021 22:03:09 GMT"
    },
    "technique": "GitHub API"
  }
}