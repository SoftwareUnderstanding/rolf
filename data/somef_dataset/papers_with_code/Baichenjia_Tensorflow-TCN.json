{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- https://github.com/philipperemy/keras-tcn (TCN for keras)\n- https://github.com/locuslab/TCN/ (TCN for Pytorch)\n- https://arxiv.org/pdf/1803.01271.pdf (An Empirical Evaluation of Generic Convolutional and Recurrent Networks\nfor Sequence Modeling)\n- https://arxiv.org/pdf/1609.03499.pdf (Wavenet paper)",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Baichenjia/Tensorflow-TCN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-03-18T07:56:01Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-27T13:06:18Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9830614070755902
      ],
      "excerpt": "The explanation and graph in this README.md refers to Keras-TCN. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8207436385098936,
        0.8884615282464804
      ],
      "excerpt": "TCNs exhibit longer memory than recurrent architectures with the same capacity. \nConstantly performs better than LSTM/GRU architectures on a vast range of tasks (Seq. MNIST, Adding Problem, Copy Memory, Word-level PTB...). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8347993157070009
      ],
      "excerpt": "<b>Visualization of a stack of dilated causal convolutional layers (Wavenet, 2016)</b><br><br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8959292435312377
      ],
      "excerpt": "num_channels: list. For example, if num_channels=[30,40,50,60,70,80], the temporal convolution model has 6 levels, the dilation_rate of each level is [1, 2, 4, 8, 16, 32], and filters of each level are 30,40,50,60,70,80. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.899272342026737,
        0.918617708960551
      ],
      "excerpt": "dropout: Float between 0 and 1. Fraction of the input units to drop. The dropout layers is activated in training, and deactivated in testing. Using y = tcn(x, training=True/False) to control. \n3D tensor with shape (batch_size, timesteps, input_dim). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9251928896482415
      ],
      "excerpt": "If a TCN has only one stack of residual blocks with a kernel size of 2 and dilations [1, 2, 4, 8], its receptive field is 2 * 1 * 8 = 16. The image below illustrates it: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9038108852247264
      ],
      "excerpt": "If the TCN has now 2 stacks of residual blocks, wou would get the situation below, that is, an increase in the receptive field to 32: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9277819045824917
      ],
      "excerpt": "If we increased the number of stacks to 3, the size of the receptive field would increase again, such as below: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9430446856127283
      ],
      "excerpt": "The task consists of feeding a large array of decimal numbers to the network, along with a boolean array of the same length. The objective is to sum the two decimals where the boolean array contain the two 1s. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9675889659343418,
        0.8403334765405364,
        0.9263409646022193,
        0.9915824725718667
      ],
      "excerpt": "- At the beginning, there's the vector x of length N. This is the vector to copy. \n- At the end, N+1 9s are present. The first 9 is seen as a delimiter. \n- In the middle, only 0s are there. \nThe idea is to copy the content of the vector x to the end of the large array. The task is made sufficiently complex by increasing the number of 0s in the middle. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.977597364636078
      ],
      "excerpt": "The idea here is to consider MNIST images as 1-D sequences and feed them to the network. This task is particularly hard because sequences are 28*28 = 784 elements. In order to classify correctly, the network has to remember all the sequence. Usual LSTM are unable to perform well on this task. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Tensorflow eager implementation of Temporal Convolutional Network (TCN)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Baichenjia/Tensorflow-TCN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 25,
      "date": "Wed, 29 Dec 2021 22:55:45 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Baichenjia/Tensorflow-TCN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Baichenjia/Tensorflow-TCN",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.8144338362021298,
        0.8674641586158056
      ],
      "excerpt": "Input shape \nOutput shape \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8836704212480256
      ],
      "excerpt": "  <img src=\"misc/Dilated_Conv.png\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.828526128347253
      ],
      "excerpt": "dropout: Float between 0 and 1. Fraction of the input units to drop. The dropout layers is activated in training, and deactivated in testing. Using y = tcn(x, training=True/False) to control. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8836704212480256
      ],
      "excerpt": "  <img src=\"misc/Adding_Task.png\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8836704212480256
      ],
      "excerpt": "  <img src=\"misc/Copy_Memory_Task.png\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8836704212480256
      ],
      "excerpt": "  <img src=\"misc/Sequential_MNIST_Task.png\"> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Baichenjia/Tensorflow-TCN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Chenjia Bai\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Tensorflow TCN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Tensorflow-TCN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Baichenjia",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Baichenjia/Tensorflow-TCN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Each task has a separate folder. Enter each folder one can usually find `utils.py`, `model.py` and `train.py`. The `utils.py` generates data, and `model.py` builds the TCN model. You should run `train.py` to train the model. The hyper-parameters in `train.py` are set by `argparse`. The pre-trained models are saved in `weights/`.\n\n```bash\ncd adding_problem/\npython train.py #: run adding problem task\n\ncd copy_memory/\npython train.py #: run copy memory task\n\ncd mnist_pixel/\npython train.py #: run sequential mnist pixel task\n\ncd word_ptb/\npython train.py #: run PennTreebank word-level language model task\n```\nThe training detail of each task is in README.md in each folder.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 89,
      "date": "Wed, 29 Dec 2021 22:55:45 GMT"
    },
    "technique": "GitHub API"
  }
}