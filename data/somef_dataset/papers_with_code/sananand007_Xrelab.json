{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1611.08050\n  + Github: https://github.com/ZheC/Realtime_Multi-Person_Pose_Estimation\n  + CMU OpenPose: https://github.com/CMU-Perceptual-Computing-Lab/openpose\n  + (tensorflowpy36"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.992895205173943
      ],
      "excerpt": "My Work on Computer Vision and Deep Learning at Xrelab Sandiego \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "    if update_train_data: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "        if i%100==0: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "    if update_test_data: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "        if i%100==0: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8376330871811604
      ],
      "excerpt": "  - https://github.com/rbgirshick/fast-rcnn/issues/125 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9698834407712852,
        0.9626356225854676
      ],
      "excerpt": "Github: https://github.com/ZheC/Realtime_Multi-Person_Pose_Estimation \nCMU OpenPose: https://github.com/CMU-Perceptual-Computing-Lab/openpose \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8547314180611439,
        0.8547314180611439
      ],
      "excerpt": "2018-08-17 11:38:18.343487: I T:\\src\\github\\tensorflow\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:929]      0 \n2018-08-17 11:38:18.343642: I T:\\src\\github\\tensorflow\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:942] 0:   N \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8569692218416274
      ],
      "excerpt": "Detection took 2.537s for 300 object proposals \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sananand007/Xrelab",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-06-20T06:47:36Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-10-28T19:49:36Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8327880282093806
      ],
      "excerpt": "My Work on Computer Vision and Deep Learning at Xrelab Sandiego \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.993982178110977
      ],
      "excerpt": "It is possible to list all of the versions of dlib available on your platform with: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9611717376349999
      ],
      "excerpt": "For more magic and help \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8084431952280293
      ],
      "excerpt": "list all the other cool cell magic commands. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8921629017393112
      ],
      "excerpt": "Beside the cell magic commands, IPython notebook (now Jupyter notebook) is so cool that it allows you to use any unix command right from the cell (this is also equivalent to using the %%bash cell magic command). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8328762068951021
      ],
      "excerpt": "    #:On the test data values for visualization \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8868915707974896
      ],
      "excerpt": "Issue with TF and HA 5 solved \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8224694716353637
      ],
      "excerpt": "Below are a list of my changes, you can take the list as a reference, but I am sure you will need something different to make it work on your own windows machine because each environment is different. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8140243942213943
      ],
      "excerpt": "I roughly remember some c++ source code need to be changed and compiled for faster RCNN to use. For example, NMS calculation needs faster speed and has to be written by c++. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8544125472962221
      ],
      "excerpt": "2018-08-17 11:38:16.500125: I T:\\src\\github\\tensorflow\\tensorflow\\core\\platform\\cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.816887423812075
      ],
      "excerpt": "Process finished with exit code 0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "My Work on Computer Vision and Deep Learning at Xrelab Sandiego",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sananand007/Xrelab/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 20:17:52 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/sananand007/Xrelab/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "sananand007/Xrelab",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/sananand007/Xrelab/master/hw4/HA4_PA1_3_4.ipynb",
      "https://raw.githubusercontent.com/sananand007/Xrelab/master/hw4/Homework4-P2_fin%20%281%29.ipynb",
      "https://raw.githubusercontent.com/sananand007/Xrelab/master/hw4/HA4_PA1_3_4_fin.ipynb",
      "https://raw.githubusercontent.com/sananand007/Xrelab/master/hw4/Homework4.ipynb",
      "https://raw.githubusercontent.com/sananand007/Xrelab/master/hw4/.ipynb_checkpoints/Homework4-P2_fin%20%281%29-checkpoint.ipynb",
      "https://raw.githubusercontent.com/sananand007/Xrelab/master/hw2/HA2-Problem1_final.ipynb",
      "https://raw.githubusercontent.com/sananand007/Xrelab/master/hw2/HA2-Problem2_final.ipynb",
      "https://raw.githubusercontent.com/sananand007/Xrelab/master/hw2/HA3_CNN.ipynb",
      "https://raw.githubusercontent.com/sananand007/Xrelab/master/hw5/Deep%20Object%20Detection%20using%20Faster-RCNN.ipynb",
      "https://raw.githubusercontent.com/sananand007/Xrelab/master/final-project/DeepSat%20Image%20Analysis%20Using%20Novel%20Methods.ipynb",
      "https://raw.githubusercontent.com/sananand007/Xrelab/master/final-project/Paperspace/DeepSat%20Image%20Analysis%20Using%20Novel%20Methods_withBN_alpha.ipynb",
      "https://raw.githubusercontent.com/sananand007/Xrelab/master/final-project/Paperspace/DeepSat%20Image%20Analysis%20Using%20Novel%20Methods_withBN.ipynb",
      "https://raw.githubusercontent.com/sananand007/Xrelab/master/final-project/Paperspace/Image%20Classification%20of%20Large%20Image%20Datasets%20Techniques%20Using%20Novel%20Methods.ipynb",
      "https://raw.githubusercontent.com/sananand007/Xrelab/master/final-project/Paperspace/DeepSat%20Image%20Analysis%20Using%20Novel%20Methods_noBN.ipynb",
      "https://raw.githubusercontent.com/sananand007/Xrelab/master/final-project/Paperspace/Image%20Classification%20of%20Large%20Image%20Datasets%20Techniques%20Using%20Novel%20Methods-GNLocal.ipynb",
      "https://raw.githubusercontent.com/sananand007/Xrelab/master/hw1/KNN%20Classifier.ipynb",
      "https://raw.githubusercontent.com/sananand007/Xrelab/master/hw1/SVM.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9169587634801049,
        0.9434071030615602
      ],
      "excerpt": "Installing dlib package for python 3.x - https://anaconda.org/menpo/dlib \nUsing Conda Forge - Sometimes things do not work with plain conda so we use Conda-Forge \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9925134779506292,
        0.9830556316027212,
        0.9482490983315464,
        0.935342817300063,
        0.9899521724572898
      ],
      "excerpt": "    conda install -c conda-forge dlib \n    Installing dlib from the conda-forge channel can be achieved by adding conda-forge to your channels with: \nconda config --add channels conda-forge \nOnce the conda-forge channel has been enabled, dlib can be installed with: \nconda install dlib \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9466108461124763
      ],
      "excerpt": "conda search dlib --channel conda-forge \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9334280065760721,
        0.936549175609416,
        0.9907912845878528
      ],
      "excerpt": "Beside the cell magic commands, IPython notebook (now Jupyter notebook) is so cool that it allows you to use any unix command right from the cell (this is also equivalent to using the %%bash cell magic command). \nTo run a unix command from the cell, just precede your command with ! mark. for example: \n!python --version see your python version \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8564053107084612,
        0.8459535031765074
      ],
      "excerpt": "Github: https://github.com/ZheC/Realtime_Multi-Person_Pose_Estimation \nCMU OpenPose: https://github.com/CMU-Perceptual-Computing-Lab/openpose \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8563152782401285
      ],
      "excerpt": "Below are a list of my changes, you can take the list as a reference, but I am sure you will need something different to make it work on your own windows machine because each environment is different. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9009083507535149
      ],
      "excerpt": "Below are the output from my windows machine: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.859564866895331
      ],
      "excerpt": "2018-08-17 11:38:16.500125: I T:\\src\\github\\tensorflow\\tensorflow\\core\\platform\\cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.875159326863014
      ],
      "excerpt": "2018-08-17 11:38:17.062510: I T:\\src\\github\\tensorflow\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:1435] Adding visible gpu devices: 0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.836280456145269,
        0.836280456145269,
        0.8495191589491442
      ],
      "excerpt": "2018-08-17 11:38:18.343487: I T:\\src\\github\\tensorflow\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:929]      0 \n2018-08-17 11:38:18.343642: I T:\\src\\github\\tensorflow\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:942] 0:   N \n2018-08-17 11:38:18.343932: I T:\\src\\github\\tensorflow\\tensorflow\\core\\common_runtime\\gpu\\gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 8806 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1080 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1) \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8153880021144664,
        0.9336801098518991,
        0.888869306460297
      ],
      "excerpt": "To write/save \n%%writefile myfile.py \nwrite/save cell contents into myfile.py (use -a to append). Another alias: %%file myfile.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9364541555520881,
        0.8815406924564388,
        0.8596122219648215,
        0.8722944500419593,
        0.8859256083345718
      ],
      "excerpt": "%run myfile.py \nrun myfile.py and output results in the current cell \nTo load/import \n%load myfile.py \nload \"import\" myfile.py into the current cell \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8492973360150537
      ],
      "excerpt": "!python myfile.py run myfile.py and output results in the current cell, just like %run (see the difference between !python and %run in the comments below). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8495498854144675
      ],
      "excerpt": "X=tf.placeholder(tf.float32, [None, 10304]) #:gray scale so 1 value for pixel \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8194339812923624
      ],
      "excerpt": "Y=tf.nn.softmax(tf.matmul(tf.reshape(X, [-1, 10304]), W) + b) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8432671725415878
      ],
      "excerpt": "Y_=tf.placeholder(tf.float32, [None, 40]) #:one hot encoded \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8273049814029318
      ],
      "excerpt": "cross_entropy = -tf.reduce_sum(Y_*tf.log(Y)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8521587250170621
      ],
      "excerpt": ": Run TF session \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8004551897488229,
        0.8441349974416168
      ],
      "excerpt": ": Total number of images we have = 240 (40x6) \n:Train the model 100 images at a time by the function below \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428
      ],
      "excerpt": "    sess.run(train_step, feed_dict=train_data) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9193018645673583
      ],
      "excerpt": "            print(\"Iteration: {}, Train Acuuracy: {}, Train Loss: {}\".format(i, a*100, c)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9415181172846068,
        0.848443988353186
      ],
      "excerpt": "            print(\"Iterationg: {}, Test Acuuracy: {}, Test Loss: {}\".format(i, a*100, c)) \nfor i in range(1000+1): training_Step(i,True, True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9114726581586553,
        0.8934477375241742,
        0.8796325398080971,
        0.8880636280088927,
        0.9416522774131079,
        0.8880636280088927,
        0.8934477375241742,
        0.8880636280088927,
        0.9416522774131079,
        0.9368591520518119,
        0.8934477375241742
      ],
      "excerpt": "in myfrcnn\\demo.py,   \nfrom model.nms_wrapper import nms \nfrom nms.py_cpu_nms import py_cpu_nms as nms \nin myfrcnn\\layer_utils\\proposal_target_layer.py \nfrom utils.cython_bbox import bbox_overlaps \nin myfrcnn\\layer_utils\\proposal_layer.py \nfrom model.nms_wrapper import nms \nin myfrcnn\\layer_utils\\anchor_target_layer.py \nfrom utils.cython_bbox import bbox_overlaps \nin \\myfrcnn\\model\\test.py \nfrom model.nms_wrapper import nms \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8240936546130795
      ],
      "excerpt": "Demo for data/demo/wei-09.jpg \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/sananand007/Xrelab/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Xrelab",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Xrelab",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "sananand007",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sananand007/Xrelab/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 20:17:52 GMT"
    },
    "technique": "GitHub API"
  }
}