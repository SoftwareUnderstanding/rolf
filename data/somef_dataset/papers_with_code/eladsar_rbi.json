{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1803.00933",
      "https://arxiv.org/abs/1707.06347"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9944484218006108,
        0.9278824608274014,
        0.9944484218006108
      ],
      "excerpt": "1. Ape-X (https://arxiv.org/abs/1803.00933) \n2. R2D2 (https://openreview.net/pdf?id=r1lyTjAqYX) \n3. PPO (https://arxiv.org/abs/1707.06347) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8109194328925066
      ],
      "excerpt": "A safe reinforcement learning algorithm  \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/eladsar/rbi",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-12-03T07:54:00Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-12-08T09:59:30Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8912097911826996
      ],
      "excerpt": "Implementation of distributed RL algorithms: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8723509776939615
      ],
      "excerpt": "Currently, supported environment is ALE \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8894507231814871
      ],
      "excerpt": "There are three ways to evaluate the learning progress and agent performance \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8899087523487376
      ],
      "excerpt": "Performance logs are stored to numpy files and in the end of the run a postprocessing process stores all logs into a pandas dataframe. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Implementation of Rerouted Behavior Improvement (RBI). A reinforcement learning algorithm.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/eladsar/rbi/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 21:50:32 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/eladsar/rbi/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "eladsar/rbi",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/eladsar/rbi/master/install/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/eladsar/rbi/master/evaluate.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/eladsar/rbi/master/actors.sh",
      "https://raw.githubusercontent.com/eladsar/rbi/master/learner.sh",
      "https://raw.githubusercontent.com/eladsar/rbi/master/runs/run_r2d2_players.sh",
      "https://raw.githubusercontent.com/eladsar/rbi/master/runs/run_rbi_players.sh",
      "https://raw.githubusercontent.com/eladsar/rbi/master/runs/run_ape_players.sh",
      "https://raw.githubusercontent.com/eladsar/rbi/master/runs/run_ape_learner.sh",
      "https://raw.githubusercontent.com/eladsar/rbi/master/runs/run_rbi_learner.sh",
      "https://raw.githubusercontent.com/eladsar/rbi/master/runs/run_r2d2_learner.sh",
      "https://raw.githubusercontent.com/eladsar/rbi/master/install/build.sh",
      "https://raw.githubusercontent.com/eladsar/rbi/master/install/run.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "make new directory called tmux_tmp\ncopy ncurses.tar.gz and tmx-2.5.tar.gz to tmux_tmp directory\ncopy install_tmux.sh to server and run\n./install_tmux.sh\n\nsetup directories, clone rbi and setup conda environment\n\n```bash\nmkdir -p ~/data/rbi/results\nmkdir -p ~/data/rbi/logs\nmkdir -p ~/projects\ncd ~/projects\ngit clone https://github.com/eladsar/rbi.git\ncd ~/projects/rbi\nconda env create -f install/environment.yml\nsource activate torch1\npip install atari-py\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "copy anaconda file to server and run:\nsh Anaconda3-2018.12-Linux-x86_64.sh\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9997805063480645
      ],
      "excerpt": "cd install \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8439647281577416
      ],
      "excerpt": "and from the server terminal run \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8821603104353286
      ],
      "excerpt": "Use the identifier name and the resume parameter to choose the required run. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8488510083296645
      ],
      "excerpt": "To run the docker container: \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/eladsar/rbi/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell",
      "Jupyter Notebook",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "rbi",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "rbi",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "eladsar",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/eladsar/rbi/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "A distributed RL agent is composed of a single learning process and multiple actor process.\nTherefore, we need to execute two bash scripts one for the learner and one for the multiple actors.\n\nchoose \\<algorithm> as one of rbi|ape|ppo|r2d2|rbi_rnn \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "sh learner.sh \\<algorithm> \\<identifier> \\<game> \\<new|resume>\n\nresume is a number of experiment to resume.\nFor example:\n\n```bash\nsh learner.sh rbi qbert_debug qbert new\n```\n\nstarts a new experiment, while:\n\n```bash\nsh learner.sh rbi qbert_debug qbert 3\n```\n\nresumes experiment 3 with identifier qbert_debug\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "sh actors.sh \\<algorithm> \\<identifier> \\<game> \\<resume>\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "right now there are two evaluation players in each actors script\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "1. ctrl-c from the learner process terminal\n2. pkill -f \"main.py\"  (kills all the live actor processes)\n3. rm -r /dev/shm/<your name>/rbi/* (clear the ramdisk filesystem)\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 21:50:32 GMT"
    },
    "technique": "GitHub API"
  }
}