{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Shi, Wenzhe, Jose Caballero, Ferenc Husz\u00e1r, Johannes Totz, Andrew P. Aitken, Rob Bishop, Daniel Rueckert, and Zehan Wang. \u201cReal-Time Single Image and Video Super-Resolution Using an Efficient Sub-Pixel Convolutional Neural Network.\u201d ArXiv:1609.05158 [Cs, Stat], September 16, 2016. http://arxiv.org/abs/1609.05158.\n\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fengwang/subpixel_conv2d",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-05-05T11:22:04Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-30T21:02:34Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8517300553407721
      ],
      "excerpt": "Subpixel convolution with keras and tensorflow. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Sub-Pixel Convolutional Layer with Tensorflow/Keras",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fengwang/subpixel_conv2d/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Wed, 29 Dec 2021 05:13:05 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/fengwang/subpixel_conv2d/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "fengwang/subpixel_conv2d",
    "technique": "GitHub API"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/fengwang/subpixel_conv2d/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# SubpixelConv2D\n\nSubpixel convolution with keras and tensorflow.\n\n----\n\n### Example usage\n\nA simple model upsampling a layer of dimension ( 32, 32, 16 ) to ( 128, 128, 1 ), with save/load functionality enabled..\n\n```python\nfrom subpixel_conv2d import SubpixelConv2D\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.models import Model, load_model\nip = Input(shape=(32, 32, 16))\nx = SubpixelConv2D(upsampling_factor=4)(ip)\nmodel = Model(ip, x)\nmodel.summary()\nmodel.save( 'model.h5' )\n\nprint( '*'*80 )\nnm = load_model( 'model.h5' )\nprint( 'new model loaded successfully' )\n```\n\nproduces output of\n\n```\nUsing TensorFlow backend.\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "subpixel_conv2d",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "fengwang",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fengwang/subpixel_conv2d/blob/master/readme.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 16,
      "date": "Wed, 29 Dec 2021 05:13:05 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "keras",
      "super-resolution",
      "tensorflow",
      "subpixel-convolution",
      "subpixel",
      "convolutional-layers"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "A simple model upsampling a layer of dimension ( 32, 32, 16 ) to ( 128, 128, 1 ), with save/load functionality enabled..\n\n```python\nfrom subpixel_conv2d import SubpixelConv2D\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.models import Model, load_model\nip = Input(shape=(32, 32, 16))\nx = SubpixelConv2D(upsampling_factor=4)(ip)\nmodel = Model(ip, x)\nmodel.summary()\nmodel.save( 'model.h5' )\n\nprint( '*'*80 )\nnm = load_model( 'model.h5' )\nprint( 'new model loaded successfully' )\n```\n\nproduces output of\n\n```\nUsing TensorFlow backend.\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #:\n=================================================================\ninput_1 (InputLayer)         (None, 32, 32, 16)        0\n_________________________________________________________________\nsubpixel_conv2d_1 (SubpixelC (None, 128, 128, 1)       0\n=================================================================\nTotal params: 0\nTrainable params: 0\nNon-trainable params: 0\n_________________________________________________________________\n********************************************************************************\n/usr/lib/python3.7/site-packages/keras/engine/saving.py:269: UserWarning: No training configuration found in save file: the model was *not* compiled. Compile it manually.\n  warnings.warn('No training configuration found in save file: '\nnew model loaded successfully\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}