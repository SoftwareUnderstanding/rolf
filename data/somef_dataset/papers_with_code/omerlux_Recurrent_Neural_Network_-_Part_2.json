{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1711.03953"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8847707001475004
      ],
      "excerpt": "Implementation with PyTorch-1.1  for MoS:https://arxiv.org/pdf/1711.03953.pdf \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9625923568277878,
        0.9836179740804603
      ],
      "excerpt": "Zhilin Yang*, Zihang Dai*, Ruslan Salakhutdinov, William W. Cohen (*: equal contribution) \nPreprint 2017 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/omerlux/NLP-PTB",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-10-22T13:34:05Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-02-20T09:15:34Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9304800842276326,
        0.8014486489784717,
        0.9420591560709958
      ],
      "excerpt": "\ud83d\udea9 Note that this is not the official code, please refer https://github.com/zihangdai/mos for more details. \nThis code refered the paper \nBreaking the Softmax Bottleneck: A High-Rank RNN Language Model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8900127089899615
      ],
      "excerpt": "where PATH_TO_FOLDER is the folder created by the first step (concatenation of PTB with a timestamp). \n",
      "technique": "Supervised classification"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```./get_data.sh```\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/omerlux/Recurrent_Neural_Network_-_Part_2/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 10:08:41 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/omerlux/NLP-PTB/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "omerlux/NLP-PTB",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/omerlux/Recurrent_Neural_Network_-_Part_2/master/mos-pytorch1.1/run_dynamic_score.sh",
      "https://raw.githubusercontent.com/omerlux/Recurrent_Neural_Network_-_Part_2/master/mos-pytorch1.1/run_finetune.sh",
      "https://raw.githubusercontent.com/omerlux/Recurrent_Neural_Network_-_Part_2/master/mos-pytorch1.1/run_train_mos.sh",
      "https://raw.githubusercontent.com/omerlux/Recurrent_Neural_Network_-_Part_2/master/mos-pytorch1.1/run_dynamic.sh",
      "https://raw.githubusercontent.com/omerlux/Recurrent_Neural_Network_-_Part_2/master/mos-pytorch1.1/run_train.sh",
      "https://raw.githubusercontent.com/omerlux/Recurrent_Neural_Network_-_Part_2/master/mos-pytorch1.1/run_score.sh",
      "https://raw.githubusercontent.com/omerlux/Recurrent_Neural_Network_-_Part_2/master/mos-pytorch1.1/get_data.sh",
      "https://raw.githubusercontent.com/omerlux/Recurrent_Neural_Network_-_Part_2/master/mos-pytorch1.1/run_encoder_analysis.sh"
    ],
    "technique": "File Exploration"
  },
  "invocation": [
    {
      "confidence": [
        0.9136064441154114,
        0.9391391907027243
      ],
      "excerpt": "First, train the model \npython main.py --data data/penn --dropouti 0.4 --dropoutl 0.29 --dropouth 0.225 --seed 28 --batch_size 12 --lr 20.0 --epoch 100 --nhid 960 --nhidlast 620 --emsize 280 --n_experts 15 --single_gpu --gpu_device 4 --continue_train \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9201026312137562
      ],
      "excerpt": "python finetune.py --data data/penn --dropouti 0.4 --dropoutl 0.29 --dropouth 0.225 --seed 28 --batch_size 12 --lr 25.0 --epoch 1000 --nhid 960 --emsize 280 --n_experts 15 --save PATH_TO_FOLDER --single_gpu --gpu_device 4 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9101102398410075,
        0.9136064441154114,
        0.9350242563649052
      ],
      "excerpt": "python dynamiceval.py --data data/penn --gpu_device 4 --path PATH_TO_FOLDER --lamb 0.075 \nFirst, train the model \npython main.py --epochs 1000 --data data/wikitext-2 --save WT2 --dropouth 0.2 --seed 1882 --n_experts 15 --nhid 1150 --nhidlast 650 --emsize 300 --batch_size 15 --lr 15.0 --dropoutl 0.29 --small_batch_size 5 --max_seq_len_delta 20 --dropouti 0.55 --single_gpu --gpu_device 4 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9176799503281708
      ],
      "excerpt": "python finetune.py --epochs 1000 --data data/wikitext-2 --save PATH_TO_FOLDER --dropouth 0.2 --seed 1882 --n_experts 15 --nhid 1150 --emsize 300 --batch_size 15 --lr 20.0 --dropoutl 0.29 --small_batch_size 5 --max_seq_len_delta 20 --dropouti 0.55 --single_gpu --gpu_device 4 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9305903608951804
      ],
      "excerpt": "python dynamiceval.py --data data/wikitext-2 --model PATH_TO_FOLDER --epsilon 0.002 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9136064441154114,
        0.9281622204346142
      ],
      "excerpt": "First, train the model \nCUDA_VISIBLE_DEVICES=0,1,2 python main.py --epochs 1000 --data data/wikitext-2 --save WT2 --dropouth 0.2 --seed 1882 --n_experts 15 --nhid 1150 --nhidlast 650 --emsize 300 --batch_size 15 --lr 15.0 --dropoutl 0.29 --small_batch_size 15 --max_seq_len_delta 20 --dropouti 0.55 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9173532248867214
      ],
      "excerpt": "CUDA_VISIBLE_DEVICES=0,1,2 python finetune.py --epochs 1000 --data data/wikitext-2 --save PATH_TO_FOLDER --dropouth 0.2 --seed 1882 --n_experts 15 --nhid 1150 --emsize 300 --batch_size 15 --lr 20.0 --dropoutl 0.29 --small_batch_size 15 --max_seq_len_delta 20 --dropouti 0.55 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/omerlux/NLP-PTB/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2017 Zihang Dai and Zhilin Yang\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Implementing PTB model (at mos-pytroch1.1)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "NLP-PTB",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "omerlux",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/omerlux/NLP-PTB/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Python 3.6, PyTorch 1.1.0\n\n\nBelow are results of the current version on Penn Treebank as reported in https://github.com/zihangdai/mos/pull/9 . One may need further tuning to match the original results.\n\n**MoS w/o finetune:** Valid 58.34 Test 56.18\n\n**MoS:** Valid 56.83 Test 54.64\n\n**MoS + dynamic evaluation:** Valid 49.03 Test: 48.43\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Sat, 25 Dec 2021 10:08:41 GMT"
    },
    "technique": "GitHub API"
  }
}