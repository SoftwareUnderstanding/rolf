{
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{barde2020adversarial,\n  title={Adversarial Soft Advantage Fitting: Imitation Learning without Policy Optimization},\n  author={Barde, Paul and Roy, Julien and Jeon, Wonseok and Pineau, Joelle and Pal, Chris and Nowrouzezahrai, Derek},\n  journal={Advances in Neural Information Processing Systems},\n  volume={33},\n  year={2020}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9980385311918184
      ],
      "excerpt": "Pytorch implementation of Adversarial Soft Advantage Fitting (ASAF). See installation instructions and example commandlines below. If you find this code useful please consider citing the paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8258010724721833
      ],
      "excerpt": "python main.py --alg_name asaf-wX --task_name learnablevsRandomPacifist1v1empty --demos_name expertDemo150_winsFrom0_nDifferentInit1.pkl --max_episodes 50000 --episodes_between_saves 500 --d_episodes_between_updates 10 --d_batch_size 5 --d_epochs_per_update 10 --d_lr 0.0002 --window_size 32 --window_stride 32 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9577836192656184
      ],
      "excerpt": "python main.py --alg_name gailXppo --task_name learnablevsRandomPacifist1v1empty --demos_name expertDemo150_winsFrom0_nDifferentInit1.pkl --max_episodes 50000 --episodes_between_saves 500 --d_episodes_between_updates 10 --d_batch_size 256 --d_epochs_per_update 10 --d_lr 9.3e-7 --lr 0.00015 --batch_size 256 --lamda 0.95 --episodes_between_updates 10 --epochs_per_update 10 --update_clip_param 0.2 --critic_lr_coef 0.5 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9577836192656184
      ],
      "excerpt": "python main.py --alg_name airlXppo --task_name learnablevsRandomPacifist1v1empty --demos_name expertDemo150_winsFrom0_nDifferentInit1.pkl --max_episodes 50000 --episodes_between_saves 500 --d_episodes_between_updates 10 --d_batch_size 256 --d_epochs_per_update 10 --d_lr 3.1e-7 --lr 0.00017 --batch_size 256 --lamda 0.95 --episodes_between_updates 10 --epochs_per_update 10 --update_clip_param 0.2 --critic_lr_coef 0.5 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ubisoft/ubisoft-laforge-asaf",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-10-13T19:24:24Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-17T23:36:07Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "  unzip data.zip -d data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8372396012058242
      ],
      "excerpt": "ASAF-1 on hopper \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8372396012058242
      ],
      "excerpt": "ASAF-w on walker2d \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8372396012058242
      ],
      "excerpt": "ASAF on halfcheetah \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8372396012058242
      ],
      "excerpt": "SQIL on ant \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8372396012058242
      ],
      "excerpt": "GAIL + PPO on hopper \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Asaf ",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ubisoft/ubisoft-la-forge-ASAF/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Sun, 26 Dec 2021 02:13:23 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ubisoft/ubisoft-laforge-asaf/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ubisoft/ubisoft-laforge-asaf",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Create new python environment with version 3.7:\n    ```\n    conda create --name asaf_env python=3.7.4\n    source activate asaf_env\n    ```\n  \n  If on windows:\n    * Install pytorch (CUDA 10.1):\n    ```\n    conda install pytorch==1.4.0 torchvision==0.5.0 cudatoolkit=10.1 -c pytorch\n    ```\n \n    * Install pytorch (CPU Only):\n    ```\n    conda install pytorch==1.4.0 torchvision==0.5.0 cpuonly -c pytorch\n    ```\n      \n* Install pip dependencies:\n  ```\n  cd ubisoft-la-forge-ASAF\n  pip install -r requirements.txt\n  mkdir storage\n  ```\n\n* Install `alfred`:\n  ```\n  mkdir -p $HOME/asaf_env/ext \n  cd $HOME/asaf_env/ext \n  git clone --depth 1 --branch v0.2 https://github.com/julienroyd/alfred \n  cd alfred\n  pip install -e .\n  ```\n\n* Install `playground`:\n  ```\n  mkdir -p $HOME/asaf_env/ext \n  cd $HOME/asaf_env/ext/\n  git clone https://github.com/PBarde/ASAF-playground\n  cd ASAF-playground\n  pip install -e .\n  ```\n\n* Install `mujoco`:\n  * Create mujoco folder:\n    ```\n    mkdir $HOME/.mujoco\n    ```\n  \n  * Download mujoco 1.5 binaries:\n    ```\n    cd $HOME/.mujoco\n    wget https://www.roboti.us/download/mjpro150_linux.zip\n    unzip mjpro150_linux.zip\n    rm mjpro150_linux.zip\n    ```\n  \n  * Copy-paste mujoco lisence key:\n    ```\n    cd $HOME/.mujoco\n    touch mjkey.txt\n    vim mjkey.txt\n    ```\n    \n  * Add these environment variables to `.bashrc` (don't forget to `source .bashrc` afterwards):\n    ```\n    export MUJOCO_PY_MJKEY_PATH=$HOME/.mujoco/mjkey.txt\n    export MUJOCO_PY_MJPRO_PATH=$HOME/.mujoco/mjpro150/\n    export LD_LIBRARY_PATH=$HOME/.mujoco/mjpro150/bin\n    ```\n\n  * Install `mujoco-py`:\n    ```\n    mkdir -p $HOME/asaf_env/ext \n    cd $HOME/asaf_env/ext \n    git clone https://github.com/openai/mujoco-py\n    cd mujoco-py\n    git checkout 9ea9bb000d6b8551b99f9aa440862e0c7f7b4191\n    pip install -e .\n    ```\n    \n* Test installation:\n  ```\n  python -c \"import alfred\"\n  python -c \"import pommerman\"\n  python -c \"import mujoco_py\"\n  ```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9205990667633847,
        0.999746712887969
      ],
      "excerpt": "  cd ubisoft-la-forge-ASAF \n  pip install gdown \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8627998305508399,
        0.9403770569177873
      ],
      "excerpt": "  unzip data.zip -d data \n  touch data/__init__.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9184660015594259
      ],
      "excerpt": "python main.py --alg_name asaf-1X --task_name hopper-c --demos_name expert_demo_25.pkl --max_transitions 2000000 --transitions_between_saves 5000 --d_transitions_between_updates 2000 --d_batch_size 100 --d_grad_norm_clip 1. --d_epochs_per_update 30 --d_lr 0.001 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9312050046407373
      ],
      "excerpt": "python main.py --alg_name asaf-wX --task_name walker2d-c --demos_name expert_demo_25.pkl --max_transitions 2000000 --transitions_between_saves 5000 --d_transitions_between_updates 2000 --d_batch_size 20 --d_grad_norm_clip 1. --d_epochs_per_update 10 --d_lr 0.001 --window_size 100 --window_stride 1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9194008606868985
      ],
      "excerpt": "python main.py --alg_name asaf-fullX --task_name halfcheetah-c --demos_name expert_demo_25.pkl --max_transitions 2000000  --transitions_between_saves 5000 --d_episodes_between_updates 25 --d_batch_size 10 --d_grad_norm_clip 10. --d_epochs_per_update 50 --d_lr 0.001 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8970774343698955
      ],
      "excerpt": "python main.py --alg_name sqil-c --task_name ant-c --demos_name expert_demo_25.pkl --max_transitions 2000000  --transitions_between_saves 5000 --transitions_between_updates 1 --batch_size 256 --lr 0.0003 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9218257548892047
      ],
      "excerpt": "python main.py --alg_name gailXppo --task_name hopper-c --demos_name expert_demo_25.pkl --max_transitions 2000000 --transitions_between_saves 5000 --d_transitions_between_updates 2000 --d_batch_size 2000 --d_grad_norm_clip 1. --d_epochs_per_update 5 --gradient_penalty_coef 1. --d_lr 0.011 --lr 0.000018 --batch_size 200 --grad_norm_clip 1. --lamda 0.98 --transitions_between_updates 2000 --epochs_per_update 5 --update_clip_param 0.2 --critic_lr_coef 0.25 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9002652442887672
      ],
      "excerpt": "python main.py --alg_name asaf-1X --task_name learnablevsRandomPacifist1v1empty --demos_name expertDemo150_winsFrom0_nDifferentInit1.pkl --max_episodes 50000 --episodes_between_saves 500 --d_episodes_between_updates 10 --d_batch_size 256 --d_epochs_per_update 10 --d_lr 0.0001 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8503964877480511
      ],
      "excerpt": "python main.py --alg_name asaf-wX --task_name learnablevsRandomPacifist1v1empty --demos_name expertDemo150_winsFrom0_nDifferentInit1.pkl --max_episodes 50000 --episodes_between_saves 500 --d_episodes_between_updates 10 --d_batch_size 5 --d_epochs_per_update 10 --d_lr 0.0002 --window_size 32 --window_stride 32 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9119895444541266
      ],
      "excerpt": "python main.py --alg_name asaf-fullX --task_name learnablevsRandomPacifist1v1empty --demos_name expertDemo150_winsFrom0_nDifferentInit1.pkl --max_episodes 50000 --episodes_between_saves 500 --d_episodes_between_updates 10 --d_batch_size 5 --d_epochs_per_update 10 --d_lr 0.0007 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9081126622941307
      ],
      "excerpt": "python main.py --alg_name sqil --task_name learnablevsRandomPacifist1v1empty --demos_name expertDemo150_winsFrom0_nDifferentInit1.pkl --max_episodes 50000 --episodes_between_saves 500 --transitions_between_updates 10 --batch_size 256 --lr 0.00019 --replay_buffer_length 100000 --warmup 1280 --grad_norm_clip 0.2 --tau 0.05 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8840864766453537
      ],
      "excerpt": "python main.py --alg_name gailXppo --task_name learnablevsRandomPacifist1v1empty --demos_name expertDemo150_winsFrom0_nDifferentInit1.pkl --max_episodes 50000 --episodes_between_saves 500 --d_episodes_between_updates 10 --d_batch_size 256 --d_epochs_per_update 10 --d_lr 9.3e-7 --lr 0.00015 --batch_size 256 --lamda 0.95 --episodes_between_updates 10 --epochs_per_update 10 --update_clip_param 0.2 --critic_lr_coef 0.5 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8855536767059037
      ],
      "excerpt": "python main.py --alg_name airlXppo --task_name learnablevsRandomPacifist1v1empty --demos_name expertDemo150_winsFrom0_nDifferentInit1.pkl --max_episodes 50000 --episodes_between_saves 500 --d_episodes_between_updates 10 --d_batch_size 256 --d_epochs_per_update 10 --d_lr 3.1e-7 --lr 0.00017 --batch_size 256 --lamda 0.95 --episodes_between_updates 10 --epochs_per_update 10 --update_clip_param 0.2 --critic_lr_coef 0.5 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ubisoft/ubisoft-laforge-asaf/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "ubisoft-la-forge-ASAF",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "ubisoft-laforge-asaf",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ubisoft",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ubisoft/ubisoft-laforge-asaf/blob/main/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "There are two training scripts `irl/train.py` and `direct_rl/train.py`. The script `main.py` will automatically call the appropriate trainer based on the \n`alg_name` that you provide. You can find the list of available algorithms and environments in `alg_task_lists.py`.\n\nWe give here some examples on how to launch runs from the paper. All the hyper-parameters come from the appendix section of the paper.\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 11,
      "date": "Sun, 26 Dec 2021 02:13:23 GMT"
    },
    "technique": "GitHub API"
  }
}