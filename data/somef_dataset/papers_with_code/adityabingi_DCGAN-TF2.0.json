{
  "citation": [
    {
      "confidence": [
        0.890145916093413,
        0.8356013927728488,
        0.9626356225854676
      ],
      "excerpt": "For theory of GAN's and DCGAN refer these works: \n1. Generative Adversarial Nets \n2. NIPS 2016 Tutorial:Generative Adversarial Networks \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/adityabingi/DCGAN-TF2.0",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-11-06T14:34:18Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-09-08T07:57:31Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9603416203993683,
        0.9310784055438392,
        0.9568635511079182
      ],
      "excerpt": "Minimalistic tf 2.0 implementation of DCGAN with support for distributed training on multiple GPUs. \nThis work is aimed to generate novel face images similar to CelebA image dataset using Deep Convolutional Generative Adversarial Networks (DCGAN). \nFor theory of GAN's and DCGAN refer these works: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8320956462096392
      ],
      "excerpt": "3. UNSUPERVISED REPRESENTATION LEARNING WITH DEEP CONVOLUTIONAL GENERATIVE ADVERSARIAL NETWORKS \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8728592049761854,
        0.9197400008584388
      ],
      "excerpt": "Data Processing: \nAll the images in the celeba dataset are of (218 ,178, 3) resolution and for this work all the images are cropped by carefully choosing the common face region (128, 128, 3) in all the images. Check data_crop in config.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Tensorflow 2.0 implementation of DCGAN for CelebA dataset",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/adityabingi/DCGAN-TF2.0/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Sun, 26 Dec 2021 05:49:02 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/adityabingi/DCGAN-TF2.0/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "adityabingi/DCGAN-TF2.0",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.9308506313655152
      ],
      "excerpt": "python download_celebA.py 0B7EVK8r0v71pZjFTYXZWM3FlRnM CelebA.zip \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/adityabingi/DCGAN-TF2.0/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Aditya Bingi\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "DCGAN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "DCGAN-TF2.0",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "adityabingi",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/adityabingi/DCGAN-TF2.0/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 20,
      "date": "Sun, 26 Dec 2021 05:49:02 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "For multi-gpu training:\n\n`python dcgan.py --train`\n\nTo run on single GPU run the above code by replacing strategy = tf.distribute.MirroredStrategy(devices) (line 185 in dcgan.py) with \nstrategy=tf.distribute.OneDeviceStrategy(device='/GPU:0') and configure device variable by passing it with specific gpu id like \"/device:GPU:0\" or \"/device:GPU:1\" \n\nYou can also run single GPU training with tf.distribute.MirroredStrategy also by simply setting num_gpu = 1 in config.py.\n\nFor Generating new samples:\n\n`python dcgan.py --generate`\n\n\n",
      "technique": "Header extraction"
    }
  ]
}