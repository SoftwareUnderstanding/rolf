{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2006.09661"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n@misc{sitzmann2020implicit,\n    title={Implicit Neural Representations with Periodic Activation Functions},\n    author={Vincent Sitzmann and Julien N. P. Martel and Alexander W. Bergman and David B. Lindell and Gordon Wetzstein},\n    year={2020},\n    eprint={2006.09661},\n    archivePrefix={arXiv},\n    primaryClass={cs.CV}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{sitzmann2020implicit,\n    title={Implicit Neural Representations with Periodic Activation Functions},\n    author={Vincent Sitzmann and Julien N. P. Martel and Alexander W. Bergman and David B. Lindell and Gordon Wetzstein},\n    year={2020},\n    eprint={2006.09661},\n    archivePrefix={arXiv},\n    primaryClass={cs.CV}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zion-king/Tensorflow-Sinusodial-Representation-Networks-SIREN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-06-24T01:26:53Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-01-10T21:24:09Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9346671692525258
      ],
      "excerpt": "Tensorflow 2.0 implementation of Sinusodial Representation networks (SIREN) from the paper Implicit Neural Representations with Periodic Activation Functions. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9250730150774188,
        0.9233494772540224
      ],
      "excerpt": "Weight files are made available in the repository under the Release tab of the project. Extract the weights and place the checkpoints folder at the scripts directory \nThese weights generates the following output after 5000 epochs of training with batch size 8192 while using only 10% of the available pixels in the image during training phase. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8338819753959608
      ],
      "excerpt": "If we train for using only 20% of the available pixels in the image during training phase - \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.816302650550693
      ],
      "excerpt": "If we train for using only 30% of the available pixels in the image during training phase - \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zion-king/Tensorflow-Sinusodial-Representation-Networks-SIREN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Wed, 29 Dec 2021 01:00:04 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zion-king/Tensorflow-Sinusodial-Representation-Networks-SIREN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "zion-king/Tensorflow-Sinusodial-Representation-Networks-SIREN",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": " - Pip install\n\n```bash\n$ pip install --upgrade tf_siren\n```\n\n - Pip install (test support)\n\n```bash\n$ pip install --upgrade tf_siren[tests]\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8182695817576374
      ],
      "excerpt": "<img src=\"https://github.com/titu1994/tf_SIREN/blob/master/images/celtic_knot.png?raw=true\" height=100% width=100%> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8182695817576374
      ],
      "excerpt": "<img src=\"https://github.com/titu1994/tf_SIREN/blob/master/images/celtic_knot_20pct.png?raw=true\" height=100% width=100%> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zion-king/Tensorflow-Sinusodial-Representation-Networks-SIREN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Somshubra Majumdar\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Tensorflow Sinusodial Representation Networks (SIREN)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Tensorflow-Sinusodial-Representation-Networks-SIREN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "zion-king",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zion-king/Tensorflow-Sinusodial-Representation-Networks-SIREN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": " - Tensorflow 2.0+\n - Matplotlib to visualize eval result\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Wed, 29 Dec 2021 01:00:04 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Copy the `tf_siren` folder to your local directory and import either `SinusodialRepresentationDense` or `SIRENModel`.\n\n```python\nfrom tf_siren import SinusodialRepresentationDense\nfrom tf_siren import SIRENModel\n\n#: You can use SinusodialRepresentationDense exactly like you ordinarily use Dense layers.\nip = tf.keras.layers.Input(shape=[2])\nx = SinusodialRepresentationDense(32,\n                                  activation='sine', #: default activation function\n                                  w0=1.0)(ip)        #: w0 represents sin(w0 * x) where x is the input.\n                                  \nmodel = tf.keras.Model(inputs=ip, outputs=x)\n\n#: Or directly use the model class to build a multi layer SIREN\nmodel = SIRENModel(units=256, final_units=3, final_activation='sigmoid',\n                   num_layers=5, w0=1.0, w0_initial=30.0)\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}