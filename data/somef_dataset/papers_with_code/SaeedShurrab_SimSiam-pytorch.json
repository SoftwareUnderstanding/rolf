{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2011.10566",
      "https://arxiv.org/abs/2002.05709",
      "https://arxiv.org/abs/2006.09882",
      "https://arxiv.org/abs/2006.07733"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n@inproceedings{chen2021exploring,\n  title={Exploring simple siamese representation learning},\n  author={Chen, Xinlei and He, Kaiming},\n  booktitle={Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition},\n  pages={15750--15758},\n  year={2021}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{chen2021exploring,\n  title={Exploring simple siamese representation learning},\n  author={Chen, Xinlei and He, Kaiming},\n  booktitle={Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition},\n  pages={15750--15758},\n  year={2021}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/SaeedShurrab/SimSiam-pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-20T13:54:03Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-20T18:03:29Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9736320559802273
      ],
      "excerpt": "A simple pytorch implementation of Exploring Simple Siamese Representation Learning which is developed by Facebook AI Research (FAIR) group as a self-supervised learning approach that omits the need for negative samples SimCLR, online clustring SwaV and momentum encoder BYOL. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Pytorch implementation of SimSiam Architecture ",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/SaeedShurrab/SimSiam-pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 08:47:17 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/SaeedShurrab/SimSiam-pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "SaeedShurrab/SimSiam-pytorch",
    "technique": "GitHub API"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/SaeedShurrab/SimSiam-pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "SimSiam-pytorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "SimSiam-pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "SaeedShurrab",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/SaeedShurrab/SimSiam-pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Mon, 27 Dec 2021 08:47:17 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "In this implementation example, the original hyper-parameters specified by the original paper are set. Feel free to play with other hyper-parameters:\n\n```python\nfrom torchvision.models import resnet18\n\nmodel = resnet18()\n\nlearner = SimSiam(model)\n\nopt = torch.optim.Adam(learner.parameters(), lr=0.001)\n\ncriterion = NegativeCosineSimilarity()\n\ndef sample_unlabelled_images():\n    return torch.randn(20, 3, 256, 256)\n\nfor _ in range(100):\n    images1 = sample_unlabelled_images()\n    images2 = images1*0.9\n    p1, p2, z1, z2 = learner(images1, images2).values()\n    loss = criterion(p1, p2, z1, z2)\n    opt.zero_grad()\n    loss.backward()\n    opt.step()\n    print(_+1,loss)\n```\n\n\n\n",
      "technique": "Header extraction"
    }
  ]
}