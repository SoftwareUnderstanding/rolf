{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1908.07442"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/titu1994/tf-TabNet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-10-05T05:18:46Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-21T10:37:03Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8460876574585837
      ],
      "excerpt": "A Tensorflow 2.0 port for the paper TabNet: Attentive Interpretable Tabular Learning, whose original codebase is available at https://github.com/google-research/google-research/blob/master/tabnet. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9964054980299748,
        0.9135310168588544,
        0.9064285727814668,
        0.9553747241010947,
        0.9599173600209348
      ],
      "excerpt": "The above image is obtained from the paper, where the model is built of blocks in two stages - one to attend to the input features and anither to construct the output of the model. \nThere are two major differences from the paper and the official implementation. \n1) This implementation offers a choice in the normalization method, between the regular Batch Normalization from the paper and Group Normalization. \n   - It has been observed that the paper uses very large batch sizes to stabilie Batch Normalization and obtain good generalization. An issue with this is computational cost.  \n   - Therefore Group Normalization (with number of groups set as 1, aka Instance Normalization) offers a reasonable alternative which is independent of the batch size. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9883456545112319,
        0.9454424044914553
      ],
      "excerpt": "   - While this model was originally developed for tabulur data, there is no hard requirement for that to be the only type of input it accepts. \n   - By passing feature_columns=None and explicitly specifying the input dimensionality of the data (using num_features), we can get a semi-interpretable result from even image data (after flattening it into a long vector). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = TabNetClassifier(feature_list, num_classes, num_layers, ...) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8344164677850785,
        0.8592546603550446,
        0.9870143381979056,
        0.8976470387279425,
        0.9511883218096292,
        0.9318332106280414,
        0.9303503839729487,
        0.8912102415430695,
        0.9630768598496805
      ],
      "excerpt": "The masks of the TabNet can be obtained by using the TabNet class properties \n - feature_selection_masks: Returns a list of 1 or more masks at intermediate decision steps. Number of masks = number of decision steps - 1 \n - aggregate_feature_selection_mask: Returns a single tensor which is the average activation of the masks over that batch of training samples. \nThese masks can be obtained as TabNet.feature_selection_masks. Since the TabNetClassification and TabNetRegression models are composed of TabNet, the masks can be obtained as model.tabnet.* \nNote: Due to autograph, the outputs of the model when using fit() or predict() Keras APIs will  \n generally be graph based Tensors, not EagerTensors. Since the masks are generated inside the Model.call() method, \n it is necessary to force the model to behave in Eager execution mode, not in Graph mode. \nTherefore there are two ways to force the model into eager mode: \n1) Get tensor data samples, and directly call the model using this data as below : \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8312332871032106
      ],
      "excerpt": " load the weights and parameters in this model, and call model.predict(x). This should also force eager execution mode. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127,
        0.9310838543898249
      ],
      "excerpt": "with writer.as_default(): \n    for i, mask in enumerate(model.tabnet.feature_selection_masks): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "agg_mask = model.tabnet.aggregate_feature_selection_mask \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A Tensorflow 2.0 implementation of TabNet.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/titu1994/tf-TabNet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 45,
      "date": "Thu, 23 Dec 2021 01:55:03 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/titu1994/tf-TabNet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "titu1994/tf-TabNet",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": " - For latest release branch\n```bash\n$ pip install --upgrade tabnet\n```\n\n - For Master branch.\n```bash\n$ pip install git+https://github.com/titu1994/tf-TabNet.git\n```\n\nAs Tensorflow can be used with either a CPU or GPU, the package can be installed with the conditional requirements using `[cpu]` or `[gpu]` as follows.\n\n```bash\n$ pip install tabnet[cpu]\n$ pip install tabnet[gpu]\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8539907846656908
      ],
      "excerpt": "<img src=\"https://github.com/titu1994/tf-TabNet/blob/master/images/TabNet.png?raw=true\" height=100% width=100%> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from tabnet import StackedTabNetClassifier \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.812458037792079
      ],
      "excerpt": "2) Or another choice is to build a seperate model (but here you will pass the dynamic=True flag to the model constructor), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8704890082338824
      ],
      "excerpt": "new_model = TabNetClassification(..., dynamic=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8292472456222727
      ],
      "excerpt": "writer = tf.summary.create_file_writer(\"logs/\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9059843738574365,
        0.8233812976473994
      ],
      "excerpt": "        print(\"Saving mask {} of shape {}\".format(i + 1, mask.shape)) \n        tf.summary.image('mask_at_iter_{}'.format(i + 1), step=0, data=mask, max_outputs=1) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8961555578522281
      ],
      "excerpt": "print(\"Saving aggregate mask of shape\", agg_mask.shape) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/titu1994/tf-TabNet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Somshubra Majumdar\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "TabNet for Tensorflow 2.0",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "tf-TabNet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "titu1994",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/titu1994/tf-TabNet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "titu1994",
        "body": "# Changelog\r\n\r\n## Bugfix\r\n- Fixes to independence within Decision Step \r\n- Transform blocks properly initialize normalization",
        "dateCreated": "2020-07-07T23:11:11Z",
        "datePublished": "2020-07-07T23:14:08Z",
        "html_url": "https://github.com/titu1994/tf-TabNet/releases/tag/v0.1.5",
        "name": "TabNet v0.1.5",
        "tag_name": "v0.1.5",
        "tarball_url": "https://api.github.com/repos/titu1994/tf-TabNet/tarball/v0.1.5",
        "url": "https://api.github.com/repos/titu1994/tf-TabNet/releases/28335322",
        "zipball_url": "https://api.github.com/repos/titu1994/tf-TabNet/zipball/v0.1.5"
      },
      {
        "authorType": "User",
        "author_name": "titu1994",
        "body": "# Changelog\r\n## Bugfix\r\n- Corrected the issue where module cannot be imported due to mismatch in __init__.py",
        "dateCreated": "2019-11-28T15:49:33Z",
        "datePublished": "2019-11-28T16:01:08Z",
        "html_url": "https://github.com/titu1994/tf-TabNet/releases/tag/v0.1.4.1",
        "name": "TabNet v0.1.4.1",
        "tag_name": "v0.1.4.1",
        "tarball_url": "https://api.github.com/repos/titu1994/tf-TabNet/tarball/v0.1.4.1",
        "url": "https://api.github.com/repos/titu1994/tf-TabNet/releases/21835947",
        "zipball_url": "https://api.github.com/repos/titu1994/tf-TabNet/zipball/v0.1.4.1"
      },
      {
        "authorType": "User",
        "author_name": "titu1994",
        "body": "# Changelog\r\n\r\n## Additions\r\n\r\n- Addition of `StackedTabNet`, `StackedTabNetClassifier`, `StackedTabNetRegressor`\r\n\r\n## Minor Changes\r\n- Renaming of TabNetClassification -> TabNetClassifier, TabNetRegression -> TabNetRegressor\r\n- Aliases to TabNetClassification and TabNetRegression for backwards compatibility",
        "dateCreated": "2019-11-16T22:50:36Z",
        "datePublished": "2019-11-16T22:57:13Z",
        "html_url": "https://github.com/titu1994/tf-TabNet/releases/tag/v0.1.4",
        "name": "TabNet v0.1.4",
        "tag_name": "v0.1.4",
        "tarball_url": "https://api.github.com/repos/titu1994/tf-TabNet/tarball/v0.1.4",
        "url": "https://api.github.com/repos/titu1994/tf-TabNet/releases/21530313",
        "zipball_url": "https://api.github.com/repos/titu1994/tf-TabNet/zipball/v0.1.4"
      },
      {
        "authorType": "User",
        "author_name": "titu1994",
        "body": "# Changelog\r\n\r\n## Bugfix\r\n- Correct assertion for `batch` and `group` norm types",
        "dateCreated": "2019-10-10T23:30:08Z",
        "datePublished": "2019-10-10T23:31:57Z",
        "html_url": "https://github.com/titu1994/tf-TabNet/releases/tag/v0.1.3",
        "name": "TabNet v0.1.3",
        "tag_name": "v0.1.3",
        "tarball_url": "https://api.github.com/repos/titu1994/tf-TabNet/tarball/v0.1.3",
        "url": "https://api.github.com/repos/titu1994/tf-TabNet/releases/20626838",
        "zipball_url": "https://api.github.com/repos/titu1994/tf-TabNet/zipball/v0.1.3"
      },
      {
        "authorType": "User",
        "author_name": "titu1994",
        "body": "# Changelog\r\n\r\n- Add embedding projection example\r\n\r\n## Bugfix\r\n- Correctly supply number of groups to layers.",
        "dateCreated": "2019-10-09T06:08:15Z",
        "datePublished": "2019-10-09T06:11:41Z",
        "html_url": "https://github.com/titu1994/tf-TabNet/releases/tag/v0.1.2",
        "name": "TabNet v0.1.2",
        "tag_name": "v0.1.2",
        "tarball_url": "https://api.github.com/repos/titu1994/tf-TabNet/tarball/v0.1.2",
        "url": "https://api.github.com/repos/titu1994/tf-TabNet/releases/20568306",
        "zipball_url": "https://api.github.com/repos/titu1994/tf-TabNet/zipball/v0.1.2"
      },
      {
        "authorType": "User",
        "author_name": "titu1994",
        "body": "# Initial Release\r\n\r\n - Support for Tensorflow 2.0 with Autograph tracing",
        "dateCreated": "2019-10-09T02:17:26Z",
        "datePublished": "2019-10-09T02:26:51Z",
        "html_url": "https://github.com/titu1994/tf-TabNet/releases/tag/v0.1.0",
        "name": "TabNet v0.1.0",
        "tag_name": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/titu1994/tf-TabNet/tarball/v0.1.0",
        "url": "https://api.github.com/repos/titu1994/tf-TabNet/releases/20565865",
        "zipball_url": "https://api.github.com/repos/titu1994/tf-TabNet/zipball/v0.1.0"
      }
    ],
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Tensorflow 2.0+ (1.14+ with V2 compat enabled may be sufficient for 1.x)\n- Tensorflow-datasets (Only required for evaluating `train_iris.py`)\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 176,
      "date": "Thu, 23 Dec 2021 01:55:03 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The script `tabnet.py` can be imported to yield either the `TabNet` building block, or the `TabNetClassification` and `TabNetRegression` models, which add appropriate heads for the basic `TabNet` model. If the classification or regression head is to be customized, it is recommended to compose a new model with the `TabNet` as the base of the model.\n\n```python\nfrom tabnet import TabNet, TabNetClassifier\n\nmodel = TabNetClassifier(feature_list, num_classes, ...)\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}