{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1505.04597\n\nQuaternions: http://graphics.stanford.edu/courses/cs348a-17-winter/Papers/quaternion.pdf\n\n"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Lyft SDK: https://github.com/lyft/nuscenes-devkit/tree/master/notebooks\n\nhttps://www.kaggle.com/gzuidhof/reference-model\n\nUnet: https://arxiv.org/abs/1505.04597\n\nQuaternions: http://graphics.stanford.edu/courses/cs348a-17-winter/Papers/quaternion.pdf\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9231761534993898
      ],
      "excerpt": "Radam optimiser and multi-step learning rate scheduler. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tatigabru/kaggle-lyft",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-12-29T15:26:56Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-03-14T19:41:24Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9543041124407403
      ],
      "excerpt": "Unet-like architectures with different encoders where used for segmentation. I tried resnet152, resnet101, se-resnext101, resnet50, and other backbones pretrained on ImageNet. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9455534868933593
      ],
      "excerpt": "Simple heuristics were used to translate 2D bounding boxes into 3D ones, using ground level, meta data and that fact, that boxes are mostly vertical \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9113153713984897,
        0.9730272683822501
      ],
      "excerpt": "A \"classification\" model head was added to the Unet-type architechture (did not had enoupg time to experiment with it more) \nMaps could be also added on top of the image to improve the accuracy \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9565470121557037
      ],
      "excerpt": "Augmentations were implemented with the help of albumentations libruary.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.908925214220865
      ],
      "excerpt": "* Rescale and crops \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8907411137183591
      ],
      "excerpt": "The lists of used augmentations for train and validation are in src/datasets/transforms.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9064405080760966
      ],
      "excerpt": "I tried a two-head model with both classification and segmentation. The runner for it is src/train_seg_class.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8216069465773793
      ],
      "excerpt": "The inference is in src/inference.py file  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.950907460707659,
        0.8619582573054172
      ],
      "excerpt": "* Progressive learning helpedto improve the accuracy of the model \n* Surprisingly, heavy backbones, i.e. resnet152 did not perform that well for this task, same for the Mask-RCNN model from torchvision \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Description of the solution for the Lyft challenge https://www.kaggle.com/c/3d-object-detection-for-autonomous-vehicles",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tatigabru/kaggle-lyft/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Mon, 27 Dec 2021 11:39:38 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/tatigabru/kaggle-lyft/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "tatigabru/kaggle-lyft",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/tatigabru/kaggle-lyft/master/scripts/create_env.sh",
      "https://raw.githubusercontent.com/tatigabru/kaggle-lyft/master/scripts/download_dataset.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Use Python 3.6.\n\nInstall:\n    install anaconda\n\n    create environment (use scripts/bash create_env.sh)\nor\n    pip install -r requirements.txt\nor \n    use Docker    \n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8712658610224394
      ],
      "excerpt": "The folds are in src/folds/ directory. File src/make_folds.py contains code with several examples of splits with various stratification strategies. I used 4 folds split by scenes and stratified by cars. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8750040211243546,
        0.871067562294609
      ],
      "excerpt": "The lists of used augmentations for train and validation are in src/datasets/transforms.py \nThe main unet training script is src/train.py. I used a classical unet model as a baseline and then experiemnted with Unet with different backbones from segmentation_models_pytoch libruary by qubvel. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8121119713509775
      ],
      "excerpt": "The inference is in src/inference.py file  \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/tatigabru/kaggle-lyft/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) [2019] [Tatiana Gabruseva]\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Lyft 3D Object Detection for Autonomous Vehicles",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "kaggle-lyft",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "tatigabru",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tatigabru/kaggle-lyft/blob/master/README.rst",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Mon, 27 Dec 2021 11:39:38 GMT"
    },
    "technique": "GitHub API"
  }
}