{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1704.04861",
      "https://arxiv.org/abs/1905.02244",
      "https://arxiv.org/abs/1904.07399"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{deng2019retinaface,\n  title={RetinaFace: Single-stage Dense Face Localisation in the Wild},\n  author={Deng, Jiankang and Guo, Jia and Yuxiang, Zhou and Jinke Yu and Irene Kotsia and Zafeiriou, Stefanos},\n  booktitle={arxiv},\n  year={2019}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{yang2016wider,\n  Author = {Yang, Shuo and Luo, Ping and Loy, Chen Change and Tang, Xiaoou},\n  Booktitle = {IEEE Conference on Computer Vision and Pattern Recognition (CVPR)},\n  Title = {WIDER FACE: A Face Detection Benchmark},\n  Year = {2016}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{wayne2018lab,\n  author = {Wu, Wayne and Qian, Chen and Yang, Shuo and Wang, Quan and Cai, Yici and Zhou, Qiang},\n  title = {Look at Boundary: A Boundary-Aware Face Alignment Algorithm},\n  booktitle = {CVPR},\n  month = June,\n  year = {2018}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{bulat2017far,\n  title={How far are we from solving the 2D \\&amp; 3D Face Alignment problem? (and a dataset of 230,000 3D facial landmarks)},\n  author={Bulat, Adrian and Tzimiropoulos, Georgios},\n  booktitle={International Conference on Computer Vision},\n  year={2017}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9890131201201999,
        0.9999955246615172,
        0.9960965048981569
      ],
      "excerpt": "  author={Bulat, Adrian and Tzimiropoulos, Georgios}, \n  booktitle={International Conference on Computer Vision}, \n  year={2017} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9999981916393006,
        0.9995605194554658,
        0.9953582834232122,
        0.8955886365383559,
        0.9959021299438506
      ],
      "excerpt": "  author = {Wu, Wayne and Qian, Chen and Yang, Shuo and Wang, Quan and Cai, Yici and Zhou, Qiang}, \n  title = {Look at Boundary: A Boundary-Aware Face Alignment Algorithm}, \n  booktitle = {CVPR}, \n  month = June, \n  year = {2018} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9999709205711148,
        0.9999999995130295,
        0.9815649454650704,
        0.9954488832581693
      ],
      "excerpt": "  Author = {Yang, Shuo and Luo, Ping and Loy, Chen Change and Tang, Xiaoou}, \n  Booktitle = {IEEE Conference on Computer Vision and Pattern Recognition (CVPR)}, \n  Title = {WIDER FACE: A Face Detection Benchmark}, \n  Year = {2016} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.99874514568038,
        0.9997621506499001
      ],
      "excerpt": "MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications by Andrew G. Howard, Menglong Zhu, Bo Chen, Dmitry Kalenichenko, Weijun Wang, Tobias Weyand, Marco Andreetto, Hartwig Adam \nSearching for MobileNetV3 by Andrew Howard, Mark Sandler, Grace Chu, Liang-Chieh Chen, Bo Chen, Mingxing Tan, Weijun Wang, Yukun Zhu, Ruoming Pang, Vijay Vasudevan, Quoc V. Le, Hartwig Adam \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.994315882944322
      ],
      "excerpt": "Adaptive Wing Loss for Robust Face Alignment via Heatmap Regression by Xinyao Wang, Liefeng Bo, Li Fuxin \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9699511706017162,
        0.9999746530919912,
        0.9978847734019899,
        0.9960965048981569
      ],
      "excerpt": "  title={RetinaFace: Single-stage Dense Face Localisation in the Wild}, \n  author={Deng, Jiankang and Guo, Jia and Yuxiang, Zhou and Jinke Yu and Irene Kotsia and Zafeiriou, Stefanos}, \n  booktitle={arxiv}, \n  year={2019} \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ttruty/facial-feature-mouse-control",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-09-13T01:13:19Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-27T23:26:17Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9565372045476696,
        0.9666977796963176,
        0.9035847850291968
      ],
      "excerpt": "Note: This is a tracking library, not a stand-alone avatar puppeteering program. I'm also working on VSeeFace, which allows animating VRM and VSFAvatar 3D models by using OpenSeeFace tracking. VTube Studio uses OpenSeeFace for webcam based tracking to animate Live2D models. \nThis project implements a facial landmark detection model based on MobileNetV3. \nAs Pytorch 1.3 CPU inference speed on Windows is very low, the model was converted to ONNX format. Using onnxruntime it can run at 30 - 60 fps tracking a single face. There are four models, with different speed to tracking quality trade-offs. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8051623351837301
      ],
      "excerpt": "An up to date sample video can be found here, showing the default tracking model's performance under different noise and light levels. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8173187868735649
      ],
      "excerpt": "The general process is as follows: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421168264605666
      ],
      "excerpt": "After doing this for a while, untick the recording box and work on capturing another expression. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9193764395334899,
        0.8552974092143937
      ],
      "excerpt": "You should also get some statistics in the lower part of the component. \nIf there are issues with any expression being detected, keep adding data to it. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9476671001215417,
        0.9666007361048093,
        0.9633438607180973,
        0.9693140309511282,
        0.8482320468903559
      ],
      "excerpt": "Before starting to capture expressions, make some faces and wiggle your eyebrows around, to warm up the feature detection part of the tracker. \nOnce you have a detection model that works decently, when using it take a moment to check all the expressions work as intended and add a little data if not. \nThe tracking seems to be quite robust even with partial occlusion of the face, glasses or bad lighting conditions. \nThe highest quality model is selected with --model 3, the fastest model with the lowest tracking quality is --model 0. \nLower tracking quality mainly means more rigid tracking, making it harder to detect blinking and eyebrow motion. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8319907277443793,
        0.9231851830708556,
        0.9539998453958575,
        0.9226119656712969,
        0.9812083169798291,
        0.9814887733383514,
        0.9704327986298419
      ],
      "excerpt": "When setting the number of faces to track to a higher number than the number of faces actually in view, the face detection model will run every --scan-every frames. This can slow things down, so try to set --faces no higher than the actual number of faces you are tracking. \nFour pretrained face landmark models are included. Using the --model switch, it is possible to select them for tracking. The given fps values are for running the model on a single face video on a single CPU core. Lowering the frame rate would reduce CPU usage by a corresponding degree. \nModel -1: This model is for running on toasters, so it's a very very fast and very low accuracy model. (213fps without gaze tracking) \nModel 0: This is a very fast, low accuracy model. (68fps) \nModel 1: This is a slightly slower model with better accuracy. (59fps) \nModel 2: This is a slower model with good accuracy. (50fps) \nModel 3 (default): This is the slowest and highest accuracy model. (44fps) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.996936545770946,
        0.9618800395160916
      ],
      "excerpt": "The landmark model is quite robust with respect to the size and orientation of the faces, so the custom face detection model gets away with rougher bounding boxes than other approaches. It has a favorable speed to accuracy ratio for the purposes of this project. \nThe builds in the release section of this repository contain a facetracker.exe inside a Binary folder that was built using pyinstaller and contains all required dependencies. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8081458574225184
      ],
      "excerpt": "  title={How far are we from solving the 2D \\&amp; 3D Face Alignment problem? (and a dataset of 230,000 3D facial landmarks)}, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9691824500841739
      ],
      "excerpt": "Additional training has been done on the WFLW dataset after reducing it to 66 points and replacing the contour points and tip of the nose with points predicted by the model trained up to this point. This additional training is done to improve fitting to eyes and eyebrows. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8004570961184779
      ],
      "excerpt": "For the training the gaze and blink detection model, the MPIIGaze dataset was used. Additionally, around 125000 synthetic eyes generated with UnityEyes were used during training. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8134513379520899,
        0.9213850718017956,
        0.9310075393493455
      ],
      "excerpt": "The algorithm is inspired by: \nDesigning Neural Network Architectures for Different Applications: From Facial Landmark Tracking to Lane Departure Warning System by YiTa Wu, Vice President of Engineering, ULSee \nReal-time Human Pose Estimation in the Browser with TensorFlow.js \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8714232225564905,
        0.8614785767750397
      ],
      "excerpt": "For expression detection, LIBSVM is used. \nFace detection is done using a custom heatmap regression based face detection model or RetinaFace. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9861964275233991
      ],
      "excerpt": "RetinaFace detection is based on this implementation. The pretrained model was modified to remove unnecessary landmark detection and converted to ONNX format for a resolution of 640x640. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.908925214220865
      ],
      "excerpt": "@ENiwatori and family. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "An implemention of OpenSee (https://github.com/emilianavt/OpenSeeFace) to use for face mouse controls ",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ttruty/facial-feature-mouse-control/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 13:30:23 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ttruty/facial-feature-mouse-control/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ttruty/facial-feature-mouse-control",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9426769356630551
      ],
      "excerpt": "When distributing it, you should also distribute the Licenses folder along with it to make sure you conform to requirements set forth by some of the third party libraries. Unused models can be removed from redistributed packages without issue. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8295671551432842
      ],
      "excerpt": "To save both the trained model and the captured training data, type in a filename including its full path in the \"Filename\" field and tick the \"Save\" box. To load it, enter the filename and tick the \"Load\" box. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ttruty/facial-feature-mouse-control/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "C#",
      "C++",
      "C",
      "Batchfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "BSD 2-Clause \"Simplified\" License",
      "url": "https://api.github.com/licenses/bsd-2-clause"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Copyright 2017-2019 Jason R. Coombs, Barry Warsaw\\n\\nLicensed under the Apache License, Version 2.0 (the \"License\");\\nyou may not use this file except in compliance with the License.\\nYou may obtain a copy of the License at\\n\\nhttp://www.apache.org/licenses/LICENSE-2.0\\n\\nUnless required by applicable law or agreed to in writing, software\\ndistributed under the License is distributed on an \"AS IS\" BASIS,\\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\nSee the License for the specific language governing permissions and\\nlimitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Overview",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "facial-feature-mouse-control",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ttruty",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ttruty/facial-feature-mouse-control/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Python 3.7\n* ONNX Runtime\n* OpenCV\n* Pillow\n* Numpy\n\nThe required libraries can be installed using pip:\n\n     pip install onnxruntime opencv-python pillow numpy\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Sat, 25 Dec 2021 13:30:23 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "A sample Unity project for VRM based avatar animation can be found [here](https://github.com/emilianavt/OpenSeeFaceSample).\n\nThe face tracking itself is done by the `facetracker.py` Python 3.7 script. It is a commandline program, so you should start it manually from cmd or write a batch file to start it. If you downloaded a release and are on Windows, you can run the `facetracker.exe` inside the `Binary` folder without having Python installed. You can also use the `run.bat` inside the `Binary` folder for a basic demonstration of the tracker.\n\nThe script will perform the tracking on webcam input or video file and send the tracking data over UDP. This design also allows tracking to be done on a separate PC from the one who uses the tracking information. This can be useful to enhance performance and to avoid accidentially revealing camera footage.\n\nThe provided `OpenSee` Unity component can receive these UDP packets and provides the received information through a public field called `trackingData`. The `OpenSeeShowPoints` component can visualize the landmark points of a detected face. It also serves as an example. Please look at it to see how to properly make use of the `OpenSee` component. Further examples are included in the `Examples` folder. The UDP packets are received in a separate thread, so any components using the `trackingData` field of the `OpenSee` component should first copy the field and access this copy, because otherwise the information may get overwritten during processing. This design also means that the field will keep updating, even if the `OpenSee` component is disabled.\n\nRun the python script with `--help` to learn about the possible options you can set.\n\n    python facetracker.py --help\n\nA simple demonstration can be achieved by creating a new scene in Unity, adding an empty game object and both the `OpenSee` and `OpenSeeShowPoints` components to it. While the scene is playing, run the face tracker on a video file:\n\n    python facetracker.py --visualize 3 --pnp-points 1 --max-threads 4 -c video.mp4\n\nThis way the tracking script will output its own tracking visualization while also demonstrating the transmission of tracking data to Unity.\n\nThe included `OpenSeeLauncher` component allows starting the face tracker program from Unity. It is designed to work with the pyinstaller created executable distributed in the binary release bundles. It provides three public API functions:\n\n* `public string[] ListCameras()` returns the names of available cameras. The index of the camera in the array corresponds to its ID for the `cameraIndex` field. Setting the `cameraIndex` to `-1` will disable webcam capturing.\n* `public bool StartTracker()` will start the tracker. If it is already running, it will shut down the running instance and start a new one with the current settings.\n* `public void StopTracker()` will stop the tracker. The tracker is stopped automatically when the application is terminated or the `OpenSeeLauncher` object is destroyed.\n\nThe `OpenSeeLauncher` component uses WinAPI job objects to ensure that the tracker child process is terminated if the application crashes or closes without terminating the tracker process first.\n\nAdditional custom commandline arguments should be added one by one into elements of `commandlineArguments` array. For example `-v 1` should be added as two elements, one element containing `-v` and one containing `1`, not a single one containing both parts.\n\nThe included `OpenSeeIKTarget` component can be used in conjunction with FinalIK or other IK solutions to animate head motion.\n\n",
      "technique": "Header extraction"
    }
  ]
}