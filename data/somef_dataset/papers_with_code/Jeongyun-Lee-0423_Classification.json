{
  "citation": [
    {
      "confidence": [
        0.8769186804620694
      ],
      "excerpt": "Key Point : Network \uad6c\uc870, Transfer Learning \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9846982194102245
      ],
      "excerpt": "Deep Residual Learning for Image Recognition \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.834614754083959
      ],
      "excerpt": "Identity Mappings in Deep Residual Networks \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "ResNet110  v2| 12| 93.15 %|            93.63      %|180 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "num_classes = 10 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8955886365383559
      ],
      "excerpt": ":           |      | 200-epoch | Orig Paper| 200-epoch | Orig Paper| sec/epoch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8444342525991423
      ],
      "excerpt": ": ResNet110 |18(12)| 92.65     | 93.39+-.16| 93.15     | 93.63     | 165(180) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8456806903995955
      ],
      "excerpt": "if version == 1: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if subtract_pixel_mean: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8456806903995955
      ],
      "excerpt": "if epoch &gt; 180: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if conv_first: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "    if batch_normalization: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "    if batch_normalization: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "def resnet_v1(input_shape, depth, num_classes=10): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if (depth - 2) % 6 != 0: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "def resnet_v2(input_shape, depth, num_classes=10): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if (depth - 2) % 9 != 0: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8043073075947367
      ],
      "excerpt": "        if stage == 0: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "        if res_block == 0: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8456806903995955
      ],
      "excerpt": "if version == 2: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8040990240785636
      ],
      "excerpt": "(1) \uc5ec\ub7ec\uac00\uc9c0 Network \ud3c9\uac00 \ud574\ubcf4\uae30 : Googlenet, Nasnet \ub4f1 \ub17c\ubb38 \ubc0f Github Code \ucc38\uace0 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Jeongyun-Lee-0423/Classification",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-23T07:45:31Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-05-13T10:40:06Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8266633603721137
      ],
      "excerpt": "batch_size = 32  #: orig paper trained all networks with batch_size=128 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8811482476935928
      ],
      "excerpt": ": Model parameter \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": ": Normalize data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8100573613878744,
        0.8535411499964382
      ],
      "excerpt": "Learning rate is scheduled to be reduced after 80, 120, 160, 180 epochs. \nCalled automatically every epoch as part of callbacks during training. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8154104550603786
      ],
      "excerpt": "    epoch (int): The number of epochs \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421230500230114
      ],
      "excerpt": "    num_filters (int): Conv2D number of filters \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9968029537584643
      ],
      "excerpt": "Stacks of 2 x (3 x 3) Conv2D-BN-ReLU \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9099430284623684,
        0.9484155754554303
      ],
      "excerpt": "At the beginning of each stage, the feature map size is halved (downsampled) \nby a convolutional layer with strides=2, while the number of filters is \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9023136079000657
      ],
      "excerpt": "Features maps sizes: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9673758155101186
      ],
      "excerpt": "The Number of parameters is approx the same as Table 6 of [a]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.81892906468534
      ],
      "excerpt": "    input_shape (tensor): shape of input image tensor \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8483267776137055
      ],
      "excerpt": "    model (Model): Keras model instance \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8014716303298044
      ],
      "excerpt": "for stack in range(3): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "#: Instantiate model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "return model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9398306189773414
      ],
      "excerpt": "Stacks of (1 x 1)-(3 x 3)-(1 x 1) BN-ReLU-Conv2D or also known as \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8095879419825945,
        0.9099430284623684,
        0.937860248958327
      ],
      "excerpt": "Second and onwards shortcut connection is identity. \nAt the beginning of each stage, the feature map size is halved (downsampled) \nby a convolutional layer with strides=2, while the number of filter maps is \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9023136079000657
      ],
      "excerpt": "Features maps sizes: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.81892906468534
      ],
      "excerpt": "    input_shape (tensor): shape of input image tensor \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8483267776137055
      ],
      "excerpt": "    model (Model): Keras model instance \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8966422214519427
      ],
      "excerpt": "#: v2 performs Conv2D with BN-ReLU on input before splitting into 2 paths \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "#: Instantiate model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "return model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9409617042283427
      ],
      "excerpt": ": Prepare callbacks for model saving and for learning rate adjustment. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "    model.fit(x_train, y_train, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9394449182630016
      ],
      "excerpt": "        #: epsilon for ZCA whitening \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8384600660845443
      ],
      "excerpt": "        #: fraction of images reserved for validation (strictly between 0 and 1) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9362162580090377
      ],
      "excerpt": "#: Fit the model on the batches generated by datagen.flow(). \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Jeongyun-Lee-0423/Classification/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 13:20:00 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Jeongyun-Lee-0423/Classification/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Jeongyun-Lee-0423/Classification",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9717106327039013
      ],
      "excerpt": "version = 1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9219674903017896
      ],
      "excerpt": "if version == 1: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9717106327039013
      ],
      "excerpt": "elif version == 2: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "    activation (string): activation name \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9219674903017896
      ],
      "excerpt": "if version == 2: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8513444981931371
      ],
      "excerpt": "\ucca8\ubd80 \ub41c Keras Cifar10_resnet.py \uc744 Base\ub85c \ud574\uc11c Test Accuracy \uc62c\ub9ac\uae30 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8761813117935804
      ],
      "excerpt": "ResNet56   v2|  6| 93.01 %|            NA         %|100 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674
      ],
      "excerpt": "import keras \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8608503699745261,
        0.8801854956928516,
        0.8801854956928516,
        0.8801854956928516
      ],
      "excerpt": "from keras.layers import AveragePooling2D, Input, Flatten \nfrom keras.optimizers import Adam \nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler \nfrom keras.callbacks import ReduceLROnPlateau \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from keras.regularizers import l2 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9040368155137037,
        0.8811103033681846,
        0.9457175861910134,
        0.8401558704798054
      ],
      "excerpt": "from keras.models import Model \nfrom keras.datasets import cifar10 \nimport numpy as np \nimport os \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "data_augmentation = True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "subtract_pixel_mean = True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8334408339205169
      ],
      "excerpt": ": ResNet56  | 9 (6)| 92.71     | 93.03     | 93.01     | NA        | 90 (100) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8639258741734444
      ],
      "excerpt": "    depth = n * 6 + 2 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8639258741734444,
        0.8626706002823006
      ],
      "excerpt": "    depth = n * 9 + 2 \n: Model name, depth and version \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8973550643270167
      ],
      "excerpt": "    x_train_mean = np.mean(x_train, axis=0) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8952752021235695,
        0.9505213542467355,
        0.9511511668343321,
        0.8952752021235695
      ],
      "excerpt": "print('x_train shape:', x_train.shape) \nprint(x_train.shape[0], 'train samples') \nprint(x_test.shape[0], 'test samples') \nprint('y_train shape:', y_train.shape) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924976426181745,
        0.8924976426181745
      ],
      "excerpt": "y_train = keras.utils.to_categorical(y_train, num_classes) \ny_test = keras.utils.to_categorical(y_test, num_classes) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984,
        0.8594142235991984
      ],
      "excerpt": "                 batch_normalization=True, \n                 conv_first=True): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8163523035541307
      ],
      "excerpt": "    x (tensor): tensor as input to the next layer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.836576240852918
      ],
      "excerpt": "def resnet_v1(input_shape, depth, num_classes=10): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8341177043401105
      ],
      "excerpt": "num_res_blocks = int((depth - 2) / 6) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.836576240852918
      ],
      "excerpt": "def resnet_v2(input_shape, depth, num_classes=10): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8011818777204317
      ],
      "excerpt": "    raise ValueError('depth should be 9n+2 (eg 56 or 110 in [b])') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8341177043401105
      ],
      "excerpt": "num_res_blocks = int((depth - 2) / 9) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "                 conv_first=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "        batch_normalization = True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8842318195854884
      ],
      "excerpt": "    model = resnet_v2(input_shape=input_shape, depth=depth) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8842318195854884
      ],
      "excerpt": "    model = resnet_v1(input_shape=input_shape, depth=depth) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "                             save_best_only=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9028689906312073
      ],
      "excerpt": "lr_reducer = ReduceLROnPlateau(factor=np.sqrt(0.1), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8333533801613426
      ],
      "excerpt": ": Run training, with or without data augmentation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8501590631361642
      ],
      "excerpt": "    print('Not using data augmentation.') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "              shuffle=True, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8326988075830488
      ],
      "excerpt": "    print('Using real-time data augmentation.') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8080481819418269
      ],
      "excerpt": "        #: set each sample mean to 0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "        horizontal_flip=True, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8541491651345257,
        0.820249358723407
      ],
      "excerpt": "print('Test loss:', scores[0]) \nprint('Test accuracy:', scores[1]) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Jeongyun-Lee-0423/Classification/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Cifar10 SOTA \ub530\ub77c\uc7a1\uae30!",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Classification",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Jeongyun-Lee-0423",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Jeongyun-Lee-0423/Classification/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Wed, 29 Dec 2021 13:20:00 GMT"
    },
    "technique": "GitHub API"
  }
}