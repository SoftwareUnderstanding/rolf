{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you find that NAS-Bench-201 helps your research, please consider citing it:\n```\n@inproceedings{dong2020nasbench201,\n  title     = {NAS-Bench-201: Extending the Scope of Reproducible Neural Architecture Search},\n  author    = {Dong, Xuanyi and Yang, Yi},\n  booktitle = {International Conference on Learning Representations (ICLR)},\n  url       = {https://openreview.net/forum?id=HJxyZkBKDr},\n  year      = {2020}\n}\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{dong2020nasbench201,\n  title     = {NAS-Bench-201: Extending the Scope of Reproducible Neural Architecture Search},\n  author    = {Dong, Xuanyi and Yang, Yi},\n  booktitle = {International Conference on Learning Representations (ICLR)},\n  url       = {https://openreview.net/forum?id=HJxyZkBKDr},\n  year      = {2020}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8016179385458738
      ],
      "excerpt": "For the following two things, please use AutoDL-Projects: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8119435174862633
      ],
      "excerpt": "- 10 NAS algorithms evaluated in our paper \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/D-X-Y/NAS-Bench-201",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-04-24T17:58:32Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-27T13:45:52Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8748561622356366,
        0.9616585142321931,
        0.9929153823716297
      ],
      "excerpt": "Since our NAS-BENCH-201 has been extended to NATS-Bench, this repo is deprecated and not maintained. Please use NATS-Bench, which has 5x more architecture information and faster API than NAS-BENCH-201. \nWe propose an algorithm-agnostic NAS benchmark (NAS-Bench-201) with a fixed search space, which provides a unified benchmark for almost any up-to-date NAS algorithms. \nThe design of our search space is inspired by that used in the most popular cell-based searching algorithms, where a cell is represented as a directed acyclic graph. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9521818342059872
      ],
      "excerpt": "For it to be applicable for all NAS algorithms, the search space defined in NAS-Bench-201 includes 4 nodes and 5 associated operation options, which generates 15,625 neural cell candidates in total. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8050944555442197,
        0.9524446676402533
      ],
      "excerpt": "In nas_201_api, we define three classes: NASBench201API, ArchResults, ResultsCount. \nResultsCount maintains all information of a specific trial. One can instantiate ResultsCount and get the info via the following codes (000157-FULL.pth saves all information of all trials of 157-th architecture): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9589462169669974
      ],
      "excerpt": "ArchResults maintains all information of all trials of an architecture. Please see the following usages: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9098705956060731
      ],
      "excerpt": "NASBench201API is the topest level api. Please see the following usages: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9373873922518515
      ],
      "excerpt": "api.show(-1)  #: show info of all architectures \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9200687425211788
      ],
      "excerpt": "weights = api.get_net_param(3, 'cifar10', None) #: Obtaining the weights of all trials for the 3-th architecture on cifar10. It will returns a dict, where the key is the seed and the value is the trained weights. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "NAS-Bench-201 API and Instruction",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[deprecated] The **old** benchmark file of NAS-Bench-201 can be downloaded from [Google Drive](https://drive.google.com/file/d/1SKW0Cu0u8-gb18zDpaAGi0f74UdXeGKs/view?usp=sharing) or [Baidu-Wangpan (code:6u5d)](https://pan.baidu.com/s/1CiaNH6C12zuZf7q-Ilm09w).\n\n[recommended] The **latest** benchmark file of NAS-Bench-201 (`NAS-Bench-201-v1_1-096897.pth`) can be downloaded from [Google Drive](https://drive.google.com/file/d/16Y0UwGisiouVRxW-W5hEtbxmcHw_0hF_/view?usp=sharing). The files for model weight are too large (431G) and I need some time to upload it. Please be patient, thanks for your understanding.\n\nYou can move it to anywhere you want and send its path to our API for initialization.\n- [2020.02.25] APIv1.0/FILEv1.0: [`NAS-Bench-201-v1_0-e61699.pth`](https://drive.google.com/open?id=1SKW0Cu0u8-gb18zDpaAGi0f74UdXeGKs) (2.2G), where `e61699` is the last six digits for this file. It contains all information except for the trained weights of each trial.\n- [2020.02.25] APIv1.0/FILEv1.0: The full data of each architecture can be download from [\nNAS-BENCH-201-4-v1.0-archive.tar](https://drive.google.com/open?id=1X2i-JXaElsnVLuGgM4tP-yNwtsspXgdQ) (about 226GB). This compressed folder has 15625 files containing the the trained weights.\n- [2020.02.25] APIv1.0/FILEv1.0: Checkpoints for 3 runs of each baseline NAS algorithm are provided in [Google Drive](https://drive.google.com/open?id=1eAgLZQAViP3r6dA0_ZOOGG9zPLXhGwXi).\n- [2020.03.09] APIv1.2/FILEv1.0: More robust API with more functions and descriptions\n- [2020.03.16] APIv1.3/FILEv1.1: [`NAS-Bench-201-v1_1-096897.pth`](https://drive.google.com/open?id=16Y0UwGisiouVRxW-W5hEtbxmcHw_0hF_) (4.7G), where `096897` is the last six digits for this file. It contains information of more trials compared to `NAS-Bench-201-v1_0-e61699.pth`, especially all models trained by 12 epochs on all datasets are avaliable.\n- [2020.06.30] APIv2.0: Use abstract class (NASBenchMetaAPI) for APIs of NAS-Bench-x0y.\n- [2020.06.30] FILEv2.0: coming soon!\n\n**We recommend to use `NAS-Bench-201-v1_1-096897.pth`**\n\n\nThe training and evaluation data used in NAS-Bench-201 can be downloaded from [Google Drive](https://drive.google.com/open?id=1L0Lzq8rWpZLPfiQGd6QR8q5xLV88emU7) or [Baidu-Wangpan (code:4fg7)](https://pan.baidu.com/s/1XAzavPKq3zcat1yBA1L2tQ).\nIt is recommended to put these data into `$TORCH_HOME` (`~/.torch/` by default). If you want to generate NAS-Bench-201 or similar NAS datasets or training models by yourself, you need these data.\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/D-X-Y/ResNeXt-DenseNet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 113,
      "date": "Tue, 28 Dec 2021 05:12:22 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/D-X-Y/NAS-Bench-201/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "D-X-Y/NAS-Bench-201",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[deprecated] The **old** benchmark file of NAS-Bench-201 can be downloaded from [Google Drive](https://drive.google.com/file/d/1SKW0Cu0u8-gb18zDpaAGi0f74UdXeGKs/view?usp=sharing) or [Baidu-Wangpan (code:6u5d)](https://pan.baidu.com/s/1CiaNH6C12zuZf7q-Ilm09w).\n\n[recommended] The **latest** benchmark file of NAS-Bench-201 (`NAS-Bench-201-v1_1-096897.pth`) can be downloaded from [Google Drive](https://drive.google.com/file/d/16Y0UwGisiouVRxW-W5hEtbxmcHw_0hF_/view?usp=sharing). The files for model weight are too large (431G) and I need some time to upload it. Please be patient, thanks for your understanding.\n\nYou can move it to anywhere you want and send its path to our API for initialization.\n- [2020.02.25] APIv1.0/FILEv1.0: [`NAS-Bench-201-v1_0-e61699.pth`](https://drive.google.com/open?id=1SKW0Cu0u8-gb18zDpaAGi0f74UdXeGKs) (2.2G), where `e61699` is the last six digits for this file. It contains all information except for the trained weights of each trial.\n- [2020.02.25] APIv1.0/FILEv1.0: The full data of each architecture can be download from [\nNAS-BENCH-201-4-v1.0-archive.tar](https://drive.google.com/open?id=1X2i-JXaElsnVLuGgM4tP-yNwtsspXgdQ) (about 226GB). This compressed folder has 15625 files containing the the trained weights.\n- [2020.02.25] APIv1.0/FILEv1.0: Checkpoints for 3 runs of each baseline NAS algorithm are provided in [Google Drive](https://drive.google.com/open?id=1eAgLZQAViP3r6dA0_ZOOGG9zPLXhGwXi).\n- [2020.03.09] APIv1.2/FILEv1.0: More robust API with more functions and descriptions\n- [2020.03.16] APIv1.3/FILEv1.1: [`NAS-Bench-201-v1_1-096897.pth`](https://drive.google.com/open?id=16Y0UwGisiouVRxW-W5hEtbxmcHw_0hF_) (4.7G), where `096897` is the last six digits for this file. It contains information of more trials compared to `NAS-Bench-201-v1_0-e61699.pth`, especially all models trained by 12 epochs on all datasets are avaliable.\n- [2020.06.30] APIv2.0: Use abstract class (NASBenchMetaAPI) for APIs of NAS-Bench-x0y.\n- [2020.06.30] FILEv2.0: coming soon!\n\n**We recommend to use `NAS-Bench-201-v1_1-096897.pth`**\n\n\nThe training and evaluation data used in NAS-Bench-201 can be downloaded from [Google Drive](https://drive.google.com/open?id=1L0Lzq8rWpZLPfiQGd6QR8q5xLV88emU7) or [Baidu-Wangpan (code:4fg7)](https://pan.baidu.com/s/1XAzavPKq3zcat1yBA1L2tQ).\nIt is recommended to put these data into `$TORCH_HOME` (`~/.torch/` by default). If you want to generate NAS-Bench-201 or similar NAS datasets or training models by yourself, you need these data.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9145280799466654
      ],
      "excerpt": "You can simply type pip install nas-bench-201 to install our api. Please see source codes of nas-bench-201 module in this repo. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from nas_201_api import ResultsCount \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8102780086823556,
        0.9404735415207407,
        0.9210340145077388,
        0.8804281786325113,
        0.9177193529304185,
        0.854835653549815,
        0.9253259765123036
      ],
      "excerpt": "result = ResultsCount.create_from_state_dict( odata ) \nprint(result) #: print it \nprint(result.get_train())   #: print the final training loss/accuracy/[optional:time-cost-of-a-training-epoch] \nprint(result.get_train(11)) #: print the training info of the 11-th epoch \nprint(result.get_eval('x-valid'))     #: print the final evaluation info on the validation set \nprint(result.get_eval('x-valid', 11)) #: print the info on the validation set of the 11-th epoch \nprint(result.get_latency())           #: print the evaluation latency [in batch] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from nas_201_api import ArchResults \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8291200234789929,
        0.9285507904312954,
        0.8813958711458594,
        0.8474760658886951,
        0.8575831626855879
      ],
      "excerpt": "print(archRes.arch_idx_str())      #: print the index of this architecture  \nprint(archRes.get_dataset_names()) #: print the supported training data \nprint(archRes.get_compute_costs('cifar10-valid')) #: print all computational info when training on cifar10-valid  \nprint(archRes.get_metrics('cifar10-valid', 'x-valid', None, False)) #: print the average loss/accuracy/time on all trials \nprint(archRes.get_metrics('cifar10-valid', 'x-valid', None,  True)) #: print loss/accuracy/time of a randomly selected trial \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.800339646347791
      ],
      "excerpt": "api.get_more_info(112, 'cifar10', None, hp='200', is_random=True) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/D-X-Y/NAS-Bench-201/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) since 2019 Xuanyi Dong (GitHub: https://github.com/D-X-Y)\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "NAS-BENCH-201 has been extended to [NATS-Bench](https://xuanyidong.com/assets/projects/NATS-Bench)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "NAS-Bench-201",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "D-X-Y",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/D-X-Y/NAS-Bench-201/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 575,
      "date": "Tue, 28 Dec 2021 05:12:22 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "nas",
      "automl",
      "dataset",
      "pytorch",
      "nas-bench-201"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**More usage can be found in [our test codes](https://github.com/D-X-Y/AutoDL-Projects/blob/master/exps/NAS-Bench-201/test-nas-api.py)**.\n\n1. Creating an API instance from a file:\n```\nfrom nas_201_api import NASBench201API as API\napi = API('$path_to_meta_nas_bench_file')\n#: Create an API without the verbose log\napi = API('NAS-Bench-201-v1_1-096897.pth', verbose=False)\n#: The default path for benchmark file is '{:}/{:}'.format(os.environ['TORCH_HOME'], 'NAS-Bench-201-v1_1-096897.pth')\napi = API(None)\n```\n\n2. Show the number of architectures `len(api)` and each architecture `api[i]`:\n```\nnum = len(api)\nfor i, arch_str in enumerate(api):\n  print ('{:5d}/{:5d} : {:}'.format(i, len(api), arch_str))\n```\n\n3. Show the results of all trials for a single architecture:\n```\n#: show all information for a specific architecture\napi.show(1)\napi.show(2)\n\n#: show the mean loss and accuracy of an architecture\ninfo = api.query_meta_info_by_index(1)  #: This is an instance of `ArchResults`\nres_metrics = info.get_metrics('cifar10', 'train') #: This is a dict with metric names as keys\ncost_metrics = info.get_comput_costs('cifar100') #: This is a dict with metric names as keys, e.g., flops, params, latency\n\n#: get the detailed information\nresults = api.query_by_index(1, 'cifar100') #: a dict of all trials for 1st net on cifar100, where the key is the seed\nprint ('There are {:} trials for this architecture [{:}] on cifar100'.format(len(results), api[1]))\nfor seed, result in results.items():\n  print ('Latency : {:}'.format(result.get_latency()))\n  print ('Train Info : {:}'.format(result.get_train()))\n  print ('Valid Info : {:}'.format(result.get_eval('x-valid')))\n  print ('Test  Info : {:}'.format(result.get_eval('x-test')))\n  #: for the metric after a specific epoch\n  print ('Train Info [10-th epoch] : {:}'.format(result.get_train(10)))\n```\n\n4. Query the index of an architecture by string\n```\nindex = api.query_index_by_arch('|nor_conv_3x3~0|+|nor_conv_3x3~0|avg_pool_3x3~1|+|skip_connect~0|nor_conv_3x3~1|skip_connect~2|')\napi.show(index)\n```\nThis string `|nor_conv_3x3~0|+|nor_conv_3x3~0|avg_pool_3x3~1|+|skip_connect~0|nor_conv_3x3~1|skip_connect~2|` means:\n```\nnode-0: the input tensor\nnode-1: conv-3x3( node-0 )\nnode-2: conv-3x3( node-0 ) + avg-pool-3x3( node-1 )\nnode-3: skip-connect( node-0 ) + conv-3x3( node-1 ) + skip-connect( node-2 )\n```\n\n5. Create the network from api:\n```\nconfig = api.get_net_config(123, 'cifar10') #: obtain the network configuration for the 123-th architecture on the CIFAR-10 dataset\nfrom models import get_cell_based_tiny_net #: this module is in AutoDL-Projects/lib/models\nnetwork = get_cell_based_tiny_net(config) #: create the network from configurration\nprint(network) #: show the structure of this architecture\n```\nIf you want to load the trained weights of this created network, you need to use `api.get_net_param(123, ...)` to obtain the weights and then load it to the network.\n\n6. `api.get_more_info(...)` can return the loss / accuracy / time on training / validation / test sets, which is very helpful. For more details, please look at the comments in the get_more_info function.\n\n7. For other usages, please see `lib/nas_201_api/api.py`. We provide some usage information in the comments for the corresponding functions. If what you want is not provided, please feel free to open an issue for discussion, and I am happy to answer any questions regarding NAS-Bench-201.\n\n\n",
      "technique": "Header extraction"
    }
  ]
}