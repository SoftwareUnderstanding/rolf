{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ChristophReich1996/Semantic_Pyramid_for_Image_Generation",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-26T20:50:38Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-20T08:52:56Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8726105168786934,
        0.845441179645491
      ],
      "excerpt": "Unofficel PyTorch implementation of the paper Semantic Pyramid for Image Generation by Assaf Shocher, Yossi Gandelsman et al. \nSource. Proposed results of the paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8532034953486244
      ],
      "excerpt": "The full architecture consists of three parts. First, the object recognition model which is implemented as a \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9966474696551649,
        0.980457386985506
      ],
      "excerpt": "of the SAGAN. \nAnd thirdly, the residual discriminator network which is also based on the  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8654988052304795,
        0.9729897591261946
      ],
      "excerpt": "The original VGG-16 provided by the MIT CV group is trained on a resolution \nof 224 x 224. This implementation, however, utilizes the native resolution (256 x 256) of the  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9106132697884548
      ],
      "excerpt": "training script, which is based on the  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9929105264864698,
        0.9345604764659068
      ],
      "excerpt": "places365 repository. Afterwards, the caffe model gets converted with the \nhelp of the caffemodel2pytorch repo created by  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.820789606631692,
        0.9334755654363622,
        0.9778696393377678
      ],
      "excerpt": "With limited compute budget I was not able to reproduce the results form the paper. The plot, shown below, was after approximately 24h of training on a single Nvidia Tesla V100. After 24h the whole performance dropped again. However, due to the limited computing power, I was only able to train 48h. \nThe VGG-16 network is fine-tuned on the higher resolution images for three epochs. In contrast to the original training  \nscript the Adam optimizer is utilized. Validation results before and after the fine-tuning on the full resolution is  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "PyTorch reimplementation of the paper: \"Semantic Pyramid for Image Generation\" [CVPR 2020].",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ChristophReich1996/Semantic_Pyramid_for_Image_Generation/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Mon, 27 Dec 2021 06:01:52 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ChristophReich1996/Semantic_Pyramid_for_Image_Generation/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ChristophReich1996/Semantic_Pyramid_for_Image_Generation",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/ChristophReich1996/Semantic_Pyramid_for_Image_Generation/master/download_pretrained_vgg16.sh",
      "https://raw.githubusercontent.com/ChristophReich1996/Semantic_Pyramid_for_Image_Generation/master/download_places365.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9209601571951397,
        0.9023697225149864
      ],
      "excerpt": "run the following script \nsh download_places365.sh \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8515997711292302
      ],
      "excerpt": "following command. The downloaded model can be fine-tuned on the higher resolution by using the  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9023697225149864
      ],
      "excerpt": "sh download_pretrained_vgg16.sh \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ChristophReich1996/Semantic_Pyramid_for_Image_Generation/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2021 Christoph Reich\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Semantic Pyramid for Image Generation",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Semantic_Pyramid_for_Image_Generation",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ChristophReich1996",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ChristophReich1996/Semantic_Pyramid_for_Image_Generation/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 44,
      "date": "Mon, 27 Dec 2021 06:01:52 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "generative-adversarial-network",
      "gan",
      "adversarial-learning",
      "semantic-pyramid",
      "image-generation",
      "pytorch",
      "deep-learning",
      "deep-neural-networks",
      "machine-learning",
      "convolutional-neural-networks",
      "cnn",
      "semantic-pyramid-image-generation"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To train or test the GAN simply run the main script `python main.py`. This main script takes multiple arguments.\n\nArgument | Default value | Info\n--- | --- | ---\n`--train` | False | Flag to perform training\n`--test` | False | Flag to perform testing\n`--batch_size` | 20 | Batch size to be utilized\n`--lr` | 1e-04 | Learning rate to use\n`--channel_factor` | 1 | Channel factor adopts the number of channels utilized in the U-Net\n`--device` | 'cuda' | Device to use (cuda recommended)\n`--gpus_to_use` | '0' | Indexes of the GPUs to be use\n`--use_data_parallel` | False | Use multiple GPUs\n`--load_generator_network` | None | Path of the generator network to be loaded (.pt)\n`--load_discriminator_network` | None | Path of the discriminator network to be loaded (.pt)\n`--load_pretrained_vgg16` | 'pre_trained_models/vgg_places_365.pt' | Path of the pre-trained VGG 16 to be loaded (.pt)\n`--path_to_places365` | 'places365_standard' | Path to places365 dataset\n`--epochs` | 50 | Epochs to perform while training\n\nWhile training logs and models gets save automatically to the `saved_data` file. Inference plots also gets saved in the\nsame folder.\n\n",
      "technique": "Header extraction"
    }
  ]
}