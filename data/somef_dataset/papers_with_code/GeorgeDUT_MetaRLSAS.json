{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1703.03400",
      "https://arxiv.org/abs/1611.02779",
      "https://arxiv.org/abs/1703.03400"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you want to cite this implementation of MetaRLSAS:\n```\n@inproceedings{mingyue21ameta,\n  author    = {Mingyue Zhang and Jialong Li and Haiyan Zhao and Kenji Tei and Shinichi Honiden and Zhi Jin},\n  title     = {A Meta Reinforcement Learning-based Approach for Online Adaptation},\n  booktitle = {{IEEE} International Conference on Autonomic Computing and Self-Organizing\n               Systems, {ACSOS} 2021},\n  publisher = {{IEEE}},\n  year      = {2021}\n}\n```",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{mingyue21ameta,\n  author    = {Mingyue Zhang and Jialong Li and Haiyan Zhao and Kenji Tei and Shinichi Honiden and Zhi Jin},\n  title     = {A Meta Reinforcement Learning-based Approach for Online Adaptation},\n  booktitle = {{IEEE} International Conference on Autonomic Computing and Self-Organizing\n               Systems, {ACSOS} 2021},\n  publisher = {{IEEE}},\n  year      = {2021}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9999988425933087
      ],
      "excerpt": "Networks. International Conference on Machine Learning (ICML), 2017 [ArXiv] \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/GeorgeDUT/MetaRLSAS",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-12-14T02:34:09Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-07-26T10:09:13Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9754364665462592,
        0.9008777501646411,
        0.8776294401826886
      ],
      "excerpt": "This project is using Meta Reinforcement learning to enhance the adaptability of self-learning adaptive system (SLAS). \nThe process of optimizing and the adaptation process from meta parameters to optimal parameters: \n(This is adapted from MAML paper.) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9779826564585153
      ],
      "excerpt": "Our basic algorithm is based on MAML: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9967615089244783,
        0.9879294580564133
      ],
      "excerpt": "MAML project is, for the most part, a reproduction of the original implementation cbfinn/maml_rl in Pytorch. These experiments are based on the paper \nChelsea Finn, Pieter Abbeel, and Sergey Levine. Model-Agnostic Meta-Learning for Fast Adaptation of Deep \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/GeorgeDUT/MetaRLSAS/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 06:50:56 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/GeorgeDUT/MetaRLSAS/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "GeorgeDUT/MetaRLSAS",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/GeorgeDUT/MetaRLSAS/main/job_sub/job_meta.sh"
    ],
    "technique": "File Exploration"
  },
  "invocation": [
    {
      "confidence": [
        0.8613780738037381,
        0.9030421323620518
      ],
      "excerpt": "You can use the train.py script in order to run reinforcement learning experiments with MAML. Note that by default, logs are available in train.py but are not saved (eg. the returns during meta-training). For example, to run the script on mdp-complex: \npython train.py --config configs/maml/mdp/mdp-complex.yaml --output-folder mdp-complex/ --seed 2 --num-workers 4 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8585946952490516,
        0.8392635168983295
      ],
      "excerpt": "python test-my-new.py --config mdp-complex/config.json --policy mdp-complex/policy.th --output mdp-complex/results.npz --meta-batch-size 1 --num-batches 2 --num-workers 2 \nGrad_Steps = 50 in test-my-new.py is the step you want to print. You can set it to any number. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/GeorgeDUT/MetaRLSAS/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 Tristan Deleu\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Meta_RL_For_SAS",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "MetaRLSAS",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "GeorgeDUT",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/GeorgeDUT/MetaRLSAS/blob/main/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": " - Python 3.5 or above\n - PyTorch 1.3\n - Gym 0.15\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Wed, 29 Dec 2021 06:50:56 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To avoid any conflict with your existing Python setup, and to keep this project self-contained, it is suggested to work in a virtual environment with [`virtualenv`](http://docs.python-guide.org/en/latest/dev/virtualenvs/). To install `virtualenv`:\n```\npip install --upgrade virtualenv\n```\nCreate a virtual environment, activate it and install the requirements in [`requirements.txt`](requirements.txt).\n```\nvirtualenv venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "1) maml_rl/envs/__init__.py\n\tregister your environment:\n\t\n\tregister(\n    'TabularMDP-v1',\n    entry_point='maml_rl.envs.mdp-my:TabularMDPEnv',\n    kwargs={'num_states': 5, 'num_actions': 3},\n    max_episode_steps=10\n)\n\n2) basic settings:\n/configs/maml/mdp/mdp-my.yaml\n\n3) change the environment:\n/maml_rl/envs/mdp-my.py\n\n4) train & test\n\n",
      "technique": "Header extraction"
    }
  ]
}