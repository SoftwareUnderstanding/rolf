{
  "citation": [
    {
      "confidence": [
        0.9896973786104383
      ],
      "excerpt": "Based on https://deepmind.com/blog/wavenet-generative-model-raw-audio/ and https://arxiv.org/pdf/1609.03499.pdf. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/imdatsolak/wavenet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-02-24T18:34:31Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-03-05T23:26:23Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9938645872321423,
        0.9589284513985528
      ],
      "excerpt": "This is the based on Keras WaveNet implementation for Keras 2 and Tensorflow. \nI'm currently working on making the single mlwavenet.py multi-GPU-capable using Horovod, but this has not been fully tested yet, but it seems to work, though there is currently no support for predicting with multiple GPUs. I may add it over time... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8723356856371769
      ],
      "excerpt": "The -mca btl_tcp_if_exclude eno1 just means that OpenMPI should not listen on that interface as that one is not configured on my machine... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8514087356954101
      ],
      "excerpt": "Please check out Horovod for details \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.954096959638291,
        0.8833352093864953
      ],
      "excerpt": "sample_temperature: None or float. Controls the sampling temperature. 1.0 for the original distribution, < 1.0 for less exploitation, > 1.0 for more exploration. \nsample_seed: int: Controls the seed for the sampling procedure. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.883112384530523,
        0.940556703362697
      ],
      "excerpt": "[ ] Decaying soft targets: the stdev of the gaussian kernel should slowly decay. \nThe Wavenet model is quite expensive to train and sample from. We can however trade computation cost with accuracy and fidility by lowering the sampling rate, amount of stacks and the amount of channels per layer. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Keras2-based implementation of WaveNet.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/imdatsolak/wavenet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Fri, 24 Dec 2021 15:28:49 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/imdatsolak/wavenet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "imdatsolak/wavenet",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Activate a new python2 virtualenv (recommended):\n\n    pip install virtualenv\n    mkdir ~/virtualenvs && cd ~/virtualenvs\n    virtualenv wavenet\n    source wavenet/bin/activate\n\nClone and install requirements.\n\n    cd ~\n    git clone https://github.com/imdatsolak/keras2-wavenet.git\n    cd wavenet\n    pip install -r requirements.txt\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9921046603855541
      ],
      "excerpt": "I use the following command to train on my DUAL-GPU (NVidia GeForce 1080 Ti) using Horovod & OpenMPI: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8776112477660718
      ],
      "excerpt": "You can, at any time, stop it using CTRL-C. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8843413925377184
      ],
      "excerpt": "/usr/local/bin/mpirun -np 2 -H localhost:2 -bind-to none -map-by slot -x NCCL_DEBUG=INFO -x LD_LIBRARY_PATH -mca btl_tcp_if_exclude eno1 python mlwavenet.py -c multi_gpu_settings.ini -m \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8352357502782369
      ],
      "excerpt": "Once the first model checkpoint is created, you can start sampling. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8418676624792922
      ],
      "excerpt": "The latest model checkpoint will be retrieved and used to sample. The sample will be streamed to [model_dir]/samples, you can start listening when the first sample is generated. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8639484533561375
      ],
      "excerpt": "initial_input: string: Path to a wav file, for which the first fragment_length samples are used as initial input. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8676755882136681
      ],
      "excerpt": "For training, you now need to create a configuration-file. The file is the Windows(r) .ini file-format. An example is provided. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9195056250278583
      ],
      "excerpt": "$ python mlwavenet.py -c settings.ini -C train \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8505603982434533
      ],
      "excerpt": "Create a new data directory with a train and test folder in it. All wave files in these folders will be used as data. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/imdatsolak/wavenet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "BSD 3-Clause \"New\" or \"Revised\" License",
      "url": "https://api.github.com/licenses/bsd-3-clause"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "WaveNet implementation in Keras2",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "wavenet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "imdatsolak",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/imdatsolak/wavenet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This implementation does not support python3 as of now.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Fri, 24 Dec 2021 15:28:49 GMT"
    },
    "technique": "GitHub API"
  }
}