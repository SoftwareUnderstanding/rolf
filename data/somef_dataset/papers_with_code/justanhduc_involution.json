{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2103.06255"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[Official code](https://github.com/d-li14/involution)\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/justanhduc/involution",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-05-11T03:36:31Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-06-17T05:44:00Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8846614337864036,
        0.9552458828855036,
        0.8459285014010872
      ],
      "excerpt": "A native CUDA/C++ Pytorch implementation with Python wrapper of Involution: Inverting the Inherence of Convolution for Visual Recognition. \nThis implementation is the same as the official version as all the CUDA codes are taken from there. \nMinimal C++ wrapper is written. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9066632587932139,
        0.8103019302673169
      ],
      "excerpt": "This implementation supports dilation with same padding. \nThis implementation supports Half floating point (experimental). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A Pytorch CUDA/C++ JIT implementation with Python wrapper of Involution",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/justanhduc/involution/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 28 Dec 2021 14:29:33 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/justanhduc/involution/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "justanhduc/involution",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "cd involution \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9240249448832072
      ],
      "excerpt": "pytest test.py \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/justanhduc/involution/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Cuda",
      "Python",
      "C++"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Involution",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "involution",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "justanhduc",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/justanhduc/involution/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Tue, 28 Dec 2021 14:29:33 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "deep-learning",
      "convolutional-neural-networks",
      "pytorch"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Firstly, set a `CUDA_HOME` variable to point to your CUDA root.\n\n```\nexport CUDA_HOME=/path/to/your/CUDA/root\n```\n\nThen, simply clone this repo and copy the package to your code base. \nThen just import it from the package\n\n```\nfrom involution import Involution\nimport torch as T\n\ninv = Involution(16, 3, 1, dilation=1).cuda()\ninput = T.randn(8, 16, 64, 64).cuda()\nprint(inv(input).shape)\n```\n\nIn the first import time, it will compile the package so it will take some time.\nFrom the second time, the import time will be normal.\n\n",
      "technique": "Header extraction"
    }
  ]
}