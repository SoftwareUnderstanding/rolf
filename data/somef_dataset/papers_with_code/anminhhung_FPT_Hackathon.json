{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1505.04597",
      "https://arxiv.org/abs/1505.04597](https://arxiv.org/abs/1505.04597",
      "https://arxiv.org/abs/1505.04597"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/anminhhung/Unet_pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-04-24T04:49:09Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-05-10T02:24:50Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9148786897247875,
        0.9890995580280895,
        0.9882093941989021
      ],
      "excerpt": "Customized implementation of the U-Net in PyTorch for Kaggle's Carvana Image Masking Challenge from high definition images. \nThis model was trained from scratch with 5000 images (no data augmentation) and scored a dice coefficient of 0.988423 (511 out of 735) on over 100k test images. This score could be improved with more training, data augmentation, fine tuning, playing with CRF post-processing, and applying more weights on the edges of the masks. \nThe Carvana data is available on the Kaggle website. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8912479523117036
      ],
      "excerpt": "To predict a single image and save it: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8777093782628199
      ],
      "excerpt": "                        Specify the file in which the model is stored \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9858551910253487
      ],
      "excerpt": "                        Percent of the data that is used as validation (0-100) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8534508396296031
      ],
      "excerpt": "By default, thescale` is 0.5, so if you wish to obtain better results (but use more memory), set it to 1. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9032012449298865
      ],
      "excerpt": "A pretrained model is available for the Carvana dataset. It can also be loaded from torch.hub: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.853283551521345
      ],
      "excerpt": "Predicting images of 1918*1280 takes 1.5GB of memory. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/anminhhung/FPT_Hackathon/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 28 Dec 2021 13:04:10 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/anminhhung/Unet_pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "anminhhung/Unet_pytorch",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.9519235345247221,
        0.8051977533852038,
        0.9421884997062737
      ],
      "excerpt": "python predict.py -i image.jpg -o output.jpg \nTo predict a multiple images and show them without saving them: \npython predict.py -i image1.jpg image2.jpg --viz --no-save \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9350350788181568,
        0.9334915463098298,
        0.8252824095916526
      ],
      "excerpt": "python predict.py -h \nusage: predict.py [-h] [--model FILE] --input INPUT [INPUT ...] \n                  [--output INPUT [INPUT ...]] [--viz] [--no-save] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8833495519827586
      ],
      "excerpt": "  --model FILE, -m FILE \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8464750206143556
      ],
      "excerpt": "                        (default: MODEL.pth) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8094882025841187
      ],
      "excerpt": "                        Scale factor for the input images (default: 0.5) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785,
        0.9201419409838065
      ],
      "excerpt": "python train.py -h \nusage: train.py [-h] [-e E] [-b [B]] [-l [LR]] [-f LOAD] [-s SCALE] [-v VAL] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8364999464467299
      ],
      "excerpt": "  -f LOAD, --load LOAD  Load model from a .pth file (default: False) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8003536380381787
      ],
      "excerpt": "                        Downscaling factor of the images (default: 0.5) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.827803161698685
      ],
      "excerpt": "                        (default: 15.0) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/anminhhung/Unet_pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "UNet: semantic segmentation with PyTorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Unet_pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "anminhhung",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/anminhhung/Unet_pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 28 Dec 2021 13:04:10 GMT"
    },
    "technique": "GitHub API"
  },
  "support": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Personalized support for issues with this repository, or integrating with your own dataset, available on [xs:code](https://xscode.com/milesial/Pytorch-UNet).\n\n\n---\n\nOriginal paper by Olaf Ronneberger, Philipp Fischer, Thomas Brox: [https://arxiv.org/abs/1505.04597](https://arxiv.org/abs/1505.04597)\n\n![network architecture](https://i.imgur.com/jeDVpqF.png)\n",
      "technique": "Header extraction"
    }
  ],
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**Note : Use Python 3.6 or newer**\n",
      "technique": "Header extraction"
    }
  ]
}