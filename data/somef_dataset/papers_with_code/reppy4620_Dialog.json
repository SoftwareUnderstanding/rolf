{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1811.08100",
      "https://arxiv.org/abs/1810.04805",
      "https://arxiv.org/abs/1706.03762"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.991797664999877
      ],
      "excerpt": "Please click following link. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/reppy4620/Dialog",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-09-12T04:05:29Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-23T08:12:14Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9946204817097358,
        0.9314035074397568
      ],
      "excerpt": "Dialog is japanese chatbot project. \nUsed architecture in this project is EncoderDecoder model that has BERT Encoder and Transformer Decoder. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8043090770567952
      ],
      "excerpt": "Note that in training notebook, download command is described in the end of note, but it hasn't tested yet. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "PreTrained Model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9607570040843812
      ],
      "excerpt": "Authors belong to the Nara Institute of Science and Technology a.k.a NAIST. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8596937351579075
      ],
      "excerpt": "I hope that this method can help me to solve that problem. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8259031655364566
      ],
      "excerpt": "in google drive. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490037945672047,
        0.8490037945672047
      ],
      "excerpt": "The Annotated Transformer \nThe Illustrated Transformer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A PyTorch Implementation of japanese chatbot using BERT and Transformer's decoder",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/reppy4620/Dialog/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 22,
      "date": "Fri, 24 Dec 2021 00:45:46 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/reppy4620/Dialog/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "reppy4620/Dialog",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/reppy4620/Dialog/master/notebooks/Dialog_Evaluation.ipynb",
      "https://raw.githubusercontent.com/reppy4620/Dialog/master/notebooks/Dialog_Training.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Download training data from [google drive](https://drive.google.com/open?id=1wYrUQHb4Wg2T8ZvCleIBcGu7PTaFw6VO)  \n- train_data.pkl\n\n2. Change path in config.py\n```python\n#: in config.py, line 24\n#: default value is './data'\ndata_dir = 'path/to/dir_contains_training_data'\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Needed packages are\n\n- pytorch\n- transformers\n- tqdm\n- MeCab(To use transformers.tokenization_bert_japanese.BertJapaneseTokenizer)\n- neologdn\n- emoji\n\nIf occur errors because of the packages, please install missing packages.\n\nExample if you use conda.\n\n```bash\n#: create new environment\n$ conda create -n dialog python=3.7\n\n#: activate new environment\n$ activate dialog\n\n#: install pytorch\n$ conda install pytorch torchvision cudatoolkit={YOUR_VERSION} -c pytorch\n\n#: install rest of depending package except for MeCab\n$ pip install transformers tqdm neologdn emoji\n\n#:#:#:#:#: Already installed MeCab #:#:#:#:#:\n#:#:#: Ubuntu #:#:#:\n$ pip install mecab-python3\n\n#:#:#: Windows #:#:#:\n#: check that \"path/to/MeCab/bin\" are added to system envrionment variable\n$ pip install mecab-python-windows\n\n#:#:#:#:#: Not Installed MeCab #:#:#:#:#:\n#: install Mecab in accordance with your OS.\n#: method described in below is one of the way,\n#: so you can use your way if you'll be able to use transformers.BertJapaneseTokenizer.\n#:#:#: Ubuntu #:#:#:\n#: if you've not installed MeCab, please execute following comannds.\n$ apt install aptitude\n$ aptitude install mecab libmecab-dev mecab-ipadic-utf8 git make curl xz-utils file -y\n$ pip install mecab-python3\n\n#:#:#: Windows #:#:#:\n#: Install MeCab from https://github.com/ikegami-yukino/mecab/releases/tag/v0.996\n#: and add \"path/to/Mecab/bin\" to system environment variable.\n#: then run the following command.\n$ pip install mecab-python-windows\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9967226375118565
      ],
      "excerpt": "Install Packages \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8377099944189889,
        0.8589534893990137
      ],
      "excerpt": "Therefore if you run training notebook and cannot download a trained weight file, please download manually. \nTrain:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8282633617843045
      ],
      "excerpt": "PreTrained Model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8603301208926961,
        0.8292213183891166
      ],
      "excerpt": "Pretrained model : ckpt.pth \nTraining data : training_data.txt or train_data.pkl \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9333384803827206
      ],
      "excerpt": "$ python main.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8455161356199525
      ],
      "excerpt": "Change a path of pre-trained model in config.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8996805654936282,
        0.8596897822714498
      ],
      "excerpt": ": in config.py, line 24 \n: default value is './data' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8135796280916443,
        0.9246227682586091
      ],
      "excerpt": "- run eval.pyshell script \n$ python run_eval.py \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/reppy4620/Dialog/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 reppy\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Dialog",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Dialog",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "reppy4620",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/reppy4620/Dialog/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 55,
      "date": "Fri, 24 Dec 2021 00:45:46 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "python",
      "pytorch",
      "chatbot",
      "dialogue-generation"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[blog](https://jweb.asia/26-it/ai/51-bert-chatbot.html) written in japanese\n\n@ycat3 created text-to-speech example by using this project for sentence generation and Parallel Wavenet for speech synthesis.\nSource code isn't shared, but you can reproduce it if you leverage Parallel Wavenet.\nThat blog has some audio samples, so please try listening to it.\n\nI'd like to create app allowing us to talk with AI in voice by using speech synthesis and speech recognition if I have a lot of free time, but now I can't do it due to preparing for exams...\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "If you wanna get more conversation data, please use get_tweet.py\n\nNote that you have to need to change consumer_key and access_token\nin order to use this script.\n\nAnd then, execute following commands.\n```bash\n#: usage\n$ python get_tweet.py \"query\" \"Num of continuous utterances\"\n\n#: Example\n#: This command works until occurs errors \n#: and makes a file named \"tweet_data_\u79c1\u306f_5.txt\" in \"./data\"\n$ python get_tweet.py \u79c1\u306f 5\n```\nIf you execute the Example command, script start to collect consecutive 5 sentences if last sentence contains \"\u79c1\u306f\".\n\nHowever you set 3 or more number to \"continuous utterances\", make_training_data.py automatically create pair of utterances.\n\nThen execute following command.\n```bash\n$ python make_training_data.py\n```\nThis script makes training data using './data/tweet_data_*.txt', just like the name.\n\n\n",
      "technique": "Header extraction"
    }
  ]
}