{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1606.00915",
      "https://arxiv.org/abs/1606.00915",
      "https://arxiv.org/abs/1606.00915",
      "https://arxiv.org/abs/1606.00915",
      "https://arxiv.org/abs/1606.00915",
      "https://arxiv.org/abs/1606.00915",
      "https://arxiv.org/abs/1612.01105",
      "https://arxiv.org/abs/1612.01105",
      "https://arxiv.org/abs/1703.08580"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{pakhomov2017deep,\n  title={Deep Residual Learning for Instrument Segmentation in Robotic Surgery},\n  author={Pakhomov, Daniil and Premachandran, Vittal and Allan, Max and Azizian, Mahdi and Navab, Nassir},\n  journal={arXiv preprint arXiv:1703.08580},\n  year={2017}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9995545558370035,
        0.979002424639603,
        0.9975788273939303,
        0.9999537354568557,
        0.9960965048981569
      ],
      "excerpt": "If you used the code for your research, please, cite the paper: \n  title={Deep Residual Learning for Instrument Segmentation in Robotic Surgery}, \n  author={Pakhomov, Daniil and Premachandran, Vittal and Allan, Max and Azizian, Mahdi and Navab, Nassir}, \n  journal={arXiv preprint arXiv:1703.08580}, \n  year={2017} \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/warmspringwinds/pytorch-segmentation-detection",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-06-10T16:57:15Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-16T10:55:00Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8110291580408713,
        0.9086036107902056
      ],
      "excerpt": "Implemented models were tested on Restricted PASCAL VOC 2012 Validation dataset (RV-VOC12) or Full PASCAL VOC 2012 Validation dataset (VOC-2012) and trained on \nthe PASCAL VOC 2012 Training data and additional Berkeley segmentation data for PASCAL VOC 12. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8578426300774719,
        0.8738775139363276,
        0.8738775139363276,
        0.9173572420569283,
        0.8738775139363276
      ],
      "excerpt": "| Resnet-34-8s   | RV-VOC12  | 68.0   | in prog.           | in prog.  | 50 ms.  | Dropbox            | DeepLab | \n| Resnet-50-16s   | VOC12  | 66.5   | in prog.           | in prog.  | in prog.  | in prog.        | DeepLab | \n| Resnet-50-8s   | VOC12  | 67.0   | in prog.           | in prog.  | in prog.  | in prog.        | DeepLab | \n| Resnet-50-8s-deep-sup   | VOC12  | 67.1   | in prog.           | in prog.  | in prog.  | in prog.        | DeepLab | \n| Resnet-101-16s   | VOC12  | 68.6   | in prog.           | in prog.  | in prog.  | in prog.        | DeepLab | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8236484459578383
      ],
      "excerpt": "| PSP-Resnet-50-8s  | VOC12  | 73.6   | n/a              | n/a         | n/a |     in prog.                | PSPnet | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9665129816466002
      ],
      "excerpt": "The code to acquire the training and validating the model is also provided in the library. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9687307067573308
      ],
      "excerpt": "The dataset contains video sequences recorded in street scenes from 50 different cities, with high quality pixel-level annotations of  5\u202f000 frames. The annotations contain 19 classes which represent cars, road, traffic signs and so on. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8097773143023164,
        0.8444724714035734
      ],
      "excerpt": "| Resnet-34-8s   | Validation set  | 69.1   | in prog.           | in prog.  | 50 ms.  | Dropbox           | \n| Resnet-50-16s-PSP   | Validation set  | 71.2   | in prog.           | in prog.  | in prog.  | in prog.           | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8751043570013233
      ],
      "excerpt": "- Converting Image Classification network into FCN \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9911760428119479
      ],
      "excerpt": "- Conditional Random Fields for Refining of Segmentation and Coarseness of FCN-32s model segmentations \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Image Segmentation and Object Detection in Pytorch",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/warmspringwinds/pytorch-segmentation-detection/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 166,
      "date": "Tue, 28 Dec 2021 02:02:08 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/warmspringwinds/pytorch-segmentation-detection/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "warmspringwinds/pytorch-segmentation-detection",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/cityscapes/resnet_18_8s_train.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/cityscapes/video_generation.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/cityscapes/resnet_34_8s_test.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/cityscapes/resnet_34_8s_train.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/segmentation/psp_resnet_50_8s_synch_bn_train.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/segmentation/flops_counter.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/segmentation/resnet_18_8s_train.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/segmentation/resnet_18_8s_benchmark.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/segmentation/fcn_32s_benchmark.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/segmentation/resnet_34_8s_demo.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/segmentation/resnet_50_8s_deepsup_train.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/segmentation/resnet_34_8s_benchmark.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/segmentation/psp_resnet_50_8s_train.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/segmentation/resnet_50_8s_group_normalization.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/segmentation/fcn_32s_train.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/segmentation/resnet_34_8s_train.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/detection/teaching/first_training_run.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/detection/teaching/bbox_generation_correctness_demo.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/detection/teaching/pascal_detection_data_loading.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/detection/teaching/anchor_boxes_classification.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/detection/teaching/first_testing.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/pascal_voc/detection/teaching/intersection_of_anchorboxes_with_groundtruth_demo.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/lung_segmentation_kaggle/dataset_quick_explore.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/lung_segmentation_kaggle/data_download.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/endovis_2017/segmentation/binary_submission.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/endovis_2017/segmentation/multiclass_validation_segmentation_video.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/endovis_2017/segmentation/resnet_18_8s_test.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/endovis_2017/segmentation/resnet_18_8s_train.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/endovis_2017/segmentation/multiclass_submission.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/endovis_2017/segmentation/binary_submission_inspection.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/endovis_2017/segmentation/resnet_9_8s_reduced_resolution_train.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/endovis_2017/segmentation/resnet_18_8s_soft_mask_vs_hard_mask_video.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/endovis_2017/segmentation/multiclass_resnet_18_8s_train.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/endovis_2017/segmentation/multiclass_resnet_18_8s_test.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/endovis_2017/segmentation/resnet_9_8s_test.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/endovis_2017/segmentation/convert_to_onnx_and_caffe2.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/endovis_2017/segmentation/binary_validation_segmentation_video.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/endovis_2015/binary_submission.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/endovis_2015/multiclass_train.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/endovis_2015/multiclass_submission.ipynb",
      "https://raw.githubusercontent.com/warmspringwinds/pytorch-segmentation-detection/master/pytorch_segmentation_detection/recipes/endovis_2015/resnet18_8s_binary_train.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This code requires:\n\n1. [Pytorch](https://github.com/pytorch/pytorch).\n\n2. Some libraries which can be acquired by installing [Anaconda package](https://www.continuum.io/downloads).\n \n    Or you can install ```scikit-image```, ```matplotlib```, ```numpy``` using ```pip```.\n \n3. Clone the library:\n\n ```git clone --recursive https://github.com/warmspringwinds/pytorch-segmentation-detection```\n \n   And use this code snippet before you start to use the library:\n \n   ```python\n   import sys\n   #: update with your path\n   #: All the jupyter notebooks in the repository already have this\n   sys.path.append(\"/your/path/pytorch-segmentation-detection/\")\n   sys.path.insert(0, '/your/path/pytorch-segmentation-detection/vision/')\n   ```\n   Here we use our [pytorch/vision](https://github.com/pytorch/vision) fork, which might\n   be [merged](https://github.com/pytorch/vision/pull/184) and [futher merged](https://github.com/pytorch/vision/pull/190) in a future.\n   We have added it as a submodule to our repository.\n\n4. Download segmentation or detection models that you want to use manually (links can be found below).\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8426127984713305
      ],
      "excerpt": "| Resnet-34-8s   | RV-VOC12  | 68.0   | in prog.           | in prog.  | 50 ms.  | Dropbox            | DeepLab | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8426475901604404
      ],
      "excerpt": "| Resnet-34-8s   | Validation set  | 69.1   | in prog.           | in prog.  | 50 ms.  | Dropbox           | \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/warmspringwinds/pytorch-segmentation-detection/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python",
      "C++",
      "CMake"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Image Segmentation and Object Detection in Pytorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pytorch-segmentation-detection",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "warmspringwinds",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/warmspringwinds/pytorch-segmentation-detection/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 714,
      "date": "Tue, 28 Dec 2021 02:02:08 GMT"
    },
    "technique": "GitHub API"
  }
}