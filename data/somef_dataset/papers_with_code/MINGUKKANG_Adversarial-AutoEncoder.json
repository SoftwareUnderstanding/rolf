{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1511.05644\n\nGAN: https://arxiv.org/abs/1406.2661\n\n### Github\nhttps://github.com/hwalsuklee/tensorflow-mnist-AAE\n\nhttps://github.com/MINGUKKANG/CVAE",
      "https://arxiv.org/abs/1406.2661\n\n### Github\nhttps://github.com/hwalsuklee/tensorflow-mnist-AAE\n\nhttps://github.com/MINGUKKANG/CVAE"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8029948720864918,
        0.8029948720864918
      ],
      "excerpt": "    net = drop_out(relu(dense(net, self.super_n_hidden, name=\"dense_2\")), keep_prob) \n    net = dense(net, self.n_z, name =\"dense_3\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8029948720864918
      ],
      "excerpt": "    net = drop_out(relu(dense(net, self.super_n_hidden, name=\"dense_2\")), keep_prob) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8029948720864918
      ],
      "excerpt": "    net = drop_out(relu(dense(net, self.super_n_hidden, name=\"dense_2\")), keep_prob) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8029948720864918,
        0.8730726134075774
      ],
      "excerpt": "    net = drop_out(relu(dense(net, self.semi_n_hidden, name=\"dense_2\")), keep_prob) \n    style = dense(net, self.n_z, name =\"style\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8029948720864918
      ],
      "excerpt": "    net = drop_out(relu(dense(net, self.semi_n_hidden, name=\"dense_2\")), keep_prob) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8029948720864918
      ],
      "excerpt": "    net = drop_out(relu(dense(net, self.semi_n_hidden, name=\"dense_2\")), keep_prob) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8029948720864918
      ],
      "excerpt": "    net = drop_out(relu(dense(net, self.semi_n_hidden, name=\"dense_2\")), keep_prob) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9944484218006108,
        0.9944484218006108
      ],
      "excerpt": "AAE: https://arxiv.org/abs/1511.05644 \nGAN: https://arxiv.org/abs/1406.2661 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/MINGUKKANG/Adversarial-AutoEncoder",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-08-18T07:54:00Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-01T01:31:41Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9567588029116127
      ],
      "excerpt": "with tf.variable_scope(\"sup_encoder\", reuse = tf.AUTO_REUSE): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127
      ],
      "excerpt": "with tf.variable_scope(\"sup_decoder\", reuse = tf.AUTO_REUSE): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127
      ],
      "excerpt": "with tf.variable_scope(\"semi_encoder\", reuse = tf.AUTO_REUSE): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127
      ],
      "excerpt": "with tf.variable_scope(\"semi_decoder\", reuse = tf.AUTO_REUSE): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127
      ],
      "excerpt": "with tf.variable_scope(\"semi_z_discriminator\", reuse = tf.AUTO_REUSE): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127
      ],
      "excerpt": "with tf.variable_scope(\"semi_y_discriminator\", reuse = tf.AUTO_REUSE): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9012747458975545
      ],
      "excerpt": "2. 2D Latent Space \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9221743267445895
      ],
      "excerpt": "Coding Space of Supervised AAE \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8461960692673692
      ],
      "excerpt": "The results suggest that when n_z is 2, SemiSupervised AAE can't extract label information from Input image very well. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127,
        0.9567588029116127,
        0.9567588029116127
      ],
      "excerpt": "<td> Manifold with a condition 0 </td> \n<td> Manifold with a condition 1 </td> \n<td> Manifold with a condition 2 </td> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Tensorflow Code for Adversarial AutoEncoder(AAE)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/MINGUKKANG/Adversarial-AutoEncoder/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 7,
      "date": "Wed, 29 Dec 2021 23:16:56 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/MINGUKKANG/Adversarial-AutoEncoder/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "MINGUKKANG/Adversarial-AutoEncoder",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8837680365796365,
        0.9885435204094031
      ],
      "excerpt": "Python 3.5 \nTensorflow-gpu version:  1.4.0rc2  \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8642478986686338,
        0.8642478986686338
      ],
      "excerpt": "<img src=\"Image/Supervised_AAE.png\" alt=\"Drawing\" width= \"500px\"/> \n<img src=\"Image/Semisupervised_AAE_.png\" alt=\"Drawing\" width= \"600px\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8098308255451723
      ],
      "excerpt": "with tf.variable_scope(\"sup_encoder\", reuse = tf.AUTO_REUSE): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8098308255451723
      ],
      "excerpt": "with tf.variable_scope(\"sup_decoder\", reuse = tf.AUTO_REUSE): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8123763140827432,
        0.84760898352076,
        0.84760898352076
      ],
      "excerpt": "negative_log_likelihood = tf.reduce_mean(tf.squared_difference(X_generated, X_flatten)) \nz_prior = tf.concat([z_prior, z_id], axis = 1) \nz_fake = tf.concat([z_generated, Y], axis = 1) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8123763140827432,
        0.8123763140827432
      ],
      "excerpt": "D_loss = tf.reduce_mean(D_loss_fake) + tf.reduce_mean(D_loss_true) \nG_loss = tf.reduce_mean(G_loss) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8098308255451723
      ],
      "excerpt": "with tf.variable_scope(\"semi_encoder\", reuse = tf.AUTO_REUSE): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8098308255451723
      ],
      "excerpt": "with tf.variable_scope(\"semi_decoder\", reuse = tf.AUTO_REUSE): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8098308255451723
      ],
      "excerpt": "with tf.variable_scope(\"semi_z_discriminator\", reuse = tf.AUTO_REUSE): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8098308255451723
      ],
      "excerpt": "with tf.variable_scope(\"semi_y_discriminator\", reuse = tf.AUTO_REUSE): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8123763140827432
      ],
      "excerpt": "negative_loglikelihood = tf.reduce_mean(tf.squared_difference(X_generated,X_flatten)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8123763140827432
      ],
      "excerpt": "D_loss_y = tf.reduce_mean(D_loss_y_real) + tf.reduce_mean(D_loss_y_fake) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8123763140827432
      ],
      "excerpt": "D_loss_z = tf.reduce_mean(D_loss_z_real) + tf.reduce_mean(D_loss_z_fake) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8123763140827432
      ],
      "excerpt": "G_loss = tf.reduce_mean(G_loss_y) + tf.reduce_mean(G_loss_z) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8123763140827432
      ],
      "excerpt": "CE_labels = tf.reduce_mean(CE_labels) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8925568190143275
      ],
      "excerpt": "python main.py --model supervised --prior gaussian --n_z 20 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9291289854874711
      ],
      "excerpt": "python main.py --model semi_supervised --prior gaussian --n_z 20 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.874249521134252,
        0.874249521134252,
        0.874249521134252
      ],
      "excerpt": "<td><img src = 'Image/Original_image.png' height = '250px'> \n<td><img src = 'Image/Supervised_AAE_.png' height = '250px'> \n<td><img src = 'Image/Restored_Semi_AAE.png' height = '250px'> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.874249521134252,
        0.874249521134252,
        0.874249521134252
      ],
      "excerpt": "<td><img src = 'Image/Gaussian.png' height = '250px'> \n<td><img src = 'Image/Gaussian_mixture_.png' height = '250px'> \n<td><img src = 'Image/Swiss_roll_.png' height = '250px'> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8878640874263076
      ],
      "excerpt": "python main.py --model supervised --prior gaussian_mixture --n_z 2 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.874249521134252,
        0.874249521134252,
        0.874249521134252
      ],
      "excerpt": "<td><img src = 'Image/G_generated.png' height = '250px'> \n<td><img src = 'Image/GM_generated.png' height = '250px'> \n<td><img src = 'Image/S_R_generated.png' height = '250px'> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9276792034361777
      ],
      "excerpt": "python main.py --model supervised --prior gaussian_mixture --n_z 2 --PMLR True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.874249521134252
      ],
      "excerpt": "<td><img src = 'Image/PMLR_.png' height = '250px'> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9593401324321505
      ],
      "excerpt": "python main.py --model semi_supervised --prior gaussian --n_z 2 --PMLR True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.874249521134252,
        0.874249521134252,
        0.874249521134252
      ],
      "excerpt": "<td><img src = 'Image/labels_0.png' height = '250px'> \n<td><img src = 'Image/labels_1.png' height = '250px'> \n<td><img src = 'Image/labels_2.png' height = '250px'> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/MINGUKKANG/Adversarial-AutoEncoder/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Adversarial AutoEncoder(AAE)- Tensorflow",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Adversarial-AutoEncoder",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "MINGUKKANG",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/MINGUKKANG/Adversarial-AutoEncoder/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 18,
      "date": "Wed, 29 Dec 2021 23:16:56 GMT"
    },
    "technique": "GitHub API"
  }
}