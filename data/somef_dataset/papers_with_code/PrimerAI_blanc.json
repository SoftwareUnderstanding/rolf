{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2010.06716",
      "https://arxiv.org/abs/2007.12626v4"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/PrimerAI/blanc",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-23T17:16:11Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-28T00:33:35Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9857826272000145,
        0.9963225713927757,
        0.9738079974948373,
        0.9951876085544312,
        0.9269963925579424,
        0.8854543046954684,
        0.9750664912248697
      ],
      "excerpt": "This is the reference implementation of BLANC-help and BLANC-tune as defined in Fill in the BLANC: Human-free quality estimation of document summaries. \nBLANC is a reference-free approach to the automatic estimation of document summary quality. Our goal is to measure the functional performance of a summary with an objective, reproducible, and fully automated method. Our approach achieves this by measuring the performance boost gained by a pre-trained language model with access to a document summary while carrying out its language understanding task on the document's text. Unlike ROUGE, BLANC does not require human-written reference summaries, allowing for fully human-free summary quality estimation. \nTwo types of BLANC scores were introduced in the paper and are available in this repo: BLANC-help and BLANC-tune. BLANC-help is faster to calculate (around 30% faster on CUDA with default settings), but BLANC-tune is more theoretically principled. They are around 90% correlated with each other, so either one can be used in most cases.<br /> \nBLANC-help with gap=2 on average correlates the best with human scores Sensitivity of BLANC to human-scored qualities of text summaries, it is now set as default. The original paper used gap=6. Optimal parameters for BLANC-help and for BLANC-tune are found by using 'max-help' criterion, without relying on human summaries or human scores, in Is Human Scoring the Best Criteria for Summary Evaluation? (the paper points to the possible bias of human experts). \nThe datasets: data. \nA different reference-free measure with emphasis on factual consistency: ESTIME. \nBLANC can run on top of any pretrained BERT or AlBERT model (more will be added). The table below lists correlations of BLANC with human scores on the human-annotated SummEval dataset (described in SummEval: Re-evaluating Summarization Evaluation). The dataset contains 1600 text-summary pairs by 100 texts x 16 systems. We show correlation (Spearman and Kendall's Tau-c) between BLANC-help and experts-average scores for each quality of the summary (coherence, consistency, fluency, relevance): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9056267104276561
      ],
      "excerpt": "The transformers models are: bert-base-uncased (bbu), bert-base-cased (bbc), bert-large-uncased (blu), bert-large-cased (blc), bert-large-uncased-whole-word-masking (bluw), bert-large-cased-whole-word-masking (blcw), albert-base-v2 (ab), albert-large-v2 (al), albert-xlarge-v2 (axl), albert-xxlarge-v2 (axxl). The BLANC-help was used with the current default settings (gap=2, min_token_length_normal=4, min_token_length_lead=2, min_token_length_followup=100). All the p-values above are of order 10^-5 or lower. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Human-free quality estimation of document summaries",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/PrimerAI/blanc/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Thu, 30 Dec 2021 09:31:57 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/PrimerAI/blanc/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "PrimerAI/blanc",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Install Python 3.6 or higher\n2. Install with `pip install blanc`\n\n",
      "technique": "Header extraction"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/PrimerAI/blanc/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Copyright 2020 Primer AI\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "BLANC",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "blanc",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "PrimerAI",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/PrimerAI/blanc/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 55,
      "date": "Thu, 30 Dec 2021 09:31:57 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Basic usage:\n```python\n>>> from blanc import BlancHelp, BlancTune\n>>> document = \"Jack drove his minivan to the bazaar to purchase milk and honey for his large family.\"\n>>> summary = \"Jack bought milk and honey.\"\n>>> blanc_help = BlancHelp()\n>>> blanc_tune = BlancTune(finetune_mask_evenly=False, show_progress_bar=False)\n>>> blanc_help.eval_once(document, summary)\n0.2222222222222222\n>>> blanc_tune.eval_once(document, summary)\n0.3333333333333333\n```\n\nBy default, BLANC is run on the CPU. Using CUDA with batching is much faster:\n```python\nblanc_help = BlancHelp(device='cuda', inference_batch_size=128)\nblanc_tune = BlancTune(device='cuda', inference_batch_size=24, finetune_mask_evenly=False, finetune_batch_size=24)\n```\nWith these batch sizes, BLANC-help takes around 1.4 sec per summary and BLANC-tune takes around 1.8 sec per summary on an NVIDIA V100. In addition to the parameters controlling device and batch sizes, BlancHelp and BlancTune take several other parameters controlling how the BLANC scores are calculated, and the default values for those parameters reproduce the results of the paper. BlancTune results may vary if random_seed is not set.\n\nIf you want to compute the BLANC scores of many documents and summaries at once, you can use `eval_pairs()` or `eval_summaries_for_docs()`. `eval_pairs()` is useful when you have many documents, each with a single summary:\n```python\n>>> documents = [\"Jack drove his minivan to the bazaar to purchase milk and honey for his large family.\", \"As Jill started taking a walk in the park, she certainly noticed that the trees were extra green this year.\"]\n>>> summaries = [\"Jack bought milk and honey.\", \"Jill saw green trees in the park.\"]\n>>> blanc_help.eval_pairs(documents, summaries)\n[0.2222222222222222, 0.0]\n```\n\n`eval_summaries_for_docs()` is useful when you have many documents, each with many summaries:\n```python\n>>> doc_summaries = [[\"Jack bought milk and honey.\", \"Jack drove to the bazaar in a minivan\"], [\"Jill saw green trees in the park.\", \"The trees were green.\"]]\n>>> blanc_tune.eval_summaries_for_docs(documents, doc_summaries)\n[[0.2222222222222222, 0.2222222222222222], [-0.07142857142857142, -0.14285714285714285]]\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "A CLI for computing BLANC scores is provided for convenience.\n```\n$ blanc help --gap 6 --doc \"Jack drove his minivan to the bazaar to purchase milk and honey for his large family.\" --summary \"Jack bought milk and honey.\"\n0.1111111111111111\n```\n\nInput data can also be provided in JSON format, with sample JSON input provided in `data/`\n```\n$ blanc help --single_json data/single.json --gap 6\n0.1111111111111111\n$ blanc tune --pairs_json data/pairs.json --gap 6 --finetune_mask_evenly False\n[0.2222222222222222, 0.14285714285714285]\n$ blanc tune --doc_summaries_json data/doc-summaries.json --gap 6 --finetune_mask_evenly False\n[[0.2222222222222222, 0.2222222222222222], [0.14285714285714285, 0.07142857142857142]]\n```\n\nThe `single_json` input format expects a single JSON blob with keys `document` and `summary`. The `pairs_json` input format expects a list of JSON blobs, each with a `document` and a `summary`. The `doc_summaries_json` input format expects a list of JSON blobs, each with keys `document` and `summaries`, where `summaries` is a list of strings. These keys are customizable with the `doc_key`, `summary_key`, and `summaries_key` arguments. By default, the output is printed to STDOUT, but it can be written to a JSON file provided with the `output_json` argument.\n\nFull documentation is available with `blanc --help`:\n```\nrequired arguments:\n  {help,tune}           BLANC-help or BLANC-tune\n\ninput arguments:\n  --doc DOC             single input document (default: None)\n  --summary SUMMARY     single input summary (default: None)\n  --single_json FILENAME\n                        filename for single document summary pair (default:\n                        None)\n  --pairs_json FILENAME\n                        filename for list of document summary pairs (default:\n                        None)\n  --doc_summaries_json FILENAME\n                        filename for list of documents, each with a list of\n                        summaries (default: None)\n  --doc_key KEY         json key for the input document (default: doc)\n  --summary_key KEY     json key for the input summary (single_json or\n                        pairs_json input) (default: summary)\n  --summaries_key KEY   json key for the input summaries (doc_summaries_json\n                        input) (default: summaries)\n\narguments for BLANC-help and BLANC-tune:\n  --model_name NAME     BERT model type (default: bert-base-uncased)\n  --measure {improve,relative}\n                        measure improve or relative, as defined in the paper\n                        (default: relative)\n  --gap GAP             distance between words to mask during inference\n                        (default: 2)\n  --gap_mask NUM        number of tokens to mask during inference at each\n                        gap-defined position\n                        (default: 1)\n  --min_token_length_normal LEN\n                        minimum number of chars in normal tokens to mask,\n                        where a normal token is a whole word (default: 4)\n  --min_token_length_lead LEN\n                        minimum number of chars in lead token to mask, where a\n                        lead token begins a word (default: 2)\n  --min_token_length_followup LEN\n                        minimum number of chars in followup token to mask,\n                        where a followup token continues a word (default: 100)\n  --device DEVICE       cpu or cuda device (default: cpu)\n  --random_seed SEED    random seed for python and torch (default: 1)\n  --inference_batch_size SIZE\n                        batch size to use during inference (default: 1)\n  --inference_mask_evenly MASK_EVENLY\n                        when True, mask every `gap` tokens that are longer\n                        than `min_token_length` during finetuning, when False\n                        randomly mask tokens with probability 0.15 (default:\n                        True)\n\nBLANC-help arguments:\n  --filler_token TOKEN  token to use as filler in lieu of summary (default: .)\n  --help_sep SEP        token to use to separate the summary or filler from\n                        the sentence, or '' for no separator (default: )\n\nBLANC-tune arguments:\n  --finetune_batch_size SIZE\n                        batch size to use when finetuning on summary (default:\n                        1)\n  --finetune_epochs EPOCHS\n                        number of epochs to train for when finetuning on\n                        summary (default: 10)\n  --finetune_mask_evenly MASK_EVENLY\n                        when True, mask every `gap` tokens that are longer\n                        than `min_token_length`during finetuning, when False\n                        randomly mask tokens with probability 0.15 (default:\n                        False)\n  --finetune_chunk_size SIZE\n                        number of summary tokens to use at a time when\n                        finetuning (default: 64)\n  --finetune_chunk_stride STRIDE\n                        number of tokens between summary chunks for finetuning\n                        (default: 32)\n  --learning_rate LR    learning rate when finetuning on summary (default:\n                        5e-05)\n  --warmup_steps STEPS  warmup steps when finetuning on summary (default: 0)\n  ```\n\n  ",
      "technique": "Header extraction"
    }
  ]
}