{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2006.00719"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/davda54/ada-hessian",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-08-12T05:51:07Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-03T08:51:29Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9429673615593105,
        0.9807584131760885
      ],
      "excerpt": "Unofficial implementation of the AdaHessian optimizer. Created as a drop-in replacement for any PyTorch optimizer \u2013 you only need to set create_graph=True in the backward() call and everything else should work \ud83e\udd73 \nOur version supports multiple param_groups, distributed training, delayed Hessian updates and more precise approximation of the Hessian trace. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9769792774831499
      ],
      "excerpt": "| params (iterable) | iterable of parameters to optimize or dicts defining parameter groups | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8072068146745123,
        0.871551910624676,
        0.891540158338618
      ],
      "excerpt": "| update_each (int, optional)   | compute the hessian trace approximation only after this number of steps (to save time) (default: 1) | \n| n_samples (int, optional) | how many times to sample z for the approximation of the hessian trace (default: 1) | \n| average_conv_kernel (bool, optional) | average out the hessian traces of convolutional kernels as in the original paper (default: false) | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8289509439705154
      ],
      "excerpt": "Performs a single optimization step. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Easy-to-use AdaHessian optimizer (PyTorch)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/davda54/ada-hessian/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 9,
      "date": "Mon, 27 Dec 2021 15:57:00 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/davda54/ada-hessian/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "davda54/ada-hessian",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.8384732131865003
      ],
      "excerpt": "| hessian_power (float, optional)  | exponent of the hessian trace (default: 1.0) | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8286390791744613
      ],
      "excerpt": "| n_samples (int, optional) | how many times to sample z for the approximation of the hessian trace (default: 1) | \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/davda54/ada-hessian/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 David Samuel\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "AdaHessian  \ud83d\ude80",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "ada-hessian",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "davda54",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/davda54/ada-hessian/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 57,
      "date": "Mon, 27 Dec 2021 15:57:00 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "adahessian",
      "hessian",
      "optimizer",
      "pytorch",
      "second-order",
      "adam"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```python\nfrom ada_hessian import AdaHessian\n...\nmodel = YourModel()\noptimizer = AdaHessian(model.parameters())\n...\nfor input, output in data:\n  optimizer.zero_grad()\n  loss = loss_function(output, model(input))\n  loss.backward(create_graph=True)  #: this is the important line! \ud83e\uddd0\n  optimizer.step()\n...\n```\n\n<br>\n\n",
      "technique": "Header extraction"
    }
  ]
}