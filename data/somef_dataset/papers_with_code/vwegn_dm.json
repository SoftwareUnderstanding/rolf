{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1409.1556\n\n\n"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* <a id=\"1\">[1]</a> Jerome Revaud et al. \u201cDeepMatching: Hierarchical Deformable Dense Matching\u201d. URL: https://arxiv.org/pdf/1506.07656\n* <a id=\"2\">[2]</a> James Thewlis et al. \u201cFully-Trainable Deep Matching\u201d. URL: http://arxiv.org/abs/1609.03532\n* <a id=\"3\">[3]</a> Sintel Dataset: http://sintel.is.tue.mpg.de/\n* <a id=\"4\">[4]</a> Optical Flow Visualization: https://github.com/tomrunia/OpticalFlow_Visualization\n* <a id=\"5\">[5]</a> Karen Simonyan, Andrew Zisserman. \u201cVery Deep Convolutional Networks for Large-Scale Image Recognition\u201c. URL: https://arxiv.org/abs/1409.1556\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9742177718389462
      ],
      "excerpt": "| Acc@10     |  87.32%    |    87.45%  |   0.12%   | \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vwegn/dm",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-06-10T17:17:54Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-12-14T08:44:06Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9623318278653028,
        0.9971923132814582,
        0.8743990817644177,
        0.9816297366882253,
        0.9433661179988346
      ],
      "excerpt": "This code implements the DeepMatching algorithm as a fully trainable deep neural network in TensorFlow using the Keras framework as proposed in [1]. It includes the usage of a pre-trained VGG network for feature extraction [5]. \nThis work was created as part of a Master Thesis in the Institute for Applied Mathematics in the Department of Mathematics and Informatics of WWU M\u00fcnster. \nAll modes of operation run on a configuration specified by the following parameters as introduced in [2]. \n+ alpha is the stride of subsampling. \n+ beta is the offset of subsampling. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9341028687935687,
        0.9172265523874831,
        0.965637067785368,
        0.9980289508583887
      ],
      "excerpt": "+ levels sets the amount of levels in the pyramid hierarchy of the DeepMatching algorithm. \nThe set default configuration (for testing purposes) is alpha = 8, beta = 4, radius = 10, levels = 3. In [2] the configuration is set to alpha = 8, beta = 4, radius = 80, levels = 6, but due to limited resources it was not possible to train with this configuration. \nThe picture below is an example of the matching results. It was performed with the following configuration: alpha = 8, beta = 4, radius = 40, levels = 3.  \nNote, that as opposed to dm_match in dm_match_pair occlusions and out of radius pixels are not removed, which leads to more errors and therefore some artifacts in the picture. Also, no further optical flow optimization is applied. Due to subsampling the resolution of the resulting image is low. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vwegn/dm/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 21 Dec 2021 05:14:01 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/vwegn/dm/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "vwegn/dm",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "__Info:__ As of 2020 the following installation process does not support GPU execution of the code anymore. Currently, there are no plans for updates to TensorFlow 2 or other versions.\n\n\nCreate virtual environment and activate:\n+ (```conda config --append channels conda-forge```)\n+ ```conda create -n <env> python=3.6```\n+ ```conda activate <env>```\n\nManual package installation:\n+ ```conda install -c conda-forge tensorflow=1.8.0```\n+ ```conda install -c conda-forge keras=2.1.6```\n+ ```conda install -c conda-forge scikit-image```\n\n\n\nAutomatic package installation via ```requirements.txt```:\n+ ```conda install --file requirements.txt```\n\nGet the Sintel dataset for training or matching evaluation:\n+ Download the training sequences from [[3]](#3) and extract them to the `/MPI-Sintel/training` folder.\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/vwegn/dm/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 vwegn\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "DeepMatching",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "dm",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "vwegn",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vwegn/dm/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "An example for the `dm_match_pair` method is provided in `example.py`.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Tue, 21 Dec 2021 05:14:01 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This implementation provides three different modes of operation:\n+ `dm_match_pair` computes matches for a pair of images based on given weights (`weights.h5py`). These matches are then visualized as optical flow via `flow_vis` [[4]](#4).\n+ `dm_match` computes matches based on given weights for a set of testing images and evaluates the matching results by comparing with the ground truth.\n+ `dm_train` trains the neural network. \n\nThe sequences on which training and the matching evaluation are performed are loaded from `MPI-Sintel/training/clean`. The path can be customized in the function `read_training_data()`  in `dm.py`. Weights are saved to and loaded from `weights.h5py`.\n\n",
      "technique": "Header extraction"
    }
  ]
}