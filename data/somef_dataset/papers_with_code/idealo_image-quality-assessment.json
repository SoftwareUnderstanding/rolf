{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Please cite Image Quality Assessment in your publications if this is useful for your research. Here is an example BibTeX entry:\n```BibTeX\n@misc{idealods2018imagequalityassessment,\n  title={Image Quality Assessment},\n  author={Christopher Lennan and Hao Nguyen and Dat Tran},\n  year={2018},\n  howpublished={\\url{https://github.com/idealo/image-quality-assessment}},\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{idealods2018imagequalityassessment,\n  title={Image Quality Assessment},\n  author={Christopher Lennan and Hao Nguyen and Dat Tran},\n  year={2018},\n  howpublished={\\url{https://github.com/idealo/image-quality-assessment}},\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8785392732814629
      ],
      "excerpt": "(NB: change region, VPC ID and AMI ID as per your setup) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "                          --amazonec2-region eu-west-1 \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8955886365383559
      ],
      "excerpt": "    source contrib/tf_serving/venv_tfs_nima/bin/activate \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8090016440670298,
        0.9146894306581513,
        0.8090016440670298
      ],
      "excerpt": "Christopher Lennan, github: clennan \nHao Nguyen, github: MrBanhBao \nDat Tran, github: datitran \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/idealo/image-quality-assessment",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contribution Guide\nWe welcome any contributions whether it's,\n\nSubmitting feedback\nFixing bugs\nOr implementing a new feature.\n\nPlease read this guide before making any contributions.\nSubmit Feedback\nThe feedback should be submitted by creating an issue at GitHub issues.\nSelect the related template (bug report, feature request, or custom) and add the corresponding labels.\nFix Bugs:\nYou may look through the GitHub issues for bugs.\nImplement Features\nYou may look through the GitHub issues for feature requests.\nPull Requests (PR)\n\nFork the repository and a create a new branch from the master branch.\nFor bug fixes, add new tests and for new features please add changes to the documentation.\nDo a PR from your new branch to our dev branch of the original Image Quality Assessment repo.\n\nDocumentation\n\nMake sure any new function or class you introduce has proper docstrings.\n\nTesting\n\nWe use nosetests for our testing. Make sure to write tests for any new feature and/or bug fixes.\n\nMain Contributor List\nWe maintain a list of main contributors to appreciate all the contributions.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-06-12T14:46:09Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-27T10:28:41Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9489889741745291,
        0.9397698145878972,
        0.9509700969895886,
        0.878903258250217,
        0.9358094321591064,
        0.8947551544700957
      ],
      "excerpt": "This repository provides an implementation of an aesthetic and technical image quality model based on Google's research paper \"NIMA: Neural Image Assessment\". You can find a quick introduction on their Research Blog. \nNIMA consists of two models that aim to predict the aesthetic and technical quality of images, respectively. The models are trained via transfer learning, where ImageNet pre-trained CNNs are used and fine-tuned for the classification task. \nFor more information on how we used NIMA for our specifc problem, we did a write-up on two blog posts: \nNVIDIA Developer Blog: Deep Learning for Classifying Hotel Aesthetics Photos \nMedium: Using Deep Learning to automatically rank millions of hotel images \nThe provided code allows to use any of the pre-trained models in Keras. We further provide Docker images for local CPU training and remote GPU training on AWS EC2, as well as pre-trained models on the AVA and TID2013 datasets. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9976958025847743
      ],
      "excerpt": "Image quality assessment is compatible with Python 3.6 and is distributed under the Apache 2.0 license. We welcome all kinds of contributions, especially new model architectures and/or hyperparameter combinations that improve the performance of the currently published models (see Contribute). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.897865779666053
      ],
      "excerpt": "We provide trained models, for both aesthetic and technical classifications, that use MobileNet as the base CNN. The models and their respective config files are stored under models/MobileNet. They achieve the following performance \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8457658951474275
      ],
      "excerpt": "Download dataset to EC2 instance (see instructions under Datasets). We recommend to save the AMI with the downloaded data for future use. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9146362537099548,
        0.8307844707063428,
        0.9825420873911603,
        0.9216719576990531,
        0.9129625809291784
      ],
      "excerpt": "We welcome all kinds of contributions and will publish the performances from new models in the performance table under Trained models. \nFor example, to train a new aesthetic NIMA model based on InceptionV3 ImageNet weights, you just have to change the base_model_name parameter in the config file models/MobileNet/config_aesthetic_gpu.json to \"InceptionV3\". You can also control all major hyperparameters in the config file, like learning rate, batch size, or dropout rate. \nSee the Contribution guide for more details. \nThis project uses two datasets to train the NIMA model: \nAVA used for aesthetic ratings (data) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8885167294409564
      ],
      "excerpt": "For training on AWS EC2 we recommend to build a custom AMI with the AVA images stored on it. This has proven much more viable than copying the entire dataset from S3 to the instance for each training job. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8841131784851259,
        0.9346318133335796
      ],
      "excerpt": "The label for each image is the normalized or un-normalized frequency distribution of ratings 1-10. \nFor the AVA dataset these frequency distributions are given in the raw data files. For the TID2013 dataset we inferred the normalized frequency distribution, i.e. probability distribution, by finding the maximum entropy distribution that satisfies the mean score. The code to generate the TID2013 labels can be found under data/TID2013/get_labels.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9461348106262835
      ],
      "excerpt": "To get predictions from the aesthetic or technical model: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Convolutional Neural Networks to predict the aesthetic and technical quality of images.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/idealo/image-quality-assessment/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 376,
      "date": "Mon, 27 Dec 2021 23:10:14 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/idealo/image-quality-assessment/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "idealo/image-quality-assessment",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/idealo/image-quality-assessment/master/contrib/tf_serving/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/idealo/image-quality-assessment/tree/master/mkdocs/docs"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/idealo/image-quality-assessment/master/entrypoints/entrypoint.train.gpu.sh",
      "https://raw.githubusercontent.com/idealo/image-quality-assessment/master/entrypoints/entrypoint.train.cpu.sh",
      "https://raw.githubusercontent.com/idealo/image-quality-assessment/master/entrypoints/entrypoint.predict.cpu.sh",
      "https://raw.githubusercontent.com/idealo/image-quality-assessment/master/mkdocs/run_docs.sh",
      "https://raw.githubusercontent.com/idealo/image-quality-assessment/master/mkdocs/build_docs.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.833114516308531
      ],
      "excerpt": "    bash \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.833114516308531
      ],
      "excerpt": "    bash \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8371053798245242
      ],
      "excerpt": "Download dataset (see instructions under Datasets) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.833114516308531
      ],
      "excerpt": "    bash \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.833114516308531
      ],
      "excerpt": "    bash \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.833114516308531
      ],
      "excerpt": "    bash \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.833114516308531
      ],
      "excerpt": "    bash \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.833114516308531
      ],
      "excerpt": "    bash \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.833114516308531
      ],
      "excerpt": "    bash \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.833114516308531
      ],
      "excerpt": "    ```bash \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9623668047804587,
        0.9645085199116633
      ],
      "excerpt": "    sudo apt-get update \n    sudo apt-get install -y nvidia-375 nvidia-settings nvidia-modprobe \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8471064345059722
      ],
      "excerpt": "Download dataset to EC2 instance (see instructions under Datasets). We recommend to save the AMI with the downloaded data for future use. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.833114516308531
      ],
      "excerpt": "    bash \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9684024188846662,
        0.8014080905588433,
        0.8456327227702695,
        0.9941351915448593
      ],
      "excerpt": "3. Install python dependencies to run TF serving sample client \n    virtualenv -p python3 contrib/tf_serving/venv_tfs_nima \n    source contrib/tf_serving/venv_tfs_nima/bin/activate \n    pip install -r contrib/tf_serving/requirements.txt \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8078145619394667
      ],
      "excerpt": "Model      | Dataset | EMD  | LCC | SRCC \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8213380337316241
      ],
      "excerpt": "    ./predict  \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8869675782615802
      ],
      "excerpt": "    --image-source $(pwd)/src/tests/test_images/42039.jpg \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8213380337316241
      ],
      "excerpt": "    ./predict  \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8211621876037827
      ],
      "excerpt": "    --image-source $(pwd)/src/tests/test_images \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8044219358717217
      ],
      "excerpt": "Run the local training script (e.g. for TID2013 dataset) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8777182431128385,
        0.896549594400876
      ],
      "excerpt": "    --config-file $(pwd)/models/MobileNet/config_technical_cpu.json \\ \n    --samples-file $(pwd)/data/TID2013/tid_labels_train.json \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8424047578513549,
        0.8116000827654791
      ],
      "excerpt": "This will start a training container from the Docker image nima-cpu and create a timestamp train job folder under train_jobs, where the trained model weights and logs will be stored. The --image-dir argument requires the path of the image directory on your local machine. \nIn order to stop the last launched container run \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8204214874595831
      ],
      "excerpt": "    docker container stop $CONTAINER_ID \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8777182431128385,
        0.896549594400876
      ],
      "excerpt": "    --config-file $(pwd)/models/MobileNet/config_aesthetic_gpu.json \\ \n    --samples-file $(pwd)/data/AVA/ava_labels_train.json \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8551060726942853
      ],
      "excerpt": "The training progress will be streamed to your terminal. After the training has finished, the train outputs (logs and best model weights) will be stored on S3 in a timestamped folder. The S3 output bucket can be specified in the config file. The --image-dir argument requires the path of the image directory on your remote instance. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8821949365050611
      ],
      "excerpt": "The train script requires JSON label files in the format \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8343821641586242
      ],
      "excerpt": "For the AVA dataset we randomly assigned 90% of samples to the train set, and 10% to the test set, and throughout training a 5% validation set will be split from the training set to evaluate the training performance after each epoch. For the TID2013 dataset we split the train/test sets by reference images, to ensure that no reference image, and any of its distortions, enters both the train and test set. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8233994721293869
      ],
      "excerpt": "along with the script to generate them from the original Keras files, under the contrib/tf_serving directory. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9077907946184417
      ],
      "excerpt": "2. Run a NIMA TFS container with docker run -d --name tfs_nima -p 8500:8500 tfs_nima \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9620935497642025,
        0.9620935497642025
      ],
      "excerpt": "    python -m contrib.tf_serving.tfs_sample_client --image-path src/tests/test_images/42039.jpg --model-name mobilenet_aesthetic \n    python -m contrib.tf_serving.tfs_sample_client --image-path src/tests/test_images/42039.jpg --model-name mobilenet_technical \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/idealo/image-quality-assessment/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Copyright 2018 idealo internet GmbH. All rights reserved.\\n\\n                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Image Quality Assessment",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "image-quality-assessment",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "idealo",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/idealo/image-quality-assessment/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1484,
      "date": "Mon, 27 Dec 2021 23:10:14 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "nima",
      "neural-network",
      "tensorflow",
      "keras",
      "mobilenet",
      "aws",
      "image-quality-assessment",
      "convolutional-neural-networks",
      "deep-learning",
      "computer-vision",
      "machine-learning",
      "e-commerce",
      "idealo"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Install [jq](https://stedolan.github.io/jq/download/)\n\n2. Install [Docker](https://docs.docker.com/install/)\n\n3. Build docker image `docker build -t nima-cpu . -f Dockerfile.cpu`\n\nIn order to train remotely on **AWS EC2**\n\n4. Install [Docker Machine](https://docs.docker.com/machine/install-machine/)\n\n5. Install [AWS Command Line Interface](https://docs.aws.amazon.com/cli/latest/userguide/installing.html)\n\n\n",
      "technique": "Header extraction"
    }
  ]
}