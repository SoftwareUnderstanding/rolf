{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1904.03579",
      "https://arxiv.org/abs/1904.01169",
      "https://arxiv.org/abs/1903.10829",
      "https://arxiv.org/abs/1910.03151"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": " \n  1. OctaveConv: MXNet implementation [here](https://github.com/terrychenism/OctaveConv)\n  2. AdaptiveCov: Offical tensorflow implementation [here](https://github.com/wanggrun/Adaptively-Connected-Neural-Networks)  \n  3. ScaleNet: [here](https://github.com/Eli-YiLi/ScaleNet)\n  4. SGENet:[here](https://github.com/implus/PytorchInsight)\n  \n  Please consider cite the author's paper when using the code for your research.\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9816512424298051
      ],
      "excerpt": "  2. Adaptively Connected Neural Networks.(CVPR 2019) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.995351996396173,
        0.9618040285618777,
        0.8978112323263083,
        0.9991245600483735
      ],
      "excerpt": "  6. SEnet: Squeeze-and-Excitation Networks(CVPR 2018) paper \n  7. GEnet: Exploiting Feature Context in Convolutional Neural Networks(NIPS 2018) paper \n  8. ECA-Net: Efficient Channel Attention for Deep Convolutional Neural Networks paper \n  9. SK-Net: Selective Kernel Networks(CVPR 2019) paper \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lxtGH/OctaveConv_pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-04-16T15:25:18Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-27T11:05:49Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9774991887386878
      ],
      "excerpt": "This is third parity implementation(un-official) of Following Paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Pytorch implementation of newly added convolution",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lxtGH/OctaveConv_pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 90,
      "date": "Tue, 28 Dec 2021 03:51:58 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lxtGH/OctaveConv_pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "lxtGH/OctaveConv_pytorch",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/lxtGH/OctaveConv_pytorch/master/exp/train_val_step_se_resnet50.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8073525956641152
      ],
      "excerpt": "Add SE-like models. (done) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lxtGH/OctaveConv_pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 XingtaiLi\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Beyond Convolution",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "OctaveConv_pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "lxtGH",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lxtGH/OctaveConv_pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 560,
      "date": "Tue, 28 Dec 2021 03:51:58 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "   check model files under the fig/nn floder.\n   \n```python\nfrom lib.nn.OCtaveResnet import resnet50\nfrom lib.nn.res2net import se_resnet50\nfrom lib.nn.AdaptiveConvResnet import PixelAwareResnet50, DataSetAwareResnet50\n\nmodel = resnet50().cuda()\nmodel = se_resnet50().cuda()\nmodel = PixelAwareResnet50().cuda()\nmodel = DataSetAwareResnet50().cuda()\n\n```\n",
      "technique": "Header extraction"
    }
  ]
}