{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1703.06870"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you find Faster R-CNN useful in your research, please consider citing:\n\n    @inproceedings{renNIPS15fasterrcnn,\n        Author = {Shaoqing Ren and Kaiming He and Ross Girshick and Jian Sun},\n        Title = {Faster {R-CNN}: Towards Real-Time Object Detection\n                 with Region Proposal Networks},\n        Booktitle = {Advances in Neural Information Processing Systems ({NIPS})},\n        Year = {2015}\n    }\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{renNIPS15fasterrcnn,\n    Author = {Shaoqing Ren and Kaiming He and Ross Girshick and Jian Sun},\n    Title = {Faster {R-CNN}: Towards Real-Time Object Detection\n             with Region Proposal Networks},\n    Booktitle = {Advances in Neural Information Processing Systems ({NIPS})},\n    Year = {2015}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9540798979593713
      ],
      "excerpt": "If your goal is to reproduce the results in our NIPS 2015 paper, please use the official code. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9999491505988155
      ],
      "excerpt": "By Shaoqing Ren, Kaiming He, Ross Girshick, Jian Sun (Microsoft Research) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lincaiming/py-faster-rcnn-update",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing\nBelow you will find a collection of guidelines for submitting issues as well as contributing code to the Caffe repository.\nPlease read those before starting an issue or a pull request.\nIssues\nSpecific Caffe design and development issues, bugs, and feature requests are maintained by GitHub Issues.\nPlease do not post installation, build, usage, or modeling questions, or other requests for help to Issues.\nUse the caffe-users list instead.\nThis helps developers maintain a clear, uncluttered, and efficient view of the state of Caffe.\nSee the chapter caffe-users below for guidance on posting to the users list.\nWhen reporting an issue, it's most helpful to provide the following information, where applicable:\n* How does the problem look like and what steps reproduce it?\n* Can you reproduce it using the latest master, compiled with the DEBUG make option?\n* What hardware and software are you running? In particular:\n    * GPU make and model, if relevant,\n    * operating system/distribution,\n    * compiler; please also post which version (for example, with GCC run gcc --version to check),\n    * CUDA version, if applicable (run nvcc --version to check),\n    * cuDNN version, if applicable (version number is stored in cudnn.h, look for lines containing CUDNN_MAJOR, CUDNN_MINOR and CUDNN_PATCHLEVEL),\n    * BLAS library,\n    * Python version, if relevant,\n    * MATLAB version, if relevant.\n* What have you already tried to solve the problem? How did it fail? Are there any other issues related to yours?\n* If this is not a build-related issue, does your installation pass make runtest?\n* If the bug is a crash, provide the backtrace (usually printed by Caffe; always obtainable with gdb).\n* If you are reporting a build error that seems to be due to a bug in Caffe, please attach your build configuration (either Makefile.config or CMakeCache.txt) and the output of the make (or cmake) command.\nIf only a small portion of the code/log is relevant to your issue, you may paste it directly into the post, preferably using Markdown syntax for code block: triple backtick ( ``` ) to open/close a block.\nIn other cases (multiple files, or long files), please attach them to the post - this greatly improves readability.\nIf the problem arises during a complex operation (e.g. large script using pycaffe, long network prototxt), please reduce the example to the minimal size that still causes the error.\nAlso, minimize influence of external modules, data etc. - this way it will be easier for others to understand and reproduce your issue, and eventually help you.\nSometimes you will find the root cause yourself in the process.\nTry to give your issue a title that is succinct and specific. The devs will rename issues as needed to keep track of them.\nCaffe-users\nBefore you post to the caffe-users list, make sure you look for existing solutions.\nThe Caffe community has encountered and found solutions to countless problems - benefit from the collective experience.\nRecommended places to look:\n* the users list itself,\n* caffe tag on StackOverflow,\n* GitHub issues tracker (some problems have been answered there),\n* the public wiki,\n* the official documentation.\nFound a post/issue with your exact problem, but with no answer?\nDon't just leave a \"me too\" message - provide the details of your case.\nProblems with more available information are easier to solve and attract good attention.\nWhen posting to the list, make sure you provide as much relevant information as possible - recommendations for an issue report (see above) are a good starting point.\nPlease make it very clear which version of Caffe you are using, especially if it is a fork not maintained by BVLC.\nFormatting recommendations hold: paste short logs/code fragments into the post (use fixed-width text for them), attach long logs or multiple files.\nPull Requests\nCaffe welcomes all contributions.\nSee the contributing guide for details.\nBriefly: read commit by commit, a PR should tell a clean, compelling story of one improvement to Caffe. In particular:\n\nA PR should do one clear thing that obviously improves Caffe, and nothing more. Making many smaller PRs is better than making one large PR; review effort is superlinear in the amount of code involved.\nSimilarly, each commit should be a small, atomic change representing one step in development. PRs should be made of many commits where appropriate.\nPlease do rewrite PR history to be clean rather than chronological. Within-PR bugfixes, style cleanups, reversions, etc. should be squashed and should not appear in merged PR history.\nAnything nonobvious from the code should be explained in comments, commit messages, or the PR description, as appropriate.",
    "technique": "File Exploration"
  },
  "contributors": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributors\nCaffe is developed by a core set of BAIR members and the open-source community.\nWe thank all of our contributors!\nFor the detailed history of contributions of a given file, try\ngit blame file\n\nto see line-by-line credits and\ngit log --follow file\n\nto see the change log even across renames and rewrites.\nPlease refer to the acknowledgements on the Caffe site for further details.\nCopyright is held by the original contributor according to the versioning history; see LICENSE.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-04-12T04:12:11Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-04-12T13:22:51Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9704793885583791,
        0.9341285711573113,
        0.9455531164947442,
        0.9871634136065554
      ],
      "excerpt": "The official Faster R-CNN code (written in MATLAB) is available here. \nIf your goal is to reproduce the results in our NIPS 2015 paper, please use the official code. \nThis repository contains a Python reimplementation of the MATLAB code. \nThis Python implementation is built on a fork of Fast R-CNN. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8159034167670202
      ],
      "excerpt": " - is ~10% slower at test-time, because some operations execute on the CPU in Python layers (e.g., 220ms / image vs. 200ms / image for VGG16) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9619390388808967,
        0.9905793234340708
      ],
      "excerpt": " - is not compatible with models trained using the MATLAB code due to the minor implementation differences \n - includes approximate joint training that is 1.5x faster than alternating optimization (for VGG16) -- see these slides for more information \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9777589556803118,
        0.8503523529798234
      ],
      "excerpt": "Please see the official README.md for more details. \nFaster R-CNN was initially described in an arXiv tech report and was subsequently published in NIPS 2015. \n",
      "technique": "Supervised classification"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Pre-trained ImageNet models can be downloaded for the three networks described in the paper: ZF and VGG16.\n\n```Shell\ncd $FRCN_ROOT\n./data/scripts/fetch_imagenet_models.sh\n```\nVGG16 comes from the [Caffe Model Zoo](https://github.com/BVLC/caffe/wiki/Model-Zoo), but is provided here for your convenience.\nZF was trained at MSRA.\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lincaiming/py-faster-rcnn-update/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 20 Dec 2021 20:18:44 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lincaiming/py-faster-rcnn-update/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "lincaiming/py-faster-rcnn-update",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/docker/gpu/Dockerfile",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/docker/cpu/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/lincaiming/py-faster-rcnn-update/tree/master/caffe-fast-rcnn/docs"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/02-fine-tuning.ipynb",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/pascal-multilabel-with-datalayer.ipynb",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/net_surgery.ipynb",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/detection.ipynb",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/01-learning-lenet.ipynb",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/brewing-logreg.ipynb",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/00-classification.ipynb",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/siamese/mnist_siamese.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/experiments/scripts/fast_rcnn.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/experiments/scripts/faster_rcnn_end2end.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/experiments/scripts/faster_rcnn_alt_opt.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/data/scripts/fetch_faster_rcnn_models.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/data/scripts/fetch_selective_search_data.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/data/scripts/fetch_imagenet_models.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/scripts/deploy_docs.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/scripts/build_docs.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/scripts/download_model_from_gist.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/scripts/upload_model_to_gist.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/scripts/gather_examples.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/scripts/travis/install-python-deps.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/scripts/travis/test.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/scripts/travis/defaults.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/scripts/travis/setup-venv.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/scripts/travis/configure-make.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/scripts/travis/configure.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/scripts/travis/build.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/scripts/travis/install-deps.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/scripts/travis/configure-cmake.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/imagenet/create_imagenet.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/imagenet/resume_training.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/imagenet/train_caffenet.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/imagenet/make_imagenet_mean.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/cifar10/create_cifar10.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/cifar10/train_quick.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/cifar10/train_full_sigmoid.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/cifar10/train_full_sigmoid_bn.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/cifar10/train_full.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/mnist/train_lenet_adam.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/mnist/train_lenet_consolidated.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/mnist/train_lenet_docker.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/mnist/train_mnist_autoencoder_adagrad.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/mnist/train_lenet_rmsprop.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/mnist/create_mnist.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/mnist/train_mnist_autoencoder_nesterov.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/mnist/train_lenet.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/mnist/train_mnist_autoencoder.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/mnist/train_mnist_autoencoder_adadelta.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/siamese/create_mnist_siamese.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/examples/siamese/train_mnist_siamese.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/tools/extra/parse_log.sh",
      "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/caffe-fast-rcnn/tools/extra/launch_resize_and_crop_images.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Download the training, validation, test data and VOCdevkit\n\n\t```Shell\n\twget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtrainval_06-Nov-2007.tar\n\twget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtest_06-Nov-2007.tar\n\twget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCdevkit_08-Jun-2007.tar\n\t```\n\n2. Extract all of these tars into one directory named `VOCdevkit`\n\n\t```Shell\n\ttar xvf VOCtrainval_06-Nov-2007.tar\n\ttar xvf VOCtest_06-Nov-2007.tar\n\ttar xvf VOCdevkit_08-Jun-2007.tar\n\t```\n\n3. It should have this basic structure\n\n\t```Shell\n  \t$VOCdevkit/                           #: development kit\n  \t$VOCdevkit/VOCcode/                   #: VOC utility code\n  \t$VOCdevkit/VOC2007                    #: image sets, annotations, etc.\n  \t#: ... and several other directories ...\n  \t```\n\n4. Create symlinks for the PASCAL VOC dataset\n\n\t```Shell\n    cd $FRCN_ROOT/data\n    ln -s $VOCdevkit VOCdevkit2007\n    ```\n    Using symlinks is a good idea because you will likely want to share the same PASCAL dataset installation between multiple projects.\n5. [Optional] follow similar steps to get PASCAL VOC 2010 and 2012\n6. [Optional] If you want to use COCO, please see some notes under `data/README.md`\n7. Follow the next sections to download pre-trained ImageNet models\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Clone the Faster R-CNN repository\n  ```Shell\n  #: Make sure to clone with --recursive\n  git clone --recursive https://github.com/rbgirshick/py-faster-rcnn.git\n  ```\n\n2. We'll call the directory that you cloned Faster R-CNN into `FRCN_ROOT`\n\n   *Ignore notes 1 and 2 if you followed step 1 above.*\n\n   **Note 1:** If you didn't clone Faster R-CNN with the `--recursive` flag, then you'll need to manually clone the `caffe-fast-rcnn` submodule:\n    ```Shell\n    git submodule update --init --recursive\n    ```\n    **Note 2:** The `caffe-fast-rcnn` submodule needs to be on the `faster-rcnn` branch (or equivalent detached state). This will happen automatically *if you followed step 1 instructions*.\n\n3. Build the Cython modules\n    ```Shell\n    cd $FRCN_ROOT/lib\n    make\n    ```\n\n4. Build Caffe and pycaffe\n    ```Shell\n    cd $FRCN_ROOT/caffe-fast-rcnn\n    #: Now follow the Caffe installation instructions here:\n    #:   http://caffe.berkeleyvision.org/installation.html\n\n    #: If you're experienced with Caffe and have all of the requirements installed\n    #: and your Makefile.config in place, then simply do:\n    make -j8 && make pycaffe\n    ```\n\n5. Download pre-computed Faster R-CNN detectors\n    ```Shell\n    cd $FRCN_ROOT\n    ./data/scripts/fetch_faster_rcnn_models.sh\n    ```\n\n    This will populate the `$FRCN_ROOT/data` folder with `faster_rcnn_models`. See `data/README.md` for details.\n    These models were trained on VOC 2007 trainval.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8864574716181884,
        0.8028459453632889
      ],
      "excerpt": "Requirements: hardware \nBasic installation \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lincaiming/py-faster-rcnn-update/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "C++",
      "Python",
      "Cuda",
      "CMake",
      "MATLAB",
      "Shell",
      "Makefile",
      "C",
      "CSS",
      "HTML",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/lincaiming/py-faster-rcnn-update/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'COPYRIGHT\\n\\nAll contributions by the University of California:\\nCopyright (c) 2014-2017 The Regents of the University of California (Regents)\\nAll rights reserved.\\n\\nAll other contributions:\\nCopyright (c) 2014-2017, the respective contributors\\nAll rights reserved.\\n\\nCaffe uses a shared copyright model: each contributor holds copyright over\\ntheir contributions to Caffe. The project versioning records all such\\ncontribution and copyright details. If a contributor wants to further mark\\ntheir specific copyright on a particular contribution, they should indicate\\ntheir copyright solely in the commit message of the change when it is\\ncommitted.\\n\\nLICENSE\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met: \\n\\n1. Redistributions of source code must retain the above copyright notice, this\\n   list of conditions and the following disclaimer. \\n2. Redistributions in binary form must reproduce the above copyright notice,\\n   this list of conditions and the following disclaimer in the documentation\\n   and/or other materials provided with the distribution. \\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\nCONTRIBUTION AGREEMENT\\n\\nBy contributing to the BVLC/caffe repository through pull-request, comment,\\nor otherwise, the contributor releases their content to the\\nlicense and copyright terms herein.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "py-faster-rcnn has been deprecated. Please see [Detectron](https://github.com/facebookresearch/Detectron), which includes an implementation of [Mask R-CNN](https://arxiv.org/abs/1703.06870).",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "py-faster-rcnn-update",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "lincaiming",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lincaiming/py-faster-rcnn-update/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**NOTE** If you are having issues compiling and you are using a recent version of CUDA/cuDNN, please consult [this issue](https://github.com/rbgirshick/py-faster-rcnn/issues/509?_pjax=%23js-repo-pjax-container#issuecomment-284133868) for a workaround\n\n1. Requirements for `Caffe` and `pycaffe` (see: [Caffe installation instructions](http://caffe.berkeleyvision.org/installation.html))\n\n  **Note:** Caffe *must* be built with support for Python layers!\n\n  ```make\n  #: In your Makefile.config, make sure to have this line uncommented\n  WITH_PYTHON_LAYER := 1\n  #: Unrelatedly, it's also recommended that you use CUDNN\n  USE_CUDNN := 1\n  ```\n\n  You can download my [Makefile.config](https://dl.dropboxusercontent.com/s/6joa55k64xo2h68/Makefile.config?dl=0) for reference.\n2. Python packages you might not have: `cython`, `python-opencv`, `easydict`\n3. [Optional] MATLAB is required for **official** PASCAL VOC evaluation only. The code now includes unofficial Python evaluation code.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "1. For training smaller networks (ZF, VGG_CNN_M_1024) a good GPU (e.g., Titan, K20, K40, ...) with at least 3G of memory suffices\n2. For training Fast R-CNN with VGG16, you'll need a K40 (~11G of memory)\n3. For training the end-to-end version of Faster R-CNN with VGG16, 3G of GPU memory is sufficient (using CUDNN)\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 20 Dec 2021 20:18:44 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Clone the Faster R-CNN repository\n  ```Shell\n  #: Make sure to clone with --recursive\n  git clone --recursive https://github.com/rbgirshick/py-faster-rcnn.git\n  ```\n\n2. We'll call the directory that you cloned Faster R-CNN into `FRCN_ROOT`\n\n   *Ignore notes 1 and 2 if you followed step 1 above.*\n\n   **Note 1:** If you didn't clone Faster R-CNN with the `--recursive` flag, then you'll need to manually clone the `caffe-fast-rcnn` submodule:\n    ```Shell\n    git submodule update --init --recursive\n    ```\n    **Note 2:** The `caffe-fast-rcnn` submodule needs to be on the `faster-rcnn` branch (or equivalent detached state). This will happen automatically *if you followed step 1 instructions*.\n\n3. Build the Cython modules\n    ```Shell\n    cd $FRCN_ROOT/lib\n    make\n    ```\n\n4. Build Caffe and pycaffe\n    ```Shell\n    cd $FRCN_ROOT/caffe-fast-rcnn\n    #: Now follow the Caffe installation instructions here:\n    #:   http://caffe.berkeleyvision.org/installation.html\n\n    #: If you're experienced with Caffe and have all of the requirements installed\n    #: and your Makefile.config in place, then simply do:\n    make -j8 && make pycaffe\n    ```\n\n5. Download pre-computed Faster R-CNN detectors\n    ```Shell\n    cd $FRCN_ROOT\n    ./data/scripts/fetch_faster_rcnn_models.sh\n    ```\n\n    This will populate the `$FRCN_ROOT/data` folder with `faster_rcnn_models`. See `data/README.md` for details.\n    These models were trained on VOC 2007 trainval.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "*After successfully completing [basic installation](#installation-sufficient-for-the-demo)*, you'll be ready to run the demo.\n\nTo run the demo\n```Shell\ncd $FRCN_ROOT\n./tools/demo.py\n```\nThe demo performs detection using a VGG16 network trained for detection on PASCAL VOC 2007.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Download the training, validation, test data and VOCdevkit\n\n\t```Shell\n\twget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtrainval_06-Nov-2007.tar\n\twget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtest_06-Nov-2007.tar\n\twget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCdevkit_08-Jun-2007.tar\n\t```\n\n2. Extract all of these tars into one directory named `VOCdevkit`\n\n\t```Shell\n\ttar xvf VOCtrainval_06-Nov-2007.tar\n\ttar xvf VOCtest_06-Nov-2007.tar\n\ttar xvf VOCdevkit_08-Jun-2007.tar\n\t```\n\n3. It should have this basic structure\n\n\t```Shell\n  \t$VOCdevkit/                           #: development kit\n  \t$VOCdevkit/VOCcode/                   #: VOC utility code\n  \t$VOCdevkit/VOC2007                    #: image sets, annotations, etc.\n  \t#: ... and several other directories ...\n  \t```\n\n4. Create symlinks for the PASCAL VOC dataset\n\n\t```Shell\n    cd $FRCN_ROOT/data\n    ln -s $VOCdevkit VOCdevkit2007\n    ```\n    Using symlinks is a good idea because you will likely want to share the same PASCAL dataset installation between multiple projects.\n5. [Optional] follow similar steps to get PASCAL VOC 2010 and 2012\n6. [Optional] If you want to use COCO, please see some notes under `data/README.md`\n7. Follow the next sections to download pre-trained ImageNet models\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "To train and test a Faster R-CNN detector using the **alternating optimization** algorithm from our NIPS 2015 paper, use `experiments/scripts/faster_rcnn_alt_opt.sh`.\nOutput is written underneath `$FRCN_ROOT/output`.\n\n```Shell\ncd $FRCN_ROOT\n./experiments/scripts/faster_rcnn_alt_opt.sh [GPU_ID] [NET] [--set ...]\n#: GPU_ID is the GPU you want to train on\n#: NET in {ZF, VGG_CNN_M_1024, VGG16} is the network arch to use\n#: --set ... allows you to specify fast_rcnn.config options, e.g.\n#:   --set EXP_DIR seed_rng1701 RNG_SEED 1701\n```\n\n(\"alt opt\" refers to the alternating optimization training algorithm described in the NIPS paper.)\n\nTo train and test a Faster R-CNN detector using the **approximate joint training** method, use `experiments/scripts/faster_rcnn_end2end.sh`.\nOutput is written underneath `$FRCN_ROOT/output`.\n\n```Shell\ncd $FRCN_ROOT\n./experiments/scripts/faster_rcnn_end2end.sh [GPU_ID] [NET] [--set ...]\n#: GPU_ID is the GPU you want to train on\n#: NET in {ZF, VGG_CNN_M_1024, VGG16} is the network arch to use\n#: --set ... allows you to specify fast_rcnn.config options, e.g.\n#:   --set EXP_DIR seed_rng1701 RNG_SEED 1701\n```\n\nThis method trains the RPN module jointly with the Fast R-CNN network, rather than alternating between training the two. It results in faster (~ 1.5x speedup) training times and similar detection accuracy. See these [slides](https://www.dropbox.com/s/xtr4yd4i5e0vw8g/iccv15_tutorial_training_rbg.pdf?dl=0) for more details.\n\nArtifacts generated by the scripts in `tools` are written in this directory.\n\nTrained Fast R-CNN networks are saved under:\n\n```\noutput/<experiment directory>/<dataset name>/\n```\n\nTest outputs are saved under:\n\n```\noutput/<experiment directory>/<dataset name>/<network snapshot name>/\n```\n",
      "technique": "Header extraction"
    }
  ]
}