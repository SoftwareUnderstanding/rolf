{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1708.03898",
      "https://arxiv.org/abs/1505.04597",
      "https://arxiv.org/abs/1610.02391"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- [1] **U-Net: Convolutional Networks for Biomedical Image Segmentation**, *Olaf Ronneberger, Philipp Fischer, Thomas Brox*  \n[![arXiv](https://img.shields.io/badge/arXiv-1505.04597-b31b1b.svg)](https://arxiv.org/abs/1505.04597)\n- [2] **Grad-CAM: Visual Explanations from Deep Networks via Gradient-based Localization**, *Ramprasaath R. Selvaraju, Michael Cogswell, et al.*\n[![arXiv](https://img.shields.io/badge/arXiv-1610.02391-b31b1b.svg)](https://arxiv.org/abs/1610.02391)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9139304303120592
      ],
      "excerpt": "<a href=\"https://www.kaggle.com/luanademi/visualgo\"><img src=\"https://kaggle.com/static/images/open-in-kaggle.svg\" alt=\"Open In Kaggle\"></a> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8957010020063867
      ],
      "excerpt": "https://github.com/maciejczyzewski/neural-chessboard  \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/LuanAdemi/VisualGo",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-01-25T18:27:28Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-02-26T16:55:03Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9633570279456198
      ],
      "excerpt": "VisualGo is a toolset of different machine learning algorithms to extract the current go board state from an image. It features two models, which first find the go board in the given image and then predict the current state. The basic pipeline of the whole model looks like the following: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9842633401065998,
        0.9814907405290556
      ],
      "excerpt": "As seen in the figure above, the model is divided into two sub-models and a handcrafted transformer, which performs a perspective warp and threasholding on the images using the predicted masks. \nThe Segmentation Model is a basic UNet architecture [1] trained on ~800 rendered images of go boards. They are resized to 128x128 pixels and feeded into the network in batches of 16 images. It is a basic binary segmentation problem, hence the performance of the model is pretty good. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9465760268518927,
        0.9435480252167703,
        0.9491143539014111
      ],
      "excerpt": "This repository contains a set of notebooks explaining every model in depth and analysing their perfomance using <a href=\"https://captum.ai/\">Captum</a>. \nHere is a basic table of contents: \nEDA: Exploratory Data Analysis of the VisualGo Dataset \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490037945672047
      ],
      "excerpt": "MaskTransformer: Explaining the Transformer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9690790248688931
      ],
      "excerpt": "As already mentioned, the images are actually photorealistic renders of random go boards with randomized materials, camera positions and lighting (a deeper insight on how the data was generated is given in the EDA notebook).  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Training a CNN to recognize the current Go position with photorealistic renders",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/LuanAdemi/VisualGo/releases",
    "technique": "GitHub API"
  },
  "executable_example": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://mybinder.org/v2/gh/LuanAdemi/VisualGo/HEAD",
      "technique": "Regular expression"
    }
  ],
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 02:45:50 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/LuanAdemi/VisualGo/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "LuanAdemi/VisualGo",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/LuanAdemi/VisualGo/main/MaskTransformer.ipynb",
      "https://raw.githubusercontent.com/LuanAdemi/VisualGo/main/Segmentation.ipynb",
      "https://raw.githubusercontent.com/LuanAdemi/VisualGo/main/Position.ipynb",
      "https://raw.githubusercontent.com/LuanAdemi/VisualGo/main/EDA.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8272705498561341
      ],
      "excerpt": "It was rendered using blender and the following <a href=\"https://gist.github.com/LuanAdemi/6aac83f06d8d4394abc22e450af18a41\">script</a>. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8080413881278252
      ],
      "excerpt": "https://github.com/maciejczyzewski/neural-chessboard  \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/LuanAdemi/VisualGo/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2021 Luan Ademi\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "VisualGo",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "VisualGo",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "LuanAdemi",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/LuanAdemi/VisualGo/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 02:45:50 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "unet",
      "gogame",
      "pytorch",
      "python",
      "captum",
      "resnet",
      "blender3d"
    ],
    "technique": "GitHub API"
  }
}