{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1406.2661"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- https://www.cc.gatech.edu/~hays/7476/projects/Avery_Wenchen/\n- https://www.tensorflow.org/tutorials/generative/dcgan\n- https://arxiv.org/abs/1406.2661\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rdutta1999/Patched-Face-Regeneration-GAN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-09-18T17:46:46Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-12-09T17:27:42Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "In this project, my aim was to develop a model that could regenerate patched/covered parts of human faces, and achieve believable results. I used the [Celeb-A](https://www.kaggle.com/jessicali9530/celeba-dataset) dataset, and created a Generative Adversarial Network with a Denoising Autoencoder as the Generator and a Deep Convolutional Network as the Discriminator. I chose this architecture based on *Avery Allen and Wenchen Li*'s [Generative Adversarial Denoising Autoencoder for Face Completion](https://www.cc.gatech.edu/~hays/7476/projects/Avery_Wenchen/).\n\nThe Denoising Autoencoder has 'relu' activations in the middle layers while the output layer had a 'tanh' activation. Each Convolution layer was followed by a BatchNormalization layer. The Discriminator has 'LeakyReLU' activations for the Convolution part, with a BatchNormalization layer following every Conv layer. At the end, the output from the CNN segment was flattened and connected to a Dense layer with 1 node, having 'sigmoid' as the activation function. This would enable the discrimator to predict the probability that the input image is real.\n\nI added distortions to the images in two ways:-\n- Added random Gaussian noise.\n- Added random sized Black Patches.\n\nThe entire training was done on a GTX 1080 GPU, and took about 12days.\n\nThe latest checkpoints and the saved generator and discriminator can be found [here](https://drive.google.com/drive/folders/13wUgCcENajkPZ4MHz2bHrJtQepyVDvtb?usp=sharing).\n\nA few sample generated images are present in `saved_imgs`.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Regenerating Patched or Blacked out parts of human faces using GAN and Denoising Autoencoder.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rdutta1999/Patched-Face-Regeneration-GAN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Wed, 22 Dec 2021 22:40:00 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/rdutta1999/Patched-Face-Regeneration-GAN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "rdutta1999/Patched-Face-Regeneration-GAN",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/rdutta1999/Patched-Face-Regeneration-GAN/master/Face_Generation.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1) Create a new Python/Anaconda environment (optional but recommended). You might use the `environment.yml` file for this purpose (Skip Step-2 in that case).\n\n2) Install the necessary packages. Refer to the packages mentioned in `environment.yml`.\n\n3) Download the training checkpoints and saved generator and discriminator models from [here](https://drive.google.com/drive/folders/13wUgCcENajkPZ4MHz2bHrJtQepyVDvtb?usp=sharing).\n\n4) Download the [Celeb-A](https://www.kaggle.com/jessicali9530/celeba-dataset) dataset, and place it in the directory in the following manner:-\n<pre>\n\u251c\u2500\u2500\u2500 Patched-Face-Regeneration-GAN\n     \u251c\u2500\u2500\u2500 ..\n     \u251c\u2500\u2500\u2500 saved_imgs     \n     \u251c\u2500\u2500\u2500 training_checkpoints\n     \u251c\u2500\u2500\u2500 saved_discriminator\n     \u251c\u2500\u2500\u2500 saved_generator\n     \u251c\u2500\u2500\u2500 discriminator.png\n     \u251c\u2500\u2500\u2500 generator.png\n     \u251c\u2500\u2500\u2500 inference_output.png\n     \u251c\u2500\u2500\u2500 environment.yml\n     \u251c\u2500\u2500\u2500 Face_Generation.ipynb    \n     \u2514\u2500\u2500\u2500 images \n           \u2514\u2500\u2500\u2500 img_align_celeba\n               \u251c\u2500\u2500\u2500 000001.jpg\n               \u251c\u2500\u2500\u2500 000002.jpg\n               \u251c\u2500\u2500\u2500 000003.jpg\n               \u251c\u2500\u2500\u2500 000004.jpg\n               \u251c\u2500\u2500\u2500 000005.jpg\n               \u251c\u2500\u2500\u2500 ..\n               \u251c\u2500\u2500\u2500 ..\n               \u251c\u2500\u2500\u2500 202597.jpg\n               \u251c\u2500\u2500\u2500 202598.jpg\n               \u2514\u2500\u2500\u2500 202599.jpg\n</pre>\n\n",
      "technique": "Header extraction"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/rdutta1999/Patched-Face-Regeneration-GAN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Rajdeep Dutta\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Patched-Face-Regeneration-GAN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Patched-Face-Regeneration-GAN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "rdutta1999",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rdutta1999/Patched-Face-Regeneration-GAN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Wed, 22 Dec 2021 22:40:00 GMT"
    },
    "technique": "GitHub API"
  }
}