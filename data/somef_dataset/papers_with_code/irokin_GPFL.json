{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use this codebase, please cite our paper:\n```\n@misc{gu2020learning,\n    title={Towards Learning Instantiated Logical Rules from Knowledge Graphs},\n    author={Yulong Gu and Yu Guan and Paolo Missier},\n    year={2020},\n    eprint={2003.06071},\n    archivePrefix={arXiv},\n    primaryClass={cs.AI}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{gu2020learning,\n    title={Towards Learning Instantiated Logical Rules from Knowledge Graphs},\n    author={Yulong Gu and Yu Guan and Paolo Missier},\n    year={2020},\n    eprint={2003.06071},\n    archivePrefix={arXiv},\n    primaryClass={cs.AI}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/irokin/GPFL",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-13T00:58:05Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-06-05T05:00:36Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9292864670843491
      ],
      "excerpt": "GPFL (paper) is a probabilistic logical rule learner optimized to mine instantiated rules that contain constants from knowledge graphs. This repository contains code necessary to run the GPFL system. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8038528162698834
      ],
      "excerpt": "- Fully implemented on Neo4j graph database \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9559238394242022
      ],
      "excerpt": "- Toolkits for data preparation and rule analysis \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8989446838091142
      ],
      "excerpt": "and used to explain concept ADVISED_BY when translated in logic term: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9812050170820424
      ],
      "excerpt": "where PUBLISHES(X, A), PUBLISHES(Y, A) is the premises and ADVISED_BY(X, Y) the consequence. This kind of rules that do not contain constants are known as abstract rules. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8470324002518218
      ],
      "excerpt": "we can derive an instantiated rule specifying the correlation pattern (used as constraints in inference) between person314 and person240 as: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9166262698899472
      ],
      "excerpt": "The rules.txt file produced by running -r and -l contains overfitting rules regardless of the value of the overfitting_factor, only when evaluating the rules for precision or link prediction, the overfitting rules in rules.txt will be removed (in memory, still persistent in the file). To create a view of non-overfitting rules, set overfitting_factor to a value > 0, then run: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9615359726446083,
        0.8799444772238174,
        0.8357266650973545
      ],
      "excerpt": "GPFL is memory-intensive in that the volume of instantiated rules is often inordinate, and the intention of discovering top rules to explain existing facts requires saving rules in memory. Rule learning is also time-consuming on large knowledge graphs. GPFL allows the use of time and space constraints to adapt the system to various task requirements. Here we introduce options you can tune in config.json file if you find the runtime is too long and out-of-memory happens too often.  \nlearn_groundings: max number of groundings for evaluating a rule during learning. \napply_groundings: max number of groundings for evaluating a rule during application. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9660867767260385
      ],
      "excerpt": "To evaluate the impact of removal of overffiting rules on link prediction performance, we have re-split FB15K-237 and WN18RR in a 6:2:2 ratio for larger validation sets. The corresponding re-splits can be found in folder data/FB15K-237-LV and WN18RR-LV. To evaluate FB15K-237 in the random setting with validation, change the value of option overfitting_factor from 0 to 0.1 in file data/FB15K-237-LV/config.json, then run: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "GPFL - Learning logical rules from knowledge graphs.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/irokin/GPFL/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 10:05:46 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/irokin/GPFL/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "irokin/GPFL",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8224384430937229
      ],
      "excerpt": "On WN18RR, run: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8008331685760428
      ],
      "excerpt": "gradle run --args=\"-h\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9188502590087513,
        0.8409107160826996
      ],
      "excerpt": "Given home folder Foo, place your triple file in Foo/data/ and rename the triple file to train.txt, then run: \ngradle run --args=\"-sbg Foo\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9422556156547831,
        0.8842319004111463
      ],
      "excerpt": "Given home folder Foo that contains configuration file config.json with home option set to Foo, place your splits in Foo/data/ and name training file train.txt, test file test.txt and validation file valid.txt, then run: \ngradle run --args=\"-c Foo/config.json -bg\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8913822526126953,
        0.8842319004111463,
        0.8125918179275713,
        0.8015498530699996,
        0.8842319004111463
      ],
      "excerpt": "Given home folder Foo that contains configuration file config.json with home option set to Foo, if you want to create training/test/validation splits in 6:2:2 ratio, add line \"split_ratio\": [0.6,0.2] to config.json, and run: \ngradle run --args=\"-c Foo/config.json -sg\" \nthe splits will be at Foo/data. \nGiven home folder Foo that contains configuration file config.json with home option set to Foo, if you only want to learn rules for a collection of n random targets, add line \"randomly_selected_relations\": n to config.json, and run: \ngradle run --args=\"-c Foo/config.json -r\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8842319004111463,
        0.852226886508419,
        0.8842319004111463
      ],
      "excerpt": "gradle run --args=\"-c Foo/config.json -r\" \nGiven home folder Foo that contains configuration file config.json with home option set to Foo, if you want to sample n relationship types as targets from the database, add line \"randomly_selected_relations\": n to config.json, and run: \ngradle run --args=\"-c Foo/config.json -st\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8409107160826996
      ],
      "excerpt": "gradle run --args=\"-e Foo\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8409107160826996,
        0.8432476955680098
      ],
      "excerpt": "gradle run --args=\"-ea Foo\" \nGiven home folder Foo that contains configuration file config.json with home option set to Foo, and you have produced result folders r1, r2 and r3 (each should contain eval_log.txt file) and placed them in Foo, if you want to run in ensemble mode to aggregate the best performing rules over different configurations, add line \"ensemble_bases\": [\"r1\", \"r2\", \"r3\"] and optional change out option to ensemble, run: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8842319004111463
      ],
      "excerpt": "gradle run --args=\"-c Foo/config.json -en\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8842319004111463
      ],
      "excerpt": "gradle run --args=\"-c Foo/config.json -ovf\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8033498647422475
      ],
      "excerpt": "random_walkers: number of random walkers used to sample paths.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8839499126107841
      ],
      "excerpt": "gradle run --args=\"-c data/FB15K-237/config.json -r\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8839499126107841
      ],
      "excerpt": "gradle run --args=\"-c data/WN18RR/config.json -r\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8839499126107841,
        0.8987571929697405
      ],
      "excerpt": "gradle run --args=\"-c data/FB15K-237-LV/config.json -r\" \nFor evaluation with validation on WN18RR, change the value of overfitting_factor to 0.1 in file data/WN18RR-LV/config.json, then run: \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/irokin/GPFL/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Java"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b\"# The Prosperity Public License 3.0.0\\n\\nContributor: Yulong Gu \\n\\nSource Code: https://github.com/irokin/GPFL\\n\\n## Purpose\\n\\nThis license allows you to use and share this software for noncommercial purposes for free and to try this software for commercial purposes for thirty days.\\n\\n## Agreement\\n\\nIn order to receive this license, you have to agree to its rules.  Those rules are both obligations under that agreement and conditions to your license.  Don't do anything with this software that triggers a rule you can't or won't follow.\\n\\n## Notices\\n\\nMake sure everyone who gets a copy of any part of this software from you, with or without changes, also gets the text of this license and the contributor and source code lines above.\\n\\n## Commercial Trial\\n\\nLimit your use of this software for commercial purposes to a thirty-day trial period.  If you use this software for work, your company gets one trial period for all personnel, not one trial per person.\\n\\n## Contributions Back\\n\\nDeveloping feedback, changes, or additions that you contribute back to the contributor on the terms of a standardized public software license such as the Blue Oak Model License 1.0.0, the Apache License 2.0, the MIT license, or the two-clause BSD license doesn't count as use for a commercial purpose.\\n\\n## Personal Uses\\n\\nPersonal use for research, experiment, and testing for the benefit of public knowledge, personal study, private entertainment, hobby projects, amateur pursuits, or religious observance, without any anticipated commercial application, doesn't count as use for a commercial purpose.\\n\\n## Noncommercial Organizations\\n\\nUse by any charitable organization, educational institution, public research organization, public safety or health organization, environmental protection organization, or government institution doesn't count as use for a commercial purpose regardless of the source of funding or obligations resulting from the funding.\\n\\n## Defense\\n\\nDon't make any legal claim against anyone accusing this software, with or without changes, alone or with other technology, of infringing any patent.\\n\\n## Copyright\\n\\nThe contributor licenses you to do everything with this software that would otherwise infringe their copyright in it.\\n\\n## Patent\\n\\nThe contributor licenses you to do everything with this software that would otherwise infringe any patents they can license or become able to license.\\n\\n## Reliability\\n\\nThe contributor can't revoke this license.\\n\\n## Excuse\\n\\nYou're excused for unknowingly breaking Notices if you take all practical steps to comply within thirty days of learning you broke the rule.\\n\\n## No Liability\\n\\nAs far as the law allows, this software comes as is, without any warranty or condition, and the contributor won't be liable to anyone for any damages related to this software or this license, under any kind of legal claim.\\n\"",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "GPFL - Graph Path Feature Learning",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "GPFL",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "irokin",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/irokin/GPFL/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Java >= 1.8\n- Gradle >= 5.6.4\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Given home folder `Foo` that contains configuration file `config.json` with `home` option set to `Foo`, run:\n```shell script\ngradle run --args=\"-c Foo/config.json -l\"\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Given home folder `Foo` that contains configuration file `config.json` with `home` option set to `Foo` and `out` to `output`, and the `predictions.txt` that contains predictions made by GPFL is placed in `output`, run:\n ```shell script\n gradle run --args=\"-c Foo/config.json -a\"\n ```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Sat, 25 Dec 2021 10:05:46 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "We start by learning rules from the UWCSE knowledge graph, a small graph in the academia domain. In `data/UWCSE` folder you can find the inputs GPFL requires for learning:\n- `data/<train/test/valid>.txt`: triple files for training, test and validation.\n- `data/<annotated_train/test/valid>.txt`: as GPFL runs on Neo4j database, we use indexing to optimize data querying. These files contain annotated training, test, validation triples with Neo4j ids.\n- `data/databases`: contains the Neo4j database. It can also be conveniently used for EDA with [Cypher](https://neo4j.com/developer/cypher-query-language/) and its [Data Science ecosystem](https://neo4j.com/graph-data-science-library/).\n- `config.json`: the GPFL configuration file.\n\nNow we give an introduction on some options in a GPFL configuration file:\n- `home`: home directory of your data.\n- `out`: output directory.\n- `ins_depth`: max length of instantiated rules.\n- `car_depth`: max length of closed abstract rules.\n- `conf`: confidence threshold.\n- `support`: support (number of correct predictions) threshold.\n- `head_coverage`: head coverage threshold.\n- `saturation`: template saturation threshold.\n- `batch_size`: size of batch over which the saturation is evaluated.\n- `thread_number`: number of running threads. Please note as each thread is responsible for specializing a template or grounding a rule, employing large number of threads might cause out of memeory issue.\n\nTo learn rules for UWCSE, run:\n```\ngradle run --args=\"-c data/UWCSE/config.json -r\"\n```\nwhere option `-c` specifies the location of the GPFL configuration file, and `-r` executes the chain of rule learning, application and evaluation for link prediction. \n \nOnce the program finishes, results will be saved at folder `data/UWCSE/ins3-car3`. Now navigate to the result folder, file `rules.txt` records all learned rules. To get the top rules, run following command to sort rules by quality:\n```\ngradle run --args=\"-or data/UWCSE/ins3-car3\"\n```\nIn the sorted `rules.txt` file, each line has values:\n```\nType  Rule                                                 Conf     HC       VP       Supp  BG\nCAR   ADVISED_BY(X,Y) <- PUBLISHES(X,V1), PUBLISHES(Y,V1)  0.09333  0.31343  0.03015  21    220\n```\nwhere `conf` is the confidence, `HC` head coverage, `VP` validation precision, `supp` support, and `BG` body grounding (total predictions).\n\nTo check the quality/type/length distribution of the learned rules, run:\n```\ngradle run --args=\"-c data/UWCSE/config.json -ra\"\n```\n\nTo find explanations about predicted and existing facts (test triples) in terms of rules, check `verifications.txt` file in the result folder, where an entry looks like this:\n```\nHead Query: person211\tPUBLISHES\ttitle88\nTop Answer: 1\tperson415\tPUBLISHES\ttitle88\nBAR\tPUBLISHES(person415,Y) <- PUBLISHES(V1,Y), PUBLISHES(V1,title12)\t0.40426\nBAR\tPUBLISHES(person415,Y) <- PUBLISHES(V1,Y), PUBLISHES(V1,V2), PUBLISHES(person211,V2)\t0.40299\nBAR\tPUBLISHES(person415,Y) <- PUBLISHES(V1,Y), PUBLISHES(V1,title182)\t0.39583\n\nTop Answer: 2\tperson211\tPUBLISHES\ttitle88\nBAR\tPUBLISHES(person211,Y) <- PUBLISHES(V1,Y), PUBLISHES(V1,V2), PUBLISHES(person284,V2)\t0.35294\nBAR\tPUBLISHES(person211,Y) <- PUBLISHES(V1,Y), PUBLISHES(V1,title259)\t0.325\nBAR\tPUBLISHES(person211,Y) <- PUBLISHES(V1,Y), PUBLISHES(V1,title241)\t0.325\n\nTop Answer: 3\tperson240\tPUBLISHES\ttitle88\nBAR\tPUBLISHES(person240,Y) <- PUBLISHES(V1,Y), PUBLISHES(V1,V2), PUBLISHES(person161,V2)\t0.2459\nBAR\tPUBLISHES(person240,Y) <- PUBLISHES(V1,Y), PUBLISHES(V1,title268)\t0.2381\nBAR\tPUBLISHES(person240,Y) <- PUBLISHES(V1,Y), PUBLISHES(V1,V2), PUBLISHES(person415,V2)\t0.17647\n\nCorrect Answer: 2\tperson211\tPUBLISHES\ttitle88\nBAR\tPUBLISHES(person211,Y) <- PUBLISHES(V1,Y), PUBLISHES(V1,V2), PUBLISHES(person284,V2)\t0.35294\nBAR\tPUBLISHES(person211,Y) <- PUBLISHES(V1,Y), PUBLISHES(V1,title259)\t0.325\nBAR\tPUBLISHES(person211,Y) <- PUBLISHES(V1,Y), PUBLISHES(V1,title241)\t0.325\n```\n`Head Query: person211\tPUBLISHES\ttitle88` means that GPFL corrupts the known fact `person211\tPUBLISHES\ttitle88` into a head query `?\tPUBLISHES\ttitle88`, and asks the learned rules to suggest candidates to replace `?`. If `person211` is proposed in the answer set, it is considered as a correct answer. In this example, the correct answer ranks 2 as in:\n```\nTop Answer: 2\tperson211\tPUBLISHES\ttitle88\nBAR\tPUBLISHES(person211,Y) <- PUBLISHES(V1,Y), PUBLISHES(V1,V2), PUBLISHES(person284,V2)\t0.35294\nBAR\tPUBLISHES(person211,Y) <- PUBLISHES(V1,Y), PUBLISHES(V1,title259)\t0.325\nBAR\tPUBLISHES(person211,Y) <- PUBLISHES(V1,Y), PUBLISHES(V1,title241)\t0.325\n```\nwhere the following rules are top rules that suggest candidate `person211`. Therefore, these rules can be used to explain in a data-driven way why `person211` publishes paper `title88`. \n\nTo find detailed evaluation results, please refer to the `eval_log.txt` file in the result folder.\n\n",
      "technique": "Header extraction"
    }
  ]
}