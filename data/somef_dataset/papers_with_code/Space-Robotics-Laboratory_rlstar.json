{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2009.09595",
      "https://arxiv.org/abs/1909.06034",
      "https://arxiv.org/abs/2003.02655"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This platform can be cited via\n\n>[1] RL STaR Platform: Reinforcement Learning for Simulation based Training of Robots [ARXIV Link](https://arxiv.org/abs/2009.09595) \n\nThe path planning and motion control application can be cited via:\n\n>[2] PPMC Training Algorithm: A Deep Learning BasedPath Planner and Motion Controller: [IEEE Link](https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9065237) or\n[ARXIV Link](https://arxiv.org/abs/1909.06034)\n\n>[3] PPMC RL Training Algorithm: Rough Terrain Intelligent Robots through Reinforcement Learning [ARXIV Link](https://arxiv.org/abs/2003.02655)\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "* 10.0 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Space-Robotics-Laboratory/rlstar",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-10-06T05:34:11Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-04T04:42:50Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9954790768566644,
        0.973209693798367,
        0.9844165764128112,
        0.9890903304495295
      ],
      "excerpt": "This README is intended to give guidance to users about how to get started using or contributing to this open platform. \nWelcome to the Reinforcement Learning for Simulation based Training of Robots (RL STaR) Platform github page. \nRL STaR was created for robotics researchers to advance research using reinforcement learning and machine learning, and to share this work with other researchers. \nWe created RL STaR in a modular way to be easy to use and easy to share RL applications for robotics. Training in simulation offers a safer and more time efficient environment, with the prospect of later transfer results to the real robot through simulation to reality transfer (sim2real). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8212466778706808
      ],
      "excerpt": "It is recommended to use a virtual environment to contain all the python libraries. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8172871802825721
      ],
      "excerpt": "While tensorflow 2.0 is out now, 1.14 is recommended if using the OpenAI Baselines library \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9063432194656562
      ],
      "excerpt": "The Constants file is broken down into different classes that encapsulates different information. This file includes information about the robot, about the simulation conditions, about file locations and about the task, including reward function parameter values. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9420417003640005
      ],
      "excerpt": "The Task file is where the user can define what he wants the robot to learn. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9949624594487352,
        0.9815183335629294,
        0.8347594755871188
      ],
      "excerpt": "The Space Robotics Lab is utilizing the CLOVER rover for lunar surface swarm and AI applications. The system is a small, lightweight robot that mainly utilizes off the shelf components, making it easy to build several of these rovers for research applications. CLOVER is a skid steer rear wheel drive vehicle. This means that there are only two motors (one for each side), and that it turns by creating a differential in wheel speeds between the left and right side. \nRL STaR was designed to be modular. The OpenAI Gym framework makes it easy to share reinforcement learning problems with others, and this platform was intended to bridge the divide between machine learning and robotics applications. \nWe envision new applications being divided into two categories: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9734513599303842,
        0.9644664104177185
      ],
      "excerpt": "A new robotic application is when someone applies the RL STaR platform to a new robot. This could adding a bigger rover, for example. \nA new task application is when someone applies the RL STaR platform to a new task. This could be training the robot to navigate a maze, for example. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8467181502267332,
        0.852565302807718,
        0.9468733223880459
      ],
      "excerpt": "In order to add a new task, new parameters can added inside the exisiting robot's constants file as a new class. This new class should be imported into the main file as const. A new task file should also be added, calculating the reward function, observations, etc as you see fit. Make sure that the robot action space is set appropraitely, whether [0,1], [-1,1] or some other range (including discrete). The new task should also be imported into the main file \"as taskX\" (see file). \nThe other files such as the InOut file and the Simulator file should be general enough to work across robot and task applications. \nIn order to reduce the overall number of files one has to create, we decided to group tasks by robot. While this reduces the number of overall files, it comes with the necessity to manually (for now at least) specify the task to be learned via the Main file. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9885024451571705
      ],
      "excerpt": "Names of the robot components in CoppeliaSim and in the RL STaR constants.py file should be identical. Joints in CoppeliaSim are used as motors, and are set  to rotate a certain speed. The joints of the robot are defined in jointNames. The base of the robot is defined in baseName, and is used to get information about the robot, such as its position and the yaw angle from the simulator. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8285171346225786
      ],
      "excerpt": "During the training process, you can run multiple sessions of CoppeliaSim and the training code at the same time. This is useful for tuning different parameters such as the neural network or the reward function. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9619563458701985
      ],
      "excerpt": "The following command starts the training process for the \"clover-1\" environment for 1e5 timesteps. The RL algorithm chosen was PPO. The network is a custom network defined in .../RLSTaR/baselines/baselines/common/models.py. Several of the terms provide PPO2 paremers (gamma, nstep); more information can be found by going to the OpenAI Baselines website or by chekcing the code in ...RLSTaR/baselines/baselines/ppo2/ppo2.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9985507049508416
      ],
      "excerpt": "The authors of this paper belong to the Space Robotics Lab, Department of Aerospace Engeering, Tohoku University: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "RL STaR is a platform for creating AI for robotic applications. Researchers can share their work in the form of new robots or new tasks. Everything was made in a modular fashion to be easy to use and easy to share.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Space-Robotics-Laboratory/rlstar/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Thu, 30 Dec 2021 06:50:53 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Space-Robotics-Laboratory/rlstar/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Space-Robotics-Laboratory/rlstar",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Space-Robotics-Laboratory/rlstar/main/baselines/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/Space-Robotics-Laboratory/rlstar/tree/main/baselines/docs"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Space-Robotics-Laboratory/rlstar/main/baselines/docs/viz/viz.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Having a GPU allows for faster simulations. You must have an NVIDIA GPU compatible with the CUDA version you would like to run.\n\nI followed the following instructions:\nhttps://medium.com/analytics-vidhya/installing-tensorflow-with-cuda-cudnn-gpu-support-on-ubuntu-20-04-f6f67745750a\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8071294653583702,
        0.9269925888203399
      ],
      "excerpt": "You will need to clone this project from github, which will include the OpenAI Baselines library and the RL STaR code. You will also seperately need to download CoppeliaSim from their website. \nIt is recommended to use a virtual environment to contain all the python libraries. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9785605051820454,
        0.9915672500844508,
        0.9842822681151508
      ],
      "excerpt": "sudo apt-get update &amp;&amp; sudo apt-get install cmake libopenmpi-dev python3-dev zlib1g-dev \nInstall Tensorflow (see below for more info about whether to install the GPU or non GPU version) \npip install tensorflow==1.14 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9961428138875512,
        0.9585791864170388
      ],
      "excerpt": "pip install tensorflow-gpu==1.14 \nInside the RLSTaR folder, run the following command to install the necessary packages for RL STaR: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9794128747985064
      ],
      "excerpt": "Inside the RLSTaR/baselines folder, run the following command to install the necessary packages for Baselines: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9438351801307525,
        0.8733088281718793,
        0.9623668047804587,
        0.9899469170287282
      ],
      "excerpt": "You can download the right version via the Python website or any other means such as below: \nsudo apt-get-repository ppa:deadsnakes/ppa \nsudo apt-get update \nsudo apt-get install python3.6 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9036948751759806
      ],
      "excerpt": "* 1.14-GPU \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8847811107708641,
        0.9963009020052573
      ],
      "excerpt": "Running the learning algorithms with the GPU version will speed up the training process, however, the GPU must be properly setup first. See below for more information \nWhen installing tensorflow, you must specify if you want to install the gpu or non gpu version \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8949732652896917
      ],
      "excerpt": "Main File \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8371614703522298
      ],
      "excerpt": "You can then specify the task for training via the Main file, here named Clover.py. Specify the task by importing the newly created task file and the constants class. Keep the naming convention \"as taskX\" and \"as const\". \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Space-Robotics-Laboratory/rlstar/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "HTML",
      "Jupyter Notebook",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "GNU General Public License v3.0",
      "url": "https://api.github.com/licenses/gpl-3.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'The MIT License\\n\\nCopyright (c) 2017 OpenAI (http://openai.com)\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "RL STaR",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "rlstar",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Space-Robotics-Laboratory",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Space-Robotics-Laboratory/rlstar/blob/main/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "tamirblum",
        "body": "First release of RL STaR",
        "dateCreated": "2020-10-13T09:06:47Z",
        "datePublished": "2020-10-13T09:13:49Z",
        "html_url": "https://github.com/Space-Robotics-Laboratory/rlstar/releases/tag/v0.1",
        "name": "Primary release",
        "tag_name": "v0.1",
        "tarball_url": "https://api.github.com/repos/Space-Robotics-Laboratory/rlstar/tarball/v0.1",
        "url": "https://api.github.com/repos/Space-Robotics-Laboratory/rlstar/releases/32493179",
        "zipball_url": "https://api.github.com/repos/Space-Robotics-Laboratory/rlstar/zipball/v0.1"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Thu, 30 Dec 2021 06:50:53 GMT"
    },
    "technique": "GitHub API"
  },
  "support": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Please email TamirBlum1{at}gmail.com or open an issues ticket\n\n",
      "technique": "Header extraction"
    }
  ],
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "ai",
      "artificial-intelligence",
      "machine-learning",
      "robotics",
      "simulation",
      "deep-learning",
      "reinforcement-learning"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "There are three main components to the RL STaR platform: the RL library, the simulator and the Task Trainer. You should download CopelliaSim from their website which is the simulator this platform is compatible with. This platform ships with a frozen clone of Baselines, a reinforcement learning library holding a number of modern RL algorithms. This library should be swappable for a different library if you prefer to do so. The last componenet is the task trainer, which is what we created to interface between the prior two components and to train the robot for various tasks.\n\n\n![RL](./media/rlblocks.png)\n\n\n\n",
      "technique": "Header extraction"
    }
  ]
}