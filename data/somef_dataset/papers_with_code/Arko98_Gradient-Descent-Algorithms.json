{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1609.04747\n3",
      "https://arxiv.org/abs/1212.5701\n4"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1) **The Basic understanding of Gradient Descent** Source: https://towardsdatascience.com/gradient-descent-algorithm-and-its-variants-10f652806a3\n2) **Basic Gradient Descent Algorithms** Source: https://arxiv.org/abs/1609.04747\n3) **Gradient Descent with Decaying Learning Rate** Source: https://arxiv.org/abs/1212.5701\n4) **RMSProp Algorithm** Source: http://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf\n5) **AdaGrad Algorithm** Source: http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Arko98/Gradient-Descent-Algorithms",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-04-04T09:27:51Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-15T18:15:57Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Gradient descent is a first-order iterative optimization algorithm for finding a local minimum of a differentiable function. To find a local minimum of a function using gradient descent, we take steps proportional to the negative of the gradient (or approximate gradient) of the function at the current point. But if we instead take steps proportional to the positive of the gradient, we approach a local maximum of that function; the procedure is then known as gradient ascent. Gradient descent was originally proposed by Cauchy in 1847. \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9935041260372556,
        0.9757648894853759
      ],
      "excerpt": "Gradient Descent is the most common optimization algorithm in machine learning and deep learning. It is a first-order optimization algorithm. This means it only takes into account the first derivative when performing the updates on the parameters. On each iteration, we update the parameters in the opposite direction of the gradient of the objective function J(w) w.r.t the parameters where the gradient gives the direction of the steepest ascent. The size of the step we take on each iteration to reach the local minimum is determined by the learning rate \u03b1. Therefore, we follow the direction of the slope downhill until we reach a local minimum. \nLet\u2019s first see how gradient descent works on logistic regression before going into the details of its variants. For the sake of simplicity, let\u2019s assume that the logistic regression model has only two parameters: weight w and bias b. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8389406958537103
      ],
      "excerpt": "If \u03b1 is very small, it would take long time to converge and become computationally expensive. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8550917749350034
      ],
      "excerpt": "Therefore, plot the cost function against different values of \u03b1 and pick the value of \u03b1 that is right before the first value that didn\u2019t converge so that we would have a very fast learning algorithm that converges.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8619870094088035,
        0.9559856142425015
      ],
      "excerpt": "3. Make sure to scale the data if it\u2019s on a very different scales. If we don\u2019t scale the data, the level curves (contours) would be narrower and taller which means it would take longer time to converge. \nScale the data to have \u03bc = 0 and \u03c3 = 1. Below is the formula for scaling each example: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9624872730578764
      ],
      "excerpt": "For the sake of illustration, let\u2019s assume we don\u2019t have bias. If the slope of the current value of w > 0, this means that we are to the right of optimal w. Therefore, the update will be negative, and will start getting close to the optimal values of w. However, if it\u2019s negative, the update will be positive and will increase the current values of w to converge to the optimal values of w* \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8088206028028918,
        0.8428144614504048,
        0.8957267272883227
      ],
      "excerpt": "1. Continue the process until the cost function converges. That is, until the error curve becomes flat and doesn\u2019t change. \n2. In addition, on each iteration, the step would be in the direction that gives the maximum change since it\u2019s perpendicular to level curves at each step. \n1) All variations of Gradient Descent Algorithms have been implemented from Scratch using Python only for better understanding \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A collection of various gradient descent algorithms implemented in Python from scratch",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Arko98/Gradient-Descent-Algorithms/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Mon, 27 Dec 2021 17:31:32 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Arko98/Gradient-Descent-Algorithms/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Arko98/Gradient-Descent-Algorithms",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Arko98/Gradient-Descent-Algorithms/master/Examples/Nesterov%20Accelerated%20Gradient%20Descent%20Algorithm%20.ipynb",
      "https://raw.githubusercontent.com/Arko98/Gradient-Descent-Algorithms/master/Examples/Gradient%20Descent%20with%20Decaying%20Learning%20Rate.ipynb",
      "https://raw.githubusercontent.com/Arko98/Gradient-Descent-Algorithms/master/Examples/Adam.ipynb",
      "https://raw.githubusercontent.com/Arko98/Gradient-Descent-Algorithms/master/Examples/RMSProp.ipynb",
      "https://raw.githubusercontent.com/Arko98/Gradient-Descent-Algorithms/master/Examples/Adagrad.ipynb",
      "https://raw.githubusercontent.com/Arko98/Gradient-Descent-Algorithms/master/Examples/Gradient%20Descent%20Algorithm.ipynb",
      "https://raw.githubusercontent.com/Arko98/Gradient-Descent-Algorithms/master/Examples/Momentum%20Based%20Gradient%20Descent%20Algorithm.ipynb",
      "https://raw.githubusercontent.com/Arko98/Gradient-Descent-Algorithms/master/Examples/Line%20Search%20Gradient%20Descent.ipynb"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Arko98/Gradient-Descent-Algorithms/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Arkadipta De\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Gradient-Descent-Algorithms",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Gradient-Descent-Algorithms",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Arko98",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Arko98/Gradient-Descent-Algorithms/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Mon, 27 Dec 2021 17:31:32 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "ai",
      "ml",
      "machine-learning",
      "machine-learning-algorithms",
      "deep-learning",
      "deep-learning-algorithms",
      "gradient-descent",
      "gradient-descent-algorithm",
      "rmsprop",
      "adagrad",
      "adam-optimizer",
      "nesterov-accelerated-sgd",
      "nesterov-momentum",
      "nesterov",
      "momentum-optimization-algorithm"
    ],
    "technique": "GitHub API"
  }
}