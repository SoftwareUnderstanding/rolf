{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1812.08008",
      "https://arxiv.org/abs/1704.07809",
      "https://arxiv.org/abs/1611.08050",
      "https://arxiv.org/abs/1602.00134",
      "https://arxiv.org/abs/1812.08008"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Please cite these papers in your publications if it helps your research. The body-foot model and any additional functionality (calibration, 3-D reconstruction, etc.) use `[Cao et al. 2018]`; the hand and face keypoint detectors use `[Cao et al. 2018]` and `[Simon et al. 2017]` (the face detector was trained using the same procedure than for hands); and the old (deprecated) body-only model uses `[Cao et al. 2017]`.\n\n    @inproceedings{cao2018openpose,\n      author = {Zhe Cao and Gines Hidalgo and Tomas Simon and Shih-En Wei and Yaser Sheikh},\n      booktitle = {arXiv preprint arXiv:1812.08008},\n      title = {Open{P}ose: realtime multi-person 2{D} pose estimation using {P}art {A}ffinity {F}ields},\n      year = {2018}\n    }\n\n    @inproceedings{simon2017hand,\n      author = {Tomas Simon and Hanbyul Joo and Iain Matthews and Yaser Sheikh},\n      booktitle = {CVPR},\n      title = {Hand Keypoint Detection in Single Images using Multiview Bootstrapping},\n      year = {2017}\n    }\n\n    @inproceedings{cao2017realtime,\n      author = {Zhe Cao and Tomas Simon and Shih-En Wei and Yaser Sheikh},\n      booktitle = {CVPR},\n      title = {Realtime Multi-Person 2D Pose Estimation using Part Affinity Fields},\n      year = {2017}\n    }\n\n    @inproceedings{wei2016cpm,\n      author = {Shih-En Wei and Varun Ramakrishna and Takeo Kanade and Yaser Sheikh},\n      booktitle = {CVPR},\n      title = {Convolutional pose machines},\n      year = {2016}\n    }\n\nLinks to the papers:\n\n- [OpenPose: Realtime Multi-Person 2D Pose Estimation using Part Affinity Fields](https://arxiv.org/abs/1812.08008)\n- [Hand Keypoint Detection in Single Images using Multiview Bootstrapping](https://arxiv.org/abs/1704.07809)\n- [Realtime Multi-Person 2D Pose Estimation using Part Affinity Fields](https://arxiv.org/abs/1611.08050)\n- [Convolutional Pose Machines](https://arxiv.org/abs/1602.00134)\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{wei2016cpm,\n  author = {Shih-En Wei and Varun Ramakrishna and Takeo Kanade and Yaser Sheikh},\n  booktitle = {CVPR},\n  title = {Convolutional pose machines},\n  year = {2016}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{cao2017realtime,\n  author = {Zhe Cao and Tomas Simon and Shih-En Wei and Yaser Sheikh},\n  booktitle = {CVPR},\n  title = {Realtime Multi-Person 2D Pose Estimation using Part Affinity Fields},\n  year = {2017}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{simon2017hand,\n  author = {Tomas Simon and Hanbyul Joo and Iain Matthews and Yaser Sheikh},\n  booktitle = {CVPR},\n  title = {Hand Keypoint Detection in Single Images using Multiview Bootstrapping},\n  year = {2017}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{cao2018openpose,\n  author = {Zhe Cao and Gines Hidalgo and Tomas Simon and Shih-En Wei and Yaser Sheikh},\n  booktitle = {arXiv preprint arXiv:1812.08008},\n  title = {Open{P}ose: realtime multi-person 2{D} pose estimation using {P}art {A}ffinity {F}ields},\n  year = {2018}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8601411888489422
      ],
      "excerpt": "Single-person tracking for further speed up or visual smoothing. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8703098869125256
      ],
      "excerpt": "    <sup>Testing the multi-person body joint estimation with OpenPose</sup> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/D1vyansh/BodyJointDetection",
    "technique": "GitHub API"
  },
  "contributors": {
    "confidence": [
      1.0
    ],
    "excerpt": "OpenPose - Authors and Contributors\nAuthors\nOpenPose is authored by Gines Hidalgo, Zhe Cao, Tomas Simon, Shih-En Wei, Hanbyul Joo, and Yaser Sheikh.\nContributors\nWe would also like to thank the following people who have highly contributed to OpenPose:\n\nYaadhav Raaj: OpenPose maintainer, CPU version, OpenCL version, Mac version, Python API, and person tracker.\nBikramjot Hanzra: Former OpenPose maintainer, CMake (Ubuntu and Windows) version, and initial Travis Build version for Ubuntu.\nDonglai Xiang: Camera calibration toolbox improvement, including the implementation of its bundle adjustment algorithm.\nLuis Fernando Fraga: Implementation of Lukas-Kanade algorith and person ID extractor.\nAkash Patwal: Speedup of the CUDA image resize and visual skeleton rendering, as well as extension that allows OpenPose to speedup linearly to more than 4 GPUs.\nHelen Medina: Initial Windows version.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-02-24T00:57:48Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-22T09:08:33Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8131713502595892
      ],
      "excerpt": "15 or 18 or 25-keypoint body/foot keypoint estimation. Running time invariant to number of detected people. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8803032892520638,
        0.829764411921952
      ],
      "excerpt": "2x21-keypoint hand keypoint estimation. Currently, running time depends on number of detected people. \n70-keypoint face keypoint estimation. Currently, running time depends on number of detected people. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9968029537584643,
        0.8651211561510381
      ],
      "excerpt": "Synchronization of Flir cameras handled. \nCompatible with Flir/Point Grey cameras, but provided C++ demos to add your custom input. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9258258971606813
      ],
      "excerpt": "Easy estimation of distortion, intrinsic, and extrinsic camera parameters. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9670967175148483
      ],
      "excerpt": "    <sup>Testing the 3D Reconstruction Module of OpenPose</sup> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8529400837257711
      ],
      "excerpt": "Inference time comparison between the 3 available pose estimation libraries: OpenPose, Alpha-Pose (fast Pytorch version), and Mask R-CNN: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9260645045163415
      ],
      "excerpt": "This analysis was performed using the same images for each algorithm and a batch size of 1. Each analysis was repeated 1000 times and then averaged. This was all performed on a system with a Nvidia 1080 Ti and CUDA 8. Megvii (Face++) and MSRA GitHub repositories were excluded because they only provide pose estimation results given a cropped person. However, they suffer the same problem than Alpha-Pose and Mask R-CNN, their runtimes grow linearly with the number of people. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Human Pose Estimation is a very challenging task with intensive research interest due to its various applications, such as animation, gaming, human-computer interaction, augmentedreality,humanbehavioranalysisandsportsperformance analysis. Estimating the pose of a human in an image or a video has recently received signi\ufb01cant amount of attention from the scienti\ufb01c community",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/D1vyansh/BodyJointDetection/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Tue, 28 Dec 2021 22:04:12 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/D1vyansh/BodyJointDetection/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "D1vyansh/BodyJointDetection",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/generate_gh_pages.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/osx/install_brew.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/osx/install_deps.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/ubuntu/install_cudnn.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/ubuntu/install_openpose_JetsonTX2_JetPack3.1.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/ubuntu/install_deps.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/ubuntu/install_deps_and_cuda.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/ubuntu/install_caffe_and_openpose_JetsonTX2_JetPack3.1.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/ubuntu/install_caffe_and_openpose_JetsonTX2_JetPack3.3.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/ubuntu/install_cuda.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/ubuntu/install_openpose_JetsonTX2_JetPack3.3.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/ubuntu_deprecated/copy_makefile_files.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/ubuntu_deprecated/install_openpose_if_cuda8.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/ubuntu_deprecated/install_caffe_and_openpose_if_cuda8.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/tests/pose_accuracy_coco_test_dev.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/tests/pose_time_Caffe_layers.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/tests/drawProtoTxt.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/tests/pose_time_visual_GUI.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/tests/pose_accuracy_car_val.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/tests/pose_accuracy_coco_val.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/tests/hand_accuracy_test.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/tests/speed_test.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/travis/defaults.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/travis/configure_make.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/travis/run_make.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/travis/configure.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/travis/configure_cmake.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/travis/install_deps_osx.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/travis/install_deps_ubuntu.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/scripts/travis/run_tests.sh",
      "https://raw.githubusercontent.com/D1vyansh/BodyJointDetection/master/models/getModels.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**Windows portable version**: Simply download and use the latest version from the [Releases](https://github.com/CMU-Perceptual-Computing-Lab/openpose/releases) section.\n\nOtherwise, check [doc/installation.md](doc/installation.md) for instructions on how to build OpenPose from source.\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.888920789185811
      ],
      "excerpt": "OS: Ubuntu (14, 16), Windows (8, 10), Mac OSX, Nvidia TX2. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9525136576736464
      ],
      "excerpt": "CUDA (Nvidia GPU), OpenCL (AMD GPU), and CPU-only (no GPU) versions. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9314414163784198
      ],
      "excerpt": "Output: Basic image + keypoint display/saving (PNG, JPG, AVI, ...), keypoint saving (JSON, XML, YML, ...), and/or keypoints as array class. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8044033683098614
      ],
      "excerpt": "    <img src=\".github/Openpose_demo1.png\", width=\"540\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8185784219166022
      ],
      "excerpt": "    <img src=\"doc/media/openpose3d.gif\", width=\"360\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8185784219166022,
        0.8185784219166022
      ],
      "excerpt": "    <img src=\"doc/media/pose_face.gif\", width=\"360\"> \n    <img src=\"doc/media/pose_hands.gif\", width=\"360\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8473463230273421
      ],
      "excerpt": "    <img src=\"doc/media/openpose_vs_competition.png\", width=\"360\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8606280910157142
      ],
      "excerpt": "Quick Start \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8135831848549969
      ],
      "excerpt": "Output (format, keypoint index ordering, etc.) in doc/output.md. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/D1vyansh/BodyJointDetection/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "Cuda",
      "CMake",
      "Shell",
      "HCL",
      "Batchfile",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "16000 feet</sup>",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "BodyJointDetection",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "D1vyansh",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/D1vyansh/BodyJointDetection/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Tue, 28 Dec 2021 22:04:12 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Most users do not need the OpenPose C++/Python API, but can simply use the OpenPose Demo:\n\n- **OpenPose Demo**: To easily process images/video/webcam and display/save the results. See [doc/demo_overview.md](doc/demo_overview.md). E.g., run OpenPose in a video with:\n```\n#: Ubuntu\n./build/examples/openpose/openpose.bin --video examples/media/video.avi\n:: Windows - Portable Demo\nbin\\OpenPoseDemo.exe --video examples\\media\\video.avi\n```\n\n- **Calibration toolbox**: To easily calibrate your cameras for 3-D OpenPose or any other stereo vision task. See [doc/modules/calibration_module.md](doc/modules/calibration_module.md).\n\n- **OpenPose C++ API**: If you want to read a specific input, and/or add your custom post-processing function, and/or implement your own display/saving, check the C++ API tutorial on [examples/tutorial_api_cpp/](examples/tutorial_api_cpp/) and [doc/library_introduction.md](doc/library_introduction.md). You can create your custom code on [examples/user_code/](examples/user_code/) and quickly compile it with CMake when compiling the whole OpenPose project. Quickly **add your custom code**: See [examples/user_code/README.md](examples/user_code/README.md) for further details.\n\n- **OpenPose Python API**: Analogously to the C++ API, find the tutorial for the Python API on [examples/tutorial_api_python/](examples/tutorial_api_python/).\n\n- **Adding an extra module**: Check [doc/library_add_new_module.md](./doc/library_add_new_module.md).\n\n- **Standalone face or hand detector**:\n    - **Face** keypoint detection **without body** keypoint detection: If you want to speed it up (but also reduce amount of detected faces), check the OpenCV-face-detector approach in [doc/standalone_face_or_hand_keypoint_detector.md](doc/standalone_face_or_hand_keypoint_detector.md).\n    - **Use your own face/hand detector**: You can use the hand and/or face keypoint detectors with your own face or hand detectors, rather than using the body detector. E.g., useful for camera views at which the hands are visible but not the body (OpenPose detector would fail). See [doc/standalone_face_or_hand_keypoint_detector.md](doc/standalone_face_or_hand_keypoint_detector.md).\n\n\n\n",
      "technique": "Header extraction"
    }
  ]
}