{
  "citation": [
    {
      "confidence": [
        0.9205970089176198
      ],
      "excerpt": "  --policy POLICY       Policy Type: Gaussian | Deterministic (default: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9742177718389462
      ],
      "excerpt": "  --eval EVAL           Evaluates a policy a policy every 10 episode (default: \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/pranz24/pytorch-soft-actor-critic",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-08-31T11:53:00Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-24T10:50:29Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "------------\nReimplementation of [Soft Actor-Critic Algorithms and Applications](https://arxiv.org/pdf/1812.05905.pdf) and a deterministic variant of SAC from [Soft Actor-Critic: Off-Policy Maximum Entropy Deep Reinforcement\nLearning with a Stochastic Actor](https://arxiv.org/pdf/1801.01290.pdf).\n\nAdded another branch for [Soft Actor-Critic: Off-Policy Maximum Entropy Deep Reinforcement\nLearning with a Stochastic Actor](https://arxiv.org/pdf/1801.01290.pdf) -> [SAC_V](https://github.com/pranz24/pytorch-soft-actor-critic/tree/SAC_V).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8879962781986265
      ],
      "excerpt": "                        importance of the entropy term against the reward \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8526608138026486
      ],
      "excerpt": "  --replay_size N       size of replay buffer (default: 1e6) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "PyTorch implementation of soft actor critic",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/pranz24/pytorch-soft-actor-critic/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 106,
      "date": "Sat, 25 Dec 2021 04:45:47 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/pranz24/pytorch-soft-actor-critic/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "pranz24/pytorch-soft-actor-critic",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9322609392449874
      ],
      "excerpt": "PyTorch Soft Actor-Critic Args \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9640255920590469
      ],
      "excerpt": "  --env-name ENV_NAME   Mujoco Gym environment (default: HalfCheetah-v2) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8700494659893305
      ],
      "excerpt": "  --cuda                run on CUDA (default: False) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8782489183833558
      ],
      "excerpt": "| Environment (--env-name)| Temperature (--alpha)| \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8605079245486787,
        0.8605079245486787,
        0.8577606481661543
      ],
      "excerpt": "python main.py --env-name Humanoid-v2 --alpha 0.05 \npython main.py --env-name Humanoid-v2 --alpha 0.05 --tau 1 --target_update_interval 1000 \npython main.py --env-name Humanoid-v2 --policy Deterministic --tau 1 --target_update_interval 1000 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "                        True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8164337091011008
      ],
      "excerpt": "  --batch_size N        batch size (default: 256) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8230878939067464
      ],
      "excerpt": "  --replay_size N       size of replay buffer (default: 1e6) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/pranz24/pytorch-soft-actor-critic/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 Pranjal Tandon\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "## Description",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pytorch-soft-actor-critic",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "pranz24",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/pranz24/pytorch-soft-actor-critic/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "------------\n*   [mujoco-py](https://github.com/openai/mujoco-py)\n*   [PyTorch](http://pytorch.org/)\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 437,
      "date": "Sat, 25 Dec 2021 04:45:47 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "pytorch-implmention",
      "pytorch",
      "reinforcement-learning",
      "deep-reinforcement-learning",
      "soft-actor-critic"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "------------\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```\nusage: main.py [-h] [--env-name ENV_NAME] [--policy POLICY] [--eval EVAL]\n               [--gamma G] [--tau G] [--lr G] [--alpha G]\n               [--automatic_entropy_tuning G] [--seed N] [--batch_size N]\n               [--num_steps N] [--hidden_size N] [--updates_per_step N]\n               [--start_steps N] [--target_update_interval N]\n               [--replay_size N] [--cuda]\n```\n\n(Note: There is no need for setting Temperature(`--alpha`) if `--automatic_entropy_tuning` is True.)\n\n",
      "technique": "Header extraction"
    }
  ]
}