{
  "citation": [
    {
      "confidence": [
        0.8374695145293185
      ],
      "excerpt": "Facebook artificial intelligence director Yann LeCun made a striking statement: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if epoch % sample_interval == 0: \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/OkanKY/generative_adversarial_networks",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-07-15T18:18:16Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-08-11T14:56:27Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8790187739342058,
        0.9783709766751382
      ],
      "excerpt": "Think of an algorithm that transforms a picture you make into a real picture! \nThere is such a creative algorithm that it is capable of doing this and many other things: generative adversarial networks. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9079666236013115,
        0.8414161226060813
      ],
      "excerpt": "In a GAN setup, two differentiable functions, represented by neural networks, are locked in a game. The two players (the generator and the discriminator) have different roles in this framework. \nThe generator tries to produce data that come from some probability distribution. That would be you trying to reproduce the party\u2019s tickets. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8920076054181393,
        0.931407491502785
      ],
      "excerpt": "The generator create new imagesas similar as possible to the pictures in the database. The discriminator try to understand if they are original pictures or synthetic ones. So how does it work? Lets start from the building blocks. \nThis is the generator : \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877,
        0.889840966153401
      ],
      "excerpt": "model = Sequential() \nmodel.add(Dense(256, input_dim=self.latent_dim)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.889840966153401
      ],
      "excerpt": "model.add(Dense(np.prod(self.img_shape), activation='tanh')) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8962241999195176
      ],
      "excerpt": "This is the discriminator : \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = Sequential() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9298775026294136
      ],
      "excerpt": "model.add(Dense(1, activation='sigmoid')) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877,
        0.860059181823877,
        0.9076030033809388
      ],
      "excerpt": "validity = model(img) \nreturn Model(img, validity) \nThe discriminator is as simple as the generator. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9330032698460528
      ],
      "excerpt": "For the losses, we use vanilla cross-entropy with Adam as a good choice for the optimizer. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9802703129329319
      ],
      "excerpt": "GANs are one of the hottest subjects in machine learning right now. These models have the potential of unlocking unsupervised learning methods that would expand ML to new horizons. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/OkanKY/generative_adversarial_networks/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sun, 26 Dec 2021 18:35:56 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/OkanKY/generative_adversarial_networks/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "OkanKY/generative_adversarial_networks",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.8426443226254502,
        0.8360176336503915
      ],
      "excerpt": "Now lets start the training: \ndef train(self, epochs, batch_size=128, sample_interval=50): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8973933083440926,
        0.8062698063196745,
        0.8518395018919589
      ],
      "excerpt": "X_train = np.expand_dims(X_train, axis=3) \nvalid = np.ones((batch_size, 1)) \nfake = np.zeros((batch_size, 1)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9065777179031693
      ],
      "excerpt": "idx = np.random.randint(0, X_train.shape[0], batch_size) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8212377882447847
      ],
      "excerpt": "    noise = np.random.normal(0, 1, (batch_size, self.latent_dim)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8882348603392887,
        0.8212377882447847
      ],
      "excerpt": "    d_loss = 0.5 * np.add(d_loss_real, d_loss_fake) \nnoise = np.random.normal(0, 1, (batch_size, self.latent_dim)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8387253229560004
      ],
      "excerpt": "print (\"%d [D loss: %f, acc.: %.2f%%] [G loss: %f]\" % (epoch, d_loss[0], 100*d_loss[1], g_loss)) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/OkanKY/generative_adversarial_networks/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Generative Adversarial Networks",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "generative_adversarial_networks",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "OkanKY",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/OkanKY/generative_adversarial_networks/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Sun, 26 Dec 2021 18:35:56 GMT"
    },
    "technique": "GitHub API"
  }
}