{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1904.00962 for the paper on LAMB optimizer.\n\n**Supports BERT and XLNet for both Multi-Class and Multi-Label text classification.**\n\nFast-Bert is the deep learning library that allows developers and data scientists to train and deploy BERT and XLNet based models for natural language processing tasks beginning with Text Classification.\n\nThe work on FastBert is built on solid foundations provided by the excellent [Hugging Face BERT PyTorch library](https://github.com/huggingface/pytorch-pretrained-BERT",
      "https://arxiv.org/abs/1810.04805",
      "https://arxiv.org/abs/1906.08237",
      "https://arxiv.org/abs/1907.11692"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Please include a mention of [this library](https://github.com/kaushaltrivedi/fast-bert) and HuggingFace [pytorch-transformers](https://github.com/huggingface/pytorch-transformers) library and a link to the present repository if you use this work in a published or open-source project.\n\nAlso include my blogs on this topic:\n\n- [Introducing FastBert \u2014 A simple Deep Learning library for BERT Models](https://medium.com/huggingface/introducing-fastbert-a-simple-deep-learning-library-for-bert-models-89ff763ad384)\n- [Multi-label Text Classification using BERT \u2013 The Mighty Transformer](https://medium.com/huggingface/multi-label-text-classification-using-bert-the-mighty-transformer-69714fa3fb3d)\n\n- [Train and Deploy the Mighty BERT based NLP models using FastBert and Amazon SageMaker](https://towardsdatascience.com/train-and-deploy-mighty-transformer-nlp-models-using-fastbert-and-aws-sagemaker-cc4303c51cf3)\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9991926849716941,
        0.9176913855383327
      ],
      "excerpt": "Please refer to https://arxiv.org/abs/1904.00962 for the paper on LAMB optimizer. \nSupports BERT and XLNet for both Multi-Class and Multi-Label text classification. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9352559095249874
      ],
      "excerpt": "3)  RoBERTa (from Facebook), a Robustly Optimized BERT Pretraining Approach by Yinhan Liu, Myle Ott, Naman Goyal, Jingfei Du et al. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8090016440670298
      ],
      "excerpt": "| logger              | logger object                                                                                                                                                                                                                  | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8109194328925066
      ],
      "excerpt": ": Single prediction \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/utterworks/fast-bert",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-04-18T22:01:20Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-27T06:15:38Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8196473202141938
      ],
      "excerpt": "Supports LAMB optimizer for faster training. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9876022826083687,
        0.9890142787634216
      ],
      "excerpt": "Fast-Bert is the deep learning library that allows developers and data scientists to train and deploy BERT and XLNet based models for natural language processing tasks beginning with Text Classification. \nThe work on FastBert is built on solid foundations provided by the excellent Hugging Face BERT PyTorch library and is inspired by fast.ai and strives to make the cutting edge deep learning technologies accessible for the vast community of machine learning practitioners. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9126761740226392,
        0.9171676798299269
      ],
      "excerpt": "Tune model hyper-parameters such as epochs, learning rate, batch size, optimiser schedule and more. \nSave and deploy trained model for inference (including on AWS Sagemaker). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9788134372186559,
        0.9410141275101865
      ],
      "excerpt": "BERT (from Google) released with the paper BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding by Jacob Devlin, Ming-Wei Chang, Kenton Lee and Kristina Toutanova. \n2)  XLNet (from Google/CMU) released with the paper \u200bXLNet: Generalized Autoregressive Pretraining for Language Understanding by Zhilin Yang, Zihang Dai, Yiming Yang, Jaime Carbonell, Ruslan Salakhutdinov, Quoc V. Le. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8903885354715448
      ],
      "excerpt": "4)  DistilBERT (from HuggingFace), released together with the blogpost Smaller, faster, cheaper, lighter: Introducing DistilBERT, a distilled version of BERT by Victor Sanh, Lysandre Debut and Thomas Wolf. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8582174746016125
      ],
      "excerpt": "The databunch object takes training, validation and test csv files and converts the data into internal representation for BERT, RoBERTa, DistilBERT or XLNet. The object also instantiates the correct data-loaders based on device profile and batch_size and max_sequence_length. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9541273440499367,
        0.8598342898261101,
        0.980471868814066
      ],
      "excerpt": "| 0     | Looking through the other comments, I'm amazed that there aren't any warnings to potential viewers of what they have to look forward to when renting this garbage. First off, I rented this thing with the understanding that it was a competently rendered Indiana Jones knock-off.                                                | neg   | \n| 1     | I've watched the first 17 episodes and this series is simply amazing! I haven't been this interested in an anime series since Neon Genesis Evangelion. This series is actually based off an h-game, which I'm not sure if it's been done before or not, I haven't played the game, but from what I've heard it follows it very well | pos   | \n| 2     | his movie is nothing short of a dark, gritty masterpiece. I may be bias, as the Apartheid era is an area I've always felt for.                                                                                                                                                                                                      | pos   | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9016413467736744,
        0.9396952586881446,
        0.9900482024385726,
        0.88968429425662,
        0.9265535987166765,
        0.9462929597327258
      ],
      "excerpt": "For example for using XLNet base cased model, set tokenizer parameter to 'xlnet-base-cased'. DataBunch will automatically download and instantiate XLNetTokenizer with the vocabulary for xlnet-base-cased model. \nFast-Bert supports XLNet, RoBERTa and BERT based classification models. Set model type parameter value to 'bert', roberta or 'xlnet' in order to initiate an appropriate databunch object. \nBertLearner is the \u2018learner\u2019 object that holds everything together. It encapsulates the key logic for the lifecycle of the model such as training, validation and inference. \nThe learner object will take the databunch created earlier as as input alongwith some of the other parameters such as location for one of the pretrained models, FP16 training, multi_gpu and multi_label options. \nThe learner class contains the logic for training loop, validation loop, optimiser strategies and key metrics calculation. This help the developers focus on their custom use-cases without worrying about these repetitive activities. \nAt the same time the learner object is flexible enough to be customised either via using flexible parameters or by creating a subclass of BertLearner and redefining relevant methods. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8447352029168749,
        0.897760434017764
      ],
      "excerpt": "| pretrained_path     | Directory for the location of the pretrained model files or the name of one of the pretrained models i.e. bert-base-uncased, xlnet-large-cased, etc                                                                            | \n| metrics             | List of metrics functions that you want the model to calculate on the validation set, e.g. accuracy, beta, etc                                                                                                                 | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8949103860483417
      ],
      "excerpt": "| finetuned_wgts_path | provide the location for fine-tuned language model (experimental feature)                                                                                                                                                      | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9471552822098731
      ],
      "excerpt": "The learning rate is one of the most important hyperparameters for model training.  We have incorporated the learining rate finder that was proposed by Leslie Smith and then built into the fastai library.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8918547950959033
      ],
      "excerpt": "Fast-Bert now supports LAMB optmizer. Due to the speed of training, we have set LAMB as the default optimizer. You can switch back to AdamW by setting optimizer_type to 'adamw'. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9430734502042736
      ],
      "excerpt": "| spiece.model            | sentence tokenizer vocabulary (for xlnet models) | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8864467328957644,
        0.8008908138555114,
        0.8183346741667302
      ],
      "excerpt": "| added_tokens.json       | list of new tokens                               | \nAs the model artefacts are all stored in the same folder, you will be able to instantiate the learner object to run inference by pointing pretrained_path to this location. \nIf you already have a Learner object with trained model instantiated, just call predict_batch method on the learner object with the list of text data: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8484149893579326
      ],
      "excerpt": "         'this movie is not worth watching'] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8827942038998251
      ],
      "excerpt": "    \"this is the second text\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.969498139847997,
        0.9741759779852123,
        0.8842371216575978
      ],
      "excerpt": "A useful approach to use BERT based models on custom datasets is to first finetune the language model task for the custom dataset, an apporach followed by fast.ai's ULMFit. The idea is to start with a pre-trained model and further train the model on the raw text of the custom dataset. We will use the masked LM task to finetune the language model. \nThis section will describe the usage of FastBert to finetune the language model. \nThe necessary objects are stored in the files with '_lm' suffix. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9106050150634234
      ],
      "excerpt": ": Language model Databunch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9106050150634234
      ],
      "excerpt": ": Language model learner \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9780794237172438
      ],
      "excerpt": "The BertLMDataBunch class contains a static method 'from_raw_corpus' that will take the list of raw texts and create DataBunch for the language model learner. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8253684361539652
      ],
      "excerpt": "The next step will be to featurize the texts. The text will be tokenized, numericalized and split into blocks on 512 tokens (including special tokens). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9193165959573373,
        0.8428462623715656
      ],
      "excerpt": "As this step can take some time based on the size of your custom dataset's text, the featurized data will be cached in pickled files in the data_dir/lm_cache folder. \nThe next time, instead of using from_raw_corpus method, you may want to directly instantiate the DataBunch object as shown below: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9900482024385726,
        0.88968429425662,
        0.9001185568390586,
        0.9462929597327258
      ],
      "excerpt": "BertLearner is the \u2018learner\u2019 object that holds everything together. It encapsulates the key logic for the lifecycle of the model such as training, validation and inference. \nThe learner object will take the databunch created earlier as as input alongwith some of the other parameters such as location for one of the pretrained models, FP16 training, multi_gpu and multi_label options. \nThe learner class contains the logic for training loop, validation loop, and optimizer strategies. This help the developers focus on their custom use-cases without worrying about these repetitive activities. \nAt the same time the learner object is flexible enough to be customized either via using flexible parameters or by creating a subclass of BertLearner and redefining relevant methods. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8918547950959033
      ],
      "excerpt": "Fast-Bert now supports LAMB optmizer. Due to the speed of training, we have set LAMB as the default optimizer. You can switch back to AdamW by setting optimizer_type to 'adamw'. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9430734502042736
      ],
      "excerpt": "| spiece.model            | sentence tokenizer vocabulary (for xlnet models) | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8864467328957644
      ],
      "excerpt": "| added_tokens.json       | list of new tokens                               | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Super easy library for BERT based NLP models",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kaushaltrivedi/fast-bert/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 332,
      "date": "Mon, 27 Dec 2021 16:00:14 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/utterworks/fast-bert/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "utterworks/fast-bert",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/kaushaltrivedi/fast-bert/main/container/Dockerfile",
      "https://raw.githubusercontent.com/kaushaltrivedi/fast-bert/main/container_t5/Dockerfile",
      "https://raw.githubusercontent.com/kaushaltrivedi/fast-bert/main/container_ner/Dockerfile",
      "https://raw.githubusercontent.com/kaushaltrivedi/fast-bert/main/container_lm/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/kaushaltrivedi/fast-bert/main/test/multi_class.ipynb",
      "https://raw.githubusercontent.com/kaushaltrivedi/fast-bert/main/test/summarisation.ipynb",
      "https://raw.githubusercontent.com/kaushaltrivedi/fast-bert/main/sample_notebooks/new-toxic-predict.ipynb",
      "https://raw.githubusercontent.com/kaushaltrivedi/fast-bert/main/sample_notebooks/toxic_comments_sagemaker.ipynb",
      "https://raw.githubusercontent.com/kaushaltrivedi/fast-bert/main/sample_notebooks/new-toxic-multilabel.ipynb",
      "https://raw.githubusercontent.com/kaushaltrivedi/fast-bert/main/sample_notebooks/gpu_util.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/kaushaltrivedi/fast-bert/main/deploy_pip.sh",
      "https://raw.githubusercontent.com/kaushaltrivedi/fast-bert/main/container/pytorch_build_and_push.sh",
      "https://raw.githubusercontent.com/kaushaltrivedi/fast-bert/main/container/build_and_push_batch.sh",
      "https://raw.githubusercontent.com/kaushaltrivedi/fast-bert/main/container/build_and_push.sh",
      "https://raw.githubusercontent.com/kaushaltrivedi/fast-bert/main/container_t5/build_and_push.sh",
      "https://raw.githubusercontent.com/kaushaltrivedi/fast-bert/main/container_ner/build_and_push.sh",
      "https://raw.githubusercontent.com/kaushaltrivedi/fast-bert/main/container_lm/build_and_push.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```python\n#: Box is a nice wrapper to create an object from a json dict\nargs = Box({\n    \"seed\": 42,\n    \"task_name\": 'imdb_reviews_lm',\n    \"model_name\": 'roberta-base',\n    \"model_type\": 'roberta',\n    \"train_batch_size\": 16,\n    \"learning_rate\": 4e-5,\n    \"num_train_epochs\": 20,\n    \"fp16\": True,\n    \"fp16_opt_level\": \"O2\",\n    \"warmup_steps\": 1000,\n    \"logging_steps\": 0,\n    \"max_seq_length\": 512,\n    \"multi_gpu\": True if torch.cuda.device_count() > 1 else False\n})\n\nDATA_PATH = Path('../lm_data/')\nLOG_PATH = Path('../logs')\nMODEL_PATH = Path('../lm_model_{}/'.format(args.model_type))\n\nDATA_PATH.mkdir(exist_ok=True)\nMODEL_PATH.mkdir(exist_ok=True)\nLOG_PATH.mkdir(exist_ok=True)\n\n\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "This repo is tested on Python 3.6+.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9709706075148068,
        0.982968042148397
      ],
      "excerpt": "PyTorch-Transformers can be installed by pip as follows: \npip install fast-bert \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9855251805776313
      ],
      "excerpt": "pip install [--editable] . \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9957120311168554,
        0.9838760479847778,
        0.9876636780183828,
        0.9906248903846466
      ],
      "excerpt": "pip install git+https://github.com/kaushaltrivedi/fast-bert.git \nYou will also need to install NVIDIA Apex. \ngit clone https://github.com/NVIDIA/apex \ncd apex \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8040707953173315
      ],
      "excerpt": "Train (more precisely fine-tune) BERT, RoBERTa and XLNet text classification models on your custom dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from fast_bert.data_cls import BertDataBunch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8897107595245954
      ],
      "excerpt": "                          train_file='train.csv', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8359299706379749
      ],
      "excerpt": "                          text_col='text', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "                          multi_gpu=True, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8024181275492712
      ],
      "excerpt": "| id  | text                                                                       | toxic | severe_toxic | obscene | threat | insult | identity_hate | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8017739040256272
      ],
      "excerpt": "The learner object will take the databunch created earlier as as input alongwith some of the other parameters such as location for one of the pretrained models, FP16 training, multi_gpu and multi_label options. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from fast_bert.learner_cls import BertLearner \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8177137148100153
      ],
      "excerpt": "import logging \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984,
        0.8594142235991984
      ],
      "excerpt": "                        multi_gpu=True, \n                        is_fp16=True, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.820468763730404
      ],
      "excerpt": "| output_dir          | Directory for model to save trained artefacts, tokenizer vocabulary and tensorboard files                                                                                                                                      | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8174540907975313
      ],
      "excerpt": "| is_fp16             | FP16 training                                                                                                                                                                                                                  | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8458354897735383
      ],
      "excerpt": "            validate=True,  #: Evaluate the model after each epoch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8196042048557899
      ],
      "excerpt": "| File name               | description                                      | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8026531231476316
      ],
      "excerpt": "| config.json             | model config                                     | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8194213213967482
      ],
      "excerpt": "from fast_bert.prediction import BertClassificationPredictor \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8618656569179038
      ],
      "excerpt": "single_prediction = predictor.predict(\"just get me result for this text\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.818002936408509
      ],
      "excerpt": "    \"this is the first text\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from fast_bert.data_lm import BertLMDataBunch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516,
        0.8550650925410873
      ],
      "excerpt": "from fast_bert.learner_lm import BertLMLearner \nfrom pathlib import Path \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8017739040256272
      ],
      "excerpt": "The learner object will take the databunch created earlier as as input alongwith some of the other parameters such as location for one of the pretrained models, FP16 training, multi_gpu and multi_label options. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8458354897735383
      ],
      "excerpt": "            validate=True,  #: Evaluate the model after each epoch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8196042048557899
      ],
      "excerpt": "| File name               | description                                      | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8026531231476316
      ],
      "excerpt": "| config.json             | model config                                     | \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/utterworks/fast-bert/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook",
      "Shell",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Fast-Bert",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "fast-bert",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "utterworks",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/utterworks/fast-bert/blob/main/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "kaushaltrivedi",
        "body": "Release 1.8.0  - New Learning Rate finder integrated with learner object.",
        "dateCreated": "2020-07-09T12:01:53Z",
        "datePublished": "2020-07-09T12:05:40Z",
        "html_url": "https://github.com/utterworks/fast-bert/releases/tag/v1.8.0",
        "name": "Added LR Finder for Text classification task",
        "tag_name": "v1.8.0",
        "tarball_url": "https://api.github.com/repos/utterworks/fast-bert/tarball/v1.8.0",
        "url": "https://api.github.com/repos/utterworks/fast-bert/releases/28398828",
        "zipball_url": "https://api.github.com/repos/utterworks/fast-bert/zipball/v1.8.0"
      },
      {
        "authorType": "User",
        "author_name": "kaushaltrivedi",
        "body": "We have switched to Auto-model for Multi-class classification.  This would let you train any pretrained model architecture for text classification.  ",
        "dateCreated": "2020-04-14T21:54:39Z",
        "datePublished": "2020-04-14T21:58:36Z",
        "html_url": "https://github.com/utterworks/fast-bert/releases/tag/v1.7.0",
        "name": "Switch text classification to AutoModel",
        "tag_name": "v1.7.0",
        "tarball_url": "https://api.github.com/repos/utterworks/fast-bert/tarball/v1.7.0",
        "url": "https://api.github.com/repos/utterworks/fast-bert/releases/25506231",
        "zipball_url": "https://api.github.com/repos/utterworks/fast-bert/zipball/v1.7.0"
      },
      {
        "authorType": "User",
        "author_name": "kaushaltrivedi",
        "body": "Now supports the initial version of Abstractive Summarisation inference, fast-bert style\r\n\r\nIn a not so future release, you will be able to use your custom language model fine-tuned on custom corpus for the encoder model.",
        "dateCreated": "2019-12-22T12:06:58Z",
        "datePublished": "2019-12-22T14:27:08Z",
        "html_url": "https://github.com/utterworks/fast-bert/releases/tag/v1.6.0",
        "name": "Includes Abstractive summarisation ",
        "tag_name": "v1.6.0",
        "tarball_url": "https://api.github.com/repos/utterworks/fast-bert/tarball/v1.6.0",
        "url": "https://api.github.com/repos/utterworks/fast-bert/releases/22414668",
        "zipball_url": "https://api.github.com/repos/utterworks/fast-bert/zipball/v1.6.0"
      },
      {
        "authorType": "User",
        "author_name": "kaushaltrivedi",
        "body": "Fixed some of the bugs related to fastai dependencies.  ",
        "dateCreated": "2019-12-14T13:06:07Z",
        "datePublished": "2019-12-14T13:10:22Z",
        "html_url": "https://github.com/utterworks/fast-bert/releases/tag/v1.5.1",
        "name": "Bug fixes",
        "tag_name": "v1.5.1",
        "tarball_url": "https://api.github.com/repos/utterworks/fast-bert/tarball/v1.5.1",
        "url": "https://api.github.com/repos/utterworks/fast-bert/releases/22229508",
        "zipball_url": "https://api.github.com/repos/utterworks/fast-bert/zipball/v1.5.1"
      },
      {
        "authorType": "User",
        "author_name": "kaushaltrivedi",
        "body": "<h2>Three new models have been added in v1.5.0</h2>\r\n\r\n<li>\r\n<ul><b>ALBERT</b> (Pytorch) (from Google Research and the Toyota Technological Institute at Chicago) released with the paper ALBERT: A Lite BERT for Self-supervised Learning of Language Representations, by Zhenzhong Lan, Mingda Chen, Sebastian Goodman, Kevin Gimpel, Piyush Sharma, Radu Soricut.\r\n</ul>\r\n<ul>\r\n<b>CamemBERT</b> (Pytorch) (from Facebook AI Research, INRIA, and La Sorbonne Universit\u00e9), as the first large-scale Transformer language model. Released alongside the paper CamemBERT: a Tasty French Language Model by Louis Martin, Benjamin Muller, Pedro Javier Ortiz Suarez, Yoann Dupont, Laurent Romary, Eric Villemonte de la Clergerie, Djame Seddah, and Beno\u00eet Sagot. It was added by @louismartin with the help of @julien-c.\r\n</ul>\r\n<ul>\r\n<b>DistilRoberta</b> (Pytorch) from @VictorSanh as the third distilled model after DistilBERT and DistilGPT-2.\r\n</ul>\r\n</li>\r\n",
        "dateCreated": "2019-11-28T23:42:01Z",
        "datePublished": "2019-11-28T23:57:21Z",
        "html_url": "https://github.com/utterworks/fast-bert/releases/tag/v1.5.0",
        "name": "New model architectures - ALBERT, CamemBERT, DistilRoberta",
        "tag_name": "v1.5.0",
        "tarball_url": "https://api.github.com/repos/utterworks/fast-bert/tarball/v1.5.0",
        "url": "https://api.github.com/repos/utterworks/fast-bert/releases/21843471",
        "zipball_url": "https://api.github.com/repos/utterworks/fast-bert/zipball/v1.5.0"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1682,
      "date": "Mon, 27 Dec 2021 16:00:14 GMT"
    },
    "technique": "GitHub API"
  },
  "support": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The purpose of this library is to let you train and deploy production grade models. As transformer models require expensive GPUs to train, I have added support for training and deploying model on AWS SageMaker.\n\nThe repository contains the docker image and code for building BERT based classification models in Amazon SageMaker.\n\nPlease refer to my blog [Train and Deploy the Mighty BERT based NLP models using FastBert and Amazon SageMaker](https://towardsdatascience.com/train-and-deploy-mighty-transformer-nlp-models-using-fastbert-and-aws-sagemaker-cc4303c51cf3) that provides detailed explanation on using SageMaker with FastBert.\n\n",
      "technique": "Header extraction"
    }
  ],
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "bert",
      "fast-bert",
      "fastai",
      "transformers"
    ],
    "technique": "GitHub API"
  }
}