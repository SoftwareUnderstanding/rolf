Text;Label;Repo
"""Given a readme file (or a GitHub repository) SOMEF will extract the following categories (if present):

Name: Name identifying a software component
Full name: Name + owner (owner/name)
Full title: If the repository is a short name, we will attempt to extract the longer version of the repository name
Description: A description of what the software does.
Citation: Preferred citation (usually in .bib form) as the authors have stated in their readme file.
Installation instructions: A set of instructions that indicate how to install a target repository
Invocation: Execution command(s) needed to run a scientific software component
Usage examples: Assumptions and considerations recorded by the authors when executing a software component, or examples on how to use it.
Documentation: Where to find additional documentation about a software component.
Requirements: Pre-requisites and dependencies needed to execute a software component.
Contributors: Contributors to a software component
FAQ: Frequently asked questions about a software component
Support: Guidelines and links of where to obtain support for a software component
License: License and usage terms of a software component
Contact: Contact person responsible for maintaining a software component
Download URL: URL where to download the target software (typically the installer, package or a tarball to a stable version)
DOI: Digital Object Identifier associated with the software (if any)
DockerFile: Build file to create a Docker image for the target software
Notebooks: Jupyter notebooks included in a repository
Executable notebooks: Jupyter notebooks ready for execution (e.g., through myBinder)
Owner: Name of the user or organization in charge of the repository
Owner type: Type of the owner, user or organization, of the repository
Keywords: set of terms used to commonly identify a software component
Source code: Link to the source code (typically the repository where the readme can be found)
Releases: Pointer to the available versions of a software component
Changelog: Description of the changes between versions
Issue tracker: Link where to open issues for the target repository
Programming languages: Languages used in the repository
Acknowledgements: People or institutions that the authors would like to acknowledge in their software component
Repository Status: Repository status as it is described in repostatus.org
Arxiv Links: Links to Arxiv articles
Stargazers count: Total number of stargazers of the project
Forks count: Number of forks of the project
Forks url: Links to forks made of the project
Code of Conduct: Link to the code of conduct of the project
Script: Snippets of code contained in the readme file
We use different supervised classifiers, header analysis, regular expressions and the GitHub API to retrieve all these fields (more than one technique may be used for each field)""";General;https://github.com/KnowledgeCaptureAndDiscovery/somef
"""Mask R-CNN Mask R-CNN **Mask R-CNN** extends [Faster R-CNN] to solve instance segmentation tasks. It achieves this by adding a branch for predicting an object mask in parallel with the existing branch for bounding box recognition. In principle  Mask R-CNN is an intuitive extension of Faster [R-CNN] but constructing the mask branch properly is critical for good results. Most importantly  Faster R-CNN was not designed for pixel-to-pixel alignment between network inputs and outputs. This is evident in how [RoIPool] the *de facto* core operation for attending to instances  performs coarse spatial quantization for feature extraction. To fix the misalignment  Mask R-CNN utilises a simple  quantization-free layer  called [RoIAlign] that faithfully preserves exact spatial locations. Secondly  Mask R-CNN *decouples* mask and class prediction: it predicts a binary mask for each class independently  without competition among classes  and relies on the network's RoI classification branch to predict the category. In contrast  an [FCN] usually perform per-pixel multi-class categorization  which couples segmentation and classification. mask-r-cnn 2000 None None""";Computer Vision;Repo
"""Welcome to Deep Learning for Natural Language Processing. Natural language processing is the
area of study dedicated to the automatic manipulation of speech and text by software. It is
an old field of study, originally dominated by rule-based methods designed by linguists, then
statistical methods, and, more recently, deep learning methods that show great promise in the
field. So much so that the heart of the Google Translate service uses a deep learning method, a
topic that you will learn more about in this book.
I designed this book to teach you step-by-step how to bring modern deep learning models to
your own natural language processing projects.""";Computer Vision;repo
"""Welcome to Deep Learning for Natural Language Processing. Natural language processing is the
area of study dedicated to the automatic manipulation of speech and text by software. It is
an old field of study, originally dominated by rule-based methods designed by linguists, then
statistical methods, and, more recently, deep learning methods that show great promise in the
field. So much so that the heart of the Google Translate service uses a deep learning method, a
topic that you will learn more about in this book.
I designed this book to teach you step-by-step how to bring modern deep learning models to
your own natural language processing projects.""";Natural Language Processing;repo
"""A piano makes a sound when each key moves a small hammer that strikes a metal string. The inside of a piano looks kind of like a harp. Pianos are vital in many kinds of music, from classical to pop, and in the case of Lewis, boogie-woogie. Piano comes from the original Italian name for the instrument: piano e forte, "soft and loud." Piano is also the musical notation that tells the player that something should be played quietly.""";General;repo
