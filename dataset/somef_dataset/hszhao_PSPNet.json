{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1612.01105"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If PSPNet is useful for your research, please consider citing:\n\n    @inproceedings{zhao2017pspnet,\n      title={Pyramid Scene Parsing Network},\n      author={Zhao, Hengshuang and Shi, Jianping and Qi, Xiaojuan and Wang, Xiaogang and Jia, Jiaya},\n      booktitle={CVPR},\n      year={2017}\n    }\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{zhao2017pspnet,\n  title={Pyramid Scene Parsing Network},\n  author={Zhao, Hengshuang and Shi, Jianping and Qi, Xiaojuan and Wang, Xiaogang and Jia, Jiaya},\n  booktitle={CVPR},\n  year={2017}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hszhao/PSPNet",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing\nIssues\nSpecific Caffe design and development issues, bugs, and feature requests are maintained by GitHub Issues.\nPlease do not post usage, installation, or modeling questions, or other requests for help to Issues.\nUse the caffe-users list instead. This helps developers maintain a clear, uncluttered, and efficient view of the state of Caffe.\nWhen reporting a bug, it's most helpful to provide the following information, where applicable:\n\nWhat steps reproduce the bug?\nCan you reproduce the bug using the latest master, compiled with the DEBUG make option?\nWhat hardware and operating system/distribution are you running?\nIf the bug is a crash, provide the backtrace (usually printed by Caffe; always obtainable with gdb).\n\nTry to give your issue a title that is succinct and specific. The devs will rename issues as needed to keep track of them.\nPull Requests\nCaffe welcomes all contributions.\nSee the contributing guide for details.\nBriefly: read commit by commit, a PR should tell a clean, compelling story of one improvement to Caffe. In particular:\n\nA PR should do one clear thing that obviously improves Caffe, and nothing more. Making many smaller PRs is better than making one large PR; review effort is superlinear in the amount of code involved.\nSimilarly, each commit should be a small, atomic change representing one step in development. PRs should be made of many commits where appropriate.\nPlease do rewrite PR history to be clean rather than chronological. Within-PR bugfixes, style cleanups, reversions, etc. should be squashed and should not appear in merged PR history.\nAnything nonobvious from the code should be explained in comments, commit messages, or the PR description, as appropriate.",
    "technique": "File Exploration"
  },
  "contributors": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributors\nCaffe is developed by a core set of BVLC members and the open-source community.\nWe thank all of our contributors!\nFor the detailed history of contributions of a given file, try\ngit blame file\n\nto see line-by-line credits and\ngit log --follow file\n\nto see the change log even across renames and rewrites.\nPlease refer to the acknowledgements on the Caffe site for further details.\nCopyright is held by the original contributor according to the versioning history; see LICENSE.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-12-04T12:49:29Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-09T07:14:07Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This repository is for '[Pyramid Scene Parsing Network](https://arxiv.org/abs/1612.01105)', which ranked 1st place in [ImageNet Scene Parsing Challenge 2016](http://image-net.org/challenges/LSVRC/2016/results). The code is modified from Caffe version of  [DeepLab v2](https://bitbucket.org/aquariusjay/deeplab-public-ver2) and [yjxiong](https://github.com/yjxiong/caffe/tree/mem) for evaluation. We merge the batch normalization layer named 'bn_layer' in the former one into the later one while keep the original 'batch_norm_layer' in the later one unchanged for compatibility. The difference is that 'bn_layer' contains four parameters as 'slope,bias,mean,variance' while 'batch_norm_layer' contains two parameters as 'mean,variance'. Several evaluation code is borrowed from [MIT Scene Parsing](https://github.com/CSAILVision/sceneparsing).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9077443355764457,
        0.9442990877803817
      ],
      "excerpt": "by Hengshuang Zhao, Jianping Shi, Xiaojuan Qi, Xiaogang Wang, Jiaya Jia, details are in project page. \nHighly optimized PyTorch codebases available for semantic segmentation in repo: semseg, including full training and testing codes for PSPNet and PSANet. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Pyramid Scene Parsing Network, CVPR2017.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hszhao/PSPNet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 542,
      "date": "Mon, 13 Dec 2021 16:14:47 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/hszhao/PSPNet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "hszhao/PSPNet",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/hszhao/PSPNet/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/02-fine-tuning.ipynb",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/net_surgery.ipynb",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/detection.ipynb",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/01-learning-lenet.ipynb",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/brewing-logreg.ipynb",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/00-classification.ipynb",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/siamese/mnist_siamese.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/scripts/deploy_docs.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/scripts/build_docs.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/scripts/download_model_from_gist.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/scripts/upload_model_to_gist.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/scripts/gather_examples.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/scripts/travis/travis_setup_makefile_config.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/scripts/travis/travis_build_and_test.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/scripts/travis/travis_install.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/imagenet/create_imagenet.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/imagenet/resume_training.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/imagenet/train_caffenet.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/imagenet/make_imagenet_mean.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/cifar10/create_cifar10.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/cifar10/train_quick.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/cifar10/train_full_sigmoid.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/cifar10/train_full_sigmoid_bn.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/cifar10/train_full.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/mnist/train_lenet_adam.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/mnist/train_lenet_consolidated.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/mnist/train_mnist_autoencoder_adagrad.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/mnist/train_lenet_rmsprop.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/mnist/create_mnist.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/mnist/train_mnist_autoencoder_nesterov.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/mnist/train_lenet.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/mnist/train_mnist_autoencoder.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/mnist/train_mnist_autoencoder_adadelta.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/siamese/create_mnist_siamese.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/examples/siamese/train_mnist_siamese.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/tools/extra/parse_log.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/tools/extra/launch_resize_and_crop_images.sh",
      "https://raw.githubusercontent.com/hszhao/PSPNet/master/evaluation/run.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "For installation, please follow the instructions of [Caffe](https://github.com/BVLC/caffe) and [DeepLab v2](https://bitbucket.org/aquariusjay/deeplab-public-ver2). To enable cuDNN for GPU acceleration, cuDNN v4 is needed. If you meet error related with 'matio', please download and install [matio](https://sourceforge.net/projects/matio/files/matio/1.5.2) as required in 'DeepLab v2'.\n\nThe code has been tested successfully on Ubuntu 14.04 and 12.04 with CUDA 7.0.\n\n",
      "technique": "Header extraction"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/hszhao/PSPNet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "Python",
      "Cuda",
      "MATLAB",
      "CMake",
      "Makefile",
      "Shell",
      "C",
      "Limbo"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/hszhao/PSPNet/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'COPYRIGHT\\n\\nAll new contributions compared to the original Caffe branch:\\nCopyright (c) 2015, 2016, Liang-Chieh Chen (UCLA, Google), George Papandreou (Google),\\nIasonas Kokkinos (CentraleSup\\xc3\\xa9lec /INRIA), Jonathan T. Barron(Google),\\nYi Yang (Baidu), Jiang Wang (Baidu), Wei Xu (Baidu),\\nKevin Murphy (Google), and Alan L. Yuille (UCLA, JHU)\\nAll rights reserved.\\n\\nAll contributions by the University of California:\\nCopyright (c) 2014, 2015, The Regents of the University of California (Regents)\\nAll rights reserved.\\n\\nAll other contributions:\\nCopyright (c) 2014, 2015, the respective contributors\\nAll rights reserved.\\n\\nCaffe uses a shared copyright model: each contributor holds copyright over\\ntheir contributions to Caffe. The project versioning records all such\\ncontribution and copyright details. If a contributor wants to further mark\\ntheir specific copyright on a particular contribution, they should indicate\\ntheir copyright solely in the commit message of the change when it is\\ncommitted.\\n\\nLICENSE\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met: \\n\\n1. Redistributions of source code must retain the above copyright notice, this\\n   list of conditions and the following disclaimer. \\n2. Redistributions in binary form must reproduce the above copyright notice,\\n   this list of conditions and the following disclaimer in the documentation\\n   and/or other materials provided with the distribution. \\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\nCONTRIBUTION AGREEMENT\\n\\nBy contributing to the BVLC/caffe repository through pull-request, comment,\\nor otherwise, the contributor releases their content to the\\nlicense and copyright terms herein.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Pyramid Scene Parsing Network",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "PSPNet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "hszhao",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hszhao/PSPNet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1430,
      "date": "Mon, 13 Dec 2021 16:14:47 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Clone the repository:\n\n   ```shell\n   git clone https://github.com/hszhao/PSPNet.git\n   ```\n\n2. Build Caffe and matcaffe:\n\n   ```shell\n   cd $PSPNET_ROOT\n   cp Makefile.config.example Makefile.config\n   vim Makefile.config\n   make -j8 && make matcaffe\n   ```\n\n3. Evaluation:\n\n   - Evaluation code is in folder 'evaluation'.\n   - Download trained models and put them in folder 'evaluation/model':\n     - pspnet50\\_ADE20K.caffemodel: [GoogleDrive](https://drive.google.com/file/d/0BzaU285cX7TCN1R3QnUwQ0hoMTA/view?usp=sharing&resourcekey=0-L6OpeoyQEhFhmmoYPmYcZA)\n     - pspnet101\\_VOC2012.caffemodel: [GoogleDrive](https://drive.google.com/file/d/0BzaU285cX7TCNVhETE5vVUdMYk0/view?usp=sharing&resourcekey=0-xFuZ3szHOg4z0eYBhuJDSA)\n     - pspnet101\\_cityscapes.caffemodel: [GoogleDrive](https://drive.google.com/file/d/0BzaU285cX7TCT1M3TmNfNjlUeEU/view?usp=sharing&resourcekey=0-7zvi4rARgQoXa6_AvZ17qg)\n   - Modify the related paths in 'eval_all.m':\n     - Mainly variables 'data_root' and 'eval_list', and your image list for evaluation should be similarity to that in folder 'evaluation/samplelist' if you use this evaluation code structure. \n     - Matlab 'parfor' evaluation is used and the default GPUs are with ID [0:3]. Modify variable 'gpu_id_array' if needed. We assume that number of images can be divided by number of GPUs; if not, you can just pad your image list or switch to single GPU evaluation by set 'gpu_id_array' be length of one, and change 'parfor' to 'for' loop.\n\n   ```shell\n   cd evaluation\n   vim eval_all.m\n   ```\n\n   - Run the evaluation scripts:\n\n   ```\n   ./run.sh\n   ```\n\n4. Results: \n\n   Prediction results will show in folder 'evaluation/mc_result' and the expected scores are:\n\n   (single scale testing denotes as 'ss' and multiple scale testing denotes as 'ms')\n\n   - PSPNet50 on ADE20K valset (mIoU/pAcc): 41.68/80.04 (ss) and 42.78/80.76 (ms) \n   - PSPNet101 on VOC2012 testset (mIoU): 85.41 (ms)\n   - PSPNet101 on cityscapes valset (mIoU/pAcc): 79.70/96.38 (ss) and 80.91/96.59 (ms)\n\n5. Demo video:\n\n   Video processed by PSPNet101 on cityscapes dataset:\n\n   Merge with colormap on side: [Video1](https://youtu.be/rB1BmBOkKTw)\n\n   Alpha blending with value as 0.5: [Video2](https://youtu.be/HYghTzmbv6Q)\n\n",
      "technique": "Header extraction"
    }
  ]
}