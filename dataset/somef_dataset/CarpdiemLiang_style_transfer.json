{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/CarpdiemLiang/style_transfer",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-06-02T23:58:13Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-09-23T07:50:44Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This model consists of 2 generators and 2 discriminators. The two generators as U-net like CNNs. During the evaluation of the model, I directly used the pretrained salient objective detection model from Joker, https://github.com/Joker316701882/Salient-Object-Detection.\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "This is a project about image style transfer developed by Tao Liang, Tianrui Yu, Ke Han and Yifan Ruan. Our project contains three different models, one is in \"cycle_gan_unet\" directory which uses the u-net like cnn as generators, one is in \"Ukiyoe_codes\" directory which uses Resnet blocks as generators, which uses the model proposed in this paper https://arxiv.org/pdf/1703.10593.pdf, the other is in neural_style_transfer that implement sytle transfer using convolution neural network proposed in this paper https://arxiv.org/pdf/1508.06576.pdf.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8373689841261635
      ],
      "excerpt": "./cycle_gan_unet/meta_grapsh                         -- Store the information of the salient objective detection model<br/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8991333916769685
      ],
      "excerpt": "./cycle_gan_unet/cycle_gan_unet.ipynb                       -- This notebook is the main function of the model<br/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9817715188787908
      ],
      "excerpt": "This is the README for photo-to-ukiyoe cycle-GAN style transfer task. Over half of the codes are adopted from 'https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix' and then modified. The rest are written by student. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8087305728910539
      ],
      "excerpt": ".Ukiyoe_codes/models/base_model.py:   base class of all the models<br/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8475758282038963
      ],
      "excerpt": ".Ukiyoe_codes/datasets/:   a folder that stores training and testing data in trainA, trainB, testA and testB subfolders.<br/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9581152254188163
      ],
      "excerpt": "./neural_style_transfer/Neural_Style_Transfer.ipynb      -- This notebook stores neural style transfer method as well as the demo of the model<br/> \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/CarpdiemLiang/style_transfer/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 06 Dec 2021 00:10:15 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/CarpdiemLiang/style_transfer/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "CarpdiemLiang/style_transfer",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/CarpdiemLiang/style_transfer/master/cycle_gan_unet/cycle_gan_unet.ipynb",
      "https://raw.githubusercontent.com/CarpdiemLiang/style_transfer/master/cycle_gan_unet/demo.ipynb",
      "https://raw.githubusercontent.com/CarpdiemLiang/style_transfer/master/Ukiyoe_codes/test.ipynb",
      "https://raw.githubusercontent.com/CarpdiemLiang/style_transfer/master/Ukiyoe_codes/plot_losses.ipynb",
      "https://raw.githubusercontent.com/CarpdiemLiang/style_transfer/master/Ukiyoe_codes/train.ipynb",
      "https://raw.githubusercontent.com/CarpdiemLiang/style_transfer/master/Ukiyoe_codes/single_test.ipynb",
      "https://raw.githubusercontent.com/CarpdiemLiang/style_transfer/master/neural_style_transfer/Neural_Style_Transfer.ipynb"
    ],
    "technique": "File Exploration"
  },
  "invocation": [
    {
      "confidence": [
        0.8120417566040287,
        0.8176403783394192,
        0.8564351135052369,
        0.8777039819145674
      ],
      "excerpt": "./cycle_gan_unet/cycle_gan_unet.ipynb                       -- This notebook is the main function of the model<br/> \n./cycle_gan_unet/nntools.py                           -- This .py file abstract the status manager and realize the training process of the model<br/> \n./cycle_gan_unet/util.py                              -- This .py file is used to realize the image pool called by nntools.py<br/> \n./cycle_gan_unet/inference.py                         -- This .py file is used to run the pretrained salient objective detection model<br/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8173853495908644,
        0.8754849737398619,
        0.9544253931819578,
        0.8024795369951151,
        0.9312996711225201,
        0.8806160945309133,
        0.8718952129388985,
        0.8042640655889509,
        0.8441267459600766
      ],
      "excerpt": "single_test.ipynb:   run this notebook to show the Ukiyoe-style transfer result of 'test_image.jpg'. Make sure the image, latest_ukiyoe_G_A.pkl and './models' are in their original places<br/> \ntrain.ipynb:  run this notebook to train a cycle-GAN that can transfer 'datasets/trainA' style to 'datasets/trainB' style. Training options can be found and revised in './options/train_options.py' and './options/base_options.py'<br/> \ntest.ipynb:  run this notebook to test the model in './checkpoints' file. Input the model name in './options/base_options.py'<br/> \nplot_losses.ipynb:   run this to plot losses given a loss log in './checkpoints'<br/> \n.Ukiyoe_codes/options/base_options.py:   stores basic training and testing options.<br/> \n.Ukiyoe_codes/options/train_options.py:   stores other training options<br/> \n.Ukiyoe_codes/options/test_options.py:   stores other testing options<br/> \n.Ukiyoe_codes/models/base_model.py:   base class of all the models<br/> \n.Ukiyoe_codes/models/cycle_gan_model.py:   implement cycle-GAN model<br/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9019921736244009
      ],
      "excerpt": ".Ukiyoe_codes/models/test_model.py:   define some testing settings and run the testing from test.ipynb<br/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8091400534782748,
        0.8351213478749455
      ],
      "excerpt": ".Ukiyoe_codes/datasets/:   a folder that stores training and testing data in trainA, trainB, testA and testB subfolders.<br/> \n.Ukiyoe_codes/checkpoints/:   a folder storing saved models, loss logs and training options<br/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8288423260544866
      ],
      "excerpt": ".Ukiyoe_codes/test_image.jpg: test image used in single_test.ipynb<br/> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/CarpdiemLiang/style_transfer/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Project Introduction",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "style_transfer",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "CarpdiemLiang",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/CarpdiemLiang/style_transfer/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Download the check-points for the model from the google drive link, and put them into the corresponding directorys.<br/>\n/baroque/checkpoint.pth.tar: https://drive.google.com/open?id=1oMTewhni1L7ZW0F9nNgNoE2RfkrGZ500<br/>\n/ukiyo_e/checkpoint.pth.tar: https://drive.google.com/open?id=1mEQliUwOKgSLSUuB_vBXwl03HH_p4VJO<br/>\n/salience_model/model.ckpt-200.data-00000-of-00001: https://drive.google.com/open?id=1u8gW2Oj8lZ_Cxqg561lQR9ioDaK64LwX<br/>\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Install visdom and dominate if willing to display training progress on a webpage by:\n    pip install -visdom\n    pip install -dominate\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Install package 'pillow' as: $ pip install --user pillow <br/>\nInstall package 'matplotlib' as: $ pip install --user matplotlib\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Mon, 06 Dec 2021 00:10:15 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Directly run the demo.ipynb notebook. You can see the original image and the transferred image.<br/>\nIf you want to train the model by yourself, delete /baroque and /ukiyo_e directorys. And run the cycle_gan_model.ipynb notebook. You can set all the parameters in the initialization of the experiment class.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "single_test.ipynb(for demo use):   run this notebook to show the Ukiyoe-style transfer result of 'test_image.jpg'. Make sure the image, latest_ukiyoe_G_A.pkl and './models' are in their original places<br/>\n\ntrain.ipynb:  run this notebook to train a cycle-GAN that can transfer 'datasets/trainA' style to 'datasets/trainB' style. Training options can be found and revised in './options/train_options.py' and './options/base_options.py'<br/>\n\ntest.ipynb:  run this notebook to test the model in './checkpoints' file. Input the model name in './options/base_options.py'<br/>\nplot_losses.ipynb:   run this to plot losses given a loss log in './checkpoints'<br/>\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Run the Neural_Style_Transfer.ipynb for demo.<br/>\nThe notebook also stores model. If you want to change the network structure, choose one of content_layers_default and style_layers_default each and comment the others. For white noise input, consider decreasing the weight of style loss and increase the number of optimizing steps. \n\n\n",
      "technique": "Header extraction"
    }
  ]
}