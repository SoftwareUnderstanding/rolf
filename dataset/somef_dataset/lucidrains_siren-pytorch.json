{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2006.09661\">Implicit Neural Representations with Periodic Activation Function</a>\n\n## Install\n\n```bash\n$ pip install siren-pytorch\n```\n\n## Usage\n\nA SIREN based multi-layered neural network\n\n```python\nimport torch\nfrom torch import nn\nfrom siren_pytorch import SirenNet\n\nnet = SirenNet(\n    dim_in = 2,                        # input dimension, ex. 2d coor\n    dim_hidden = 256,                  # hidden dimension\n    dim_out = 3,                       # output dimension, ex. rgb value\n    num_layers = 5,                    # number of layers\n    final_activation = nn.Sigmoid(",
      "https://arxiv.org/abs/2104.03960\">new paper</a> proposes that the best way to condition a Siren with a latent code is to pass the latent vector through a modulator feedforward network, where each layer's hidden state is elementwise multiplied with the corresponding layer of the Siren.\n\nYou can use this simply by setting an extra keyword `latent_dim`, on the `SirenWrapper`\n\n```python\nimport torch\nfrom torch import nn\nfrom siren_pytorch import SirenNet, SirenWrapper\n\nnet = SirenNet(\n    dim_in = 2,                        # input dimension, ex. 2d coor\n    dim_hidden = 256,                  # hidden dimension\n    dim_out = 3,                       # output dimension, ex. rgb value\n    num_layers = 5,                    # number of layers\n    w0_initial = 30.                   # different signals may require different omega_0 in the first layer - this is a hyperparameter\n"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bibtex\n@misc{sitzmann2020implicit,\n    title   = {Implicit Neural Representations with Periodic Activation Functions},\n    author  = {Vincent Sitzmann and Julien N. P. Martel and Alexander W. Bergman and David B. Lindell and Gordon Wetzstein},\n    year    = {2020},\n    eprint  = {2006.09661},\n    archivePrefix = {arXiv},\n    primaryClass = {cs.CV}\n}\n```\n\n```bibtex\n@misc{mehta2021modulated,\n    title   = {Modulated Periodic Activations for Generalizable Local Functional Representations}, \n    author  = {Ishit Mehta and Micha\u00ebl Gharbi and Connelly Barnes and Eli Shechtman and Ravi Ramamoorthi and Manmohan Chandraker},\n    year    = {2021},\n    eprint  = {2104.03960},\n    archivePrefix = {arXiv},\n    primaryClass = {cs.CV}\n}\n```",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{mehta2021modulated,\n    title   = {Modulated Periodic Activations for Generalizable Local Functional Representations}, \n    author  = {Ishit Mehta and Micha\u00ebl Gharbi and Connelly Barnes and Eli Shechtman and Ravi Ramamoorthi and Manmohan Chandraker},\n    year    = {2021},\n    eprint  = {2104.03960},\n    archivePrefix = {arXiv},\n    primaryClass = {cs.CV}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{sitzmann2020implicit,\n    title   = {Implicit Neural Representations with Periodic Activation Functions},\n    author  = {Vincent Sitzmann and Julien N. P. Martel and Alexander W. Bergman and David B. Lindell and Gordon Wetzstein},\n    year    = {2020},\n    eprint  = {2006.09661},\n    archivePrefix = {arXiv},\n    primaryClass = {cs.CV}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "net = SirenNet( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "    net, \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lucidrains/siren-pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-06-19T19:39:13Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-09T17:00:37Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9674954017605866
      ],
      "excerpt": "A <a href=\"https://arxiv.org/abs/2104.03960\">new paper</a> proposes that the best way to condition a Siren with a latent code is to pass the latent vector through a modulator feedforward network, where each layer's hidden state is elementwise multiplied with the corresponding layer of the Siren. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Pytorch implementation of SIREN -  Implicit Neural Representations with Periodic Activation Function",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lucidrains/siren-pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 28,
      "date": "Sun, 12 Dec 2021 00:02:17 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lucidrains/siren-pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "lucidrains/siren-pytorch",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\n$ pip install siren-pytorch\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from siren_pytorch import SirenNet, SirenWrapper \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8159497585197125
      ],
      "excerpt": "    dim_out = 3,                       #: output dimension, ex. rgb value \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lucidrains/siren-pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Phil Wang\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# SIREN in Pytorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "siren-pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "lucidrains",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lucidrains/siren-pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2021-12-03T18:58:03Z",
        "datePublished": "2021-12-03T18:58:58Z",
        "html_url": "https://github.com/lucidrains/siren-pytorch/releases/tag/0.1.6a",
        "name": "0.1.6",
        "tag_name": "0.1.6a",
        "tarball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/tarball/0.1.6a",
        "url": "https://api.github.com/repos/lucidrains/siren-pytorch/releases/54601452",
        "zipball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/zipball/0.1.6a"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2021-04-09T19:57:10Z",
        "datePublished": "2021-04-09T19:57:25Z",
        "html_url": "https://github.com/lucidrains/siren-pytorch/releases/tag/0.1.5",
        "name": "0.1.5",
        "tag_name": "0.1.5",
        "tarball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/tarball/0.1.5",
        "url": "https://api.github.com/repos/lucidrains/siren-pytorch/releases/41205078",
        "zipball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/zipball/0.1.5"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2021-04-09T19:43:55Z",
        "datePublished": "2021-04-09T19:44:08Z",
        "html_url": "https://github.com/lucidrains/siren-pytorch/releases/tag/0.1.4",
        "name": "0.1.4",
        "tag_name": "0.1.4",
        "tarball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/tarball/0.1.4",
        "url": "https://api.github.com/repos/lucidrains/siren-pytorch/releases/41204536",
        "zipball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/zipball/0.1.4"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2021-04-09T19:35:44Z",
        "datePublished": "2021-04-09T19:35:57Z",
        "html_url": "https://github.com/lucidrains/siren-pytorch/releases/tag/0.1.2",
        "name": "0.1.2",
        "tag_name": "0.1.2",
        "tarball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/tarball/0.1.2",
        "url": "https://api.github.com/repos/lucidrains/siren-pytorch/releases/41204200",
        "zipball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/zipball/0.1.2"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2021-04-09T19:13:35Z",
        "datePublished": "2021-04-09T19:14:09Z",
        "html_url": "https://github.com/lucidrains/siren-pytorch/releases/tag/0.1.1",
        "name": "0.1.1",
        "tag_name": "0.1.1",
        "tarball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/tarball/0.1.1",
        "url": "https://api.github.com/repos/lucidrains/siren-pytorch/releases/41203257",
        "zipball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/zipball/0.1.1"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2021-04-09T18:58:41Z",
        "datePublished": "2021-04-09T18:59:01Z",
        "html_url": "https://github.com/lucidrains/siren-pytorch/releases/tag/0.1.0",
        "name": "0.1.0",
        "tag_name": "0.1.0",
        "tarball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/tarball/0.1.0",
        "url": "https://api.github.com/repos/lucidrains/siren-pytorch/releases/41201687",
        "zipball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/zipball/0.1.0"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2021-02-20T15:01:20Z",
        "datePublished": "2021-02-20T15:01:39Z",
        "html_url": "https://github.com/lucidrains/siren-pytorch/releases/tag/0.0.9a",
        "name": "0.0.9",
        "tag_name": "0.0.9a",
        "tarball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/tarball/0.0.9a",
        "url": "https://api.github.com/repos/lucidrains/siren-pytorch/releases/38374505",
        "zipball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/zipball/0.0.9a"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2021-01-31T03:54:47Z",
        "datePublished": "2021-01-31T03:55:11Z",
        "html_url": "https://github.com/lucidrains/siren-pytorch/releases/tag/0.0.8",
        "name": "0.0.8",
        "tag_name": "0.0.8",
        "tarball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/tarball/0.0.8",
        "url": "https://api.github.com/repos/lucidrains/siren-pytorch/releases/37133739",
        "zipball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/zipball/0.0.8"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2021-01-18T01:27:34Z",
        "datePublished": "2021-01-18T01:27:53Z",
        "html_url": "https://github.com/lucidrains/siren-pytorch/releases/tag/0.0.7",
        "name": "0.0.7",
        "tag_name": "0.0.7",
        "tarball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/tarball/0.0.7",
        "url": "https://api.github.com/repos/lucidrains/siren-pytorch/releases/36526920",
        "zipball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/zipball/0.0.7"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2021-01-17T16:49:00Z",
        "datePublished": "2021-01-17T16:49:13Z",
        "html_url": "https://github.com/lucidrains/siren-pytorch/releases/tag/0.0.6",
        "name": "0.0.6",
        "tag_name": "0.0.6",
        "tarball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/tarball/0.0.6",
        "url": "https://api.github.com/repos/lucidrains/siren-pytorch/releases/36518189",
        "zipball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/zipball/0.0.6"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2021-01-07T17:24:33Z",
        "datePublished": "2021-01-07T17:24:48Z",
        "html_url": "https://github.com/lucidrains/siren-pytorch/releases/tag/0.0.5",
        "name": "0.0.5",
        "tag_name": "0.0.5",
        "tarball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/tarball/0.0.5",
        "url": "https://api.github.com/repos/lucidrains/siren-pytorch/releases/36105706",
        "zipball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/zipball/0.0.5"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2020-07-21T19:00:23Z",
        "datePublished": "2020-07-21T19:01:54Z",
        "html_url": "https://github.com/lucidrains/siren-pytorch/releases/tag/0.0.4",
        "name": "0.0.4",
        "tag_name": "0.0.4",
        "tarball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/tarball/0.0.4",
        "url": "https://api.github.com/repos/lucidrains/siren-pytorch/releases/28797091",
        "zipball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/zipball/0.0.4"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "",
        "dateCreated": "2020-06-20T04:12:06Z",
        "datePublished": "2020-06-20T04:12:21Z",
        "html_url": "https://github.com/lucidrains/siren-pytorch/releases/tag/0.0.3",
        "name": "0.0.3",
        "tag_name": "0.0.3",
        "tarball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/tarball/0.0.3",
        "url": "https://api.github.com/repos/lucidrains/siren-pytorch/releases/27745854",
        "zipball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/zipball/0.0.3"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "Fix bug with initialization for first layer, which requires w0 to be 30",
        "dateCreated": "2020-06-20T01:04:08Z",
        "datePublished": "2020-06-20T01:04:52Z",
        "html_url": "https://github.com/lucidrains/siren-pytorch/releases/tag/0.0.2",
        "name": "0.0.2",
        "tag_name": "0.0.2",
        "tarball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/tarball/0.0.2",
        "url": "https://api.github.com/repos/lucidrains/siren-pytorch/releases/27744435",
        "zipball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/zipball/0.0.2"
      },
      {
        "authorType": "User",
        "author_name": "lucidrains",
        "body": "First release",
        "dateCreated": "2020-06-20T00:56:48Z",
        "datePublished": "2020-06-20T00:57:06Z",
        "html_url": "https://github.com/lucidrains/siren-pytorch/releases/tag/0.0.1",
        "name": "0.0.1",
        "tag_name": "0.0.1",
        "tarball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/tarball/0.0.1",
        "url": "https://api.github.com/repos/lucidrains/siren-pytorch/releases/27744349",
        "zipball_url": "https://api.github.com/repos/lucidrains/siren-pytorch/zipball/0.0.1"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 258,
      "date": "Sun, 12 Dec 2021 00:02:17 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "artificial-intelligence",
      "deep-learning",
      "activation-functions"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "A SIREN based multi-layered neural network\n\n```python\nimport torch\nfrom torch import nn\nfrom siren_pytorch import SirenNet\n\nnet = SirenNet(\n    dim_in = 2,                        #: input dimension, ex. 2d coor\n    dim_hidden = 256,                  #: hidden dimension\n    dim_out = 3,                       #: output dimension, ex. rgb value\n    num_layers = 5,                    #: number of layers\n    final_activation = nn.Sigmoid(),   #: activation of final layer (nn.Identity() for direct output)\n    w0_initial = 30.                   #: different signals may require different omega_0 in the first layer - this is a hyperparameter\n)\n\ncoor = torch.randn(1, 2)\nnet(coor) #: (1, 3) <- rgb value\n```\n\nOne SIREN layer\n\n```python\nimport torch\nfrom siren_pytorch import Siren\n\nneuron = Siren(\n    dim_in = 3,\n    dim_out = 256\n)\n\ncoor = torch.randn(1, 3)\nneuron(coor) #: (1, 256)\n```\n\nSine activation (just a wrapper around `torch.sin`)\n\n```python\nimport torch\nfrom siren_pytorch import Sine\n\nact = Sine(1.)\ncoor = torch.randn(1, 2)\nact(coor)\n```\n\nWrapper to train on a specific image of specified height and width from a given `SirenNet`, and then to subsequently generate.\n\n\n```python\nimport torch\nfrom torch import nn\nfrom siren_pytorch import SirenNet, SirenWrapper\n\nnet = SirenNet(\n    dim_in = 2,                        #: input dimension, ex. 2d coor\n    dim_hidden = 256,                  #: hidden dimension\n    dim_out = 3,                       #: output dimension, ex. rgb value\n    num_layers = 5,                    #: number of layers\n    w0_initial = 30.                   #: different signals may require different omega_0 in the first layer - this is a hyperparameter\n)\n\nwrapper = SirenWrapper(\n    net,\n    image_width = 256,\n    image_height = 256\n)\n\nimg = torch.randn(1, 3, 256, 256)\nloss = wrapper(img)\nloss.backward()\n\n#: after much training ...\n#: simply invoke the wrapper without passing in anything\n\npred_img = wrapper() #: (1, 3, 256, 256)\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}