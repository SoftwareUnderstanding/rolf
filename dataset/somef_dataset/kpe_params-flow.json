{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1908.03265\n.. _`LookAhead`: https://arxiv.org/abs/1907.08610\n",
      "https://arxiv.org/abs/1907.08610\n"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9189494487012718
      ],
      "excerpt": "11.Sep.2019 - LookAhead_ optimizer wrapper implementation for efficient non eager graph mode execution (TPU) added. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8334316807263773
      ],
      "excerpt": "04.Sep.2019 - RAdam_ optimizer implementation added. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.86718837060696,
        0.8880929169745804,
        0.86718837060696
      ],
      "excerpt": ".. kpe/params-flow: https://github.com/kpe/params-flow \n.. kpe/bert-for-tf2: https://github.com/kpe/bert-for-tf2 \n.. params-flow: https://github.com/kpe/params-flow \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kpe/params-flow",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-04-08T18:42:46Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-03-25T05:13:57Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9434442242775744
      ],
      "excerpt": "which would be sufficient to pass the right configuration arguments to the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8197498459598018
      ],
      "excerpt": "on the build() or call() implementations, instead of writing boilerplate \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8555163281516447
      ],
      "excerpt": "   sure to use _construct() instead of __init__() in your Layer and Model subclasses. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8744602940808932
      ],
      "excerpt": "params-flow provides a Layer and Model base classes that help \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8677130742082527
      ],
      "excerpt": "When subclassing a Keras Model or Layer, each configuration parameter \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9213746981390007,
        0.8354034515201837,
        0.8523868737590866
      ],
      "excerpt": "in a lot of boilerplate code. params-flow provides an alternative by \nencapsulating all those __init__() configuration arguments in a dedicated \nParams instance (Params is kind of a \"type-safe\" python dict - \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9216527886512601,
        0.8257132070819303,
        0.8965830572890106
      ],
      "excerpt": "The model/layer specific configuration needs to be declared as \na nested Model.Params/Layer.Params subclass, and your model/layer have to \nsubclass params_flow.Model/params_flow.Layer instead of the Keras ones: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8761980827106843,
        0.8205564263210797
      ],
      "excerpt": "this allows you to declare the model's configuration by simply extending \nthe Params of the underlying layers: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8618704235753928,
        0.9924766986464632
      ],
      "excerpt": "N.B. The two code excerpts above are taken from kpe/bert-for-tf2, so check there \nfor the details of a non-trivial params-flow based implementation (of BERT_). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.990959449553425
      ],
      "excerpt": "kpe/bert-for-tf2 - BERT implementation using the TensorFlow 2 Keras API with the help of params-flow for reducing some of the common Keras boilerplate code needed when passing parameters to custom layers. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A TensorFlow Keras coding style for reducing boilerplate code in custom layers and models.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kpe/params-flow/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Mon, 13 Dec 2021 11:33:25 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/kpe/params-flow/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "kpe/params-flow",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/kpe/params-flow/master/check-before-commit.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9431353567849173
      ],
      "excerpt": "pip install params-flow \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8081715675431319
      ],
      "excerpt": ".. |Python Versions| image:: https://img.shields.io/pypi/pyversions/params-flow.svg \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8377805150881655
      ],
      "excerpt": ".. kpe/bert-for-tf2: https://github.com/kpe/bert-for-tf2 \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8447568794525869
      ],
      "excerpt": "class Params(pf.Layer.Params): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030300915719836
      ],
      "excerpt": "from tf.keras.layers import Layer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8090862137700358,
        0.8659935926922766
      ],
      "excerpt": "Params instance (Params is kind of a \"type-safe\" python dict - \nsee kpe/py-params). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8446346990986918
      ],
      "excerpt": "a nested Model.Params/Layer.Params subclass, and your model/layer have to \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.817566562757786
      ],
      "excerpt": "     class Params(PositionEmbeddingLayer.Params): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "       use_position_embeddings = True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.817566562757786,
        0.8060372108626078
      ],
      "excerpt": "     class Params(TransformerSelfAttentionLayer.Params, \n                  ProjectionLayer.Params): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.817566562757786,
        0.8060372108626078
      ],
      "excerpt": "    class Params(BertEmbeddingsLayer.Params, \n                 TransformerEncoderLayer.Params): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8738678949969347
      ],
      "excerpt": "kpe/py-params_  - A \"type-safe\" dict class for python. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/kpe/params-flow/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 kpe\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "params-flow",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "params-flow",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "kpe",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kpe/params-flow/blob/master/README.rst",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 17,
      "date": "Mon, 13 Dec 2021 11:33:25 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "tensorflow",
      "keras"
    ],
    "technique": "GitHub API"
  }
}