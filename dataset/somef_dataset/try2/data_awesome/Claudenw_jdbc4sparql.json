{
  "citation": [
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "Group ID: org.xenei \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Claudenw/jdbc4sparql",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2012-12-27T10:35:22Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-02-04T23:29:39Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9684450156316442,
        0.8026580906655371
      ],
      "excerpt": "JDBC 4 SPARQL is a JDBC Driver that uses a SPARQL endpoint (or Jena Model) as the data store. \nGroup ID: org.xenei \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9934107499137788
      ],
      "excerpt": "The URL for the J4SDriver is  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8148247480407821,
        0.9210783119518815
      ],
      "excerpt": "For current runtime configuration options and defaults execute the J4SDriver class as an application. \ncatalog The name of the catalogue to restrict queries for. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9891785691729262
      ],
      "excerpt": "sparql - URL is a sparql endpoint \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9533704670514688,
        0.9000246911479651,
        0.9034472614976067
      ],
      "excerpt": "Currently the catalogue is built at runtime by the builder, however future improvements should include a mechanism to store an entire configuration of multiple catalogues. \nthe Catalogue contains the URL for the SPARQL endpoint or RDF file so it will be possible to configure the driver to access multiple endpoints. \nSQL and SPARQL use nomenclatures that conflict with each other.  For the purposes of this documentation, unless otherwise specified, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9944019801545344,
        0.9135837820103085,
        0.9567052869927791,
        0.917650424832199
      ],
      "excerpt": "In general an RDF Graph (and thus a SPARQL endpoint) is an instance of a navigational database, SQL is generally designed to work \nagainst a relational model so there this application attempts to map a navigational database onto relational tables and keys.  It  \ndoes this through the use of a \"SchemaBuilder\" implementation to map the RDF Graph to tables and columns. \nThe default implementation looks for RDF resources that have a rdf:type of rdfs:Class.  It considers  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9890865015059489
      ],
      "excerpt": "RDF store looking for distinct properties of objects of the \"Table Resource\" types.  The properties are the columns in the table.  All tables generated by the \"SchemaBuilder\" are  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9384680800563171
      ],
      "excerpt": "It is possible to override the default implementation by implementing a new SchemaBuilder and adding it to the /META-INF/services/org.xenei.jdbc4sparql.sparql.builders.SchemaBuilder file. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9841038333763152,
        0.9407114024919593
      ],
      "excerpt": "A SQL query is parsed by a \"SparqlParser\" implementation the and converted into a SPARQL query. \nThe default implementation of SparqlParser is LGPL v3 and uses an LGPL v2.1 based package.  Other implementations may be used. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8573334390738443,
        0.9892426964188108
      ],
      "excerpt": "The returned query is then executed against the SPARQL endpoint or the  \nJena Model.  The SPARQL ResultSet is retrieved and the QuerySolutions stored in a local list.  A SQL ResultSet is  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A JDBC driver that takes data from SPARQL endpoints or RDF graphs",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Claudenw/jdbc4sparql/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Mon, 20 Dec 2021 12:49:21 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Claudenw/jdbc4sparql/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Claudenw/jdbc4sparql",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8436913604321702
      ],
      "excerpt": "builder The builder to build the SQL Schema with.  Either the name of a registered builder or a class name.  See \"Registered Schema Builders\" below. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Claudenw/jdbc4sparql/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Java"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "JDBC 4 SPARQL",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "jdbc4sparql",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Claudenw",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Claudenw/jdbc4sparql/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 23,
      "date": "Mon, 20 Dec 2021 12:49:21 GMT"
    },
    "technique": "GitHub API"
  }
}