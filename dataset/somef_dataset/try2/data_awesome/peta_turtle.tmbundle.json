{
  "citation": [
    {
      "confidence": [
        0.8283216015784888
      ],
      "excerpt": ":QUERY http://dbpedia.org/sparql \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8283216015784888,
        0.8283216015784888
      ],
      "excerpt": "WHERE {                                               | http://dbpedia.org/sparql \n    ?s http://dbpedia.org/property/season ?o .      | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8283216015784888
      ],
      "excerpt": "BASE http://dbpedia.org/                            \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8283216015784888
      ],
      "excerpt": "WHERE {                                               | http://dbpedia.org/sparql \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/peta/turtle.tmbundle",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2013-03-07T21:53:09Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-11-08T11:09:15Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9013587595524358,
        0.8837567140428302,
        0.9617915134530133
      ],
      "excerpt": "Totally awesome bundle for Turtle \u2013 the terse RDF triple language. \nIt consists of: \nLanguage grammar for Turtle and SPARQL 1.1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8669697655725778
      ],
      "excerpt": "Documentation for classes and roles/properties at your fingertips (live-aggregated) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8483254458787244
      ],
      "excerpt": "Some snippets (prefixes and document skeleton) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9435925477619894,
        0.9968029537584643,
        0.8125004263087696,
        0.808274215371622
      ],
      "excerpt": "Commands for instant graph visualization of a knowledge base (requires Graphviz and Raptor) \nAutomatic removal of unused prefixes \nConversion between all common RDF formats \nSee Screenshots \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9110007724043461,
        0.9417638775470372
      ],
      "excerpt": "The language grammar now covers the official W3C parser spec (as proposed in the latest CR released on Feb 19th 2013). However, there are still one/two particularities that differ, but you shouldn't notice them during your daily work. In the case you notice some weird behaviour (most obvious sign: broken syntax highlighting), please file a bug in the project's issue tracker. \nThe language grammar also recognizes keywords and builtin functions from the latest SPAR[QU]L 1.1 language specification. Further there is basic autocompletion (\u2325 + \u238b) for the aforementioned. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.81320300128395,
        0.9754631595501613,
        0.8782573446448811,
        0.9950285224920474
      ],
      "excerpt": "NOTE: When determining IRIs associated with a given prefix name, local prefix declarations always have precedence over those given by prefix.cc. So when you mess up IRIs in your @prefix directives, auto-completion might not work as expected. \nWhen you invoke the Autocomplete command (\u2325 + \u238b) within the scope of a prefix directive (right after @prefix or PREFIX), the Turtle bundle fetches a list of all prefixes registered at prefix.cc and displays them nicely in a auto-complete dropdown box. Once you have chosen an and confirmed your selection, the prefix directive is automagically updated with the prefix and its according URI. (Note: the fetched data is locally cached for 24h) \nNOTE: Auto-completion for prefix declarations is case-insensitive \nWhen you invoke the Autocomplete command (\u2325 + \u238b) within the scope of a prefixed name (e.g. right after my: or at my:a...), the Turtle bundle determines the actual URI that is abbreviated by the prefixed namespace and checks if there is a machine readable Vocabulary/Ontology document available (currently only RDF/S and OWL documents in the XML serialization format are supported -- but with known issues). When one is found, it is live-aggregated and all of its Classes and Roles/Properties are extracted (along with their documentation) and nicely presented in a auto-complete dropdown box. (Note: the fetched data is locally cached for 24h) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9814970611672765,
        0.9883316450878995,
        0.9795514525372178,
        0.8991119973593563,
        0.9731543125204594
      ],
      "excerpt": "For now, the Turtle bundle relies on prefix.cc for mapping prefixes to URIs (required for all live-aggregations). The problem however is, that the available listings contain only one IRI per prefix (the one with the highest ranking) and not every IRI offers a machine readable vocabulary/ontology representation, what in turn means that for certain prefixes no auto-completion data might be available. You can help to fix this, by visiting the according page at prefix.cc (URL scheme looks like http://prefix.cc/&lt;THE_PREFIX&gt;; without angle brackets ofc) and up/downvoting the according URIs. \nThe automatic aggregation of machine-readable vocabulary/ontology descriptions is working in principle but still has some shortcomings. (See the Github issue tracker) I will overwork that part when I have some more spare time and/or the need just arises. When you're told that data for a given prefix was fetched (green tooltip after a few seconds of freeze) but you will see no autocompletion dropdown later on, it probably means that the aggregator script failed and/or the IRI could not redirect to resource in a compatible format. \nAll (web-based) query forms that crossed by cursor had one thing in common \u2013 they suck(ed). Syntax highlighting? Efficient workflows (like trial-error-roundtripping)? Of course NOT. So I decided to add something similar to TextMate. The Execute SPARQL Query command may seem self-explaining, but it hides some important features: \nfirst of all, it supports multiple sections in a single document \nit is aware of custom magic comments types (called \"markers\") for  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8895198900735759
      ],
      "excerpt": "query results are nicely displayed together with the query log in a preview window \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9436726630468423
      ],
      "excerpt": "Execute the section where your cursor is currently positioned in  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8654443101040087
      ],
      "excerpt": "INSERT DATA { :instanceA rdfs:label 'Human-readable label of instanceA'. } \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8061157497933643,
        0.8160187569272853
      ],
      "excerpt": "You can specify multiple magic comments throughout your document. When executing the query command, it will automatically determine the required endpoint type depending on the SPARQL commands that occur in your query. After that, it scans your document for magic comments where it uses the following strategies: \nTop-down: When the whole document is used as query, it scans every line beginning at the top until it finds a suitable magic comment  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9212632551101544,
        0.8605080683252477
      ],
      "excerpt": "that should contain the HTTP(S) URL to SPAR[QU]L endpoints. When even this fails, YOU (the user) are prompted to enter an endpoint URL. If you cancel, the execution is aborted and a puppy dies. \nHere is an example document with multiple sections and multiple magic comments for endpoints: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "INSERT DATA {                                         | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8158322455849386
      ],
      "excerpt": "        rdfs:label 'Instance of ClassB'.              | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9562357396657646,
        0.9962503498716866,
        0.828846739979584
      ],
      "excerpt": "By using Includes, you can reuse named sections all over the place. This way, it is possible to write typically used snippets once, and then just \"call\" them from anywhere else when needed. This is especially helpful for SPARQL beginners or when iteratively developing complex queries where one wants to see the effect of a previous query immediately. \nWhen executed, every included snippet is listed separately in the web preview window of TextMate. That way it is easy to track down issues with intermediate states (and not just only after all queries have finished). \nThe order in which sections appear and are included in your document doesn't matter. So an included section doesn't have to be defined before the section it is included from. The following example shows a simple use-case: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "INSERT DATA { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8050092912630198
      ],
      "excerpt": ":descr= Selects all bnodes in the default graph \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8799308601763052,
        0.9186570895107802
      ],
      "excerpt": "There is also basic support for simple metadata properties in the following form: #propname= some prop value. It's the SPARQL pendant to jsdoc or phpdoc comments. However, beside section names an description texts I have no idea how this could be used. Do you? \nI have the vague idea of a pastebin for SPARQL in mind, where one can host reusable SPARQL snippets with support for parametrized SPARQL calls. What do you think about it? \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9630338555068401
      ],
      "excerpt": "\"Smart\" prefix/base directives (hit tab to see it work) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9324953772033974
      ],
      "excerpt": "You can trigger a syntax validation of your Turtle by pressing CTRL + SHIFT + V. In order to make use of syntax validation you must a have a working installation of the Raptor RDF syntax library. For detailed instructions about wiring up Raptor with Textmate, see the #graph-visualization. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8845164989604902,
        0.8845164989604902
      ],
      "excerpt": "TM_DOT absolute path to the dot binary (part of Graphviz)   \nTM_RAPPER absoluter path to the rapper binary (part of Raptor) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9341674142451518
      ],
      "excerpt": "In order to make use of the converter functionality, you must need a working installation of the Raptor RDF syntax library. For detailed instructions about wiring up Raptor with Textmate, see the #graph-visualization. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9033955427535654
      ],
      "excerpt": "Display resource documentation as HTML text (with clickable links to official sources) in a notification window \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9125826548361761
      ],
      "excerpt": "Convert RDF/S and OWL documents from XML into Turtle and \"link\" resource identifiers to them, so that users can jump/navigate across all involved documents \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Totally awesome Textmate bundle for Turtle \u2013 the terse RDF Triple Language.",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "When you invoke the `Documentation for Resource` command (`\u2303 + H`) within the scope of a prefixed name IRI (e.g. `my:Dog`), the Turtle bundle looks up if there are any informal descriptions available (like description texts, HTTP URLs to human-readable docs, asf.) and if so, displays them to the user. (Note: the fetched data is locally cached for 24h)\n\n__NOTE: *That function also suffers from the issues outlined in the previous section.*__\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/peta/turtle.tmbundle/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Mon, 20 Dec 2021 19:04:49 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/peta/turtle.tmbundle/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "peta/turtle.tmbundle",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/peta/turtle.tmbundle/master/Support/textmate-runner/proxy-installer.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The Turtle bundle is now officially available through the Textate bundle installer (_Textmate -> Preferences -> Bundles_). However, it usually takes a few days until new releases are available through the bundle installer (make sure that you enabled 'Keep bundles updated' in the application preferences). If you know what you do, you can also install bundles (like Turtle) by hand. Just download/clone this repository, and place its root directory at `~/Library/Application Support/Avian/Bundles/Turtle.tmbundle`. That way it's kept distinct from bundles installed through the bundle installer. Textmate should notice the new bundle automatically; but when in doubt, just restart Textmate (`\u2303 + \u2318 + Q`). \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8298927216590676
      ],
      "excerpt": "NOTE: When determining IRIs associated with a given prefix name, local prefix declarations always have precedence over those given by prefix.cc. So when you mess up IRIs in your @prefix directives, auto-completion might not work as expected. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8487905710840633
      ],
      "excerpt": "Execute your current selection \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8043297049552203
      ],
      "excerpt": ":UPDATE http://example1.com/ds/update \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8633070765615724
      ],
      "excerpt": "These magic comments have the following syntax: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8985508546679594
      ],
      "excerpt": "You can specify multiple magic comments throughout your document. When executing the query command, it will automatically determine the required endpoint type depending on the SPARQL commands that occur in your query. After that, it scans your document for magic comments where it uses the following strategies: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8093676874417933
      ],
      "excerpt": ":UPDATE http://example.com/tbox/update \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8093676874417933
      ],
      "excerpt": ":UPDATE http://example.com/abox/update \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8183067874011317
      ],
      "excerpt": ":name= insert-some-bnode \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8500779984955685
      ],
      "excerpt": ":name= drop-all \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8500779984955685
      ],
      "excerpt": ":name= select-all-bnodes \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8007535867641836
      ],
      "excerpt": "    ?s <urn:example#:label> ?o .  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8068066191363189
      ],
      "excerpt": ":name= select-all-bnodes \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8024666185999604
      ],
      "excerpt": "Basic document skeleton \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/peta/turtle.tmbundle/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Ruby",
      "CSS",
      "XSLT",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'The MIT License (MIT)\\n\\nCopyright (c) 2013\\xe2\\x80\\x932015 Peter Geil\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "turtle.tmbundle",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "turtle.tmbundle",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "peta",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/peta/turtle.tmbundle/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 26,
      "date": "Mon, 20 Dec 2021 19:04:49 GMT"
    },
    "technique": "GitHub API"
  },
  "support": [
    {
      "confidence": [
        1
      ],
      "excerpt": "One of the features EVERY user could greatly benefit from, is a more powerful auto-completion feature. However, the implementation of such a feature takes a considerable amount of time. Unfortunately time is one of those goods, Allan (the creator of TextMate) and the other guy(s) from Macromates don't have enough from. So I had to idea to start a crowdfunding campaign to raising enough funds for working two months as full-time contributor to the TextMate 2 project. [Visit my campaign page and contribute!](http://www.indiegogo.com/projects/textmate-dialog2-sprint).\n\n",
      "technique": "Header extraction"
    }
  ]
}