{
  "citation": [
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "Loading remote graphs \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8043073075947367
      ],
      "excerpt": "  if(!err) { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9319736043092812
      ],
      "excerpt": "    if(results[0].s.token === 'uri') { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8043073075947367
      ],
      "excerpt": "  if(err) { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "Loading remote graphs \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8043073075947367
      ],
      "excerpt": "  if(err) { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8670498468297771
      ],
      "excerpt": "             \"homepage\": {\"@id\": \"http://xmlns.com/foaf/0.1/homepage\", \"@type\": \"xsd:anyURI\" }, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9072564759784449
      ],
      "excerpt": "          \"homepage\": \"http://example.org/home/\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "  if(event === 'added') { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "  } else if(event === 'deleted') { \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/antoniogarrote/rdfstore-js",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2011-02-17T08:09:48Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-18T14:52:15Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "rdfstore-js is a pure Javascript implementation of a RDF graph store with support for the SPARQL query and data manipulation language.\n```javascript\nvar rdfstore = require('rdfstore');\n\nrdfstore.create(function(err, store) {\n  store.execute('LOAD <http://dbpedia.org/resource/Tim_Berners-Lee> INTO GRAPH <http://example.org/people>', function() {\n\n\tstore.setPrefix('dbp', 'http://dbpedia.org/resource/');\n\n\tstore.node(store.rdf.resolve('dbp:Tim_Berners-Lee'),  \"http://example.org/people\", function(err, graph) {\n\n\t  var peopleGraph = graph.filter(store.rdf.filters.type(store.rdf.resolve(\"foaf:Person\")));\n\n\t  store.execute('PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#:>\\\n\t\t\t\t\t PREFIX foaf: <http://xmlns.com/foaf/0.1/>\\\n\t\t\t\t\t PREFIX : <http://example.org/>\\\n\t\t\t\t\t SELECT ?s FROM NAMED :people { GRAPH ?g { ?s rdf:type foaf:Person } }',\n\t\t\t\t\t function(err, results) {\n\n\t\t\t\t\t   console.log(peopleGraph.toArray()[0].subject.valueOf() === results[0].s.value);\n\n\t\t\t\t\t });\n\t});\n\n  });\n});\n```\n\nrdfstore-js can be executed in a web browser or can be included as a library in a node.js application. It can also be executed as a stand-alone SPARQL end-point accepting SPARQL RDF Protocol HTTP requests. Go to the bottom of this page to find some application examples using the library.\n\nThe current implementation is far from complete but it already passes all the test cases for the SPARQL 1.0 query language and supports data manipulation operations from the SPARQL 1.1/Update version of the language.\n\nSome other features included in the library are the following:\n\n- SPARQL 1.0 support\n- SPARQL 1.1/Update support\n- Partial SPARQL 1.1 query support\n- JSON-LD parser\n- Turtle/N3 parser\n- W3C RDF Interfaces API\n- RDF graph events API\n- Custom filter functions\n- Browser persistence using IndexedDB\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8397993966644636
      ],
      "excerpt": "Many features present in versions 0.8.X have been removed in the 0.9.X. Some of them, will be added in the next versions, other like the MongoDB backend will be discarded. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8977176531556824
      ],
      "excerpt": "To execute the whole test suite of the library, including the DAWG \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.97003225717041
      ],
      "excerpt": "This is a small overview of the rdfstore-js API. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8904235160219709
      ],
      "excerpt": "// execution with an explicit default and named graph \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8779627649017175
      ],
      "excerpt": "rdfstore-js will try to retrieve remote RDF resources across the network when a 'LOAD' SPARQL query is executed. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9595355985966432,
        0.8626457743169632
      ],
      "excerpt": "The browser build, will try to perform an AJAX request to retrieve the resource using the correct HTTP headers. Nevertheless, this implementation is subjected to the limitations of the Same Domain Policy implemented in current browsers that prevents cross domain requests. Redirections, even for the same domain, may also fail due to the browser removing the 'Accept' HTTP header of the original request. \nrdfstore-js relies in on the jQuery Javascript library to peform cross-browser AJAX requests. This library must be linked in order to exeucte 'LOAD' requests in the browser. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9973579778918702
      ],
      "excerpt": "The following interface is a convenience API to work with Javascript code instead of using SPARQL query strings. It is built on top of the RDF Interfaces W3C API. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9662983113985376
      ],
      "excerpt": "/ Exporting a graph to N3 (this function is not part of W3C's API)/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8717209482408271
      ],
      "excerpt": "/ retrieving a single node in the graph as a JS Interface API graph object / \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8436154112627865
      ],
      "excerpt": "// inserted in the default graph \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8070721442142776,
        0.8508817716488797
      ],
      "excerpt": "/ Parsing and loading a graph / \n// loading local data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.827516449496996
      ],
      "excerpt": "/ Registering a parser for a new media type / \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9125321498023606
      ],
      "excerpt": "// accepting the data to parse and a callback function. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8506831065600562
      ],
      "excerpt": "This object can be used to access to the full RDF Interfaces 1.0 API. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9198474268124994
      ],
      "excerpt": "rdfstore-js implements parsers for Turtle and JSON-LD. The specification of JSON-LD is still an ongoing effort. You may expect to find some inconsistencies between this implementation and the actual specification. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9734979265937647,
        0.8251672391711645
      ],
      "excerpt": "rdfstore-js implements an experimental events API that allows clients to observe changes in the RDF graph and receive notifications when parts of this graph changes. \nThe two main event functions are subscribe that makes possible to set up a callback function that will be invoked each time triples matching a certain pattern passed as an argument are added or removed, and the function startObservingNode that will be invoked with the modified version of the node each time triples are added or removed from the node. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8645096767440658
      ],
      "excerpt": "  // is inserted or removed. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9061405832844497
      ],
      "excerpt": "The main difference between both methods is that subscribe receives the triples that have changed meanwhile startObservingNode receives alway the whole node with its updated triples. startObservingNode receives the node as a RDF Interface graph object. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9645924944483567
      ],
      "excerpt": "  // time it is modified. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8702695089757887,
        0.8121212347701087
      ],
      "excerpt": "In the same way, there are startObservingQuery and stopObservingQuery functions that makes possible to set up callbacks for whole SPARQL queries. \nThe store will try to be smart and not perform unnecessary evaluations of these query after quad insertion/deletions. Nevertheless too broad queries must be used carefully with the events API. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8181342570841599,
        0.8928401987213344,
        0.9179963536592413
      ],
      "excerpt": "You can also use a full URI to identify the function that is going to be registered. \nThe function implementation will receive two arguments, an object linking to the store query filters engine and a list with the actual arguments. Arguments will consist of literal or URIs objects. Results from the function must also be literal or URI objects. \nThe query filters engine can be used to access auxiliary function to transform literals into JavaScript types using the effectiveTypeValue function, boolean values using the effectiveBooleanValue, to build boolean literal objects (ebvTrue, ebvFalse) or return an error with the ebvError. Documentation and source code for the QueryFilters object n the 'js-query-engine' module can be consulted to find information about additional helper functions. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9270192000902358,
        0.9432392578187188
      ],
      "excerpt": "Controlling the frequency of function yielding \nPerformance of the store can be improved by reducing the frequency the 'nexTick' mechanism is used to cancel the the calls stack. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8256183754737344,
        0.8613513743100799
      ],
      "excerpt": "  by Ruben Verborgh and released under the MIT license. \njsonld, developed by Digital Bazaar and released under the New BSD license. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8683994285461852
      ],
      "excerpt": "rdfstore-js is still at the beginning of its development. If you take a look at the library and find a way to improve it, please ping us. We'll be very greatful for any bug report or pull-request. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "JS RDF store with SPARQL support",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Documentation for the store can be found [here](http://antoniogarrote.github.com/rdfstore-js/doc/index.html).\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/antoniogarrote/rdfstore-js/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 106,
      "date": "Mon, 20 Dec 2021 16:40:41 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/antoniogarrote/rdfstore-js/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "antoniogarrote/rdfstore-js",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/antoniogarrote/rdfstore-js/master/browse.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8036839084875657
      ],
      "excerpt": "                              store.rdf.createNamedNode(rdf.resolve('foaf:name')), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8595539933103974
      ],
      "excerpt": "Default RDF name-spaces can be specified using the registerDefaultNamespace. These names will be included automatically in all queries. If the same name-space is specified by the client in the query string the new prefix will shadow the default one. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8735584047867003
      ],
      "excerpt": "             \"name\": \"http://xmlns.com/foaf/0.1/name\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "          \"name\": \"John Smith\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9331972721972823
      ],
      "excerpt": "You can build the frontend running the command: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8335062385292454
      ],
      "excerpt": "var rdfstore = require('rdfstore'); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8230372548414823
      ],
      "excerpt": "rdfstore.create(function(err, store) { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8322697094851288
      ],
      "excerpt": "store.execute(\"SELECT * { ?s ?p ?o }\", function(err, results){ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8564097239605861
      ],
      "excerpt": "      console.log(results[0].s.value); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.867270643810911,
        0.867270643810911
      ],
      "excerpt": "var defaultGraph = [{'token':'uri', 'value': graph1}, {'token':'uri', 'value': graph2}, ...]; \nvar namedGraphs  = [{'token':'uri', 'value': graph3}, {'token':'uri', 'value': graph4}, ...]; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8437766542360323
      ],
      "excerpt": "  namedGraphs, function(err, results) { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8322697094851288
      ],
      "excerpt": "    store.execute(query, function(err, results) { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.821190596917578
      ],
      "excerpt": "store.clear(graphUri, function(err){}); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8941648008014345
      ],
      "excerpt": "store.load(\"text/turtle\", turtleString, function(err, results) {}); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8229300328510181
      ],
      "excerpt": "store.load('remote', remoteGraphUri, function(err, results) {}); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9013598738125719,
        0.9056151659096701,
        0.8566480648231483
      ],
      "excerpt": "                                 function(triple){ var name = triple.object.valueOf(); \n                                                   var name = name.slice(0,1).toUpperCase() \n                                                   + name.slice(1, name.length); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9070366453059445,
        0.8671579595353172
      ],
      "excerpt": "new Store({name:'test', overwrite:true}, function(err,store){ \n    store.execute('INSERT DATA {  http://example/person1 http://xmlns.com/foaf/0.1/name \"Celia\" }', function(err){ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8971866374229508
      ],
      "excerpt": "   store.execute('SELECT * { ?s foaf:name ?name }', function(err,results) { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8806854593947634
      ],
      "excerpt": "       test.ok(results[0].name.value === \"Celia\"); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "          \"name\": \"John Smith\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9020659846182209
      ],
      "excerpt": "store.load(\"application/ld+json\", jsonld, \"ex:test\", function(err,results) { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8764363570599576
      ],
      "excerpt": "var cb = function(event, triples){ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8170323022491783
      ],
      "excerpt": "var cb = function(node){ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9070366453059445
      ],
      "excerpt": "new Store({name:'test', overwrite:true}, function(err,store) { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8359299706379749
      ],
      "excerpt": "        'text/n3', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8633989807152664,
        0.8633989807152664,
        0.8633989807152664,
        0.8633989807152664,
        0.8337400684281382,
        0.8718454127083899
      ],
      "excerpt": "         test:A test:prop 5.\\ \n         test:B test:prop 4.\\ \n         test:C test:prop 1.\\ \n         test:D test:prop 3.', \n        function(err) { \n        var invoked = false; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8785176656833138
      ],
      "excerpt": "    // equivalent to var v1 = parseInt(args[0].value), v2 = parseInt(args[1].value); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8052536945830124
      ],
      "excerpt": "                        ?y test:prop ?v2 .\\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8337400684281382
      ],
      "excerpt": "            function(err) { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8065276795579776
      ],
      "excerpt": "    test.done() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8245703232862975
      ],
      "excerpt": "the 'persistent' flag must be set to true in the store creation options. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8335062385292454
      ],
      "excerpt": "var rdfstore = require('rdfstore') \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/antoniogarrote/rdfstore-js/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "JavaScript",
      "HTML",
      "Ruby",
      "CSS",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'The MIT License (MIT)\\n\\nCopyright (c) 2012-13 antoniogarrote\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of\\nthis software and associated documentation files (the \"Software\"), to deal in\\nthe Software without restriction, including without limitation the rights to\\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\\nthe Software, and to permit persons to whom the Software is furnished to do so,\\nsubject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "rdfstore-js",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "rdfstore-js",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "antoniogarrote",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/antoniogarrote/rdfstore-js/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 544,
      "date": "Mon, 20 Dec 2021 16:40:41 GMT"
    },
    "technique": "GitHub API"
  },
  "support": [
    {
      "confidence": [
        1
      ],
      "excerpt": "rdfstore-js supports at the moment SPARQL 1.0 and most of SPARQL 1.1/Update.\nOnly some parts of SPARQL 1.1 query have been implemented yet.\n\nThis is a list of the different kind of queries currently implemented:\n\n- SELECT queries\n- UNION, OPTIONAL clauses\n- NAMED GRAPH identifiers\n- LIMIT, OFFSET\n- ORDER BY clauses\n- SPARQL 1.0 filters and builtin functions\n- variable aliases\n- variable aggregation: MAX, MIN, COUNT, AVG, SUM functions\n- GROUP BY clauses\n- DISTINCT query modifier\n- CONSTRUCT queries\n- ASK queries\n- INSERT DATA queries\n- DELETE DATA queries\n- DELETE WHERE queries\n- WITH/DELETE/INSERT/WHERE queries\n- LOAD queries\n- CREATE GRAPH clauses\n- DROP DEFAULT/NAMED/ALL/GRAPH clauses\n- CLEAR DEFAULT/NAMED/ALL/Graph clauses\n- FILTER EXISTS / NOT EXISTS operators\n- BIND\n- FILTER IN / NOT IN operators\n\n\n##Installation\n\nThe library can be installed using NPM:\n\n```bash\n$ npm install rdfstore\n```\n\nThe library can also be installed via bower using a global module:\n\n```bash\n$ bower install rdfstore\n```\n\n##Building\n\nBefore running the build script, you must install JavaScript dependencies with [npm](https://npmjs.org/doc/install.html) (`npm` is shipped with [node](http://nodejs.org/download/)):\n\n```bash\n$ npm install\n```\n\nThe library can be built using gulp:\n\n```bash\n$ gulp\n```\n\nThe browser version can be built using the 'browser' gulp target:\n\n```bash\n$ gulp browser\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}