{
  "citation": [
    {
      "confidence": [
        0.8939071209736794
      ],
      "excerpt": "= hydra-java image:https://travis-ci.org/dschulten/hydra-java.svg?branch=master[\"Build Status\", link=\"https://travis-ci.org/dschulten/hydra-java\"] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "    class Person { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8283216015784888
      ],
      "excerpt": "    \"@vocab\": \"http://schema.org/\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8109194328925066
      ],
      "excerpt": "  \"@type\": \"Person\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8283216015784888,
        0.8283216015784888
      ],
      "excerpt": "      \"@vocab\": \"http://schema.org/\", \n      \"gr\": \"http://purl.org/goodrelations/v1#\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9761537270783152
      ],
      "excerpt": "  public void setReviewBody(@Input(pattern=\".{10,}\") String reviewBody) { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8283216015784888
      ],
      "excerpt": "        \"@vocab\": \"http://schema.org/\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "                                \"valuePattern\": \".{10,}\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8283216015784888
      ],
      "excerpt": "                \"http://schema.org/workPerformed\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "  <groupId>de.escalon.hypermedia</groupId> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "  <groupId>de.escalon.hypermedia</groupId> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/dschulten/hydra-java",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2014-09-06T15:17:19Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-15T10:29:14Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8116542641621607
      ],
      "excerpt": "Status: Testing. Since the Hydra Specification is still a draft, expect incompatible changes. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8028634944836981,
        0.9627608521672759,
        0.9754629032486923
      ],
      "excerpt": "The meaning of json attributes in api responses, their possible values etc. is usually not obvious without referring to some  \ninformation coming from outside the resource itself. That is due to the nature of json. Two solutions immediately come to mind. Both are ways of vendor-specific documentation, some are machine-readable, some aren't.  \nDescribe the type in some sort of json-schema, wadl, raml, swagger or similar and publish it together with the resource. People could even generate classes from this information, if they wish to. My api users coming from a wsdl background scream for something like that.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9772114887096726
      ],
      "excerpt": "But one of the rules for a ReSTful API is: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8038448850167366
      ],
      "excerpt": "A REST API should never have \u201ctyped\u201d resources that are significant to the client.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8207915761608942,
        0.8859496981293427,
        0.9427204886794562
      ],
      "excerpt": "The only types that are significant to a client are the current representation\u2019s media type and standardized relation names.  \n[Failure here implies that clients are assuming a resource structure due to out-of band information,  \nsuch as a domain-specific standard, which is the data-oriented equivalent to RPC's functional coupling]. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8463807968219406,
        0.804962873576407,
        0.9517411523631196,
        0.8710392218330637,
        0.929887930774457
      ],
      "excerpt": "A publicly available media-type should give clients all necessary means to interpret a server response,  \nand relation names for hyperlinks in the response must be recognizable based on public conventions, so that the client can act upon \nthe responses it receives without knowing the details of a vendor-specific api. \nIn other words: If a client is told to make a reservation for a concert ticket, it should be able to recognize what  \none-fancy-api requires to achieve that without processing a vendor-specific documentation. How can we do that, purely based on a media type and relation names? Do we need hundreds of iana registered media types for all kinds of purposes? \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9546772322766205,
        0.9946733984684031,
        0.8094755552562688,
        0.9389021485249002,
        0.8404610908336134
      ],
      "excerpt": "The json-ld mediatype allows to bring descriptions of things in the real world from public vocabularies into your json files. With json-ld there is a way to say that a json response describes a http://schema.org/MusicEvent[MusicEvent] which http://schema.org/offers[offers] a http://schema.org/Ticket[Ticket] without any vendor-specific documentation, and it can also link to other resources. \nA popular vocabulary which describes things on the internet is http://schema.org. It is used by all major search engines for search engine optimization and sufficient for basic needs. It also integrates with other vocabularies,  \ne.g. by using http://schema.org/additionalType[additionalType] to point to http://purl.org/goodrelations/[GoodRelations] classes or by using external enumerated values as shown by http://schema.org/DeliveryMethod[DeliveryMethod]. \n(For those of you about to say that the Semantic Web never took off, please note that json-ld is http://manu.sporny.org/2014/json-ld-origins-2/[not about the Semantic Web at all]). \nhttp://www.hydra-cg.com/[Hydra] adds interaction to the mix. It describes exactly how to post a ticket reservation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9255128385438001
      ],
      "excerpt": "Java beans have no knowledge about the meaning of their bean properties and they do not know what they represent in the real world. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9168384941473688
      ],
      "excerpt": "Rather, client and server are talking about the thing http://schema.org/Person[Person] as it is known and recognized by all major search engines. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8995640752467248
      ],
      "excerpt": "In a more complex scenario I want to use my own attribute names and object design and still be able to use schema.org or other vocabs to describe their meaning. In json-ld I can. See below for a listing of vocabularies. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8487587959532044
      ],
      "excerpt": "It is currently possible to render responses from a https://github.com/spring-projects/spring-hateoas[spring-hateoas] service based on Spring MVC with various message converters. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9908502588685393,
        0.9436028961514467
      ],
      "excerpt": "== Features of hydra-spring \nThe conversion of a spring-hateoas Resource to hydra does the following: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8483830925057039,
        0.93540606102133
      ],
      "excerpt": "renders response with \"@vocab\" : \"http://schema.org/\" by default, a different @vocab can be defined on a class or package using the @Vocab annotation. \nsupports vocabularies in addition to the default vocabulary via terms in the @context. Use @Term in conjunction with @Terms on a class or package for this. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9176324106144984,
        0.9140678040231751,
        0.9423877144747776
      ],
      "excerpt": "renders attributes assuming that the attribute name is a property in the default vocab defined by @vocab. In other words, it renders an offers member as \"offers\" on a json-ld object with a context defining \"@vocab\" : \"http://schema.org\", so that you end up with \"http://schema.org/offers\" as linked data name for your offers member. To map a custom attribute name such as foo to an existing property in the default vocab or other vocabs use @Expose on the attribute and a term will be created in @context which maps your attribute to the vocab property you set as value of @Expose. \nrenders Java enums assuming that an enum value name is an enumerated value defined by the default vocab. In json-ld it is not only possible to have attribute names, but also attribute values that have linked data names. The idiom to express that is \"@type\" : \"@vocab\". An example of this is http://schema.org/OnSitePickup[OnSitePickup], which is an enum value for the property http://schema.org/availableDeliveryMethod[availableDeliveryMethod]. If your Java enum value is ON_SITE_PICKUP, it matches the vocab value of OnSitePickup. It will be rendered as ON_SITE_PICKUP and hydra-java will add the necessary definition to the context which makes it clear that ON_SITE_PICKUP is actually http://schema.org/OnSitePickup. If your Java enum value has a different name than the vocab value, use @Expose on the enum value to get a correct representation in the context. Note that you can also expose an enum value from a different vocabulary such as GoodRelations, see below. \nAs of version 0.2.0 hydra-java supports hydra:collection, hydra:operation and hydra:IriTemplate as well as reversed terms. To make this possible, you must use the linkTo and methodOn methods of AffordanceBuilder as a drop-in replacement for ControllerLinkBuilder. Templated links created by ControllerLinkBuilder will at least be rendered as IriTemplates, but only with limited information about the template variables. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8472316034059209,
        0.9878337083932924
      ],
      "excerpt": "renders a templated link as hydra:IriTemplate. Method parameters can be annotated with @Expose to assign them a property URI, otherwise the variable name will be shown as a term in the current vocab. If you create a link with AffordanceBuilder's linkTo-method facilities and you pass null for arguments annotated with @PathVariable or @RequestParam, it will automatically become a templated link with variables for the null arguments. \nrenders a link to method handlers for any combination of GET, POST, PUT, PATCH and DELETE as hydra:operation. In order to express that multiple HTTP methods can be invoked on the same resource, use the and() method of AffordanceBuilder. See below for an example. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9541925231889689
      ],
      "excerpt": "renders a POJO method parameter annotated with @RequestBody as expected rdfs:subClassOf. Use @Expose on the POJO class for a custom identifier. The setter methods on the bean appear as hydra:supportedProperty, and you can annotate them with @Expose to give them a semantic identifier. Again see below for an example. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8567173247793501
      ],
      "excerpt": "Browsers will show the html representation of the API by default, which uses the XhtmlResourceMessageConverter. Sending Accept: application/ld+json will get you hydra, but application/json or application/hal+json work as well.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.805683960768955
      ],
      "excerpt": "Assuming a Java enum whose enum values are exposed as values from GoodRelations and which appears on an Offer object with GoodRelations term: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8504685482550438
      ],
      "excerpt": "The json-ld output written by hydra-java makes the GoodRelations url known under the shorthand gr, says that the businessFunction property contains values defined by a vocabulary and maps the Java enum value RENT to its linked data name \"gr:LeaseOut\". \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9818228051462711,
        0.969119793838554,
        0.8802944631252891,
        0.9429468344110288
      ],
      "excerpt": "A hypermedia affordance is a rich hyperlink. That means, it not only contains a URI or a URITemplate, but also information about the usage of the URI, such as supported http methods and expected parameters. The term 'hypermedia affordance' is a neologism made popular by http://amundsen.com/blog/archives/1109[Mike Amundsen], following an earlier reference in http://roy.gbiv.com/talks/200804_REST_ApacheCon.pdf[A little REST and Relaxation] by Roy Fielding. \nA hydra-java Affordance can be used to render media-types which support this kind of information: first and foremost hydra, but it is quite easy to add message converters for other media types once the basic information is available. \nVersion 0.2.0 provides an AffordanceBuilder class which is a drop-in replacement for the spring-hateoas ControllerLinkBuilder. \nThe AffordanceBuilder does not depend on hydra or json-ld. It lives in the standalone jar spring-hateoas-ext and can also be used to render other media types than json-ld. It has support for all HAL link attributes when rendered as HAL, and can also be \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.97336742077393,
        0.8319311635958796,
        0.9471130839783238,
        0.9009386018191673
      ],
      "excerpt": "See <<Maven Support>> for the maven coordinates of spring-hateoas-ext. \nUse the AffordanceBuilder to build Affordance instances which inherit from the spring-hateoas Link but add the following traits to it: \nFull support for all attributes of a http Link header as described by the https://tools.ietf.org/html/rfc5988[web linking rfc 5988] \nSupport for templated link headers as described by the http://tools.ietf.org/html/draft-nottingham-link-template-01[Link-Template Header Internet draft] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9346987897719546,
        0.9694086499428314,
        0.9532930183916891
      ],
      "excerpt": "Facility to chain several method invocations on the same resource. If the same link is used to PUT and DELETE a resource, use AffordanceBuilder.and() to add both method handlers to the affordance. \nHas action descriptors with information about http methods and expected request data. Based on reflection and a minimal set of annotations it is possible to render forms-like affordances with quite precise information about expected input. \nUse the enhanced builder API of AffordanceBuilder to add more link params than allowed by Link: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.951366249241186,
        0.8987941561172714
      ],
      "excerpt": "In the following we use AffordanceBuilder to add a self rel that can be used with GET, PUT and DELETE to an event bean. \nFirst we wrap the event into a Resource so we can add affordances to it. Then we use the linkTo-methodOn technique three times to describe that the self rel can be used to get, update and delete the event. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.911788934475809,
        0.8803927586706605
      ],
      "excerpt": "        // using AffordanceBuilder.linkTo and AffordanceBuilder.methodOn \n        // instead of ControllerLinkBuilder methods \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9687048973813484
      ],
      "excerpt": "When rendered with the HydraMessageConverter, the resulting json-ld event object has the corresponding GET, PUT and DELETE operations. The PUT operation expects an http://schema.org/Event[Event] with a property http://schema.org/eventStatus[eventStatus]. By default, writable properties (with a setter following the JavaBean conventions) are rendered as hydra:supportedProperty. The URI to be used by the operations is the @id of the object that has a hydra:operation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8447123227558184
      ],
      "excerpt": "             \"hydra:method\": \"GET\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8150771532802734
      ],
      "excerpt": "             \"hydra:method\": \"PUT\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8150771532802734
      ],
      "excerpt": "             \"hydra:method\": \"DELETE\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9865882897998576
      ],
      "excerpt": "Now let us tell the client a range of possible values for a property. We want to allow clients to add reviews for the work performed at an event. For this, we add a Resource&lt;CreativeWork&gt; to the Event, so that we can define an affordance on the creative work which allows clients to send reviews. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8062986390368535
      ],
      "excerpt": "  // with an event from backend do this: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9225987902519487
      ],
      "excerpt": "We expect that clients post a Review with a review body and a rating. The review body and the rating value have input constraints, so we annotate the method setReviewBody with @Input(pattern=\".{10,}\") and setRatingValue with @Input(min = 1, max = 5, step = 1), as shown below. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9484060445083293,
        0.9207289950158849
      ],
      "excerpt": "In the resulting json-ld we use schema.org's http://schema.org/PropertyValueSpecification[PropertyValueSpecification] to express the input constraints minValue, maxValue, stepValue and valuePattern, as well as defaultValue containing the rating value 3 that was passed to the sample method invocation with methodOn. Note that the creative work has a review attribute now, although the CreativeWork pojo has no such property. It appears because we added a rel review to the workPerformed resource. \nRight now it is not possible to specify a list of expected values, neither with hydra nor with schema:PropertyValueSpecification. If you are interested in that, look into https://github.com/HydraCG/Specifications/issues/82[#82 Add support for allowed literals and allowed individuals] and participate in the discussion in the http://lists.w3.org/Archives/Public/public-hydra/2015Jan/0019.html[Hydra-CG mailing list]. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8902130431700961
      ],
      "excerpt": "If an expected property on a request object holds a nested json object in turn, hydra-java will render it following a proposal from https://github.com/HydraCG/Specifications/issues/26[Hydra-CG Issue 26] using http://schema.org/rangeIncludes[schema:rangeIncludes]. The fact that this issue is not resolved yet is the main reason why hydra-java 0.2.0 is an alpha release. So be especially wary that changes are likely for the way hydra-java prescribes nested properties. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9691130789671515
      ],
      "excerpt": "Clients should be able to request a media-type they understand by means of content negotiation. Following this principle, the spring-hateoas-ext package provides the foundation to render hypermedia types which describe expected requests - not only as json-ld, but also as other media types.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9625006978402407,
        0.8170017222457617
      ],
      "excerpt": "The XhtmlResourceMessageConverter is the second message converter in hydra-java which makes use of affordances built by AffordanceBuilder. \nIf you add a JsonLdDocumentationProvider on the converter, it will render bean attributes as hyperlinks which point to their documentation on schema.org or other vocabularies, provided that your java beans are annotated with the necessary information. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9697585320120293
      ],
      "excerpt": "To make the API browsable, PUT and DELETE are tunneled through POST. This is necessary because the HTML media type does not support PUT or DELETE, the browser cannot handle a form which has other methods than GET or POST. Spring-MVC has a servlet filter which makes tunneling easy. The web.xml of the hydra-sample service shows how to enable that filter: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9409025956657461,
        0.8668937970072808,
        0.9802622762557922,
        0.8044309001261207
      ],
      "excerpt": "maps a plain Spring Hateoas Link to an embedded link or navigational link. \na templated link becomes a Siren GET action with named siren fields for the template query variables \nin order to produce more expressive Siren actions, use the linkTo-methodOn idiom of AffordanceBuilder to point to your methods, as shown above for the sample EventController in the section AffordanceBuilder. \npossible values found by AffordanceBuilder are treated as checkbox or radio button fields, following the technique discussed in the https://groups.google.com/forum/#!topic/siren-hypermedia/8mbOX44gguU[Siren group]. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9061991460864244,
        0.8311499289871537
      ],
      "excerpt": "relies on XhtmlMessageConverter to process incoming form-urlencoded requests and on MappingJackson2HttpMessageConverter for json requests. \nThe Siren output for the sample EventController above is shown below. Note that the JsonLdDocumentationProvider has created the link relation type http://schema.org/workPerformed. One could also use the UrlPrefixDocumentationProvider for simple URL prefixing. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8150771532802734
      ],
      "excerpt": "            \"method\": \"PUT\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8150771532802734
      ],
      "excerpt": "            \"method\": \"DELETE\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9318414184515472
      ],
      "excerpt": "The latest Maven releases of hydra-java are in Maven central. These are the maven coordinates for hydra-spring. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.968583996216555
      ],
      "excerpt": "extraction of ActionDescriptor and ActionInputParameter interfaces, coordinating with http://www.hdiv.org/[HDIV] to get forms into spring-hateoas \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9803901156379723
      ],
      "excerpt": "simple feature to use query parameters mapped to parameter bean or parameter Map annotated with @Input rather than single RequestParam arguments. Right now, it can only be used to build a UriTemplate, no description for the template variables is available yet. Use @Input(include=..., exclude=...) to filter applicable bean properties or describe expected Map values. The UriTemplate for such an affordance is available via Affordance.getUriTemplateComponents().toString(), but not via Affordance.toString() to keep an Affordance created via AffordanceBuilder compatible with a Link created by ControllerLinkBuilder. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Annotate your Java beans and serialize them as json-ld with hydra",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/dschulten/hydra-java/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 28,
      "date": "Tue, 21 Dec 2021 00:00:52 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/dschulten/hydra-java/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "dschulten/hydra-java",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "        private String name = \"Dietrich Schulten\"; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "  \"name\": \"Dietrich Schulten\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8271032946551441
      ],
      "excerpt": "renders response with \"@vocab\" : \"http://schema.org/\" by default, a different @vocab can be defined on a class or package using the @Vocab annotation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8771572471248009
      ],
      "excerpt": "renders @type based on the Java class name by default, a vocabulary class can be produced instead using @Expose on the Java class. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8745273647963445
      ],
      "excerpt": "Use the AffordanceBuilder to build Affordance instances which inherit from the spring-hateoas Link but add the following traits to it: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9096104964140866
      ],
      "excerpt": "   .build(); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8100197491224094
      ],
      "excerpt": "        // get the event from some backend, then: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "    private String name; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8525870027148605
      ],
      "excerpt": "The xhtml response renders bootstrap conforming markup, you can add bootstrap css as shown below, or your own stylesheets. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8873431353524299
      ],
      "excerpt": "for sub-entities the property name is used as relation name. The Siren class name is derived from the Java class name. The rel names can be customized using a DocumentationProvider implementation, e.g. the JsonLdDocumentationProvider from hydra-jsonld will make use of @Expose and @Vocab annotations on your response bean packages. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8189806994953515
      ],
      "excerpt": "The Siren output for the sample EventController above is shown below. Note that the JsonLdDocumentationProvider has created the link relation type http://schema.org/workPerformed. One could also use the UrlPrefixDocumentationProvider for simple URL prefixing. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "                    \"name\": \"addReview\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "                            \"name\": \"reviewBody\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "                            \"name\": \"reviewRating.ratingValue\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "            \"name\": \"updateEvent\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "                    \"name\": \"eventStatus\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "            \"name\": \"deleteEvent\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9717106327039013
      ],
      "excerpt": "  <version>0.4.1</version> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9717106327039013
      ],
      "excerpt": "  <version>0.4.1</version> \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8182167632496727
      ],
      "excerpt": "        private String name = \"Dietrich Schulten\"; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8149718276572184
      ],
      "excerpt": "            return name; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "  \"name\": \"Dietrich Schulten\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8838148168639296
      ],
      "excerpt": "== Examples \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8252930015540307
      ],
      "excerpt": "   .withLinkParam(\"name\", \"red-bar\") // adding HAL name attribute \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8182167632496727
      ],
      "excerpt": "    private String name; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8300935314778909
      ],
      "excerpt": "            Arrays.asList( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "                    \"name\": \"addReview\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179,
        0.8736269643609851
      ],
      "excerpt": "                            \"name\": \"reviewBody\", \n                            \"type\": \"text\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179,
        0.8088336477585534,
        0.8731562459058029
      ],
      "excerpt": "                            \"name\": \"reviewRating.ratingValue\", \n                            \"type\": \"number\", \n                            \"value\": \"3\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "            \"name\": \"updateEvent\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8736269643609851,
        0.8731562459058029
      ],
      "excerpt": "                    \"type\": \"text\", \n                    \"value\": \"Wiesbaden\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "                    \"name\": \"eventStatus\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029
      ],
      "excerpt": "                    \"value\": [ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029
      ],
      "excerpt": "                            \"value\": \"EVENT_CANCELLED\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029
      ],
      "excerpt": "                            \"value\": \"EVENT_POSTPONED\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029
      ],
      "excerpt": "                            \"value\": \"EVENT_SCHEDULED\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029
      ],
      "excerpt": "                            \"value\": \"EVENT_RESCHEDULED\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "            \"name\": \"deleteEvent\", \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/dschulten/hydra-java/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Java"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright {yyyy} {name of copyright owner}\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "doodad.",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "hydra-java",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "dschulten",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/dschulten/hydra-java/blob/master/README.asciidoc",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 106,
      "date": "Tue, 21 Dec 2021 00:00:52 GMT"
    },
    "technique": "GitHub API"
  }
}