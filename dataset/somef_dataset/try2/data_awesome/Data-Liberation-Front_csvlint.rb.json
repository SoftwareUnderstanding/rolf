{
  "citation": [
    {
      "confidence": [
        0.9565696357172301
      ],
      "excerpt": "                \"pattern\": \"[A-Z]{1,2}[0-9][0-9A-Z]? ?[0-9][A-Z]{2}\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8528714716777485
      ],
      "excerpt": "    \"@context\": \"http://www.w3.org/ns/csvw\", \n",
      "technique": "Supervised classification"
    }
  ],
  "codeOfConduct": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://raw.githubusercontent.com/Data-Liberation-Front/csvlint.rb/master/CODE_OF_CONDUCT.md",
    "technique": "File Exploration"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Data-Liberation-Front/csvlint.rb",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing to CSVlint.rb\nThe CSVlint library is open source, and contributions are gratefully accepted!\nDetails on how to contribute are below. By participating in this project, you agree to abide by our Code of Conduct.\nBefore you start coding, please reach out to us either on our gitter channel or by tagging a repository administrator on the issue ticket you are interested in contributing towards to indicate your interest in helping.\nIf this is your first time contributing to the ODI\u2019s codebase you will need to create a fork of this repository.\nConsult our Getting Started Guide (if necessary) and then follow the readme instructions to get your Development environment running locally\nEnsure that the tests pass before working on your contribution\nCode Review Process\nAll contributions to the codebase - whether fork or pull request - will be reviewed per the below criteria.\nTo increase your chances of your push being accepted please be aware of the following\n- Write well formed commit messages\n- Follow our style guide recommendations\n- Write tests for all changes (additions or refactors of existing code).\n- Of the github integrations we use two will be utilised to check appraise your contribution. In order of priority these are\n    - Travis ensures that all tests (existing and additions) pass\n    - Travis/Coveralls ensures that overall test coverage for lines of code meets a certain threshold. If this metric dips below what it previously was for the repository you\u2019re pushing to then your PR will be rejected\n    - Gemnasium ensures dependencies are up to date\n- Once your PR is published and passes the above checks a repository administrator will review your contribution. Where appropriate comments may be provided and amendments suggested before your PR is merged into Master.\n- Once your PR is accepted you will be granted push access to the repository you have contributed to! Congratulations on joining our community, you\u2019ll no longer need to work from forks.\nIf you make a contribution to another repository in the Toolbox you will be expected to repeat this process. Read more about that here.\nCode Style Guide\nWe follow the same code style conventions as detailed in Github\u2019s Ruby Style Guide",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2014-01-07T10:44:21Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-29T21:34:29Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Validation that checks the structural formatting of a CSV file  \n* Validation of a delimiter-separated values (dsv) file accesible via URL, File, or an IO-style object (e.g. StringIO)\n* Validation against [CSV dialects](http://dataprotocols.org/csv-dialect/)  \n* Validation against multiple schema standards; [JSON Table Schema](https://github.com/theodi/csvlint.rb/blob/master/README.md#json-table-schema-support) and [CSV on the Web](https://github.com/theodi/csvlint.rb/blob/master/README.md#csv-on-the-web-validation-support) \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8930901044020226
      ],
      "excerpt": "$ rake features \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8022246123064651,
        0.8930901044020226
      ],
      "excerpt": "$ rm features/csvw_validation_tests.feature \n$ rm -r features/fixtures/csvw \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8285615194965495
      ],
      "excerpt": "$ ruby features/support/load_tests.rb \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9735372023477147
      ],
      "excerpt": "When validating from a URL the range of errors and warnings is wider as the library will also check HTTP headers for \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490037945672047
      ],
      "excerpt": "#invoke the validation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8080651408701054
      ],
      "excerpt": "#access array of errors, each is an Csvlint::ErrorMessage object \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9440636749722683,
        0.9810706751001248
      ],
      "excerpt": "The validator supports configuration of the CSV Dialect used in a data file. This is specified by \npassing a dialect hash to the constructor: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.818462032044748
      ],
      "excerpt": "structure that it considers to be invalid, e.g. a missing header or different delimiters. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8759201774402727
      ],
      "excerpt": ":encoding -- the character set is not UTF-8 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8111308806858479,
        0.8368572771578343,
        0.8416280587505225
      ],
      "excerpt": ":assumed_header -- the validator has assumed that a header is present \nThe library supports validating data against a schema. A schema configuration can be provided as a Hash or parsed from JSON. The structure currently \nfollows JSON Table Schema with some extensions and rudinmentary CSV on the Web Metadata. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9851515134617422
      ],
      "excerpt": "Parsing and validating with a schema (of either kind): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "The gem behind http://csvlint.io",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Data-Liberation-Front/csvlint.rb/releases",
    "technique": "GitHub API"
  },
  "faq": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The validator provides feedback on a validation result using instances of `Csvlint::ErrorMessage`. Errors are divided into errors, warnings and information\nmessages. A validation attempt is successful if there are no errors.\n\nMessages provide context including:\n\n* `category` has a symbol that indicates the category or error/warning: `:structure` (well-formedness issues), `:schema` (schema validation), `:context` (publishing metadata, e.g. content type)\n* `type` has a symbol that indicates the type of error or warning being reported\n* `row` holds the line number of the problem\n* `column` holds the column number of the issue\n* `content` holds the contents of the row that generated the error or warning\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "The following types of error can be reported:\n\n* `:wrong_content_type` -- content type is not `text/csv`\n* `:ragged_rows` -- row has a different number of columns (than the first row in the file)\n* `:blank_rows` -- completely empty row, e.g. blank line or a line where all column values are empty\n* `:invalid_encoding` -- encoding error when parsing row, e.g. because of invalid characters\n* `:not_found` -- HTTP 404 error when retrieving the data\n* `:stray_quote` -- missing or stray quote\n* `:unclosed_quote` -- unclosed quoted field\n* `:whitespace` -- a quoted column has leading or trailing whitespace\n* `:line_breaks` -- line breaks were inconsistent or incorrectly specified\n\n",
      "technique": "Header extraction"
    }
  ],
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 74,
      "date": "Mon, 20 Dec 2021 21:34:50 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Data-Liberation-Front/csvlint.rb/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Data-Liberation-Front/csvlint.rb",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Add this line to your application's Gemfile:\n\n    gem 'csvlint'\n\nAnd then execute:\n\n    $ bundle\n\nOr install it yourself as:\n\n    $ gem install csvlint\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9717106327039013
      ],
      "excerpt": "ruby version 2.1.4 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8902784196682726,
        0.9098305752317211,
        0.833479418783814
      ],
      "excerpt": "You may need to add the gem exectuable directory to your path, by adding '/usr/local/lib/ruby/gems/2.6.0/bin'  \nor whatever your version is, to your .bash_profile PATH entry. like so \nYou will then see the validation result, together with any warnings or errors e.g. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "            \"name\": \"price\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "            \"name\": \"postcode\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "                \"name\": \"price\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "                \"name\": \"postcode\", \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8241206796901679,
        0.8862652025089869,
        0.8731658985518911
      ],
      "excerpt": "When the cucumber tests are first run, a script will create tests based on the latest version of the CSV on the Web test suite, including creating a local cache of the test files. This requires an internet connection and some patience. Following that download, the tests will run locally; there's also a batch script: \n$ bin/run-csvw-tests \nwhich will run the tests from the command line. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8862652025089869
      ],
      "excerpt": "$ rm bin/run-csvw-tests \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8690018625754447
      ],
      "excerpt": "and then run the cucumber tests again or: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8449122159737582
      ],
      "excerpt": "csvlint myfile.csv --schema=schema.json \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8055928237364532
      ],
      "excerpt": "validator = Csvlint::Validator.new( File.new(\"/path/to/my/data.csv\" )) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8072382313743922
      ],
      "excerpt": "    \"header\" =&gt; true, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8227546053822166
      ],
      "excerpt": "The options should be a Hash that conforms to the CSV Dialect JSON structure. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.884664385048958
      ],
      "excerpt": "Content-Type: text/csv; header=present \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8081128846242728,
        0.8136674826039401
      ],
      "excerpt": ":empty_column_name -- a column in the CSV header has an empty name \n:duplicate_column_name -- a column in the CSV header has a duplicate name \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8776354338422393
      ],
      "excerpt": "An example JSON Table Schema schema file is: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "            \"name\": \"price\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "            \"name\": \"postcode\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "                \"name\": \"price\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "                \"name\": \"postcode\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8096425004471964
      ],
      "excerpt": "validator = Csvlint::Validator.new( \"http://example.org/data.csv\", nil, schema ) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Data-Liberation-Front/csvlint.rb/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Ruby",
      "Gherkin"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'##Copyright (c) 2014 The Open Data Institute\\n\\n#MIT License\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\"Software\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be\\nincluded in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "CSV Lint",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "csvlint.rb",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Data-Liberation-Front",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Data-Liberation-Front/csvlint.rb/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 202,
      "date": "Mon, 20 Dec 2021 21:34:50 GMT"
    },
    "technique": "GitHub API"
  },
  "support": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This gem passes all the validation tests in the [official CSV on the Web test suite](http://w3c.github.io/csvw/tests/) (though there might still be errors or parts of the [CSV on the Web standard](http://www.w3.org/TR/tabular-metadata/) that aren't tested by that test suite).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Supported constraints:\n\n* `required` -- there must be a value for this field in every row\n* `unique` -- the values in every row should be unique\n* `minLength` -- minimum number of characters in the value\n* `maxLength` -- maximum number of characters in the value\n* `pattern` -- values must match the provided regular expression\n* `type` -- specifies an XML Schema data type. Values of the column must be a valid value for that type\n* `minimum` -- specify a minimum range for values, the value will be parsed as specified by `type`\n* `maximum` -- specify a maximum range for values, the value will be parsed as specified by `type`\n* `datePattern` -- specify a `strftime` compatible date pattern to be used when parsing date values and min/max constraints\n\nSupported data types (this is still a work in progress):\n\n* String -- `http://www.w3.org/2001/XMLSchema#string` (effectively a no-op)\n* Integer -- `http://www.w3.org/2001/XMLSchema#integer` or `http://www.w3.org/2001/XMLSchema#int`\n* Float -- `http://www.w3.org/2001/XMLSchema#float`\n* Double -- `http://www.w3.org/2001/XMLSchema#double`\n* URI -- `http://www.w3.org/2001/XMLSchema#anyURI`\n* Boolean -- `http://www.w3.org/2001/XMLSchema#boolean`\n* Non Positive Integer -- `http://www.w3.org/2001/XMLSchema#nonPositiveInteger`\n* Positive Integer -- `http://www.w3.org/2001/XMLSchema#positiveInteger`\n* Non Negative Integer -- `http://www.w3.org/2001/XMLSchema#nonNegativeInteger`\n* Negative Integer -- `http://www.w3.org/2001/XMLSchema#negativeInteger`\n* Date -- `http://www.w3.org/2001/XMLSchema#date`\n* Date Time -- `http://www.w3.org/2001/XMLSchema#dateTime`\n* Year -- `http://www.w3.org/2001/XMLSchema#gYear`\n* Year Month -- `http://www.w3.org/2001/XMLSchema#gYearMonth`\n* Time -- `http://www.w3.org/2001/XMLSchema#time`\n\nUse of an unknown data type will result in the column failing to validate.\n\nSchema validation provides some additional types of error and warning messages:\n\n* `:missing_value` (error) -- a column marked as `required` in the schema has no value\n* `:min_length` (error) -- a column with a `minLength` constraint has a value that is too short\n* `:max_length` (error) -- a column with a `maxLength` constraint has a value that is too long\n* `:pattern` (error) --  a column with a `pattern` constraint has a value that doesn't match the regular expression\n* `:malformed_header` (warning) -- the header in the CSV doesn't match the schema\n* `:missing_column` (warning) -- a row in the CSV file has a missing column, that is specified in the schema. This is a warning only, as it may be legitimate\n* `:extra_column` (warning) -- a row in the CSV file has extra column.\n* `:unique` (error) -- a column with a `unique` constraint contains non-unique values\n* `:below_minimum` (error) -- a column with a `minimum` constraint contains a value that is below the minimum\n* `:above_maximum` (error) -- a column with a `maximum` constraint contains a value that is above the maximum\n\n",
      "technique": "Header extraction"
    }
  ],
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You can either use this gem within your own Ruby code, or as a standalone command line application\n\n",
      "technique": "Header extraction"
    }
  ]
}