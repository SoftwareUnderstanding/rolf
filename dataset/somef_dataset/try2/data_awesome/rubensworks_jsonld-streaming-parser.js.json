{
  "citation": [
    {
      "confidence": [
        0.9392395551057171
      ],
      "excerpt": "myParser.write(\"@context\": \"https://schema.org/\",); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9606712260438129
      ],
      "excerpt": "  context: 'https://schema.org/', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9015748377153242
      ],
      "excerpt": "  \"@context\": \"http://schema.org/\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9177429910723606
      ],
      "excerpt": "  \"@type\": \"Person\",               // --&gt; &lt;http://example.org/&gt; a schema:Person. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9015748377153242,
        0.8109194328925066
      ],
      "excerpt": "  \"@context\": \"http://schema.org/\", \n  \"@type\": \"Person\", \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rubensworks/jsonld-streaming-parser.js",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-07-18T12:19:37Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-16T06:55:50Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9988587109987077
      ],
      "excerpt": "with RDFJS representations of RDF terms, quads and triples. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8286723317176374,
        0.9674240203693654
      ],
      "excerpt": "Make sure to enable the streamingProfile flag when parsing a JSON-LD document with a streaming profile \nto exploit the streaming capabilities of this parser, as this is disabled by default. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8107737658886477
      ],
      "excerpt": "which makes it possible to alternatively parse streams using the import method. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9074295950550284
      ],
      "excerpt": "// Parse anything with myParser like usual \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8833449442474269
      ],
      "excerpt": "dataFactory: A custom RDFJS DataFactory to construct terms and triples. (Default: require('@rdfjs/data-model')) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.831300402680891
      ],
      "excerpt": "documentLoader A custom loader for fetching remote contexts. This can be set to anything that implements IDocumentLoader (Default: FetchDocumentLoader) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9357735921981943
      ],
      "excerpt": "strictValues: By default, JSON-LD requires that all properties (or @id's) that are not URIs, are unknown keywords, and do not occur in the context should be silently dropped. When setting this value to true, an error will be thrown when such properties occur. This also applies to invalid values such as language tags. This is useful for debugging JSON-LD documents. (Default: false) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8448424432325642,
        0.807097996475279
      ],
      "excerpt": "This parser does not follow the recommended procedure for transforming JSON-LD to RDF, \nbecause this does not allow stream-based handling of JSON. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936014231193445,
        0.9308096234638009,
        0.8747298861465349,
        0.8654303526605827
      ],
      "excerpt": "This parser builds on top of the jsonparse library, \nwhich is a sax-based streaming JSON parser. \nWith this, several in-memory stacks are maintained. \nThese stacks are needed to accumulate the required information to emit triples/quads. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9355850427390545
      ],
      "excerpt": "The algorithm makes a couple of (soft) assumptions regarding the structure of the JSON-LD document, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8449056844382364
      ],
      "excerpt": "If not all of these assumptions are met, entries of an object are buffered until enough information becomes available, or if the object is closed. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9120005416973594,
        0.9040342189560581,
        0.9314898654868166
      ],
      "excerpt": "This means that the parser may buffer large parts of the document before quads are produced, \nto make sure that the document is interpreted correctly. \nSince this buffering neglects the streaming benefits of this parser, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8153092408196613
      ],
      "excerpt": "The following table shows some simple performance comparisons between JSON-LD Streaming Parser and jsonld.js. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A fast and lightweight streaming JSON-LD parser for JavaScript",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rubensworks/jsonld-streaming-parser.js/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 9,
      "date": "Tue, 21 Dec 2021 00:04:07 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/rubensworks/jsonld-streaming-parser.js/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "rubensworks/jsonld-streaming-parser.js",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\n$ npm install jsonld-streaming-parser\n```\n\nor\n\n```bash\n$ yarn add jsonld-streaming-parser\n```\n\nThis package also works out-of-the-box in browsers via tools such as [webpack](https://webpack.js.org/) and [browserify](http://browserify.org/).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8102820717243392
      ],
      "excerpt": "so that you can call it for any HTTP response, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8820465668006624
      ],
      "excerpt": "processingMode: The maximum JSON-LD version that should be processable by this parser. (Default: 1.0) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8208479406646733
      ],
      "excerpt": "These stacks are needed to accumulate the required information to emit triples/quads. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "  \"name\": \"Jane Doe\", \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "import {JsonLdParser} from \"jsonld-streaming-parser\"; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8643313097139512,
        0.8955235778983481,
        0.8230254167766119,
        0.8643313097139512,
        0.8230254167766119
      ],
      "excerpt": "myParser.write(\"@type\": \"Recipe\",); \nmyParser.write(\"name\": \"Grandma's Holiday Apple Pie\",); \nmyParser.write(\"aggregateRating\": {); \nmyParser.write(\"@type\": \"AggregateRating\",); \nmyParser.write(\"ratingValue\": \"4\"); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8020539630217344,
        0.842477008090944
      ],
      "excerpt": "  'http://example.org/my-file.json', // For example: response.url \n  'application/json', // For example: headers.get('content-type') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8365217156389313
      ],
      "excerpt": "ignoreMissingContextLinkHeader: If the lack of JSON-LD context link headers on raw JSON documents should NOT result in an error. If true, raw JSON documents can be considered first-class JSON-LD documents. (Default: false) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8134366978900723
      ],
      "excerpt": "  dataFactory: require('@rdfjs/data-model'), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "  streamingProfile: true, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "  normalizeLanguageTags: true, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8216270093103228
      ],
      "excerpt": "For example: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "  \"name\": \"Jane Doe\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8133847156089147
      ],
      "excerpt": "| File       | JSON-LD Streaming Parser | jsonld.js | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8182145377747629
      ],
      "excerpt": "toRdf-manifest.jsonld: The JSON-LD toRdf test manifest. A typical JSON-LD file with a single context. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8161076931244303
      ],
      "excerpt": "dbpedia-10000-expanded.json First 10000 triples of DBpedia in expanded JSON-LD. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/rubensworks/jsonld-streaming-parser.js/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "TypeScript",
      "JavaScript"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "JSON-LD Streaming Parser",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "jsonld-streaming-parser.js",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "rubensworks",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rubensworks/jsonld-streaming-parser.js/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 48,
      "date": "Tue, 21 Dec 2021 00:04:07 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "rdf",
      "json-ld",
      "linked-data",
      "rdfjs",
      "parser",
      "streaming",
      "hacktoberfest"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "`JsonLdParser` is a Node [Transform stream](https://nodejs.org/api/stream.html#stream_class_stream_transform)\nthat takes in chunks of JSON-LD data,\nand outputs [RDFJS](http://rdf.js.org/)-compliant quads.\n\nIt can be used to [`pipe`](https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options) streams to,\nor you can write strings into the parser directly.\n\n",
      "technique": "Header extraction"
    }
  ]
}