{
  "citation": [
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "        ?s a dbp:Person . \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/SmartDataAnalytics/Sparqlify",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2012-03-04T20:02:46Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-08T11:55:47Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Sparqlify is a scalable SPARQL-SQL rewriter whose development began in April 2011 in the course of the [LinkedGeoData](http://linkedgeodata.org) project.\n\nThis system's features/traits are:\n* Support of the ['Sparqlification Mapping Language' (SML)](http://sparqlify.org/wiki/SML), an intuitive language for expressing RDB-RDF mappings with only very little syntactic noise.\n* Scalability: Sparqlify does not evaluate expressions in memory. All SPARQL filters end up in the corresponding SQL statement, giving the underlying RDBMS has maximum control over query planning.\n* A powerful rewriting engine that analyzes filter expressions in order to eleminate self joins and joins with unsatisfiable conditions.\n* Initial support for spatial datatypes and predicates.\n* A subset of the SPARQL 1.0 query language plus sub queries are supported.\n* Tested with PostgreSQL/Postgis and H2. Support for further databases is planned.\n* CSV support\n* R2RML will be supported soon\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8544627149957822
      ],
      "excerpt": "Filter predicates: comparison: (<=, <, =, >, >=) logical: (!, &&; ||) arithmetic: (+, -) spatial: st_intersects, geomFromText; other: regex, lang, langMatches   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.938022455527477
      ],
      "excerpt": "Order By is pushed into the SQL \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9700327590342076,
        0.969726991950707
      ],
      "excerpt": "Sparqlify is distributed at the Linked Data Stack, which offers many great tools done by various contributors of the Semantic Web community. \nThe repository is available in the flavors nightly, testing and stable here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9094936674932539
      ],
      "excerpt": ": Update the repository database \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8021716617006642
      ],
      "excerpt": "For the latest development version (built on every commit) perform the following steps \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9366317633591724
      ],
      "excerpt": "Add the repository \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8076473821643732,
        0.8835683486166037
      ],
      "excerpt": "Note that this also works with distros other than \"precise\" (ubuntu 12.04) such as ubuntu 14.04 or 16.04. \nBuilding the repository creates the JAR files providing the sparqlify-* tool suite. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8350907630400582
      ],
      "excerpt": "If such an environment is present, the rest is simple: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8416740557203961
      ],
      "excerpt": "Another way to build the project is run the following commands at &lt;repository-root&gt; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8635798785986976
      ],
      "excerpt": "Afterwards, the shell scripts under sparqlify-core/bin should work. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731515721538552
      ],
      "excerpt": "sparqlify: This is the main executable for running individual SPARQL queries, creating dumps and starting a stand-alone server. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8016550394908124
      ],
      "excerpt": "These tools write their output (such as RDF data in the N-TRIPLES format) to STDOUT. Log output goes to STDERR. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9895068896600021
      ],
      "excerpt": "-h   Hostname of the database (e.g. localhost or localhost:5432) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8706102309403153,
        0.8178888910908514
      ],
      "excerpt": "Run-Once (these options prevent the server from being started and are mutually exclusive with the server configuration) \n-D   Create an N-TRIPLES RDF dump on STDOUT  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9712147435325688
      ],
      "excerpt": "The Sparqlify Platform (under /sparqlify-platform) bundles Sparqlify with the Linked Data wrapper Pubby and the SPARQL Web interface Snorql. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9499441618275449,
        0.901441142397119
      ],
      "excerpt": "For building, at the root of the project (outside of the sparqlify-* directories), run mvn compile to build all modules. \nAfterwards, lauch the platform using: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8188044856515828,
        0.9891785691729262
      ],
      "excerpt": "Assuming the platform runs under http://localhost:7531, you can access the following services relative to this base url: \n* /sparql is Sparqlify's SPARQL endpoint \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8997598156924557
      ],
      "excerpt": "* /pubby is the entry point to the Linked Data interface \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8864284353027236
      ],
      "excerpt": "* platform.properties This file contains configuration parameters that can be adjusted, such as the database connection. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9738761843777405,
        0.8308307328965748,
        0.9884867855438135
      ],
      "excerpt": "The platform applies autoconfiguration to Pubby and Snorql: \n* Snorql: Namespaces are those of the views.sparqlify file. \n* Pubby: The host name of all resources generated in the Sparqlify views is replaced with the URL of the platform (currently still needs to be configured via platform.properties) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9137808206905305
      ],
      "excerpt": "The retry=1 means, that apache only waits 1 seconds before retrying again when it encounters an error (e.g. HTTP code 500) from the proxied resource. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9110774805303861,
        0.9764042581474756
      ],
      "excerpt": "A Sparqlification Mapping Language (SML) configuration is essentially a set of CREATE VIEW statements, somewhat similar to the CREATE VIEW statement from SQL. \nProbably the easiest way to learn to syntax is to look at the following resources: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9616326739847701
      ],
      "excerpt": "/* This is a comment \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.914963884024477,
        0.9984721482837665
      ],
      "excerpt": "    ?s = uri('http://mydomain.org/person', ?id) // Define ?s to be an URI generated from the concatenation of a prefix with mytable's id-column. \n    ?w = uri(?work_page) // ?w is assigned the URIs in the column 'work_page' of 'mytable' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8299480393275566
      ],
      "excerpt": "    ?w prefix \"http://my-organization.org/user/\" // Constraints can be used for optimization, e.g. to prune unsatisfiable join conditions \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8554843691380971
      ],
      "excerpt": "There is no FROM and CONSTRAINT clause \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Sparql -> SQL Rewriter enabling virtual RDB -> RDF mappings",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/AKSW/Sparqlify/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 13,
      "date": "Mon, 20 Dec 2021 14:11:22 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/SmartDataAnalytics/Sparqlify/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "SmartDataAnalytics/Sparqlify",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-docker-parent/sparqlify-docker-cli/Dockerfile",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-docker-parent/sparqlify-docker-web-admin/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/install-deb-packages.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-debian-tomcat-common/src/deb/lod2/bin/create-lod2-deb.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-tests/src/main/resources/compare.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-debian-tomcat7/src/deb/lod2/bin/create-lod2-deb.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-core/src/main/bash/test-linkedgeodata-local.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-core/src/main/bash/test-dump.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-core/src/main/bash/test-content-negotiation.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-core/src/main/bash/test-dump-construct.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-core/src/main/bash/test-linkedgeodata.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-core/src/main/bash/test-self-content-negotiation.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-core/src/main/bash/test-tramstop-query.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/run-dump-lgd.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/run-sparqlify-demo.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/run-sparqlify-linkedgeodata-iviews.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/run-sparqlify-bsbm.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/run-sparqlify-linkeddata-qa.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/run-dump-panlex-links.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/run-sparqlify-wortschatz.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/upload-deb-cstadler.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/run-sparqlify-bsbm-dump.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/run-sparqlify-sparql-analytics.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/safe-run.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/run-sparqlify-linkedgeodata-iviews-bremen-amenities.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/run-compare-proxy.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/sparqlify-debian-tomcat7-old-but-working/build.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/sparqlify-debian-tomcat7-old-but-working/build-all.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/sparqlify-debian-tomcat7-old-but-working/deploy.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/sparqlify-debian-tomcat7-old-but-working/build-webapp.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/sparqlify-debian-tomcat7-old-but-working/src/deb/lod2/bin/create-lod2-deb.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/debian/sparqlify-0.2/sparqlify.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/debian/sparqlify-0.2/sparqlify-csv.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-trash/sparqlify-debian-cli-old-but-working/src/deb/lod2/bin/create-lod2-deb.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-benchmark/src/main/resources/sp2/install.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-benchmark/src/main/resources/sp2/bin-ext/sp2bsql.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-benchmark/src/main/resources/sp2/bin-ext/insertRefBagCol.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-benchmark/src/main/resources/sp2/bin-ext/prepare.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-benchmark/src/main/resources/sparqlify-bsbm/dump-bsbm.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-cli/run-test-server.sh",
      "https://raw.githubusercontent.com/AKSW/Sparqlify/master/sparqlify-platform/bin/test.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "    sudo dpkg -i sparqlify_<version>.deb\n\n    ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "    sudo apt-get install devscripts\n\n    ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8966859452898956
      ],
      "excerpt": "Sparqlify Debian packages can be obtained by following means: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8125244250991939
      ],
      "excerpt": "* Download from the Sparqlify website's download section. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9469117819572423,
        0.9739307406970193
      ],
      "excerpt": "After setting up any of the repositories below, you can install sparqlify with apt using \napt: `sudo apt-get install sparqlify-cli \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9607503944607221
      ],
      "excerpt": ": Install the repository package \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9623668047804587
      ],
      "excerpt": "sudo apt-get update \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9007558253444837
      ],
      "excerpt": "For the latest development version (built on every commit) perform the following steps \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8754710398409424
      ],
      "excerpt": "Building debian packages from this repo relies on the Debian Maven Plugin plugin, which requires a debian-compatible environment. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8752611359014025
      ],
      "excerpt": "sudo apt-get remove sparqlify \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8765339518625865,
        0.908983692039761
      ],
      "excerpt": "mvn clean install \ncd sparqlify-cli \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.897298624039356
      ],
      "excerpt": "If Sparqlify was installed from the debian package, the following commands are available system-wide: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "-d   Database name \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8093991010967773
      ],
      "excerpt": "port Port on which to run the platform, default 7531. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8908125834664572
      ],
      "excerpt": "cd sparqlify-platform/bin \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8453989648962223
      ],
      "excerpt": " * /* You can even nest them! */ \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8070650438920222
      ],
      "excerpt": "* Download from the Sparqlify website's download section. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8327147223624594,
        0.8833013677071059
      ],
      "excerpt": "These tools write their output (such as RDF data in the N-TRIPLES format) to STDOUT. Log output goes to STDERR. \nUsage: sparqlify [options] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "-d   Database name \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8112771745145773
      ],
      "excerpt": "-n   Maximum result set size \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9118355681409163
      ],
      "excerpt": "Usage: sparqlify-csv [options] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8897455469134506
      ],
      "excerpt": "-f   Input data file \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.823213780331684
      ],
      "excerpt": "CSV Parser Settings \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9247766891562824
      ],
      "excerpt": "For a first impression, here is a quick example: \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/SmartDataAnalytics/Sparqlify/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Java",
      "JavaScript",
      "HTML",
      "GAP",
      "Perl",
      "Shell",
      "Standard ML",
      "XSLT",
      "Makefile",
      "CSS",
      "Dockerfile",
      "Awk"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Sparqlify SPARQL->SQL rewriter",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Sparqlify",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "SmartDataAnalytics",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/SmartDataAnalytics/Sparqlify/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "    mvn clean install deb:package\n\n    ",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 107,
      "date": "Mon, 20 Dec 2021 14:11:22 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The following command will start the Sparqlify HTTP server on the default port.\n\n    sparqlify -h localhost -u postgres -p secret -d mydb -m mydb-mappings.sml -n 1000 -t 30\n\nAgents can now access the SPARQL endpoint at `http://localhost:7531/sparql`\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "    // Assume a CSV file with the following columns (osm stands for OpenStreetMap)\n    (city\\_name, country\\_name, osm\\_entity\\_type, osm\\_id, longitude, latitude)\n\n    Prefix fn:<http://aksw.org/sparqlify/> //Needed for urlEncode and urlDecode.\n    Prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>\n    Prefix owl:<http://www.w3.org/2002/07/owl#>\n    Prefix xsd:<http://www.w3.org/2001/XMLSchema#>\n    Prefix geo:<http://www.w3.org/2003/01/geo/wgs84_pos#>\n\n    Create View Template geocode As\n      Construct {\n        ?cityUri\n          owl:sameAs ?lgdUri .\n\n        ?lgdUri\n          rdfs:label ?cityLabel ;\n          geo:long ?long ;\n          geo:lat ?lat .\n      }\n      With\n        ?cityUri = uri(concat(\"http://fp7-pp.publicdata.eu/resource/city/\", fn:urlEncode(?2), \"-\", fn:urlEncode(?1)))\n        ?cityLabel = plainLiteral(?1)\n        ?lgdUri = uri(concat(\"http://linkedgeodata.org/triplify/\", ?4, ?5))\n        ?long = typedLiteral(?6, xsd:float)\n        ?lat = typedLiteral(?7, xsd:float)\n\n\n\n",
      "technique": "Header extraction"
    }
  ]
}