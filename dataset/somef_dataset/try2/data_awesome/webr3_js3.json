{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "There is no special syntax, and variables + references are part of javascript, so they \"just work\". which means you can do things like this:\n\n    article.maker = me;\n    me.made = article;\n    article.maker.knows = bob;     // the same as me.knows\n    article.created = new Date();\n    { a: 'foaf:Document', primaryTopicOf: article }.ref(':this').graphify().turtle();\n    \nBecause we referenced article by value then it'll be in the output graph too, we could use article.id instead then it won't be included.\n\nYou can also have X many Objects with the same .id, then when you .graphify them they all get smashed together as one - which is nice.\n\nAs for migrating IRIs or renaming subjects, that's as simple as calling .ref(':newid') on any object, no complex rdf replace routines needed.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "(12 * 1.4).nodeType();            // TypedLiteral \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8283216015784888
      ],
      "excerpt": "\"http://webr3.org/\".nodeType();   // IRI \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9690798918356124
      ],
      "excerpt": "(12 * 1.4).toNT();                // \"12.3\"^^&lt;http://www.w3.org/2001/XMLSchema#decimal&gt; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9252690500369315
      ],
      "excerpt": "\"http://webr3.org/\".toNT();       // &lt;http://webr3.org/&gt; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9507374082549614
      ],
      "excerpt": "(12 * 1.4).n3();                  // 12.3 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9252690500369315
      ],
      "excerpt": "\"http://webr3.org/\".n3();         // &lt;http://webr3.org/&gt; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8868183352878298,
        0.8283216015784888
      ],
      "excerpt": "var u = \"http://webr3.org/\";      // &lt;http://webr3.org/&gt; \nu.tl(\"rdf:PlainLiteral);          // \"http://webr3.org/\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9690798918356124,
        0.9690798918356124,
        0.8462204750624114
      ],
      "excerpt": "12 .toNT()                            // \"12\"^^&lt;http://www.w3.org/2001/XMLSchema#integer&gt; \n12.1 .toNT()                          // \"12.1\"^^&lt;http://www.w3.org/2001/XMLSchema#decimal&gt; \n1267.43233E32 .toNT()                 // \"1.26743233e+35\"^^&lt;http://www.w3.org/2001/XMLSchema#double&gt; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8981161405709329
      ],
      "excerpt": "  dc:created \"2010-11-20T21:06:42Z\"^^&lt;http://www.w3.org/2001/XMLSchema#dateTime&gt;; \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/webr3/js3",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2010-11-19T15:19:36Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-22T13:12:11Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "It's all really simple tbh, the properties on each object can either be:\n\n- obj['http://xmlns.com/foaf/0.1/name'] - a full IRI\n- obj['foaf:name'] - a normal CURIE\n- obj.foaf$name - a more javascript friendly CURIE where the : is swapped for a $\n- obj.name - a single property which maps up to a CURIE, which maps to an IRI\n\nEach value can be a single value (of any type covered), or an array of values (which might be a list), or an object (which can be named with an IRI or a blanknode identifier).\n\nAnd thus, just like normal javascript or JSON you can make an object structure as simple or as complicated as you like.\n\nObjects can also have methods on them, and these are stripped from any output, so any existing object whether dumb or a full class with properties can be used.\n\nThey're just javascript objects with a .id set on them (non-enumerable and read-only), and where the properties are mapped to RDF properties. So, each object can be seen to describe one thing, one subject, the .id is the subject.\nTo set the .id all you do is call **.ref()** on the object, if you pass in a CURIE or an IRI as a param then that is set as the subject/.id, if you call .ref() with no argument then it is given a blanknode identifier as the .id.\n\nThe methods exposed after .ref'ing are also simple, .n3 dumps an n3 string of the object, .toNT dumps it out as ntriples, and .graphify gives you back an RDFGraph from the RDFa API, making it completely compatible and exposing all the functionality of my [rdfa-api](http://github.org/webr3/rdfa-api) library (and other compatible implementations of the RDFa API).\n\n**.using()** is a bit more subtle, you can throw in the names of ontologies which properties your using come from, in order to provide an unambiguous mapping, for instance:\n\n    var article = {\n      description: \"A dc11:, not dc:, description\",\n      label: \"An rdfs:label\"\n    }.ref(':me').using('dc11','rdfs');\n\nIf you don't pass in any names, then they are mapped up on a first-hit-first-used basis. This is covered more in the section about *propertymap* and *curiemap*.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "In js3 each Object is by default just an Object with a single additional method exposed **.ref()**. When you call this method the object is RDF enabled,\nwhereby it is set to denote the description of something - identified by a blanknode or an IRI - the keys (properties) are mapped to RDF Properties,\na **.id** attribute is exposed on the object, and four methods are also exposed: **.n3()**, **.toNT()**, **.using()** and **.graphify()**.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9767386007542251,
        0.8810432310139787
      ],
      "excerpt": "In short, with this library, all your javascript is also RDF, there are no special types or classes, \neach variable and value is also an RDF Node, List or Graph. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8300056943119732,
        0.9740033338447962,
        0.9471623831971046
      ],
      "excerpt": "You can check the compatibility chart to see if your platform / browser supports it. \nThe short version is that chrome 5+, ff4, webkit (safari) and ie9 all support this script, and on the server side node.js, rhino and besen are all fine. \nObjects and values are not modified in the usual manner and they are not converted in to different types, rather this library automagically redefines \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9613126497255587
      ],
      "excerpt": "All values of type string, number, boolean and date are also RDF Nodes, and are fully aligned (and compatible) with the Interfaces \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9268963733931024
      ],
      "excerpt": "All of the basic js types (string, number, boolean and date) are augmented with the following methods: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9517844745615519
      ],
      "excerpt": "Alias of .toNT(), RDFa API compatibility method. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9536453924030543,
        0.8011351290070649
      ],
      "excerpt": "A string can represent any of the RDF Node types, PlainLiteral (+language), TypedLiteral, BlankNode or IRI. \nIn js3 string exposes the following methods (in addition to the standard methods outlined above): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9389574074133449
      ],
      "excerpt": "Set the language of a PlainLiteral - exposes the .language attribute after calling. (.language is non-enumerable, read-only) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8096345552594993
      ],
      "excerpt": "Set the type of a TypedLiteral - exposes the .type attribute after calling. (.type is non-enumerable, read-only) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9211892881512044
      ],
      "excerpt": "Note: this method also caters for the situations when you want a PlainLiteral to be an xsd:string, or an IRI to be a PlainLiteral \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9323037719265326
      ],
      "excerpt": "Resolve a CURIE to a full IRI - note this is done automatically by .n3 and .toNT methods. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9357642069343304,
        0.9264370673561968,
        0.8563263532393255,
        0.8757785405127441
      ],
      "excerpt": "Remember, all javascript values and types remain unchanged, so it's entirely backwards compatible with all existing data, and will not modify any js values, \n\"Hello World\".l('en') is still a String, properties like .language and .type are non-enumerable, so they won't show up in for loops or when you JSON.stringify \nthe values. You cannot implement this library in non v5 ecmascript by simply adding a .language property to the String object, that simply won't work. \njs3 is fully aware of number types, it knows when a number is an integer, a double or a decimal. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.844622000466505,
        0.8531578393945921
      ],
      "excerpt": "Gotcha: do note that you need to add a space between the number and the .method, or wrap the number in braces (12.1).toNT(), \nsince js expects any integer followed immediately by a period to be a decimal, like 12.145 - this only applies to hard coded in the source-code numbers, and not \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8662832490683361
      ],
      "excerpt": "Specifies that an array is to be used as an RDF list, sets the .list property to true. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8312742523081942,
        0.8774496219220975
      ],
      "excerpt": "Note that there are no .toNT or .nodeType methods, or related, arrays and lists are not RDF Nodes. \nWhen Objects are nested, they are by default considered to be blanknodes, however!, you can of course call .ref() on them in place, and thus \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.871737316160899
      ],
      "excerpt": "But in this case it'll have it's own IRI: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8348693223843819
      ],
      "excerpt": "... of course we can code this however we want to get the same results, for example: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8108087535605933
      ],
      "excerpt": "... or create structures just as complex as we like: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9187175204878817
      ],
      "excerpt": "... and interact with our data however we want: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127
      ],
      "excerpt": "with(Math) { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9205461407045267
      ],
      "excerpt": "BlankNode or IRI in a string, the subject / .id of this object.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9382304241586643
      ],
      "excerpt": "Returns the structure as an RDFGraph of RDFTriples as per the RDFa API core interfaces - compat++. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8981551184383778,
        0.9812731735667117,
        0.9350069593244322,
        0.8401155114324184
      ],
      "excerpt": "Pass in string prefixes for ontologies to consider when mapping simple properties. \nDo see the wiki page on .using() js3.propertymap for more details. \njs3.curiemap is a simple object which maps prefixes to IRIs. \nto add a CURIE mapping: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9670193839374867
      ],
      "excerpt": "to get an IRI for a prefix: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8729482583426997
      ],
      "excerpt": ".getPrefix(iri) - get the registered prefix for an IRI, returns null if no prefix is found: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9626173408366306,
        0.8536493373615016
      ],
      "excerpt": ".shrink(iri) - turn an IRI in to a CURIE : \nThis method returns either a CURIE or the original IRI if no prefix is found. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9624066975831388
      ],
      "excerpt": "js3.propertymap is a simple object which makes the lib aware of properties in ontologies. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9790637014325406
      ],
      "excerpt": "to get the properties for an ontology: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8056697575815828
      ],
      "excerpt": ".ambiguities() - returns an array of ambiguous properties: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9812731735667117,
        0.9407786296567736
      ],
      "excerpt": "Do see the wiki page on .using() js3.propertymap for more details. \nA simple method which can accept any number of objects, or an array of objects, and will return back an RDFGraph. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9702700668861044
      ],
      "excerpt": "A web aware function that will get the description of a subject from the web (negotiating formats) and return back a js3 object to work with: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "An insane integration of RDF in to ECMAScript-262 V5 (Javascript)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/webr3/js3/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 9,
      "date": "Mon, 20 Dec 2021 16:40:33 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/webr3/js3/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "webr3/js3",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/webr3/js3/master/bin/merge.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "\"foaf:name\".nodeType();           // IRI \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "\"foaf:name\".n3();                 // foaf:name \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8901159060745228
      ],
      "excerpt": "\"foaf:name\".resolve()             // returns string \"http://xmlns.com/foaf/0.1/name\" with nodeType IRI \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "  name: 'Nathan', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "  name: 'Nathan', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8735584047867003
      ],
      "excerpt": "js3.curiemap.shrink('http://xmlns.com/foaf/0.1/name'); // 'foaf:name' \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "true.nodeType();                  // TypedLiteral \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "\"foaf:name\".nodeType();           // IRI \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.884730962082615,
        0.8953981394130314,
        0.870271125529397
      ],
      "excerpt": "RDF type safe equality test. \n\"hello\" == \"hello\".l('en')        // true \n\"hello\".equals( \"hello\".l('en') ) // false \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "true.n3();                        // true \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "\"foaf:name\".n3();                 // foaf:name \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8333728516728303
      ],
      "excerpt": "var s = \"Hello World\".l('en');                         \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8488411244225242
      ],
      "excerpt": "var s = \"0FB7\".tl('xsd:hexBinary'); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8933345784509332
      ],
      "excerpt": "var h = \"hello\";                  // \"hello\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8488411244225242,
        0.8421074476017179
      ],
      "excerpt": "var me = { \n  name: 'Nathan', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8488411244225242,
        0.8421074476017179
      ],
      "excerpt": "var me = { \n  name: 'Nathan', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9073448360114489,
        0.8488411244225242
      ],
      "excerpt": "var me = { name: 'Nathan' }.ref(\":me\"); \nvar account = { accountName: 'webr3' }; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8015884454224387
      ],
      "excerpt": "  [bob.id, me.id].toList(), { foo: \"bar\" } \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8488411244225242,
        0.8274134698589198
      ],
      "excerpt": "var somedata = { \n  values: [1,10,25,50].toList(), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8274134698589198,
        0.8102780086823556
      ],
      "excerpt": "  seq:values ( 1 10 25 50 ); \n  seq:result 7.0710678118654755 . \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8488411244225242
      ],
      "excerpt": "var iri = js3.curiemap.foaf; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8056166665051969
      ],
      "excerpt": "note: the value must always be an array. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.835551822679685
      ],
      "excerpt": "var properties = js3.propertymap.foaf; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8488411244225242
      ],
      "excerpt": "var gotchas = js3.propertymap.ambiguities(); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8883527847890496
      ],
      "excerpt": "  print( me.name ); // etc \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/webr3/js3/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "JavaScript",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "JS3 - An insane integration of RDF in ECMAScript-262 V5 (Javascript) #",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "js3",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "webr3",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/webr3/js3/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 116,
      "date": "Mon, 20 Dec 2021 16:40:33 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This library doesn't inspect objects and then generate RDF, rather each value *is* RDF, and javascript:\n\n    true.toNT();         // \"true\"^^<http://www.w3.org/2001/XMLSchema#boolean>\n    (12 * 1.4).toNT();   // \"12.3\"^^<http://www.w3.org/2001/XMLSchema#decimal>\n    \nHere's a complicated yet simple example to illustrate, this is just a standard Object in js:\n\n    var me = {\n      a: 'foaf:Person',                                         // a String, a CURIE and a full IRI\n      name: 'Nathan',                                           // a String, and an RDF Plain Literal\n      age: new Date().getFullYear() - 1981,                     // a Number, and a Typed Literal with the type xsd:integer\n      homepage: 'http://webr3.org',                             // a String, and an IRI, \n      holdsAccount: {                                           // an Object, with a BlankNode reference for the .id\n        label: \"Nathan's twitter account\".l('en'),              // a String, and a Literal with a .language\n        accountName: 'webr3',                                   // noticed that you don't need the prefixes yet?\n        homepage: 'http://twitter.com/webr3'          \n      },\n      knows: bob,                                               // works with variables too of course\n      nick: ['webr3','nath']                                    // an Array, also a list of values, like in turtle and n3\n    }.ref(\":me\");                                               // still an Object, but also has a .id now, it's subject is set.\n\nIf we now call *me.n3()* we'll get the following output:\n\n    <http://webr3.org/nathan#me> rdf:type foaf:Person;\n      foaf:name \"Nathan\";\n      foaf:age 29;\n      foaf:homepage <http://webr3.org>;\n      foaf:holdsAccount [\n        rdfs:label \"Nathan's twitter account\"@en;\n        foaf:accountName \"webr3\";\n        foaf:homepage <http://twitter.com/webr3> ];\n      foaf:knows <http://example.com/bob#me>;\n      foaf:nick \"webr3\", \"nath\" .\n\nIt's just that simple, your javascript is your RDF, it's just plain old javascript:\n\n    me.gender = \"male\";                   // .gender will resolve to foaf:gender to http://xmlns.com/foaf/0.1/gender \n    if(me.age > 18) return true;          // it's all native values, just use like normal!\n\n",
      "technique": "Header extraction"
    }
  ]
}