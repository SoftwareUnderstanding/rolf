{
  "citation": [
    {
      "confidence": [
        0.9028399248104376
      ],
      "excerpt": "a graph pattern (Algebra) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "    ?s a foaf:Person ; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8714162992508173
      ],
      "excerpt": "        foaf:schoolHomepage ?school \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kasei/swift-sparql-syntax",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-04-22T21:45:28Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-07-23T16:20:33Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.908925214220865
      ],
      "excerpt": "Triple, Quad, TriplePattern and QuadPattern \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9656835012418381
      ],
      "excerpt": "Abstract syntax representation of SPARQL queries, aligned with the [SPARQL Algebra] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8509580475912514,
        0.9056534851566922
      ],
      "excerpt": "To use SPARQLSyntax with projects using the [Swift Package Manager], \nadd the following to your project's Package.swift file: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8872113652715304,
        0.8506927872961337,
        0.9239961886149208,
        0.8186780412105732,
        0.9005808586713698,
        0.8650060843121717
      ],
      "excerpt": "The SPARQLSyntax library provides an API for parsing SPARQL queries \nand accessing the resulting abstract data structures. \nThe primary components of this API are: \nstruct Term - A representation of an RDF Term (IRI, Literal, or Blank node) \nenum Algebra - A representation of the query pattern closely aligned with the formal SPARQL Algebra \nenum Expression - A representation of a logical expression \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665252141541041
      ],
      "excerpt": "struct SPARQLParser - Parses a SPARQL query String/Data and returns a Query \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.873724388267202,
        0.8346684070144399,
        0.9302886507948965
      ],
      "excerpt": "Term also provides some support for XSD numeric types, \nbridging between Terms and enum NumericValue which provides numeric functions and type-promoting operators. \nstruct Triple and struct Quad combine Terms into RDF triples and quads. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9053162368404647,
        0.9669341559304051
      ],
      "excerpt": "Instead of Terms, patterns are comprised of a enum Node which can be either a bound Term, or a named variable. \nenum Algebra is an representation of a query pattern aligned with the [SPARQL Algebra]. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8808627470650192,
        0.9629962971611608,
        0.9848577719821353
      ],
      "excerpt": "and more complex operators that can be used to join other Algebra values \n(e.g. innerJoin, union, project, distinct). \nAlgebra provides functions and properties to access features of graph patterns including: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.820520259002816
      ],
      "excerpt": "bind values to specific variables; and replace entire Expression sub-trees. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8070851144324385
      ],
      "excerpt": "a query form (SELECT, ASK, DESCRIBE, or CONSTRUCT, and any associated data such as projected variables, or triple patterns used to CONSTRUCT a result graph) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9245806741353118
      ],
      "excerpt": "struct SPARQLParser provides an API for parsing a SPARQL 1.1 query string and producing a Query. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9078559284655905,
        0.9850579038642404,
        0.9410320554032494,
        0.8889324362993921
      ],
      "excerpt": "In the latter case, serialization can be used even if the query contains syntax errors (with data after the error being serialized as-is). \nParsing of window functions is supported as an extension to the SPARQL 1.1 syntax. \nA SQL-like syntax is supported for projecting window functions in a SELECT clause, as well as in a HAVING clause. \nIn addition to the built-in aggregate functions, the following window functions are supported: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8673492078701152
      ],
      "excerpt": "Shown below are some examples of the supported syntax. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "SPARQL 1.1 Parser and Abstract Syntax",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kasei/swift-sparql-syntax/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 20 Dec 2021 17:55:21 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/kasei/swift-sparql-syntax/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "kasei/swift-sparql-syntax",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/kasei/swift-sparql-syntax/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8156437285617563,
        0.8682292658290868
      ],
      "excerpt": "  dependencies: [ \n    .package(url: \"https://github.com/kasei/swift-sparql-syntax.git\", .upToNextMinor(from: \"0.0.91\")) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8053804429658877
      ],
      "excerpt": "PREFIX foaf: http://xmlns.com/foaf/0.1/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "        foaf:name ?name ; \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.903828884328369
      ],
      "excerpt": "Command Line Usage \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "        foaf:name ?name ; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8440841195693943
      ],
      "excerpt": "    VALUES (?date ?value) { \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/kasei/swift-sparql-syntax/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Swift"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'The MIT License (MIT)\\n\\nCopyright (c) 2018\\xe2\\x80\\x932021 Gregory Todd Williams\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "SPARQLSyntax",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "swift-sparql-syntax",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "kasei",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kasei/swift-sparql-syntax/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 9,
      "date": "Mon, 20 Dec 2021 17:55:21 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "sparql",
      "parser"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "A command line tool, `sparql-parser`, is provided to parse a SPARQL query and\nprint its parsed query algebra, its tokenization, or a pretty-printed SPARQL\nstring:\n\n```\n% ./.build/release/sparql-parser \nUsage: ./.build/release/sparql-parser [-v] COMMAND [ARGUMENTS]\n       ./.build/release/sparql-parser parse query.rq\n       ./.build/release/sparql-parser lint query.rq\n       ./.build/release/sparql-parser tokens query.rq\n```\n\nTo \"lint\", or \"pretty print\", a SPARQL query:\n\n```\n% cat examples/messy.rq\nprefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#:>\nselect    ?s\nwhere{\n?s geo:lat ?lat ;geo:long ?long   ;\n\tFILTER(?long < -117.0)\nFILTER(?lat >= 31.0)\n  FILTER(?lat <= 33.0)\n} ORDER BY ?s\n\n% ./.build/release/sparql-parser lint examples/messy.rq \nPREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#:>\nSELECT ?s WHERE {\n    ?s geo:lat ?lat ;\n        geo:long ?long ;\n    FILTER (?long < - 117.0)\n    FILTER (?lat >= 31.0)\n    FILTER (?lat <= 33.0)\n}\nORDER BY ?s\n\n```\n\nTo parse the query and print the resulting query algebra:\n\n```\n% ./.build/release/sparql-parser parse examples/messy.rq\nQuery\n  Select { ?s }\n        Project { ?s }\n          OrderBy { ?s }\n            Filter (((?long < -117.0) && (?lat >= 31.0)) && (?lat <= 33.0))\n              BGP\n                ?s <http://www.w3.org/2003/01/geo/wgs84_pos#:lat> ?lat .\n                ?s <http://www.w3.org/2003/01/geo/wgs84_pos#:long> ?long .\n\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}