{
  "citation": [
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "  <groupId>org.semanticweb.yars</groupId> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nxparser/nxparser",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2015-05-19T17:26:22Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-06-23T12:55:04Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.92509258225209,
        0.9329815586675716,
        0.8727170373894229,
        0.9615781997287249
      ],
      "excerpt": "NxParser is a Java open source, streaming, non-validating parser for the Nx format, where x = Triples, Quads, or any other number. For more details see the specification for the NQuads format, a extension for the N-Triples RDF format. Note that the parser handles any combination (cf. generalised triples) or number of N-Triples syntax terms on each line (the number of terms per line can also vary). \nIt ate 2 mil. quads (~4GB, (~240MB GZIPped)) on a T60p (Win7, 2.16 GHz)  in ~1 min 35 s (1:18min). Overall, it's more than twice as fast as the previous version when it comes to reading Nx. \nThe NxParser is non-validating, meaning that, e.g., it will happily eat non-conformant N-Triples. Also, the NxParser will not parse certain valid N-Triples files where the RDF terms are not separated by whitespace. We pass all positive W3C N-Triples test cases except one, where the RDF terms are not separated by whitespace (surprise!). \nThe NxParser Parser family also includes a RDF/XML and a Turtle parser. Moreover, we attached a JSON-LD parser (jsonld-java) and a RDFa parser (semargl) such that they emit Triples in the NxParser API. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9709832459252663
      ],
      "excerpt": "Find old compiles in the repository on Google Code, which we do not maintain any more. To use it nevertheless, add \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8734228990079935
      ],
      "excerpt": "to your pom.xml. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8465729302927013
      ],
      "excerpt": "for (Node[] nx : nxp) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Java parsers for different RDF serialisations + API + tools + JAX-RS integration",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nxparser/nxparser/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Mon, 20 Dec 2021 16:40:04 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/nxparser/nxparser/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "nxparser/nxparser",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/nxparser/nxparser/master/release.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9717106327039013
      ],
      "excerpt": "  <version>2.3.3</version> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/nxparser/nxparser/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Java",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Welcome to NxParser #",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "nxparser",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "nxparser",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nxparser/nxparser/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "kaefer3000",
        "body": "",
        "dateCreated": "2020-07-14T14:52:35Z",
        "datePublished": "2020-07-14T17:52:11Z",
        "html_url": "https://github.com/nxparser/nxparser/releases/tag/2.3.4",
        "name": "",
        "tag_name": "2.3.4",
        "tarball_url": "https://api.github.com/repos/nxparser/nxparser/tarball/2.3.4",
        "url": "https://api.github.com/repos/nxparser/nxparser/releases/28555313",
        "zipball_url": "https://api.github.com/repos/nxparser/nxparser/zipball/2.3.4"
      },
      {
        "authorType": "User",
        "author_name": "fekepp",
        "body": "",
        "dateCreated": "2015-11-05T11:26:57Z",
        "datePublished": "2015-11-05T11:29:54Z",
        "html_url": "https://github.com/nxparser/nxparser/releases/tag/2.3.3",
        "name": "",
        "tag_name": "2.3.3",
        "tarball_url": "https://api.github.com/repos/nxparser/nxparser/tarball/2.3.3",
        "url": "https://api.github.com/repos/nxparser/nxparser/releases/2076526",
        "zipball_url": "https://api.github.com/repos/nxparser/nxparser/zipball/2.3.3"
      },
      {
        "authorType": "User",
        "author_name": "fekepp",
        "body": "",
        "dateCreated": "2015-11-05T11:09:09Z",
        "datePublished": "2015-11-05T11:12:03Z",
        "html_url": "https://github.com/nxparser/nxparser/releases/tag/2.3.2",
        "name": "",
        "tag_name": "2.3.2",
        "tarball_url": "https://api.github.com/repos/nxparser/nxparser/tarball/2.3.2",
        "url": "https://api.github.com/repos/nxparser/nxparser/releases/2076429",
        "zipball_url": "https://api.github.com/repos/nxparser/nxparser/zipball/2.3.2"
      },
      {
        "authorType": "User",
        "author_name": "fekepp",
        "body": "",
        "dateCreated": "2015-11-05T10:31:59Z",
        "datePublished": "2015-11-05T10:35:34Z",
        "html_url": "https://github.com/nxparser/nxparser/releases/tag/2.3.1",
        "name": "",
        "tag_name": "2.3.1",
        "tarball_url": "https://api.github.com/repos/nxparser/nxparser/tarball/2.3.1",
        "url": "https://api.github.com/repos/nxparser/nxparser/releases/2076180",
        "zipball_url": "https://api.github.com/repos/nxparser/nxparser/zipball/2.3.1"
      },
      {
        "authorType": "User",
        "author_name": "fekepp",
        "body": "",
        "dateCreated": "2015-11-05T10:09:38Z",
        "datePublished": "2015-11-05T10:13:00Z",
        "html_url": "https://github.com/nxparser/nxparser/releases/tag/2.3.0",
        "name": "",
        "tag_name": "2.3.0",
        "tarball_url": "https://api.github.com/repos/nxparser/nxparser/tarball/2.3.0",
        "url": "https://api.github.com/repos/nxparser/nxparser/releases/2076029",
        "zipball_url": "https://api.github.com/repos/nxparser/nxparser/zipball/2.3.0"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 20,
      "date": "Mon, 20 Dec 2021 16:40:04 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```java\n// true means you are supplying proper N-Triples RDF terms that do not need to be processed\nResource subjRes = new Resource(\"<http://example.org/123>\", true);\nResource predRes = new Resource(\"<http://example.org/123>\", true);\nBNode bn = new BNode(\"_:bnodeId\", true);\n\nNode[] triple = new Node[]{subjRes, predRes, bn};\n// yields <http://example.org/123> <http://example.org/123> _:bnodeId\nSystem.out.println(Arrays.toString(triple));\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```java\nString japaneseString = (\"\u795d\u798f\u306f\u3001\u30c1\u30fc\u30ba\u306e\u30e1\u30fc\u30ab\u30fc\u3067\u3059\u3002\");\nLiteral japaneseLiteral = new Literal(japaneseString, \"ja\");\n\n// yields \"\\u795D\\u798F\\u306F\\u3001\\u30C1\\u30FC\\u30BA\\u306E\\u30E1\\u30FC\\u30AB\\u30FC\\u3067\\u3059\\u3002\"@ja\nSystem.out.println(japaneseLiteral);\n\n// yields \u795d\u798f\u306f\u3001\u30c1\u30fc\u30ba\u306e\u30e1\u30fc\u30ab\u30fc\u3067\u3059\u3002\nSystem.out.println(japaneseLiteral.getLabel());\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Example: Get a Calendar object from an `xsd:dateTime`-typed Literal\n```java\nLiteral dtl; // parser-generated\nXSDDateTime dt = (XSDDateTime)DatatypeFactory.getDatatype(dtl); \nGregorianCalendar cal = dt.getValue();\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Provided you use the Jython implementation (thanks to Uldis Bojars, this is saved from his now offline blog).\n\n```python\nimport sys\nsys.path.append(\"./nxparser.jar\")\n\t \nfrom org.semanticweb.yars.nx.parser import *\nfrom java.io import FileInputStream\nfrom java.util.zip import GZIPInputStream\n\t \ndef all_triples(fname, use_gzip=False):\n  in_file = FileInputStream(fname)\n  if use_gzip:\n      in_file = GZIPInputStream(in_file)\n\t \n  nxp = NxParser()\n  nxp.parse(in_file)\n\t \n  while nxp.hasNext():\n    triple = nxp.next()\n    n3 = ([i.toString() for i in triple])\n    yield n3\n```\nThe code above defines a generator function which will yield a stream of NQuad records. We can now add some demo code in order to see it in action:\n```python\ndef main():\n  gzfname = \"sioc-btc-2009.gz\"\n \n  for line in all_triples(gzfname, use_gzip=True):\n    print line\n\t \n  if __name__ == \"__main__\":\n    main()\n```\nresults in:\n```python\n[u'<http://2008.blogtalk.net/node/29>', u'<http://www.w3.org/1999/02/22-rdf-syntax-ns#:type>', u'<http://rdfs.org/sioc/ns#:Post>', u'<http://2008.blogtalk.net/sioc/node/29>']\n[u'<http://2008.blogtalk.net/node/65>', u'<http://rdfs.org/sioc/ns#:content>', u'\"We\\'ve created a map showing the main places of interest (event locations, restaurants, pubs, shopping locations and tourist sights) during BlogTalk 2008.  The conference venue is shown on the left-hand side of the map.  We will also have a hardcopy for all attendees. View Larger Map\"', u'<http://2008.blogtalk.net/sioc/node/65>']\n```\n\t\n",
      "technique": "Header extraction"
    }
  ]
}