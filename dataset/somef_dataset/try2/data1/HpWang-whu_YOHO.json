{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2109.00182"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9449187648369126
      ],
      "excerpt": "Preprint paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9203686924701314
      ],
      "excerpt": "2021-09-01: The Preprint Paper is accessible on arXiv. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.913999346918293
      ],
      "excerpt": "<img src=\"figures/performance.jpg\" alt=\"Performance\" style=\"zoom:10%;\" /> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/HpWang-whu/YOHO",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-07-04T08:06:31Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-24T10:25:15Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.997058606654012
      ],
      "excerpt": "In this paper, we propose a novel local descriptor-based framework, called You Only Hypothesize Once (YOHO), for the registration of two unaligned point clouds. In contrast to most existing local descriptors which rely on a fragile local reference frame to gain rotation invariance, the proposed descriptor achieves the rotation invariance by recent technologies of group equivariant feature learning, which brings more robustness to point density and noise. Meanwhile, the descriptor in YOHO also has a rotation equivariant part, which enables us to estimate the registration from just one correspondence hypothesis. Such property reduces the searching space for feasible transformations, thus greatly improves both the accuracy and the efficiency of YOHO. Extensive experiments show that YOHO achieves superior performances with much fewer needed RANSAC iterations on four widely-used datasets, the 3DMatch/3DLoMatch datasets, the ETH dataset and the WHU-TLS dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9097969617726637
      ],
      "excerpt": "Project page. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9240580730754883
      ],
      "excerpt": "2021-07-06: YOHO using FCGF backbone is released. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9002596881627318
      ],
      "excerpt": "The datasets and pretrained weights have been uploaded to Google Cloud: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9296563261562842,
        0.8979411005071259
      ],
      "excerpt": "Datasets above contain the point clouds (.ply) and keypoints (.txt, 5000 per point cloud) files. Please place the data to ./data/origin_data for organizing the data structure as: \n- data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8898907957331285,
        0.860059181823877
      ],
      "excerpt": "Pretrained weights we offer include FCGF Backbone, Part I and Part II, which have been added to the main branch and organized following the structure as: \n- model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9188380818107167
      ],
      "excerpt": "To train YOHO, the group input of train set should be prepared using the FCGF model we offer, which is trained with rotation argument in [0,50] deg, by command: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9096383317216404
      ],
      "excerpt": "Warning: the process above needs 300G storage space. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9881056120758083,
        0.8490037945672047
      ],
      "excerpt": "To evalute YOHO on 3DMatch and 3DLoMatch: \n- Prepare the testset: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8046944428787604
      ],
      "excerpt": "  Where PartI is YOHO-C and PartII is YOHO-O, max_iter is the ransac times, PartI should be run first. All results will be stored in ./data/YOHO_FCGF. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490037945672047
      ],
      "excerpt": "- Prepare the testset:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9067754782587935
      ],
      "excerpt": "  All the results will be placed to ./data/YOHO_FCGF. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490037945672047
      ],
      "excerpt": "- Prepare the testset: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9067754782587935
      ],
      "excerpt": "  All the results will be placed to ./data/YOHO_FCGF. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9759990566554528,
        0.9449783287825729,
        0.828927477692996
      ],
      "excerpt": "- EMVN for the group details; \n- FCGF for the backbone; \n- PerfectMatch for the 3DMatch and ETH dataset; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "You Only Hypothesize Once: Point Cloud Registration with Rotation-equivariant Descriptors",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/HpWang-whu/YOHO/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Sun, 26 Dec 2021 19:58:12 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/HpWang-whu/YOHO/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "HpWang-whu/YOHO",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/HpWang-whu/YOHO/tree/master/MinkowskiEngine/docs"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/HpWang-whu/YOHO/master/MinkowskiEngine/tests/cpp/test_all.sh",
      "https://raw.githubusercontent.com/HpWang-whu/YOHO/master/MinkowskiEngine/examples/download_modelnet40.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- First, create the conda environment:\n  ```\n  conda create -n fcgf_yoho python=3.7\n  conda activate fcgf_yoho\n  ```\n\n- Second, intall Pytorch. We have checked version 1.7.1 and other versions can be referred to [Official Set](https://pytorch.org/get-started/previous-versions/).\n  ```\n  conda install pytorch==1.7.1 torchvision==0.8.2 torchaudio==0.7.2 cudatoolkit=11.0 -c pytorch\n  ```\n\n- Third, install MinkowskiEngine for FCGF feature extraction, here we offer two ways according to [MinkowskiEngine](https://github.com/NVIDIA/MinkowskiEngine.git) by using the version we offered:\n  ```\n  cd MinkowskiEngine\n  conda install openblas-devel -c anaconda\n  export CUDA_HOME=/usr/local/cuda-11.1 #:We have checked cuda-11.1.\n  python setup.py install --blas_include_dirs=${CONDA_PREFIX}/include --blas=openblas\n  cd ..\n  ```\n  Or following official command installation:\n  ```\n  pip install git+https://github.com/NVIDIA/MinkowskiEngine.git\n  ```\n\n\n- Fourth, install other packages, here we use 0.8.0.0 version [Open3d](http://www.open3d.org/) for Ubuntu 16.04:\n  ```\n  pip install -r requirements.txt\n  ```\n\n- Finally, compile the CUDA based KNN searcher:\n  ```\n  cd knn_search/\n  export CUDA_HOME=/usr/local/cuda-11.1 #:We have checked cuda-11.1.\n  python setup.py build_ext --inplace\n  cd ..\n  ```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8208532151727175
      ],
      "excerpt": "Also, all datas above can be downloaded in BaiduDisk(Code:0di4). \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8003770400031222
      ],
      "excerpt": "<img src=\"figures/net.jpg\" alt=\"Network\" style=\"zoom:50%;\" /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8670004297725332
      ],
      "excerpt": "Datasets above contain the point clouds (.ply) and keypoints (.txt, 5000 per point cloud) files. Please place the data to ./data/origin_data for organizing the data structure as: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python YOHO_trainset.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9017845964873378,
        0.9017845964873378
      ],
      "excerpt": "python Train.py --Part PartI \npython Train.py --Part PartII \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8740201201114438
      ],
      "excerpt": "  python YOHO_testset.py --dataset 3dmatch --voxel_size 0.025 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8969200938985651,
        0.8969200938985651,
        0.8969200938985651,
        0.8969200938985651
      ],
      "excerpt": "  python Test.py --Part PartI  --max_iter 1000 --dataset 3dmatch    #:YOHO-C on 3DMatch \n  python Test.py --Part PartI  --max_iter 1000 --dataset 3dLomatch  #:YOHO-C on 3DLoMatch \n  python Test.py --Part PartII --max_iter 1000 --dataset 3dmatch    #:YOHO-O on 3DMatch \n  python Test.py --Part PartII --max_iter 1000 --dataset 3dLomatch  #:YOHO-O on 3DLoMatch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9368531704767508
      ],
      "excerpt": "  python YOHO_testset.py --dataset ETH --voxel_size 0.15 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8969200938985651,
        0.8969200938985651
      ],
      "excerpt": "  python Test.py --Part PartI  --max_iter 1000 --dataset ETH --ransac_d 0.2 --tau_2 0.2 --tau_3 0.5 #:YOHO-C on ETH \n  python Test.py --Part PartII --max_iter 1000 --dataset ETH --ransac_d 0.2 --tau_2 0.2 --tau_3 0.5 #:YOHO-O on ETH \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.921108411272225
      ],
      "excerpt": "  python YOHO_testset.py --dataset WHU-TLS --voxel_size 0.8 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8969200938985651,
        0.8969200938985651
      ],
      "excerpt": "  python Test.py --Part PartI  --max_iter 1000 --dataset WHU-TLS --ransac_d 1 --tau_2 0.5 --tau_3 1 #:YOHO-C on WHU-TLS \n  python Test.py --Part PartII --max_iter 1000 --dataset WHU-TLS --ransac_d 1 --tau_2 0.5 --tau_3 1 #:YOHO-O on WHU-TLS \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/HpWang-whu/YOHO/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Cuda",
      "C++",
      "Makefile",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 NVIDIA CORPORATION.\\nCopyright (c) 2018-2020 Chris Choy (chrischoy@ai.stanford.edu)\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of\\nthis software and associated documentation files (the \"Software\"), to deal in\\nthe Software without restriction, including without limitation the rights to\\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\nof the Software, and to permit persons to whom the Software is furnished to do\\nso, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n\\nPlease cite \"4D Spatio-Temporal ConvNets: Minkowski Convolutional Neural\\nNetworks\", CVPR\\'19 (https://arxiv.org/abs/1904.08755) if you use any part\\nof the code.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# You Only Hypothesize Once: Point Cloud Registration with Rotation-equivariant Descriptors",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "YOHO",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "HpWang-whu",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/HpWang-whu/YOHO/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Here we offer the FCGF backbone YOHO. Thus FCGF requirements need to be met:\n- Ubuntu 14.04 or higher\n- CUDA 11.1 or higher\n- Python v3.7 or higher\n- Pytorch v1.6 or higher\n- [MinkowskiEngine](https://github.com/stanfordvl/MinkowskiEngine) v0.5 or higher\n\nSpecifically, The code has been tested with:\n- Ubuntu 16.04, CUDA 11.1, python 3.7.10, Pytorch 1.7.1, GeForce RTX 2080Ti.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 47,
      "date": "Sun, 26 Dec 2021 19:58:12 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "pytorch",
      "point-cloud",
      "registration"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "With the Pretrained/self-trained models, you can try YOHO with:\n```\npython YOHO_testset.py --dataset demo\npython Demo.py\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}