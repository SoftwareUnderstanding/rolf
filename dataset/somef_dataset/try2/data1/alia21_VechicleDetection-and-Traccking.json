{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1506.02640",
      "https://arxiv.org/abs/1612.08242"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "     if distance(previous_rectangle, closest_rectangle) > THRESHOLD: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "          new_rectangle.remove_count=10 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "     if rectangle.remove_count==0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "     if rectangle.step_count>0 : \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8456806903995955
      ],
      "excerpt": " if rectangle.start_count&gt;5  \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/alia21/VechicleDetection-and-Traccking",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-08-12T12:42:14Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-08-13T07:27:43Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Integration of (https://arxiv.org/abs/1506.02640) and Redmon and Farhadi, 2016 (https://arxiv.org/abs/1612.08242). \n\nYOLO stands for You Only Look Once. It's an object detector that uses features learned by a deep convolutional neural network to detect an object. Before we get out hands dirty with code, we must understand how YOLO works.\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9748956060950598
      ],
      "excerpt": "The goals / steps of this project are the following: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8150751582630265
      ],
      "excerpt": " Note: for those first two steps don't forget to normalize your features and randomize a selection for training and testing. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9164615478848465
      ],
      "excerpt": " Run your pipeline on a video stream (start with the test_video.mp4 and later implement on full project_video.mp4) and create a heat map of recurring detections frame by frame to reject outliers and follow detected vehicles. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8264193438978648
      ],
      "excerpt": "I trained a linear SVM using only the hog features. First and foremost my goal was to achieve 7+ FPS(frames per sedconds), with fair performance on my Intel i5 8600K. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9483436166262639,
        0.9580118023558463,
        0.9859543402811838
      ],
      "excerpt": "I scaled the features values since the range of all features should be normalized so that each feature contributes approximately proportionately to the final distance. \nThen I used the Linear SVC method which is, in fact, sklearn implementation for Linear Support Vector Classification. \nThe classifier is implemented so it has more flexibility in the choice of penalties and loss functions and should scale better to large numbers of samples. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9810706751001248
      ],
      "excerpt": "    #: Apply the scaler to X \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.88473126496293
      ],
      "excerpt": "#: Check the training time for the SVC \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9733337397669227
      ],
      "excerpt": "Precompute the Hog Features for the entire image \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9930821179464749,
        0.9916832277742055,
        0.8930901044020226
      ],
      "excerpt": "Select the portion of the hog features \nSubsample the features according to the size of the window \nClassify Features \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.845256059527724
      ],
      "excerpt": "Append the window region to rectangles list with factor scale \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8994599673425353
      ],
      "excerpt": "For optimizing the classifier I tried various combinations of parameters, some parameters were bringing good results in classification, but decreasing the train/prediction time and vice versa, so I played with Orient and Pixel per cell arguments and color channel, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9296356112511635,
        0.9402017554490343
      ],
      "excerpt": "I recorded the positions of positive detections in each frame of the video.  From the positive detections I created a heatmap and then thresholded that map to identify vehicle positions.  I then used scipy.ndimage.measurements.label() to identify individual blobs in the heatmap.  I then assumed each blob corresponded to a vehicle.  I constructed bounding boxes to cover the area of each blob detected.   \nSince I used a lot of techniques to speed up the processing time to 7 FPS, we lose valuable data.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9269557596460112
      ],
      "excerpt": "In order to improve performance on false positives and to enhance labeling I constructed the following algorithm :  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9614506317875583
      ],
      "excerpt": "for all rectangles in current_frame_rectangles: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8211383563415011
      ],
      "excerpt": "          we have a new rectangle \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9614506317875583
      ],
      "excerpt": "for all rectangles in (previous_frame_rectangle-current_frame_rectangles): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8009512079859675,
        0.9614506317875583
      ],
      "excerpt": "//updated all alive rectangles \nfor all rectangles in alive_rectangles : \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8226531979188483
      ],
      "excerpt": "          update position to the next delta step \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9616457722439604,
        0.9335355267919964
      ],
      "excerpt": "-  output : confidece of an object being present in the rectangle, list of rectangles position and sizes and classes of the objects begin detected. Each bounding box is represented by 6 numbers (Pc, Rx, Ry, Rh, Rw, C1..Cn) as explained above. In this case n=80, which means we have c as 80-dimensional vector, and the final size of representing the bounding box is 85  \nLet us consider an input, where the input image is 608 x 608, and stride of the network is 32. As pointed earlier, the dimensions of the feature map will be 13 x 13. We then divide the input image into 19 x 19 cells. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9378933502752161
      ],
      "excerpt": "For keeping the things simple we will flatten the last two dimensions, from (19, 19, 5, 85) the output of our CNN is flatten to (19, 19, 425). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8115560765335048
      ],
      "excerpt": "- For each of the SxS (19x19) grid cells, find the maximum of the confidence scores (taking a max across both the 5 anchor boxes and across different classes). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8646156684020284
      ],
      "excerpt": "If the cell contains an object, it predicts a probability of this object belonging to one class Ci, i=1,2,\u2026, K: probability(the object belongs to the class Ci | containing an object). At this stage, the model only predicts one set of class probabilities per cell, regardless of the number of boxes B.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8199622990972896,
        0.9257008129865167
      ],
      "excerpt": "The first attempt to reduce these rectangles is to filter them by a threshold. \nEven after yolo filtering by thresholding over, we still have a lot of overlapping boxes. Second approach and filtering is Non-Max suppression algorithm. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9726147398978525
      ],
      "excerpt": "There are many ways to compute bounding boxes for detection tasks. One approach is to directly predict the bounding box values, however this approach is susceptible to errors as it tends to favor bounding boxes with large dimensions. Further, the training process is unstable because the range of values to predict can vary significantly.In YOLOv2, the first step is to compute good candidate anchor boxes. This is achieved using K-means clustering. However, using direct Euler distance metric for K-means minizers error for larger bounding boxes, but not for smaller boxes. Therefore, in YOLOv2, intersection over union (IOU) is used as a distance metric. The IOU calculations are made assuming all the bounding boxes are located at one point, i.e. only width and height are used as features. Figure below shows the height and width plotted against each other. Fixed slopes indicate that most bounding boxes have specific predefined aspect ratios, and size. This is not surprising given the fact that a person and vehicle are expected to have certain fixed dimensions. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9827155238999593
      ],
      "excerpt": "In Yolo V2, this specialization is \u2018assisted\u2019 with predefined anchors as in Faster-RCNN. The predefined anchors are chosen to be as representative as possible of the ground truth boxes, with the following K-means clustering algorithm to define them: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8632142528635737
      ],
      "excerpt": "the algorithm initiates 5 centroids by drawing randomly 5 of the ground-truth bounding boxes \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9651226210396879,
        0.8016672741557123,
        0.9213544877884562,
        0.8595046716237581
      ],
      "excerpt": "each ground truth box is assigned to one of the centroid, using as distance measure the IOU, in order to get 5 clusters or groups of ground-truth bounding boxes \nnew centroids are computed by taking the box inside each cluster that minimizes the mean IOU with all other boxes inside the cluster \nTo determine the priors, YOLOv2 applies k-means cluster. Then it pre-select 5 clusters. For COCO, the width and height of the anchors are (0.57273,0.677385),(1.87446,2.06253 ),(3.33843,5.47434),(7.88282,3.52778),(62\u00d745),(9.77052,9.16828 ) \nand they are relative to the final feature map \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8536256134891962
      ],
      "excerpt": "See notebook :  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9616457722439604,
        0.8981595492995385,
        0.8262021936332858,
        0.8514534749135396
      ],
      "excerpt": "-  output : confidece of an object being present in the rectangle, list of rectangles position and sizes and classes of the objects begin detected. Each bounding box is represented by 6 numbers (Pc, Rx, Ry, Rh, Rw, C1..Cn) as explained above. In this case n=80, which means we have c as 80-dimensional vector, and the final size of representing the bounding box is 85  \nThe first detection is made by the 82nd layer. For the first 81 layers, the image is down sampled by the network, such that the 81st layer has a stride of 32. If we have an image of 416 x 416, the resultant feature map would be of size 13 x 13. One detection is made here using the 1 x 1 detection kernel, giving us a detection feature map of 13 x 13 x 3 x 85. \nThen, the feature map from layer 79 is subjected to a few convolutional layers before being up sampled by 2x to dimensions of 26 x 26. This feature map is then depth concatenated with the feature map from layer 61. Then the combined feature maps is again subjected a few 1 x 1 convolutional layers to fuse the features from the earlier layer (61). Then, the second detection is made by the 94th layer, yielding a detection feature map of 26 x 26 x 3 x 85. \nA similar procedure is followed again, where the feature map from layer 91 is subjected to few convolutional layers before being depth concatenated with a feature map from layer 36. Like before, a few 1 x 1 convolutional layers follow to fuse the information from the previous layer (36). We make the final of the 3 at 106th layer, yielding feature map of size 52 x 52 x 3 x 85. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8100282936872892
      ],
      "excerpt": "<caption> Note : The last three terms of the loss function in YOLO v2 are the squared errors, whereas in YOLO v3, they\u2019ve been replaced by cross-entropy error terms. In other words, object confidence and class predictions in YOLO v3 are now predicted through logistic regression. \n",
      "technique": "Supervised classification"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "For the purpose of this project, I'm using a pretrained weights for Yolo V2.\nYou can download the weights <a href = \"http://pjreddie.com/media/files/yolo.weights\"> here</a>\n\nThese weights are generated using pure numpy arrays, but luckily the authors of Yolo provided configuration files containing the full model information, which means we can convert the weights in any high-level program language.\nAllan Zelener wrote a function for weights conversion, which works well for Yolo V2, and I provided small modifications for Yolo V3 References are at the end of this notebook.\n\n**Once the download finish, please put the weights file to YoloV2 folder**\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/alia21/VechicleDetection-and-Traccking/releases",
    "technique": "GitHub API"
  },
  "faq": [
    {
      "confidence": [
        1
      ],
      "excerpt": "First and foremost, The biggest problem of this pipeline is that it's hard for us to create a composition of features or applying filters that will work fine on all road conditions, lights, shadows, noise. \nSecond, The sliding window algorithm is not optimal, and it cost us a lot of processing time.\nSo with 7FPS, I can say that I have poor performance and poor quality of my algorithm.\n\nMy journey has just started here,\nI readed lot about RCNN and YOLO algorithm, and bellow is implementation and explanation of YOLO V2 and V3 for this project.\n\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 19:13:44 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/alia21/VechicleDetection-and-Traccking/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "alia21/VechicleDetection-and-Traccking",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/alia21/VechicleDetection-and-Traccking/master/Vehicle-DetectionandTracking/Vechicledetection.ipynb",
      "https://raw.githubusercontent.com/alia21/VechicleDetection-and-Traccking/master/Vehicle-DetectionandTracking/YoloV3/Notebook.ipynb",
      "https://raw.githubusercontent.com/alia21/VechicleDetection-and-Traccking/master/Vehicle-DetectionandTracking/YoloV2/Notebook.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Install the packets in requirements.txt file\n* Download the weights\n* Convert the weights with the provided script\n* Load the weights in keras\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.889985852149688
      ],
      "excerpt": "          get rectangle current frame position \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8624496965515981
      ],
      "excerpt": "then, the following two steps are alternated: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9207044035558942
      ],
      "excerpt": "The full code is inside the main Notebook.py file, under Generate dataset and train the model heading. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8170623105378241
      ],
      "excerpt": "print('Feature vector length:', len(X_train[0])) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8235342826754806
      ],
      "excerpt": "The full code is available in cv_utils.py:find_cars (Line:115 - Line:179) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8359299706379749
      ],
      "excerpt": "![alt text][image11] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8121224247458421
      ],
      "excerpt": "<img src=\"YoloV2/notebook_images/rectangle.png\" style=\"width:70%;height:70%;\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8414896404734281
      ],
      "excerpt": "<img src=\"YoloV2/notebook_images/architecture.png\" style=\"width:95%;height:95%;\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8941910184428716
      ],
      "excerpt": "<img src=\"YoloV2/notebook_images/probability_extraction.png\" style=\"width:700px;height:400;\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.899191549629028
      ],
      "excerpt": "<img src=\"YoloV2/notebook_images/yolo.png\" style=\"width:100%;height:100%;\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8471184481756736
      ],
      "excerpt": "<center><img src=\"YoloV2/notebook_images/nms_algo.jpg\" style=\"width:25%;height:25%;\"></center> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8115090188393016
      ],
      "excerpt": "<center><img src=\"YoloV2/notebook_images/iou.png\" style=\"width:500px;height:400;\"></center> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8549439384841201
      ],
      "excerpt": "./script.py yolo.cfg yolo.weights model_data/yolo.h5 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8414896404734281
      ],
      "excerpt": "<img src=\"YoloV3/notebook_images/architecture.png\" style=\"width:95%;height:95%;\"> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/alia21/VechicleDetection-and-Traccking/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "VechicleDetection-and-Tracking",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "VechicleDetection-and-Traccking",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "alia21",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/alia21/VechicleDetection-and-Traccking/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 19:13:44 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": " Below  are some examples of test images to demonstrate how my pipeline is working. What I did to optimize the performance of my classifier?\n\nI use composition on three search scales, using YUV which were choosen carefully according to:\n* Fair accuracy on Test images \n* Fair processing/search speed\n\n* Box Search 1\n     * YMin = 400  \n     * YMax = 500  \n     * scale = 1.5  \n\n* Box Search 2\n     * YMin = 400  \n     * YMax = 550  \n     * scale = 2.0  \n\n* Box Search 3\n     * YMin = 400  \n     * YMax = 600  \n     * scale = 3.5\n     \nHere are some example images:\n\n![alt text][image12]\n\n",
      "technique": "Header extraction"
    }
  ]
}