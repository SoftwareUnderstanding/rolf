{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/chenmengyang/rename_later",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-10-11T14:02:12Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-08-26T22:16:09Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9934779207701327,
        0.9328468916190938,
        0.8930557935849842
      ],
      "excerpt": "This is a simple exercise to assess the fitness of a candidate for a the role of Machine Learning Engineer. There are two independent tasks that need to be completed. The first task deals with training and deploying a machine learning model, and the second deals with model monitoring. \nUse the Iris datasets stored in the data/ directory to train a simple machine learning model to predict the species of Iris given measurements of the length and width of the petal and sepal. Serialize the model and store it in the current working directory. \nNext, define two functions in score.py named init() and run() . The init() function is run once when the web service is initialized. It should return 0 if there was no error during initialization or 1 otherwise. The run() is executed whenever a call is made to the /predict endpoint. It accepts a JSON encoded string corresponding to the request schema and returns a JSON string conforming to the response schema shown below:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8676675855286295
      ],
      "excerpt": "Refer to app.py, the Flask app that serves the predictions, to understand how these functions are used. In test_score.py write unit tests using a well-known Python testing framework to verify that the functions you defined work as they should. Ensure that the service runs locally. Next, complete the Dockerfile, build the Docker image, and verify that it also runs locally.  \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/chenmengyang/rename_later/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Thu, 23 Dec 2021 05:51:42 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/chenmengyang/rename_later/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "chenmengyang/rename_later",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8905736325638224
      ],
      "excerpt": "If you found this exercise trivial, you are encouraged to augment your solution with something cool. For example, you could use JSONSchema for input validation, build out a CI/CD pipeline with Azure Pipelines, Travis  etc., or make the API more secure using JWT and TLS. Feel free to impress us! \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8168522467171303
      ],
      "excerpt": "Next, define two functions in score.py named init() and run() . The init() function is run once when the web service is initialized. It should return 0 if there was no error during initialization or 1 otherwise. The run() is executed whenever a call is made to the /predict endpoint. It accepts a JSON encoded string corresponding to the request schema and returns a JSON string conforming to the response schema shown below:  \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/chenmengyang/rename_later/issues{/number}",
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Obstacle Course",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "rename_later",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "chenmengyang",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/chenmengyang/rename_later/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Thu, 23 Dec 2021 05:51:42 GMT"
    },
    "technique": "GitHub API"
  }
}