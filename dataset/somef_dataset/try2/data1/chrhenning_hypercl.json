{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1906.00695",
      "https://arxiv.org/abs/1703.04200",
      "https://arxiv.org/abs/1512.03385",
      "https://arxiv.org/abs/1906.00695}\n}\n```"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Please cite our paper if you use this code in your research project.\n\n```\n@inproceedings{oshg2019hypercl,\ntitle={Continual learning with hypernetworks},\nauthor={Johannes von Oswald and Christian Henning and Jo{\\~a}o Sacramento and Benjamin F. Grewe},\nbooktitle={International Conference on Learning Representations},\nyear={2020},\nurl={https://arxiv.org/abs/1906.00695}\n}\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{oshg2019hypercl,\ntitle={Continual learning with hypernetworks},\nauthor={Johannes von Oswald and Christian Henning and Jo{\\~a}o Sacramento and Benjamin F. Grewe},\nbooktitle={International Conference on Learning Representations},\nyear={2020},\nurl={https://arxiv.org/abs/1906.00695}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/chrhenning/hypercl",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing to this repository\nAll contributions and improvements are very welcome and appreciated.\nFirst of all (and most importantly), we only want to have code contributions that follow basic coding guidelines. Our coding is inspired by these guidelines. Here are some basic remarks:\n\nLines should be no longer than 80 characters\nAll names (even local variables) must reflect the meaning of its entity\nAll methods/functions need a docstring describing its purpose, arguments and return values\nIf possible, program object-oriented\nAll changes should be well documented\nWhenever possible, do not copy code\nCommit messages have to be precise, comprehensive and complete\nNever push buggy code to the master repo; be careful to not break other parts of the repo (a good sanity check if always to double-check your changes by running the test suite, but be aware that our tests only cover a small fraction of our code base)\nNever commit any temporary or result files to the repository (output directories of simulations; compiled code or IDE-specific configs). Also, never commit any large files or datasets.\nWhenever you pull from the repo, carefully check all changes made by others, especially in all files that affect your code.\nIf you push third-party code to the repository, make sure that all attributions are of copyright-holders are done correctly and the license information is properly incorporated (note, this also holds for code snippets from stackoverflow) \nNever assume that the user knows how to use your program or function. Capture all possible failure modes and provide meaningful warning/error messages.\n\nUse common sense when coding!\n\nThe best programs are written so that computing machines can perform them quickly and so that human beings can understand them clearly. A programmer is ideally an essayist who works with traditional aesthetic and literary forms as well as mathematical concepts, to communicate the way that an algorithm works and to convince a reader that the results will be correct.\n- Donald Ervin Knuth, Selected Papers on Computer Science\n\nNote, since the repository is changing all the time, code gets deprecated freqeuently. Therefore, please run your python scripts with the option --Wall every once in a while to fix all warnings (especially deprecation warnings).\nDocumentation\nWe follow the Google styleguide when writing docstrings. We use sphinx to build documentation for this project. The documentation source files are located in docs.\nWhen you add your implementation files (containing docstrings) to the documentation source files, make sure the documentation compiles without warnings.\nSee this example on how to write Google-style docstrings in sphinx.\nPlease fix any mistakes and inconsistencies you spot in the documentation.\nFolder structure\nWe decided to have the flexibility of being able to execute scripts from their relative directories as well as from the base directory. Unfortunately, this flexibility comes with some limitations, most notably, we need to manually modify the path variable whenever executing scripts from their relative directory. See this file for more details. most importantly, no two directories in this repo may have the same name. Otherwise, the import system might get confused, which leads to runtime errors or (in the worst case) to undesired behavior.\nHence, every subfolder needs a custom __init__.py file and every executable module needs to start with the following lines:\n```python\nDo not delete the following import for all executable scripts!\nimport init # pylint: disable=unused-import\n```\nIn addition, all imports most be absolute, i.e., with respect to the base directory of this repository.\nCommand-line arguments\nCommand-line argument definitions should be reused whenever possible (see module cli_args). Their help-text should be comprehensive (and ideally contain the default value). Flags should always have the action store_true, such that their usage is intuitive. This flag may only be changed temporarily if a very prominent warning is placed in the code.\nDefault values should never change, especially if other parts of the repo are reusing the argument definition (though, you may capture cases in the definition of a command-line argument to realize different default values for different cases).\nAn example definition for command line-arguments can be found here.\nGeneral setup and checkpointing\nFor the general setup of scripts the method setup_environment should be used (see the corresponding docstring). Note, that this method requires some general command-line arguments to be set (see method miscellaneous_args).\nIdeally, networks are regularly checkpointed by using the methods provided in torch_ckpts. Scripts (especially for extensive simulations) should provide the possibility to load and continue from existing checkpoints (such that no computational ressources are wasted).\nData loaders\nA set of framework-agnostic dataloaders is implemented in the folder data. All dataloaders inherit their functionality from the class Dataset.\nThese data loaders are easy to use (and tested with PyTorch and Tensorflow). Most dataloaders simply load the whole dataset in working memory. Some specialized data loaders (e.g., those derived from LargeImgDataset also allow the retrieval of costumized data loaders, more suitable for the Deep Learning framework at use.\nThe data loaders in the folder data are only for common datasets. There are several other data loaders (for special datasets, such as synthetic ones) that also inherit from class Dataset sprinkled across the repository.\nIf you want to implement you own data handler, such inherit from the abstract class Dataset and specify the fields of the dict attribute _data (there is a short description of all its keys in the constructor of Dataset). Additionally, you have to overwrite the abstract methods get_identifier and _plot_sample.\nMain- and Hypernetworks\nA main network is a network that solves an actual task (specified through a dataset). Hypernetworks are used to generate the parameters of a corresponding main network. Both network types have a dedicated interface. Main networks are located in the folder mnets and have to implement the interface mnet_interface. Hypernetworks are located in the folder hnets and have to implement the interface hnet_interface. \nNote, the design of the hnet_interface is not completed yet. Currently (7th Nov 2019), main networks and hypernetworks are sprinkled across the repository. Some main networks have already been integrated into the folder mnets. Once a network has been migrated and implements the new interface, then the old network should be deprecated.\nAll old networks are implementing the following interface module_wrappers.\nPlotting\nIf possible, plots should be produced publication-ready, meaning you should make an effort to make them look nice from the beginning. To ensure consistency, we defined some general guidelines for our plots in the methods configure_matplotlib_params and get_colorbrewer2_colors of the modules misc (e.g., colors, fontsizes, font, ...).\nOptimally, you call the method configure_matplotlib_params in the corresponding init.py file of your subfolder to ensure the plotting environment is consistently configured across the repository (e.g., see here for an example).",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-06-02T17:39:36Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-23T02:35:08Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9846654728754872,
        0.9933384984649167
      ],
      "excerpt": "A continual learning approach that has the flexibility to learn a dedicated set of parameters, fine-tuned for every task, that doesn't require an increase in the number of trainable weights and is robust against catastrophic forgetting. \nFor details on this approach please read our paper. You can find our spotlight presentation here and a more detailed introduction in this talk. Experiments on continual learning with hypernetworks using sequential data and recurrent networks can be found in this repository. Furthermore, this repository studies a probabilistic extension of the proposed CL algorithm. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.804563181538016
      ],
      "excerpt": "You can find instructions on how to reproduce our MNIST experiments and on how to use the corresponding code in the subfolder mnist. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8730480019854278
      ],
      "excerpt": "All testing of implemented functionality is located in the subfolder tests and documented here. To run all unit tests, execute: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Continual Learning with Hypernetworks. A continual learning approach that has the flexibility to learn a dedicated set of parameters, fine-tuned for every task, that doesn't require an increase in the number of trainable weights and is robust against catastrophic forgetting.",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Please refer to the [README](docs/README.md) in the subfolder [docs](docs) for instructions on how to compile and open the documentation.\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/chrhenning/hypercl/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 11,
      "date": "Sat, 25 Dec 2021 20:35:18 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/chrhenning/hypercl/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "chrhenning/hypercl",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/chrhenning/hypercl/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "We use [conda](https://www.anaconda.com/) to manage Python environments. To create an environment that already fulfills all package requirements of this repository, simply execute\n\n```console\n$ conda env create -f environment.yml\n$ conda activate hypercl_env\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8587505860755719
      ],
      "excerpt": "All testing of implemented functionality is located in the subfolder tests and documented here. To run all unit tests, execute: \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/chrhenning/hypercl/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Continual Learning with Hypernetworks",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "hypercl",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "chrhenning",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/chrhenning/hypercl/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 101,
      "date": "Sat, 25 Dec 2021 20:35:18 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Some toy regression problems can be explored in the folder [toy_example](toy_example). Please refer to the corresponding [documentation](toy_example/README.md). Example run:\n\n```console\n$ python3 -m toy_example.train --no_cuda\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}