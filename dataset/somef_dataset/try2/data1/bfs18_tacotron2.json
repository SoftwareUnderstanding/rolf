{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This implementation uses code from the following repos: [Keith\nIto](https://github.com/keithito/tacotron/), [Prem\nSeetharaman](https://github.com/pseeth/pytorch-stft) as described in our code.\n\nWe are inspired by [Ryuchi Yamamoto's](https://github.com/r9y9/tacotron_pytorch)\nTacotron PyTorch implementation.\n\nWe are thankful to the Tacotron 2 paper authors, specially Jonathan Shen, Yuxuan\nWang and Zongheng Yang.\n\n\n[WaveGlow]: https://drive.google.com/file/d/1WsibBTsuRg_SF2Z6L6NFRTT-NjEy1oTx/view?usp=sharing\n[Tacotron 2]: https://drive.google.com/file/d/1c5ZTuT7J08wLUoVZ2KkUs_VdZuJ86ZqA/view?usp=sharing\n[pytorch 1.0]: https://github.com/pytorch/pytorch#installation\n[website]: https://nv-adlr.github.io/WaveGlow\n[ignored]: https://github.com/NVIDIA/tacotron2/blob/master/hparams.py#L22\n[Apex]: https://github.com/nvidia/apex\n[AMP]: https://github.com/NVIDIA/apex/tree/master/apex/amp\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/bfs18/tacotron2",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-10-30T01:35:17Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-18T14:05:03Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.973275828171175,
        0.8711149776521351,
        0.9575358977252401,
        0.9846982656768857
      ],
      "excerpt": "An updated version of the method purposed in the avoue paper. \n - gradient adaptor factor for the CTC loss instead of an increasing weight. \n - an extremely simple CTC recognizer (1 linear layer with ReLU activation) is used to force the Tacotron decoder  \n to learn a representation with plentiful linguistic information. The CTC recognizer is able to classify  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8136219164336094
      ],
      "excerpt": " from the taco_loss and mi_loss approximately equal) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8141949346816867,
        0.8372396012058242,
        0.8468068119053629
      ],
      "excerpt": "PyTorch implementation of Natural TTS Synthesis By Conditioning \nWavenet On Mel Spectrogram Predictions.  \nThis implementation includes distributed and automatic mixed precision support \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9646273808870223
      ],
      "excerpt": "Visit our [website] for audio samples using our published [Tacotron 2] and \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Tacotron 2 - PyTorch implementation with faster-than-realtime inference",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/bfs18/tacotron2/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Tue, 21 Dec 2021 02:35:43 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/bfs18/tacotron2/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "bfs18/tacotron2",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/bfs18/tacotron2/master/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/bfs18/tacotron2/master/inference.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Download and extract the [LJ Speech dataset](https://keithito.com/LJ-Speech-Dataset/)\n2. Clone this repo: `git clone https://github.com/NVIDIA/tacotron2.git`\n3. CD into this repo: `cd tacotron2`\n4. Initialize submodule: `git submodule init; git submodule update`\n5. Update .wav paths: `sed -i -- 's,DUMMY,ljs_dataset_folder/wavs,g' filelists/*.txt`\n    - Alternatively, set `load_mel_from_disk=True` in `hparams.py` and update mel-spectrogram paths \n6. Install [PyTorch 1.0]\n7. Install [Apex]\n8. Install python requirements or build docker image \n    - Install python requirements: `pip install -r requirements.txt`\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.919541088332267
      ],
      "excerpt": "python train.py --output_directory=outdir --log_directory=logdir \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.800965357800894
      ],
      "excerpt": "Training using a pre-trained model can lead to faster convergence \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.919541088332267,
        0.9457437603218569
      ],
      "excerpt": "python train.py --output_directory=outdir --log_directory=logdir -c tacotron2_statedict.pt --warm_start \npython -m multiproc train.py --output_directory=outdir --log_directory=logdir --hparams=distributed_run=True,fp16_run=True \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/bfs18/tacotron2/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "BSD 3-Clause \"New\" or \"Revised\" License",
      "url": "https://api.github.com/licenses/bsd-3-clause"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Copyright (c) 2017 Keith Ito\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Tacotron 2 MMI (without wavenet)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "tacotron2",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "bfs18",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/bfs18/tacotron2/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. NVIDIA GPU + CUDA cuDNN\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 44,
      "date": "Tue, 21 Dec 2021 02:35:43 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Download our published [Tacotron 2] model\n2. Download our published [WaveGlow] model\n3. `jupyter notebook --ip=127.0.0.1 --port=31337`\n4. Load inference.ipynb \n\nN.b.  When performing Mel-Spectrogram to Audio synthesis, make sure Tacotron 2\nand the Mel decoder were trained on the same mel-spectrogram representation. \n\n\n",
      "technique": "Header extraction"
    }
  ]
}