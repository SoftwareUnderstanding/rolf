{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use this software for research, please cite the paper (http://proceedings.mlr.press/v28/bergstra13.pdf) as follows:\n\nBergstra, J., Yamins, D., Cox, D. D. (2013) Making a Science of Model Search: Hyperparameter Optimization in Hundreds of Dimensions for Vision Architectures. TProc. of the 30th International Conference on Machine Learning (ICML 2013), June 2013, pp. I-115 to I-23.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9422788712119848
      ],
      "excerpt": "If you're a developer and wish to contribute, please follow these steps. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hyperopt/hyperopt",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2011-09-06T22:24:59Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-22T06:53:54Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.907505320061855
      ],
      "excerpt": "Hyperopt is a Python library for serial and parallel optimization over awkward \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8651293277025502
      ],
      "excerpt": "Currently three algorithms are implemented in hyperopt: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9968029537584643
      ],
      "excerpt": "Tree of Parzen Estimators (TPE) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9610059588077633
      ],
      "excerpt": "Hyperopt has been designed to accommodate Bayesian optimization algorithms based on Gaussian processes and regression trees, but these are not currently implemented. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.807317259523863
      ],
      "excerpt": "National Science and Engineering Research Council of Canada (NSERC), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Distributed Asynchronous Hyperparameter Optimization in Python",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[Hyperopt documentation can be found here](http://hyperopt.github.io/hyperopt), but is partly still hosted on the wiki. Here are some quick links to the most relevant pages:\n\n- [Basic tutorial](https://github.com/hyperopt/hyperopt/wiki/FMin)\n- [Installation notes](https://github.com/hyperopt/hyperopt/wiki/Installation-Notes)\n- [Using mongodb](https://github.com/hyperopt/hyperopt/wiki/Parallelizing-Evaluations-During-Search-via-MongoDB)\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hyperopt/hyperopt/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 932,
      "date": "Wed, 22 Dec 2021 18:06:23 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/hyperopt/hyperopt/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "hyperopt/hyperopt",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/hyperopt/hyperopt/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/hyperopt/hyperopt/master/tutorial/02.MultipleParameterTutorial.ipynb",
      "https://raw.githubusercontent.com/hyperopt/hyperopt/master/tutorial/01.BasicTutorial.ipynb",
      "https://raw.githubusercontent.com/hyperopt/hyperopt/master/tutorial/Partial-sampling%20in%20hyperopt.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Create an account on GitHub if you do not already have one.\n\n2. Fork the project repository: click on the \u2018Fork\u2019 button near the top of the page. This creates a copy of the code under your account on the GitHub user account. For more details on how to fork a repository see [this guide](https://help.github.com/articles/fork-a-repo/).\n\n3. Clone your fork of the hyperopt repo from your GitHub account to your local disk:\n\n   ```bash\n   git clone https://github.com/<github username>/hyperopt.git\n   cd hyperopt\n   ```\n\n4. Create environment with:  \n   `$ python3 -m venv my_env` or `$ python -m venv my_env`\n   or with conda:  \n   `$ conda create -n my_env python=3`\n\n5. Activate the environment:  \n   `$ source my_env/bin/activate`  \n   or with conda:  \n   `$ conda activate my_env`\n\n6. Install dependencies for extras (you'll need these to run pytest):\n   Linux/UNIX:\n   `$ pip install -e '.[MongoTrials, SparkTrials, ATPE, dev]'`\n\n   or Windows:\n\n   ```cmd\n   pip install -e .[MongoTrials]\n   pip install -e .[SparkTrials]\n   pip install -e .[ATPE]\n   pip install -e .[dev]\n   ```\n\n7. Add the upstream remote. This saves a reference to the main hyperopt repository, which you can use to keep your repository synchronized with the latest changes:\n\n    `$ git remote add upstream https://github.com/hyperopt/hyperopt.git`\n\n    You should now have a working installation of hyperopt, and your git repository properly configured. The next steps now describe the process of modifying code and submitting a PR:\n\n8. Synchronize your master branch with the upstream master branch:\n\n    ```bash\n    git checkout master\n    git pull upstream master\n    ```\n\n9. Create a feature branch to hold your development changes:\n\n    `$ git checkout -b my_feature`\n\n    and start making changes. Always use a feature branch. It\u2019s good practice to never work on the master branch!\n\n10. We recommend to use [Black](https://github.com/psf/black) to format your code before submitting a PR which is installed automatically in step 6.\n\n11. Then, once you commit ensure that git hooks are activated (Pycharm for example has the option to omit them). This can be done using [pre-commit](https://pre-commit.com/), which is installed automatically in step 6, as follows:\n\n    ```bash\n    pre-commit install\n    ```\n\n    This will run black automatically when you commit on all files you modified, failing if there are any files requiring to be blacked. In case black does not run execute the following:\n\n    ```bash\n    black {source_file_or_directory}\n    ```\n\n12. Develop the feature on your feature branch on your computer, using Git to do the version control. When you\u2019re done editing, add changed files using git add and then git commit:\n\n    ```bash\n    git add modified_files\n    git commit -m \"my first hyperopt commit\"\n    ```\n\n13. The tests for this project use [PyTest](https://docs.pytest.org/en/latest/) and can be run by calling `pytest`.\n\n14. Record your changes in Git, then push the changes to your GitHub account with:\n\n    ```bash\n    git push -u origin my_feature\n    ```\n\nNote that dev dependencies require python 3.6+.\n\n",
      "technique": "Header extraction"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/hyperopt/hyperopt/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Hyperopt: Distributed Hyperparameter Optimization",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "hyperopt",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "hyperopt",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hyperopt/hyperopt/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5999,
      "date": "Wed, 22 Dec 2021 18:06:23 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Install hyperopt from PyPI\n\n```bash\npip install hyperopt\n```\n\nto run your first example\n\n```python\n#: define an objective function\ndef objective(args):\n    case, val = args\n    if case == 'case 1':\n        return val\n    else:\n        return val ** 2\n\n#: define a search space\nfrom hyperopt import hp\nspace = hp.choice('a',\n    [\n        ('case 1', 1 + hp.lognormal('c1', 0, 1)),\n        ('case 2', hp.uniform('c2', -10, 10))\n    ])\n\n#: minimize the objective over the space\nfrom hyperopt import fmin, tpe, space_eval\nbest = fmin(objective, space, algo=tpe.suggest, max_evals=100)\n\nprint(best)\n#: -> {'a': 1, 'c2': 0.01420615366247227}\nprint(space_eval(space, best))\n#: -> ('case 2', 0.01420615366247227}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "See [projects using hyperopt](https://github.com/hyperopt/hyperopt/wiki/Hyperopt-in-Other-Projects) on the wiki.\n\n",
      "technique": "Header extraction"
    }
  ]
}