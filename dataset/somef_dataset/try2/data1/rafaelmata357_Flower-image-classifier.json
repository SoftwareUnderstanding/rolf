{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1404.5997\n- VGG19   : https://arxiv.org/abs/1409.1556\n- ResNet  : https://arxiv.org/abs/1608.06993\n\n\n# Files in the repository\n\n- **get_train_args.py**   : script to get the command line arguments for the train program     \n- **predict.py**          : program to predict the flower image    \n- **cat_to_name.json**    : json file to map the classes with the flower names \n- **get_predict_args.py** : script to get the command line argumens for the predict program\n- **train.py**            : program to train, validate and test the classifier\n- **utils.py**            : utility functions for train and predict apps.\n\n# Install\nClone the repository to the local machine\n\n`$ git clone https://github.com/rafaelmata357/Flower-image-classifier.git`\n\n# Running\n\nThe **train** app has the following arguments:\n\n     1. Data Folder for train/val/ test images as --data_dir with default value 'flowers'\n     2. Save Dir to save the checkpoint as        --save_dir with default value current directory\n     3. Learning rate to used for the optimizer   --learning_rate with default value 0.001\n     4. Dropout probability                       --drop_p\n     5. Hidden Units to used in the classifier    --hidden_units with default value 512 (one hidden layer",
      "https://arxiv.org/abs/1409.1556\n- ResNet  : https://arxiv.org/abs/1608.06993\n\n\n# Files in the repository\n\n- **get_train_args.py**   : script to get the command line arguments for the train program     \n- **predict.py**          : program to predict the flower image    \n- **cat_to_name.json**    : json file to map the classes with the flower names \n- **get_predict_args.py** : script to get the command line argumens for the predict program\n- **train.py**            : program to train, validate and test the classifier\n- **utils.py**            : utility functions for train and predict apps.\n\n# Install\nClone the repository to the local machine\n\n`$ git clone https://github.com/rafaelmata357/Flower-image-classifier.git`\n\n# Running\n\nThe **train** app has the following arguments:\n\n     1. Data Folder for train/val/ test images as --data_dir with default value 'flowers'\n     2. Save Dir to save the checkpoint as        --save_dir with default value current directory\n     3. Learning rate to used for the optimizer   --learning_rate with default value 0.001\n     4. Dropout probability                       --drop_p\n     5. Hidden Units to used in the classifier    --hidden_units with default value 512 (one hidden layer",
      "https://arxiv.org/abs/1608.06993\n\n\n# Files in the repository\n\n- **get_train_args.py**   : script to get the command line arguments for the train program     \n- **predict.py**          : program to predict the flower image    \n- **cat_to_name.json**    : json file to map the classes with the flower names \n- **get_predict_args.py** : script to get the command line argumens for the predict program\n- **train.py**            : program to train, validate and test the classifier\n- **utils.py**            : utility functions for train and predict apps.\n\n# Install\nClone the repository to the local machine\n\n`$ git clone https://github.com/rafaelmata357/Flower-image-classifier.git`\n\n# Running\n\nThe **train** app has the following arguments:\n\n     1. Data Folder for train/val/ test images as --data_dir with default value 'flowers'\n     2. Save Dir to save the checkpoint as        --save_dir with default value current directory\n     3. Learning rate to used for the optimizer   --learning_rate with default value 0.001\n     4. Dropout probability                       --drop_p\n     5. Hidden Units to used in the classifier    --hidden_units with default value 512 (one hidden layer"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9944484218006108,
        0.9944484218006108,
        0.9826628511165726
      ],
      "excerpt": "AlexNet : https://arxiv.org/abs/1404.5997 \nVGG19   : https://arxiv.org/abs/1409.1556 \nResNet  : https://arxiv.org/abs/1608.06993 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rafaelmata357/Flower-image-classifier",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-06-20T04:56:43Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-08-13T01:01:13Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9540052185588703,
        0.8345056764891385,
        0.9454616256365943
      ],
      "excerpt": "This project is part of the AI Programming with Python Nanodegree from [https://www.udacity.com/] to create  \nand train a classifier using transfer learning from three different pre trained CNN to predict flowers images using a dataset with 102 classes. \nThe project is broken down into multiple steps: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9185638764092207
      ],
      "excerpt": "A 102 category dataset, consisting of 102 flower categories, flowers commonly occuring in the United Kingdom.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9697008983099739
      ],
      "excerpt": "to the dataset repository to get more detail. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Python AI project to create a classifier using pre trained CNN for Udacity Nanodegree ",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rafaelmata357/Flower-image-classifier/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 22 Dec 2021 23:05:32 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/rafaelmata357/Flower-image-classifier/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "rafaelmata357/Flower-image-classifier",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/rafaelmata357/Flower-image-classifier/master/Image%20Classifier%20Project.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Clone the repository to the local machine\n\n`$ git clone https://github.com/rafaelmata357/Flower-image-classifier.git`\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8233588558014837
      ],
      "excerpt": "numpy  \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8924602075911549,
        0.8451524415132134,
        0.8262583758307745,
        0.8773516702488787,
        0.9113816437249168,
        0.9249026121857331
      ],
      "excerpt": "get_train_args.py   : script to get the command line arguments for the train program      \npredict.py          : program to predict the flower image     \ncat_to_name.json    : json file to map the classes with the flower names  \nget_predict_args.py : script to get the command line argumens for the predict program \ntrain.py            : program to train, validate and test the classifier \nutils.py            : utility functions for train and predict apps. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/rafaelmata357/Flower-image-classifier/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Flower-image-classifier",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Flower-image-classifier",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "rafaelmata357",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rafaelmata357/Flower-image-classifier/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The **train** app has the following arguments:\n\n     1. Data Folder for train/val/ test images as --data_dir with default value 'flowers'\n     2. Save Dir to save the checkpoint as        --save_dir with default value current directory\n     3. Learning rate to used for the optimizer   --learning_rate with default value 0.001\n     4. Dropout probability                       --drop_p\n     5. Hidden Units to used in the classifier    --hidden_units with default value 512 (one hidden layer)\n     6. Epochs number of epocs to used trainning  --epochs with default value 5\n     7. CNN Model Architecture to used as         --arch with default value 'vgg19'\n     8. GPU to specified gpu resources use        --gpu with default value y or n for CPU\n\nExample to train the classifier using the Alexnet model, with a classifier having two hidden layers of 512 and 256 outputs,\na learning rate of 0.001, 20% dropout probability, 30 epochs and GPU usage, execute:\n\n```$ python train.py --data_dir flower --save_dir checkpoint.pth --learning_rate 0.001 --drop_p 0.2 --epochs 30 --arch alexnet --gpu y ```\n\nIn addition to get help execute:\n\n`$ python train.py -h `\n\nThe **predict** app has the following arguments:\n   \n     1. Data image path                           --data_dir with default value 'flowers'\n     2. checkpoint path                           --checkpoint\n     3. Top K probabilities                       --top_k\n     4. Categroy Names                            --category_names\n     5. GPU to specified gpu resources use        --gpu with default value 'y'\n\nExample to use the train classifier and predict a flower image, showing the top 3 possible flowers and no GPU usage:\n\n```$ python predict.py flower checkpoint.pth --top_k 3 --category_names cat_to_name.json --gpu n```\n\nIn addition to get help execute:\n\n`$ python predict.py -h `\n\nOuput example:\n\n![Example](https://github.com/rafaelmata357/Flower-image-classifier/blob/master/output.png)\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 22 Dec 2021 23:05:32 GMT"
    },
    "technique": "GitHub API"
  }
}