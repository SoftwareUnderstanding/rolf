{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1810.12890\n\n\n## Usage\n\nGraph Execution\n- For 2D input\n```python\nimport numpy as np\nimport tensorflow as tf\nfrom nets.dropblock import DropBlock2D\n\n# only support `channels_last` data format\na = tf.placeholder(tf.float32, [None, 10, 10, 3]"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/DHZS/tf-dropblock",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-11-07T07:11:18Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-16T16:19:09Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9783336024697596,
        0.8538107174073059
      ],
      "excerpt": "This is a TensorFlow implementation of the following paper: \nDropBlock: A regularization method for convolutional networks \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "TensorFlow implementation of DropBlock",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/DHZS/tf-dropblock/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 18,
      "date": "Tue, 28 Dec 2021 21:49:22 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/DHZS/tf-dropblock/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "DHZS/tf-dropblock",
    "technique": "GitHub API"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/DHZS/tf-dropblock/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 An Jiaoyang\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "DropBlock in TensorFlow",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "tf-dropblock",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "DHZS",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/DHZS/tf-dropblock/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 78,
      "date": "Tue, 28 Dec 2021 21:49:22 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "tensorflow",
      "eager-execution",
      "dropblock"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Graph Execution\n- For 2D input\n```python\nimport numpy as np\nimport tensorflow as tf\nfrom nets.dropblock import DropBlock2D\n\n#: only support `channels_last` data format\na = tf.placeholder(tf.float32, [None, 10, 10, 3])\nkeep_prob = tf.placeholder(tf.float32)\ntraining = tf.placeholder(tf.bool)\n\ndrop_block = DropBlock2D(keep_prob=keep_prob, block_size=3)\nb = drop_block(a, training)\n\nsess = tf.Session()\nfeed_dict = {a: np.ones([2, 10, 10, 3]), keep_prob: 0.8, training: True}\nc = sess.run(b, feed_dict=feed_dict)\n\nprint(c[0, :, :, 0])\n```\n\n- For 3D input\n```python\nimport numpy as np\nimport tensorflow as tf\nfrom nets.dropblock import DropBlock3D\n\n#: only support `channels_last` data format\na = tf.placeholder(tf.float32, [None, 5, 5, 5, 1])\nkeep_prob = tf.placeholder(tf.float32)\ntraining = tf.placeholder(tf.bool)\n\ndrop_block = DropBlock3D(keep_prob=keep_prob, block_size=3)\nb = drop_block(a, training)\n\nsess = tf.Session()\nfeed_dict = {a: np.ones([1, 5, 5, 5, 1]), keep_prob: 0.2, training: True}\nc = sess.run(b, feed_dict=feed_dict)\n\nfor i in range(5):\n    print(c[0, i, :, :, 0])\n```\n\nEager Execution\n```python\nimport tensorflow as tf\nfrom nets.dropblock import DropBlock2D\n\ntf.enable_eager_execution()\n\n#: only support `channels_last` data format\na = tf.ones([2, 10, 10, 3])\n\ndrop_block = DropBlock2D(keep_prob=0.8, block_size=3)\nb = drop_block(a, training=True)\n\nprint(b[0, :, :, 0])\n\n#: update keep probability\ndrop_block.set_keep_prob(0.1)\nb = drop_block(a, training=True)\n\nprint(b[0, :, :, 0])\n```\n",
      "technique": "Header extraction"
    }
  ]
}