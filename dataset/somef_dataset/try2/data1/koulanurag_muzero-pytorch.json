{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/koulanurag/muzero-pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-12-13T22:42:55Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-22T03:15:34Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9823035553494955
      ],
      "excerpt": "Pytorch Implementation of MuZero : \"Mastering Atari , Go, Chess and Shogi by Planning with a Learned Model\"  based on pseudo-code provided by the authors \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Pytorch Implementation of MuZero",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/koulanurag/muzero-pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 36,
      "date": "Wed, 22 Dec 2021 20:59:53 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/koulanurag/muzero-pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "koulanurag/muzero-pytorch",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "  - Python 3.6, 3.7\n  - ```bash\n      cd muzero-pytorch\n      pip install -r requirements.txt\n      ```\n\n",
      "technique": "Header extraction"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/koulanurag/muzero-pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Anurag Koul\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "muzero-pytorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "muzero-pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "koulanurag",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/koulanurag/muzero-pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 218,
      "date": "Wed, 22 Dec 2021 20:59:53 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "deep-reinforcement-learning",
      "planning",
      "tree-search",
      "model-based-rl"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Train: ```python main.py --env CartPole-v1 --case classic_control --opr train --force ```\n* Test: ```python main.py --env CartPole-v1 --case classic_control --opr test```\n* Visualize results : ```tensorboard --logdir=<result_dir_path>```\n\n|Required Arguments | Description|\n|:-------------|:-------------|\n| `--env`                          |Name of the environment|\n| `--case {atari,classic_control,box2d}` |It's used for switching between different domains(default: None)|\n| `--opr {train,test}`             |select the operation to be performed|\n\n|Optional Arguments | Description|\n|:-------------|:-------------|\n| `--value_loss_coeff`           |Scale for value loss (default: None)|\n| `--revisit_policy_search_rate` |Rate at which target policy is re-estimated (default:None)( only valid if ```--use_target_model``` is enabled)|\n| `--use_priority`               |Uses priority for  data sampling in replay buffer. Also, priority for new data is calculated based on loss (default: False)|\n| `--use_max_priority`           |Forces max priority assignment for new incoming data in replay buffer (only valid if ```--use_priority``` is enabled) (default: False) |\n| `--use_target_model`           |Use target model for bootstrap value estimation (default: False)|\n| `--result_dir`                 |Directory Path to store results (defaut: current working directory)|\n| `--no_cuda`                    |no cuda usage (default: False)|\n| `--debug`                      |If enables, logs additional values  (default:False)|\n| `--render`                     |Renders the environment (default: False)|\n| `--force`                      |Overrides past results (default: False)|\n| `--seed`                       |seed (default: 0)|\n| `--test_episodes`              |Evaluation episode count (default: 10)|\n\n```Note: default: None => Values are loaded from the corresponding config```\n\n",
      "technique": "Header extraction"
    }
  ]
}