{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1802.04208",
      "https://arxiv.org/abs/1802.04208",
      "https://arxiv.org/abs/1802.04208"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{donahue2018wavegan,\n  title={Synthesizing Audio with Generative Adversarial Networks},\n  author={Donahue, Chris and McAuley, Julian and Puckette, Miller},\n  journal={arXiv:1802.04208},\n  year={2018}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/cristiprg/wavegan-fork",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-10-30T14:43:17Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-02-08T14:11:37Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9805944686566284
      ],
      "excerpt": "The simplest way to get started with GAN-init is to use the built-in SC09 dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8787793245022313
      ],
      "excerpt": "Train a GAN on specific amount of data, for a specific number of epochs, excluding or not any label, and save output to a text file: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9852034993674145
      ],
      "excerpt": "--exclude_class is an optional parameter. The values are numbers 0 to 9, case in which it will just ignore the data points with that specific label. Be sure to check the logs, the system prints out this piece of information in the beginning, in the loader. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370159336962491,
        0.9120615815487649,
        0.907216258480595
      ],
      "excerpt": "This script loads the GAN model saved in GAN_TRAIN_DIR and performs hyperopt. It uses the training data in DATA_DIR, from which it discards the first PERCENTAGE_TO_DROP percentage. This is useful if you want to train your GAN on the first q% of the data and the CNN on the last (100-q)%, thus partitioning the data into two partitions. \nPlease also have a look at the descriptions of the other parameters here. \nFor example, you can also set --train_data_percentages to use only a percentage of the CNN data for training. Thus, the final number of data points will be train_data_percentages / 100 * (100-q) / 100. This is useful for getting the data for reproducing Fig. 4.6, where q = 60, (100-q) = 40 and train_data_percentages = 25,50,75,100. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9393521637872062
      ],
      "excerpt": "I strongly recommed using the LOG_FILE here. This log file contains general logs as well as the results. This makes the entire system less complicated to debug and to maintain. To extract the results, simple bash commands to parse the text file do the job. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.801250619347458
      ],
      "excerpt": "Here, I used the word \"Result\" because it discriminates between the final results and rest of system logs.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9826773531662172,
        0.9789929846181957
      ],
      "excerpt": "For experimenting with WaveGAN, the procedures are the same, expect the moments file is not necessary anymore and GAN_TYPE is now wavegan instead of specgan. \nBelow this row is the original content of Donahue's wavegan repo. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9668505892519518
      ],
      "excerpt": "Official TensorFlow implementation of WaveGAN (Donahue et al. 2018) (paper) (demo) (sound examples). WaveGAN is a GAN approach designed for operation on raw, time-domain audio samples. It is related to the DCGAN approach (Radford et al. 2016), a popular GAN model designed for image synthesis. WaveGAN uses one-dimensional transposed convolutions with longer filters and larger stride than DCGAN, as shown in the figure above. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "    ./data/customdataset \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259,
        0.8476794224783797
      ],
      "excerpt": "    --data_dir ./data/customdataset \nIf your results are unsatisfactory, try adding a post-processing filter with --wavegan_genr_pp or removing phase shuffle with --wavegan_disc_phaseshuffle 0.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "    --data_dir ./data/customdataset \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "    --data_dir ./data/customdataset \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9183867122089153
      ],
      "excerpt": "The training scripts for both WaveGAN and SpecGAN create simple TensorFlow MetaGraphs for generating audio waveforms, located in the training directory. A simple usage is below; see this Colab notebook for additional features. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "saver.restore(sess, 'model.ckpt') \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/cristiprg/wavegan-fork/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 15:52:24 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/cristiprg/wavegan-fork/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "cristiprg/wavegan-fork",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/cristiprg/wavegan-fork/master/eval/noise/wavegan_response.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/cristiprg/wavegan-fork/master/web/ckpts/dumper/dump.sh",
      "https://raw.githubusercontent.com/cristiprg/wavegan-fork/master/data/ljspeech.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.885671861285625
      ],
      "excerpt": "If you would like to use another dataset, please follow the Donahue's instructions below to create build the datasets in the .tfrecord format. It is a good practice to create one set of multiple shards for train, one for valid and one for test. Check the --name parameter. Also, make sure to set the data-constants appropriately. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8180010781961637
      ],
      "excerpt": "Create moments file: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python ./train_cnns.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.865147164723687,
        0.8736328308621912
      ],
      "excerpt": "<img src=\"static/wavegan.png\"/> \n<img src=\"static/results.png\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9382892056106165
      ],
      "excerpt": "python data/make_tfrecord.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9363510515943466
      ],
      "excerpt": "python train_wavegan.py train ./train \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train_wavegan.py preview ./train \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train_wavegan.py incept ./train \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8800201964783315
      ],
      "excerpt": "python backup.py ./train 60 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train_specgan.py moments ./train \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9363510515943466
      ],
      "excerpt": "python train_specgan.py train ./train \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train_specgan.py preview ./train \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train_specgan.py incept ./train \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8800201964783315
      ],
      "excerpt": "python backup.py ./train 60 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.925671696398174
      ],
      "excerpt": "import tensorflow as tf \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.91161623999058
      ],
      "excerpt": "saver = tf.train.import_meta_graph('infer.meta') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8123763140827432
      ],
      "excerpt": "sess = tf.InteractiveSession() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8905573287067622
      ],
      "excerpt": "_z = (np.random.rand(50, 100) * 2.) - 1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428
      ],
      "excerpt": "_G_z = sess.run(G_z, {z: _z}) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8609520445175076
      ],
      "excerpt": "python score.py --audio_dir wavs \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9128644026793049
      ],
      "excerpt": "python score.py --audio_dir sc09/train  --fix_length --n 18620 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/cristiprg/wavegan-fork/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook",
      "JavaScript",
      "HTML",
      "CSS",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "GAN-initialization",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "wavegan-fork",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "cristiprg",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/cristiprg/wavegan-fork/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n#: Will likely also work with newer versions of Tensorflow\npip install tensorflow-gpu==1.4.0\npip install scipy\npip install matplotlib\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 15:52:24 GMT"
    },
    "technique": "GitHub API"
  }
}