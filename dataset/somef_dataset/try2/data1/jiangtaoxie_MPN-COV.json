{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Created by [Jiangtao Xie](http://jiangtaoxie.github.io) and [Peihua Li](http://www.peihuali.org)\n<div>\n&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<img src=\"doc/figures/MPN-COV.jpg\" width=\"80%\"/>\n</div>\n\n",
      "technique": "Header extraction"
    }
  ],
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{Li2017,\n    author = {Peihua Li,Jiangtao Xie,Qilong Wang and Wangmeng Zuo},\n    title  = {Is Second-order Information Helpful for Large-scale Visual Recognition?},\n    journal= {International Conference on Computer Vision (ICCV)},\n    year   = {2017}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jiangtaoxie/MPN-COV",
    "technique": "GitHub API"
  },
  "contact": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**If you have any questions or suggestions, please contact us**\n\n`jiangtaoxie@mail.dlut.edu.cn`\n",
      "technique": "Header extraction"
    }
  ],
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-09-28T07:30:03Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-20T11:26:54Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. **`'method'`**: It is reserved for future use.\n2. **`'regu_method'`**: We introduced three normalization methods in the paper, namely, `MPN-COV`,`MPN-COV+matrix-l2`,`MPN-COV+matrix-Fro`. As the latter two normalizations produced unsatisfactory performance, we only support MPN-COV, designated by `'power'`.\n3. **`'alpha'`**: It denotes the exponent of matrix power function(equivalently, the power of eigenvalues, see the paper), whose values should be positive. The default value is 0.5 producing the best performance.\n4. **`'epsilon'`**: It is a small positive number added to eigenvalues of covariance matrices. It is set to 0 as the Power-E metric allows the eigenvalue to be non-negative.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "This repository contains the source code and models trained on ImageNet 2012 dataset for the following paper:\n\n    @article{Li2017,\n        author = {Peihua Li,Jiangtao Xie,Qilong Wang and Wangmeng Zuo},\n        title  = {Is Second-order Information Helpful for Large-scale Visual Recognition?},\n        journal= {International Conference on Computer Vision (ICCV)},\n        year   = {2017}\n    }\n\nWe proposed the second-order pooling to replace the common first-order, max/average pooling after the last conv. layer. The proposed networks, called MPN-COV ConvNets, achieved consistent, nontrivial improvements over their counterparts. The key to our method is **Matrix Power Normalization of COVariance**, which\n\n1. amounts to robust covariance estimation given a small number of large-dimensional features(a.k.a. small sample/large dimension), as commonly seen in the last convolutional layers in state-of-the-art ConvNets;\n2. appropriately exploits Riemannian geometry which allows zero eigenvalues, overcoming the downside of the well-known Log-Euclidean metric in this scenario.\n\n\n   ![result](doc/figures/results.jpg)\n   - Figure 1: Error(%,10-crop) comparison of MPN-COV ConvNets with the counterparts. We can see our method can improve the performance of top-1 1.6% ~ 6.8%,and top-5 1.0% ~ 4.0%.\n\nYou can visit our [project page](http://peihuali.org/iSQRT-COV/index.html) for more details.\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9792373133846731
      ],
      "excerpt": "We developed our programs based on MatConvNet and Matlab 2015b, running under either Ubuntu 14.04.5 LTS and Windows 7. To implement MPN-COV layer, we adopt the eigenvalue decomposition algorithm on CPU in single-precision format, as its GPU version on the CUDA platform is much slower. Except for eigenvalue decomposition, all other operations in forward and backward propagations are performed using C++ on GPU. While writing code, we follow the convention of MatConvNet as closely as possible. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9792312600492644
      ],
      "excerpt": "MPN_COV_Pool_C.m is object oriented, enabling adding the layer of MPN-COV when the wrapper of DagNN is used. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9874836522757496
      ],
      "excerpt": "- We modified vl_compilenn.m so that our MPN-COV code can be complied, and modified vl_simplenn.m to support the layer interface when the wrapper of SimpleNN is used. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8150771532802734
      ],
      "excerpt": "                              'method',[],... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8150771532802734
      ],
      "excerpt": "                dagnn.MPN_COV_Pool_C('method', [],... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9502861690971366
      ],
      "excerpt": "In our demo code, we implement MPN-COV AlexNet, VGG-M and VGG-VD under SimpleNN framework, and MPN-COV ResNet under DagNN framework. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@ICCV2017: For exploiting second-order statistics, we propose Matrix Power Normalized Covariance pooling (MPN-COV) ConvNets, different from and outperforming those using global average pooling.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jiangtaoxie/MPN-COV/releases",
    "technique": "GitHub API"
  },
  "faq": [
    {
      "confidence": [
        1
      ],
      "excerpt": " Network            |224x224<br />1-crop|224x224<br />10-crop|GoogleDrive|BaiduCloud\n ---|:---:|:---:|:---:|:---:\n MPN-COV-ResNet-50 |22.27/6.35         |21.16/5.58     |[186.8MB](https://drive.google.com/open?id=0B-bKYQs6Xic1TnZ5ZS1JRlVVZGM)|[186.8MB](https://pan.baidu.com/s/1c2fG1S8)\n MPN-COV-ResNet-101 |21.17/5.70        |19.71/5.01     |[270.7MB](https://drive.google.com/open?id=0B-bKYQs6Xic1bzVDN3EyaVZ4eGs)|[270.7MB](https://pan.baidu.com/s/1hsgonTq)\n MPN-COV-AlexNet |38.37/17.14          |34.97/14.60    |[567.0MB](https://drive.google.com/open?id=0B-bKYQs6Xic1ZDJBNllxSXFDamc)|[567.0MB](https://pan.baidu.com/s/1boUndMn)\n MPN-COV-VGG-M   |34.63/14.64          |31.81/12.52    |[581.6MB](https://drive.google.com/open?id=0B-bKYQs6Xic1SmJmQkRjV1NGUWs)|[581.6MB](https://pan.baidu.com/s/1o8QJmgM)\n MPN-COV-VGG-16  |26.55/8.94           |24.68/7.75     |[614.0MB](https://drive.google.com/open?id=0B-bKYQs6Xic1Rjl2VnlWbVNEUWM)|[614.0MB](https://pan.baidu.com/s/1c2csEsC)\n\n  - The results and models above are obtained by training from scratch (random initialization), and the code is released [here](https://github.com/jiangtaoxie/MPN-COV-ConvNet/tree/master/examples/imagenet).\n  - The results will improve with warm initialization, for example, MPN-COV-AlexNet achieved top-1/top-5 error rates(%) 37.35/16.60 and MPN-COV-VGG-M achieved 33.44/13.61 when using 1-crop prediction.\n  - The two models, i.e., MPN-COV-ResNet-50 and MPN-COV-AlexNet, we released here are trained with the same settings,  slightly better than the models we reported in the ICCV paper.\n  - The results either 1-crop or 10-crop  are evaluated using our [code](https://github.com/jiangtaoxie/MPN-COV-ConvNet/tree/master/examples/evaluate), Note that the main difference from the code provided by MatConvNet is that we RESIZE an image using Matlab [imresize function](http://cn.mathworks.com/help/images/ref/imresize.html); the performance will decrease slightly if the resize function of MatConvNet is used.\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 26,
      "date": "Thu, 23 Dec 2021 01:45:28 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jiangtaoxie/MPN-COV/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "jiangtaoxie/MPN-COV",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/jiangtaoxie/MPN-COV/tree/master/doc/site/docs"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/jiangtaoxie/MPN-COV/master/utils/import-fcn.sh",
      "https://raw.githubusercontent.com/jiangtaoxie/MPN-COV/master/utils/import-ref-models.sh",
      "https://raw.githubusercontent.com/jiangtaoxie/MPN-COV/master/utils/import-googlenet.sh",
      "https://raw.githubusercontent.com/jiangtaoxie/MPN-COV/master/utils/preprocess-imagenet.sh",
      "https://raw.githubusercontent.com/jiangtaoxie/MPN-COV/master/utils/get-file.sh",
      "https://raw.githubusercontent.com/jiangtaoxie/MPN-COV/master/utils/import-resnet.sh",
      "https://raw.githubusercontent.com/jiangtaoxie/MPN-COV/master/utils/proto/get-protos.sh",
      "https://raw.githubusercontent.com/jiangtaoxie/MPN-COV/master/matlab/src/config/mex_CUDA_glnxa64.sh",
      "https://raw.githubusercontent.com/jiangtaoxie/MPN-COV/master/matlab/src/config/mex_CUDA_maci64.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. We package our programs and [demos](https://github.com/jiangtaoxie/MPN-COV-ConvNet/tree/master/examples/imagenet) in MatConvNet toolkit,you can download this [PACKAGE](https://github.com/jiangtaoxie/MPN-COV-ConvNet/archive/master.zip) directly, or in your Terminal type:\n\n```\n   >> git clone https://github.com/jiangtaoxie/MPN-COV\n\n```\n\n2. Then you can follow the tutorial of MatConvNet's [installation guide](http://www.vlfeat.org/matconvnet/install/) to complile, for example:\n\n```matlab\n   >> vl_compilenn('enableGpu', true, ...\n                   'cudaRoot', '/Developer/NVIDIA/CUDA-8.0', ...\n                   'cudaMethod', 'nvcc', ...\n                   'enableCudnn', true, ...\n                   'cudnnRoot', 'local/cudnn-rc4') ;\n\n```\n3. Currently, we use MatConvNet 1.0-beta22. For newer versions, please consult the MatConvNet [website](http://www.vlfeat.org/matconvnet).\n\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": " Network            |224x224<br />1-crop|224x224<br />10-crop|GoogleDrive|BaiduCloud\n ---|:---:|:---:|:---:|:---:\n MPN-COV-ResNet-50 |22.27/6.35         |21.16/5.58     |[186.8MB](https://drive.google.com/open?id=0B-bKYQs6Xic1TnZ5ZS1JRlVVZGM)|[186.8MB](https://pan.baidu.com/s/1c2fG1S8)\n MPN-COV-ResNet-101 |21.17/5.70        |19.71/5.01     |[270.7MB](https://drive.google.com/open?id=0B-bKYQs6Xic1bzVDN3EyaVZ4eGs)|[270.7MB](https://pan.baidu.com/s/1hsgonTq)\n MPN-COV-AlexNet |38.37/17.14          |34.97/14.60    |[567.0MB](https://drive.google.com/open?id=0B-bKYQs6Xic1ZDJBNllxSXFDamc)|[567.0MB](https://pan.baidu.com/s/1boUndMn)\n MPN-COV-VGG-M   |34.63/14.64          |31.81/12.52    |[581.6MB](https://drive.google.com/open?id=0B-bKYQs6Xic1SmJmQkRjV1NGUWs)|[581.6MB](https://pan.baidu.com/s/1o8QJmgM)\n MPN-COV-VGG-16  |26.55/8.94           |24.68/7.75     |[614.0MB](https://drive.google.com/open?id=0B-bKYQs6Xic1Rjl2VnlWbVNEUWM)|[614.0MB](https://pan.baidu.com/s/1c2csEsC)\n\n  - The results and models above are obtained by training from scratch (random initialization), and the code is released [here](https://github.com/jiangtaoxie/MPN-COV-ConvNet/tree/master/examples/imagenet).\n  - The results will improve with warm initialization, for example, MPN-COV-AlexNet achieved top-1/top-5 error rates(%) 37.35/16.60 and MPN-COV-VGG-M achieved 33.44/13.61 when using 1-crop prediction.\n  - The two models, i.e., MPN-COV-ResNet-50 and MPN-COV-AlexNet, we released here are trained with the same settings,  slightly better than the models we reported in the ICCV paper.\n  - The results either 1-crop or 10-crop  are evaluated using our [code](https://github.com/jiangtaoxie/MPN-COV-ConvNet/tree/master/examples/evaluate), Note that the main difference from the code provided by MatConvNet is that we RESIZE an image using Matlab [imresize function](http://cn.mathworks.com/help/images/ref/imresize.html); the performance will decrease slightly if the resize function of MatConvNet is used.\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "                              'name','mpn_cov_pool',... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "   name = 'mpn_cov_pool'; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "                                    {name, [name, '_aux_S'], [name, '_aux_V'],[name,'_aux_D']}); \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9151270764930737
      ],
      "excerpt": "        \u251c\u2500\u2500 src \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "                              'name','mpn_cov_pool',... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "   name = 'mpn_cov_pool'; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8488411244225242,
        0.8421074476017179,
        0.9073448360114489
      ],
      "excerpt": "                                    lastAdded.var, ... \n                                    {name, [name, '_aux_S'], [name, '_aux_V'],[name,'_aux_D']}); \n   lastAdded.var = name; \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jiangtaoxie/MPN-COV/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Cuda",
      "MATLAB",
      "C++",
      "Python",
      "Shell",
      "C",
      "M"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2017 jiangtaoxie and peihuali\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Is Second-order Information Helpful for Large-scale Visual Recognition?",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "MPN-COV",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "jiangtaoxie",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jiangtaoxie/MPN-COV/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 66,
      "date": "Thu, 23 Dec 2021 01:45:28 GMT"
    },
    "technique": "GitHub API"
  }
}