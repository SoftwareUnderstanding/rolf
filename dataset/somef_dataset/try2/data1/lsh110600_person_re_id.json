{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1904.07223",
      "https://arxiv.org/abs/1711.09349",
      "https://arxiv.org/abs/1711.10295",
      "https://arxiv.org/abs/1904.07223",
      "https://arxiv.org/abs/1711.09349",
      "https://arxiv.org/abs/1703.07737"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The following paper uses and reports the result of the baseline model. You may cite it in your paper.\n```\n@article{zheng2019joint,\n  title={Joint discriminative and generative learning for person re-identification},\n  author={Zheng, Zhedong and Yang, Xiaodong and Yu, Zhiding and Zheng, Liang and Yang, Yi and Kautz, Jan},\n  journal={IEEE Conference on Computer Vision and Pattern Recognition (CVPR)},\n  year={2019}\n}\n```\n\nThe following papers may be the first two to use the bottleneck baseline. You may cite them in your paper.\n```\n@article{DBLP:journals/corr/SunZDW17,\n  author    = {Yifan Sun and\n               Liang Zheng and\n               Weijian Deng and\n               Shengjin Wang},\n  title     = {SVDNet for Pedestrian Retrieval},\n  booktitle   = {ICCV},\n  year      = {2017},\n}\n\n@article{hermans2017defense,\n  title={In Defense of the Triplet Loss for Person Re-Identification},\n  author={Hermans, Alexander and Beyer, Lucas and Leibe, Bastian},\n  journal={arXiv preprint arXiv:1703.07737},\n  year={2017}\n}\n```\n\nBasic Model\n```\n@article{zheng2018discriminatively,\n  title={A discriminatively learned CNN embedding for person reidentification},\n  author={Zheng, Zhedong and Zheng, Liang and Yang, Yi},\n  journal={ACM Transactions on Multimedia Computing, Communications, and Applications (TOMM)},\n  volume={14},\n  number={1},\n  pages={13},\n  year={2018},\n  publisher={ACM}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{zheng2018discriminatively,\n  title={A discriminatively learned CNN embedding for person reidentification},\n  author={Zheng, Zhedong and Zheng, Liang and Yang, Yi},\n  journal={ACM Transactions on Multimedia Computing, Communications, and Applications (TOMM)},\n  volume={14},\n  number={1},\n  pages={13},\n  year={2018},\n  publisher={ACM}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{hermans2017defense,\n  title={In Defense of the Triplet Loss for Person Re-Identification},\n  author={Hermans, Alexander and Beyer, Lucas and Leibe, Bastian},\n  journal={arXiv preprint arXiv:1703.07737},\n  year={2017}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{DBLP:journals/corr/SunZDW17,\n  author    = {Yifan Sun and\n               Liang Zheng and\n               Weijian Deng and\n               Shengjin Wang},\n  title     = {SVDNet for Pedestrian Retrieval},\n  booktitle   = {ICCV},\n  year      = {2017},\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{zheng2019joint,\n  title={Joint discriminative and generative learning for person re-identification},\n  author={Zheng, Zhedong and Yang, Xiaodong and Yu, Zhiding and Zheng, Liang and Yang, Yi and Kautz, Jan},\n  journal={IEEE Conference on Computer Vision and Pattern Recognition (CVPR)},\n  year={2019}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "2stream Person re-ID  \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lsh110600/person_re_id",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-07-07T05:08:51Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-07-07T05:15:16Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9128969197448303
      ],
      "excerpt": "Tips for training with other datasets \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8055455732502326
      ],
      "excerpt": "- Float16 to save GPU memory based on apex \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8061940439843257,
        0.8721490872796789,
        0.8265085814971824
      ],
      "excerpt": "Here we provide hyperparameters and architectures, that were used to generate the result.  \nSome of them (i.e. learning rate) are far from optimal. Do not hesitate to change them and see the effect.  \nP.S. With similar structure, we arrived Rank@1=87.74% mAP=69.46% with Matconvnet. (batchsize=8, dropout=0.75)  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9803913668519916,
        0.9289883005480934,
        0.8878431830747604
      ],
      "excerpt": "11 June 2020 People live in the 3D world. We release one new person re-id code Person Re-identification in the 3D Space, which conduct representation learning in the 3D space. You are welcomed to check out it. \n30 April 2020 We have applied this code to the AICity Challenge 2020,  yielding the 1st Place Submission to the re-id track :red_car:. Check out here. \n01 March 2020 We release one new image retrieval dataset, called University-1652, for drone-view target localization and drone navigation :helicopter:. It has a similar setting with the person re-ID. You are welcomed to check out it. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9693745679032096
      ],
      "excerpt": "01 July 2019: My CVPR19 Paper is online. It is based on this baseline repo as teacher model to provide pseudo label for the generated images to train a better student model. You are welcomed to check out the opensource code at here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8285291397101184
      ],
      "excerpt": "What's new: Re-ranking is added to evaluation. The re-ranked result is about Rank@1=90.20% mAP=84.76%. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8497992345979094
      ],
      "excerpt": "What's new: I add some code to generate training curves. The figure will be saved into the model folder when training. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9302287581602335
      ],
      "excerpt": "--which_epoch select the i-th model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9274048119302095
      ],
      "excerpt": "For mAP calculation, you also can refer to the C++ code for Oxford Building. We use the triangle mAP calculation (consistent with the Market1501 original code). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9439104594494018
      ],
      "excerpt": "Notes the format of the camera id and the number of cameras. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "X_twice_person_re_id",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lsh110600/person_re_id/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 03:46:01 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lsh110600/person_re_id/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "lsh110600/person_re_id",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Download [Market1501 Dataset](http://www.liangzheng.com.cn/Project/project_reid.html) [[Google]](https://drive.google.com/file/d/0B8-rUzbwVRk0c054eEozWG9COHM/view) [[Baidu]](https://pan.baidu.com/s/1ntIi2Op)\n\nPreparation: Put the images with the same id in one folder. You may use \n```bash\npython prepare.py\n```\nRemember to change the dataset path to your own path.\n\nFuthermore, you also can test our code on [DukeMTMC-reID Dataset]( [GoogleDriver](https://drive.google.com/open?id=1jjE85dRCMOgRtvJ5RQV9-Afs-2_5dY3O) or ([BaiduYun](https://pan.baidu.com/s/1jS0XM7Var5nQGcbf9xUztw) password: bhbh)).\nOur baseline code is not such high on DukeMTMC-reID **Rank@1=64.23%, mAP=43.92%**. Hyperparameters are need to be tuned.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "- Install Pytorch from http://pytorch.org/\n- Install Torchvision from the source\n```\ngit clone https://github.com/pytorch/vision\ncd vision\npython setup.py install\n```\n- [Optinal] You may skip it. Install apex from the source\n```\ngit clone https://github.com/NVIDIA/apex.git\ncd apex\npython setup.py install --cuda_ext --cpp_ext\n```\nBecause pytorch and torchvision are ongoing projects.\n\nHere we noted that our code is tested based on Pytorch 0.3.0/0.4.0/0.5.0/1.0.0 and Torchvision 0.2.0/0.2.1 .\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.920992687207367
      ],
      "excerpt": "- Float16 to save GPU memory based on apex \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9205742969444275
      ],
      "excerpt": "What's new: FP16 has been added. It can be used by simply added --fp16. You need to install apex and update your pytorch to 1.0.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8352188776989673
      ],
      "excerpt": "| [DenseNet-121] | 90.17% | 74.02% | python train.py --name ft_net_dense --use_dense --train_all | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9427820148741699
      ],
      "excerpt": "--gpu_ids which gpu to run. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9427820148741699
      ],
      "excerpt": "--gpu_ids which gpu to run. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8194842505323139
      ],
      "excerpt": "Dataset Preparation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py --fp16 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785,
        0.9515752551715031,
        0.9333574343066754
      ],
      "excerpt": "python train.py \npython test.py \npython demo.py --query_index 777 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785,
        0.8484693396717187,
        0.9246227682586091
      ],
      "excerpt": "python train.py \npython test.py --multi \npython evaluate_gpu.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.915295314721357,
        0.9499161596653152
      ],
      "excerpt": "python train.py --PCB --batchsize 64 --name PCB-64 \npython test.py --PCB --name PCB-64 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8447580893318155
      ],
      "excerpt": "What's new: I add some code to generate training curves. The figure will be saved into the model folder when training. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9184817193922838,
        0.9502883860429022,
        0.9419495422253252,
        0.9037758835109134,
        0.9230115967333467
      ],
      "excerpt": "| [ResNet-50] | 88.84% | 71.59% |  python train.py --train_all | \n| [DenseNet-121] | 90.17% | 74.02% | python train.py --name ft_net_dense --use_dense --train_all | \n| [PCB] | 92.64% | 77.47% | python train.py --name PCB --PCB --train_all --lr 0.02 | \n| [ResNet-50 (fp16)] | 88.03% | 71.40% | python train.py --name fp16 --fp16 --train_all | \n| [ResNet-50 (all tricks)] | 91.83% | 78.32% | python train.py --warm_epoch 5 --stride 1 --erasing_p 0.5 --batchsize 8 --lr 0.02 --name warm5_s1_b8_lr2_p0.5 | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8081624365215927
      ],
      "excerpt": "Train a model by \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9293006804235666
      ],
      "excerpt": "python train.py --gpu_ids 0 --name ft_ResNet50 --train_all --batchsize 32  --data_dir your_data_path \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8420446505342062
      ],
      "excerpt": "--name the name of model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.817700032297289
      ],
      "excerpt": "--train_all using all images to train.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9293006804235666
      ],
      "excerpt": "python train.py --gpu_ids 0 --name ft_ResNet50 --train_all --batchsize 32  --data_dir your_data_path --erasing_p 0.5 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9299984643403167
      ],
      "excerpt": "python test.py --gpu_ids 0 --name ft_ResNet50 --test_dir your_data_path  --batchsize 32 --which_epoch 59 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8645259509180295
      ],
      "excerpt": "--name the dir name of trained model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8708148446064828
      ],
      "excerpt": "python evaluate.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python evaluate_rerank.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8264859728702388
      ],
      "excerpt": "For some dataset, e.g., MSMT17, there are more than 10 cameras. You need to modify the prepare.py and test.py to read the double-digit camera ID. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lsh110600/person_re_id/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 Zhedong Zheng\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Table of contents",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "person_re_id",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "lsh110600",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lsh110600/person_re_id/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Python 3.6\n- GPU Memory >= 6G\n- Numpy\n- Pytorch 0.3+\n- [Optional] apex (for float16) \n- [Optional] [pretrainedmodels](https://github.com/Cadene/pretrained-models.pytorch)\n\n**(Some reports found that updating numpy can arrive the right accuracy. If you only get 50~80 Top1 Accuracy, just try it.)**\nWe have successfully run the code based on numpy 1.12.1 and 1.13.1 .\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 03:46:01 GMT"
    },
    "technique": "GitHub API"
  }
}