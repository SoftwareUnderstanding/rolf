{
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "YAML 1.2\nMetadata for citation of this software according to the CFF format (https://citation-file-format.github.io/)\n\n\ntitle: \"MONAI: Medical Open Network for AI\"\nabstract: \"AI Toolkit for Healthcare Imaging\"\nauthors:\n  - name: \"MONAI Consortium\"\ndate-released: 2020-03-28\nversion: \"0.6.0\"\ndoi: \"10.5281/zenodo.4323058\"\nlicense: \"Apache-2.0\"\nrepository-code: \"https://github.com/Project-MONAI/MONAI\"\ncff-version: \"1.1.0\"\nmessage: \"If you use this software, please cite it using these metadata.\"\n...",
      "technique": "File Exploration"
    },
    {
      "confidence": [
        0.8550956278676971
      ],
      "excerpt": "Ask and answer questions over on MONAI's GitHub Discussions tab. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.844592116576727
      ],
      "excerpt": "Code: https://github.com/Project-MONAI/MONAI \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8466432032523193
      ],
      "excerpt": "Wiki: https://github.com/Project-MONAI/MONAI/wiki \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.854836641318266
      ],
      "excerpt": "Weekly previews: https://pypi.org/project/monai-weekly/ \n",
      "technique": "Supervised classification"
    }
  ],
  "codeOfConduct": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://raw.githubusercontent.com/Project-MONAI/MONAI/dev/CODE_OF_CONDUCT.md",
    "technique": "File Exploration"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Project-MONAI/MONAI",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Introduction\nThe contribution process\nPreparing pull requests\nChecking the coding style\nUnit testing\nBuilding the documentation\nAutomatic code formatting\nSigning your work\nUtility functions\nBackwards compatibility\n\n\nSubmitting pull requests\nThe code reviewing process (for the maintainers)\nReviewing pull requests\nAdmin tasks (for the maintainers)\nReleasing a new version\n\nIntroduction\nWelcome to Project MONAI! We're excited you're here and want to contribute. This documentation is intended for individuals and institutions interested in contributing to MONAI. MONAI is an open-source project and, as such, its success relies on its community of contributors willing to keep improving it. Your contribution will be a valued addition to the code base; we simply ask that you read this page and understand our contribution process, whether you are a seasoned open-source contributor or whether you are a first-time contributor.\nCommunicate with us\nWe are happy to talk with you about your needs for MONAI and your ideas for contributing to the project. One way to do this is to create an issue discussing your thoughts. It might be that a very similar feature is under development or already exists, so an issue is a great starting point. If you are looking for an issue to resolve that will help Project MONAI, see the good first issue and Contribution wanted labels.\nDoes it belong in PyTorch instead of MONAI?\nMONAI is part of PyTorch Ecosystem, and mainly based on the PyTorch and Numpy libraries. These libraries implement what we consider to be best practice for general scientific computing and deep learning functionality. MONAI builds on these with a strong focus on medical applications. As such, it is a good idea to consider whether your functionality is medical-application specific or not. General deep learning functionality may be better off in PyTorch; you can find their contribution guidelines here.\nThe contribution process\nPull request early\nWe encourage you to create pull requests early. It helps us track the contributions under development, whether they are ready to be merged or not. Change your pull request's title, to begin with [WIP] and/or create a draft pull request until it is ready for formal review.\nPlease note that, as per PyTorch, MONAI uses American English spelling. This means classes and variables should be: normalize, visualize, colo~~u~~r, etc.\nPreparing pull requests\nTo ensure the code quality, MONAI relies on several linting tools (flake8 and its plugins, black, isort),\nstatic type analysis tools (mypy, pytype), as well as a set of unit/integration tests.\nThis section highlights all the necessary preparation steps required before sending a pull request.\nTo collaborate efficiently, please read through this section and follow them.\n\nChecking the coding style\nUnit testing\nBuilding documentation\nSigning your work\n\nChecking the coding style\nCoding style is checked and enforced by flake8, black, and isort, using a flake8 configuration similar to PyTorch's.\nBefore submitting a pull request, we recommend that all linting should pass, by running the following command locally:\n```bash\noptionally update the dependencies and dev tools\npython -m pip install -U pip\npython -m pip install -U -r requirements-dev.txt\nrun the linting and type checking tools\n./runtests.sh --codeformat\ntry to fix the coding style errors automatically\n./runtests.sh --autofix\n```\nLicense information: all source code files should start with this paragraph:\n```\nCopyright (c) MONAI Consortium\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\nhttp://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\nExporting modules\nIf you intend for any variables/functions/classes to be available outside of the file with the edited functionality, then:\n\nCreate or append to the __all__ variable (in the file in which functionality has been added), and\nAdd to the __init__.py file.\n\nUnit testing\nMONAI tests are located under tests/.\n\nThe unit test's file name currently follows test_[module_name].py or test_[module_name]_dist.py.\nThe test_[module_name]_dist.py subset of unit tests requires a distributed environment to verify the module with distributed GPU-based computation.\nThe integration test's file name follows test_integration_[workflow_name].py.\n\nA bash script (runtests.sh) is provided to run all tests locally.\nPlease run ./runtests.sh -h to see all options.\nTo run a particular test, for example tests/test_dice_loss.py:\npython -m tests.test_dice_loss\nBefore submitting a pull request, we recommend that all linting and unit tests\nshould pass, by running the following command locally:\nbash\n./runtests.sh -f -u --net --coverage\nor (for new features that would not break existing functionality):\nbash\n./runtests.sh --quick --unittests\nIt is recommended that the new test test_[module_name].py is constructed by using only\npython 3.7+ build-in functions, torch, numpy, coverage (for reporting code coverages) and parameterized (for organising test cases) packages.\nIf it requires any other external packages, please make sure:\n- the packages are listed in requirements-dev.txt\n- the new test test_[module_name].py is added to the exclude_cases in ./tests/min_tests.py so that\nthe minimal CI runner will not execute it.\nIf it's not tested, it's broken\nAll new functionality should be accompanied by an appropriate set of tests.\nMONAI functionality has plenty of unit tests from which you can draw inspiration,\nand you can reach out to us if you are unsure of how to proceed with testing.\nMONAI's code coverage report is available at CodeCov.\nBuilding the documentation\nMONAI's documentation is located at docs/.\n```bash\ninstall the doc-related dependencies\npip install --upgrade pip\npip install -r docs/requirements.txt\nbuild the docs\ncd docs/\nmake html\n```\nThe above commands build html documentation, they are used to automatically generate https://docs.monai.io.\nBefore submitting a pull request, it is recommended to:\n- edit the relevant .rst files in docs/source accordingly.\n- build html documentation locally\n- check the auto-generated documentation (by browsing ./docs/build/html/index.html with a web browser)\n- type make clean in docs/ folder to remove the current build files.\nPlease type make help in docs/ folder for all supported format options.\nAutomatic code formatting\nMONAI provides support of automatic Python code formatting via a customised GitHub action.\nThis makes the project's Python coding style consistent and reduces maintenance burdens.\nCommenting a pull request with /black triggers the formatting action based on psf/Black (this is implemented with slash command dispatch).\nSteps for the formatting process:\n- After submitting a pull request or push to an existing pull request,\nmake a comment to the pull request to trigger the formatting action.\nThe first line of the comment must be /black so that it will be interpreted by the comment parser.\n- [Auto] The GitHub action tries to format all Python files (using psf/Black) in the branch and makes a commit under the name \"MONAI bot\" if there's code change. The actual formatting action is deployed at project-monai/monai-code-formatter.\n- [Auto] After the formatting commit, the GitHub action adds an emoji to the comment that triggered the process.\n- Repeat the above steps if necessary.\nSigning your work\nMONAI enforces the Developer Certificate of Origin (DCO) on all pull requests.\nAll commit messages should contain the Signed-off-by line with an email address. The GitHub DCO app is deployed on MONAI. The pull request's status will be failed if commits do not contain a valid Signed-off-by line.\nGit has a -s (or --signoff) command-line option to append this automatically to your commit message:\nbash\ngit commit -s -m 'a new commit'\nThe commit message will be:\n```\n    a new commit\nSigned-off-by: Your Name &lt;yourname@example.org&gt;\n\n```\nFull text of the DCO:\n```\nDeveloper Certificate of Origin\nVersion 1.1\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\nDeveloper's Certificate of Origin 1.1\nBy making a contribution to this project, I certify that:\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\nUtility functions\nMONAI provides a set of generic utility functions and frequently used routines.\nThese are located in monai/utils and in the module folders such as networks/utils.py.\nUsers are encouraged to use these common routines to improve code readability and reduce the code maintenance burdens.\nNotably,\n- monai.module.export decorator can make the module name shorter when importing,\nfor example, import monai.transforms.Spacing is the equivalent of monai.transforms.spatial.array.Spacing if\nclass Spacing defined in file monai/transforms/spatial/array.py is decorated with @export(\"monai.transforms\").\nFor string definition, f-string is recommended to use over %-print and format-print. So please try to use f-string if you need to define any string object.\nBackwards compatibility\nMONAI is currently under active development, and with major version zero (following the Semantic Versioning).\nThe backwards compatibility of the API is not always guaranteed at this initial development stage.\nHowever, utility functions are provided in the monai.utils.deprecated modules to help users migrate to the new API.\nThe use of these functions is encouraged.\nSubmitting pull requests\nAll code changes to the dev branch must be done via pull requests.\n1. Create a new ticket or take a known ticket from the issue list.\n1. Check if there's already a branch dedicated to the task.\n1. If the task has not been taken, create a new branch in your fork\nof the codebase named [ticket_id]-[task_name].\nFor example, branch name 19-ci-pipeline-setup corresponds to issue #19.\nIdeally, the new branch should be based on the latest dev branch.\n1. Make changes to the branch (use detailed commit messages if possible).\n1. Make sure that new tests cover the changes and the changed codebase passes all tests locally.\n1. Create a new pull request from the task branch to the dev branch, with detailed descriptions of the purpose of this pull request.\n1. Check the CI/CD status of the pull request, make sure all CI/CD tests passed.\n1. Wait for reviews; if there are reviews, make point-to-point responses, make further code changes if needed.\n1. If there are conflicts between the pull request branch and the dev branch, pull the changes from the dev and resolve the conflicts locally.\n1. Reviewer and contributor may have discussions back and forth until all comments addressed.\n1. Wait for the pull request to be merged.\nThe code reviewing process\nReviewing pull requests\nAll code review comments should be specific, constructive, and actionable.\n1. Check the CI/CD status of the pull request, make sure all CI/CD tests passed before reviewing (contact the branch owner if needed).\n1. Read carefully the descriptions of the pull request and the files changed, write comments if needed.\n1. Make in-line comments to specific code segments, request for changes if needed.\n1. Review any further code changes until all comments addressed by the contributors.\n1. Comment to trigger /black and/or /integration-test for optional auto code formatting and integration tests.\n1. [Maintainers] Review the changes and comment /build to trigger internal full tests.\n1. Merge the pull request to the dev branch.\n1. Close the corresponding task ticket on the issue list.\nAdmin tasks\nRelease a new version\nThe dev branch's HEAD always corresponds to MONAI docker image's latest tag: projectmonai/monai:latest.\nThe main branch's HEAD always corresponds to the latest MONAI milestone release.\nWhen major features are ready for a milestone, to prepare for a new release:\n- Prepare a release note and release checklist.\n- Check out or cherry-pick a new branch releasing/[version number] locally from the dev branch and push to the codebase.\n- Create a release candidate tag, for example, git tag -a 0.1.0rc1 -m \"release candidate 1 of version 0.1.0\".\n- Push the tag to the codebase, for example, git push origin 0.1.0rc1.\n  This step will trigger package building and testing.\n  The resultant packages are automatically uploaded to\n  TestPyPI.  The packages are also available for downloading as\n  repository's artifacts (e.g. the file at https://github.com/Project-MONAI/MONAI/actions/runs/66570977).\n- Check the release test at TestPyPI, download the artifacts when the CI finishes.\n- Optionally run the cron testing jobs on releasing/[version number].\n- Rebase releasing/[version number] to main, make sure all the test pipelines succeed.\n- Once the release candidate is verified, tag and push a milestone, for example, git push origin 0.1.0.\n  The tag must be with the latest commit of releasing/[version number].\n- Upload the packages to PyPI.\n  This could be done manually by twine upload dist/*, given the artifacts are unzipped to the folder dist/.\n- Merge releasing/[version number] to dev, this step must make sure that the tagging commit unchanged on dev.\n- Publish the release note.\nNote that the release should be tagged with a PEP440 compliant\nsemantic versioning number.\nIf any error occurs during the release process, first check out a new hotfix branch from the releasing/[version number],\nthen make PRs to the releasing/[version number] to fix the bugs via the regular contribution procedure.\nIf any error occurs after the release process, first check out a new hotfix branch from the main branch,\nmake a minor version release following the semantic versioning, for example, releasing/0.1.1.\nMake sure the releasing/0.1.1 is merged back into both dev and main and all the test pipelines succeed.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-10-11T16:41:38Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-23T15:10:25Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8938474996163315,
        0.9667864930634353
      ],
      "excerpt": "The codebase is currently under active development. \nPlease see the technical highlights and What's New of the current milestone release. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8235045440302943,
        0.8666947992053319
      ],
      "excerpt": "compositional & portable APIs for ease of integration in existing workflows; \ndomain-specific implementations for networks, losses, evaluation metrics and more; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9887639509274543,
        0.8560467410828846
      ],
      "excerpt": "For guidance on making a contribution to MONAI, see the contributing guidelines. \nJoin the conversation on Twitter @ProjectMONAI or join our Slack channel. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "AI Toolkit for Healthcare Imaging",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Project-MONAI/MONAI/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 494,
      "date": "Thu, 23 Dec 2021 17:49:40 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Project-MONAI/MONAI/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Project-MONAI/MONAI",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Project-MONAI/MONAI/dev/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/Project-MONAI/MONAI/tree/dev/docs"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Project-MONAI/MONAI/dev/runtests.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To install [the current release](https://pypi.org/project/monai/), you can simply run:\n\n```bash\npip install monai\n```\n\nFor other installation methods (using the default GitHub branch, using Docker, etc.), please refer to [the installation guide](https://docs.monai.io/en/latest/installation.html).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9350240905332978,
        0.8402705776263143
      ],
      "excerpt": "PyPI package: https://pypi.org/project/monai/ \nWeekly previews: https://pypi.org/project/monai-weekly/ \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Project-MONAI/MONAI/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "C++",
      "Cuda",
      "Shell",
      "C",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Features",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "MONAI",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Project-MONAI",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Project-MONAI/MONAI/blob/dev/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "wyli",
        "body": "### Added\r\n* Overview of [new features in v0.8](docs/source/whatsnew_0_8.md)\r\n* Network modules for differentiable neural network topology search (DiNTS)\r\n* Multiple Instance Learning transforms and models for digital pathology WSI analysis\r\n* Vision transformers for self-supervised representation learning\r\n* Contrastive loss for self-supervised learning\r\n* Finalized major improvements of 200+ components in `monai.transforms` to support input and backend in PyTorch and NumPy\r\n* Initial registration module benchmarking with `GlobalMutualInformationLoss` as an example\r\n* `monai.transforms` documentation with visual examples and the utility functions\r\n* Event handler for `MLfLow` integration\r\n* Enhanced data visualization functions including `blend_images` and `matshow3d`\r\n* `RandGridDistortion` and `SmoothField` in `monai.transforms`\r\n* Support of randomized shuffle buffer in iterable datasets\r\n* Performance review and enhancements for data type casting\r\n* Cumulative averaging API with distributed environment support\r\n* Module utility functions including `require_pkg` and `pytorch_after`\r\n* Various usability enhancements such as `allow_smaller` when sampling ROI and `wrap_sequence` when casting object types\r\n* `tifffile` support in `WSIReader`\r\n* Regression tests for the fast training workflows\r\n* Various tutorials and demos including educational contents at [MONAI Bootcamp 2021](https://github.com/Project-MONAI/MONAIBootcamp2021)\r\n### Changed\r\n* Base Docker image upgraded to `nvcr.io/nvidia/pytorch:21.10-py3` from `nvcr.io/nvidia/pytorch:21.08-py3`\r\n* Decoupled `TraceKeys` and `TraceableTransform` APIs from `InvertibleTransform`\r\n* Skipping affine-based resampling when `resample=False` in `NiftiSaver`\r\n* Deprecated `threshold_values: bool` and `num_classes: int` in `AsDiscrete`\r\n* Enhanced `apply_filter` for spatially 1D, 2D and 3D inputs with non-separable kernels\r\n* Logging with `logging` in downloading and model archives in `monai.apps`\r\n* API documentation site now defaults to `stable` instead of `latest`\r\n* `skip-magic-trailing-comma` in coding style enforcements\r\n* Pre-merge CI pipelines now include unit tests with Nvidia Ampere architecture\r\n### Removed\r\n* Support for PyTorch 1.5\r\n* The deprecated `DynUnetV1` and the related network blocks\r\n* GitHub self-hosted CI/CD pipelines for package releases\r\n### Fixed\r\n* Support of path-like objects as file path inputs in most modules\r\n* Issue of `decollate_batch` for dictionary of empty lists\r\n* Typos in documentation and code examples in various modules\r\n* Issue of no available keys when `allow_missing_keys=True` for the `MapTransform`\r\n* Issue of redundant computation when normalization factors are 0.0 and 1.0 in `ScaleIntensity`\r\n* Incorrect reports of registered readers in `ImageReader`\r\n* Wrong numbering of iterations in `StatsHandler`\r\n* Naming conflicts in network modules and aliases\r\n* Incorrect output shape when `reduction=\"none\"` in `FocalLoss`\r\n* Various usability issues reported by users",
        "dateCreated": "2021-11-25T18:22:16Z",
        "datePublished": "2021-11-25T21:19:49Z",
        "html_url": "https://github.com/Project-MONAI/MONAI/releases/tag/0.8.0",
        "name": "0.8.0",
        "tag_name": "0.8.0",
        "tarball_url": "https://api.github.com/repos/Project-MONAI/MONAI/tarball/0.8.0",
        "url": "https://api.github.com/repos/Project-MONAI/MONAI/releases/54054300",
        "zipball_url": "https://api.github.com/repos/Project-MONAI/MONAI/zipball/0.8.0"
      },
      {
        "authorType": "User",
        "author_name": "wyli",
        "body": "### Added\r\n* Overview of [new features in v0.7](https://docs.monai.io/en/latest/whatsnew_0_7.html)\r\n* Initial phase of major usability improvements in `monai.transforms` to support input and backend in PyTorch and NumPy\r\n* Performance enhancements, with [profiling and tuning guides](https://github.com/Project-MONAI/tutorials/blob/master/acceleration/fast_model_training_guide.md) for typical use cases\r\n* Reproducing [training modules and workflows](https://github.com/Project-MONAI/tutorials/tree/master/kaggle/RANZCR/4th_place_solution) of state-of-the-art Kaggle competition solutions\r\n* 24 new transforms, including\r\n  * `OneOf` meta transform\r\n  * DeepEdit guidance signal transforms for interactive segmentation\r\n  * Transforms for self-supervised pre-training\r\n  * Integration of [NVIDIA Tools Extension](https://developer.nvidia.com/blog/nvidia-tools-extension-api-nvtx-annotation-tool-for-profiling-code-in-python-and-c-c/) (NVTX)\r\n  * Integration of [cuCIM](https://github.com/rapidsai/cucim)\r\n  * Stain normalization and contextual grid for digital pathology\r\n* `Transchex` network for vision-language transformers for chest X-ray analysis\r\n* `DatasetSummary` utility in `monai.data`\r\n* `WarmupCosineSchedule`\r\n* Deprecation warnings and documentation support for better backwards compatibility\r\n* Padding with additional `kwargs` and different backend API\r\n* Additional options such as `dropout` and `norm` in various networks and their submodules\r\n\r\n### Changed\r\n* Base Docker image upgraded to `nvcr.io/nvidia/pytorch:21.08-py3` from `nvcr.io/nvidia/pytorch:21.06-py3`\r\n* Deprecated input argument `n_classes`, in favor of `num_classes`\r\n* Deprecated input argument `dimensions` and `ndims`, in favor of `spatial_dims`\r\n* Updated the Sphinx-based documentation theme for better readability\r\n* `NdarrayTensor` type is replaced by `NdarrayOrTensor` for simpler annotations\r\n* Self-attention-based network blocks now support both 2D and 3D inputs\r\n\r\n### Removed\r\n* The deprecated `TransformInverter`, in favor of `monai.transforms.InvertD`\r\n* GitHub self-hosted CI/CD pipelines for nightly and post-merge tests\r\n* `monai.handlers.utils.evenly_divisible_all_gather`\r\n* `monai.handlers.utils.string_list_all_gather`\r\n\r\n### Fixed\r\n* A Multi-thread cache writing issue in `LMDBDataset`\r\n* Output shape convention inconsistencies of the image readers\r\n* Output directory and file name flexibility issue for `NiftiSaver`, `PNGSaver`\r\n* Requirement of the `label` field in test-time augmentation\r\n* Input argument flexibility issues for  `ThreadDataLoader`\r\n* Decoupled `Dice` and `CrossEntropy` intermediate results in `DiceCELoss`\r\n* Improved documentation, code examples, and warning messages in various modules\r\n* Various usability issues reported by users",
        "dateCreated": "2021-09-24T00:06:26Z",
        "datePublished": "2021-09-24T01:21:01Z",
        "html_url": "https://github.com/Project-MONAI/MONAI/releases/tag/0.7.0",
        "name": "0.7.0",
        "tag_name": "0.7.0",
        "tarball_url": "https://api.github.com/repos/Project-MONAI/MONAI/tarball/0.7.0",
        "url": "https://api.github.com/repos/Project-MONAI/MONAI/releases/49996702",
        "zipball_url": "https://api.github.com/repos/Project-MONAI/MONAI/zipball/0.7.0"
      },
      {
        "authorType": "User",
        "author_name": "wyli",
        "body": "### Added\r\n* Overview document for [feature highlights in v0.6](https://docs.monai.io/en/latest/whatsnew_0_6.html)\r\n* 10 new transforms, a masked loss wrapper, and a `NetAdapter` for transfer learning\r\n* APIs to load networks and pre-trained weights from Clara Train Medical Model ARchives (MMARs)\r\n* Base metric and cumulative metric APIs, 4 new regression metrics\r\n* Initial CSV dataset support\r\n* Decollating mini-batch as the default first postprocessing step\r\n* Initial backward compatibility support via `monai.utils.deprecated`\r\n* Attention-based vision modules and `UNETR` for segmentation\r\n* Generic module loaders and Gaussian mixture models using the PyTorch JIT compilation\r\n* Inverse of image patch sampling transforms\r\n* Network block utilities `get_[norm, act, dropout, pool]_layer`\r\n* `unpack_items` mode for `apply_transform` and `Compose`\r\n* New event `INNER_ITERATION_STARTED` in the deepgrow interactive workflow\r\n* `set_data` API for cache-based datasets to dynamically update the dataset content\r\n* Fully compatible with PyTorch 1.9\r\n* `--disttests` and `--min` options for `runtests.sh`\r\n* Initial support of pre-merge tests with Nvidia Blossom system\r\n### Changed\r\n* Base Docker image upgraded to `nvcr.io/nvidia/pytorch:21.06-py3` from\r\n  `nvcr.io/nvidia/pytorch:21.04-py3`\r\n* Optionally depend on PyTorch-Ignite v0.4.5 instead of v0.4.4\r\n* Unified the demo, tutorial, testing data to the project shared drive, and\r\n  `Project-MONAI/MONAI-extra-test-data`\r\n* Unified the terms: `post_transform` is renamed to `postprocessing`, `pre_transform` is renamed to `preprocessing`\r\n* Unified the postprocessing transforms and event handlers to accept the \"channel-first\" data format\r\n* `evenly_divisible_all_gather` and `string_list_all_gather` moved to `monai.utils.dist`\r\n### Removed\r\n* Support of 'batched' input for postprocessing transforms and event handlers\r\n* `TorchVisionFullyConvModel`\r\n* `set_visible_devices` utility function\r\n* `SegmentationSaver` and `TransformsInverter` handlers\r\n### Fixed\r\n* Issue of handling big-endian image headers\r\n* Multi-thread issue for non-random transforms in the cache-based datasets\r\n* Persistent dataset issue when multiple processes sharing a non-exist cache location\r\n* Typing issue with Numpy 1.21.0\r\n* Loading checkpoint with both `model` and `optmizier` using `CheckpointLoader` when `strict_shape=False`\r\n* `SplitChannel` has different behaviour depending on numpy/torch inputs\r\n* Transform pickling issue caused by the Lambda functions\r\n* Issue of filtering by name in `generate_param_groups`\r\n* Inconsistencies in the return value types of `class_activation_maps`\r\n* Various docstring typos\r\n* Various usability enhancements in `monai.transforms`\r\n",
        "dateCreated": "2021-07-08T17:52:13Z",
        "datePublished": "2021-07-08T23:37:30Z",
        "html_url": "https://github.com/Project-MONAI/MONAI/releases/tag/0.6.0",
        "name": "0.6.0",
        "tag_name": "0.6.0",
        "tarball_url": "https://api.github.com/repos/Project-MONAI/MONAI/tarball/0.6.0",
        "url": "https://api.github.com/repos/Project-MONAI/MONAI/releases/45903843",
        "zipball_url": "https://api.github.com/repos/Project-MONAI/MONAI/zipball/0.6.0"
      },
      {
        "authorType": "User",
        "author_name": "wyli",
        "body": "### Changed\r\n* Project default branch renamed to `dev` from `master`\r\n* Base Docker image upgraded to `nvcr.io/nvidia/pytorch:21.02-py3` from `nvcr.io/nvidia/pytorch:21.04-py3`\r\n* Enhanced type checks for the `iteration_metric` handler\r\n* Enhanced `PersistentDataset` to use `tempfile` during caching computation\r\n* Enhanced various info/error messages\r\n* Enhanced performance of `RandAffine`\r\n* Enhanced performance of `SmartCacheDataset`\r\n* Optionally requires `cucim` when the platform is `Linux`\r\n* Default `device` of `TestTimeAugmentation` changed to `cpu`\r\n\r\n### Fixed\r\n* Download utilities now provide better default parameters\r\n* Duplicated `key_transforms` in the patch-based transforms\r\n* A multi-GPU issue in `ClassificationSaver`\r\n* A default `meta_data` issue in `SpacingD`\r\n* Dataset caching issue with the persistent data loader workers\r\n* A memory issue in `permutohedral_cuda`\r\n* Dictionary key issue in `CopyItemsd`\r\n* `box_start` and `box_end` parameters for deepgrow `SpatialCropForegroundd`\r\n* Tissue mask array transpose issue in `MaskedInferenceWSIDataset`\r\n* Various type hint errors\r\n* Various docstring typos\r\n\r\n### Added\r\n* Support of `to_tensor` and `device` arguments for `TransformInverter`\r\n* Slicing options with SpatialCrop\r\n* Class name alias for the networks for backward compatibility\r\n* `k_divisible` option for CropForeground\r\n* `map_items` option for `Compose`\r\n* Warnings of `inf` and `nan` for surface distance computation\r\n* A `print_log` flag to the image savers\r\n* Basic testing pipelines for Python 3.9",
        "dateCreated": "2021-06-01T14:48:15Z",
        "datePublished": "2021-06-01T20:50:14Z",
        "html_url": "https://github.com/Project-MONAI/MONAI/releases/tag/0.5.3",
        "name": "0.5.3",
        "tag_name": "0.5.3",
        "tarball_url": "https://api.github.com/repos/Project-MONAI/MONAI/tarball/0.5.3",
        "url": "https://api.github.com/repos/Project-MONAI/MONAI/releases/43932272",
        "zipball_url": "https://api.github.com/repos/Project-MONAI/MONAI/zipball/0.5.3"
      },
      {
        "authorType": "User",
        "author_name": "wyli",
        "body": "### Added\r\n* Overview document for [feature highlights in v0.5.0](https://github.com/Project-MONAI/MONAI/blob/master/docs/source/highlights.md)\r\n* Invertible spatial transforms\r\n  * `InvertibleTransform` base APIs\r\n  * Batch inverse and decollating APIs\r\n  * Inverse of `Compose`\r\n  * Batch inverse event handling\r\n  * Test-time augmentation as an application\r\n* Initial support of learning-based image registration:\r\n  * Bending energy, LNCC, and global mutual information loss\r\n  * Fully convolutional architectures\r\n  * Dense displacement field, dense velocity field computation\r\n  * Warping with high-order interpolation with C++/CUDA implementations\r\n* Deepgrow modules for interactive segmentation:\r\n  * Workflows with simulations of clicks\r\n  * Distance-based transforms for guidance signals\r\n* Digital pathology support:\r\n  * Efficient whole slide imaging IO and sampling with Nvidia cuCIM and SmartCache\r\n  * FROC measurements for lesion\r\n  * Probabilistic post-processing for lesion detection\r\n  * TorchVision classification model adaptor for fully convolutional analysis\r\n* 12 new transforms, grid patch dataset, `ThreadDataLoader`, EfficientNets B0-B7\r\n* 4 iteration events for the engine for finer control of workflows\r\n* New C++/CUDA extensions:\r\n  * Conditional random field\r\n  * Fast bilateral filtering using the permutohedral lattice\r\n* Metrics summary reporting and saving APIs\r\n* DiceCELoss, DiceFocalLoss, a multi-scale wrapper for segmentation loss computation\r\n* Data loading utilities\uff1a\r\n  * `decollate_batch`\r\n  * `PadListDataCollate` with inverse support\r\n* Support of slicing syntax for `Dataset`\r\n* Initial Torchscript support for the loss modules\r\n* Learning rate finder\r\n* Allow for missing keys in the dictionary-based transforms\r\n* Support of checkpoint loading for transfer learning\r\n* Various summary and plotting utilities for Jupyter notebooks\r\n* Contributor Covenant Code of Conduct\r\n* Major CI/CD enhancements covering the tutorial repository\r\n* Fully compatible with PyTorch 1.8\r\n* Initial nightly CI/CD pipelines using Nvidia Blossom Infrastructure\r\n\r\n### Changed\r\n* Enhanced `list_data_collate` error handling\r\n* Unified iteration metric APIs\r\n* `densenet*` extensions are renamed to `DenseNet*`\r\n* `se_res*` network extensions are renamed to `SERes*`\r\n* Transform base APIs are rearranged into `compose`, `inverse`, and `transform`\r\n* `_do_transform` flag for the random augmentations is unified via `RandomizableTransform`\r\n* Decoupled post-processing steps, e.g. `softmax`, `to_onehot_y`, from the metrics computations\r\n* Moved the distributed samplers to `monai.data.samplers` from `monai.data.utils`\r\n* Engine's data loaders now accept generic iterables as input\r\n* Workflows now accept additional custom events and state properties\r\n* Various type hints according to Numpy 1.20\r\n* Refactored testing utility `runtests.sh` to have `--unittest` and `--net` integration tests options\r\n* Base Docker image upgraded to `nvcr.io/nvidia/pytorch:21.02-py3` from `nvcr.io/nvidia/pytorch:20.10-py3`\r\n* Docker images are now built with self-hosted environments\r\n* Primary contact email updated to `monai.contact@gmail.com`\r\n* Now using GitHub Discussions as the primary communication forum\r\n\r\n### Removed\r\n* Compatibility tests for PyTorch 1.5.x\r\n* Format specific loaders, e.g. `LoadNifti`, `NiftiDataset`\r\n* Assert statements from non-test files\r\n* `from module import *` statements, addressed flake8 F403\r\n\r\n### Fixed\r\n* Uses American English spelling for code, as per PyTorch\r\n* Code coverage now takes multiprocessing runs into account\r\n* SmartCache with initial shuffling\r\n* `ConvertToMultiChannelBasedOnBratsClasses` now supports channel-first inputs\r\n* Checkpoint handler to save with non-root permissions\r\n* Fixed an issue for exiting the distributed unit tests\r\n* Unified `DynUNet` to have single tensor output w/o deep supervision\r\n* `SegmentationSaver` now supports user-specified data types and a `squeeze_end_dims` flag\r\n* Fixed `*Saver` event handlers output filenames with a `data_root_dir` option\r\n* Load image functions now ensure little-endian\r\n* Fixed the test runner to support regex-based test case matching\r\n* Usability issues in the event handlers",
        "dateCreated": "2021-04-13T13:46:22Z",
        "datePublished": "2021-04-13T14:20:33Z",
        "html_url": "https://github.com/Project-MONAI/MONAI/releases/tag/0.5.0",
        "name": "0.5.0",
        "tag_name": "0.5.0",
        "tarball_url": "https://api.github.com/repos/Project-MONAI/MONAI/tarball/0.5.0",
        "url": "https://api.github.com/repos/Project-MONAI/MONAI/releases/41188343",
        "zipball_url": "https://api.github.com/repos/Project-MONAI/MONAI/zipball/0.5.0"
      },
      {
        "authorType": "User",
        "author_name": "wyli",
        "body": "### Added\r\n* Overview document for [feature highlights in v0.4.0](https://github.com/Project-MONAI/MONAI/blob/master/docs/source/highlights.md)\r\n* Torchscript support for the net modules\r\n* New networks and layers:\r\n  * Discrete Gaussian kernels\r\n  * Hilbert transform and envelope detection\r\n  * Swish and Mish activation\r\n  * Acti-norm-dropout block\r\n  * Upsampling layer\r\n  * Autoencoder, Variational autoencoder\r\n  * FCNet\r\n* Support of initialisation from pre-trained weights for densenet, SENet, multichannel AHNet\r\n* Layer-wise learning rate API\r\n* New model metrics and event handlers based on occlusion sensitivity, confusion matrix, surface distance\r\n* CAM/GradCAM/GradCAM++\r\n* File format-agnostic image loader APIs with Nibabel, ITK readers\r\n* Enhancements for dataset partition, cross-validation APIs\r\n* New data APIs:\r\n  * LMDB-based caching dataset\r\n  * Cache-N-transforms dataset\r\n  * Iterable dataset\r\n  * Patch dataset\r\n* Weekly PyPI release\r\n* Fully compatible with PyTorch 1.7\r\n* CI/CD enhancements:\r\n  * Skip, speed up, fail fast, timed, quick tests\r\n  * Distributed training tests\r\n  * Performance profiling utilities\r\n* [New tutorials and demos](https://github.com/Project-MONAI/tutorials#3-list-of-notebooks-and-examples):\r\n  * Autoencoder, VAE tutorial\r\n  * Cross-validation demo\r\n  * Model interpretability tutorial\r\n  * COVID-19 Lung CT segmentation challenge open-source baseline\r\n  * Threadbuffer demo\r\n  * Dataset partitioning tutorial\r\n  * Layer-wise learning rate demo\r\n  * [MONAI Bootcamp 2020](https://github.com/Project-MONAI/MONAIBootcamp2020)\r\n\r\n### Changed\r\n* Base Docker image upgraded to `nvcr.io/nvidia/pytorch:20.10-py3` from `nvcr.io/nvidia/pytorch:20.08-py3`\r\n\r\n#### Backwards Incompatible Changes\r\n* `monai.apps.CVDecathlonDataset` is extended to a generic `monai.apps.CrossValidation` with an `dataset_cls` option\r\n* Cache dataset now requires a `monai.transforms.Compose` instance as the transform argument\r\n* Model checkpoint file name extensions changed from `.pth` to `.pt`\r\n* Readers' `get_spatial_shape` returns a numpy array instead of list\r\n* Decoupled postprocessing steps such as `sigmoid`, `to_onehot_y`, `mutually_exclusive`, `logit_thresh` from metrics and event handlers, the postprocessing steps should be used accordingly before computing the metrics\r\n* `ConfusionMatrixMetric` and `DiceMetric` computation now returns an additional `not_nans` flag to indicate valid results\r\n* `UpSample` optional `mode` supports `\"deconv\"`, `\"nontrainable\"`, `\"pixelshuffle\"`; `interp_mode` is only used when `mode` is `\"nontrainable\"`\r\n* `SegResNet` optional `upsample_mode` now supports `\"deconv\"`, `\"nontrainable\"`, `\"pixelshuffle\"`\r\n* `monai.transforms.Compose` class inherits `monai.transforms.Transform`\r\n* In `Rotate`, `Rotated`, `RandRotate`, `RandRotated`  transforms, the `angle` related parameters are interpreted as angles in radians instead of degrees.\r\n* `SplitChannel` and `SplitChanneld` moved from `transforms.post` to `transforms.utility`\r\n\r\n### Removed\r\n* Support of PyTorch 1.4\r\n\r\n### Fixed\r\n* Enhanced the Dice related loss functions for stability and flexibility\r\n* Sliding window inference memory and device issues\r\n* Revised transforms:\r\n  * Normalize intensity datatype and normalizer types\r\n  * Padding modes for zoom\r\n  * Crop returns coordinates\r\n  * Select items transform\r\n  * Weighted patch sampling\r\n  * Option to keep aspect ratio for zoom\r\n* Various CI/CD issues",
        "dateCreated": "2020-12-15T14:14:34Z",
        "datePublished": "2020-12-15T15:21:13Z",
        "html_url": "https://github.com/Project-MONAI/MONAI/releases/tag/0.4.0",
        "name": "0.4.0",
        "tag_name": "0.4.0",
        "tarball_url": "https://api.github.com/repos/Project-MONAI/MONAI/tarball/0.4.0",
        "url": "https://api.github.com/repos/Project-MONAI/MONAI/releases/35264215",
        "zipball_url": "https://api.github.com/repos/Project-MONAI/MONAI/zipball/0.4.0"
      },
      {
        "authorType": "User",
        "author_name": "wyli",
        "body": "### Added\r\n* Overview document for [feature highlights in v0.3.0](https://github.com/Project-MONAI/MONAI/blob/master/docs/source/highlights.md)\r\n* Automatic mixed precision support\r\n* Multi-node, multi-GPU data parallel model training support\r\n* 3 new evaluation metric functions\r\n* 11 new network layers and blocks\r\n* 6 new network architectures\r\n* 14 new transforms, including an I/O adaptor\r\n* Cross validation module for `DecathlonDataset`\r\n* Smart Cache module in dataset\r\n* `monai.optimizers` module\r\n* `monai.csrc` module\r\n* Experimental feature of ImageReader using ITK, Nibabel, Numpy, Pillow (PIL Fork)\r\n* Experimental feature of differentiable image resampling in C++/CUDA\r\n* Ensemble evaluator module\r\n* GAN trainer module\r\n* Initial cross-platform CI environment for C++/CUDA code\r\n* Code style enforcement now includes isort and clang-format\r\n* Progress bar with tqdm\r\n\r\n### Changed\r\n* Now fully compatible with PyTorch 1.6\r\n* Base Docker image upgraded to `nvcr.io/nvidia/pytorch:20.08-py3` from `nvcr.io/nvidia/pytorch:20.03-py3`\r\n* Code contributions now require signing off on the [Developer Certificate of Origin (DCO)](https://developercertificate.org/)\r\n* Major work in type hinting finished\r\n* Remote datasets migrated to [Open Data on AWS](https://registry.opendata.aws/)\r\n* Optionally depend on PyTorch-Ignite v0.4.2 instead of v0.3.0\r\n* Optionally depend on torchvision, ITK\r\n* Enhanced CI tests with 8 new testing environments\r\n### Removed\r\n* `MONAI/examples` folder (relocated into [`Project-MONAI/tutorials`](https://github.com/Project-MONAI/tutorials))\r\n* `MONAI/research` folder (relocated to [`Project-MONAI/research-contributions`](https://github.com/Project-MONAI/research-contributions))\r\n### Fixed\r\n* `dense_patch_slices` incorrect indexing\r\n* Data type issue in `GeneralizedWassersteinDiceLoss`\r\n* `ZipDataset` return value inconsistencies\r\n* `sliding_window_inference` indexing and `device` issues\r\n* importing monai modules may cause namespace pollution\r\n* Random data splits issue in `DecathlonDataset`\r\n* Issue of randomising a `Compose` transform\r\n* Various issues in function type hints\r\n* Typos in docstring and documentation\r\n* `PersistentDataset` issue with existing file folder\r\n* Filename issue in the output writers",
        "dateCreated": "2020-10-04T23:52:13Z",
        "datePublished": "2020-10-05T10:55:34Z",
        "html_url": "https://github.com/Project-MONAI/MONAI/releases/tag/0.3.0",
        "name": "0.3.0",
        "tag_name": "0.3.0",
        "tarball_url": "https://api.github.com/repos/Project-MONAI/MONAI/tarball/0.3.0",
        "url": "https://api.github.com/repos/Project-MONAI/MONAI/releases/31952805",
        "zipball_url": "https://api.github.com/repos/Project-MONAI/MONAI/zipball/0.3.0"
      },
      {
        "authorType": "User",
        "author_name": "wyli",
        "body": "### Added\r\n* Overview document for [feature highlights in v0.2.0](https://github.com/Project-MONAI/MONAI/blob/master/docs/source/highlights.md)\r\n* Type hints and static type analysis support\r\n* `MONAI/research` folder\r\n* `monai.engine.workflow` APIs for supervised training\r\n* `monai.inferers` APIs for validation and inference\r\n* 7 new tutorials and examples\r\n* 3 new loss functions\r\n* 4 new event handlers\r\n* 8 new layers, blocks, and networks\r\n* 12 new transforms, including post-processing transforms\r\n* `monai.apps.datasets` APIs, including `MedNISTDataset` and `DecathlonDataset`\r\n* Persistent caching, `ZipDataset`, and `ArrayDataset` in `monai.data`\r\n* Cross-platform CI tests supporting multiple Python versions\r\n* Optional import mechanism\r\n* Experimental features for third-party transforms integration\r\n### Changed\r\n> For more details please visit [the project wiki](https://github.com/Project-MONAI/MONAI/wiki/Notable-changes-between-0.1.0-and-0.2.0)\r\n* Core modules now require numpy >= 1.17\r\n* Categorized `monai.transforms` modules into crop and pad, intensity, IO, post-processing, spatial, and utility\r\n* Most transforms are now implemented with PyTorch native APIs\r\n* Code style enforcement and automated formatting workflows now use autopep8 and black\r\n* Base Docker image upgraded to `nvcr.io/nvidia/pytorch:20.03-py3` from `nvcr.io/nvidia/pytorch:19.10-py3`\r\n* Enhanced local testing tools\r\n* Documentation website domain changed to https://docs.monai.io\r\n### Removed\r\n* Support of Python < 3.6\r\n* Automatic installation of optional dependencies including pytorch-ignite, nibabel, tensorboard, pillow, scipy, scikit-image\r\n### Fixed\r\n* Various issues in type and argument names consistency\r\n* Various issues in docstring and documentation site\r\n* Various issues in unit and integration tests\r\n* Various issues in examples and notebooks",
        "dateCreated": "2020-07-06T17:44:52Z",
        "datePublished": "2020-07-07T14:16:35Z",
        "html_url": "https://github.com/Project-MONAI/MONAI/releases/tag/0.2.0",
        "name": "0.2.0",
        "tag_name": "0.2.0",
        "tarball_url": "https://api.github.com/repos/Project-MONAI/MONAI/tarball/0.2.0",
        "url": "https://api.github.com/repos/Project-MONAI/MONAI/releases/28170951",
        "zipball_url": "https://api.github.com/repos/Project-MONAI/MONAI/zipball/0.2.0"
      },
      {
        "authorType": "User",
        "author_name": "wyli",
        "body": "### Added\r\n* Public alpha source code under the Apache 2.0 license ([highlights])\r\n* Various tutorials and examples\r\n  - Medical image classification and segmentation workflows\r\n  - Spacing/orientation-aware preprocessing with CPU/GPU and caching\r\n  - Flexible workflows with external engines including PyTorch Ignite and Lightning\r\n* Various GitHub Actions\r\n  - CI/CD pipelines via self-hosted runners\r\n  - Documentation publishing via readthedocs.org\r\n  - PyPI package publishing\r\n* Contributing guidelines\r\n* A project logo and badges\r\n\r\n[highlights]: https://github.com/Project-MONAI/MONAI/blob/master/docs/source/highlights.md",
        "dateCreated": "2020-04-19T14:20:21Z",
        "datePublished": "2020-04-21T15:53:41Z",
        "html_url": "https://github.com/Project-MONAI/MONAI/releases/tag/0.1.0",
        "name": "0.1.0",
        "tag_name": "0.1.0",
        "tarball_url": "https://api.github.com/repos/Project-MONAI/MONAI/tarball/0.1.0",
        "url": "https://api.github.com/repos/Project-MONAI/MONAI/releases/25577750",
        "zipball_url": "https://api.github.com/repos/Project-MONAI/MONAI/zipball/0.1.0"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2583,
      "date": "Thu, 23 Dec 2021 17:49:40 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "healthcare-imaging",
      "deep-learning",
      "medical-image-computing",
      "medical-image-processing",
      "pytorch",
      "python3",
      "monai"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[MedNIST demo](https://colab.research.google.com/drive/1wy8XUSnNWlhDNazFdvGBHLfdkGvOHBKe) and [MONAI for PyTorch Users](https://colab.research.google.com/drive/1boqy7ENpKrqaJoxFlbHIBnIODAs1Ih1T) are available on Colab.\n\nExamples and notebook tutorials are located at [Project-MONAI/tutorials](https://github.com/Project-MONAI/tutorials).\n\nTechnical documentation is available at [docs.monai.io](https://docs.monai.io).\n\n",
      "technique": "Header extraction"
    }
  ]
}