{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/KhanJr/Generative-Adversarial-Networks-COMPUTER-VISION",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-05-10T18:08:02Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-15T13:45:27Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "This model generate images and Discrement them on the basis of real images, gives surprising results, can apply arithmatic operations on generated images.",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This model generate images and Discrement them on the basis of real images, gives surprising results, can apply arithmatic operations on generated images.\n\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/KhanJr/Generative-Adversarial-Networks-COMPUTER-VISION/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 13:36:37 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/KhanJr/Generative-Adversarial-Networks-COMPUTER-VISION/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "KhanJr/Generative-Adversarial-Networks-COMPUTER-VISION",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. install pillow, numpy and mpi4py\n2. install cuda (10.2) version of pytrorch and torchvision\n\n",
      "technique": "Header extraction"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/KhanJr/Generative-Adversarial-Networks-COMPUTER-VISION/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Rizwan Khan\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Generative-Adversarial Networks [COMPUTER-VISION]",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Generative-Adversarial-Networks-COMPUTER-VISION",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "KhanJr",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/KhanJr/Generative-Adversarial-Networks-COMPUTER-VISION/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Knowlege of Python (Basic[class, modules, function])\n2. Pytorch, Neural Network\n3. Activation Function.\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This model generate images and Discrement them on the basis of real images, gives surprising results, can apply arithmatic operations on generated images.\n\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Thu, 23 Dec 2021 13:36:37 GMT"
    },
    "technique": "GitHub API"
  },
  "support": [
    {
      "confidence": [
        1
      ],
      "excerpt": "  \n    PAPER :\n      GAN, MD-GAN :\n        Generative Adversarial Network, Multi-Discriminator Generative Adversarial Networks for Distributed Datasets\n\n\t\t\n    AUTHORS\t:\n    \n      PAPER I - [ Ian J. Goodfellow,  Jean Pouget-Abadie\u2217, Mehdi Mirza, Bing Xu, David Warde-Farley,Sherjil Ozair\u2020, Aaron      Courville, Yoshua Bengio\u2021 ]\n      PAPER II - [ Corentin Hardy, Erwan Le Merrer, Bruno Sericola ]\n\n      LINK :\n                PAPER I :  https://arxiv.org/pdf/1406.2661.pdf\n                PAPER II : https://arxiv.org/pdf/1811.03850v2.pdf\n\n\t************************************************************************************************************************************************************************************\n\n\n\tMain libraries :\n\n\t\tnumpy\t\t\t:\tIt's a multidimensional Array.\n\n\t\tmpi4py\t\t\t:\tMPI for Python supports convenient, pickle-based communication of generic Python object as well as fast, near C-speed, direct array data communication of buffer-provider objects.\n\n\t\ttorch\t\t\t:\tAn open source machine learning framework that accelerates the path from research prototyping to production deployment.(Official site)\t\n\n\t\ttorch.nn:\t\t:\tBase class for all neural network modules, our models is also subclass this class.\t\t\n\n\t\ttorch.optim\t\t:\ttorch.optim is a package implementing various optimization algorithms. Most commonly used methods are already supported, and the interface is general enough,\n\t\t\t\t\t\t so that more sophisticated ones can be also easily integrated in the future.\n\n\t\ttorch.utils.data\t:\tIt represents a python iterable over a dataset.\n\n\t\ttorch.nn.parallel\t:\tThis container parallelizes the application of the given module by splitting the input across the specified devices by chunking in the batch dimension.\n\n\t\ttorchvision\t\t:\tThe torchvision package consists of popular datasets, model architectures, and common image transformations for computer vision.\n\n\tOther libraries :\n\n\t\trandom, os.\n\n\n\t************************************************************************************************************************************************************************************\n\n\n\tImportant Variables :\n\n\t\tsize\t\t\t:\tReprest the size of message pass to suffle the Discriminator using peer2peer fashion.\n\n\t\trank\t\t\t:\tPush the Discriminator to use respective position (bcz we are using two discriminator, rank discriminator by 1/0 (1 : run next, 0: currently running))\n\t\t\n\t\tdatasets\t\t:\tThis varible is heart of the programme bcz this will download and store the dataset. \n\n\t\tdataloader\t\t:\tAt the heart of PyTorch data loading utility is the torch.utils.data.DataLoader class, We are using one HUGE DATASET CIFAR10 in this implimentation.\n\n\n\n\t************************************************************************************************************************************************************************************\n\n\n\tMain Class :\n\n\t\tG()\t\t\t:\tThis class is used to create generator Neural Network by using torch.nn.Module class.\n\n\t\tD()\t\t\t:\tThis class is used to create Discriminator Neural Network by using torch.nn.Module class.\n\n\n\t************************************************************************************************************************************************************************************\n\n  \n\n\tMain function :\n  \n\n\t\tcopyGenerator\t\t:\tCreate a copy of generator to get the feedback of the generator to learn from them.\n\n\t\tshuffleDiscriminators\t:\tShuffle the discriminator on the basis of rank after every 2 epochs.\n    \n    THESE ARE SPECIAL FUNCTION USED FOR MD-GAN\n\n\n\t************************************************************************************************************************************************************************************\n  \tSudo code of implimentation of MD-GAN :\n\n\t\tAlgorithm  1MD-GAN algorithm\n\t\t\t\t1:procedureWORKER(C,Bn,I,L,b)\n\t\t\t\t2:\tInitialize\u03b8nforDn\n\t\t\t\t3:\tfori\u21901toIdo\n\t\t\t\t4:\t\tX(r)n\u2190SAMPLES(Bn,b)\n\t\t\t\t5:\t\tX(g)n,X(d)n\u2190RECEIVEBATCHES(C)\n\t\t\t\t6:\t\tforl\u21900toLdo\n\t\t\t\t7:\t\t\tDn\u2190DISCLEARNINGSTEP(Jdisc,Dn)\n\t\t\t\t8:\t\tend for\n\t\t\t\t9:\tFn\u2190{\u2202 \u0303B(X(g)n)\u2202xi|xi\u2208X(g)n}\n\t\t\t\t10:\tSEND(C,Fn).SendFnto server\n\t\t\t\t11:\tifimod (mEb) = 0then\n\t\t\t\t12:\t\tDn\u2190SWAP(Dn)\n\t\t\t\t13:\tend if\n\t\t\t\t14:\tend for\n\t\t\t\t15:end procedure\n\t\t\t\t16:\n\t\t\t\t17:procedureSWAP(Dn)\n\t\t\t\t18:\tWl\u2190GETRANDOMWORKER()\n\t\t\t\t19:\tSEND(Wl,Dn).SendDnto workerWl.\n\t\t\t\t20:\tDn\u2190RECEIVED().Receive a new discriminatorfrom another worker.\n\t\t\t\t21:\tReturnDn\n\t\t\t\t22:end procedure\n\t\t\t\t23:\n\t\t\t\t24:procedureSERVER(k,I).Server C\n\t\t\t\t25:\tInitializewforG\n\t\t\t\t26:\tfori\u21901toIdo\n\t\t\t\t27:\t\tforj\u21900tokdo\n\t\t\t\t28:\t\t\tZj\u2190GAUSSIANNOISE(b)\n\t\t\t\t29:\t\t\tX(j)\u2190{Gw(z)|z\u2208Zj}\n\t\t\t\t30:\t\tend for\n\t\t\t\t31:\t\tX(d)1,...,X(d)n\u2190SPLIT(X(1),...,X(k))\n\t\t\t\t32:\t\tX(g)1,...,X(g)n\u2190SPLIT(X(1),...,X(k))\n\t\t\t\t33:\t\tfor n\u21901toNdo\n\t\t\t\t34:\t\t\tSEND(Wn,(X(d)n,X(g)n))\n\t\t\t\t35:\t\tend for\n\t\t\t\t36:\t\tF1,...,FN\u2190GETFEEDBACKFROMWORKERS()\n\t\t\t\t37:\t\tCompute\u2206waccording toF1,...,FN\n\t\t\t\t38:\t\tfor wi\u2208w do\n\t\t\t\t39:\t\t\twi\u2190wi+ADAM(\u2206wi)\n\t\t\t\t40:\t\tend for\n\t\t\t\t41:\tend for\n\t\t\t\t42:end procedure\n\t\t\t\t\n************************************************************************************************************************************************************************************\nThe results are really excited : \n\nThese are the generated image - \n\n",
      "technique": "Header extraction"
    }
  ],
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "  \n    PAPER :\n      GAN, MD-GAN :\n        Generative Adversarial Network, Multi-Discriminator Generative Adversarial Networks for Distributed Datasets\n\n\t\t\n    AUTHORS\t:\n    \n      PAPER I - [ Ian J. Goodfellow,  Jean Pouget-Abadie\u2217, Mehdi Mirza, Bing Xu, David Warde-Farley,Sherjil Ozair\u2020, Aaron      Courville, Yoshua Bengio\u2021 ]\n      PAPER II - [ Corentin Hardy, Erwan Le Merrer, Bruno Sericola ]\n\n      LINK :\n                PAPER I :  https://arxiv.org/pdf/1406.2661.pdf\n                PAPER II : https://arxiv.org/pdf/1811.03850v2.pdf\n\n\t************************************************************************************************************************************************************************************\n\n\n\tMain libraries :\n\n\t\tnumpy\t\t\t:\tIt's a multidimensional Array.\n\n\t\tmpi4py\t\t\t:\tMPI for Python supports convenient, pickle-based communication of generic Python object as well as fast, near C-speed, direct array data communication of buffer-provider objects.\n\n\t\ttorch\t\t\t:\tAn open source machine learning framework that accelerates the path from research prototyping to production deployment.(Official site)\t\n\n\t\ttorch.nn:\t\t:\tBase class for all neural network modules, our models is also subclass this class.\t\t\n\n\t\ttorch.optim\t\t:\ttorch.optim is a package implementing various optimization algorithms. Most commonly used methods are already supported, and the interface is general enough,\n\t\t\t\t\t\t so that more sophisticated ones can be also easily integrated in the future.\n\n\t\ttorch.utils.data\t:\tIt represents a python iterable over a dataset.\n\n\t\ttorch.nn.parallel\t:\tThis container parallelizes the application of the given module by splitting the input across the specified devices by chunking in the batch dimension.\n\n\t\ttorchvision\t\t:\tThe torchvision package consists of popular datasets, model architectures, and common image transformations for computer vision.\n\n\tOther libraries :\n\n\t\trandom, os.\n\n\n\t************************************************************************************************************************************************************************************\n\n\n\tImportant Variables :\n\n\t\tsize\t\t\t:\tReprest the size of message pass to suffle the Discriminator using peer2peer fashion.\n\n\t\trank\t\t\t:\tPush the Discriminator to use respective position (bcz we are using two discriminator, rank discriminator by 1/0 (1 : run next, 0: currently running))\n\t\t\n\t\tdatasets\t\t:\tThis varible is heart of the programme bcz this will download and store the dataset. \n\n\t\tdataloader\t\t:\tAt the heart of PyTorch data loading utility is the torch.utils.data.DataLoader class, We are using one HUGE DATASET CIFAR10 in this implimentation.\n\n\n\n\t************************************************************************************************************************************************************************************\n\n\n\tMain Class :\n\n\t\tG()\t\t\t:\tThis class is used to create generator Neural Network by using torch.nn.Module class.\n\n\t\tD()\t\t\t:\tThis class is used to create Discriminator Neural Network by using torch.nn.Module class.\n\n\n\t************************************************************************************************************************************************************************************\n\n  \n\n\tMain function :\n  \n\n\t\tcopyGenerator\t\t:\tCreate a copy of generator to get the feedback of the generator to learn from them.\n\n\t\tshuffleDiscriminators\t:\tShuffle the discriminator on the basis of rank after every 2 epochs.\n    \n    THESE ARE SPECIAL FUNCTION USED FOR MD-GAN\n\n\n\t************************************************************************************************************************************************************************************\n  \tSudo code of implimentation of MD-GAN :\n\n\t\tAlgorithm  1MD-GAN algorithm\n\t\t\t\t1:procedureWORKER(C,Bn,I,L,b)\n\t\t\t\t2:\tInitialize\u03b8nforDn\n\t\t\t\t3:\tfori\u21901toIdo\n\t\t\t\t4:\t\tX(r)n\u2190SAMPLES(Bn,b)\n\t\t\t\t5:\t\tX(g)n,X(d)n\u2190RECEIVEBATCHES(C)\n\t\t\t\t6:\t\tforl\u21900toLdo\n\t\t\t\t7:\t\t\tDn\u2190DISCLEARNINGSTEP(Jdisc,Dn)\n\t\t\t\t8:\t\tend for\n\t\t\t\t9:\tFn\u2190{\u2202 \u0303B(X(g)n)\u2202xi|xi\u2208X(g)n}\n\t\t\t\t10:\tSEND(C,Fn).SendFnto server\n\t\t\t\t11:\tifimod (mEb) = 0then\n\t\t\t\t12:\t\tDn\u2190SWAP(Dn)\n\t\t\t\t13:\tend if\n\t\t\t\t14:\tend for\n\t\t\t\t15:end procedure\n\t\t\t\t16:\n\t\t\t\t17:procedureSWAP(Dn)\n\t\t\t\t18:\tWl\u2190GETRANDOMWORKER()\n\t\t\t\t19:\tSEND(Wl,Dn).SendDnto workerWl.\n\t\t\t\t20:\tDn\u2190RECEIVED().Receive a new discriminatorfrom another worker.\n\t\t\t\t21:\tReturnDn\n\t\t\t\t22:end procedure\n\t\t\t\t23:\n\t\t\t\t24:procedureSERVER(k,I).Server C\n\t\t\t\t25:\tInitializewforG\n\t\t\t\t26:\tfori\u21901toIdo\n\t\t\t\t27:\t\tforj\u21900tokdo\n\t\t\t\t28:\t\t\tZj\u2190GAUSSIANNOISE(b)\n\t\t\t\t29:\t\t\tX(j)\u2190{Gw(z)|z\u2208Zj}\n\t\t\t\t30:\t\tend for\n\t\t\t\t31:\t\tX(d)1,...,X(d)n\u2190SPLIT(X(1),...,X(k))\n\t\t\t\t32:\t\tX(g)1,...,X(g)n\u2190SPLIT(X(1),...,X(k))\n\t\t\t\t33:\t\tfor n\u21901toNdo\n\t\t\t\t34:\t\t\tSEND(Wn,(X(d)n,X(g)n))\n\t\t\t\t35:\t\tend for\n\t\t\t\t36:\t\tF1,...,FN\u2190GETFEEDBACKFROMWORKERS()\n\t\t\t\t37:\t\tCompute\u2206waccording toF1,...,FN\n\t\t\t\t38:\t\tfor wi\u2208w do\n\t\t\t\t39:\t\t\twi\u2190wi+ADAM(\u2206wi)\n\t\t\t\t40:\t\tend for\n\t\t\t\t41:\tend for\n\t\t\t\t42:end procedure\n\t\t\t\t\n************************************************************************************************************************************************************************************\nThe results are really excited : \n\nThese are the generated image - \n\n",
      "technique": "Header extraction"
    }
  ]
}