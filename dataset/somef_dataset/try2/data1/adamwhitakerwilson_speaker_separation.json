{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1809.07454",
      "https://arxiv.org/abs/1809.07454, 2018"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Luo Y, Mesgarani N. TasNet: Surpassing Ideal Time-Frequency Masking for Speech Separation[J]. arXiv preprint arXiv:1809.07454, 2018.",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/adamwhitakerwilson/speaker_separation",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-04-11T02:53:17Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-04-11T08:26:23Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9167246510566277,
        0.9563628966258831,
        0.9048405859973143
      ],
      "excerpt": "This is a PyTorch implementation of the TasNet: Surpassing Ideal Time-Frequency Masking for Speech Separation that was created by (https://github.com/funcwj/conv-tasnet) with some modifications done by Adam Whitaker-Wilson. The dataset composition function was implemented by WASS (https://github.com/mitmedialab/WetlandAvianSourceSeparation) with some modifications done by Adam Whitaker-Wilson. \nSee (3 Speaker Separation Dataset Re-Construction Training and Testing For Conv-TasNet.pdf) for project details. \nLink to Datasets:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9693233393948762
      ],
      "excerpt": "Link to Inferences: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8964291686728832
      ],
      "excerpt": "Link to Models: \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/adamwhitakerwilson/speaker_separation/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 08:46:42 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/adamwhitakerwilson/speaker_separation/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "adamwhitakerwilson/speaker_separation",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/adamwhitakerwilson/speaker_separation/master/SPK_SP_Master/train.sh",
      "https://raw.githubusercontent.com/adamwhitakerwilson/speaker_separation/master/SPK_SP_Master/eval.sh",
      "https://raw.githubusercontent.com/adamwhitakerwilson/speaker_separation/master/SPK_SP_Master/infer.sh"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/adamwhitakerwilson/speaker_separation/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 Jian Wu\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# 3 Speaker Separation Dataset Re-Construction Training and Testing For Conv-TasNet",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "speaker_separation",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "adamwhitakerwilson",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/adamwhitakerwilson/speaker_separation/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* see [requirements.txt](requirements.txt) or run:\n```\npip3 install -r requirements.txt\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 08:46:42 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* digital dataset creation: configure [default.yaml](config/composer)\nnote: a \"dummy\" model is trained with 1 epoch as a test.\n\n* training: configure [conf.py](nnet/conf.py) and run [train.sh](train.sh)\n\n* inference\n```bash\n./nnet/separate.py /path/to/checkpoint --input /path/to/mix.scp --gpu 0 > separate.log 2>&1 &\n```\n\n* evaluate, calculates cosine-similarity, dynamic time warp and si-snr\n```bash\n./nnet/compute_si_snr.py /path/to/ref_spk1.scp,/path/to/ref_spk2.scp,/path/to/ref_spk3.scp /path/to/inf_spk1.scp,/path/to/inf_spk2.scp,/path/to/inf_spk3.scp\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}