{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1511.06434",
      "https://arxiv.org/abs/1511.06434",
      "https://arxiv.org/abs/1406.2661",
      "https://arxiv.org/abs/1701.00160"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. **Alec Radford, Luke Metz, Soumith Chintala.** *Unsupervised representation learning with deep convolutional \ngenerative adversarial networks.*[[arxiv](https://arxiv.org/abs/1511.06434)]\n2. **Ian Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, \nSherjil Ozair, Aaron Courville, Yoshua Bengio.** *Generative adversarial nets.* NIPS 2014 [[arxiv](https://arxiv.org/abs/1406.2661)]\n3. **Ian Goodfellow.** *Tutorial: Generative Adversarial Networks.* NIPS 2016 [[arxiv](https://arxiv.org/abs/1701.00160)]\n4. DCGAN Tutorial. [https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html]\n5. PyTorch Docs. [https://pytorch.org/docs/stable/index.html]\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8569430898492157
      ],
      "excerpt": "<img src=\"images/Training_Loss.png\" title=\"Training Loss Curves\" alt=\"Training Loss Curves\"> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/davidhalladay/CE-compressive-sensing-on-generative-model-pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-01-01T05:22:30Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-06-16T14:24:57Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Generative Adversarial Networks (GANs) are one of the most popular (and coolest)\nMachine Learning algorithms developed in recent times. They belong to a set of algorithms called generative models, which\nare widely used for unupervised learning tasks which aim to learn the uderlying structure of the given data. As the name\nsuggests GANs allow you to generate new unseen data that mimic the actual given real data. However, GANs pose problems in\ntraining and require carefullly tuned hyperparameters.This paper aims to solve this problem.\n\nDCGAN is one of the most popular and succesful network design for GAN. It mainly composes of convolution layers \nwithout max pooling or fully connected layers. It uses strided convolutions and transposed convolutions \nfor the downsampling and the upsampling respectively.\n\n**Generator architecture of DCGAN**\n<p align=\"center\">\n<img src=\"images/Generator.png\" title=\"DCGAN Generator\" alt=\"DCGAN Generator\">\n</p>\n\n**Network Design of DCGAN:**\n* Replace all pooling layers with strided convolutions.\n* Remove all fully connected layers.\n* Use transposed convolutions for upsampling.\n* Use Batch Normalization after every layer except after the output layer of the generator and the input layer of the discriminator.\n* Use ReLU non-linearity for each layer in the generator except for output layer use tanh.\n* Use Leaky-ReLU non-linearity for each layer of the disciminator excpet for output layer use sigmoid.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9778196041634817
      ],
      "excerpt": "PyTorch implementation of DCGAN introduced in the paper: Unsupervised Representation Learning with Deep Convolutional  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8549909087517874
      ],
      "excerpt": "Hyperparameters are chosen as given in the paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9968029537584643,
        0.9677802883508364
      ],
      "excerpt": "* slope of leak of LeakyReLU: 0.2 \n* For the optimizer Adam (with beta2 = 0.999) has been used instead of SGD as described in the paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "reference from",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/davidhalladay/CE-compressive-sensing-on-generative-model-pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 21 Dec 2021 11:52:20 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/davidhalladay/CE-compressive-sensing-on-generative-model-pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "davidhalladay/CE-compressive-sensing-on-generative-model-pytorch",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/davidhalladay/CE-compressive-sensing-on-generative-model-pytorch/master/scripts/reconstruct_celebA_v4.sh",
      "https://raw.githubusercontent.com/davidhalladay/CE-compressive-sensing-on-generative-model-pytorch/master/scripts/reconstruct_celebA.sh",
      "https://raw.githubusercontent.com/davidhalladay/CE-compressive-sensing-on-generative-model-pytorch/master/scripts/reconstruct_celebA_v2.sh",
      "https://raw.githubusercontent.com/davidhalladay/CE-compressive-sensing-on-generative-model-pytorch/master/scripts/reconstruct_celebA_v3.sh",
      "https://raw.githubusercontent.com/davidhalladay/CE-compressive-sensing-on-generative-model-pytorch/master/scripts/reconstruct_celebA_v5.sh",
      "https://raw.githubusercontent.com/davidhalladay/CE-compressive-sensing-on-generative-model-pytorch/master/scripts/train_celebA.sh"
    ],
    "technique": "File Exploration"
  },
  "invocation": [
    {
      "confidence": [
        0.8006033690072833
      ],
      "excerpt": "also be used. Download the data and update the directory location inside the root variable in utils.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.885454586532419
      ],
      "excerpt": "<img src=\"images/Training_Data.png\" title=\"Training Data\" alt=\"Training Data\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9512794525235825
      ],
      "excerpt": "To train the model, run train.py. To set the training parametrs, update the values in the params dictionary in train.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8226497988045643
      ],
      "excerpt": "<img src=\"images/Training_Loss.png\" title=\"Training Loss Curves\" alt=\"Training Loss Curves\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8815743593024151
      ],
      "excerpt": "To generate new unseen images, run generate.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9175544965245216
      ],
      "excerpt": "python3 generate.py --load_path /path/to/pth/checkpoint --num_output n \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/davidhalladay/CE-compressive-sensing-on-generative-model-pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Deep Convolutional GAN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "CE-compressive-sensing-on-generative-model-pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "davidhalladay",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/davidhalladay/CE-compressive-sensing-on-generative-model-pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 21 Dec 2021 11:52:20 GMT"
    },
    "technique": "GitHub API"
  }
}