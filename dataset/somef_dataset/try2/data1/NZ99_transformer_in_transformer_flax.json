{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2103.00112\">Transformer in Transformer</a>, pixel level attention paired with patch level attention for image classification. It is heavily inspired by both <a href=\"https://github.com/lucidrains/transformer-in-transformer\">lucidrains's</a> Pytorch implementation and <a href=\"https://github.com/google-research/vision_transformer\">Google Brain's</a> Vision Transformer repo.\n\n<a href=\"https://www.youtube.com/watch?v=HWna2c5VXDg\">AI Coffee Break with Letita</a>\n\n## Install\n\n```bash\n$ pip install transformer-in-transformer-flax\n```\n\n## Usage\n\n```python\nfrom jax import random\nfrom jax import numpy as jnp\nfrom transformer_in_transformer_flax import TransformerInTransformer, TNTConfig\n\n#example configuration for TNT-B\nconfig = TNTConfig(\n    num_classes = 1000,\n    depth = 12,\n    image_size = 224,\n    patch_size = 16,\n    transformed_patch_size = 4,\n    inner_dim = 40,\n    inner_heads = 4,\n    inner_dim_head = 64,\n    inner_r = 4,\n    outer_dim = 640,\n    outer_heads = 10,\n    outer_dim_head = 64,\n    outer_r = 4\n"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bibtex\n@misc{han2021transformer,\n    title   = {Transformer in Transformer}, \n    author  = {Kai Han and An Xiao and Enhua Wu and Jianyuan Guo and Chunjing Xu and Yunhe Wang},\n    year    = {2021},\n    eprint  = {2103.00112},\n    archivePrefix = {arXiv},\n    primaryClass = {cs.CV}\n}\n```",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{han2021transformer,\n    title   = {Transformer in Transformer}, \n    author  = {Kai Han and An Xiao and Enhua Wu and Jianyuan Guo and Chunjing Xu and Yunhe Wang},\n    year    = {2021},\n    eprint  = {2103.00112},\n    archivePrefix = {arXiv},\n    primaryClass = {cs.CV}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/NZ99/transformer_in_transformer_flax",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-03-08T20:29:05Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-08-28T02:09:08Z",
    "technique": "GitHub API"
  },
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/NZ99/transformer_in_transformer_flax/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 17:48:30 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/NZ99/transformer_in_transformer_flax/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "NZ99/transformer_in_transformer_flax",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\n$ pip install transformer-in-transformer-flax\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/NZ99/transformer_in_transformer_flax/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2021 Niccol\\xc3\\xb2 Zanichelli\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Transformer in Transformer in JAX/Flax",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "transformer_in_transformer_flax",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "NZ99",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/NZ99/transformer_in_transformer_flax/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 21,
      "date": "Wed, 29 Dec 2021 17:48:30 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```python\nfrom jax import random\nfrom jax import numpy as jnp\nfrom transformer_in_transformer_flax import TransformerInTransformer, TNTConfig\n\n#:example configuration for TNT-B\nconfig = TNTConfig(\n    num_classes = 1000,\n    depth = 12,\n    image_size = 224,\n    patch_size = 16,\n    transformed_patch_size = 4,\n    inner_dim = 40,\n    inner_heads = 4,\n    inner_dim_head = 64,\n    inner_r = 4,\n    outer_dim = 640,\n    outer_heads = 10,\n    outer_dim_head = 64,\n    outer_r = 4\n)\n\nrng = random.PRNGKey(seed=0)\nmodel = TransformerInTransformer(config=config)\nparams = model.init(rng, jnp.ones((1, 224, 224, 3), dtype=config.dtype))\nimg = random.uniform(rng, (2, 224, 224, 3))\nlogits = model.apply(params, img) #: (2, 1000)\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}