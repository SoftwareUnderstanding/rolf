{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2012.14311 (2020). [[pdf]](https://arxiv.org/pdf/2012.14311.pdf)\n\n[6] Zhao, Xuanqiang, et al. \"Practical distributed quantum information processing with LOCCNet.\" npj Quantum Information 7.1 (2021): 1-7. [[pdf]](https://arxiv.org/pdf/2101.12190.pdf)\n\n[7] Cao, Chenfeng, and Xin Wang. \"Noise-Assisted Quantum Autoencoder.\" Physical Review Applied 15.5 (2021): 054012. [[pdf]](https://journals.aps.org/prapplied/abstract/10.1103/PhysRevApplied.15.054012)\n\n## Frequently Asked Questions\n\n1. **Question:** What is quantum machine learning? What are the applications?\n\n    **Answer:** Quantum machine learning (QML) is an interdisciplinary subject that combines quantum computing (QC) and machine learning (ML). On the one hand, QML utilizes existing artificial intelligence technology to break through the bottleneck of quantum computing research. On the other hand, QML uses the information processing advantages of quantum computing to promote the development of traditional artificial intelligence. QML is not only suitable for quantum chemical simulations (with Variational Quantum Eigensolver) and other quantum problems. It also help researchers to solve classical optimization problems including knapsack problem, traveling salesman problem, and Max-Cut problem through the Quantum Approximate Optimization Algorithm.\n\n2. **Question:** I want to study QML, but I don't know much about quantum computing. Where should I start?\n\n    **Answer:** *Quantum Computation and Quantum Information* by Nielsen & Chuang is the classic introductory textbook to QC. We recommend readers to study Chapter 1, 2, and 4 of this book first. These chapters introduce the basic concepts, provide solid mathematical and physical foundations, and discuss the quantum circuit model widely used in QC. Readers can also go through Paddle Quantum's quick start guide, which contains a brief introduction to QC and interactive examples. After building a general understanding of QC, readers can try some cutting-edge QML applications provided as tutorials in Paddle Quantum.\n\n3. **Question:** Currently, there is no fault-tolerant large-scale quantum hardware. How can we develop quantum applications? \n\n    **Answer:** The development of useful algorithms does not necessarily require a perfect hardware. The latter is more of an engineering problem. With Paddle Quantum, one can develop, simulate, and verify the validity of self-innovated quantum algorithms. Then, researchers can choose to implement these tested quantum algorithms in a small scale hardware and see the actual performance of it. Following this line of reasoning, we can prepare ourselves with many candidates of useful quantum algorithms before the age of matured quantum hardware.\n    \n4. **Question:** What are the advantages of Paddle Quantum?\n\n    **Answer:** Paddle Quantum is an open-source QML toolkit based on Baidu PaddlePaddle. As the first open-source and industrial level deep learning platform in China, PaddlePaddle has the leading ML technology and rich functionality. With the support of PaddlePaddle, especially its dynamic computational graph mechanism, Paddle Quantum could easily train a QNN and with GPU acceleration. In addition, based on the high-performance quantum simulator developed by Institute for Quantum Computing (IQC) at Baidu, Paddle Quantum can simulate more than 20 qubits on personal laptops. Finally, Paddle Quantum provides many open-source QML tutorials for readers from different backgrounds. \n\n## Copyright and License\n\nPaddle Quantum uses [Apache-2.0 license](LICENSE).\n\n## References\n\n[1] [Quantum Computing - Wikipedia](https://en.wikipedia.org/wiki/Quantum_computing)\n\n[2] Nielsen, M. A. & Chuang, I. L. Quantum computation and quantum information. (2010).\n\n[3] Phillip Kaye, Laflamme, R. & Mosca, M. An Introduction to Quantum Computing. (2007).\n\n[4] [Biamonte, J. et al. Quantum machine learning. Nature 549, 195\u2013202 (2017).](https://www.nature.com/articles/nature23474)\n\n[5] [Schuld, M., Sinayskiy, I. & Petruccione, F. An introduction to quantum machine learning. Contemp. Phys. 56, 172\u2013185 (2015).](https://www.tandfonline.com/doi/abs/10.1080/00107514.2014.964942)\n\n[6] [Benedetti, M., Lloyd, E., Sack, S. & Fiorentini, M. Parameterized quantum circuits as machine learning models. Quantum Sci. Technol. 4, 043001 (2019).](https://iopscience.iop.org/article/10.1088/2058-9565/ab4eb5)"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[1] [Quantum Computing - Wikipedia](https://en.wikipedia.org/wiki/Quantum_computing)\n\n[2] Nielsen, M. A. & Chuang, I. L. Quantum computation and quantum information. (2010).\n\n[3] Phillip Kaye, Laflamme, R. & Mosca, M. An Introduction to Quantum Computing. (2007).\n\n[4] [Biamonte, J. et al. Quantum machine learning. Nature 549, 195\u2013202 (2017).](https://www.nature.com/articles/nature23474)\n\n[5] [Schuld, M., Sinayskiy, I. & Petruccione, F. An introduction to quantum machine learning. Contemp. Phys. 56, 172\u2013185 (2015).](https://www.tandfonline.com/doi/abs/10.1080/00107514.2014.964942)\n\n[6] [Benedetti, M., Lloyd, E., Sack, S. & Fiorentini, M. Parameterized quantum circuits as machine learning models. Quantum Sci. Technol. 4, 043001 (2019).](https://iopscience.iop.org/article/10.1088/2058-9565/ab4eb5)\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8601684915539866
      ],
      "excerpt": "    <img src=\"https://img.shields.io/badge/docs-link-green.svg?style=flat-square&logo=read-the-docs\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.854836641318266,
        0.9072595767468146
      ],
      "excerpt": "  <a href=\"https://pypi.org/project/paddle-quantum/\"> \n    <img src=\"https://img.shields.io/badge/pypi-v2.1.3-orange.svg?style=flat-square&logo=pypi\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9630811906933039
      ],
      "excerpt": "    <img src=\"https://img.shields.io/badge/license-Apache%202.0-blue.svg?style=flat-square&logo=apache\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9105368110547479,
        0.8968592401678916
      ],
      "excerpt": "  <a href=\"https://github.com/PaddlePaddle/Quantum\"> \n    <img src=\"https://img.shields.io/badge/OS-MacOS%20|%20Windows%20|%20Linux-lightgrey.svg?style=flat-square\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9813161029725735,
        0.9664456561658856,
        0.9747762585923935
      ],
      "excerpt": "title = {{Paddle Quantum}}, \nyear = {2020}, \nurl = {https://github.com/PaddlePaddle/Quantum}, } \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9813304453567294,
        0.9953462604448432,
        0.9999998451457635,
        0.9952826819495854,
        0.9999978343924881
      ],
      "excerpt": "[1] Wang, Youle, Guangxi Li, and Xin Wang. \"Variational quantum Gibbs state preparation with a truncated Taylor series.\" Physical Review Applied 16.5 (2021): 054035. [pdf] \n[2] Wang, Xin, Zhixin Song, and Youle Wang. \"Variational quantum singular value decomposition.\" Quantum 5 (2021): 483. [pdf] \n[3] Li, Guangxi, Zhixin Song, and Xin Wang. \"VSQL: Variational Shadow Quantum Learning for Classification.\" Proceedings of the AAAI Conference on Artificial Intelligence. Vol. 35. No. 9. 2021. [pdf] \n[4] Chen, Ranyiliu, et al. \"Variational quantum algorithms for trace distance and fidelity estimation.\" Quantum Science and Technology (2021). [pdf] \n[5] Wang, Kun, et al. \"Detecting and quantifying entanglement on near-term quantum devices.\" arXiv preprint arXiv:2012.14311 (2020). [pdf] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9712620773557584
      ],
      "excerpt": "[7] Cao, Chenfeng, and Xin Wang. \"Noise-Assisted Quantum Autoencoder.\" Physical Review Applied 15.5 (2021): 054012. [pdf] \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/PaddlePaddle/Quantum",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-05-18T00:20:52Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-28T03:52:16Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8645663886587414
      ],
      "excerpt": "Introduction and developments \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9861844083859518
      ],
      "excerpt": "Paddle Quantum (\u91cf\u6868) is a quantum machine learning (QML) toolkit developed based on Baidu PaddlePaddle. It provides a platform to construct and train quantum neural networks (QNNs) with easy-to-use QML development kits supporting combinatorial optimization, quantum chemistry and other cutting-edge quantum applications, making PaddlePaddle the first deep learning framework in China that supports quantum machine learning. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9695230544142335
      ],
      "excerpt": "Paddle Quantum aims at establishing a bridge between artificial intelligence (AI) and quantum computing (QC). It has been utilized for developing several quantum machine learning applications. With the PaddlePaddle deep learning platform empowering QC, Paddle Quantum provides strong support for scientific research community and developers in the field to easily develop QML applications. Moreover, it provides a learning platform for quantum computing enthusiasts. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8221369577785562
      ],
      "excerpt": "Simulation with 25+ qubits \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9207985869153841
      ],
      "excerpt": "Toolboxes for Chemistry & Optimization \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9414093578514904,
        0.8906892869009058
      ],
      "excerpt": "Users are encouraged to contact us through Github Issues or email quantum@baidu.com with general questions, unfixed bugs, and potential improvements. We hope to make Paddle Quantum better together with the community! \nWe also highly encourage developers to use Paddle Quantum as a research tool to develop novel QML algorithms. If your work uses Paddle Quantum, feel free to send us a notice via qml@baidu.com. We are always excited to hear that! Cite us with the following BibTeX: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9568293427349073
      ],
      "excerpt": "So far, we have done several projects with the help of Paddle Quantum as a powerful QML development platform. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8798626131631018,
        0.9888136326787302
      ],
      "excerpt": "Question: What is quantum machine learning? What are the applications? \nAnswer: Quantum machine learning (QML) is an interdisciplinary subject that combines quantum computing (QC) and machine learning (ML). On the one hand, QML utilizes existing artificial intelligence technology to break through the bottleneck of quantum computing research. On the other hand, QML uses the information processing advantages of quantum computing to promote the development of traditional artificial intelligence. QML is not only suitable for quantum chemical simulations (with Variational Quantum Eigensolver) and other quantum problems. It also help researchers to solve classical optimization problems including knapsack problem, traveling salesman problem, and Max-Cut problem through the Quantum Approximate Optimization Algorithm. \n",
      "technique": "Supervised classification"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "For those who are looking for explanation on the python class and functions provided in Paddle Quantum, we refer to our [API documentation page](https://qml.baidu.com/api/introduction.html).\n\n> We, in particular, denote that the current docstring specified in source code **is written in simplified Chinese**, this will be updated in later versions.\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/PaddlePaddle/Quantum/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 111,
      "date": "Wed, 29 Dec 2021 21:35:31 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/PaddlePaddle/Quantum/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "PaddlePaddle/Quantum",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/introduction/PaddleQuantum_Tutorial_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/introduction/PaddleQuantum_Functions_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/introduction/PaddleQuantum_GPU_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/introduction/PaddleQuantum_Tutorial_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/introduction/PaddleQuantum_Qchem_Tutorial_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/introduction/PaddleQuantum_GPU_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/introduction/PaddleQuantum_Qchem_Tutorial_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/introduction/PaddleQuantum_Functions_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/qnn_research/Expressibility_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/qnn_research/VQCC_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/qnn_research/Noise_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/qnn_research/Fisher_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/qnn_research/BarrenPlateaus_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/qnn_research/Gradient_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/qnn_research/BarrenPlateaus_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/qnn_research/Fisher_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/qnn_research/VQCC_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/qnn_research/Expressibility_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/qnn_research/Noise_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/qnn_research/Gradient_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/mbqc/PUBO_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/mbqc/MBQC_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/mbqc/QAOA_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/mbqc/PUBO_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/mbqc/MBQC_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/mbqc/QAOA_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/machine_learning/QGAN_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/machine_learning/QAutoencoder_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/machine_learning/QClassifier_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/machine_learning/QClassifier_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/machine_learning/VQSVD_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/machine_learning/QKernel_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/machine_learning/VSQL_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/machine_learning/VSQL_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/machine_learning/DataEncoding_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/machine_learning/VQSVD_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/machine_learning/QKernel_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/machine_learning/DataEncoding_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/machine_learning/QGAN_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/machine_learning/QAutoencoder_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/locc/EntanglementDistillation_LOCCNET_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/locc/EntanglementDistillation_LOCCNET_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/locc/QuantumTeleportation_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/locc/EntanglementDistillation_DEJMPS_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/locc/EntanglementDistillation_DEJMPS_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/locc/StateDiscrimination_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/locc/EntanglementDistillation_BBPSSW_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/locc/LOCCNET_Tutorial_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/locc/LOCCNET_Tutorial_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/locc/QuantumTeleportation_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/locc/EntanglementDistillation_BBPSSW_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/locc/StateDiscrimination_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/DistributedVQE_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/DistributedVQE_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/VQE_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/ClassicalShadow_Intro_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/ClassicalShadow_Application_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/SimulateHeisenberg_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/GibbsState_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/SimulateHeisenberg_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/VQSD_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/BuildingMolecule_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/SSVQE_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/ClassicalShadow_Application_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/VQE_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/ClassicalShadow_Intro_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/SSVQE_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/BuildingMolecule_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/VQSD_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/HamiltonianSimulation_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/HamiltonianSimulation_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/quantum_simulation/GibbsState_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/combinatorial_optimization/MAXCUT_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/combinatorial_optimization/DC-QAOA_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/combinatorial_optimization/ArbitrageOpportunityOptimation_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/combinatorial_optimization/DC-QAOA_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/combinatorial_optimization/MAXCUT_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/combinatorial_optimization/PortfolioDiversification_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/combinatorial_optimization/TSP_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/combinatorial_optimization/PortfolioDiversification_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/combinatorial_optimization/QAOA_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/combinatorial_optimization/ArbitrageOpportunityOptimation_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/combinatorial_optimization/PortfolioOptimization_CN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/combinatorial_optimization/TSP_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/combinatorial_optimization/PortfolioOptimization_EN.ipynb",
      "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/tutorial/combinatorial_optimization/QAOA_EN.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Our `qchem` module is based on `Psi4`, so before executing quantum chemistry, we have to install this Python package.\n\n> It is recommended that `Psi4` is installed in a Python 3.8 environment.\n\nWe highly recommend you to install `Psi4` via conda. **MacOS/Linux** user can use the command:\n\n```bash\nconda install psi4 -c psi4\n```\n\nFor **Windows** user, the command is:\n\n```bash\nconda install psi4 -c psi4 -c conda-forge\n```\n**Note:** Please refer to [Psi4](https://psicode.org/installs/v14/) for more download options.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "We recommend the following way of installing Paddle Quantum with `pip`,\n\n```bash\npip install paddle-quantum\n```\nor download all the files and finish the installation locally,\n\n```bash\ngit clone http://github.com/PaddlePaddle/quantum\ncd quantum\npip install -e .\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "This dependency will be automatically satisfied when users install Paddle Quantum. Please refer to [PaddlePaddle](https://www.paddlepaddle.org.cn/install/quick)'s official installation and configuration page. This project requires PaddlePaddle 2.2.0+.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.999833231880651,
        0.999833231880651,
        0.9219576000306172
      ],
      "excerpt": "Install PaddlePaddle \nInstall Paddle Quantum \nEnvironment setup for Quantum Chemistry module \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.933350151952
      ],
      "excerpt": "  <!-- PyPI --> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8989322995453481
      ],
      "excerpt": "    <img src=\"https://img.shields.io/badge/pypi-v2.1.3-orange.svg?style=flat-square&logo=pypi\"/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8837680365796365
      ],
      "excerpt": "  <!-- Python --> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8728884476373919
      ],
      "excerpt": "    <img src=\"https://img.shields.io/badge/OS-MacOS%20|%20Windows%20|%20Linux-lightgrey.svg?style=flat-square\"/> \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8606280910157142
      ],
      "excerpt": "Quick start \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/PaddlePaddle/Quantum/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/PaddlePaddle/Quantum/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'   Copyright (c) 2020 Paddle Quantum Authors. All Rights Reserve.\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Paddle Quantum (\u91cf\u6868)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Quantum",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "PaddlePaddle",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/PaddlePaddle/Quantum/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "Quleaf",
        "body": "# Release Note\r\n\r\n## New Features\r\n\r\n- Add the `schmidt_decompose()` function, which computes the Schmidt decomposition of a quantum state.\r\n- Add the `paddle_quantum.dataset` module, which provides the quantum version of common datasets, such as the MNIST dataset, the Iris dataset, etc.\r\n- Add the `QuantumFisher` and the `ClassicalFisher` classes, which compute the quantum Fisher information and the classical Fisher information.\r\n- Add the `expand()` method in the `UAnsatz` class, which dynamically expands the number of qubits in a quantum circuit.\r\n- Add the `plot_density_matrix_graph()` function in `paddle_quantum.utils`, which visualizes a density matrix.\r\n- Add the `plot_multi_qubits_state_in_bloch_sphere()` function in `paddle_quantum.utils`, which plots independent systems with multiple qubit states on the Bloch sphere.\r\n- Add the `image_to_density_matrix()` function to encode an image as a quantum state.\r\n\r\n### Quantum Chemistry\r\n\r\n* Add the `run_chem()` function in `paddle_quantum.qchem` which could use `\"hardware efficient\"` ansatz and `\"hartree fock\"` ansatz to calculate ground state energy for a given molecule. For details, please refer to our updated introduction to the quantum chemistry module.\r\n* Add the `QModel` class which could be used to define a customized variational ansatz for quantum chemistry calculation. For details, please refer to our updated introduction to the quantum chemistry module.\r\n\r\n## New Tutorials\r\n\r\n### Introduction\r\n\r\n- Add the tutorial *Quantum Chemistry in Paddle Quantum's qchem*, which explains how to use our upgraded quantum chemistry module to do ground state energy calculation.\r\n- Add the tutorial *Frequently Used Functions in Paddle Quantum*, which lists some frequently used functions in Paddle Quantum.\r\n\r\n### QNN Research\r\n\r\n- Add the tutorial *Quantum Fisher Information*, which briefly introduces the concepts of the classical and quantum Fisher information, along with their applications in quantum machine learning, and shows how to compute them with Paddle Quantum.\r\n\r\n### Quantum Simulation\r\n\r\n- Add the tutorial *Distributed Variational Quantum Eigensolver Based on Schmidt Decomposition*, which demonstrates how to implement a distributed quantum algorithm using Paddle Quantum.\r\n\r\n## Improvements\r\n\r\n- Improve the simulator performance in state_vector mode.\r\n- Update the introduction tutorial, including some typo fixes.\r\n- The `partial_trace_discontiguous()` function is now available.\r\n- The `construct_h_matrix()` method in the `Hamiltonian` class now supports specifying the number of qubits.\r\n- Enhance the performance of the Hamiltonian simulation experimentally, referring to the paper *Optimal quantum circuits for general two-qubit gates*.\r\n- Upgrade some tutorials with the latest code features.\r\n\r\n## Bug Fixes\r\n\r\n- Fix the bug in the `von_neumann_entropy()` function. Now it skips eigenvalue zero in the calculation process.\r\n- Fix the bug in the `update_param()` method which is caused by the incompatible update of the PaddlePaddle.\r\n- Fix the plot error in MAXCUT and DC-QAOA tutorials.\r\n- Fix the bug in the `get_1d_heisenberg_hamiltonian()` function.\r\n- Fix typos in the docs of `cy` and `cz` gates.\r\n- Fix some typos in tutorials.\r\n\r\n## Dependencies\r\n\r\n- `paddlepaddle`: updated from `>=2.1.2` to `>=2.2.0`.\r\n- `openfermion`: newly added.\r\n- `pyscf`: newly added for Linux and macOS platforms.\r\n\r\n",
        "dateCreated": "2021-12-10T15:44:53Z",
        "datePublished": "2021-12-10T16:31:29Z",
        "html_url": "https://github.com/PaddlePaddle/Quantum/releases/tag/v2.1.3",
        "name": "Paddle Quantum 2.1.3",
        "tag_name": "v2.1.3",
        "tarball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/tarball/v2.1.3",
        "url": "https://api.github.com/repos/PaddlePaddle/Quantum/releases/55062141",
        "zipball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/zipball/v2.1.3"
      },
      {
        "authorType": "User",
        "author_name": "Quleaf",
        "body": "# Release Note\r\n\r\n## New Modules\r\n\r\n### Quantum chemistry module\r\n\r\nAdd the quantum chemistry module `paddle_quantum.qchem`. This module, depending on `Psi4` and `OpenFermion`, can construct Hamiltonian applicable to quantum computers from chemical molecular structure and supports most platforms. To use the `qchem` module, please refer to the README file.\r\n\r\n### Time evolution simulation module\r\n\r\nAdd the module `paddle_quantum.trotter` for constructing circuits that simulate the time evolution of quantum systems. Arbitrarily high order Trotter-Suzuki circuits are provided as a built-in function `construct_trotter_circuit()`. Additionally, users can design custom time evolution circuits with user-specified permutation and coefficients. For more detailed usage, please refer to our tutorials on Hamiltonian simulation.\r\n\r\n### Measurement-based quantum computation module\r\n\r\nAdd the measurement-based quantum computation (MBQC) module `paddle_quantum.mbqc`. It supports the simulation of universal quantum computing with the MBQC model. Unlike the conventional quantum circuit model, MBQC has its unique way of computing and thus common circuit simulation tools cannot be directly used for the simulation of this model.\r\n\r\nAlong with this new module, we also provide some examples and tutorials. The provided examples are QAOA (Quantum Approximate Optimization Algorithm), VQSVD (Variational Quantum Singular Value Decomposition), and QKernel.\r\n\r\n## New Tutorials\r\n\r\n### Quantum chemistry\r\n\r\n- Add the tutorial *Building Molecular Hamiltonian* under the `quantum_simulation` folder, which explains how to obtain a Hamiltonian from a molecular structure.\r\n\r\n### Classical shadow\r\n\r\n- Add the tutorial *The Classical Shadow of Unknown Quantum States* under the `quantum_simulation` folder, which introduces the concept of classical shadow and its application.\r\n- Add the tutorial *Estimation of Quantum State Properties Based on the Classical Shadow* under the `quantum_simulation` folder, which shows how to estimate the expectation value of an observable using classical shadow.\r\n\r\n### Hamiltonian simulation\r\n\r\n- Add the tutorial *Hamiltonian Simulation with Product Formula* under the `quantum_simulation` folder, which shows how to perform digital quantum simulations based on Suzuki product formula.\r\n- Add the tutorial *Simulate the Spin Dynamics on a Heisenberg Chain* under the `quantum_simulation` folder, which demonstrates how to simulate the time evolution of a one-dimensional Heisenberg chain using both the built-in Trotter-Suzuki circuit and the custom time evolution circuits in Paddle Quantum.\r\n\r\n### QNN expressibility\r\n\r\n- Add the tutorial *Expressibility of Quantum Neural Network* under the `qun_research` folder, which introduces a method for quantitatively analyzing the expressibility of quantum neural networks and evaluates the expressibility of quantum neural network templates provided by Paddle Quantum at different depths.\r\n\r\n### Quantum compiling\r\n\r\n- Add the tutorial *Variational Quantum Circuit Compiling* under the `qnn_research` folder, which shows a process of simulating an unknown unitary operator by optimizing a parameterized quantum circuit.\r\n\r\n### Measurement-based quantum computation\r\n\r\n- Add the tutorial *MBQC Quick Start Guide* under the `mbqc` folder, which explains the basic concepts of MBQC.\r\n- Add the tutorial *Measurement-based Quantum Approximate Optimization Algorithm* under the `mbqc` folder, which shows how to implement the QAOA algorithm in the MBQC mode.\r\n- Add the tutorial *Polynomial Unconstrained Boolean Optimization Problem in MBQC* under the `mbqc` folder, which shows how to solve the max-cut problem and a specific PUBO problem using the QAOA algorithm in the MBQC mode.\r\n\r\nIn addition to these new tutorials, we update the Quick Start manual to include how to draw and display a Bloch sphere using functions `plot_state_in_bloch_sphere()` and `plot_rotation_in_bloch_sphere()` from the module `paddle_quantum.utils`. The tutorial *Variational Quantum Eigensolver* is  also updated to making use of the new `paddle_quantum.qchem` module.\r\n\r\n",
        "dateCreated": "2021-08-27T07:23:01Z",
        "datePublished": "2021-08-27T07:28:49Z",
        "html_url": "https://github.com/PaddlePaddle/Quantum/releases/tag/v2.1.2",
        "name": "Paddle Quantum 2.1.2",
        "tag_name": "v2.1.2",
        "tarball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/tarball/v2.1.2",
        "url": "https://api.github.com/repos/PaddlePaddle/Quantum/releases/48551665",
        "zipball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/zipball/v2.1.2"
      },
      {
        "authorType": "User",
        "author_name": "Quleaf",
        "body": "# Release Note\r\n\r\n## New Features\r\n\r\n### More quantum gates\r\n\r\n- Add controlled gates `cswap()`, `cy()`, `cz()`, `crx()`, `cyy()`, `crz()`, and `ccx()` in the `UAnsatz` class.\r\n- Add the S dagger gate `sdg()` and the T dagger gate `tdg()` in the `UAnsatz` class\r\n\r\n### Gradient calculation\r\n\r\n- Add the `ExpecVal` class in `paddle_quantum.expecval`, which is a PaddlePaddle Python operator for calculating the expectation value of an observable w.r.t the quantum state output by a quantum circuit. It supports the computation of the gradient w.r.t. the circuit's parameters either through the finite difference method or the parameter-shift method.\r\n- Add the `paddle_quantum.optimizer` module for using SciPy optimizers to train a circuit, including `ConjugateGradient`, `NewtonCG`, `Powell`, `SLSQP`, and `CustomOptimizer`. The `CustomOptimizer` class is a base class for all the other optimizers.\r\n- Add `finite_difference_gradient()`, `param_shift_gradient()`, and `linear_combinations_gradient()` in the `UAnsatz` class for computing the gradient of the expectation of an observable w.r.t. the parameters in a circuit.\r\n\r\n### Hamiltonian\r\n\r\nAdd the `Hamiltonian` class in `paddle_quantum.utils` for processing Hamiltonian. The main functions of this class are:\r\n\r\n- Construct a Hamiltonian from a Pauli string;\r\n- Get the matrix corresponding to the Hamiltonian;\r\n- Get the Pauli string corresponding to the Hamiltonian;\r\n- Addition, subtraction and scalar multiplication.\r\n\r\n### Classical shadow\r\n\r\n- Add `shadow_sample()` in `paddle_quantum.shadow` for sampling local Pauli measurement.\r\n- Add `shadow_trace()` in the `UAnsatz` class for estimating the expectation value of an observable through classical shadows.\r\n\r\n### Quantum finance\r\n\r\n- Add the `paddle_quantum.finance` module for handling some finance optimization problems.\r\n\r\n### Other features\r\n\r\n- Add `swap_test()` in `paddle_quantum.circuit` for constructing a swap test circuit.\r\n- Add `reset_state()` in the `UAnsatz` class for resetting a partial state.\r\n- Update `basis_encoding()`, `amplitude_encoding()`, and `angle_encoding()` to support encoding classical data to partial quantum state.\r\n- Update `vec()` in `paddle_quantum.state` to support generating arbitrary computational basis state.\r\n- Add `plot_state_in_bloch_sphere()` and `plot_rotation_in_bloch_sphere()` in `paddle_quantum.utils` for drawing a Bloch sphere.\r\n\r\n## New Tutorials\r\n\r\n### Gradient calculation\r\n\r\n- Add the tutorial *Calculating Gradient Using Quantum Circuit* under the `qnn_research` folder, which explains how to calculate gradient with quantum circuits and then use PaddlePaddle's or SciPy's optimizers to train an ansatz.\r\n\r\n### Quantum finance\r\n\r\n- Add three tutorials on *Arbitrage Opportunity Optimization*, *Portfolio Optimization*, and *Portfolio Diversification* under the `combinatorial_optimization` folder, which use the new `paddle_quantum.finance` module to solve these problems with quantum optimization algorithms.\r\n\r\n## Bug Fix\r\n\r\n- Fix the bug of ``t()`` gate in `paddle_quantum.locc`.",
        "dateCreated": "2021-08-17T10:35:00Z",
        "datePublished": "2021-08-17T10:40:04Z",
        "html_url": "https://github.com/PaddlePaddle/Quantum/releases/tag/v2.1.1",
        "name": "Paddle Quantum 2.1.1",
        "tag_name": "v2.1.1",
        "tarball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/tarball/v2.1.1",
        "url": "https://api.github.com/repos/PaddlePaddle/Quantum/releases/47966445",
        "zipball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/zipball/v2.1.1"
      },
      {
        "authorType": "User",
        "author_name": "Quleaf",
        "body": "# Release Note\r\n\r\n## Tutorials\r\n\r\n- Reorganize tutorials according to applications and research areas:\r\n  - Combinatorial Optimization\r\n  - LOCCNet\r\n  - Machine Learning\r\n  - QNN Research\r\n  - Quantum Simulation\r\n\r\n- Add five new tutorials:\r\n  - Large-scale QAOA via Divide-and-Conquer\r\n  - Encoding Classical Data into Quantum States\r\n  - Travelling Salesman Problem\r\n  - Quantum Kernel Methods\r\n  - Variational Shadow Quantum Learning\r\n\r\n## New Features\r\n\r\n- Add two new types of noise models: `reset` and `thermal_relaxation`.\r\n- Add four kinds of encoding methods, such that classical data can be encoded into quantum data via encoding functions: `basis_encoding`, `amplitude_encoding`, `angle_encoding`, `iqp_encoding`. For more information about encoding, please refer to our encoding tutorial.\r\n- Add three two-qubit parameterized gates: `rxx`, `ryy`, `rzz` and two-qubit M\u00f8lmer\u2013S\u00f8rensen gate (the native gate on ion-trap systems).\r\n- Add circuit drawer. The quantum circuit could be printed directly via `print(cir)`.",
        "dateCreated": "2021-05-18T11:41:44Z",
        "datePublished": "2021-05-18T13:14:42Z",
        "html_url": "https://github.com/PaddlePaddle/Quantum/releases/tag/v2.1.0",
        "name": "Paddle Quantum 2.1.0",
        "tag_name": "v2.1.0",
        "tarball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/tarball/v2.1.0",
        "url": "https://api.github.com/repos/PaddlePaddle/Quantum/releases/43132153",
        "zipball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/zipball/v2.1.0"
      },
      {
        "authorType": "User",
        "author_name": "Quleaf",
        "body": "# Release Note\r\n\r\n## Noise model\r\n\r\nPaddle Quantum now supports noise model, including `amplitude_damping`, `generalized_amplitude_damping`, `phase_damping`, `bit_flip`, `phase_flip`, `bit_phase_flip`, `depolarizing`, `pauli_channel`, `customized_channel`. The noise model could efficiently simulate quantum channels by Paddle Quantum.\r\n\r\nYou can refer to [this tutorial](https://qml.baidu.com/tutorials/simulating-noisy-quantum-circuits-with-paddle-quantum.html) to learn how to use this module.\r\n\r\n## New features\r\n\r\n- [`GHZ_state`](https://qml.baidu.com/api/paddle_quantum.state.html#paddle_quantum.state.GHZ_state): Now you can generate the GHZ-state directly with Paddle Quantum.\r\n- [`linear_entangled_layer`](https://qml.baidu.com/api/paddle_quantum.circuit.uansatz.html#paddle_quantum.circuit.UAnsatz.linear_entangled_layer): The entangled layer consisting of Ry gates, Rz gates, and CNOT gates, which only connect to its neighbors.\r\n",
        "dateCreated": "2021-04-09T11:27:17Z",
        "datePublished": "2021-04-09T14:58:20Z",
        "html_url": "https://github.com/PaddlePaddle/Quantum/releases/tag/v2.0.1",
        "name": "Paddle Quantum 2.0.1",
        "tag_name": "v2.0.1",
        "tarball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/tarball/v2.0.1",
        "url": "https://api.github.com/repos/PaddlePaddle/Quantum/releases/41189976",
        "zipball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/zipball/v2.0.1"
      },
      {
        "authorType": "User",
        "author_name": "Quleaf",
        "body": "# Release Note\r\n\r\nThe main update is the adaption to PaddlePaddle 2.0  with an improved model efficiency up to 40%.\r\n\r\n> The version of paddlepaddle should be 2.0.1+.\r\n\r\nSince there are many changes in PaddlePaddle 2.0, we need to adapt to it. The detailed change of API can be browsed in [API mapping table](https://www.paddlepaddle.org.cn/documentation/docs/zh/guides/09_others_information/api_mapping_cn.html).\r\n\r\n## Common PaddlePaddle  API Update\r\n\r\n1. Change `paddle.fluid.Layer` to `paddle.nn.Layer`.\r\n2. Change `paddle.fluid.dygraph.to_variable` to `paddle.to_tensor`.\r\n3. Change `paddle.fluid.initializer.Uniform` to `paddle.nn.initializer.Uniform`.\r\n4. Change `paddle.fluid.optimizer.AdamOptimizer` to `paddle.optimizer.Adam`.\r\n5. `with fluid.dygraph.gurad():` can be currently removed. PaddlePaddle is run in dynamic graph mode by default.\r\n6. After back-propagation, it is recommended to use `optimizer.clear_grad()` to clear gradients.\r\n7. PaddlePaddle now only supports global random seed, which can be set with `paddle.seed(seed_number)`.\r\n\r\n## The change of complex module\r\n\r\nThe complex module has been optimized in PaddlePaddle 2.0. The API of the complex module also has been changed. \r\n\r\n1. The real part: `paddle.real()`\r\n2. The imaginary part: `paddle.imag()`\r\n3. The conjugate of complex tensor: `paddle.conj()`",
        "dateCreated": "2021-03-09T13:30:50Z",
        "datePublished": "2021-03-15T05:11:42Z",
        "html_url": "https://github.com/PaddlePaddle/Quantum/releases/tag/v2.0.0",
        "name": "Paddle Quantum 2.0.0",
        "tag_name": "v2.0.0",
        "tarball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/tarball/v2.0.0",
        "url": "https://api.github.com/repos/PaddlePaddle/Quantum/releases/39797783",
        "zipball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/zipball/v2.0.0"
      },
      {
        "authorType": "User",
        "author_name": "Quleaf",
        "body": "# Release Note\r\n- Add a new module LOCCNet. With this module, Paddle Quantum can now efficiently simulate distributed quantum information processing tasks.\r\n- Add 6 tutorials on QML for quantum information processing.\r\n- Add useful functions for quantum information.\r\n\r\nCheck out more details at [our website](https://qml.baidu.com)!",
        "dateCreated": "2021-01-28T12:11:40Z",
        "datePublished": "2021-02-09T12:00:26Z",
        "html_url": "https://github.com/PaddlePaddle/Quantum/releases/tag/v1.2.0",
        "name": "Paddle Quantum 1.2.0",
        "tag_name": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/tarball/v1.2.0",
        "url": "https://api.github.com/repos/PaddlePaddle/Quantum/releases/37795473",
        "zipball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/zipball/v1.2.0"
      },
      {
        "authorType": "User",
        "author_name": "Quleaf",
        "body": "# Release Note\r\n- English version of Paddle Quantum \r\n- Website of Paddle Quantum is now available at qml.baidu.com\r\n- Optimize some functions \r\n- Support pip install",
        "dateCreated": "2021-01-11T11:26:09Z",
        "datePublished": "2021-02-09T11:56:30Z",
        "html_url": "https://github.com/PaddlePaddle/Quantum/releases/tag/v1.1.1",
        "name": "Paddle Quantum 1.1.1",
        "tag_name": "v1.1.1",
        "tarball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/tarball/v1.1.1",
        "url": "https://api.github.com/repos/PaddlePaddle/Quantum/releases/37795315",
        "zipball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/zipball/v1.1.1"
      },
      {
        "authorType": "User",
        "author_name": "Quleaf",
        "body": "# Release Note\r\n\r\n- Add self-innovated quantum simulators.\r\n- More templates of quantum neural networks and useful functions.\r\n- Tutorial for GPU mode.\r\n- Add 5 tutorials of QML models.",
        "dateCreated": "2020-09-14T12:38:08Z",
        "datePublished": "2021-02-09T11:53:51Z",
        "html_url": "https://github.com/PaddlePaddle/Quantum/releases/tag/v1.1.0",
        "name": "Paddle Quantum 1.1.0",
        "tag_name": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/tarball/v1.1.0",
        "url": "https://api.github.com/repos/PaddlePaddle/Quantum/releases/37795202",
        "zipball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/zipball/v1.1.0"
      },
      {
        "authorType": "User",
        "author_name": "Quleaf",
        "body": "# Release Note\r\n\r\nPaddle Quantum is a quantum machine learning (QML) toolkit developed based on Baidu PaddlePaddle.",
        "dateCreated": "2020-05-20T01:58:07Z",
        "datePublished": "2021-02-09T11:47:53Z",
        "html_url": "https://github.com/PaddlePaddle/Quantum/releases/tag/v1.0.0",
        "name": "Paddle Quantum 1.0.0",
        "tag_name": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/tarball/v1.0.0",
        "url": "https://api.github.com/repos/PaddlePaddle/Quantum/releases/37794949",
        "zipball_url": "https://api.github.com/repos/PaddlePaddle/Quantum/zipball/v1.0.0"
      }
    ],
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Now, you can try to run a program to verify whether Paddle Quantum has been installed successfully. Here we take quantum approximate optimization algorithm (QAOA) as an example.\n\n```bash\ncd paddle_quantum/QAOA/example\npython main.py\n```\n\n> For the introduction of QAOA, please refer to our [QAOA tutorial](https://github.com/PaddlePaddle/Quantum/tree/master/tutorial/combinatorial_optimization/QAOA_EN.ipynb).\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 333,
      "date": "Wed, 29 Dec 2021 21:35:31 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Now, you can try to run a program to verify whether Paddle Quantum has been installed successfully. Here we take quantum approximate optimization algorithm (QAOA) as an example.\n\n```bash\ncd paddle_quantum/QAOA/example\npython main.py\n```\n\n> For the introduction of QAOA, please refer to our [QAOA tutorial](https://github.com/PaddlePaddle/Quantum/tree/master/tutorial/combinatorial_optimization/QAOA_EN.ipynb).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "[Paddle Quantum Quick Start Manual](https://github.com/PaddlePaddle/Quantum/tree/master/introduction) is probably the best place to get started with Paddle Quantum. Currently, we support online reading and running the Jupyter Notebook locally. The manual includes the following contents:\n\n- Detailed installation tutorials for Paddle Quantum\n- Introduction to quantum computing and quantum neural networks (QNNs)\n- Introduction to Variational Quantum Algorithms (VQAs)\n- Introduction to Paddle Quantum\n- PaddlePaddle optimizer tutorial\n- Introduction to the quantum chemistry module in Paddle Quantum\n- How to train QNN with GPU\n- Some frequently used functions in Paddle Quantum\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "We provide tutorials covering quantum simulation, machine learning, combinatorial optimization, local operations and classical communication (LOCC), and other popular QML research topics. Each tutorial currently supports reading on our website and running Jupyter Notebooks locally. For interested developers, we recommend them to download Jupyter Notebooks and play around with it. Here is the tutorial list,\n\n- [Quantum Simulation](./tutorial/quantum_simulation)\n    1. [Building Molecular Hamiltonian](./tutorial/quantum_simulation/BuildingMolecule_EN.ipynb)\n    2. [Variational Quantum Eigensolver (VQE)](./tutorial/quantum_simulation/VQE_EN.ipynb)\n    3. [Subspace Search-Quantum Variational Quantum Eigensolver (SSVQE)](./tutorial/quantum_simulation/SSVQE_EN.ipynb)\n    4. [Variational Quantum State Diagonalization (VQSD)](./tutorial/quantum_simulation/VQSD_EN.ipynb)\n    5. [Gibbs State Preparation](./tutorial/quantum_simulation/GibbsState_EN.ipynb)\n    6. [The Classical Shadow of Unknown Quantum States](./tutorial/quantum_simulation/ClassicalShadow_Intro_EN.ipynb)\n    7. [Estimation of Quantum State Properties Based on the Classical Shadow](./tutorial/quantum_simulation/ClassicalShadow_Application_EN.ipynb)\n    8. [Hamiltonian Simulation with Product Formula](./tutorial/quantum_simulation/HamiltonianSimulation_EN.ipynb)\n    9. [Simulate the Spin Dynamics on a Heisenberg Chain](./tutorial/quantum_simulation/SimulateHeisenberg_EN.ipynb)\n    10. [Distributed Variational Quantum Eigensolver Based on Schmidt Decomposition](./tutorial/quantum_simulation/DistributedVQE_EN.ipynb)\n\n- [Machine Learning](./tutorial/machine_learning)\n    1. [Encoding Classical Data into Quantum States](./tutorial/machine_learning/DataEncoding_EN.ipynb)\n    2. [Quantum Classifier](./tutorial/machine_learning/QClassifier_EN.ipynb)\n    3. [Variational Shadow Quantum Learning (VSQL)](./tutorial/machine_learning/VSQL_EN.ipynb)\n    4. [Quantum Kernel Methods](./tutorial/machine_learning/QKernel_EN.ipynb)\n    5. [Quantum Autoencoder](./tutorial/machine_learning/QAutoencoder_EN.ipynb)\n    6. [Quantum GAN](./tutorial/machine_learning/QGAN_EN.ipynb)\n    7. [Variational Quantum Singular Value Decomposition (VQSVD)](./tutorial/machine_learning/VQSVD_EN.ipynb)\n\n- [Combinatorial Optimization](./tutorial/combinatorial_optimization)\n    1. [Quantum Approximation Optimization Algorithm (QAOA)](./tutorial/combinatorial_optimization/QAOA_EN.ipynb)\n    2. [Solving Max-Cut Problem with QAOA](./tutorial/combinatorial_optimization/MAXCUT_EN.ipynb)\n    3. [Large-scale QAOA via Divide-and-Conquer](./tutorial/combinatorial_optimization/DC-QAOA_EN.ipynb)\n    4. [Travelling Salesman Problem](./tutorial/combinatorial_optimization/TSP_EN.ipynb)\n    5. [Quantum Finance Application on Arbitrage Opportunity Optimization](./tutorial/combinatorial_optimization/ArbitrageOpportunityOptimation_EN.ipynb)\n    6. [Quantum Finance Application on Portfolio Optimization](./tutorial/combinatorial_optimization/PortfolioOptimization_EN.ipynb)\n    7. [Quantum Finance Application on Portfolio Diversification](./tutorial/combinatorial_optimization/PortfolioDiversification_EN.ipynb)\n\n- [LOCC with QNN (LOCCNet)](./tutorial/locc)\n    1. [Local Operations and Classical Communication in QNN (LOCCNet)](./tutorial/locc/LOCCNET_Tutorial_EN.ipynb)\n    2. [Entanglement Distillation -- the BBPSSW protocol](./tutorial/locc/EntanglementDistillation_BBPSSW_EN.ipynb)\n    3. [Entanglement Distillation -- the DEJMPS protocol](./tutorial/locc/EntanglementDistillation_DEJMPS_EN.ipynb)\n    4. [Entanglement Distillation -- Protocol design with LOCCNet](./tutorial/locc/EntanglementDistillation_LOCCNET_EN.ipynb)\n    5. [Quantum Teleportation](./tutorial/locc/QuantumTeleportation_EN.ipynb)\n    6. [Quantum State Discrimination](./tutorial/locc/StateDiscrimination_EN.ipynb)\n\n- [QNN Research](./tutorial/qnn_research)\n    1. [The Barren Plateaus Phenomenon on Quantum Neural Networks (Barren Plateaus)](./tutorial/qnn_research/BarrenPlateaus_EN.ipynb)\n    2. [Noise Model and Quantum Channel](./tutorial/qnn_research/Noise_EN.ipynb)\n    3. [Calculating Gradient Using Quantum Circuit](./tutorial/qnn_research/Gradient_EN.ipynb)\n    4. [Expressibility of Quantum Neural Network](./tutorial/qnn_research/Expressibility_EN.ipynb)\n    5. [Variational Quantum Circuit Compiling](./tutorial/qnn_research/VQCC_EN.ipynb)\n    6. [Quantum Fisher Information](./tutorial/qnn_research/Fisher_EN.ipynb)\n\nWith the latest LOCCNet module, Paddle Quantum can efficiently simulate distributed quantum information processing tasks. Interested readers can start with this [tutorial on LOCCNet](./tutorial/locc/LOCCNET_Tutorial_EN.ipynb). In addition, Paddle Quantum supports QNN training on GPU. For users who want to get into more details, please check out the tutorial [Use Paddle Quantum on GPU](./introduction/PaddleQuantum_GPU_EN.ipynb). Moreover, Paddle Quantum could design robust quantum algorithms under noise. For more information, please see [Noise tutorial](./tutorial/qnn_research/Noise_EN.ipynb).\n\nIn a recent update, the measurement-based quantum computation (MBQC) module has been added to Paddle Quantum. Unlike the conventional quantum circuit model, MBQC has its unique way of computing. Interested readers are welcomed to read our [tutorials](./tutorial/mbqc) on how to use the MBQC module and its use cases.\n\n",
      "technique": "Header extraction"
    }
  ]
}