{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1708.02002",
      "https://arxiv.org/abs/1906.02283"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8746679587221651,
        0.9999826447799447
      ],
      "excerpt": "Keras implementation of RetinaNet object detection as described in Focal Loss for Dense Object Detection \nby Tsung-Yi Lin, Priya Goyal, Ross Girshick, Kaiming He and Piotr Doll\u00e1r. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9998970329432648
      ],
      "excerpt": "ESRI Object Detection Challenge 2019. Winning implementation of the ESRI Object Detection Challenge 2019. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.897396717662689
      ],
      "excerpt": "Google Open Images Challenge 2018 15th place solution. Pretrained weights for keras-retinanet based on ResNet50, ResNet101 and ResNet152 trained on open images dataset. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fizyr/keras-retinanet",
    "technique": "GitHub API"
  },
  "contributors": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributors\nThis is a list of people who contributed patches to keras-retinanet.\nIf you feel you should be listed here or if you have any other questions/comments on your listing here,\nplease create an issue or pull request at https://github.com/fizyr/keras-retinanet/\n\nHans Gaiser &#104;&#46;&#103;&#97;&#105;&#115;&#101;&#114;&#64;&#102;&#105;&#122;&#121;&#114;&#46;&#99;&#111;&#109;\nMaarten de Vries &#109;&#97;&#97;&#114;&#116;&#101;&#110;&#64;&#100;&#101;&#45;&#118;&#114;&#105;&#46;&#101;&#115;\nValerio Carpani\nAshley Williamson\nYann Henon\nValeriu Lacatusu\nAndr\u00e1s Vidosits\nCristian Gratie\njjiunlin\nSorin Panduru\nRodrigo Meira de Andrade\nEnrico Liscio &#101;&#46;&#108;&#105;&#115;&#99;&#105;&#111;&#64;&#102;&#105;&#122;&#121;&#114;&#46;&#99;&#111;&#109;\nMihai Morariu\npedroconceicao\njjiun\nWudi Fang\nMike Clark\nhannesedvartsen\nMax Van Sande\nPierre D\u00e9rian\nori\nmxvs\nmwilder\nMuhammed Kocabas\nKoen Vijverberg\niver56\nhnsywangxin\nGuillaume Erhard\nEduardo Ramos\nDiegoAgher\nAlexander Pacha\nAgastya Kalra\nJiri BOROVEC\nntsagko\ncharlie / tianqi\njsemric\nMartin Zlocha\nRaghav Bhardwaj\nbw4sz\nMorten Back Nielsen\ndshahrokhian\nAlex / adreo00\nsimone.merello\nMatt Wilder\nJinwoo Baek\nEtienne Meunier\nDenis Dowling\ncclauss\nAndrew Grigorev\nZFTurbo\nUgoLouche\nRichard Higgins\nRajat /  rajat.goel\nphilipp.marquardt\npeacherwu\nPaul / pauldesigaud\nMartin Genet\nLeo / leonardvandriel\nLaurens Hagendoorn\nJulius / juliussimonelli\nHolyGuacamole\nFausto Morales\nborakrc\nBen Weinstein\nAnil Karaka\nAndrea Panizza\nBruno Santos",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-08-14T09:14:29Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-18T06:00:44Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9102050061251208
      ],
      "excerpt": "Keras implementation of RetinaNet object detection as described in Focal Loss for Dense Object Detection \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9814953369110919,
        0.9387258983553692,
        0.8613306685048161,
        0.8366608617724753,
        0.9118506434936099
      ],
      "excerpt": "This repository is deprecated in favor of the torchvision module. \nThis project should work with keras 2.4 and tensorflow 2.3.0, newer versions might break support. \nFor more information, check here. \nAn example of testing the network can be seen in this Notebook. \nIn general, inference of the network works as follows: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9185953605986811
      ],
      "excerpt": "Where boxes are shaped (None, None, 4) (for (x1, y1, x2, y2)), scores is shaped (None, None) (classification score) and labels is shaped (None, None) (label corresponding to the score). In all three outputs, the first dimension represents the shape and the second dimension indexes the list of detections. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9678934862730624,
        0.9860590232666685
      ],
      "excerpt": "Execution time on NVIDIA Pascal Titan X is roughly 75msec for an image of shape 1000x800x3. \nThe training procedure of keras-retinanet works with training models. These are stripped down versions compared to the inference model and only contains the layers necessary for training (regression and classification values). If you wish to do inference on a model (perform object detection on an image), you need to convert the trained model to an inference model. This is done as follows: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.955398221882359
      ],
      "excerpt": "Most scripts (like retinanet-evaluate) also support converting on the fly, using the --convert-model argument. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8862993450965896
      ],
      "excerpt": "Trained models can't be used directly for inference. To convert a trained model to an inference model, check here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9691064726018463
      ],
      "excerpt": "Results using the cocoapi are shown below (note: according to the paper, this configuration should achieve a mAP of 0.357). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9788275544820267
      ],
      "excerpt": "There are 3 RetinaNet models based on ResNet50, ResNet101 and ResNet152 trained on all 500 classes of the Open Images Dataset (thanks to @ZFTurbo). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9599021397466112,
        0.9479973697888695
      ],
      "excerpt": "For more information, check @ZFTurbo's repository. \nThe CSVGenerator provides an easy way to define your own datasets. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.923482454171257
      ],
      "excerpt": "add an annotation where x1, y1, x2, y2 and class_name are all empty: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8989769359878046
      ],
      "excerpt": "img_002.jpg contains a cat and a bird. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.969558359155243,
        0.855636029593669,
        0.9804835289411725
      ],
      "excerpt": "In some cases, the default anchor configuration is not suitable for detecting objects in your dataset, for example, if your objects are smaller than the 32x32px (size of the smallest anchors). In this case, it might be suitable to modify the anchor configuration, this can be done automatically by following the steps in the anchor-optimization repository. To use the generated configuration check here for an example config file and then pass it to train.py using the --config parameter. \nCreating your own dataset does not always work out of the box. There is a debug.py tool to help find the most common mistakes. \nParticularly helpful is the --annotations flag which displays your annotations on the images from your dataset. Annotations are colored in green when there are anchors available and colored in red when there are no anchors available. If an annotation doesn't have anchors available, it means it won't contribute to training. It is normal for a small amount of annotations to show up in red, but if most or all annotations are red there is cause for concern. The most common issues are that the annotations are too small or too oddly shaped (stretched out). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9721904077372956,
        0.9785234735294628,
        0.982715467608945,
        0.9562069364321671
      ],
      "excerpt": "Improving Apple Detection and Counting Using RetinaNet. This work aims to investigate the apple detection problem through the deployment of the Keras RetinaNet. \nImproving RetinaNet for CT Lesion Detection with Dense Masks from Weak RECIST Labels. Research project for detecting lesions in CT using keras-retinanet. \nNudeNet. Project that focuses on detecting and censoring of nudity. \nIndividual tree-crown detection in RGB imagery using self-supervised deep learning neural networks. Research project focused on improving the performance of remotely sensed tree surveys. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9907872416296326,
        0.9979551016616403,
        0.8733792790432264,
        0.9184207150924577
      ],
      "excerpt": "Lunar Rockfall Detector Project. The aim of this project is to map lunar rockfalls on a global scale using the available > 2 million satellite images. \nMars Rockfall Detector Project. The aim of this project is to map rockfalls on Mars. \nNATO Innovation Challenge. The winning team of the NATO Innovation Challenge used keras-retinanet to detect cars in aerial images (COWC dataset). \nMicrosoft Research for Horovod on Azure. A research project by Microsoft, using keras-retinanet to distribute training over multiple GPUs using Horovod on Azure. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9799263651856326,
        0.9685690794733859
      ],
      "excerpt": "Telenav.AI. For the detection of traffic signs using keras-retinanet. \nTowards Deep Placental Histology Phenotyping. This research project uses keras-retinanet for analysing the placenta at a cellular level. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8812893402162744,
        0.9844730238540494
      ],
      "excerpt": "boring-detector. I suppose not all projects need to solve life's biggest questions. This project detects the \"The Boring Company\" hats in videos. \ncomet.ml. Using keras-retinanet in combination with comet.ml to interactively inspect and compare experiments. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9416711974178343
      ],
      "excerpt": "poke.AI. An experimental AI that attempts to master the 3rd Generation Pokemon games. Using keras-retinanet for in-game mapping and localization. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8596563833599223
      ],
      "excerpt": "CRFNet. This network fuses radar and camera data to perform object detection for autonomous driving applications. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Keras implementation of RetinaNet object detection.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fizyr/keras-retinanet/releases",
    "technique": "GitHub API"
  },
  "faq": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* **I get the warning `UserWarning: No training configuration found in save file: the model was not compiled. Compile it manually.`, should I be worried?** This warning can safely be ignored during inference.\n* **I get the error `ValueError: not enough values to unpack (expected 3, got 2)` during inference, what to do?**. This is because you are using a train model to do inference. See https://github.com/fizyr/keras-retinanet#converting-a-training-model-to-inference-model for more information.\n* **How do I do transfer learning?** The easiest solution is to use the `--weights` argument when training. Keras will load models, even if the number of classes don't match (it will simply skip loading of weights when there is a mismatch). Run for example `retinanet-train --weights snapshots/some_coco_model.h5 pascal /path/to/pascal` to transfer weights from a COCO model to a PascalVOC training session. If your dataset is small, you can also use the `--freeze-backbone` argument to freeze the backbone layers.\n* **How do I change the number / shape of the anchors?** The train tool allows to pass a configuration file, where the anchor parameters can be adjusted. Check [here](https://github.com/fizyr/keras-retinanet-test-data/blob/master/config/config.ini) for an example config file.\n* **I get a loss of `0`, what is going on?** This mostly happens when none of the anchors \"fit\" on your objects, because they are most likely too small or elongated. You can verify this using the [debug](https://github.com/fizyr/keras-retinanet#debugging) tool.\n* **I have an older model, can I use it after an update of keras-retinanet?** This depends on what has changed. If it is a change that doesn't affect the weights then you can \"update\" models by creating a new retinanet model, loading your old weights using `model.load_weights(weights_path, by_name=True)` and saving this model. If the change has been too significant, you should retrain your model (you can try to load in the weights from your old model when starting training, this might be a better starting position than ImageNet).\n* **I get the error `ModuleNotFoundError: No module named 'keras_retinanet.utils.compute_overlap'`, how do I fix this?** Most likely you are running the code from the cloned repository. This is fine, but you need to compile some extensions for this to work (`python setup.py build_ext --inplace`).\n* **How do I train on my own dataset?** The steps to train on your dataset are roughly as follows:\n* 1. Prepare your dataset in the CSV format (a training and validation split is advised).\n* 2. Check that your dataset is correct using `retinanet-debug`.\n* 3. Train retinanet, preferably using the pretrained COCO weights (this gives a **far** better starting point, making training much quicker and accurate). You can optionally perform evaluation of your validation set during training to keep track of how well it performs (advised).\n* 4. Convert your training model to an inference model.\n* 5. Evaluate your inference model on your test or validation set.\n* 6. Profit!\n",
      "technique": "Header extraction"
    }
  ],
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1968,
      "date": "Mon, 20 Dec 2021 10:39:21 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/fizyr/keras-retinanet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "fizyr/keras-retinanet",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/fizyr/keras-retinanet/main/examples/ResNet50RetinaNet.ipynb"
    ],
    "technique": "File Exploration"
  },
  "identifier": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://zenodo.org/badge/latestdoi/100249425",
      "technique": "Regular expression"
    }
  ],
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1) Clone this repository.\n2) In the repository, execute `pip install . --user`.\n   Note that due to inconsistencies with how `tensorflow` should be installed,\n   this package does not define a dependency on `tensorflow` as it will try to install that (which at least on Arch Linux results in an incorrect installation).\n   Please make sure `tensorflow` is installed as per your systems requirements.\n3) Alternatively, you can run the code directly from the cloned  repository, however you need to run `python setup.py build_ext --inplace` to compile Cython code first.\n4) Optionally, install `pycocotools` if you want to train / test on the MS COCO dataset by running `pip install --user git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI`.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8796515879186231
      ],
      "excerpt": ": Using the installed script: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8146390325741508
      ],
      "excerpt": "Note that the train script uses relative imports since it is inside the keras_retinanet package. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8535488834458056,
        0.9312562951003059,
        0.8253012437314048,
        0.8541280192357247
      ],
      "excerpt": "you will need to switch it to use absolute imports. \nIf you installed keras-retinanet correctly, the train script will be installed as retinanet-train. \nHowever, if you make local modifications to the keras-retinanet repository, you should run the script directly from the repository. \nThat will ensure that your local changes will be used by the train script. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8493045872982723
      ],
      "excerpt": "All models can be downloaded from the releases page. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8900486270063179
      ],
      "excerpt": "from keras_retinanet.models import load_model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8606491779701725
      ],
      "excerpt": "keras_retinanet/bin/convert_model.py /path/to/training/model.h5 /path/to/save/inference/model.h5 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8195438485092353
      ],
      "excerpt": "retinanet-convert-model /path/to/training/model.h5 /path/to/save/inference/model.h5 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8009463799789988
      ],
      "excerpt": "xxx can be one of the backbones in resnet models (resnet50, resnet101, resnet152), mobilenet models (mobilenet128_1.0, mobilenet128_0.75, mobilenet160_1.0, etc), densenet models or vgg models. The different options are defined by each model in their corresponding python scripts (resnet.py, mobilenet.py, etc). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8024269194255869
      ],
      "excerpt": " Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.374 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8836148110067017,
        0.9175119970183425
      ],
      "excerpt": "It uses two CSV files: one file containing annotations and one file containing a class name to ID mapping. \nThe CSV file with annotations should contain one annotation per line. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8048422843416
      ],
      "excerpt": "By default the CSV generator will look for images relative to the directory of the annotations file. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594336311559628
      ],
      "excerpt": "To add these images to the dataset as negative examples, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8096489644431925
      ],
      "excerpt": "A full example: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8555811575201808
      ],
      "excerpt": "The class name to ID mapping file should contain one mapping per line. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8216270093103228
      ],
      "excerpt": "For example: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8344418973736468
      ],
      "excerpt": "Example output images using keras-retinanet are shown below. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/fizyr/keras-retinanet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright {yyyy} {name of copyright owner}\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Keras RetinaNet",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "keras-retinanet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "fizyr",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fizyr/keras-retinanet/blob/main/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "hgaiser",
        "body": "Changes since last release:\r\n\r\n- Fix VGG imagenet download.\r\n- Add numpy as dependency.\r\n- Convert generators to Keras `Sequence`s.\r\n- Float16 support.\r\n- Expose learning rate parameter.\r\n- Add validation loss as optional step.",
        "dateCreated": "2019-06-20T09:39:23Z",
        "datePublished": "2019-06-20T09:44:28Z",
        "html_url": "https://github.com/fizyr/keras-retinanet/releases/tag/0.5.1",
        "name": "",
        "tag_name": "0.5.1",
        "tarball_url": "https://api.github.com/repos/fizyr/keras-retinanet/tarball/0.5.1",
        "url": "https://api.github.com/repos/fizyr/keras-retinanet/releases/18114796",
        "zipball_url": "https://api.github.com/repos/fizyr/keras-retinanet/zipball/0.5.1"
      },
      {
        "authorType": "User",
        "author_name": "hgaiser",
        "body": "# Changes since last release\r\n\r\n- Evaluation uses progressbar\r\n- Correct initialization of weights for classification submodel\r\n- Fix issue with evaluating when there are gaps in classes\r\n- Add configuration (currently only for anchor settings)\r\n- Refactor how annotation are generated in the generators\r\n- Use CPU to convert model\r\n- Update to keras 2.2.4\r\n- Add NCHW support\r\n\r\nCredits to\r\n@adreo00 \r\n@borakrc \r\n@yecharlie \r\n@ddowling \r\n@enricoliscio \r\n@hgaiser \r\n@baek-jinoo \r\n@de-vri-es \r\n@penguinmenac3 \r\nMorten Back Nielsen\r\n@relh \r\n@vcarpani ",
        "dateCreated": "2018-10-17T11:18:23Z",
        "datePublished": "2018-10-17T11:28:11Z",
        "html_url": "https://github.com/fizyr/keras-retinanet/releases/tag/0.5.0",
        "name": "0.5.0",
        "tag_name": "0.5.0",
        "tarball_url": "https://api.github.com/repos/fizyr/keras-retinanet/tarball/0.5.0",
        "url": "https://api.github.com/repos/fizyr/keras-retinanet/releases/13476442",
        "zipball_url": "https://api.github.com/repos/fizyr/keras-retinanet/zipball/0.5.0"
      },
      {
        "authorType": "User",
        "author_name": "hgaiser",
        "body": "# Changes since last release\r\n\r\n- Optimizations for generators\r\n- Improved documentation.\r\n- OID Challenge 2018 support.\r\n- Keras version bumped to 2.2.0.\r\n- Add option for class specific filtering (NMS).\r\n- Add flake8 for code testing.\r\n- Merged COCO and non-COCO evaluation scripts.\r\n- Correct image preprocessing for MobileNet and DenseNet.\r\n\r\nCredits to: \r\n@apacha \r\n@hgaiser\r\n@de-vri-es \r\n@lvaleriu \r\n@cclauss \r\n@HolyGuacamole \r\n@leonardvandriel \r\n@PhilippMarquardt \r\n@vcarpani  ",
        "dateCreated": "2018-07-18T14:02:19Z",
        "datePublished": "2018-07-18T13:33:43Z",
        "html_url": "https://github.com/fizyr/keras-retinanet/releases/tag/0.4.1",
        "name": "",
        "tag_name": "0.4.1",
        "tarball_url": "https://api.github.com/repos/fizyr/keras-retinanet/tarball/0.4.1",
        "url": "https://api.github.com/repos/fizyr/keras-retinanet/releases/11986707",
        "zipball_url": "https://api.github.com/repos/fizyr/keras-retinanet/zipball/0.4.1"
      },
      {
        "authorType": "User",
        "author_name": "hgaiser",
        "body": "# Changes since last release\r\n\r\n- Implement DenseNet, VGG backbones.\r\n- Add option to freeze backbone layers.\r\n- Add logging of evaluation to tensorboard.\r\n- Add pretty colors for 80 classes.\r\n- Fix batch_size > 1 issues.\r\n- Refactor model outputs (should hopefully stay like this now).\r\n- Simplified training by splitting into \"training model\" and \"inference model\".\r\n- Add structure for backbone specific functions (such as `load_model`).\r\n- Encode regression as x1/y1/x2/y2 offsets (increases mAP to 0.350, previously 0.345).\r\n- Use `nearest` upsampling method.\r\n\r\nCredits to: \r\n@vidosits \r\n@cgratie \r\n@DiegoAgher \r\n@eduramiba \r\n@GuillaumeErhard \r\n@Muhannes \r\n@hgaiser\r\n@iver56 \r\n@jjiunlin \r\n@srslynow \r\n@de-vri-es \r\n@Ori226 \r\n@pedroconceicao \r\n@pderian \r\n@rodrigo2019 \r\n@lvaleriu \r\n@yhenon ",
        "dateCreated": "2018-05-15T08:56:58Z",
        "datePublished": "2018-05-12T16:55:37Z",
        "html_url": "https://github.com/fizyr/keras-retinanet/releases/tag/0.3.1",
        "name": "",
        "tag_name": "0.3.1",
        "tarball_url": "https://api.github.com/repos/fizyr/keras-retinanet/tarball/0.3.1",
        "url": "https://api.github.com/repos/fizyr/keras-retinanet/releases/10971626",
        "zipball_url": "https://api.github.com/repos/fizyr/keras-retinanet/zipball/0.3.1"
      },
      {
        "authorType": "User",
        "author_name": "hgaiser",
        "body": "# Changes since last release\r\n\r\n- Corrected FPN architecture as per paper.\r\n- Set default image size to minimum of 800px.\r\n- Change NMS to perform per-class NMS.\r\n- Small correction for bbox transform.\r\n- Add OID data generator.\r\n- Change default NMS threshold to 0.5.\r\n- Add MobileNet backbone.\r\n- Add tensorboard callback.\r\n- Add tool for debugging datasets.\r\n- Improve speed of data augmentation methods.\r\n- Add ability to resume training.\r\n- Add evaluation tool for custom datasets (only computes mAP at the moment).\r\n- Add `skip_mismatch` to weights loading, allows transfer learning from pretrained COCO model.\r\n\r\nCredits to: \r\n@awilliamson \r\n@hgaiser\r\n@de-vri-es \r\n@mxvs \r\n@wassname \r\n@mkocabas \r\n@lvaleriu\r\n",
        "dateCreated": "2018-03-03T09:21:54Z",
        "datePublished": "2018-03-03T09:53:05Z",
        "html_url": "https://github.com/fizyr/keras-retinanet/releases/tag/0.2",
        "name": "0.2",
        "tag_name": "0.2",
        "tarball_url": "https://api.github.com/repos/fizyr/keras-retinanet/tarball/0.2",
        "url": "https://api.github.com/repos/fizyr/keras-retinanet/releases/9922691",
        "zipball_url": "https://api.github.com/repos/fizyr/keras-retinanet/zipball/0.2"
      },
      {
        "authorType": "User",
        "author_name": "de-vri-es",
        "body": "",
        "dateCreated": "2018-01-09T08:30:58Z",
        "datePublished": "2018-01-15T14:32:13Z",
        "html_url": "https://github.com/fizyr/keras-retinanet/releases/tag/0.1",
        "name": "0.1",
        "tag_name": "0.1",
        "tarball_url": "https://api.github.com/repos/fizyr/keras-retinanet/tarball/0.1",
        "url": "https://api.github.com/repos/fizyr/keras-retinanet/releases/9238290",
        "zipball_url": "https://api.github.com/repos/fizyr/keras-retinanet/zipball/0.1"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4244,
      "date": "Mon, 20 Dec 2021 10:39:21 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "For training on [Pascal VOC](http://host.robots.ox.ac.uk/pascal/VOC/), run:\n```shell\n#: Running directly from the repository:\nkeras_retinanet/bin/train.py pascal /path/to/VOCdevkit/VOC2007\n\n#: Using the installed script:\nretinanet-train pascal /path/to/VOCdevkit/VOC2007\n```\n\nFor training on [MS COCO](http://cocodataset.org/#home), run:\n```shell\n#: Running directly from the repository:\nkeras_retinanet/bin/train.py coco /path/to/MS/COCO\n\n#: Using the installed script:\nretinanet-train coco /path/to/MS/COCO\n```\n\nFor training on Open Images Dataset [OID](https://storage.googleapis.com/openimages/web/index.html)\nor taking place to the [OID challenges](https://storage.googleapis.com/openimages/web/challenge.html), run:\n```shell\n#: Running directly from the repository:\nkeras_retinanet/bin/train.py oid /path/to/OID\n\n#: Using the installed script:\nretinanet-train oid /path/to/OID\n\n#: You can also specify a list of labels if you want to train on a subset\n#: by adding the argument 'labels_filter':\nkeras_retinanet/bin/train.py oid /path/to/OID --labels-filter=Helmet,Tree\n\n#: You can also specify a parent label if you want to train on a branch\n#: from the semantic hierarchical tree (i.e a parent and all children)\n(https://storage.googleapis.com/openimages/challenge_2018/bbox_labels_500_hierarchy_visualizer/circle.html)\n#: by adding the argument 'parent-label':\nkeras_retinanet/bin/train.py oid /path/to/OID --parent-label=Boat\n```\n\n\nFor training on [KITTI](http://www.cvlibs.net/datasets/kitti/eval_object.php), run:\n```shell\n#: Running directly from the repository:\nkeras_retinanet/bin/train.py kitti /path/to/KITTI\n\n#: Using the installed script:\nretinanet-train kitti /path/to/KITTI\n\nIf you want to prepare the dataset you can use the following script:\nhttps://github.com/NVIDIA/DIGITS/blob/master/examples/object-detection/prepare_kitti_data.py\n```\n\n\nFor training on a [custom dataset], a CSV file can be used as a way to pass the data.\nSee below for more details on the format of these CSV files.\nTo train using your CSV, run:\n```shell\n#: Running directly from the repository:\nkeras_retinanet/bin/train.py csv /path/to/csv/file/containing/annotations /path/to/csv/file/containing/classes\n\n#: Using the installed script:\nretinanet-train csv /path/to/csv/file/containing/annotations /path/to/csv/file/containing/classes\n```\n\nIn general, the steps to train on your own datasets are:\n1) Create a model by calling for instance `keras_retinanet.models.backbone('resnet50').retinanet(num_classes=80)` and compile it.\n   Empirically, the following compile arguments have been found to work well:\n```python\nmodel.compile(\n    loss={\n        'regression'    : keras_retinanet.losses.smooth_l1(),\n        'classification': keras_retinanet.losses.focal()\n    },\n    optimizer=keras.optimizers.Adam(lr=1e-5, clipnorm=0.001)\n)\n```\n2) Create generators for training and testing data (an example is show in [`keras_retinanet.preprocessing.pascal_voc.PascalVocGenerator`](https://github.com/fizyr/keras-retinanet/blob/master/keras_retinanet/preprocessing/pascal_voc.py)).\n3) Use `model.fit_generator` to start training.\n\n",
      "technique": "Header extraction"
    }
  ]
}