{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1412.6980\r\n\r\nWe used the following paper as a parallelisation reference for neural networks:\r\nhttps://papers.nips.cc/paper/2006/file/77ee3bc58ce560b86c2b59363281e914-Paper.pd"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "\r\nWe used the following lecture to implement gradient descent:\r\nhttps://web.stanford.edu/class/cs224n/readings/gradient-notes.pdf\r\n\r\nWe used the adam paper to implement adam:\r\nhttps://arxiv.org/abs/1412.6980\r\n\r\nWe used the following paper as a parallelisation reference for neural networks:\r\nhttps://papers.nips.cc/paper/2006/file/77ee3bc58ce560b86c2b59363281e914-Paper.pdf",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8130052599129608
      ],
      "excerpt": "Implement non-gradient descent based learning systems (evolution, etc...) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vanyle/vlearn",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-04-29T16:23:56Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-08-09T18:34:58Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9460128615040106,
        0.9613299126766547,
        0.9359911549151746
      ],
      "excerpt": "VLearn is a C++ library containing all sort of stuff out of the box to make cool projects machine learning projects. \nEvery aspect of VLearn is separated in a different folder. \nWhile VLearn contains machine learning features, it also has methods for file manipulation, networking and serialization, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9863377709314848,
        0.9713242940360692,
        0.9536394259274968,
        0.8332722264997326,
        0.8967440431596041,
        0.8381999205098578
      ],
      "excerpt": "VLearn is the framework used for the Distributed Machine Learning project. \nOur goal is to be faster than tensorflow. No more waiting for days to train your model. \nTo do this, we provide feature to distribute the computation across devices and we support more GPUs. \nWe plan to have a CUDA and an OpenCL backend. \nThe machine learning related code is in the ml folder. \nWe provide code to build and train a neural network, with methods similar to the keras ones. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8514189657081398
      ],
      "excerpt": "The methods are similar to the ones in Python. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9570831619124514
      ],
      "excerpt": "VCrash allows us to print stack traces and causes of crash even when no debugger is attached to the program. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9394449182630016
      ],
      "excerpt": "Implement for optimizer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A machine learning framework written in C++ designed for distributed computing ",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "\r\nCheckout `/doc/` for detailed documentation of every package.\r\n`/doc/` contains an `index.html` with auto-generated searchable documentation for every package.\r\nFor examples, see the `/test/` folder, it contains working code examples of most features of vtoolbox.\r\n\r\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vanyle/vlearn/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 07:31:35 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/vanyle/vlearn/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "vanyle/vlearn",
    "technique": "GitHub API"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/vanyle/vlearn/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "Makefile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "VLearn",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "vlearn",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "vanyle",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vanyle/vlearn/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Mon, 27 Dec 2021 07:31:35 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "\r\nVLearn compiles to a static library (vlearn.a) that you can then link against.\r\nWhen linking vlearn, you should also link with dbghelp on windows to access the debugging features.\r\n\r\nVLearn is compiled with the vapm build system and the MinGW compiler. VLearn aims to be compatible with Windows and Linux.\r\nI won't add compatibility with the Microsoft Visual C++ Compiler but I will accept merge requests adding this compatibility.\r\n\r\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "\r\nExamples of how to use VLearn are available in the `test` folder.\r\nHere is how to train a network to learn a linear operation:\r\n\r\n```cpp\r\n#:include <... put all the includes ...>\r\n\r\nusing namespace vio;\r\n\r\nvoid main(){\r\n\t// Define the network\r\n\tNeuralNetwork nn;\r\n\tDenseLayer l1(3,4); // input size: 3 floats\r\n\tDenseLayer l2(4,1); // output size: 1 float\r\n\tl1.randomInit(5);\r\n\tl2.randomInit(5);\r\n\tnn.layers.push_back(&l1);\r\n\tnn.layers.push_back(&l2);\r\n\r\n\tnn.prepare();  // compile the network.\r\n\r\n\t// let's generate some data to train the network !\r\n\t// We try to teach the network a simple linear function.\r\n\t// You can change this to try to make it learn various stuff.\r\n\tstd::vector<Vector> trainingInputs;\r\n\tstd::vector<Vector> trainingOutputs;\r\n\tfor(u32 i = 0;i < 1000;i++){\r\n\t\tVector newIn(3);\r\n\t\tVector newOut(1);\r\n\r\n\t\tnewIn.at(0) = randomFloat()*20 - 10;\r\n\t\tnewIn.at(1) = randomFloat()*20 - 10;\r\n\t\tnewIn.at(2) = randomFloat()*20 - 10;\r\n\r\n\t\tnewOut.at(0) = newIn.get(0) * 3 + newIn.get(1) * 5 + newIn.get(2) * 0;\r\n\r\n\t\ttrainingInputs.push_back(std::move(newIn));\r\n\t\ttrainingOutputs.push_back(std::move(newOut));\r\n\t}\r\n\t\r\n\tfor(u32 i = 0;i < 1000;i++){\r\n\t\tnn.train(trainingInputs,trainingOutputs,0.001); // 0.001 is optimal, it's the learning rate\r\n\t}\r\n\tfloat e = nn.loss(trainingInputs,trainingOutputs);\r\n\tdebug(\"Loss : %f\",e);\r\n\r\n\t// Test the network:\r\n\tVector my_input(3);\r\n\tmy_input.at(0) = 3;\r\n\tmy_input.at(1) = 5;\r\n\tmy_input.at(2) = -3;\r\n\tVector my_output = nn.apply(my_input); // evaluate the network on the input\r\n\tmy_output.print();\r\n}\r\n```\r\n\r\n",
      "technique": "Header extraction"
    }
  ]
}