{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1810.04805"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[1] [From doc2query to docTTTTTquery](https://cs.uwaterloo.ca/~jimmylin/publications/Nogueira_Lin_2019_docTTTTTquery-v2.pdf), Rodrigo Nogueira and Jimmy Lin, 2020\n\n[2] [TILDE: Term Independent Likelihood moDEl for Passage Re-ranking](http://ielab.io/publications/pdfs/arvin2021tilde.pdf), Shengyao Zhuang and Guido Zuccon, 2021\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8919498136264752
      ],
      "excerpt": "2) Generate abstracts for a given title (title_to_abs). \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ArvinZhuang/BiTAG",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-06-26T00:53:33Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-11T23:31:05Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8880448729386602
      ],
      "excerpt": "BiTAG is a T5-based text generator that performs two types of generation:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9315397390003348
      ],
      "excerpt": "The basic idea of BiTAG is similar to docTTTTTquery [1] but trained with BiQDL [2] loss function.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8132070972190241
      ],
      "excerpt": "We relay on transformers and pytorch-lightning to train BiTAG.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9154022665165867
      ],
      "excerpt": "By default, it will use t5-large and 4 gpus with batch size of 32 per gpu. A model checkpoint will be saved in ckpts/ at the end of each epoch. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ArvinZhuang/BiTAG/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Sat, 25 Dec 2021 13:28:11 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ArvinZhuang/BiTAG/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ArvinZhuang/BiTAG",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8121308172807988,
        0.9965998725771213
      ],
      "excerpt": "We relay on transformers and pytorch-lightning to train BiTAG.  \nIf you want to train BiTAG by yourself, first install the dependencies required in this repo by pip install -r requirements.txt. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9005574603795103
      ],
      "excerpt": "python3 create_dataset.py --date_from 2000-06-01 --date_util 2021-06-01 --category cs \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8738374149701011
      ],
      "excerpt": "After you create your training set, you can simply run python3 train.py to start the training. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ArvinZhuang/BiTAG/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2021 Shengyao Zhuang\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "BiTAG: Bidirectional Title/Abstract Generator",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "BiTAG",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ArvinZhuang",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ArvinZhuang/BiTAG/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Sat, 25 Dec 2021 13:28:11 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you just want to use BiTAG to generate title or abstract for you, then you only need to install [transformers](https://github.com/huggingface/transformers) library by `pip install transformers`.\n\nAfter you install the library, you can download and run BiTAG with the following code:\n```\nfrom transformers import AutoModelForSeq2SeqLM, T5Tokenizer\n\nmodel = AutoModelForSeq2SeqLM.from_pretrained(\"ArvinZhuang/BiTAG-t5-large\")\ntokenizer = T5Tokenizer.from_pretrained(\"t5-large\")\n\ntext = \"abstract: [your abstract]\"  #: use 'title:' as the prefix for title_to_abs task.\ninput_ids = tokenizer.encode(text, return_tensors='pt')\n\noutputs = model.generate(\n    input_ids,\n    do_sample=True,\n    max_length=500,\n    top_p=0.9,\n    top_k=20,\n    temperature=1,\n    num_return_sequences=10,\n)\n\nprint(\"Output:\\n\" + 100 * '-')\nfor i, output in enumerate(outputs):\n    print(\"{}: {}\".format(i+1, tokenizer.decode(output, skip_special_tokens=True)))\n\n```\nNote: the code above does generate candidate titles for your abstract, if you want to generate abstract for a given title, you need to change the prefix `abstract: ` to `title: `.\n\nI also provided some other generation strategies in `generate.py` script. To play around with it, you can simply change the config in `generation_confg.yaml` file and then run `python3 generate.py`.\n\n\nHere are some title suggestions made by BiTAG for the [BERT](https://arxiv.org/abs/1810.04805) paper.\n\n```\nOutput:\n----------------------------------------------------------------------------------------------------\n1: BERT: Training Bidirectional Transformers for Language Representation\n2: BERT: Bidirectional Encoder Representations for Natural Language Processing\n3: Bidirectional Encoder Representations from Transformers\n4: Deep Bidirectional Language Representations from Transformers\n5: Bidirectional Encoder Representations from Transformers for Natural Language Processing\n6: BERT: A Pre-Trained Language Representation Model\n7: BERT: Bidirectional Encoder Representations for Natural Language Processing\n8: Pre-trained Models of Unidirectional Representations for Natural Language Processing Tasks using Bidirectional Transformers\n9: BiDirectional Encoder Representations from Transformers for Natural Language Processing and Question Answering\n10: BERT: Bidirectional Encoder Representations from Transformers\n```\n\nHere is an abstract that BiTAG writes for BERT:\n\n\nBidirectional Transformer (BT) is a technique for pre-training a deep neural network to learn Bidirectional Transformer Models (DT-MNTs) for language understanding. \nWe develop BERT (Bidirectional Bidirectional Transformer) for a DL-to-L LSTM task, where the training set is a mixture of Bidirectional Transformers (BTs) whose inputs are bidirectional, respectively, to train the deep network. However, BERT is typically trained on high-dimensional BERT and, due to the difference between the two tasks, we find that this pre-training has a significant impact on language understanding performance. Extensive experiments on two real-world tasks show that BERT is both accurate and able to achieve competitive performance and efficiency on both the two benchmarks.\n\n",
      "technique": "Header extraction"
    }
  ]
}