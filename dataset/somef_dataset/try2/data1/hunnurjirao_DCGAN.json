{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[1] https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html#\n\n[2] https://arxiv.org/pdf/1511.06434.pdf\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9156566588472104
      ],
      "excerpt": "Now let us consider 1st term, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9156566588472104
      ],
      "excerpt": "Now let us consider 2nd term, \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hunnurjirao/DCGAN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-06-21T06:10:59Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-03T06:02:32Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Generative Adversarial Networks (GANs) are one of the most interesting ideas in computer science today. Here two models named Generator and Discriminator are trained simultaneously. As the name says Generator generates the fake images or we can say it generates a random noise and the Discriminator job is to classify whether the image is fake or not. Here the only job of Generator is to fake the Discriminator. In this project we are using DCGAN(Deep Convolutional Generative Adversarial Network). A DCGAN is a direct extension of the GAN described above, except that it explicitly uses convolutional and convolutional-transpose layers in the discriminator and generator, respectively. DCGANs actually comes under Unsupervised Learning and was first described by Radford et. al. in the paper Unsupervised Representation Learning With Deep Convolutional Generative Adversarial Networks.\n\n![](https://miro.medium.com/max/2850/1*Mw2c3eY5khtXafe5W-Ms_w.jpeg)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9298585458322618,
        0.8285359754276377,
        0.9758704738718605
      ],
      "excerpt": "The only job of generator is to generate fake images and to fool the discriminator. It gives the fake images to the discriminator and says \"Hey, these are real Images!\" to the    discriminator. \nThis is accomplished through a series of strided two dimensional convolutional transpose layers, each paired with a 2d batch norm layer and a relu activation. \nThe output of the generator is fed through a tanh function to return it to the input data range of [-1,1]. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9626538668308963
      ],
      "excerpt": "It classifies whether the given image is of real face or not. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8098003729029192,
        0.9769116819559511
      ],
      "excerpt": "The network looks quite opposite to the discriminator. \nAs mentioned, the discriminator is a binary classification network that takes an image as input and outputs a scalar probability that the input image is real (as opposed to     fake). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9368419115056911
      ],
      "excerpt": "   m is number of samples, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.934020044940855,
        0.8745989552159651
      ],
      "excerpt": "   G(z) is Generator where z(i) is latent vector or random noise. \nIf you have idea about cost function, it is similar to it. Here we use Binary Cross Entropy as a loss function. Our aim is to make this loss function zero. To do that we want to make two terms zero(1st term = log(D(x(i))) and 2nd term is log(1 - D(G(z(i)))) ) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8778556607631504
      ],
      "excerpt": "To make 1st term zero we want to make D(x(i)) = 1. This means that the discriminator want to detect the training examples as real images. Most probably it is equal to 1. there is no problem with the 1st term. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Generation of Fake images ",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hunnurjirao/DCGAN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 21 Dec 2021 01:16:41 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/hunnurjirao/DCGAN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "hunnurjirao/DCGAN",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/hunnurjirao/DCGAN/master/model.ipynb"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/hunnurjirao/DCGAN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "DCGAN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "DCGAN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "hunnurjirao",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hunnurjirao/DCGAN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Tue, 21 Dec 2021 01:16:41 GMT"
    },
    "technique": "GitHub API"
  }
}