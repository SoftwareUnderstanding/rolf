{
  "citation": [
    {
      "confidence": [
        0.9096300081904096
      ],
      "excerpt": ": Test object detection on a single image \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.834861314340703
      ],
      "excerpt": "* Better colormap/labeling for object detection draw \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tykurtz/tensorflow_models",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-09-13T00:01:01Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-03-27T12:44:08Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9449662639579396,
        0.905108190687706
      ],
      "excerpt": "This repository is a C++ ROS wrapper around different networks pulled from tensorflow/models \nThere are currently three target functionalities from this repository. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9427293369960105,
        0.9222781782417718
      ],
      "excerpt": "The use case here was to estimate per pixel what the percentage likelihood that it belonged to a road, floor, street, etc. type class. In particular, I was looking to adopt this for an indoor robot working in the retail space. This is why I selected ADE20K as a dataset as it contains many examples of indoor images with segmentation labels. The approach here was to modify DeepLabv3 trained on ADE20K by taking the linear outputs before the ArgMax layer, and applying a softmax operation. \nThis should be considered only a starting point and you will likely to fine-tune the model for your target environment. While the main draw of ADE20K was the fact it contained training examples of indoor scenes, the labeling policy wasn't appropriate for this task in particular (see https://github.com/CSAILVision/sceneparsing/blob/master/objectInfo150.csv for list of classes). For example, labeling policies that I would find to be more robust are cityscapes including dynamic and static object classes, and wilddash including a 'void' class denoting invalid sensor input. ADE20K does not have a 'catch all' type label for generic objects nor a void label for sensor failures. Going through the dataset, one can see many examples of objects on the floor being included in the floor class. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.861704430508777
      ],
      "excerpt": ": Test estimation of driveable terrain on a single image \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9452804636317704
      ],
      "excerpt": "One of my goals was efficiency with the target language being C++. From a ROS perspective, this gives access to image_transport and nodelets, which cuts down on unnecessary serializing/deserializing of images. Due to not using python, this requires building tensorflow from source, see https://github.com/tradr-project/tensorflow_ros_cpp#c-abi-difference-problems \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.885764420405679
      ],
      "excerpt": "- Only supports YOLO v3, but no nodelet support \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9172179865732762
      ],
      "excerpt": "- Catkin-friendly C++ bindings for tensorflow. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9412819124014594
      ],
      "excerpt": "- Source of the FindTensorflow.cmake file in this project \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8910802617687533
      ],
      "excerpt": "* Add script to pull models instead of saving on github (Squash after doing this) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "ROS wrapper around networks from tensorflow/models",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tykurtz/tensorflow_models/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Mon, 27 Dec 2021 11:34:15 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/tykurtz/tensorflow_models/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "tykurtz/tensorflow_models",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/tykurtz/tensorflow_models/master/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/tykurtz/tensorflow_models/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9881639074269668
      ],
      "excerpt": "Follow https://www.tensorflow.org/install/source to setup CUDA, install bazel, and build tensorflow from source. Be sure to verify the correct kernel, tensorflow, bazel, CUDA, and cudnn versions. You can reference the dockerfile for more details on building from source. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9664288317009815
      ],
      "excerpt": "pip install /tmp/pip/tensorflow-2.4.0-cp36-cp36m-linux_x86_64.whl \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9649178499032509
      ],
      "excerpt": "apt install ros-melodic-video-stream-opencv \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8716201614451171
      ],
      "excerpt": "* Remove build dependency on tensorflow python wheel \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.857934690363962
      ],
      "excerpt": "    $(rospack find tensorflow_models)/test/output.jpg \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8224370895075084
      ],
      "excerpt": "* Add separate launch file for semantic segmentation \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/tykurtz/tensorflow_models/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "CMake",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Tensorflow Models in ROS",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "tensorflow_models",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "tykurtz",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tykurtz/tensorflow_models/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Mon, 27 Dec 2021 11:34:15 GMT"
    },
    "technique": "GitHub API"
  }
}