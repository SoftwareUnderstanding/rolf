{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2005.00341",
      "https://arxiv.org/abs/2005.00341"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Please cite using the following bibtex entry:\n\n```\n@article{dhariwal2020jukebox,\n  title={Jukebox: A Generative Model for Music},\n  author={Dhariwal, Prafulla and Jun, Heewoo and Payne, Christine and Kim, Jong Wook and Radford, Alec and Sutskever, Ilya},\n  journal={arXiv preprint arXiv:2005.00341},\n  year={2020}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{dhariwal2020jukebox,\n  title={Jukebox: A Generative Model for Music},\n  author={Dhariwal, Prafulla and Jun, Heewoo and Payne, Christine and Kim, Jong Wook and Radford, Alec and Sutskever, Ilya},\n  journal={arXiv preprint arXiv:2005.00341},\n  year={2020}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tdunity/fixedjukebox",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-11-13T03:32:53Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-02-12T15:15:56Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8440685037425066
      ],
      "excerpt": "Code for \"Jukebox: A Generative Model for Music\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.890974503199935
      ],
      "excerpt": "A summary of all sampling data including zs, x, labels and sampling_kwargs is stored in {name}/level_{level}/data.pth.tar. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9901307562899083
      ],
      "excerpt": "On a V100, it takes about 3 hrs to fully sample 20 seconds of music. Since this is a long time, it is recommended to use n_samples &gt; 1 so you can generate as many samples as possible in parallel. The 1B lyrics and upsamplers can process 16 samples at a time, while 5B can fit only up to 3. Since the vast majority of time is spent on upsampling, we recommend using a multiple of 3 less than 16 like --n_samples 15 for 5b_lyrics. This will make the top-level generate samples in groups of three while upsampling is done in one pass. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9749663451665092
      ],
      "excerpt": "The above trains a two-level VQ-VAE with downs_t = (5,3), and strides_t = (2, 2) meaning we downsample the audio by 2**5 = 32 to get the first level of codes, and 2**8 = 256 to get the second level codes. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8165483021527792
      ],
      "excerpt": "Once the VQ-VAE is trained, we can restore it from its saved checkpoint and train priors on the learnt codes.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9201993059651765,
        0.8110799252484653,
        0.9204445789695471
      ],
      "excerpt": "We pass sample_length = n_ctx * downsample_of_level so that after downsampling the tokens match the n_ctx of the prior hps.  \nHere, n_ctx = 8192 and downsamples = (32, 256), giving sample_lengths = (8192 * 32, 8192 * 256) = (65536, 2097152) respectively for the bottom and top level. \nOur pre-trained VQ-VAE can produce compressed codes for a wide variety of genres of music, and the pre-trained upsamplers can upsample them back to audio that sound very similar to the original audio. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tdunity/fixedjukebox/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Fri, 24 Dec 2021 10:30:27 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/tdunity/fixedjukebox/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "tdunity/fixedjukebox",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/tdunity/fixedjukebox/continue_sampling/apex/examples/docker/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/tdunity/fixedjukebox/tree/continue_sampling/tensorboardX/docs",
      "https://github.com/tdunity/fixedjukebox/tree/continue_sampling/apex/docs"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/tdunity/fixedjukebox/continue_sampling/jukebox/Interacting_with_Jukebox.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/tdunity/fixedjukebox/continue_sampling/tensorboardX/compile.sh",
      "https://raw.githubusercontent.com/tdunity/fixedjukebox/continue_sampling/apex/tests/docker_extension_builds/run.sh",
      "https://raw.githubusercontent.com/tdunity/fixedjukebox/continue_sampling/apex/tests/L1/common/run_test.sh",
      "https://raw.githubusercontent.com/tdunity/fixedjukebox/continue_sampling/apex/tests/L1/cross_product/run.sh",
      "https://raw.githubusercontent.com/tdunity/fixedjukebox/continue_sampling/apex/tests/L1/cross_product_distributed/run.sh",
      "https://raw.githubusercontent.com/tdunity/fixedjukebox/continue_sampling/apex/tests/distributed/synced_batchnorm/unit_test.sh",
      "https://raw.githubusercontent.com/tdunity/fixedjukebox/continue_sampling/apex/tests/distributed/DDP/run_race_test.sh",
      "https://raw.githubusercontent.com/tdunity/fixedjukebox/continue_sampling/apex/tests/distributed/amp_master_params/run.sh",
      "https://raw.githubusercontent.com/tdunity/fixedjukebox/continue_sampling/apex/examples/simple/distributed/run.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "``` \n#: Required: Sampling\nconda create --name jukebox python=3.7.5\nconda activate jukebox\nconda install mpi4py=3.0.3\nconda install pytorch=1.4 torchvision=0.5 cudatoolkit=10.0 -c pytorch\ngit clone https://github.com/openai/jukebox.git\ncd jukebox\npip install -r requirements.txt\npip install -e .\n\n#: Required: Training\nconda install av=7.0.01 -c conda-forge \npip install ./tensorboardX\n \n#: Optional: Apex for faster training with fused_adam\nconda install pytorch=1.1 torchvision=0.3 cudatoolkit=10.0 -c pytorch\npip install -v --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" ./apex\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8680179930597692
      ],
      "excerpt": "Here, {audio_files_dir} is the directory in which you can put the audio files for your dataset, and {ngpus} is number of GPU's you want to use to train.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8779991937619007
      ],
      "excerpt": "To train the upsampler, we can run \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9214545724852629,
        0.9249192198702934
      ],
      "excerpt": "python jukebox/sample.py --model=5b_lyrics --name=sample_5b --levels=3 --sample_length_in_seconds=20 --total_sample_length_in_seconds=180 --sr=44100 --n_samples=6 --hop_fraction=0.5,0.5,0.125 \npython jukebox/sample.py --model=1b_lyrics --name=sample_1b --levels=3 --sample_length_in_seconds=20 --total_sample_length_in_seconds=180 --sr=44100 --n_samples=16 --hop_fraction=0.5,0.5,0.125 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9353590930380361,
        0.8456000022144375
      ],
      "excerpt": "python jukebox/sample.py --model=5b_lyrics --name=sample_5b --levels=3 --mode=continue --codes_file=sample_5b/level_0/data.pth.tar --sample_length_in_seconds=40 --total_sample_length_in_seconds=180 --sr=44100 --n_samples=6 --hop_fraction=0.5,0.5,0.125 \nHere, we take the 20 seconds samples saved from the first sampling run at sample_5b/level_0/data.pth.tar and continue by adding 20 more seconds.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9387454064039773,
        0.8404281248416692
      ],
      "excerpt": "python jukebox/sample.py --model=5b_lyrics --name=sample_5b --levels=3 --mode=upsample --codes_file=sample_5b/level_2/data.pth.tar --sample_length_in_seconds=20 --total_sample_length_in_seconds=180 --sr=44100 --n_samples=6 --hop_fraction=0.5,0.5,0.125 \nHere, we take the 20 seconds samples saved from the first sampling run at sample_5b/level_2/data.pth.tar and upsample the lower two levels. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8943604745346422,
        0.8577607811218887,
        0.8193100115666223,
        0.9433732763103122
      ],
      "excerpt": "python jukebox/sample.py --model=5b_lyrics --name=sample_5b_prompted --levels=3 --mode=primed --audio_file=path/to/recording.wav,awesome-mix.wav,fav-song.wav,etc.wav --prompt_length_in_seconds=12 --sample_length_in_seconds=20 --total_sample_length_in_seconds=180 --sr=44100 --n_samples=6 --hop_fraction=0.5,0.5,0.125 \nThis will load the four files, tile them to fill up to n_samples batch size, and prime the model with the first prompt_length_in_seconds seconds. \nTo train a small vqvae, run \nmpiexec -n {ngpus} python jukebox/train.py --hps=small_vqvae --name=small_vqvae --sample_length=262144 --bs=4 --nworkers=4 --audio_files_dir={audio_files_dir} --labels=False --train --aug_shift --aug_blend \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8111257662924631
      ],
      "excerpt": "Checkpoints are stored in the logs folder. You can monitor the training by running Tensorboard \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9645329302407768
      ],
      "excerpt": "mpiexec -n {ngpus} python jukebox/train.py --hps=small_vqvae,small_prior,all_fp16,cpu_ema --name=small_prior --sample_length=2097152 --bs=4 --nworkers=4 --audio_files_dir={audio_files_dir} --labels=False --train --test --aug_shift --aug_blend --restore_vqvae=logs/small_vqvae/checkpoint_latest.pth.tar --prior --levels=2 --level=1 --weight_decay=0.01 --save_iters=1000 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9645329302407768
      ],
      "excerpt": "mpiexec -n {ngpus} python jukebox/train.py --hps=small_vqvae,small_upsampler,all_fp16,cpu_ema --name=small_upsampler --sample_length 262144 --bs 4 --nworkers 4 --audio_files_dir {audio_files_dir} --labels False --train --test --aug_shift --aug_blend --restore_vqvae logs/small_vqvae/checkpoint_latest.pth.tar --prior --levels 2 --level 0 --weight_decay 0.01 --save_iters 1000 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/tdunity/fixedjukebox/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Cuda",
      "Jupyter Notebook",
      "C++",
      "Shell",
      "CSS",
      "Makefile",
      "HTML",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/tdunity/fixedjukebox/continue_sampling/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'All rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n\\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n\\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Jukebox",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "fixedjukebox",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "tdunity",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tdunity/fixedjukebox/blob/continue_sampling/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Fri, 24 Dec 2021 10:30:27 GMT"
    },
    "technique": "GitHub API"
  }
}