{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Unsupervised Rrepesentation Learning with Deep Convolutional Generative Adversarial Networks\"(https://arxiv.org/pdf/1511.06434.pdf) by Radford et. al.",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/shivamswarnkar/Image-Generator",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-10-29T15:02:53Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-11T06:53:50Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9742161314019497
      ],
      "excerpt": "Pytorch implementation of DCGAN described in the \"Unsupervised Rrepesentation Learning with Deep Convolutional Generative Adversarial Networks\"  paper by Radford et. al. to generate fake images of any given image dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9685011390293446,
        0.8135745178857309
      ],
      "excerpt": "Learn More About GAN and DCGAN \nCheck Out performance of the default architecture here \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8769304940127091
      ],
      "excerpt": "- workers=2; Number of workers for dataloading \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9149631215355811
      ],
      "excerpt": "- image_size=64; Height-width of the generated image \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8476388407300899,
        0.9202449190865232,
        0.9610461438305804
      ],
      "excerpt": "- nz=100; Size of latent vector z; output of generator \n- ngf=64; Size of feature maps in generator \n- ndf=64; Size of features maps in discriminator \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8476388407300899,
        0.9202449190865232
      ],
      "excerpt": "- nz=100; Size of latent vector z; output of generator \n- ngf=64; Size of feature maps in generator \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9737792495427403
      ],
      "excerpt": "Generative Adversial Networks are Neural Nets that can generate data from scratch. In general, GAN comprises of one discriminator and one generator network. Generator networks generates new data points and discriminator checks if the generated data point is fake or real. So essentially both networks work as adverseries to beat each other: Generator attempts to fool Discriminator, Discriminator attempts to catch Generator. An ideal stop condition in training these nets would be when discriminator outputs 0.50 probability of being real for any given real or generated fake images. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Pytorch Implementation of DCGAN as a python package. Easily train on any image datasets and generate new images. Some pertained models are available for test.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/shivamswarnkar/Image-Generator/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Wed, 22 Dec 2021 18:14:45 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/shivamswarnkar/Image-Generator/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "shivamswarnkar/Image-Generator",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/shivamswarnkar/Image-Generator/master/dcgan_colab_demo.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9441948308839183
      ],
      "excerpt": "Use From Terminal \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9441948308839183
      ],
      "excerpt": "Use From Terminal \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9393362240806259
      ],
      "excerpt": "$ python train.py --dataroot PATH_TO_DATASET --num_epochs 25 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9287872159786905,
        0.8725681836288791
      ],
      "excerpt": "from DCGAN import train \nimg_list, G_losses, D_losses = train(dataroot='PATH_TO_DATASET', num_epochs=25) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.846852085691505,
        0.8666304217794082
      ],
      "excerpt": "- netD=None;  Path to pretrained/checkpoint of discriminator network file. If not provided training will start from scratch. \n- netG=None; Path to pretrained/checkpoint of generator network file. If not provided, training will start from scratch. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8436433895408879
      ],
      "excerpt": "- batch_size=128; Batch Size for GAN training \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8203690293258066,
        0.8242482037464821
      ],
      "excerpt": "- outputG='checkpoints/netG.pth'; Path where generator model will be saved/checkpoint \nSimply provide netG & netD (Path to pretrained/checkpoint of network file) values for training and it'll start training from there.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9358865709244669
      ],
      "excerpt": "$ python train.py --dataroot PATH_TO_DATASET --netG PATH_TO_PRETRAINED_G_MODEL --netD PATH_TO_PRETRAINED_D_MODEL \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9287872159786905,
        0.8641585606559556
      ],
      "excerpt": "from DCGAN import train \ntrain(dataroot='PATH_TO_DATASET', netG='PATH_TO_PRETRAINED_G_MODEL', netD='PATH_TO_PRETRAINED_D_MODEL')  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.805427088158206
      ],
      "excerpt": "Pretrained Models for Celeba & Flower datasets are available in the pretrained_models directory. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8981045736210663
      ],
      "excerpt": "$ python generate.py --netG PATH_TO_GENERATOR_MODEL --n 64 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.888329083696728
      ],
      "excerpt": "from DCGAN import generate \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8054793983654926
      ],
      "excerpt": "- output_path='output/fake.png'; Path where generated images will be saved \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/shivamswarnkar/Image-Generator/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Shivam Swanrkar\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Image-Generator",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Image-Generator",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "shivamswarnkar",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/shivamswarnkar/Image-Generator/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 9,
      "date": "Wed, 22 Dec 2021 18:14:45 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Training Images\n\n![Original ](demo_imgs/celeba/celeb0.png)\n\nFake Images (After 70 Epochs)\n\n![Demo for one of the trained GAN Model](demo_imgs/celeba/celeb1.png)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Training Images\n\n![Original ](demo_imgs/flowers/flower0.png)\n\nFake Images (After 0 Epochs)\n\n![Original ](demo_imgs/flowers/flower1.png)\n\nFake Images (After 20 Epochs)\n\n![Original ](demo_imgs/flowers/flower2.png)\n\nFake Images (After 30 Epochs)\n\n![Original ](demo_imgs/flowers/flower3.png)\n\nFake Images (After 40 Epochs)\n\n![Original ](demo_imgs/flowers/flower4.png)\n\n\n",
      "technique": "Header extraction"
    }
  ]
}