{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "\r\nWe thank the authors of [ssd.pytorch](https://github.com/amdegroot/ssd.pytorch) and [faster-rcnn.pytorch](https://github.com/jwyang/faster-rcnn.pytorch) for opening source their wonderful works. We thank [daquexian](https://github.com/daquexian) for providing his implementation of Bi-Real-Net.\r\n\r\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2003.03961"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Please cite our paper if you find it useful in your research:\r\n\r\n```\r\n@inproceedings{wang2020bidet,\r\n  title={BiDet: An Efficient Binarized Object Detector},\r\n  author={Wang, Ziwei and Wu, Ziyi and Lu, Jiwen and Zhou, Jie},\r\n  booktitle={Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition},\r\n  pages={2049--2058},\r\n  year={2020}\r\n}\r\n```\r\n\r\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{wang2020bidet,\n  title={BiDet: An Efficient Binarized Object Detector},\n  author={Wang, Ziwei and Wu, Ziyi and Lu, Jiwen and Zhou, Jie},\n  booktitle={Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition},\n  pages={2049--2058},\n  year={2020}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ZiweiWangTHU/BiDet",
    "technique": "GitHub API"
  },
  "contact": [
    {
      "confidence": [
        1
      ],
      "excerpt": "\r\nIf you have any questions about the code, please contact Ziyi Wu dazitu616@gmail.com\r\n\r\n",
      "technique": "Header extraction"
    }
  ],
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-08T06:14:16Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-27T14:42:44Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9920341685493972,
        0.9968278044734535
      ],
      "excerpt": "This is the official pytorch implementation for paper: BiDet: An Efficient Binarized Object Detector, which is accepted by CVPR2020. The code contains training and testing two binarized object detectors, SSD300 and Faster R-CNN, using our BiDet method on two datasets, PASCAL VOC and Microsoft COCO 2014. \n2021.1: Our extended version of BiDet is accepted by T-PAMI! We further improve the performance of binary detectors and extend our method to multi model compression methods. Check it out here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9489090684838872
      ],
      "excerpt": "The backbones for our BiDet-SSD300 and BiDet-Faster R-CNN are VGG16 and Resnet-18. We pretrain them on the ImageNet dataset. You can download the pretrained weights on: VGG16 and ResNet18. After downloading them from Google Drive, please put them in ssd/pretrain and faster_rcnn/pretrain respectively. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8894733404899787,
        0.9966906783932029
      ],
      "excerpt": "What is the difference between BiDet and BiDet (SC)? \nThey are two different binary neural networks (BNNs) architectures. As BiDet can be regarded as a training strategy with the IB and sparse object priors loss, we adopt popular BNN methods as our models. BiDet means applying our method to Xnor-Net like architecture, with BN-->BinActiv-->BinConv orders and scaling factors. BiDet (SC) means applying our method to Bi-Real-Net like architecture, with additional shortcuts. This repo provides implementations of BiDet (SC) for both SSD and Faster R-CNN. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9963670158747564,
        0.8718142944008399,
        0.9930515144253326,
        0.804341389568205
      ],
      "excerpt": "For Faster R-CNN with ResNet-18 backbone, we do no modification. For SSD300 with VGG16 backbone, we restructure it to make it suitable for BNNs. Please refer to this issue for more details. \nIs the BiDet detectors fully binarized? \nYes, both the backbone and detection heads of BiDet detectors are binarized. One of the main contributions of our work is that we show FULLY binarized object detectors can still get relatively good performance on large-scale datasets such as PASCAL VOC and COCO. \nHow do you calculate the model parameter size and FLOPs? \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "This is the official pytorch implementation for paper: BiDet: An Efficient Binarized Object Detector, which is accepted by CVPR2020. ",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ZiweiWangTHU/BiDet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 30,
      "date": "Sun, 26 Dec 2021 12:13:09 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ZiweiWangTHU/BiDet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ZiweiWangTHU/BiDet",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/ZiweiWangTHU/BiDet/master/faster_rcnn/lib/model/roi_align/make.sh",
      "https://raw.githubusercontent.com/ZiweiWangTHU/BiDet/master/faster_rcnn/lib/model/nms/make.sh",
      "https://raw.githubusercontent.com/ZiweiWangTHU/BiDet/master/faster_rcnn/lib/model/roi_crop/make.sh",
      "https://raw.githubusercontent.com/ZiweiWangTHU/BiDet/master/data/scripts/VOC2007.sh",
      "https://raw.githubusercontent.com/ZiweiWangTHU/BiDet/master/data/scripts/VOC2012.sh",
      "https://raw.githubusercontent.com/ZiweiWangTHU/BiDet/master/data/scripts/COCO2014.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "We conduct experiments on PASCAL VOC and Microsoft COCO 2014 datasets.  \r\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8180911483206154
      ],
      "excerpt": "Also, you can specify a path to save the data.   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9540644047920409
      ],
      "excerpt": "Assume you've finished all steps above, you can start using the code easily. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8195629366591964
      ],
      "excerpt": "For testing on COCO, just run:   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8572240714923534
      ],
      "excerpt": "$ python ssd/eval_coco.py --weight_path='path/to/weight' --coco_root='path/to/coco' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.953691433472028,
        0.8255599467860235
      ],
      "excerpt": "cd faster_rcnn/lib \npython setup.py build develop \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8268577609062789
      ],
      "excerpt": "For training SSD, just run:   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8000452079189302
      ],
      "excerpt": "$ python ssd/train_bidet_ssd.py --dataset='VOC/COCO' --data_root='path/to/dataset' --basenet='path/to/pretrain_backbone' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8018549531110124
      ],
      "excerpt": "$ python ssd/eval_voc.py --weight_path='path/to/weight' --voc_root='path/to/voc' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8000452079189302,
        0.8134621311446614
      ],
      "excerpt": "$ python faster_rcnn/trainval_net.py --dataset='voc/coco' --data_root='path/to/dataset' --basenet='path/to/pretrain_backbone' \nFor testing, run:   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8295796239109684
      ],
      "excerpt": "$ python test_net.py --dataset='voc/coco' --checkpoint='path/to/weight' \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ZiweiWangTHU/BiDet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Cuda",
      "C",
      "C++",
      "Shell",
      "MATLAB"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Ziyi Wu\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "BiDet",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "BiDet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ZiweiWangTHU",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ZiweiWangTHU/BiDet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- python 3.6+\r\n- pytorch 1.0+\r\n- other packages include numpy, cv2, matplotlib, pillow, cython, cffi, msgpack, easydict, pyyaml\r\n\r\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 150,
      "date": "Sun, 26 Dec 2021 12:13:09 GMT"
    },
    "technique": "GitHub API"
  }
}