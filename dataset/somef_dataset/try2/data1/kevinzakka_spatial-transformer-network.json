{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1506.02025"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kevinzakka/spatial-transformer-network",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-01-07T10:02:58Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-20T21:11:33Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9844843177546008,
        0.9475263172043853
      ],
      "excerpt": "This is a Tensorflow implementation of Spatial Transformer Networks by Max Jaderberg, Karen Simonyan, Andrew Zisserman and Koray Kavukcuoglu, accompanying by two-part blog tutorial series. \nSpatial Transformer Networks (STN) is a differentiable module that can be inserted anywhere in ConvNet architecture to increase its geometric invariance. It effectively gives the network the ability to spatially transform feature maps at no extra data or supervision cost. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9810342063532774,
        0.925393646928372,
        0.9327834612395762
      ],
      "excerpt": "The STN is composed of 3 elements. \nlocalization network: takes the feature map as input and outputs the parameters of the affine transformation that should be applied to that feature map. \ngrid generator: generates a grid of (x,y) coordinates using the parameters of the affine transformation that correspond to a set of points where the input feature map should be sampled to produce the transformed output feature map. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8644193107543773
      ],
      "excerpt": "It can be constrained to one of attention by writing it in the form \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8148808117606784,
        0.9635998706308521,
        0.9155308546535662
      ],
      "excerpt": "where the parameters s, t_x and t_y can be regressed to allow cropping, translation, and isotropic scaling. \nFor a more in-depth explanation of STNs, read the two part blog post: part1 and part2. \nRun the Sanity Check to get a feel of how the spatial transformer can be plugged into any existing code. For example, here's the result of a 45 degree rotation: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9415340774339203
      ],
      "excerpt": "It is good practice to initialize the localization network to the identity transform before starting the training process. Here's a small sample code for illustration purposes. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.811213317494415
      ],
      "excerpt": "Torch Blog Post on STN's \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A Tensorflow implementation of Spatial Transformer Networks.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kevinzakka/spatial-transformer-network/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 254,
      "date": "Tue, 21 Dec 2021 10:40:04 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/kevinzakka/spatial-transformer-network/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "kevinzakka/spatial-transformer-network",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/kevinzakka/spatial-transformer-network/master/Sanity%20Check.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Install the `stn` package using:\n\n```\npip3 install stn\n```\n\nThen, you can call the STN layer as follows:\n\n```python\nfrom stn import spatial_transformer_network as transformer\n\nout = transformer(input_feature_map, theta, out_dims)\n```\n\n**Parameters**\n\n- `input_feature_map`: the output of the layer preceding the localization network. If the STN layer is the first layer of the network, then this corresponds to the input images. Shape should be (B, H, W, C).\n- `theta`: this is the output of the localization network. Shape should be (B, 6)\n- `out_dims`: desired (H, W) of the output feature map. Useful for upsampling or downsampling. If not specified, then output dimensions will be equal to `input_feature_map` dimensions.\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8130889653737864
      ],
      "excerpt": " <img src=\"./img/transformation.png\" width=\"400px\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8481942365069672
      ],
      "excerpt": " <img src=\"./img/stn.png\" width=\"400px\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8383507735342987
      ],
      "excerpt": " <img src=\"./img/general.png\" width=\"175px\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8481942365069672
      ],
      "excerpt": " <img src=\"./img/attention.png\" width=\"175px\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8481942365069672,
        0.8385848139338128
      ],
      "excerpt": " <img src=\"./img/b4.png\" alt=\"Drawing\" width=\"40%\"> \n <img src=\"./img/after.png\" alt=\"Drawing\" width=\"40%\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8106955466820928
      ],
      "excerpt": "Usage Note \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8060372108626078
      ],
      "excerpt": ": params \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.910006558023422
      ],
      "excerpt": "initial = np.array([[1., 0, 0], [0, 1., 0]]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8128131768734507
      ],
      "excerpt": "x = tf.placeholder(tf.float32, [B, H, W, C]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8354992501431161
      ],
      "excerpt": "W_fc1 = tf.Variable(tf.zeros([HWC, n_fc]), name='W_fc1') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8392598427194572
      ],
      "excerpt": "h_fc1 = tf.matmul(tf.zeros([B, HWC]), W_fc1) + b_fc1 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/kevinzakka/spatial-transformer-network/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2017 Kevin Zakka\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Spatial Transformer Networks",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "spatial-transformer-network",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "kevinzakka",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kevinzakka/spatial-transformer-network/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 868,
      "date": "Tue, 21 Dec 2021 10:40:04 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "spatial-transformer-network",
      "tensorflow",
      "stn",
      "attention",
      "affine-transformation",
      "convnet"
    ],
    "technique": "GitHub API"
  }
}