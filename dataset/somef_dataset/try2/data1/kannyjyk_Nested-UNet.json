{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This repository has been built upon [qubvel/segmentation_models](https://github.com/qubvel/segmentation_models). We appreciate the effort of Pavel Yakubovskiy for providing well-organized segmentation models to the community. This research has been supported partially by NIH under Award Number R01HL128785, by ASU and Mayo Clinic through a Seed Grant and an Innovation Grant. The content is solely the responsibility of the authors and does not necessarily represent the official views of NIH.\n\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1505.04597",
      "https://arxiv.org/abs/1707.03718",
      "https://arxiv.org/abs/1612.01105"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@incollection{zhou2018unet++,\n  title={UNet++: A Nested U-Net Architecture for Medical Image Segmentation},\n  author={Zhou, Zongwei and Siddiquee, Md Mahfuzur Rahman and Tajbakhsh, Nima and Liang, Jianming},\n  booktitle={Deep Learning in Medical Image Analysis and Multimodal Learning for Clinical Decision Support},\n  pages={3--11},\n  year={2018},\n  publisher={Springer}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8490817347094297
      ],
      "excerpt": "Zhou Zongwei, Md Mahfuzur Rahman Siddiquee, Nima Tajbakhsh, and Jianming Liang <br/> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9093958711606985
      ],
      "excerpt": "Deep Learning in Medical Image Analysis (DLMIA) 2018. (Oral) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kannyjyk/Nested-UNet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-12-28T08:33:08Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-12-28T08:33:10Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9870980663487268
      ],
      "excerpt": "This is an implementation of \"UNet++: A Nested U-Net Architecture for Medical Image Segmentation\" in Keras deep learning framework (Tensorflow as backend). UNet++ (nested U-Net architecture) is proposed for a more precise segmentation. We introduce intermediate layers to skip connections of U-Net, which naturally form multiple new up-sampling paths from different depths, ensembling U-Nets of various receptive fields. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8737203100776715
      ],
      "excerpt": "| VGG16               |vgg16| imagenet | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9280281355794507
      ],
      "excerpt": "                                                     --backbone vgg16 \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9011850636323548,
        0.9053464365430041,
        0.9279048383850257,
        0.9011850636323548,
        0.8463979911812998
      ],
      "excerpt": "[x] Add VGG backbone for UNet++ \n[x] Add ResNet backbone for UNet++ \n[x] Add ResNeXt backbone for UNet++ \n[ ] Add DenseNet backbone for UNet++ \n[ ] Add Inception backbone for UNet++ \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kannyjyk/Nested-UNet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 11:44:11 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/kannyjyk/Nested-UNet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "kannyjyk/Nested-UNet",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\ngit clone https://github.com/MrGiovanni/Nested-UNet.git\ncd Nested-UNet\npip install -r requirements.txt\ngit submodule update --init --recursive\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8891897298711432
      ],
      "excerpt": "CUDA_VISIBLE_DEVICES=0 python DSB2018_application.py --run 1 \\ \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/kannyjyk/Nested-UNet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 Zongwei Zhou\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "UNet++: A Nested U-Net Architecture for Medical Image Segmentation",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Nested-UNet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "kannyjyk",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kannyjyk/Nested-UNet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Python 3.x, Keras 2.2.2, Tensorflow 1.4.1 and other common packages listed in `requirements.txt`.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 11:44:11 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Train a UNet++ structure (`Xnet` in the code):  \n```python\nfrom segmentation_models import Unet, Nestnet, Xnet\n\n#: prepare data\nx, y = ... #: range in [0,1]\n\n#: prepare model\nmodel = Xnet(backbone_name='resnet50', encoder_weights='imagenet') #: build UNet++\n#: model = Unet(backbone_name='resnet50', encoder_weights='imagenet') #: build U-Net\n#: model = NestNet(backbone_name='resnet50', encoder_weights='imagenet') #: build DLA\n\nmodel.compile('Adam', 'binary_crossentropy', ['binary_accuracy'])\n\n#: train model\nmodel.fit(x, y)\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}