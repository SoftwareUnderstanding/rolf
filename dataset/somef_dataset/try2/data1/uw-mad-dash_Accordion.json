{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The code borrows a lot of structure from code for \n[PowerSGD](https://github.com/epfml/powersgd). We will like to thank the authors\nof PowerSGD for providing the code.\n\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2010.16248",
      "https://arxiv.org/abs/1711.08856",
      "https://arxiv.org/abs/2010.16248"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n@article{agarwal2020accordion,\n  title={Accordion: Adaptive Gradient Communication via Critical Learning Regime Identification},\n  author={Agarwal, Saurabh and Wang, Hongyi and Lee, Kangwook and Venkataraman, Shivaram and Papailiopoulos, Dimitris},\n  journal={arXiv preprint arXiv:2010.16248},\n  year={2020}\n}\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{agarwal2020accordion,\n  title={Accordion: Adaptive Gradient Communication via Critical Learning Regime Identification},\n  author={Agarwal, Saurabh and Wang, Hongyi and Lee, Kangwook and Venkataraman, Shivaram and Papailiopoulos, Dimitris},\n  journal={arXiv preprint arXiv:2010.16248},\n  year={2020}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/uw-mad-dash/Accordion",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-02-17T19:58:17Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-07-27T05:06:29Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9091851412243711
      ],
      "excerpt": "al. to improve communication efficiency of \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9439193694088471
      ],
      "excerpt": "All the details like data set loading, model configuration files are present \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9059825847181944,
        0.9901800182937773
      ],
      "excerpt": "The code for detecting crtical regimes is implemented in auto_scale.py \nImplementation of powerSGD and is present in \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Code for reproducing experiments performed for Accoridon",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/uw-mad-dash/Accordion/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sun, 26 Dec 2021 17:21:20 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/uw-mad-dash/Accordion/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "uw-mad-dash/Accordion",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/uw-mad-dash/Accordion/main/get_table_2.sh"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/uw-mad-dash/Accordion/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Overview",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Accordion",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "uw-mad-dash",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/uw-mad-dash/Accordion/blob/main/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* The code is setup to run in distributed environment only. To simulate running on single GPU one can launch more than once process on single GPU.When running on single GPU or same machine you can use local host for\n  master-IPFor ex- to run cifar10 training and simulate two nodes using powerSGD as a\n  reducer and Accordion use the following command -\n\n```\npython main.py --model-type CNN --auto-switch --norm-file\n  \"cifar10_training.log\" --start-k --k-start 2 --distributed --master-ip\n\"tcp://127.0.0.1:9998\" --num-nodes 2 --rank 0\n```\nRun the same command again but replace --rank 0 with --rank 1 uptil \n\n\nTo reproduce for example our Cifar10, ResNet-18 example run the code with 4\n  nodes using the following command.\n* For getting result for PowerSGD Rank 1 run-\n```python\npython main.py --model-type CNN --fixed-sched --norm-file \"res18_psgd_k_1.log\"\n  --start-k --k-start 1 --distributed --master-ip \"master_ip\" \n--num-nodes 4 --rank 0\n```\n\nRepeat the same command on 4 different nodes but replace ``` --rank 0 ``` with 1, 2\nand 3 on each node. Similarly to get result for PowerSGD Rank 2 run- \n```\npython main.py --model-type CNN --fixed-sched --norm-file \"res18_psgd_k_1.log\"\n  --start-k --k-start 2 --distributed --master-ip \"master_ip\"\n--num-nodes 4 --rank 0\n```\n\n\nTo get the results for Accordion run the following command\n```\npython main.py --model-type CNN --auto-switch --norm-file\n  \"res18_psgd_accordion.log\" --start-k --k-start 2 --distributed --master-ip \"master_ip\"\n--num-nodes 4 --rank 0\n```\n\nRepeat the same command on 4 different nodes but replace --rank 0 with 1, 2\nand 3 on each node.\n\n\nFor easy reproducibility of the experiments in the paper we provide the\nfollowing bash script.\nTo reproduce Table 2 you can run ```./get_table_2.sh master_ip rank``` on four\ndifferent nodes providing where master_ip is of the rank 0 node and ranks range\nfrom 0 to 3\n\n\nTo run more experiments users can either add more configuration dictionaries as\npresent at the top of the main.py or choose to modify existing ones.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Sun, 26 Dec 2021 17:21:20 GMT"
    },
    "technique": "GitHub API"
  }
}