{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- The flickr scraper is a modified version of https://gist.github.com/yunjey/14e3a069ad2aa3adf72dee93a53117d6\n- The idea of swapping images during training to achieve artistic effects inspired by Robbie Barrat's work https://github.com/robbiebarrat/art-DCGAN\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1701.07875\nand a more recent Self-Attention GAN https://arxiv.org/abs/1805.08318 as well webscrapers to download images from flickr and unsplash.\n\nThe networks can generate either 64x64 or 128x128 images.\nGANs are framework where we want to produce a model distribution that mimics a given target distribution and it consists of a generator which produces a model distribution and a discriminator that distinguishes between the model and target distribution.\nIn the past few years, GANs have been successful at various image generation tasks, however their training is known to be a tricky process with challenges such as\nstability and convergence issues and sensitivity to the choice of hyperparameters. Different types of GANs have been proposed to tackle these issues.\nWasserstein GAN (WGAN",
      "https://arxiv.org/abs/1805.08318 as well webscrapers to download images from flickr and unsplash.\n\nThe networks can generate either 64x64 or 128x128 images.\nGANs are framework where we want to produce a model distribution that mimics a given target distribution and it consists of a generator which produces a model distribution and a discriminator that distinguishes between the model and target distribution.\nIn the past few years, GANs have been successful at various image generation tasks, however their training is known to be a tricky process with challenges such as\nstability and convergence issues and sensitivity to the choice of hyperparameters. Different types of GANs have been proposed to tackle these issues.\nWasserstein GAN (WGAN"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9498411642873668
      ],
      "excerpt": "PyTorch implementations of Wasserstein Generative Adversarial Network https://arxiv.org/abs/1701.07875 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jher123/GAN-experiments",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-12-17T15:34:49Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-12-24T04:01:34Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9314122871695338
      ],
      "excerpt": "GANs are framework where we want to produce a model distribution that mimics a given target distribution and it consists of a generator which produces a model distribution and a discriminator that distinguishes between the model and target distribution. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Generating images with Wasserstein and Self-Attention GANs",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jher123/GAN-experiments/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Thu, 23 Dec 2021 06:01:15 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jher123/GAN-experiments/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "jher123/GAN-experiments",
    "technique": "GitHub API"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jher123/GAN-experiments/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Animal Art with Wasserstein and Self-Attention GANs",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "GAN-experiments",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "jher123",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jher123/GAN-experiments/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The models are meant to be run on CUDA enabled GPU.\nThe main requirements are Python 3 and packages contained in `requirements.txt`.\nFor the unsplash scraper, geckodriver and FireFox are also required.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Thu, 23 Dec 2021 06:01:15 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**WGAN**\nLions (64x64)\n\n<p align=\"center\"><img width=\"50%\" src=\"images/lions_epoch_5000.jpg\" /></p>\n\nSwapping lion images for jellyfish images for 10 epochs during training\n\n<p align=\"center\"><img width=\"50%\" src=\"images/lionsxjellyfish_epoch_4510.jpg\" /></p>\n\n**SAGAN**\n\ncoming soon\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "To download images from Flickr/Unsplash run one of the scraper scripts in `scrapers` providing a keyword and the number of images to download for Flickr:\n\n`python3 flickr_scraper.py --keyword lions --num_images 3000`\n\n`python3 unsplash_scraper.py --keyword lions`\n\nBefore training place the image folder in `input_data`.\nThe training scripts train the network either from scratch or resuming from a checkpoint file.\nThey saves images every `gen_img_freq` epochs (default 5) and save model and optimiser checkpoints as well as debug info if desired every\n`checkpoint_freq` epochs. The full list of arguments is in scripts. Example training a WGAN from scratch:\n\n`python3 train_WGAN.py --bs 128 --im_size 128 --num_epochs 3500 --version_name lions128 --img_folder_name lions --checkpoint_freq 400`\n\nExample training a WGAN from checkpoint saved at the 2000th epoch:\n\n`python3 train_WGAN.py --bs 128 --im_size 128 --num_epochs 3500 --version_name  the lions128 --img_folder_name lions --checkpoint_freq 400 --resume True --resume_epoch_num 2000`\n\n",
      "technique": "Header extraction"
    }
  ]
}