{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1609.04802\n\nsee also [my ESRGAN implementation.](https://github.com/itsuki8914/ESRGAN-TensorFlow"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.994799811898885
      ],
      "excerpt": "original paper: https://arxiv.org/abs/1609.04802 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/itsuki8914/SRGAN-TensorFlow",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-07-05T04:10:22Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-12-28T03:02:01Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.961036477513706
      ],
      "excerpt": "Implementation of SRGAN using Tensorflow. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Implementation of SRGAN using Tensorflow",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/itsuki8914/SRGAN-TensorFlow/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Fri, 24 Dec 2021 14:02:16 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/itsuki8914/SRGAN-TensorFlow/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "itsuki8914/SRGAN-TensorFlow",
    "technique": "GitHub API"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/itsuki8914/SRGAN-TensorFlow/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "SRGAN-TensorFlow",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "SRGAN-TensorFlow",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "itsuki8914",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/itsuki8914/SRGAN-TensorFlow/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Fri, 24 Dec 2021 14:02:16 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Download vgg19.npy from [here.](https://github.com/machrisaa/tensorflow-vgg)\n\n  Put vgg19.npy in the folder where convert.py and convert.py are located.\n  \n  like this\n```\n...\n\u2502\n\u251c\u2500\u2500convert.py\n\u251c\u2500\u2500vgg.py\n\u251c\u2500\u2500vgg19.npy\n...\n```\n\n  run convert.py.\n  \n```\npython convert.py\n```\n\n  after running, A vgg model dedicated to tensorflow will be output.\n \n ```\n ...\n\u2502\n\u251c\u2500\u2500 convert.py\n\u251c\u2500\u2500 vgg.py\n\u251c\u2500\u2500 vgg19.npy\n\u251c\u2500\u2500 modelvgg\n\u2502     \u251c\u2500\u2500 checkpoint\n\u2502     \u251c\u2500\u2500 model.ckpt-0\n\u2502     \u251c\u2500\u2500 model.ckpt-0\n\u2502     \u2514\u2500\u2500 model.ckpt-0\n...\n```\n\n2. Download dataset from [DIV2K dataset.](https://data.vision.ee.ethz.ch/cvl/DIV2K/)\n\n  download the following four.\n\n* Train Data Track 1 bicubic downscaling x4 (LR images)\n* Train Data (HR images)\n* Validation Data Track 1 bicubic downscaling x4 (LR images)\n* Validation Data (HR images)\n\n(If your PC has enough RAM, I recommend also The flickr2K data set proposed in [EDSR.](https://github.com/LimBee/NTIRE2017))\n\n  Put the downloaded dataset in the train_lr, train_hr, val_lr and val_hr folders.\n  like this\n```\n...\n\u2502\n\u251c\u2500\u2500 train_lr\n\u2502     \u251c\u2500\u2500 0001x4.png\n\u2502     \u251c\u2500\u2500 0002x4.png\n\u2502     \u251c\u2500\u2500 ...\n\u2502     \u2514\u2500\u2500 0800x4.png\n\u251c\u2500\u2500 train_hr\n\u2502     \u251c\u2500\u2500 0001.png\n\u2502     \u251c\u2500\u2500 0002.png\n\u2502     \u251c\u2500\u2500 ...\n\u2502     \u2514\u2500\u2500 0800.png \n\u251c\u2500\u2500 val_lr\n\u2502     \u251c\u2500\u2500 0801x4.png\n\u2502     \u251c\u2500\u2500 0802x4.png\n\u2502     \u251c\u2500\u2500 ...\n\u2502     \u2514\u2500\u2500 0900x4.png\n\u251c\u2500\u2500 val_hr\n\u2502     \u251c\u2500\u2500 0801.png\n\u2502     \u251c\u2500\u2500 0802.png\n\u2502     \u251c\u2500\u2500 ...\n\u2502     \u2514\u2500\u2500 0900.png \n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 model.py\n...\n```\n\n3. Train SRGAN.\n\n```\npython main.py\n```\n\n4. After training, inference can be performed.\n\nPut the images you want to evaluate into a folder and run the following.\n\nexample:\n ```\n ...\n\u2502\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 pred.py\n\u251c\u2500\u2500 modelGAN\n\u2502     \u251c\u2500\u2500 checkpoint\n\u2502     \u251c\u2500\u2500 model.ckpt-50000\n\u2502     \u251c\u2500\u2500 model.ckpt-50000\n\u2502     \u2514\u2500\u2500 model.ckpt-50000\n\u251c\u2500\u2500 test\n\u2502     \u251c\u2500\u2500 yourpic1.png\n\u2502     \u251c\u2500\u2500 favpic.jpg\n\u2502     ...\n\u2502     \u2514\u2500\u2500 smallpic.png\n...\n```\n\n```\npython pred.py test\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "leftmost: bicubic upsampling\n\nSecond from left: SRResNet(MSE + VGG)\n\nThird from left: SRGAN(this implementation)\n\nrightmost: original HR image\n\n<img src = 'examples/comic.png' >\n\n<img src = 'examples/lenna.png' >\n",
      "technique": "Header extraction"
    }
  ]
}