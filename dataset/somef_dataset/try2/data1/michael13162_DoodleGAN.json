{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1609.04468",
      "https://arxiv.org/abs/1609.05158\n\n#### 6: Use Soft and Noisy Labels\n\n- Label Smoothing, i.e. if you have two target labels: Real=1 and Fake=0, then for each incoming sample, if it is real, then replace the label with a random number between 0.7 and 1.2, and if it is a fake sample, replace it with 0.0 and 0.3 (for example"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9944484218006108
      ],
      "excerpt": "PixelShuffle: https://arxiv.org/abs/1609.05158 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9902272622380456
      ],
      "excerpt": "Salimans et. al. 2016 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9553055233818778
      ],
      "excerpt": "See Radford et. al. 2015 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "10: Track failures early \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/michael13162/DoodleGAN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-12-05T01:09:33Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-23T03:59:38Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8577302739126875
      ],
      "excerpt": "dense_1 (Dense)              (None, 1024)              803840     \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577302739126875
      ],
      "excerpt": "dense_2 (Dense)              (None, 512)               524800     \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577302739126875
      ],
      "excerpt": "dense_3 (Dense)              (None, 256)               131328     \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577302739126875
      ],
      "excerpt": "dense_5 (Dense)              (None, 256)               25856      \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577302739126875
      ],
      "excerpt": "dense_6 (Dense)              (None, 512)               131584     \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577302739126875
      ],
      "excerpt": "dense_7 (Dense)              (None, 1024)              525312     \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577302739126875
      ],
      "excerpt": "dense_8 (Dense)              (None, 2048)              2099200    \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model_2 (Model)              (None, 784)               4388368 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8203707425562825,
        0.9047235320738071
      ],
      "excerpt": "After many epochs of training, they get much better. \nThe loss over the epochs is shown.  While the generated cats are noticeable better than before, they are still not what someone would probably actually draw. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9783464667257037
      ],
      "excerpt": "The DCGAN performs much better.  DCGAN.ipynb contains a more sophisticated implementation of a GAN.  The class of doodles we chose to use are also cats for comparison reasons.  The architecture is similar with convolutional layers and batch normalization layers added in.  The architecture is shown below. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577302739126875
      ],
      "excerpt": "dense_33 (Dense)             (None, 6272)              633472     \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9072489463278501
      ],
      "excerpt": "The loss over epochs is shown. The generator loss seems to be diverging, however we were visually inspecting the generated samples on each epoch and the results were improving.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8761164022235732
      ],
      "excerpt": "Construct different mini-batches for real and fake, i.e. each mini-batch needs to contain only all real images or all generated images. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8066911099384199
      ],
      "excerpt": "when things are working, D loss has low variance and goes down over time vs having huge variance and spiking \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8340504599972751
      ],
      "excerpt": "13: Add noise to inputs, decay over time \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.834695533457999
      ],
      "excerpt": "adding gaussian noise to every layer of generator (Zhao et. al. EBGAN) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9495106982319257
      ],
      "excerpt": "We also trained a classifier on 10 classes of doodles.  The notebook can be found at CNNclassifier.ipynb.  After only 3 epochs, it was able to acheive an accuracy of 0.7972! \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/michael13162/DoodleGAN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 28 Dec 2021 03:49:40 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/michael13162/DoodleGAN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "michael13162/DoodleGAN",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/michael13162/DoodleGAN/master/Simple_GAN.ipynb",
      "https://raw.githubusercontent.com/michael13162/DoodleGAN/master/DCGAN.ipynb",
      "https://raw.githubusercontent.com/michael13162/DoodleGAN/master/CNNclassifier.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/michael13162/DoodleGAN/master/setup.sh",
      "https://raw.githubusercontent.com/michael13162/DoodleGAN/master/run.sh"
    ],
    "technique": "File Exploration"
  },
  "invocation": [
    {
      "confidence": [
        0.8934745846565956
      ],
      "excerpt": "Total params: 1,460,225 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8934745846565956
      ],
      "excerpt": "Total params: 4,388,368 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8934745846565956
      ],
      "excerpt": "Total params: 5,848,593 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8934745846565956
      ],
      "excerpt": "Total params: 212,865 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8934745846565956
      ],
      "excerpt": "Total params: 856,705 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8934745846565956
      ],
      "excerpt": "Total params: 1,069,570 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/michael13162/DoodleGAN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 Michael Zhang\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# DoodleGAN\n\n\"Quick, Draw!\" was released as an experimental game by Google to educate the public in a playful way about how AI works. The game prompts users to draw an image depicting a certain category, such as \u201dbanana,\u201d \u201ctable,\u201d etc. Consequently, more than 1B drawings were generated, of which a subset was publicly released as the basis for this competition\u2019s training set. That subset contains 50M drawings encompassing 340 label categories. (https://www.kaggle.com/c/quickdraw-doodle-recognition)\n\nConvolutional Neural Networks (CNNs) have continually demonstrated their superiority over other modeling choices for image based datasets. Since this project we will be dealing with image classification, using deep learning tools like CNNs is a natural choice. Furthermore, in recent years, Generative Adversarial Networks (GANs) have shown to be extremely effective at modeling the distribution of the data.  (http://papers.nips.cc/paper/5423-generative-adversarial-nets) The modeled distribution can be used to generate samples of the data that closely resemble real/true data. We seek to train a GAN to learn how to draw doodles with a given label, i.e the output is an image from a certain class. If we manage to train a good enough generator we could use it as a data augmentation tool that could help to train an even better classifier.\n\n![bee](https://storage.googleapis.com/kaggle-media/competitions/quickdraw/what-does-a-bee-look-like-1.png)\n\n\n\n# Simple GAN\n\nSimple_GAN.ipynb contains a simple and somewhat naive implementation of a GAN.  The class of doodles we chose to use are cats (go figure).  An randomly chosen example cat image:\n\n![cat](https://user-images.githubusercontent.com/14242505/50039091-fef49880-ffe0-11e8-8e89-0e17b910cfeb.png)\n\n\nThe generator is composed of 5 dense layers separated by LeakyReLUs.  The descriminator is similar, except it has 4 dense layers.  The architecture is shown below.\n\n```\nLayer (type)                 Output Shape              Param #",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "DoodleGAN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "michael13162",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/michael13162/DoodleGAN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Tue, 28 Dec 2021 03:49:40 GMT"
    },
    "technique": "GitHub API"
  }
}