{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2101.03697",
      "https://arxiv.org/abs/2101.03697"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bibtex\n\n@ARTICLE{ding2021repvgg,\n    title = {RepVGG: Making VGG-style ConvNets Great Again},\n    author={Ding, Xiaohan and Zhang, Xiangyu and Ma, Ningning and Han, Jungong and Ding, Guiguang and Sun, Jian},\n    journal={arXiv preprint arXiv:2101.03697},\n    year={2021}\n}\n\n@software{objax-repvgg\n    titile = {Objax-RepVGG},\n    author = {Benjamin Ellis},\n    url    = {https://github.com/benjaminjellis/Objax-RepVGG},\n    year   = {2021}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@software{objax-repvgg\n    titile = {Objax-RepVGG},\n    author = {Benjamin Ellis},\n    url    = {https://github.com/benjaminjellis/Objax-RepVGG},\n    year   = {2021}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@ARTICLE{ding2021repvgg,\n    title = {RepVGG: Making VGG-style ConvNets Great Again},\n    author={Ding, Xiaohan and Zhang, Xiangyu and Ma, Ningning and Han, Jungong and Ding, Guiguang and Sun, Jian},\n    journal={arXiv preprint arXiv:2101.03697},\n    year={2021}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/benjaminjellis/Objax-RepVGG",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-04-08T18:45:51Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-13T05:06:29Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8698539093088568
      ],
      "excerpt": "An Objax (https://github.com/google/objax) implementation of RepVGG models based on the official PyTorch implementation (https://github.com/DingXiaoH/RepVGG) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9628328850182953,
        0.985687333072262
      ],
      "excerpt": "We present a simple but powerful architecture of convolutional neural network, which has a VGG-like inferencetime body composed of nothing but a stack of 3 \u00d7 3 convolution and ReLU, while the training-time model has a \nmulti-branch topology. Such decoupling of the trainingtime and inference-time architecture is realized by a structural re-parameterization technique so that the model is \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9286797800632673,
        0.9357480489324136
      ],
      "excerpt": "top-1 accuracy, which is the first time for a plain model, \nto the best of our knowledge. On NVIDIA 1080Ti GPU, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9614083560538024,
        0.8136402886942643
      ],
      "excerpt": "faster than ResNet-101 with higher accuracy and show favorable accuracy-speed trade-off compared to the stateof-the-art models like EfficientNet and RegNet. \nJIT can be used in the normal way e.g. for inference  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9247063369171039
      ],
      "excerpt": "Please feel free to raise PRs or issues to fix any bugs or to address any concerns \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "RepVGG models in Objax",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/benjaminjellis/Objax-RepVGG/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 21 Dec 2021 07:42:01 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/benjaminjellis/Objax-RepVGG/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "benjaminjellis/Objax-RepVGG",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8029246779979392
      ],
      "excerpt": ": gets you on average ~99.97% speed up (on cpu) \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8801854956928516,
        0.9133368656218674
      ],
      "excerpt": "from RepVGG import create_RepVGG_A0 \nimport objax \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8906805436889632,
        0.8213380337316241
      ],
      "excerpt": "    return F.softmax(model(x, training = False), axis = 1) \npredict = objax.Jit(predict) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8213380337316241
      ],
      "excerpt": "    predict(test_input) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.847790779747722
      ],
      "excerpt": "print(times)  \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/benjaminjellis/Objax-RepVGG/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2021 Benjamin Ellis\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Objax - RepVGG: Making VGG-style ConvNets Great Again",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Objax-RepVGG",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "benjaminjellis",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/benjaminjellis/Objax-RepVGG/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Tue, 21 Dec 2021 07:42:01 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To create a model with train architecture  \n```python\nfrom RepVGG import create_RepVGG_A0\n\ntrain_model = create_RepVGG_A0(deploy = False)\n```\nTo convert this model to inference / deploy architecture\n\n```python\nfrom RepVGG import convert\n\ndeploy_model = convert(model = train_model)\n```\n\nTo create a model with inference / deploy architecture  \n```python\nfrom RepVGG import create_RepVGG_A0\n\nmodel = create_RepVGG_A0(deploy = True)\n```\nTo load pretrained weights \n```python\nfrom RepVGG import create_RepVGG_A0, convert\nimport objax\n\nmodel = create_RepVGG_A0(deploy = False)\nobjax.io.load_var_collection(\"path/to/RepVGG-A0-Train.npz\", model.vars())\n#: do what you want with your train model\ndeploy_model = convert(model, save_path='RepVGG-A0-deploy.npz')\n#: do what you want with your deploy model\n```\n",
      "technique": "Header extraction"
    }
  ]
}