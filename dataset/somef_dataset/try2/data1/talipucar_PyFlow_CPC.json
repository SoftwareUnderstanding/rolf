{
  "citation": [
    {
      "confidence": [
        0.9972508553966268
      ],
      "excerpt": "<sup>Source: https://arxiv.org/pdf/1807.03748.pdf </sub> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "  - [  1, 512, 10, 5, 3, 1] \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/talipucar/PyFlow_CPC",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-01-12T11:12:14Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-13T10:07:46Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9672071447931335
      ],
      "excerpt": "Pytorch implementation of \"Representation Learning with Contrastive Predictive Coding\"  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.910950285819128,
        0.8562934182571929
      ],
      "excerpt": "Model consists of two networks;  \n      -CNN-based Encoder that generates representation z<sub>t</sub> from a given sequence (such as audio) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9304470271187305
      ],
      "excerpt": "To maximize correlation between corresponding q<sub>t+i</sub> and z<sub>t+i</sub> for each i=[1,s] by maximizing diagonal of   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.942828599211031
      ],
      "excerpt": "A custom CNN-based encoder model is provided, and its architecture is defined in  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.950655324179634,
        0.9566674344749916
      ],
      "excerpt": "by modifying it in yaml file. These dimensions are chosen so that we have down-sampling factor of 160 to get a feature vector for  \nevery 10ms of speech, also the rate of the phoneme sequence labels obtained for LibrisSpeech dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8602091206661333,
        0.954743958235298
      ],
      "excerpt": "The more datasets will be supported in the future. \nThe model is evaluated using LibriSpeech phone and speaker classification  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "         |-model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8123406228345195,
        0.9471412523083994
      ],
      "excerpt": "You can save results of evaluations under \"evaluation\" folder. At the moment, the results of  \nevaluation is also printed out on the display, and not saved. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.911434680857629
      ],
      "excerpt": "MLFlow is used to track experiments. It is turned off by default, but can be turned on by changing option in  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Pytorch implementation of the paper, \"Representation Learning with Contrastive Predictive Coding\", or CPC, https://arxiv.org/pdf/1807.03748.pdf",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/talipucar/PyFlow_CPC/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Sun, 26 Dec 2021 02:13:04 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/talipucar/PyFlow_CPC/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "talipucar/PyFlow_CPC",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "It requires Python 3.8. You can set up the environment by following three steps:\n1. Install pipenv using pip\n2. Activate virtual environment\n3. Install required packages \n\nRun following commands in order to set up the environment:\n```\npip install pipenv               #: If it is not installed yet\npipenv shell                     #: Activate virtual environment\npipenv install --skip-lock       #: Install required packages. --skip-lock is optional, \n                                 #: and used to skip generating Pipfile.lock file\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9392088628161557
      ],
      "excerpt": "To train the model using LibrisSpeech dataset, you can use following command: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8174540907975313
      ],
      "excerpt": "Training Objective:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8471237833806575,
        0.8778487586960795
      ],
      "excerpt": "yaml file of the model (\"./config/cpc.yaml\").  \nExample:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8819112768103163
      ],
      "excerpt": "1. LibrisSpeech (train-clean-100) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.918622028861365
      ],
      "excerpt": "You can train the model once you download LibrisSpeech dataset (train-clean-100) and place it under \"./data\" folder.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8174540907975313
      ],
      "excerpt": "    |-training  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python 0_train.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python 1_eval.py \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/talipucar/PyFlow_CPC/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "PyFlow_CPC:",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "PyFlow_CPC",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "talipucar",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/talipucar/PyFlow_CPC/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Sun, 26 Dec 2021 02:13:04 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "self-supervised-learning",
      "self-supervised",
      "contrastive-learning",
      "contrastive-predictive-coding",
      "pytorch"
    ],
    "technique": "GitHub API"
  }
}