{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1710.03958](https://arxiv.org/abs/1710.03958",
      "https://arxiv.org/abs/1710.03958"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Feynman27/pytorch-detect-rfcn",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-09-21T19:42:59Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-08-18T11:07:51Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This project is a pytorch implementation of the baseline \nRFCN in the Detect to Track paper. \nThis repository is influenced by the following implementations:\n\n* [jwyang/faster-rcnn.pytorch](https://github.com/jwyang/faster-rcnn.pytorch), based on Pytorch\n\n* [rbgirshick/py-faster-rcnn](https://github.com/rbgirshick/py-faster-rcnn), based on Pycaffe + Numpy\n\n* [longcw/faster_rcnn_pytorch](https://github.com/longcw/faster_rcnn_pytorch), based on Pytorch + Numpy\n\n* [endernewton/tf-faster-rcnn](https://github.com/endernewton/tf-faster-rcnn), based on TensorFlow + Numpy\n\n* [ruotianluo/pytorch-faster-rcnn](https://github.com/ruotianluo/pytorch-faster-rcnn), Pytorch + TensorFlow + Numpy\n\nOur implementation stems heavily from the work \n[jwyang/faster-rcnn.pytorch](https://github.com/jwyang/faster-rcnn.pytorch). \nAs in that implementation, this repository has the following qualities: \n\n* **It is pure Pytorch code**. We convert all the numpy implementations to pytorch!\n\n* **It supports multi-image batch training**. We revise all the layers, including dataloader, rpn, roi-pooling, etc., to support multiple images in each minibatch.\n\n* **It supports multiple GPUs training**. We use a multiple GPU wrapper (nn.DataParallel here) to make it flexible to use one or more GPUs, as a merit of the above two features.\n\n* **It is memory efficient**. We limit the aspect ratio of the images in each roidb and group images \nwith similar aspect ratios into a minibatch. As such, we can train resnet101 with batchsize = 2 (4 images) on a 2 Titan X (12 GB). \n\n* **Supports 4 pooling methods**. roi pooling, roi alignment, roi cropping, and position-sensitive roi pooling. \nMore importantly, we modify all of them to support multi-image batch training.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8258124231199303
      ],
      "excerpt": "The RFCN network weights are initialized using the ImageNet resnet-101 weights.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.816953443678909
      ],
      "excerpt": "Create a soft link under pytorch-detect-rfcn/data: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.880696325796442
      ],
      "excerpt": "where 'bs' is the batch size with default 1.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.847987774132677
      ],
      "excerpt": "As pointed out by ruotianluo/pytorch-faster-rcnn, choose the right -arch to compile the cuda code: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.885069737427912
      ],
      "excerpt": "Contributions to this project have been made by Thomas Balestri and  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Pytorch implementation of RFCN used as baseline for Imagenet VID+DET in https://arxiv.org/abs/1710.03958.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Feynman27/pytorch-detect-rfcn/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Fri, 24 Dec 2021 09:19:46 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Feynman27/pytorch-detect-rfcn/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Feynman27/pytorch-detect-rfcn",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Feynman27/pytorch-detect-rfcn/master/lib/make.sh",
      "https://raw.githubusercontent.com/Feynman27/pytorch-detect-rfcn/master/lib/model/roi_align/make.sh",
      "https://raw.githubusercontent.com/Feynman27/pytorch-detect-rfcn/master/lib/model/correlation/make.sh",
      "https://raw.githubusercontent.com/Feynman27/pytorch-detect-rfcn/master/lib/model/nms/make.sh",
      "https://raw.githubusercontent.com/Feynman27/pytorch-detect-rfcn/master/lib/model/roi_crop/make.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9952653930297553
      ],
      "excerpt": "cd pytorch-detect-rfcn \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8644500257064217
      ],
      "excerpt": "tar xf ILSVRC2015.tar.gz \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.845306965972179
      ],
      "excerpt": "Make sure the directory structure looks something like: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8411004553040458
      ],
      "excerpt": "    --cuda \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8414348304262289,
        0.8619316322628119
      ],
      "excerpt": "Above, BATCH_SIZE and WORKER_NUMBER can be set adaptively according to your GPU memory size.  \nOn 2 Titan Xps with 12G memory, it can be up to 2 (4 images, 2 per GPU). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.848362453290836
      ],
      "excerpt": "As pointed out by ruotianluo/pytorch-faster-rcnn, choose the right -arch to compile the cuda code: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9979582169967833,
        0.9979947896609701,
        0.974632487657705,
        0.953691433472028,
        0.9481254878291825,
        0.9090225861586715,
        0.9786434758419359,
        0.9184985657663322
      ],
      "excerpt": "Install all the python dependencies using pip: \npip install -r requirements.txt \nCompile the cuda dependencies using following simple commands: \ncd lib \nsh make.sh \nIt will compile all the modules you need, including NMS, PSROI_POOLING, ROI_Pooing, ROI_Align and ROI_Crop.  \nThe default version is compiled with Python 2.7, please compile by yourself if you are using a different python version. \nAs pointed out in this issue, if you encounter some error during the compilation, you might miss to export the CUDA paths to your environment. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8092395378332504
      ],
      "excerpt": "The pretrained resnet-101 model can be accessed from  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8679168927248135
      ],
      "excerpt": "the name res101.pth \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9099653506844673,
        0.8046089599895286
      ],
      "excerpt": "Download the ILSVRC VID and DET (train/val/test lists can be found here.  \nThe ILSVRC2015 images can be downloaded from here \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8299739053936211
      ],
      "excerpt": "Untar the file: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8712770734041416
      ],
      "excerpt": "ln -s $DATAPATH/ILSVRC2015 ./ILSVRC \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.826808109782657,
        0.8184533719938187
      ],
      "excerpt": "Before training, set the correct directory to save and load the trained models. \nThe default is ./output/models. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8510986357414205,
        0.8673400581099576
      ],
      "excerpt": "To train an RFCN D&T model with resnet-101 on Imagenet VID, simply run: \nCUDA_VISIBLE_DEVICES=$GPU_ID python trainval_net.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9270357132629964
      ],
      "excerpt": "Imagenet VID+DET (Train/Test: imagenet_vid_train+imagenet_det_train/imagenet_vid_val, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8318409470605271
      ],
      "excerpt": "model \u00a0  | #GPUs | batch size | lr \u00a0 \u00a0 \u00a0  | lr_decay | max_epoch \u00a0 \u00a0 |  time/epoch | mem/GPU | mAP \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Feynman27/pytorch-detect-rfcn/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Cuda",
      "C",
      "C++",
      "Shell",
      "MATLAB"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2017 Jianwei Yang\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Introduction",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pytorch-detect-rfcn",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Feynman27",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Feynman27/pytorch-detect-rfcn/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Python 2.7\n* Pytorch 0.3.0 (0.4.0 may work, but hasn't been tested)\n* CUDA 8.0 or higher\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 32,
      "date": "Fri, 24 Dec 2021 09:19:46 GMT"
    },
    "technique": "GitHub API"
  }
}