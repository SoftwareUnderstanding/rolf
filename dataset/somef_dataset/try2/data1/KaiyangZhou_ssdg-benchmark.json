{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2106.00592",
      "https://arxiv.org/abs/2001.07685",
      "https://arxiv.org/abs/2106.00592 for more details.\n\n# Updates\n\n**23-10-2021**: StyleMatch has been accepted to [NeurIPS 2021 Workshop on Distribution Shifts: Connecting Methods and Applications](https://sites.google.com/view/distshift2021",
      "https://arxiv.org/abs/1703.06868",
      "https://arxiv.org/abs/2106.00592"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use this code in your research, please cite our paper\n```\n@article{zhou2021stylematch,\n    title={Semi-Supervised Domain Generalization with Stochastic StyleMatch},\n    author={Zhou, Kaiyang and Loy, Chen Change and Liu, Ziwei},\n    journal={arXiv preprint arXiv:2106.00592},\n    year={2021}\n}\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{zhou2021stylematch,\n    title={Semi-Supervised Domain Generalization with Stochastic StyleMatch},\n    author={Zhou, Kaiyang and Loy, Chen Change and Liu, Ziwei},\n    journal={arXiv preprint arXiv:2106.00592},\n    year={2021}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/KaiyangZhou/ssdg-benchmark",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-06-01T09:04:39Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-09T03:51:12Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9964412600863225
      ],
      "excerpt": "This code is the official implementation of the following paper: Semi-Supervised Domain Generalization with Stochastic StyleMatch. The paper addresses a practical and yet under-studied setting for domain generalization: one needs to use limited labeled data along with abundant unlabeled data gathered from multiple distinct domains to learn a generalizable model. This setting greatly challenges existing domain generalization methods, which are not designed to deal with unlabeled data and are thus less scalable in practice. Our approach, StyleMatch, extends the pseudo-labeling-based FixMatch\u2014a state-of-the-art semi-supervised learning framework\u2014in two crucial ways: 1) a stochastic classifier is designed to reduce overfitting and 2) the two-view consistency learning paradigm in FixMatch is upgraded to a multi-view version with style augmentation as the third complementary view. Two benchmarks are constructed for evaluation. Please see the paper at https://arxiv.org/abs/2106.00592 for more details. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Benchmarks for semi-supervised domain generalization.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/KaiyangZhou/ssdg-benchmark/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Thu, 30 Dec 2021 07:54:25 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/KaiyangZhou/ssdg-benchmark/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "KaiyangZhou/ssdg-benchmark",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/KaiyangZhou/ssdg-benchmark/main/scripts/StyleMatch/run_ssdg.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This code is built on top of [Dassl.pytorch](https://github.com/KaiyangZhou/Dassl.pytorch). Please follow the instructions provided in https://github.com/KaiyangZhou/Dassl.pytorch to install the `dassl` environment, as well as to prepare the datasets, PACS and OfficeHome. The five random labeled-unlabeled splits can be downloaded at the following links: [pacs](https://drive.google.com/file/d/1PSliZDI9D-_Wrr3tfRzGVtN2cpM1892p/view?usp=sharing), [officehome](https://drive.google.com/file/d/1hASLWAfkf4qj-WXU5cx9uw9rQDsDvSyO/view?usp=sharing). The splits need to be extracted to the two datasets' folders. Assume you put the datasets under the directory `$DATA`, the structure should look like\n```\n$DATA/\n|\u2013\u2013 pacs/\n|   |\u2013\u2013 images/\n|   |\u2013\u2013 splits/\n|   |\u2013\u2013 splits_ssdg/\n|\u2013\u2013 office_home_dg/\n|   |\u2013\u2013 art/\n|   |\u2013\u2013 clipart/\n|   |\u2013\u2013 product/\n|   |\u2013\u2013 real_world/\n|   |\u2013\u2013 splits_ssdg/\n```\n\nThe style augmentation is based on [AdaIN](https://arxiv.org/abs/1703.06868) and the implementation is based on this code https://github.com/naoto0804/pytorch-AdaIN. Please download the weights of the decoder and the VGG from https://github.com/naoto0804/pytorch-AdaIN and put them under a new folder `ssdg-benchmark/weights`.\n\n",
      "technique": "Header extraction"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/KaiyangZhou/ssdg-benchmark/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2021 Kaiyang Zhou\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Semi-Supervised Domain Generalization",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "ssdg-benchmark",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "KaiyangZhou",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/KaiyangZhou/ssdg-benchmark/blob/main/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The script is provided in `ssdg-benchmark/scripts/StyleMatch/run_ssdg.sh`. You need to update the `DATA` variable that points to the directory where you put the datasets. There are three input arguments: `DATASET`, `NLAB` (total number of labels), and `CFG`. See the tables below regarding how to set the values for these variables.\n\n| `Dataset` | `NLAB` |\n|---|---|\n|`ssdg_pacs`| 210 or 105 |\n|`ssdg_officehome`| 1950 or 975 |\n\n|`CFG`| Description |\n|---|---|\n|`v1`| FixMatch + stochastic classifier + T_style |\n|`v2`| FixMatch + stochastic classifier + T_style-only (i.e. no T_strong) |\n|`v3`| FixMatch + stochastic classifier |\n|`v4`| FixMatch |\n\n`v1` refers to StyleMatch, which is our final model. See the config files in `configs/trainers/StyleMatch` for the detailed settings.\n\nHere we give an example. Say you want to run StyleMatch on PACS under the 10-labels-per-class setting (i.e. 210 labels in total), simply run the following commands in your terminal,\n```bash\nconda activate dassl\ncd ssdg-benchmark/scripts/StyleMatch\nbash run_ssdg.sh ssdg_pacs 210 v1\n```\n\nIn this case, the code will run StyleMatch in four different setups (four target domains), each for five times (five random seeds). You can modify the code to run a single experiment instead of all at once if you have multiple GPUs.\n\nAt the end of training, you will have\n```\noutput/\n|\u2013\u2013 ssdg_pacs/\n|   |\u2013\u2013 nlab_210/\n|   |   |\u2013\u2013 StyleMatch/\n|   |   |   |\u2013\u2013 resnet18/\n|   |   |   |   |\u2013\u2013 v1/ #: contains results on four target domains\n|   |   |   |   |   |\u2013\u2013 art_painting/ #: contains five folders: seed1-5\n|   |   |   |   |   |\u2013\u2013 cartoon/\n|   |   |   |   |   |\u2013\u2013 photo/\n|   |   |   |   |   |\u2013\u2013 sketch/\n```\n\nTo show the results, simply do\n```bash\npython parse_test_res.py output/ssdg_pacs/nlab_210/StyleMatch/resnet18/v1 --multi-exp\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 38,
      "date": "Thu, 30 Dec 2021 07:54:25 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "domain-generalization",
      "semi-supervised-learning",
      "neural-networks",
      "deep-learning",
      "pytorch"
    ],
    "technique": "GitHub API"
  }
}