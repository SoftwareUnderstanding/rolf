{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2106.11447",
      "https://arxiv.org/abs/2106.11447",
      "https://arxiv.org/abs/2106.11447",
      "https://arxiv.org/abs/1807.10165",
      "https://arxiv.org/abs/1905.11946",
      "https://arxiv.org/abs/1505.04597",
      "https://arxiv.org/abs/1911.07067",
      "https://arxiv.org/abs/1803.02579",
      "https://arxiv.org/abs/2106.11447"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you find our work useful and use it or draw inspiration from it in your research, please consider citing it.\n\n```\n@misc{silva2021encoderdecoder,\n      title={Encoder-Decoder Architectures for Clinically Relevant Coronary Artery Segmentation}, \n      author={Jo\u00e3o Louren\u00e7o Silva and Miguel Nobre Menezes and Tiago Rodrigues and Beatriz Silva and Fausto J. Pinto and Arlindo L. Oliveira},\n      year={2021},\n      eprint={2106.11447},\n      archivePrefix={arXiv},\n      primaryClass={eess.IV}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{silva2021encoderdecoder,\n      title={Encoder-Decoder Architectures for Clinically Relevant Coronary Artery Segmentation}, \n      author={Jo\u00e3o Louren\u00e7o Silva and Miguel Nobre Menezes and Tiago Rodrigues and Beatriz Silva and Fausto J. Pinto and Arlindo L. Oliveira},\n      year={2021},\n      eprint={2106.11447},\n      archivePrefix={arXiv},\n      primaryClass={eess.IV}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jlcsilva/EfficientUNetPlusPlus",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-06-20T23:33:40Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-21T01:38:54Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8042630038437599,
        0.931910242828781,
        0.9787514334469024,
        0.9366163049851582,
        0.9751648555574057,
        0.9209270662151384
      ],
      "excerpt": "June23/2021: Initial PyTorch code release for EfficientUNet++ \nThe EfficientUNet++ is a decoder architecture inspired by the UNet++. Although it was designed and fine-tuned for a coronary artery segmentation task, we expect it to perform well across a wide variety of medical image segmentation tasks. We plan to test it on other tasks soon, and will upload test set performance when we do. \nIn our coronary artery segmentation task, using EfficientNet models as backbone, the EfficientUNet++ achieves higher performance that the UNet++, U-Net, ResUNet++ and other high-performing medical image segmentation architectures. Such improvement is achieved by two simple modifications, inspired by the EfficientNet building blocks: \nTo reduce computation, the 3x3 convolutional blocks of the UNet++ are replaced with residual bottleneck blocks with depthwise convolutions \nTo enhance performance, the feature maps outputted by 3x3 depthwise convolution are processed by an scSE, that applies both channel and spatial attention. The SE channel attention used in the EfficientNet was tested, but yielded worse results. For more details, refer to the paper. \nComparison of the EfficientUNet++ and UNet++ building blocks: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9881388827331056
      ],
      "excerpt": "Performance of different decoder architectures as a function of the number of FLOPS and the number of parameters, when using the EfficientNet B0 to B7 models as encoders: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9866497793698438
      ],
      "excerpt": "To help practicioners choose the most adequate model for their clinical needs and available hardware, the Pareto Frontier of the tested models was drawn, with the number of FLOPS as a function of model performance. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9930813532954247,
        0.9676010376186763
      ],
      "excerpt": "The EfficientUNet++ was implemented as an extension of the Segmentation Models Pytorch repository, by Pavel Yakubovskiy. Currently, it is a pending pull request. For detailed information on library installation and model usage, visit the Read The Docs Project Page or the repository's README. \nIt was not possible to obtain the necessary clearances to release the full coronary artery segmentation dataset. Therefore, to enable other researchers and programmers to test our architecture, we provide a toy dataset with 6 coronary angiography images, and built a loader for the the retinal vessel segmentation DRIVE dataset. We still haven't had the time to test the EfficientUNet++ in the retinal vessel segmentation task, but we expect it to perform well when coupled with the right encoder. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9204905800750085
      ],
      "excerpt": "To consult the available encoder architectures, visit the Read The Docs Project Page. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Decoder architecture based on the UNet++. Combining residual bottlenecks with depthwise convolutions and attention mechanisms, it outperforms the UNet++ in a coronary artery segmentation task, while being significantly more computationally efficient.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jlcsilva/EfficientUNetPlusPlus/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Fri, 24 Dec 2021 22:07:35 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jlcsilva/EfficientUNetPlusPlus/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "jlcsilva/EfficientUNetPlusPlus",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8382552603526193
      ],
      "excerpt": "To perform inference, run the following command: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.909130101466226
      ],
      "excerpt": "<img src=\"./doc_images/block_comparison.png\" width=\"100%\" /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.909130101466226
      ],
      "excerpt": "<img src=\"./doc_images/decoder_comparison.png\" width=\"100%\" /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8865553769129669
      ],
      "excerpt": "<img src=\"./doc_images/flops_pareto.png\" width=\"50%\" /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8130026113704641,
        0.9503189345333785,
        0.8258952717194321,
        0.9171742090383529
      ],
      "excerpt": "To train the an EfficientUNet++ model on the coronary artery segmentation toy dataset using the EfficientNetB0 encoder, run: \npython train.py -d Coronary -enc timm-efficientnet-b0 \nTo train the same model on the DRIVE dataset: \npython train.py -d DRIVE -enc timm-efficientnet-b0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py -h \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jlcsilva/EfficientUNetPlusPlus/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2021 jlcsilva\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "EfficientUNet++",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "EfficientUNetPlusPlus",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "jlcsilva",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jlcsilva/EfficientUNetPlusPlus/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 10,
      "date": "Fri, 24 Dec 2021 22:07:35 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "pytorch",
      "deep-learning",
      "segmentation",
      "unet",
      "efficientnet",
      "unetplusplus",
      "efficientunetplusplus",
      "medical-image-segmentation"
    ],
    "technique": "GitHub API"
  }
}