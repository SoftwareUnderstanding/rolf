{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Citation is recommended to reinforce the evaluation protocol in works relying on torch-fidelity. \nTo ensure reproducibility when citing this repository, use the following BibTeX:\n\n```\n@misc{obukhov2020torchfidelity,\n  author={Anton Obukhov and Maximilian Seitzer and Po-Wei Wu and Semen Zhydenko and Jonathan Kyl and Elvis Yu-Jing Lin},\n  year=2020,\n  title={High-fidelity performance metrics for generative models in PyTorch},\n  url={https://github.com/toshas/torch-fidelity},\n  publisher={Zenodo},\n  version={v0.3.0},\n  doi={10.5281/zenodo.4957738},\n  note={Version: 0.3.0, DOI: 10.5281/zenodo.4957738}\n}\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{obukhov2020torchfidelity,\n  author={Anton Obukhov and Maximilian Seitzer and Po-Wei Wu and Semen Zhydenko and Jonathan Kyl and Elvis Yu-Jing Lin},\n  year=2020,\n  title={High-fidelity performance metrics for generative models in PyTorch},\n  url={https://github.com/toshas/torch-fidelity},\n  publisher={Zenodo},\n  version={v0.3.0},\n  doi={10.5281/zenodo.4957738},\n  note={Version: 0.3.0, DOI: 10.5281/zenodo.4957738}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9288499234900766
      ],
      "excerpt": "~/generator.onnx and CIFAR-10 training split: \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/toshas/torch-fidelity",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "When contributing to this repository, please first discuss the change you wish to make via the GitHub issue with the\nowners of this repository before making a change. Unsolicited pull requests may be rejected without consideration. By\nsubmitting a pull request into this repository, the contributor accepts the terms of the LICENSE agreement(s) and\nacknowledges that the proposed change is legally compatible with the repository in every possible way and does not\nimpose any additional constraints on the repository after inclusion. In case the submitted change contains portions of\nanother open-source project, the pull request description must contain references to the original source code, and a\nproper acknowledgement must be added to the README file.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-04-23T10:44:20Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-20T07:52:05Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9689928722722068
      ],
      "excerpt": "Efficient computation of ISC and PPL for input1, and FID and KID between a generative model stored in  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "  --input1-model-num-samples 50000 \\  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "High-fidelity performance metrics for generative models in PyTorch",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/toshas/torch-fidelity/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 22,
      "date": "Thu, 23 Dec 2021 16:40:38 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/toshas/torch-fidelity/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "toshas/torch-fidelity",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/toshas/torch-fidelity/master/utils/package.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```shell script\npip install torch-fidelity\n```\n\nSee also: [Installing the latest GitHub code](https://torch-fidelity.readthedocs.io/en/latest/installation.html#nightly-version) \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8940501118601062
      ],
      "excerpt": "fidelity --gpu 0 --isc --input1 cifar10-train \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8355496339755163
      ],
      "excerpt": "fidelity --gpu 0 --isc --input1 ~/images/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9748709027320682
      ],
      "excerpt": "  --gpu 0 \\ \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8703970270560412
      ],
      "excerpt": "fidelity --gpu 0 --isc --input1 cifar10-train \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8226763253166589,
        0.8406181453381454,
        0.8478741149482443,
        0.8481210325614933
      ],
      "excerpt": "  --input1-model-z-type normal \\ \n  --input1-model-z-size 128 \\ \n  --input1-model-num-samples 50000 \\  \n  --input2 cifar10-train  \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/toshas/torch-fidelity/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Copyright 2020 Anton Obukhov\\n\\nLicensed under the Apache License, Version 2.0 (the \"License\");\\nyou may not use this file except in compliance with the License.\\nYou may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\nUnless required by applicable law or agreed to in writing, software\\ndistributed under the License is distributed on an \"AS IS\" BASIS,\\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\nSee the License for the specific language governing permissions and\\nlimitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Installation",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "torch-fidelity",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "toshas",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/toshas/torch-fidelity/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "toshas",
        "body": "Inputs can be models\r\nPerceptual Path Length\r\nDocumentation",
        "dateCreated": "2021-06-15T14:23:49Z",
        "datePublished": "2021-06-15T14:28:54Z",
        "html_url": "https://github.com/toshas/torch-fidelity/releases/tag/v0.3.0",
        "name": "Version 0.3.0",
        "tag_name": "v0.3.0",
        "tarball_url": "https://api.github.com/repos/toshas/torch-fidelity/tarball/v0.3.0",
        "url": "https://api.github.com/repos/toshas/torch-fidelity/releases/44650881",
        "zipball_url": "https://api.github.com/repos/toshas/torch-fidelity/zipball/v0.3.0"
      },
      {
        "authorType": "User",
        "author_name": "toshas",
        "body": "Fidelity and determinism tests passing, relative errors updated in README.md.\r\nInception weights reuploaded from https://github.com/mseitzer/pytorch-fid/releases in order to assign DOI to this release.",
        "dateCreated": "2020-05-05T12:14:09Z",
        "datePublished": "2020-05-05T12:34:08Z",
        "html_url": "https://github.com/toshas/torch-fidelity/releases/tag/v0.2.0",
        "name": "Version 0.2.0",
        "tag_name": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/toshas/torch-fidelity/tarball/v0.2.0",
        "url": "https://api.github.com/repos/toshas/torch-fidelity/releases/26179868",
        "zipball_url": "https://api.github.com/repos/toshas/torch-fidelity/zipball/v0.2.0"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 335,
      "date": "Thu, 23 Dec 2021 16:40:38 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "pytorch",
      "metrics",
      "gan",
      "generative-model",
      "evaluation",
      "inception-score",
      "frechet-inception-distance",
      "kernel-inception-distance",
      "perceptual-path-length",
      "precision",
      "reproducibility",
      "reproducible-research"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Below are three examples of using torch-fidelity to evaluate metrics from the command line. See more examples in the \ndocumentation.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "When it comes to tracking the performance of generative models as they train, evaluating metrics after every epoch \nbecomes prohibitively expensive due to long computation times. \n`torch_fidelity` tackles this problem by making full use \nof caching to avoid recomputing common features and per-metric statistics whenever possible. \nComputing all metrics for 50000 32x32 generated images and `cifar10-train` takes only 2 min 26 seconds on NVIDIA P100 \nGPU, compared to >10 min if using original codebases. \nThus, computing metrics 20 times over the whole training cycle makes overall training time just one hour longer.\n\nIn the following example, assume unconditional image generation setting with CIFAR-10, and the generative model \n`generator`, which takes a 128-dimensional standard normal noise vector.\n\nFirst, import the module:\n\n```python\nimport torch_fidelity\n```\n\nAdd the following lines at the end of epoch evaluation:\n```python\nwrapped_generator = torch_fidelity.GenerativeModelModuleWrapper(generator, 128, 'normal', 0)\n\nmetrics_dict = torch_fidelity.calculate_metrics(\n    input1=wrapped_generator, \n    input2='cifar10-train', \n    cuda=True, \n    isc=True, \n    fid=True, \n    kid=True, \n    verbose=False,\n)\n```\n\nThe resulting dictionary with computed metrics can logged directly to tensorboard, wandb, or console: \n\n```python\nprint(metrics_dict)\n```\n\nOutput:\n\n```python\n{\n    'inception_score_mean': 11.23678, \n    'inception_score_std': 0.09514061, \n    'frechet_inception_distance': 18.12198,\n    'kernel_inception_distance_mean': 0.01369556, \n    'kernel_inception_distance_std': 0.001310059\n}\n```\n\nSee also: [Full API reference](https://torch-fidelity.readthedocs.io/en/latest/api.html)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Refer to [sngan_cifar10.py](examples/sngan_cifar10.py) for a complete training example.\n\nEvolution of fixed generator latents in the example:\n\n![Evolution of fixed generator latents](doc/img/sngan-cifar10.gif)\n\nA generator checkpoint resulting from training the example can be downloaded \n[here](https://github.com/toshas/torch-fidelity/releases/download/v0.2.0/example-sngan-cifar10-generator.pth). \n\n",
      "technique": "Header extraction"
    }
  ]
}