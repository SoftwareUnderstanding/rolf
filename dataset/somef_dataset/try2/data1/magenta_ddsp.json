{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2001.04643"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use this code please cite it as:\n\n```latex\n@inproceedings{\n  engel2020ddsp,\n  title={DDSP: Differentiable Digital Signal Processing},\n  author={Jesse Engel and Lamtharn (Hanoi) Hantrakul and Chenjie Gu and Adam Roberts},\n  booktitle={International Conference on Learning Representations},\n  year={2020},\n  url={https://openreview.net/forum?id=B1x1ma4tDr}\n}\n```\n<a id='Disclaimer'></a>\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{\n  engel2020ddsp,\n  title={DDSP: Differentiable Digital Signal Processing},\n  author={Jesse Engel and Lamtharn (Hanoi) Hantrakul and Chenjie Gu and Adam Roberts},\n  booktitle={International Conference on Learning Representations},\n  year={2020},\n  url={https://openreview.net/forum?id=B1x1ma4tDr}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9104388306336967
      ],
      "excerpt": "<a id='Citation'></a> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/magenta/ddsp",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "How to Contribute\nWe'd love to accept your patches and contributions to this project.\nDSP can be subtle to get completely right, so we particularly appreciate the\ncontributions of those with expertise in signal processing to help fix any\nmistakes we may have made \ud83d\ude04.\nVersioning\nWe'll do our best to keep the verison updated. This repo contains two code bases\nwhich makes versioning a bit tricky. The core code base ddsp/ and a more\nexperimental training code base ddsp/training/ that is used for active\nresearch. We will thus adopt the following scheme for incrementing version:\nvMajor.Minor.Revision\n\nMajor: Breaking change in ddsp/\nMinor: New feature in ddsp/, breaking change in training/\nRevision: New feature in training/, minor bug fix anywhere\n\nCode Design Goals\nAs much as we can, we would like the DDSP library to be approachable,\nwell-tested, well-documented, and full of useful examples. Thus, PRs that add\nnew functionality should be accompanined with ample documentation and tests to\nhelp newcomers understand a typical use case, and guard against silent failures\nfrom breaking changes in the future. Please follow the existing doc/testing\nstyle when you can.\nTo ensure a consistent style, new code should follow the Google's Python Style Guide\nand will need to pass a google style linter before acceptance. While this can\nadd a little work up front, and occasionally make things more verbose, it helps\nreduce mental overhead and makes the code more readable.\nCode reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\nGitHub Help for more\ninformation on using pull requests.\nPlease be sure to test your code by running pytest and pylint before\nsubmitting a pull request for review. Note that code cannot be merged until\nthese tests pass on GitHub Actions.\nGetting Started\nIf you're looking for a way to contribute, but not sure where to start, you\ncould:\n\nAdd some documentation to an existing function.\nAdd a missing test to improve coverage.\nAdd type hints to functions in a new file.\nAdd a new colab tutorial or demo, covering a typical use case or showing something cool.\nRespond to a bug or feature request in the github Issues.\nAdd a new signal Processor and corresponding test.\n\nContributor License Agreement\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to https://cla.developers.google.com/ to see\nyour current agreements on file or to sign a new one.\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\nCommunity Guidelines\nThis project follows\nGoogle's Open Source Community Guidelines.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-01-14T18:38:27Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-28T23:15:22Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9771159937301556,
        0.9018164650230049,
        0.9728363555020823
      ],
      "excerpt": "DDSP is a library of differentiable versions of common DSP functions (such as \nsynthesizers, waveshapers, and filters). This allows these \ninterpretable elements to be used as part of an deep learning model, especially \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8571164852064844
      ],
      "excerpt": "Check out the blog post \ud83d\udcbb \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.902201430835527
      ],
      "excerpt": "The DDSP library consists of a core library (ddsp/) and a self-contained training library (ddsp/training/). The core library is split up into  into several modules: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8886551524067641
      ],
      "excerpt": "    Base classes for Processor and ProcessorGroup. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8895803573302161
      ],
      "excerpt": "    Helper library of Fourier and related transforms. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9000338439180937,
        0.8489603266133807,
        0.9498445082707456
      ],
      "excerpt": "The Processor is the main object type and preferred API of the DDSP library. It inherits from tfkl.Layer and can be used like any other differentiable module. \nUnlike other layers, Processors (such as Synthesizers and Effects) specifically format their inputs into controls that are physically meaningful. \nFor instance, a synthesizer might need to remove frequencies above the Nyquist frequency to avoid aliasing or ensure that its amplitudes are strictly positive. To this end, they have the methods: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9390275208282092,
        0.9831876541727258
      ],
      "excerpt": "inputs is a variable number of tensor arguments (depending on processor). Often the outputs of a neural network. \ncontrols is a dictionary of tensors scaled and constrained specifically for the processor. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.947259908944683
      ],
      "excerpt": "For example, here are of some inputs to an Harmonic() synthesizer: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.903602161509719
      ],
      "excerpt": "And here are the resulting controls after logarithmically scaling amplitudes, removing harmonics above the Nyquist frequency, and  normalizing the remaining harmonic distribution: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8166247782649342
      ],
      "excerpt": "Consider the situation where you want to string together a group of Processors. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8259762594995318
      ],
      "excerpt": "differentiable harmonic+noise synthesizer with reverb to generate audio for a multi-scale spectrogram reconstruction loss. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9815158142536745,
        0.9516531095618873
      ],
      "excerpt": "A ProcessorGroup allows specifies a as a Directed Acyclic Graph (DAG) of processors. The main advantage of using a ProcessorGroup is that the entire signal processing chain can be specified in a .gin file, removing the need to write code in python for every different configuration of processors. \nYou can specify the DAG as a list of tuples dag = [(processor, ['input1', 'input2', ...]), ...] where processor is an Processor instance, and ['input1', 'input2', ...] is a list of strings specifying input arguments. The output signal of each processor can be referenced as an input by the string 'processor_name/signal' where processor_name is the name of the processor at construction. The ProcessorGroup takes a dictionary of inputs, who keys can be referenced in the DAG. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9009614607129621
      ],
      "excerpt": ": Processor group DAG \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9417222937211789,
        0.8001098530444957
      ],
      "excerpt": "The main advantage of a ProcessorGroup is that it can be defined with a .gin file, allowing flexible configurations without having to write new python code for every new DAG. \nIn the example below we pretend we have an external file written, which we treat here as a string. Now, after parsing the gin file, the ProcessorGroup will have its arguments configured on construction. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127
      ],
      "excerpt": "with gin.unlock_config(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.937734045672027,
        0.806827397580916,
        0.8177237900199359
      ],
      "excerpt": "The gin library is a \"super power\" of \ndependency injection, and we find it very helpful for our experiments, but \nwith great power comes great responsibility. There are two methods for injecting dependencies with gin. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8888880290879209
      ],
      "excerpt": "lead to a lot of unintended side-effects. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8935806299760207
      ],
      "excerpt": "or object with gin, and only sets the default argument values when the function or object itself is used as an argument to another function. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9141861512792087
      ],
      "excerpt": "functions with @gin.register so that they can be specified as arguments of more \"global\" @gin.configurable functions/objects such as ProcessorGroup in the main library and \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.951974793180558,
        0.8172668506779137,
        0.9487502623206527
      ],
      "excerpt": "As you can see in the code, this allows us to flexibly define hyperparameters of \nmost functions without worrying about side-effects. One exception is ddsp.core.oscillator_bank.use_angular_cumsum where we can enable a slower but more accurate algorithm globally. \nFor backwards compatability, we keep track of changes in function signatures in update_gin_config.py, which can be used to update old operative configs to work with the current library. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8971968796558991,
        0.9908605068677583
      ],
      "excerpt": "We're eager to collaborate with you! See CONTRIBUTING.md \nfor a guide on how to contribute. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": " DDSP: Differentiable Digital Signal Processing",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/magenta/ddsp/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 215,
      "date": "Thu, 30 Dec 2021 04:51:03 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/magenta/ddsp/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "magenta/ddsp",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/magenta/ddsp/main/ddsp/training/docker/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/magenta/ddsp/main/ddsp/colab/tutorials/0_processor.ipynb",
      "https://raw.githubusercontent.com/magenta/ddsp/main/ddsp/colab/tutorials/1_synths_and_effects.ipynb",
      "https://raw.githubusercontent.com/magenta/ddsp/main/ddsp/colab/tutorials/3_training.ipynb",
      "https://raw.githubusercontent.com/magenta/ddsp/main/ddsp/colab/tutorials/2_processor_group.ipynb",
      "https://raw.githubusercontent.com/magenta/ddsp/main/ddsp/colab/tutorials/4_core_functions.ipynb",
      "https://raw.githubusercontent.com/magenta/ddsp/main/ddsp/colab/demos/train_autoencoder.ipynb",
      "https://raw.githubusercontent.com/magenta/ddsp/main/ddsp/colab/demos/pitch_detection.ipynb",
      "https://raw.githubusercontent.com/magenta/ddsp/main/ddsp/colab/demos/timbre_transfer.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/magenta/ddsp/main/update_pip.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Requires tensorflow version >= 2.1.0, but the core library runs in either eager or graph mode.\n\n```bash\nsudo apt-get install libsndfile-dev\npip install --upgrade pip\npip install --upgrade ddsp\n```\n\n\n<a id='Overview'></a>\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9769420979004304
      ],
      "excerpt": "| Installation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.877900194026043
      ],
      "excerpt": "<a id='Installation'></a> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8326843017769657
      ],
      "excerpt": "as you would with any other differentiable modules. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8216225838840414
      ],
      "excerpt": "We're eager to collaborate with you! See CONTRIBUTING.md \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8050330767368185
      ],
      "excerpt": "Besides the tutorials, each module has its own test file that can be helpful for examples of usage. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674
      ],
      "excerpt": "import ddsp \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674,
        0.9133368656218674
      ],
      "excerpt": "import ddsp \nimport gin \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674,
        0.9133368656218674
      ],
      "excerpt": "import ddsp \nimport gin \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674
      ],
      "excerpt": "import ddsp \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8909527964052815
      ],
      "excerpt": "Model, train(), evaluate(), and sample() in ddsp/training. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/magenta/ddsp/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook",
      "Dockerfile",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Copyright 2019 Google LLC.\\n\\n                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "DDSP: Differentiable Digital Signal Processing",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "ddsp",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "magenta",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/magenta/ddsp/blob/main/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "## What's Changed\r\n* Inference models for VST by @copybara-service in https://github.com/magenta/ddsp/pull/403\r\n* Add UrmpMidiUnbatched for unsegmented tfrecords in ddsp.training.data. by @lukewys in https://github.com/magenta/ddsp/pull/404\r\n* Fix aliasing in streaming synthesis. by @copybara-service in https://github.com/magenta/ddsp/pull/408\r\n* Add Viterbi decoding to PretrainedCREPE, allows hmm decoding during training. by @copybara-service in https://github.com/magenta/ddsp/pull/406\r\n\r\n\r\n**Full Changelog**: https://github.com/magenta/ddsp/compare/v1.7.0...v1.9.0",
        "dateCreated": "2021-12-21T01:12:56Z",
        "datePublished": "2021-12-24T01:02:03Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v1.9.0",
        "name": "v1.9.0",
        "tag_name": "v1.9.0",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v1.9.0",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/55929206",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v1.9.0"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "* MultiDatasetProvider\r\n* Default upload() to mix down to mono for timbre_transfer\r\n* OnlinePreprocessor\r\n* Small changes for compatibility with MIDI-DDSP",
        "dateCreated": "2021-11-22T18:15:25Z",
        "datePublished": "2021-11-22T18:43:52Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v1.7.0",
        "name": "v1.7.0",
        "tag_name": "v1.7.0",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v1.7.0",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/53862731",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v1.7.0"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "* Replace \"master\" branch  with \"main\"\r\n* Move dataset statistics from colab_utils to postprocessing. ***NB: dataset statistics files will need be regenerated for any models trained before this release.***\r\n* Several small changes for the VST plugin (named outputs of saved model, adding metadata to tflite models, gin config for VST).",
        "dateCreated": "2021-07-22T02:35:43Z",
        "datePublished": "2021-07-22T22:56:25Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v1.6.2",
        "name": "v1.6.2",
        "tag_name": "v1.6.2",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v1.6.2",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/46642293",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v1.6.2"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "Updated SavedModels interface. Scripts for conversion of SavedModels to TFLite and TFJS. Updates to data preparation pipeline to handle very long input files, and enable creating train / eval splits.",
        "dateCreated": "2021-04-08T22:54:28Z",
        "datePublished": "2021-04-19T04:30:53Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v1.3.0",
        "name": "v1.3.0",
        "tag_name": "v1.3.0",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v1.3.0",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/41620671",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v1.3.0"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "Fix bug in DictLayer / PowerPreprocessor that could not handle multiple optional tensors in the call() input signature.",
        "dateCreated": "2021-03-17T22:14:36Z",
        "datePublished": "2021-03-21T22:05:32Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v1.2.0",
        "name": "v1.2.0",
        "tag_name": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v1.2.0",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/40130273",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v1.2.0"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "* Common Base Class for inference models\r\n* Option for different amplitude interpolation on Harmonic synth",
        "dateCreated": "2021-03-15T17:22:30Z",
        "datePublished": "2021-03-15T17:47:11Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v1.1.0",
        "name": "v1.1.0",
        "tag_name": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v1.1.0",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/39834153",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v1.1.0"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "Major (breaking) change\r\n* New base classes \r\n  * `ProcessorGroup` and `LossGroup` inherit from `DAGLayer` (dags.py)\r\n  * All ddsp.training layers [decoders, encoders, preprocessors] inherit from `DictLayer` (nn.py)\r\n* Renamed classes to more precise terms\r\n  * `Additive` -> `Harmonic`\r\n  * `DefaultPreprocessor` -> `F0LoudnessPreprocessor` \r\n  * `TranscribingAutoencoder` -> `Inverse Synthesis`\r\n* New experimental `MidiAutoencoder` model (WIP)\r\n* `Evaluator` classes in eval_util (now configurable from gin instead of a big long series of if statements)\r\n* Minor bug fixes",
        "dateCreated": "2021-01-14T00:47:02Z",
        "datePublished": "2021-01-14T01:08:21Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "tag_name": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v1.0.0",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/36364599",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v1.0.0"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "",
        "dateCreated": "2020-10-29T23:56:55Z",
        "datePublished": "2020-11-11T21:25:25Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v0.13.0",
        "name": " v0.13.0 (last release before breaking change)",
        "tag_name": "v0.13.0",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v0.13.0",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/33825738",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v0.13.0"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "* Cloud training scripts\r\n* Model API refactor (no more `model.get_controls()`, `model()` now returns a dictionary of output tensors instead of audio. Audio can be retrieved with `model.get_audio_from_outputs(outputs)`\r\n* Separate files for each model\r\n* Minor bug fixes",
        "dateCreated": "2020-10-30T00:15:15Z",
        "datePublished": "2020-10-30T00:01:30Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v0.14.0",
        "name": "v0.14.0 (breaking change)",
        "tag_name": "v0.14.0",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v0.14.0",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/33247175",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v0.14.0"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "Release for reproducing the results from the 2020 ICML SAS workshop paper (https://openreview.net/forum?id=RlVTYWhsky7). \r\n\r\nWIP code from the paper added with EXPERIMENTAL disclaimers. \r\nGin configs and details provided in `ddsp/training/gin/papers/icml2020`",
        "dateCreated": "2020-08-12T17:26:03Z",
        "datePublished": "2020-08-13T00:00:36Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v0.12.0",
        "name": "v0.12.0 (ICML 2020 workshop)",
        "tag_name": "v0.12.0",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v0.12.0",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/29629926",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v0.12.0"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "* Custom cumsum operation to avoid phase accumulation errors for generating long sequences.\r\n* Script to automatically update old gin configs.",
        "dateCreated": "2020-07-23T21:08:08Z",
        "datePublished": "2020-07-24T07:55:44Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v.0.10.0",
        "name": "v.0.10.0",
        "tag_name": "v.0.10.0",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v.0.10.0",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/28902523",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v.0.10.0"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "Add custom cumsum function that doesn't accumulate phase errors like tf.cumsum.",
        "dateCreated": "2020-07-18T03:23:41Z",
        "datePublished": "2020-07-18T05:18:03Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v0.8.0",
        "name": "v0.8.0",
        "tag_name": "v0.8.0",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v0.8.0",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/28696876",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v0.8.0"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "* Updated pitch detection metrics (RPA, RCA)\r\n* Sinusoidal Synthesizer\r\n* Warm starting models (model_dir -> save_dir, restore_dir)",
        "dateCreated": "2020-07-14T23:19:24Z",
        "datePublished": "2020-07-15T18:21:38Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v0.7.0",
        "name": "v0.7.0",
        "tag_name": "v0.7.0",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v0.7.0",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/28598616",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v0.7.0"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "Small fixes to bugs introduced by refactor :).",
        "dateCreated": "2020-06-05T22:54:29Z",
        "datePublished": "2020-06-05T23:40:25Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v0.5.1",
        "name": "v0.5.1",
        "tag_name": "v0.5.1",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v0.5.1",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/27282528",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v0.5.1"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "Some bug fixes and a refactor of train_util and eval_util.",
        "dateCreated": "2020-06-05T19:48:48Z",
        "datePublished": "2020-06-05T19:56:26Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v0.5.0",
        "name": "v0.5.0",
        "tag_name": "v0.5.0",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v0.5.0",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/27277683",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v0.5.0"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "* New data normalization in the demo colab notebooks.\r\n* Tiny model config.\r\n* Most (but not all) of the variable sample rate PRs.\r\n* Tests and bug fixes.",
        "dateCreated": "2020-06-03T00:17:07Z",
        "datePublished": "2020-06-03T01:15:00Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v0.4.0",
        "name": "v0.4.0",
        "tag_name": "v0.4.0",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v0.4.0",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/27159180",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v0.4.0"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "Simplify and refactor RnnFcDecoder. \r\n\r\n* Requires old models to add a single line to their operative gin configs, or --gin_param, `RnnFcDecoder.input_keys = ('f0_scaled', 'ld_scaled')`",
        "dateCreated": "2020-04-29T21:20:39Z",
        "datePublished": "2020-04-29T21:26:01Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v0.2.0",
        "name": "v0.2.0",
        "tag_name": "v0.2.0",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v0.2.0",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/26024086",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v0.2.0"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "* Models now use self._loss_dict to keep track of losses, and not the built-in keras self.losses (so that we can keep track of each loss name without needing a synced parallel list).",
        "dateCreated": "2020-04-23T22:04:50Z",
        "datePublished": "2020-04-24T01:07:51Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v0.1.0",
        "name": "v0.1.0",
        "tag_name": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v0.1.0",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/25832827",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v0.1.0"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "* Allow memory growth flag for GPUs with less memory.\r\n* Use latest CREPE\r\n* Remove custom TPU cumsum function\r\n* Bug fixes to colab\r\n* Compare f0 predictions with f0 ground truth\r\n* Creating datasets with different sample rates",
        "dateCreated": "2020-04-06T23:43:38Z",
        "datePublished": "2020-04-06T23:56:59Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v0.0.10",
        "name": "v0.0.10",
        "tag_name": "v0.0.10",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v0.0.10",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/25257989",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v0.0.10"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "Update code to use tensorflow 2 and python 3. ",
        "dateCreated": "2020-02-10T03:50:29Z",
        "datePublished": "2020-02-10T04:20:21Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v0.0.7",
        "name": "v0.0.7",
        "tag_name": "v0.0.7",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v0.0.7",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/23521045",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v0.0.7"
      },
      {
        "authorType": "User",
        "author_name": "jesseengel",
        "body": "Code used in the initial ICLR 2020 paper (https://openreview.net/forum?id=B1x1ma4tDr). `ddsp/` works for tf1 and tf2, while `ddsp/training/` is written with the tf1 Estimator API.",
        "dateCreated": "2020-02-01T03:30:12Z",
        "datePublished": "2020-02-05T01:30:15Z",
        "html_url": "https://github.com/magenta/ddsp/releases/tag/v0.0.6",
        "name": "v0.0.6 (iclr2020)",
        "tag_name": "v0.0.6",
        "tarball_url": "https://api.github.com/repos/magenta/ddsp/tarball/v0.0.6",
        "url": "https://api.github.com/repos/magenta/ddsp/releases/23394812",
        "zipball_url": "https://api.github.com/repos/magenta/ddsp/zipball/v0.0.6"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2028,
      "date": "Thu, 30 Dec 2021 04:51:03 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "First, follow the steps in the [**Installation**](#Installation) section\nto install the DDSP package and its dependencies. DDSP modules can be used to\ngenerate and manipulate audio from neural network outputs as in this simple example:\n\n```python\nimport ddsp\n\n#: Get synthesizer parameters from a neural network.\noutputs = network(inputs)\n\n#: Initialize signal processors.\nharmonic = ddsp.synths.Harmonic()\n\n#: Generates audio from harmonic synthesizer.\naudio = harmonic(outputs['amplitudes'],\n                 outputs['harmonic_distribution'],\n                 outputs['f0_hz'])\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Colab notebooks demonstrating some of the neat things you can do with DDSP [`ddsp/colab/demos`](./ddsp/colab/demos)\n\n*   [Timbre Transfer](https://colab.research.google.com/github/magenta/ddsp/blob/main/ddsp/colab/demos/timbre_transfer.ipynb):\n    Convert audio between sound sources with pretrained models. Try turning your voice into a violin, or scratching your laptop and seeing how it sounds as a flute :). Pick from a selection of pretrained models or upload your own that you can train with the `train_autoencoder` demo.\n\n*   [Train Autoencoder](https://colab.research.google.com/github/magenta/ddsp/blob/main/ddsp/colab/demos/train_autoencoder.ipynb):\n    Takes you through all the steps to convert audio files into a dataset and train your own DDSP autoencoder model. You can transfer data and models to/from google drive, and download a .zip file of your trained model to be used with the `timbre_transfer` demo.\n\n*   [Pitch Detection](https://colab.research.google.com/github/magenta/ddsp/blob/main/ddsp/colab/demos/pitch_detection.ipynb):\n    Demonstration of self-supervised pitch detection models from the [2020 ICML Workshop paper](https://openreview.net/forum?id=RlVTYWhsky7).\n\n\n\n\n<a id='Tutorials'></a>\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "To introduce the main concepts of the library, we have step-by-step colab tutorials for all the major library components\n[`ddsp/colab/tutorials`](./ddsp/colab/tutorials).\n\n*  [0_processor](https://colab.research.google.com/github/magenta/ddsp/blob/main/ddsp/colab/tutorials/0_processor.ipynb):\n    Introduction to the Processor class.\n* [1_synths_and_effects](https://colab.research.google.com/github/magenta/ddsp/blob/main/ddsp/colab/tutorials/1_synths_and_effects.ipynb):\n    Example usage of processors.\n*   [2_processor_group](https://colab.research.google.com/github/magenta/ddsp/blob/main/ddsp/colab/tutorials/2_processor_group.ipynb):\n    Stringing processors together in a ProcessorGroup.\n* [3_training](https://colab.research.google.com/github/magenta/ddsp/blob/main/ddsp/colab/tutorials/3_training.ipynb):\n    Example of training on a single sound.\n*   [4_core_functions](https://colab.research.google.com/github/magenta/ddsp/blob/main/ddsp/colab/tutorials/4_core_functions.ipynb):\n    Extensive examples for most of the core DDSP functions.\n\n\n",
      "technique": "Header extraction"
    }
  ]
}