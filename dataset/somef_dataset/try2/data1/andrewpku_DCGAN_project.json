{
  "citation": [
    {
      "confidence": [
        0.9976098479485174,
        0.9939456064149615,
        0.8654671031158477
      ],
      "excerpt": "\u751f\u6210\u5bf9\u6297\u7f51\u7edc\u662f 2014 \u5e74\u7531\u4f0a\u6069\u00b7\u53e4\u5fb7\u8d39\u6d1b\u7b49\u4eba\u63d0\u51fa\u7684\u4e00\u79cd\u975e\u76d1\u7763\u5f0f\u5b66\u4e60\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u7684\u7279\u70b9\u662f\u901a\u8fc7\u8ba9\u4e24\u4e2a\u795e\u7ecf\u7f51\u7edc\u76f8\u4e92\u535a\u5f08\u7684\u65b9\u5f0f\u8fdb\u884c\u5b66\u4e60\u3002https://papers.nips.cc/paper/5423-generative-adversarial-nets.pdf \nDCGAN(Deep Convolutional Generative Adversarial Networks) \u6df1\u5ea6\u5377\u79ef\u751f\u6210\u5bf9\u6297\u7f51\u7edc\u662f GAN \u7684\u4e00\u79cd\u5341\u5206\u5b9e\u7528\u7684\u5ef6\u4f38\u7f51\u7edc\uff0c\u5b83\u7531 Alec Radford \u7b49\u4eba\u4e8e 2015 \u5e74\u63d0\u51fa https://arxiv.org/pdf/1511.06434.pdf DCGAN \u5c06\u5377\u79ef\u7f51\u7edc\u5f15\u5165\u5230\u751f\u6210\u5f0f\u6a21\u578b\u5f53\u4e2d\u6765\u505a\u65e0\u76d1\u7763\u7684\u8bad\u7ec3\u3002\u8fd9\u79cd\u7ed3\u6784\u5f88\u597d\u5730\u5229\u7528\u4e86\u5377\u79ef\u7f51\u7edc\u5f3a\u5927\u7684\u7279\u5f81\u63d0\u53d6\u80fd\u529b\uff0c\u4ece\u800c\u6709\u6548\u63d0\u9ad8\u4e86\u751f\u6210\u7f51\u7edc\u7684\u5b66\u4e60\u6548\u679c\u3002 \n\u9700\u8981\u627e\u5230\u4e00\u4e9b\u52a8\u6f2b\u4eba\u7269\u5934\u50cf\u6570\u636e\u3002\u4e0d\u7528\u7279\u522b\u591a\uff0c\u51e0\u5343\u5f20\u5c31\u53ef\u4ee5\u4e86\u3002\u4f8b\u5982\u7f51\u7ad9 https://danbooru.donmai.us/ \uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u722c\u866b\u722c\u53d6\u3002 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8955886365383559
      ],
      "excerpt": "        #: layer1 \u8f93\u5165 3 x 96 x 96, \u8f93\u51fa (ndf) x 32 x 32 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8028046190715653
      ],
      "excerpt": "\u6839\u636e https://pytorch.org/tutorials/ \u5b66\u4f1a\u4f7f\u7528pytorch\u5e38\u7528\u547d\u4ee4 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/andrewpku/DCGAN_project",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-12-02T16:48:54Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-12-26T01:22:43Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8593526087760304
      ],
      "excerpt": "parser.add_argument('--nz', type=int, default=100, help='size of the latent z vector') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9693233393948762
      ],
      "excerpt": "netD = NetD(opt.ndf).to(device) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "    for i, (imgs,) in enumerate(dataloader): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9693233393948762
      ],
      "excerpt": "        imgs=imgs.to(device) \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/andrewpku/DCGAN_project/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 01:18:29 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/andrewpku/DCGAN_project/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "andrewpku/DCGAN_project",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8732089505944296
      ],
      "excerpt": "\u94fe\u63a5: https://pan.baidu.com/s/1C2l836KAGAQR_H_RnZkAqQ \u63d0\u53d6\u7801: twrh \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.86922793164534
      ],
      "excerpt": "\u6839\u636e https://pytorch.org/tutorials/ \u5b66\u4f1a\u4f7f\u7528pytorch\u5e38\u7528\u547d\u4ee4 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.83348616439994
      ],
      "excerpt": "\u5b66\u4f1a\u5b89\u88c5\u914d\u7f6eAnaconda\uff0c\u5b66\u4f1a\u4f7f\u7528conda\u5305/\u73af\u5883\u7ba1\u7406\u5de5\u5177\u7ba1\u7406\u9879\u76ee https://docs.conda.io/projects/conda/en/latest/user-guide/index.html \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "            nn.ReLU(inplace=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "            nn.ReLU(inplace=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "            nn.ReLU(inplace=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "            nn.ReLU(inplace=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "            nn.LeakyReLU(0.2, inplace=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "            nn.LeakyReLU(0.2, inplace=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "            nn.LeakyReLU(0.2, inplace=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "            nn.LeakyReLU(0.2, inplace=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674
      ],
      "excerpt": "import argparse \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674,
        0.949799100307373
      ],
      "excerpt": "import torchvision \nimport torchvision.utils as vutils \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8618150443179252,
        0.8873006927274142
      ],
      "excerpt": "from random import randint \nfrom model import NetD, NetG \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8324489858643817,
        0.8015076243342129,
        0.8458038438593908,
        0.8113231489152182,
        0.8113231489152182,
        0.896281921166538
      ],
      "excerpt": "parser.add_argument('--batchSize', type=int, default=64) \nparser.add_argument('--imageSize', type=int, default=96) \nparser.add_argument('--nz', type=int, default=100, help='size of the latent z vector') \nparser.add_argument('--ngf', type=int, default=64) \nparser.add_argument('--ndf', type=int, default=64) \nparser.add_argument('--epoch', type=int, default=25, help='number of epochs to train for') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.913675320024703,
        0.8850358881012639
      ],
      "excerpt": "parser.add_argument('--data_path', default='data/', help='folder to train data') \nparser.add_argument('--outf', default='imgs/', help='folder to output images and model checkpoints') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984,
        0.8594142235991984
      ],
      "excerpt": "    shuffle=True, \n    drop_last=True, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8088524788593131
      ],
      "excerpt": "        output = netD(imgs) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8128703818678683,
        0.8284440407499247
      ],
      "excerpt": "    print('[%d/%d][%d/%d] Loss_D: %.3f Loss_G %.3f' \n          % (epoch, opt.epoch, i, len(dataloader), errD.item(), errG.item())) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8014076599903336,
        0.8594142235991984,
        0.8017423591753804
      ],
      "excerpt": "                  '%s/fake_samples_epoch_%03d.png' % (opt.outf, epoch), \n                  normalize=True) \ntorch.save(netG.state_dict(), '%s/netG_%03d.pth' % (opt.outf, epoch)) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/andrewpku/DCGAN_project/issues{/number}",
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "\u4f7f\u7528 DCGAN \u751f\u6210\u52a8\u6f2b\u5c0f\u59d0\u59d0\u5934\u50cf",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "DCGAN_project",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "andrewpku",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/andrewpku/DCGAN_project/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 01:18:29 GMT"
    },
    "technique": "GitHub API"
  }
}