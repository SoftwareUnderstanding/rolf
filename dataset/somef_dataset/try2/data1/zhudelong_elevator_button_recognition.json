{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "by [Delong Zhu](http://www.ee.cuhk.edu.hk/~dlzhu/) at Robotics, Perception, and AI Laboratory, CUHK\n\n",
      "technique": "Header extraction"
    }
  ],
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{zhu2018novel,\n  title={A Novel OCR-RCNN for Elevator Button Recognition},\n  author={Zhu, Delong and Li, Tingguang and Ho, Danny and Zhou, Tong and Meng, Max QH},\n  booktitle={2018 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)},\n  pages={3626--3631},\n  year={2018},\n  organization={IEEE}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8038947094732473
      ],
      "excerpt": "    Image Source: [https://www.youtube.com/watch?v=bQpEYpg1kLg&t=8s] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8038947094732473
      ],
      "excerpt": "    Image Source: [https://www.youtube.com/watch?v=k1bTibYQjTo&t=9s] \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zhudelong/elevator_button_recognition",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-02-28T17:12:54Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-25T13:15:25Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**OCR-RCNN** is designed for elevator button recognition task based on [Faster RCNN](http://arxiv.org/abs/1506.01497), which includes a Region Proposal Network (RPN), an Object Detection Network and a Character Recognition Network. This framework aims to help solve inter-floor navigation problem of service robots.\n\nIn this package, a **button recognition service** is implemented based on a trained OCR-RCNN model. The service takes a raw image as input and returns the detection, localization and character recognition results. Besides, a **Multi-Tracker** is also implemented, which utilizes the outputs of recognition service to initialize the tracking process, yielding an on-line detection performance.\n\nIf you find it helpful to your project, please consider cite our paper:\n\n```\n@inproceedings{zhu2018novel,\n  title={A Novel OCR-RCNN for Elevator Button Recognition},\n  author={Zhu, Delong and Li, Tingguang and Ho, Danny and Zhou, Tong and Meng, Max QH},\n  booktitle={2018 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)},\n  pages={3626--3631},\n  year={2018},\n  organization={IEEE}\n}\n@ARTICLE{9324975,\n  author={D. {Zhu} and Y. {Fang} and Z. {Min} and D. {Ho} and M. Q. . -H. {Meng}},\n  journal={IEEE Transactions on Industrial Electronics}, \n  title={OCR-RCNN: An Accurate and Efficient Framework for Elevator Button Recognition}, \n  year={2021},\n  volume={},\n  number={},\n  pages={1-1},\n  doi={10.1109/TIE.2021.3050357}}\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9611950133817342
      ],
      "excerpt": "The simplest KCF tracker is used in this implementation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8433854688546855
      ],
      "excerpt": "Two demo-videos are also provided. The first one is a composition video, where each frame is processed off-line, then composed to a complete video. This video shows us the recognition performance of OCR-RCNN in an untrained elevator. The second one is a real-time video, where the OCR-RCNN and a Multi-Tracker is utilized to carry out on-line recognition task. As we can see, although the tracker can help increase the recognition speed, its accuracy and robustness are worse than the off-line version. So, it is crucial to further improve the OCR-RCNN's time efficiency in the next stage! \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Button recognition for autonomous elevator operation",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zhudelong/elevator_button_recognition/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Mon, 27 Dec 2021 06:07:56 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zhudelong/elevator_button_recognition/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "zhudelong/elevator_button_recognition",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "0.\tDownload the [OCR-RCNN model](https://drive.google.com/file/d/1SM3p5NW6k2R04Bn72T1veE8hJSNnbvzf/view?usp=sharing) and put it in the folder `elevator_button_recognition/src/button_recognition/ocr_rcnn_model/`\n0.\tRun `cd elevator_button_recognition` and run `catkin_init_workspace`\n0.\tRun `catkin_make -j[thread_number]`\n1.\tRun `source elevator_button_recognition/devel/setup.bash` or add the command to '~/.bashrc'\n2.\t(Optional) add the path of ocr-rcnn mode to launch file at `elevator_button_recognition/src/button_recognition/launch`\n3.\t(Optional) add the path of test samples to launch file at `elevator_button_recognition/src/button_tracker/launch`\n   - If `image_only == true`, three panel images in `src/button_tracker/test_samples` will be tested.\n   - If `image_only == false`, a video in `src/button_tracker/test_samples` will be tested.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8473486577107378
      ],
      "excerpt": "    Image Source: [https://www.youtube.com/watch?v=bQpEYpg1kLg&t=8s] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8473486577107378
      ],
      "excerpt": "    Image Source: [https://www.youtube.com/watch?v=k1bTibYQjTo&t=9s] \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9104082820517199
      ],
      "excerpt": "    <img src=\"demos/sample-1.jpg\" width=960 height=540> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9104082820517199
      ],
      "excerpt": "    <img src=\"demos/sample-2.jpg\" width=960 height=540> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zhudelong/elevator_button_recognition/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "CMake"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 zhudelong\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "A Novel OCR-RCNN for Elevator Button Recognition",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "elevator_button_recognition",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "zhudelong",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zhudelong/elevator_button_recognition/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Ubuntu 14.04\n2. ROS indigo\n2. TensorFlow 1.4.1\n0.\tOpenCV 3.4.1\n     - compiled with OpenCV's [extra modules](https://github.com/opencv/opencv_contrib)\n2.\tGPU: GTX Titan X\n\t- with a total memory of 12288MB\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 19,
      "date": "Mon, 27 Dec 2021 06:07:56 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "robotics",
      "navigation",
      "computer-vision"
    ],
    "technique": "GitHub API"
  }
}