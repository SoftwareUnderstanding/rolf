{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1810.04805.\n\nAlthough after bert, a number of excellent models that have swept the NLP field, such as [RoBERTa](https://github.com/pytorch/fairseq/blob/master/examples/roberta/README.md"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use Bert-Classifier in a scientific publication, we would appreciate references to the following BibTex entry:\n\n```latex\n@misc{yaohua2019bertclassifier,\n  title={bert-classifier},\n  author={Yaohua, Guo},\n  howpublished={\\url{https://github.com/guoyaohua/BERT-Classifier}},\n  year={2019}\n}\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{yaohua2019bertclassifier,\n  title={bert-classifier},\n  author={Yaohua, Guo},\n  howpublished={\\url{https://github.com/guoyaohua/BERT-Classifier}},\n  year={2019}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8090016440670298
      ],
      "excerpt": "class DataProcessor(object): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8090016440670298
      ],
      "excerpt": "class InputExample(object): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488,
        0.8356013927728488
      ],
      "excerpt": "    --vocab_file=./pre_train_model/uncased_L-12_H-768_A-12/vocab.txt \\ \n    --init_checkpoint=./pre_train_model/uncased_L-12_H-768_A-12/bert_model.ckpt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "    ./pre_train_model/uncased_L-12_H-768_A-12/vocab.txt \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "    ./pre_train_model/uncased_L-12_H-768_A-12/bert_model.ckpt \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "| 512           | 5     | 10    | 20    | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9278824608274014
      ],
      "excerpt": "| 32            | 9.06  | 12.07 | 15.31 | \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/guoyaohua/BERT-Classifier",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-12-06T06:36:18Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-17T09:22:23Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[BERT](https://github.com/google-research/bert) is a pre-trained language model proposed by Google AI in 2018. It has achieved excellent results in many tasks in the NLP field, and it is also a turning point in the NLP field., academic paper which describes BERT in detail and provides full results on a number of tasks can be found here:https://arxiv.org/abs/1810.04805.\n\nAlthough after bert, a number of excellent models that have swept the NLP field, such as [RoBERTa](https://github.com/pytorch/fairseq/blob/master/examples/roberta/README.md), [XLNet](https://github.com/zihangdai/xlnet), etc., have also been improved on the basis of BERT.\n\nBERT-Classifier is a general text classifier that is simple and easy to use. It has been improved on the basis of BERT and supports three paragraphs of sentences as input for prediction. The low-level API was used to reconstruct the overall pipline, which effectively solved the problem of weak flexibility of the tensorflow estimator. Optimize the training process, effectively reduce the model initialization time, solve the problem of repeatedly reloading the calculation graph during the estimator training process, and add a wealth of monitoring indicators during training, including (precision, recall, AUC, ROC curve, Confusion Matrix, F1 score, learning rate, loss, etc.), which can effectively monitor model changes during training.\n\nBERT-Classifier takes full advantage of the Python multi-process mechanism, multi-core speeds up the data preprocessing process, and the data preprocessing speed is more than 10 times faster than the original bert run_classifier (the specific speed increase is related to the number of CPU cores, frequency, and memory size).\n\nOptimized the model checkpoint saving mechanism, which can save TOP N checkpoints according to different indicators, and adds the checkpoint average function, which can fuse model parameters generated in multiple different stages to further enhance model robustness.\n\nIt also supports packaging the trained models into services for use by downstream tasks.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9826442629563729,
        0.9566758414432053,
        0.9629402955394804
      ],
      "excerpt": ":muscle:: State-of-the-art: based on pretrained 12/24-layer BERT models released by Google AI, which is considered as a milestone in the NLP community. \n:hatching_chick: Easy-to-use: require only two lines of code to fine-tune model or do inference. \n:zap: Fast: The data preprocessing speed is more than 10 times faster than the original bert run_classifier (the specific speed improvement is related to the number of CPU cores, frequency, and memory size). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9562879859550752
      ],
      "excerpt": ":gem: Reliable: Tested on a variety of data sets; days of running without a break or OOM or any nasty exceptions. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9296751520447174
      ],
      "excerpt": ":floppy_disk: Model-average: Supports averaging model parameters from multiple different stages to further enhance model robustness. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8470729510791507
      ],
      "excerpt": "    \"\"\"Base class for data converters for sequence classification data sets.\"\"\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9476620642362698
      ],
      "excerpt": "    \"\"\"Gets a collection of `InputExample`s for the dev set.\"\"\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9277515448761429
      ],
      "excerpt": "    \"\"\"Gets a collection of `InputExample`s for prediction.\"\"\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9479926560291031
      ],
      "excerpt": "    \"\"\"Gets the list of labels for this data set.\"\"\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.800394070862111
      ],
      "excerpt": "InputExample is defined as follows: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8582740222080238
      ],
      "excerpt": "      text_a: string. The untokenized text of the first sequence. For single \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "    \"\"\"Custom data processor\"\"\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259,
        0.8979411005071259,
        0.8979411005071259
      ],
      "excerpt": "                text_a = tokenization.convert_to_unicode(data[0]) \n                text_b = tokenization.convert_to_unicode(data[1]) \n                text_c = tokenization.convert_to_unicode(data[2]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259,
        0.8979411005071259,
        0.8979411005071259,
        0.8979411005071259
      ],
      "excerpt": "                text_a = tokenization.convert_to_unicode(data[0]) \n                text_b = tokenization.convert_to_unicode(data[1]) \n                text_c = tokenization.convert_to_unicode(data[2]) \n                weight = float(data[3]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = BertClassifier(data_processor,  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9000300800336228
      ],
      "excerpt": "| data_dir               | str   | \"./data/\"        | The input data dir. Should contain the .tsv files (or other data files) for the task. | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8746320048613916,
        0.9383604798692823
      ],
      "excerpt": "| warmup_proportion      | float | 0.1              | Proportion of training to perform linear learning rate warmup for. E.g., 0.1 = 10% of training. | \n| save_checkpoints_steps | int   | 1000             | How often to save the model checkpoint.                      | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9406380641381543
      ],
      "excerpt": "| keep_checkpoint_max    | int   | 20               | How many checkpoints to keep for more.                       | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9498734762707542
      ],
      "excerpt": "Bert-Classifier uses multiple processes to accelerate data preprocessing, which is more than 10 times faster than bert preprocessing (specifically related to the number of CPU cores, clock speed, and memory size). The program will adaptively start the corresponding number of processes according to the user's CPU core information. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9036739419302557
      ],
      "excerpt": "All experiments are based on  BERT-Base , the GPU uses GTX 1080 (8G), and Tnesorflow version is 1.14.0. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9277678599354774
      ],
      "excerpt": "In terms of calculation speed, the comparison of the time (ms) consumed by the model to run one training step at full GPU load under different max_seq_len conditions was tested. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9016491916444623
      ],
      "excerpt": "The test compares the time (s) consumed by the model to run an Inference with the GPU fully loaded under different max_seq_len conditions. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A general text classifier based on BERT. Multi-process data processing, multi-gpu parallel training, rich monitoring indicators.",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Download a model listed below, then uncompress the zip file into some folder, like `./pre_train_model/uncased_L-12_H-768_A-12/`\n\nList of released pretrained BERT models: ([You can also download it here](https://github.com/google-research/bert#pre-trained-models))\n\n| Model                                                        | Description                                                  |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| **[`BERT-Large, Uncased (Whole Word Masking)`](https://storage.googleapis.com/bert_models/2019_05_30/wwm_uncased_L-24_H-1024_A-16.zip)** | 24-layer, 1024-hidden, 16-heads, 340M parameters             |\n| **[`BERT-Large, Cased (Whole Word Masking)`](https://storage.googleapis.com/bert_models/2019_05_30/wwm_cased_L-24_H-1024_A-16.zip)** | 24-layer, 1024-hidden, 16-heads, 340M parameters             |\n| **[`BERT-Base, Uncased`](https://storage.googleapis.com/bert_models/2018_10_18/uncased_L-12_H-768_A-12.zip)** | 12-layer, 768-hidden, 12-heads, 110M parameters              |\n| **[`BERT-Large, Uncased`](https://storage.googleapis.com/bert_models/2018_10_18/uncased_L-24_H-1024_A-16.zip)** | 24-layer, 1024-hidden, 16-heads, 340M parameters             |\n| **[`BERT-Base, Cased`](https://storage.googleapis.com/bert_models/2018_10_18/cased_L-12_H-768_A-12.zip)** | 12-layer, 768-hidden, 12-heads , 110M parameters             |\n| **[`BERT-Large, Cased`](https://storage.googleapis.com/bert_models/2018_10_18/cased_L-24_H-1024_A-16.zip)** | 24-layer, 1024-hidden, 16-heads, 340M parameters             |\n| **[`BERT-Base, Multilingual Cased (New, recommended)`](https://storage.googleapis.com/bert_models/2018_11_23/multi_cased_L-12_H-768_A-12.zip)** | 104 languages, 12-layer, 768-hidden, 12-heads, 110M parameters |\n| **[`BERT-Base, Multilingual Uncased (Orig, not recommended)`](https://storage.googleapis.com/bert_models/2018_11_03/multilingual_L-12_H-768_A-12.zip)** | 102 languages, 12-layer, 768-hidden, 12-heads, 110M parameters |\n| **[`BERT-Base, Chinese`](https://storage.googleapis.com/bert_models/2018_11_03/chinese_L-12_H-768_A-12.zip)** | Chinese Simplified and Traditional, 12-layer, 768-hidden, 12-heads, 110M parameters |\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/guoyaohua/BERT-Classifier/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Mon, 27 Dec 2021 15:47:30 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/guoyaohua/BERT-Classifier/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "guoyaohua/BERT-Classifier",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8629752898037404
      ],
      "excerpt": "Note that the Bert-Classifier MUST be running on Python >= 3.5 with Tensorflow == 1.14.0. the Bert-Classifier does not support Tensorflow 2.0! \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8449112906630891
      ],
      "excerpt": "You can fine-tune the model with the following command: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8434893097345889,
        0.9748709027320682
      ],
      "excerpt": "All experiments are based on  BERT-Base , the GPU uses GTX 1080 (8G), and Tnesorflow version is 1.14.0. \n| max_seq_len | 1 GPU | 2 GPU | 4 GPU | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9748709027320682
      ],
      "excerpt": "| max_seq_len | 1 GPU | 2 GPU | 4 GPU | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9748709027320682
      ],
      "excerpt": "| max_seq_len | 1 GPU | 2 GPU | 4 GPU | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9748709027320682
      ],
      "excerpt": "| max_seq_len | 1 GPU | 2 GPU | 4 GPU | \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8567541763178919
      ],
      "excerpt": "        specified for train and dev examples, but not for test examples. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8567541763178919
      ],
      "excerpt": "        specified for train and dev examples, but not for test examples. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8186644308502924
      ],
      "excerpt": "    return self._create_examples(os.path.join(data_dir, \"train.tsv\"), \"train\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8838148168639296
      ],
      "excerpt": "    examples = [] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8842384110312396
      ],
      "excerpt": "            data = line[:-1].split('\\t') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.84636054230593
      ],
      "excerpt": "    return examples \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516,
        0.8440293382790072
      ],
      "excerpt": "from processor import MyProcessor \n: line:164 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8440293382790072
      ],
      "excerpt": ": line:165 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8293498896129147,
        0.8509998046085028,
        0.8179842733465443
      ],
      "excerpt": "| data_dir               | str   | \"./data/\"        | The input data dir. Should contain the .tsv files (or other data files) for the task. | \n| output_dir             | str   | \"./output/\"      | The output directory where the model checkpoints will be written. | \n| tensorboard_dir        | str   | \"./tensorboard/\" | The tensorboard output dir.                                  | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.888095421302535
      ],
      "excerpt": "| do_lower_case          | bool  | True             | Whether to lower case the input text. Should be True for uncased models and False for cased models. | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8932626685351563,
        0.8316611061807273,
        0.896460118015122,
        0.8929315471802101,
        0.9130799022780848
      ],
      "excerpt": "| do_train               | bool  | True             | Whether to run training.                                     | \n| do_predict             | bool  | False            | Whether to run the model in inference mode on the test set.  | \n| train_batch_size       | int   | 16               | Total batch size for training.                               | \n| eval_batch_size        | int   | 128              | Total batch size for eval.                                   | \n| predict_batch_size     | int   | 128              | Total batch size for predict.                                | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8254779235786275
      ],
      "excerpt": "| num_train_epochs       | int   | 1                | Total number of training epochs to perform.                  | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8528224326368888
      ],
      "excerpt": "| predict_file           | str   | (Optional)       | The predict input file, only for inference mode.             | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.827615574762504
      ],
      "excerpt": "| use_GPU                | bool  | True             | Whether use GPU to speed up training.                        | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "$python run_fine_tune.py  \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8257584507053086
      ],
      "excerpt": "In training mode, the model uses TFRecords files as input, which can make better use of memory, so after running run_fine_tune.py, the program first preprocesses the original input data and writes it to the TFRecords file. These files will be stored in the data_dir directory. This operation will only be performed for the first time. If the original data changes, you need to delete the TFRecords file in the data_dir directory, so that the program will generate TFRcords files based on the new data again. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "$python start_service.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "$python average_checkpoints.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8283971868427267
      ],
      "excerpt": "| 128           | 34    | 68    | 136   | \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/guoyaohua/BERT-Classifier/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Introduction\">Introduction</a> \u2022",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "BERT-Classifier",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "guoyaohua",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/guoyaohua/BERT-Classifier/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 13,
      "date": "Mon, 27 Dec 2021 15:47:30 GMT"
    },
    "technique": "GitHub API"
  },
  "support": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Bert-Classifier uses data parallelism to implement multi-GPU parallel training tasks. You can choose to use CPU, single GPU, multi-GPU for training and inference tasks according to different needs.\n\n```shell\n#: Use CPU to train\n$python run_fine_tune.py  \\\n\t--bert_config_file=./pre_train_model/uncased_L-12_H-768_A-12/bert_config.json \\\n\t--vocab_file=./pre_train_model/uncased_L-12_H-768_A-12/vocab.txt \\\n\t--init_checkpoint=./pre_train_model/uncased_L-12_H-768_A-12/bert_model.ckpt \\\n\t--use_gpu=False\n\t\n#: Use single GPU to train\n$CUDA_VISIBLE_DEVICES=0 python run_fine_tune.py  \\\n\t--bert_config_file=./pre_train_model/uncased_L-12_H-768_A-12/bert_config.json \\\n\t--vocab_file=./pre_train_model/uncased_L-12_H-768_A-12/vocab.txt \\\n\t--init_checkpoint=./pre_train_model/uncased_L-12_H-768_A-12/bert_model.ckpt \\\n\t--use_gpu=True\n\t\n#: Use multi-GPU to train\n$python run_fine_tune.py  \\\n\t--bert_config_file=./pre_train_model/uncased_L-12_H-768_A-12/bert_config.json \\\n\t--vocab_file=./pre_train_model/uncased_L-12_H-768_A-12/vocab.txt \\\n\t--init_checkpoint=./pre_train_model/uncased_L-12_H-768_A-12/bert_model.ckpt \\\n\t--use_gpu=True\n```\n\nIn the multi-GPU training mode, Bert-Classifier will keep a copy of the model with shared parameters on each GPU, and will automatically distribute the input batch evenly to all GPUs for forward propagation and gradient calculation. The gradient values obtained by each GPU calculation will be reassembled, and the parameters will be optimized after averaging.\n\n![Multi-GPU](http://pic.guoyaohua.com//image/BERT-Classifier/Multi-GPU.png)\n\n",
      "technique": "Header extraction"
    }
  ],
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "bert",
      "classification-model",
      "nlp",
      "deep-learning",
      "sentence-classification",
      "natural-language-processing",
      "natural-language-understanding",
      "tensorflow",
      "deep-neural-networks",
      "ai",
      "machine-learning"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You only need three lines of code to use the model for inference tasks, as shown below:\n\n```python\nfrom BertClassifier import BertClassifier\nmodel = BertClassifier(data_processor, \n                       num_labels, \n                       bert_config_file,\n                       max_seq_length, \n                       vocab_file, \n                       tensorboard_dir, \n                       init_checkpoint, \n                       keep_checkpoint_max, \n                       use_GPU, \n                       label_smoothing, \n                       cycle)\nmodel.predict(file_path='./data/test.tsv', predict_batch_size=128, output_dir='./predict')\n#: Or single sample inference\n#: prob = model.predict(input_example=input_example)\n```\n\nIn inference mode, the model allows two types as inputs:\n\nWhen predicting a single sample, for example, in some streaming task scenarios, you may need to predict only a single sample. In this case, you need to construct an InputExample instance of the input features and pass it to the model.predict function. The function returns the probability distribution of the predicted result.\n\nIn batch sample prediction, you can directly pass in the file path. The model will first parse the file according to the MyProcessor defined above and perform batch inference. The result will be saved in the directory specified by output_dir.\n\n",
      "technique": "Header extraction"
    }
  ]
}