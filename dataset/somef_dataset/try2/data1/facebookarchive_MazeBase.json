{
  "citation": [
    {
      "confidence": [
        0.8356013927728488,
        0.8356013927728488
      ],
      "excerpt": "        end \n    end \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "    end \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8082819948646249
      ],
      "excerpt": "end-to-end memory network. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/facebookarchive/MazeBase",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing to MazeBase\nWe want to make contributing to this project as easy and transparent as\npossible.\nOur Development Process\nMazeBase is not big enough that we have a standard development process.\nWe follow the Torch-7 development process loosely.\nPull Requests\nWe actively welcome your pull requests.\n\nFork the repo and create your branch from master.\nIf you've added code that should be tested, add tests\nIf you've changed APIs, update the documentation.\nEnsure the test suite passes.\nMake sure your code lints.\nIf you haven't already, complete the Contributor License Agreement (\"CLA\").\n\nContributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\nComplete your CLA here: https://code.facebook.com/cla\nIssues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\nCoding Style\n\n2 spaces for indentation rather than tabs\n80 character line length\n\nLicense\nBy contributing to MazeBase, you agree that your contributions will be licensed\nunder its BSD license.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2015-12-17T20:56:28Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-23T15:38:06Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9996366840229756
      ],
      "excerpt": "This code is for a simple 2D game environment that can be used in developing reinforcement learning models. It is designed to be compact but flexible, enabling the implementation of diverse set of games. Furthermore, it offers precise tuning of the game difficulty, facilitating the construction of curricula to aid training. The code is in Lua+Torch, and it offers rapid prototyping of games and is easy to connect to models that control the agent\u2019s behavior. For more details, see our paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8654610226385572,
        0.9103183287036563,
        0.9206018397169938
      ],
      "excerpt": "- Block: an impassible obstacle that does not allow the agent to move to that grid location \n- Water: the agent may move to a grid location with water, but incurs an additional cost of for doing so. \n- Switch: a switch can be in one of M states, which we refer to as colors. The agent can toggle through the states cyclically by a toggle action when it is at the location of the switch . \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9759124735217025,
        0.9155807513950273
      ],
      "excerpt": "- PushableBlock: This block is impassable, but can be moved with a separate \u201cpush\u201d actions. The block moves in the direction of the push, and the agent must be located adjacent to the block opposite the direction of the push. \n- Corner: This item simply marks a corner of the board. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9708193503253004,
        0.9362888904007103,
        0.9788609158396133,
        0.962842397602294,
        0.9623621102127122,
        0.9224173975229369,
        0.983782948777839,
        0.9111128198627398,
        0.9562899065333468,
        0.9673535870081579,
        0.9533844812935285,
        0.9409056304919468,
        0.9132558588694816
      ],
      "excerpt": "The environment is presented to the agent as a list of sentences, each describing an item in the game. For example, an agent might see \u201cBlock at [-1,4]. Switch at [+3,0] with blue color. Info: change switch to red.\u201d However, note that we use egocentric spatial coordinates, meaning that the environment updates the locations of each object after an action. The environments are generated randomly with some distribution on the various items. For example, we usually specify a uniform distribution over height and width, and a percentage of wall blocks and water blocks. \nCurrently, there are 10 different games implemented, but it is possible to add new games. The existing games are: \n- Multigoals: the agent is given an ordered list of goals as \u201cInfo\u201d, and needs to visit the goals in that order. \n- Conditional Goals: the agent must visit a destination goal that is conditional on the state of a switch. The \u201cInfo\u201d is of the form \u201cgo to goal 4 if the switch is colored red, else go to goal 2\u201d. \n- Exclusion: the \u201cInfo\u201d in this game specifies a list of goals to avoid. The agent should visit all other unmentioned goals. \n- Switches: there are multiple switches on the board, and the agent has to toggle all switches to the same color. \n- Light Key: there is a switch and a door in a wall of blocks. The agent should navigate to a goal which may be on the wrong side of a wall of blocks, in which the agent needs move to and toggle the switch to open the door before going to the goal. \n- Goto: the agent is given an absolute location on the grid as a target. The game ends when the agent visits this location. Solving this task requires the agent to convert from its own egocentric coordinate representation to absolute coordinates. \n- Goto Hidden: the agent is given a list of goals with absolute coordinates, and then is told to go to one of the goals by the goal\u2019s name. The agent is not directly given the goal\u2019s location, it must read this from the list of goal locations. \n- Push block: the agent needs to push a Pushable block so that it lays on top of a switch. \n- Push block cardinal: the agent needs to push a Pushable block so that it is on a specified edge of the maze, e.g. the left edge. Any location along the edge is acceptable. \n- Blocked door: the agent should navigate to a goal which may lie on the opposite side of a wall of blocks, as in the Light Key game. However, a PushableBlock blocks the gap in the wall instead of a door. \nExamples of each games are shown in this video. The internal parameters of the games are written to a configuration file, which can be easily modified. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9761626157961417
      ],
      "excerpt": "which will begin the remote desktop to view the MazeBase graphics at http://0.0.0.0:8000. See the full repo for more details. Next, include the init file with  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.924978106701407
      ],
      "excerpt": "Next, we call this function to create a dictionary with all necessary words used in the game \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9192739443909049
      ],
      "excerpt": "where action is the index of the action. The list of possible actions are in g.agent.action_names. When there are multiple agents in the game, we can choose the agent to perform the action by doing \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8533207800936211
      ],
      "excerpt": "Next, we have to construct the game items. In this case, we only need a goal item placed at a random location:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8393516272656554,
        0.9387272115061019
      ],
      "excerpt": "Function place_item_rand puts the item on empty random location. But it is possible specify the location using place_item function. The argument to this function is a table containing item's properties such as type and name. Here, we only set the type of item to goal, but it is possible to include any number of attributes (e.g. color, name, etc.). \nThe game rule is to finish when the agent reaches the goal, which can be achieved by changing update function to \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9436560134689684
      ],
      "excerpt": "This will check if the agent's location is the same as the goal, and sets a flag when it is true. Finally, we have to give a proper reward when the goal is reached: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8152889896334453
      ],
      "excerpt": "Finally, we need a config file for our new game. Let us create singlegoal.lua file in mazebase/config. The main parameters of the game is the grid size: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8782737994046454
      ],
      "excerpt": "The first two numbers define lower and upper bounds of the parameter. The actual grid size will be uniformly sampled from this range. The remaining three numbers for curriculum training. In the easiest (hardest) case, the upper bound will be set to 3rd (4th) number. 5th number is the step size for changing the upper bound. In the same way, we define a percentage of grid cells to contain a block or water: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9639725837257043,
        0.8356372594297914
      ],
      "excerpt": "We also provide a code for training different types of neural models with policy gradient method. Training uses CPUs with multi-threading for speed up. \nThe implemented models are \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8253817598801675
      ],
      "excerpt": "end-to-end memory network. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9208820536064733
      ],
      "excerpt": "  --hidsz             the size of the internal state vector [20] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8113326984495328
      ],
      "excerpt": "  --model             model type: mlp | conv | memnn [memnn] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9880820303480062,
        0.9332304449877102,
        0.883386465159764,
        0.8154104550603786,
        0.8154104550603786,
        0.8322763883270992
      ],
      "excerpt": "  --conv_sz           spatial scope of the input to convnet and MLP [19] \n  --memsize           size of the memory in MemNN [20] \n  --nhop              the number of hops in MemNN [3] \n  --nagents           the number of agents [1] \n  --nactions          the number of agent actions [11] \n  --max_steps         force to end the game after this many steps [20] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8986605190431269
      ],
      "excerpt": "  --optim             optimization method: rmsprop | sgd [rmsprop] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8805693286077398
      ],
      "excerpt": "  --batch_size        size of mini-batch (the number of parallel games) in each thread [32] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9166858578485318,
        0.9661065513217408
      ],
      "excerpt": "  --beta              parameter of RMSProp [0.97] \n  --eps               parameter of RMSProp [1e-06] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9747894979050851
      ],
      "excerpt": "See the paper for more details on training. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Simple environment for creating very simple 2D games and training neural network models to perform tasks within them",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/facebookarchive/MazeBase/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 50,
      "date": "Fri, 24 Dec 2021 06:33:00 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/facebookarchive/MazeBase/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "facebookarchive/MazeBase",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8932237120262912
      ],
      "excerpt": "First, either install mazebase with luarocks make *.rockspec or add the appropriate path: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8955314433954626
      ],
      "excerpt": "If there are more than one game, it will randomly pick one. Now, the current game state can be retrieved by calling  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8324733762179566
      ],
      "excerpt": "Finally, we can check if the game is finished by calling g:is_active(). You can run demo_api.lua to see the game playing with random actions. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8169374871646904
      ],
      "excerpt": "- Goto: the agent is given an absolute location on the grid as a target. The game ends when the agent visits this location. Solving this task requires the agent to convert from its own egocentric coordinate representation to absolute coordinates. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8046345609524576
      ],
      "excerpt": "Finally, we need a config file for our new game. Let us create singlegoal.lua file in mazebase/config. The main parameters of the game is the grid size: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8145561750565323
      ],
      "excerpt": "The first two numbers define lower and upper bounds of the parameter. The actual grid size will be uniformly sampled from this range. The remaining three numbers for curriculum training. In the easiest (hardest) case, the upper bound will be set to 3rd (4th) number. 5th number is the step size for changing the upper bound. In the same way, we define a percentage of grid cells to contain a block or water: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8345128303597757,
        0.8998655193405412,
        0.8421148915500564,
        0.8612278259912517
      ],
      "excerpt": "For example, running the following command will train a 2-layer network on MultiGoals. \nth main.lua --hidsz 20 --model mlp --nlayers 2 --epochs 100 --game MultiGoals --nactions 6 --nworker 2 \nTo see all the command line options, run  \nth main.lua -h \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8114837365132174
      ],
      "excerpt": "  --model             model type: mlp | conv | memnn [memnn] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.872569066176442,
        0.854781007238815
      ],
      "excerpt": "  --save              file name to save the model [] \n  --load              file name to load the model [] \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/facebookarchive/MazeBase/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Lua",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/facebookarchive/MazeBase/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'BSD License\\n\\nFor MazeBase software\\n\\nCopyright (c) 2015-present, Facebook, Inc. All rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without modification,\\nare permitted provided that the following conditions are met:\\n\\n * Redistributions of source code must retain the above copyright notice, this\\n   list of conditions and the following disclaimer.\\n\\n * Redistributions in binary form must reproduce the above copyright notice,\\n   this list of conditions and the following disclaimer in the documentation\\n   and/or other materials provided with the distribution.\\n\\n * Neither the name Facebook nor the names of its contributors may be used to\\n   endorse or promote products derived from this software without specific\\n   prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "MazeBase: a sandbox for learning from games",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "MazeBase",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "facebookarchive",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/facebookarchive/MazeBase/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The whole code is written in Lua, and requires [Torch7](http://torch.ch/) and [nngraph](http://github.com/torch/nngraph) packages.\nThe training uses multi-threading for speed up. Display package is necessary for visualizing the game play, which can be installed by \n```\nluarocks install display\n```\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 241,
      "date": "Fri, 24 Dec 2021 06:33:00 GMT"
    },
    "technique": "GitHub API"
  }
}