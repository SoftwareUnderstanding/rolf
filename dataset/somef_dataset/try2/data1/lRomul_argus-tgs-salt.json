{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lRomul/argus-tgs-salt",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-10-24T21:56:00Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-14T07:54:56Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8547023801612751,
        0.9841859136004454,
        0.9342020655562117,
        0.9147525636339615,
        0.9502386635793861
      ],
      "excerpt": "Source code of 14th place solution for TGS Salt Identification Challenge by Argus team (Ruslan Baikulov, Nikolay Falaleev). \nWe used PyTorch 0.4.1 with framework Argus simplifies the experiments with different architectures and allows to focus on deep learning trials rather than coding neural networks training and testing scripts. \nThe original images with size 101x101 px padded to 148x148 px with biharmonic inpaint from skimage package. This \u201cpadding\u201d performed better for us than reflection or zero padding. \nRandom crop to the input size 128x128 px, flip in the left-right direction and random linear color augmentation (for brightness and contrast adjustment) were applied. \nAfter a series of experiments, we ended with a U-Net like architecture with an SE-ResNeXt50 encoder. Standard decoder blocks enriched with custom-built FPN-style layers. In addition to the segmentation task, an additional classification branch (empty/contains salt tile) added into basic network architecture. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8547263202752436,
        0.8372396012058242,
        0.8283530896102701,
        0.9830927783694701
      ],
      "excerpt": "Averaged results of two training used in the final submission: \nSE-ResNeXt50 on 5 random folds. \nSE-ResNeXt50 on 6 mosaic based folds (similar mosaics tiles placed in the same fold) without the second training stage. \nMosaics-based post-processing. We used the Vicens Gaitan\u2019s Kernel but not on a raw input dataset, but on images after histogram matching to an average histogram, which helps us to assembly more tiles into mosaics. In addition to extrapolating tiles with vertical masks from train subset on neighbouring tiles, we performed an automatic detection of small missed corners and inpaint them by a polygon with a smooth-curve boundary. Holes in masks were also filled with OpenCV. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Kaggle | 14th place solution for TGS Salt Identification Challenge",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lRomul/argus-tgs-salt/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 18,
      "date": "Tue, 28 Dec 2021 20:24:47 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lRomul/argus-tgs-salt/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "lRomul/argus-tgs-salt",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/lRomul/argus-tgs-salt/master/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/lRomul/argus-tgs-salt/master/notebooks/mean_submission.ipynb",
      "https://raw.githubusercontent.com/lRomul/argus-tgs-salt/master/notebooks/train.ipynb",
      "https://raw.githubusercontent.com/lRomul/argus-tgs-salt/master/notebooks/cv_check.ipynb",
      "https://raw.githubusercontent.com/lRomul/argus-tgs-salt/master/notebooks/make_submission.ipynb",
      "https://raw.githubusercontent.com/lRomul/argus-tgs-salt/master/notebooks/log_visualize.ipynb",
      "https://raw.githubusercontent.com/lRomul/argus-tgs-salt/master/mosaic/mosaic_fix.ipynb",
      "https://raw.githubusercontent.com/lRomul/argus-tgs-salt/master/mosaic/embedding_mosaic_folds.ipynb",
      "https://raw.githubusercontent.com/lRomul/argus-tgs-salt/master/mosaic/mosaic_api_examples.py.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/lRomul/argus-tgs-salt/master/run_pipeline.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Clone the repo, build docker image. \n    ```bash\n    git clone https://github.com/lRomul/argus-tgs-salt.git\n    cd argus-tgs-salt\n    make build\n    ```\n\n* Download and extract [dataset](https://www.kaggle.com/c/tgs-salt-identification-challenge/data)\n    * extract train images and masks into `data/train/`\n    * extract test images into `data/test/`\n\n* The folder structure should be:\n    ```\n    argus-tgs-salt\n    \u251c\u2500\u2500 data\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 mosaic\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 test\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 train\n    \u251c\u2500\u2500 docker\n    \u251c\u2500\u2500 mosaic\n    \u251c\u2500\u2500 notebooks\n    \u251c\u2500\u2500 pipeline\n    \u251c\u2500\u2500 src\n    \u2514\u2500\u2500 unused\n    ```\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8529355897836695
      ],
      "excerpt": "Optimizer: SGD with LR 0.01, momentum 0.9, weight_decay 0.0001 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8609207112342367
      ],
      "excerpt": "1. EarlyStopping with patience 100; ReduceLROnPlateau with patience=30, factor=0.64, min_lr=1e-8; Lovasz * 0.75 + BCE empty * 0.25. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lRomul/argus-tgs-salt/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook",
      "Shell",
      "Makefile",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 Ruslan Baikulov, Nikolay Falaleev\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Argus solution TGS Salt Identification Challenge",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "argus-tgs-salt",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "lRomul",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lRomul/argus-tgs-salt/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "*  Nvidia drivers, CUDA >= 9, cuDNN >= 7\n*  [Docker](https://www.docker.com/), [nvidia-docker](https://github.com/NVIDIA/nvidia-docker) \n\nThe provided dockerfile is supplied to build image with cuda support and cudnn.\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Run docker container \n```bash\nmake run\n```\n\n* Start full pipeline with postprocessing \n```bash\n./run_pipeline.sh\n```\n\nThe final submission file will be at:\n```\ndata/predictions/mean-005-0.4/submission.csv\n```\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 73,
      "date": "Tue, 28 Dec 2021 20:24:47 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "kaggle",
      "pytorch",
      "deep-learning",
      "python",
      "neural-network",
      "segmentation",
      "kaggle-competition"
    ],
    "technique": "GitHub API"
  }
}