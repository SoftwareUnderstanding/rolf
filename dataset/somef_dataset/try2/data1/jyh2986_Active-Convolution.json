{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jyh2986/Active-Convolution",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing\nIssues\nSpecific Caffe design and development issues, bugs, and feature requests are maintained by GitHub Issues.\nPlease do not post usage, installation, or modeling questions, or other requests for help to Issues.\nUse the caffe-users list instead. This helps developers maintain a clear, uncluttered, and efficient view of the state of Caffe.\nWhen reporting a bug, it's most helpful to provide the following information, where applicable:\n\nWhat steps reproduce the bug?\nCan you reproduce the bug using the latest master, compiled with the DEBUG make option?\nWhat hardware and operating system/distribution are you running?\nIf the bug is a crash, provide the backtrace (usually printed by Caffe; always obtainable with gdb).\n\nTry to give your issue a title that is succinct and specific. The devs will rename issues as needed to keep track of them.\nPull Requests\nCaffe welcomes all contributions.\nSee the contributing guide for details.\nBriefly: read commit by commit, a PR should tell a clean, compelling story of one improvement to Caffe. In particular:\n\nA PR should do one clear thing that obviously improves Caffe, and nothing more. Making many smaller PRs is better than making one large PR; review effort is superlinear in the amount of code involved.\nSimilarly, each commit should be a small, atomic change representing one step in development. PRs should be made of many commits where appropriate.\nPlease do rewrite PR history to be clean rather than chronological. Within-PR bugfixes, style cleanups, reversions, etc. should be squashed and should not appear in merged PR history.\nAnything nonobvious from the code should be explained in comments, commit messages, or the PR description, as appropriate.",
    "technique": "File Exploration"
  },
  "contributors": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributors\nCaffe is developed by a core set of BVLC members and the open-source community.\nWe thank all of our contributors!\nFor the detailed history of contributions of a given file, try\ngit blame file\n\nto see line-by-line credits and\ngit log --follow file\n\nto see the change log even across renames and rewrites.\nPlease refer to the acknowledgements on the Caffe site for further details.\nCopyright is held by the original contributor according to the versioning history; see LICENSE.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-04-04T12:44:07Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-09-28T06:34:27Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9723186166195193,
        0.9445650940575169
      ],
      "excerpt": "This repository contains the implementation for the paper Active Convolution: Learning the Shape of Convolution for Image Classification.  \nThe code is based on Caffe and cuDNN(v5) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9893655684687213
      ],
      "excerpt": "In recent years, deep learning has achieved great success in many computer vision applications. Convolutional neural networks (CNNs) have lately emerged as a major approach to image classification. Most research on CNNs thus far has focused on developing architectures such as the Inception and residual networks. The convolution layer is the core of the CNN, but few studies have addressed the convolution unit itself. <b>In this paper, we introduce a convolution unit called the active convolution unit (ACU). A new convolution has no fixed shape, because of which we can define any form of convolution. Its shape can be learned through backpropagation during training.</b> Our proposed unit has a few advantages. First, the ACU is a generalization of convolution; it can define not only all conventional convolutions, but also convolutions with fractional pixel coordinates. We can freely change the shape of the convolution, which provides greater freedom to form CNN structures. Second, the shape of the convolution is learned while training and there is no need to tune it by hand. Third, the ACU can learn better than a conventional unit, where we obtained the improvement simply by changing the conventional convolution to an ACU. We tested our proposed method on plain and residual networks, and the results showed significant improvement using our method on various datasets and architectures in comparison with the baseline.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8475170995096621
      ],
      "excerpt": "It is simply possible to define \"TEST_ACONV_FAST_ENV\" macro in <i>aconv_fast_layer.hpp</i> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Active Convolution",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jyh2986/Active-Convolution/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 17,
      "date": "Sat, 25 Dec 2021 02:12:08 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jyh2986/Active-Convolution/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "jyh2986/Active-Convolution",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/docker/standalone/gpu/Dockerfile",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/docker/standalone/cpu/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/jyh2986/Active-Convolution/tree/publish_ACU/docs"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/models/ACU/net_view.ipynb",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/02-fine-tuning.ipynb",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/pascal-multilabel-with-datalayer.ipynb",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/net_surgery.ipynb",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/detection.ipynb",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/01-learning-lenet.ipynb",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/brewing-logreg.ipynb",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/00-classification.ipynb",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/siamese/mnist_siamese.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/scripts/deploy_docs.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/scripts/build_docs.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/scripts/download_model_from_gist.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/scripts/upload_model_to_gist.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/scripts/gather_examples.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/scripts/travis/install-python-deps.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/scripts/travis/test.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/scripts/travis/defaults.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/scripts/travis/setup-venv.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/scripts/travis/configure-make.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/scripts/travis/configure.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/scripts/travis/build.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/scripts/travis/install-deps.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/scripts/travis/configure-cmake.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/data/ilsvrc12/get_ilsvrc_aux.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/data/cifar10/get_cifar10.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/data/mnist/get_mnist.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/imagenet/create_imagenet.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/imagenet/resume_training.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/imagenet/train_caffenet.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/imagenet/make_imagenet_mean.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/cifar10/create_cifar10.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/cifar10/train_quick.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/cifar10/train_full_sigmoid.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/cifar10/train_full_sigmoid_bn.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/cifar10/train_full.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/mnist/train_lenet_adam.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/mnist/train_lenet_consolidated.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/mnist/train_lenet_docker.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/mnist/train_mnist_autoencoder_adagrad.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/mnist/train_lenet_rmsprop.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/mnist/create_mnist.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/mnist/train_mnist_autoencoder_nesterov.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/mnist/train_lenet.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/mnist/train_mnist_autoencoder.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/mnist/train_mnist_autoencoder_adadelta.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/siamese/create_mnist_siamese.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/examples/siamese/train_mnist_siamese.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/tools/extra/parse_log.sh",
      "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/tools/extra/launch_resize_and_crop_images.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8668685810221153
      ],
      "excerpt": "You can validate backpropagation using test code. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8069792203632054,
        0.8526936930562132
      ],
      "excerpt": "> make test \n> ./build/test/test_aconv_fast_layer.testbin \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8145359041622564
      ],
      "excerpt": "> ./build/test/test_aconv_fast_layer.testbin \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jyh2986/Active-Convolution/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "Python",
      "Cuda",
      "CMake",
      "Protocol Buffer",
      "Jupyter Notebook",
      "MATLAB",
      "Makefile",
      "Shell",
      "M"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/jyh2986/Active-Convolution/publish_ACU/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'COPYRIGHT\\n\\nAll contributions by the University of California:\\nCopyright (c) 2014, 2015, The Regents of the University of California (Regents)\\nAll rights reserved.\\n\\nAll other contributions:\\nCopyright (c) 2014, 2015, the respective contributors\\nAll rights reserved.\\n\\nCaffe uses a shared copyright model: each contributor holds copyright over\\ntheir contributions to Caffe. The project versioning records all such\\ncontribution and copyright details. If a contributor wants to further mark\\ntheir specific copyright on a particular contribution, they should indicate\\ntheir copyright solely in the commit message of the change when it is\\ncommitted.\\n\\nLICENSE\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met: \\n\\n1. Redistributions of source code must retain the above copyright notice, this\\n   list of conditions and the following disclaimer. \\n2. Redistributions in binary form must reproduce the above copyright notice,\\n   this list of conditions and the following disclaimer in the documentation\\n   and/or other materials provided with the distribution. \\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\nCONTRIBUTION AGREEMENT\\n\\nBy contributing to the BVLC/caffe repository through pull-request, comment,\\nor otherwise, the contributor releases their content to the\\nlicense and copyright terms herein.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Active Convolution",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Active-Convolution",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "jyh2986",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jyh2986/Active-Convolution/blob/publish_ACU/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 57,
      "date": "Sat, 25 Dec 2021 02:12:08 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "caffe",
      "convolution",
      "active",
      "convolution-unit",
      "acu",
      "deeplearning"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "ACU has 4 parameters(weight, bias, x-positions, y-positions of synapse).\nEven though you don't use bias term, the order will not be changed.\n\nPlease refer [deploy file](https://github.com/jyh2986/Active-Convolution/blob/publish_ACU/models/ACU/[plain]deploy.prototxt) in models/ACU\n\nIf you want define arbitary shape of convolution,\n\n1. use non SQUARE type in aconv_param \n2. define number of synapse using kernel_h, kernel_w parameter in convolution_param\n\n\nIn example, if you want define cross-shaped convolution with 4 synapses, you can use like belows.\n\n```\n...\naconv_param{   type: CIRCLE }\nconvolution_param {    num_output: 48    kernel_h: 1    kernel_w: 4    stride: 1 }\n...\n```\n\nWhen you use user-defined shape of convolution, you'd better edit <i>aconv_fast_layer.cpp</i> directly to define initial position of synapses. \n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "This is the result of plain ACU network, and there an example in [models/ACU](https://github.com/jyh2986/Active-Convolution/blob/publish_ACU/models/ACU) of CIFAR-10\n\n| Network  | CIFAR-10(\\%) | CIFAR-100(\\%) \n|:-------|:-----:|:-------:|\n| baseline | 8.01 | 27.85 |\n| ACU      | 7.33 | 27.11 |\n| Improvement | <b>+0.68</b> | <b>+0.74</b> |\n\n\nThis is changes of the positions over iterations.\n\n<img src=https://github.com/jyh2986/Active-Convolution/blob/publish_ACU/models/ACU/plain.gif width=30%>\n\nYou can draw learned position by using [ipython script](https://github.com/jyh2986/Active-Convolution/blob/publish_ACU/models/ACU/net_view.ipynb).\n",
      "technique": "Header extraction"
    }
  ]
}