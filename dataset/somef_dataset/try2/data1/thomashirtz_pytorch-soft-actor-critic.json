{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1812.05905v2",
      "https://arxiv.org/abs/1801.01290"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "Equation 10:   \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/thomashirtz/soft-actor-critic",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-04-30T08:29:01Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-29T12:05:58Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9687251827453317
      ],
      "excerpt": "Implementation of the soft actor critic algorithm using Pytorch. Code kept as lean and clean \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9186412559671406
      ],
      "excerpt": "With some arguments: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9186412559671406
      ],
      "excerpt": "With some arguments: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.987083294496174
      ],
      "excerpt": "This is an attempt to show the equation of the paper, and their correspondence in the source code: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9558177454522643
      ],
      "excerpt": "List of repository that helped me to solve technical issues: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Implementation of the Soft Actor Critic algorithm using Pytorch.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/thomashirtz/pytorch-soft-actor-critic/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Mon, 27 Dec 2021 06:15:01 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/thomashirtz/soft-actor-critic/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "thomashirtz/soft-actor-critic",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8738056390925499
      ],
      "excerpt": "python3 soft_actor_critic train --env-name MountainCarContinuous-v0 --learning-rate 0.001 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9322609392449874
      ],
      "excerpt": "- pytorch-soft-actor-critic  \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8593028336087476
      ],
      "excerpt": "<img align=\"right\" width=\"400\"  src=\"lunar_lander.gif\">  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8589534893990137
      ],
      "excerpt": "python3 soft_actor_critic train \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8791439293067684
      ],
      "excerpt": "python3 soft_actor_critic eval --run-name \"name_of_my_last_run\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8528958612369086
      ],
      "excerpt": "python3 soft_actor_critic eval --run-name name_of_my_last_run --hidden-units 512 512 --seed 2 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/thomashirtz/soft-actor-critic/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2021 Thomas Hirtz\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "soft-actor-critic",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "soft-actor-critic",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "thomashirtz",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/thomashirtz/soft-actor-critic/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Mon, 27 Dec 2021 06:15:01 GMT"
    },
    "technique": "GitHub API"
  },
  "support": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\npython soft_actor_critic --help\n```\nOutput:\n```\nusage: Use \"python soft_actor_critic --help\" for more information\n\nPyTorch Soft Actor-Critic\n\npositional arguments:\n  {train,eval}  Selection of the mode to perform\n    train       Train an agent\n    eval        Evaluate the performance of an already trained agent\n\noptional arguments:\n  -h, --help    show this help message and exit\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```\npython soft_actor_critic train --help\n```\nOutput:\n```\nusage: Use \"python soft_actor_critic --help\" for more information train [-h] [--env-name] [--hidden-units  [...]]\n                                                                        [--directory] [--seed] [--run-name]\n                                                                        [--batch-size] [--memory-size]\n                                                                        [--learning-rate] [--gamma] [--tau]\n                                                                        [--num-steps] [--start-step] [--alpha]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --env-name            Gym environment to train on (default: LunarLanderContinuous-v2)\n  --hidden-units  [ ...]\n                        List of networks' hidden units (default: [256, 256])\n  --directory           Root directory in which the run folder will be created (default: ../runs/)\n  --seed                Seed used for pytorch, numpy and the environment (default: 1)\n  --run-name            Name used for saving the weights and the logs (default: generated using the \"get_run_name\"\n                        function)\n  --batch-size          Batch size used by the agent during the learning phase (default: 256)\n  --memory-size         Size of the replay buffer (default: 1000000)\n  --learning-rate       Learning rate used for the networks and entropy optimization (default: 0.0003)\n  --gamma               Discount rate used by the agent (default: 0.99)\n  --tau                 Value used for the progressive update of the target networks (default: 0.005)\n  --num-steps           Number training steps (default: 1000000)\n  --start-step          Step after which the agent starts to learn (default: 1000)\n  --alpha               Starting value of the entropy (alpha) (default: 0.2)\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```\npython soft_actor_critic eval --help\n```\nOutput:\n```\nusage: Use \"python soft_actor_critic --help\" for more information eval [-h] [--env-name] [--hidden-units  [...]]\n                                                                       [--directory] [--seed] [--run-name]\n                                                                       [--num-episodes] [--deterministic] [--render]\n                                                                       [--record]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --env-name            Gym environment to train on (default: LunarLanderContinuous-v2)\n  --hidden-units  [ ...]\n                        List of networks' hidden units (default: [256, 256])\n  --directory           Root directory in which the run folder will be created (default: ../runs/)\n  --seed                Seed used for pytorch, numpy and the environment (default: 1)\n  --run-name            Run name of an already trained agent located in the \"--directory\" directory\n  --num-episodes        Number of episodes to run (default: 3)\n  --deterministic       Toggle deterministic behavior of the agent when interacting with the environment\n  --render              Toggle the rendering of the episodes\n  --record              Toggle the recording of the episodes (toggling \"record\" would also toggle \"render\")\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "reinforcement-learning",
      "reinforcement-learning-algorithms",
      "actor-critic",
      "openai-gym"
    ],
    "technique": "GitHub API"
  }
}