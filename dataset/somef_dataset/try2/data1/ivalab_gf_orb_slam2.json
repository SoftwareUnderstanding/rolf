{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use features in GF-ORB-SLAM2 at an academic work, please cite the following papers accordingly:\n\n**Good Feature Matching**:\n\t\n\t@article{zhao2020tro-gfm,\n\t  title={Good Feature Matching: Towards Accurate, Robust VO/VSLAM with Low Latency},\n\t  author={Zhao, Yipu and Vela, Patricio A.},\n\t  journal={IEEE Transactions on Robotics},\n\t  doi={10.1109/TRO.2020.2964138},\n\t  year={2020}\n\t}\t\n\n\t@inproceedings{zhao2018good,\n\t  title={Good Feature Selection for Least Squares Pose Optimization in VO/VSLAM},\n\t  author={Zhao, Yipu and Vela, Patricio A},\n\t  booktitle={IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)},\n\t  pages={1183--1189},\n\t  year={2018}\n\t}\n\n**Map Hashing**:\n\n\t@article{zhao2019low,\n\t  title={Low-latency Visual SLAM with Appearance-Enhanced Local Map Building},\n\t  author={Zhao, Yipu and Ye, Wenkai and Vela, Patricio A},\n\t  journal={IEEE International Conference on Robotics and Automation (ICRA)},\n\t  year={2019}\n\t}\n\n**Good Graph Selection**:\n\n\t@article{zhao2020graph,\n\t  title={Good Graph to Optimize: Cost-Effective, Budget-Aware Bundle Adjustment in Visual SLAM},\n\t  author={Zhao, Yipu and Smith, Justin S. and Vela, Patricio A.},\n\t  journal={submitted to IEEE Transactions on Robotics},\n\t  year={2020}\n\t} \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{zhao2020graph,\n  title={Good Graph to Optimize: Cost-Effective, Budget-Aware Bundle Adjustment in Visual SLAM},\n  author={Zhao, Yipu and Smith, Justin S. and Vela, Patricio A.},\n  journal={submitted to IEEE Transactions on Robotics},\n  year={2020}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{zhao2019low,\n  title={Low-latency Visual SLAM with Appearance-Enhanced Local Map Building},\n  author={Zhao, Yipu and Ye, Wenkai and Vela, Patricio A},\n  journal={IEEE International Conference on Robotics and Automation (ICRA)},\n  year={2019}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{zhao2018good,\n  title={Good Feature Selection for Least Squares Pose Optimization in VO/VSLAM},\n  author={Zhao, Yipu and Vela, Patricio A},\n  booktitle={IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)},\n  pages={1183--1189},\n  year={2018}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{zhao2020tro-gfm,\n  title={Good Feature Matching: Towards Accurate, Robust VO/VSLAM with Low Latency},\n  author={Zhao, Yipu and Vela, Patricio A.},\n  journal={IEEE Transactions on Robotics},\n  doi={10.1109/TRO.2020.2964138},\n  year={2020}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8656070203791273
      ],
      "excerpt": "\" target=\"_blank\"><img src=\"https://github.com/ivalab/gf_orb_slam2/blob/catkin/maphash_demo.png\"  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8376330871811604
      ],
      "excerpt": "  <img src=\"https://github.com/ivalab/gf_orb_slam2/blob/catkin/good_graph_demo.png\" alt=\"Venice\" style=\"width:100%\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8028046190715653
      ],
      "excerpt": "22 Dec 2016: Added AR demo (see section 7). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9999895615321573,
        0.9997301328784802,
        0.9997529647984453
      ],
      "excerpt": "[Monocular] Ra\u00fal Mur-Artal, J. M. M. Montiel and Juan D. Tard\u00f3s. ORB-SLAM: A Versatile and Accurate Monocular SLAM System. IEEE Transactions on Robotics, vol. 31, no. 5, pp. 1147-1163, 2015. (2015 IEEE Transactions on Robotics Best Paper Award). PDF. \n[Stereo and RGB-D] Ra\u00fal Mur-Artal and Juan D. Tard\u00f3s. ORB-SLAM2: an Open-Source SLAM System for Monocular, Stereo and RGB-D Cameras. IEEE Transactions on Robotics, vol. 33, no. 5, pp. 1255-1262, 2017. PDF. \n[DBoW2 Place Recognizer] Dorian G\u00e1lvez-L\u00f3pez and Juan D. Tard\u00f3s. Bags of Binary Words for Fast Place Recognition in Image Sequences. IEEE Transactions on Robotics, vol. 28, no. 5, pp.  1188-1197, 2012. PDF \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ivalab/gf_orb_slam2",
    "technique": "GitHub API"
  },
  "contact": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Yipu Zhao\t\tyipu.zhao@gatech.edu\n- Wenkai Ye\t\twye1206@gatech.edu\n- Patricio A. Vela\tpvela@gatech.edu\n\n---\n",
      "technique": "Header extraction"
    }
  ],
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-04-25T19:36:44Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-16T19:00:33Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9949016570600375,
        0.9451768048584985
      ],
      "excerpt": "The cost-efficiency of visual SLAM is crucial for target applications in Robotics and VR/AR.  One principal enforced in this project is to persue better computation-performance trade-off in both front-end and back-end of visual SLAM.  To that end, three major algorithmic innovations are integrated to ORB-SLAM 2: \nGood feature matching (IROS18, TRO20) is an enhancement module to the front-end of feature-based BA SLAM, such as ORB-SLAM2.  As an efficient variant of active feature matching, good feature matching has much better computation-performance trade-off than conventional batch feature matching.   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9768917234991853
      ],
      "excerpt": "Local map hashing (ICRA19) is specifically designed for large-scale, long-term VSLAM applications, where the cost of local map related operations could be computation-heavy.  The local map is indexed with a light-weight, robust, and temporally-evolving Multi-Index Hashing method. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9965002837168963
      ],
      "excerpt": "Good graph selection (submitted to TRO) is an enhancement module to the back-end of BA-based SLAM.  It enables fine-grained and timely control of the local BA problem in SLAM back-end: solve large BA when resource is sufficient, while focus on smaller BA under computation/time limit.  Compared with sliding window or covisibily graph, good graph selection has much better computation-performance trade-off. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9095274116660802,
        0.8770773818205236
      ],
      "excerpt": "Following additional features are also included for practical applications: \n - catkinize (by default; for non-ros usage, check out the master branch instead); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8980372400810706
      ],
      "excerpt": " - speed-up stereo matching (uncomment Macro ALTER_STEREO_MATCHING & DELAYED_STEREO_MATCHING in Frame.h to enable it; for fisheye lens, uncomment USE_FISHEYE_DISTORTION as well); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9234249255445048
      ],
      "excerpt": " - pose initialization with ChAruco (uncomment Macro INIT_WITH_ARUCHO in Tracking.h to enable it) out the master branch) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.868078526069066
      ],
      "excerpt": "To run GF-ORB-SLAM2 on closed-loop navigation tasks, e.g., as the state estimator of gazebo_turtlebot_simulator, make sure the closed-loop macro ENABLE_PLANNER_PREDICTION at include/Tracking.h is uncommented: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.908925214220865
      ],
      "excerpt": "Authors: Raul Mur-Artal, Juan D. Tardos, J. M. M. Montiel and Dorian Galvez-Lopez (DBoW2) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9842141078670699
      ],
      "excerpt": "ORB-SLAM2 is a real-time SLAM library for Monocular, Stereo and RGB-D cameras that computes the camera trajectory and a sparse 3D reconstruction (in the stereo and RGB-D case with true scale). It is able to detect loops and relocalize the camera in real time. We provide examples to run the SLAM system in the KITTI dataset as stereo or monocular, in the TUM dataset as RGB-D or monocular, and in the EuRoC dataset as stereo or monocular. We also provide a ROS node to process live monocular, stereo or RGB-D streams. The library can be compiled without ROS. ORB-SLAM2 provides a GUI to change between a SLAM Mode and Localization Mode, see section 9 of this document. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8509914776310118,
        0.9251492292559714
      ],
      "excerpt": "[DBoW2 Place Recognizer] Dorian G\u00e1lvez-L\u00f3pez and Juan D. Tard\u00f3s. Bags of Binary Words for Fast Place Recognition in Image Sequences. IEEE Transactions on Robotics, vol. 28, no. 5, pp.  1188-1197, 2012. PDF \nWe use the new thread and chrono functionalities of C++11. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.881261447465268,
        0.8169085074877854
      ],
      "excerpt": "We use modified versions of the DBoW2 library to perform place recognition and g2o library to perform non-linear optimizations. Both modified libraries (which are BSD) are included in the Thirdparty folder. \nWe provide some examples to process the live input of a monocular, stereo or RGB-D camera using ROS. Building these examples is optional. In case you want to use ROS, a version Hydro or newer is needed. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9550620083612198
      ],
      "excerpt": "You will need to create a settings file with the calibration of your camera. See the settings file provided for the TUM and KITTI datasets for monocular, stereo and RGB-D cameras. We use the calibration model of OpenCV. See the examples to learn how to create a program that makes use of the ORB-SLAM2 library and how to pass images to the SLAM system. Stereo input must be synchronized and rectified. RGB-D input must be synchronized and depth registered. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Real-Time SLAM for Monocular, Stereo and RGB-D Cameras, with Loop Detection and Relocalization Capabilities",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ivalab/gf_orb_slam2/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 40,
      "date": "Sat, 25 Dec 2021 15:06:35 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ivalab/gf_orb_slam2/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ivalab/gf_orb_slam2",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/build_supports.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/build_dep.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/clean.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/matrix_images_RSS13/transpose_results.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/pose_SLAM/datasetsorter.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/hpc2017/hpc17_parseFLOPsbench.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/hpc2017/hpc17_parsebench.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/hpc2017/hpc17_bench-all.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/hpc2017/hpc17_flops-all.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/hpc2017/hpc17_localbench-all.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_BA/graph_get_cam_connectivity.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_BA/cconn_spanning_tree.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_BA/mkorders.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_BA/graph_linearize_ids.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_BA/graph_sort_by_landmarks.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_BA/cconn_to_matrixmarket.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_BA/graph_reorder_cameras.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_BA/clean.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_BA/graph_reorder_cameras_slow-reference-impl.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/Schur_orderings/run_nested_SLAM_schur_analysis.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/Schur_orderings/check_SLAMs_BAs.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/Schur_orderings/analyze_clique_sizes.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/Schur_orderings/parse_nested_schur_analysis.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/Schur_orderings/run_SLAMs.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/Schur_orderings/run_BAs.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/Schur_orderings/run_all.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/Schur_orderings/run_nested_BA_schur_analysis.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_Schur/dx_to_numiters.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_Schur/ba_graph_incremental_size.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_Schur/dx_update_stats.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/tests/build_tests.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/tests/test_eigen33.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/tests/make_unittest.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/tests/unit_tests.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/tga_to_png/tgatopng.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/blanalyze/blanalyze.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_SfM_3DV/get_observation_xy_ranges.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_SfM_3DV/parse_margscosts.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_SfM_3DV/graph_sort_sim3_BA.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_SfM_3DV/parse_incsccosts.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_SfM_3DV/make_frankengraph.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/incremental_SfM_3DV/remove_cam_settle_markers.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/SLAM_app_solver_enabler/slam_app_solver_enabler.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/ground_truth/fix_cityTrees10k_ground-truth.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/scripts/ground_truth/10k_ground-truth.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/src/eigen33/blas/testing/runblastest.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/src/eigen32/blas/testing/runblastest.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/include/eigen33/eigen/bench/bench_multi_compilers.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/include/eigen33/eigen/bench/btl/data/mk_gnuplot_script.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/include/eigen33/eigen/bench/btl/data/smooth_all.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/include/eigen33/eigen/bench/btl/data/mk_new_gnuplot.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/include/eigen33/eigen/bench/btl/data/mk_mean_script.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/include/eigen33/eigen/bench/perf_monitoring/gemm/make_plot.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/include/eigen33/eigen/bench/perf_monitoring/gemm/run.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/include/eigen32/eigen/bench/bench_multi_compilers.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/include/eigen32/eigen/bench/btl/data/mk_gnuplot_script.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/include/eigen32/eigen/bench/btl/data/smooth_all.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/include/eigen32/eigen/bench/btl/data/mk_new_gnuplot.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/SLAM%2B%2B/include/eigen32/eigen/bench/btl/data/mk_mean_script.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/GraphViewer/eigen/blas/testing/runblastest.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/GraphViewer/eigen/bench/bench_multi_compilers.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/GraphViewer/eigen/bench/btl/data/mk_gnuplot_script.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/GraphViewer/eigen/bench/btl/data/smooth_all.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/GraphViewer/eigen/bench/btl/data/mk_new_gnuplot.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/GraphViewer/eigen/bench/btl/data/mk_mean_script.sh",
      "https://raw.githubusercontent.com/ivalab/gf_orb_slam2/catkin/Thirdparty/GraphViewer/data/show.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9120860002231934
      ],
      "excerpt": " - GPU accelerated FASTdetection (uncomment Macro CUDA_ACC_FAST in ORBextractor.h to enable it); \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8203490153701748
      ],
      "excerpt": "You could also follow the example calls at rosrun_cmd.md for your own sensor / sequence. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8676184588610132,
        0.9277391920087041,
        0.9880177545104813
      ],
      "excerpt": "We use Pangolin for visualization and user interface. Dowload and install instructions can be found at: https://github.com/stevenlovegrove/Pangolin. \nWe use OpenCV to manipulate images and features. Dowload and install instructions can be found at: http://opencv.org. Required at leat 2.4.3. Tested with OpenCV 2.4.11 and OpenCV 3.2. \nRequired by g2o (see below). Download and install instructions can be found at: http://eigen.tuxfamily.org. Required at least 3.1.0. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8201233528671076,
        0.8468902673898102,
        0.9023697225149864
      ],
      "excerpt": "Execute build_ros.sh script: \nchmod +x build_ros.sh \n  ./build_ros.sh \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8246982354761949
      ],
      "excerpt": "alt=\"ORB-SLAM2\" width=\"240\" height=\"180\" border=\"10\" /></a> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8246982354761949
      ],
      "excerpt": "alt=\"ORB-SLAM2\" width=\"240\" height=\"180\" border=\"10\" /></a> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8246982354761949
      ],
      "excerpt": "alt=\"ORB-SLAM2\" width=\"240\" height=\"180\" border=\"10\" /></a> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8765115268047915,
        0.8222054293770924
      ],
      "excerpt": "./Examples/Monocular/mono_tum Vocabulary/ORBvoc.txt Examples/Monocular/TUMX.yaml PATH_TO_SEQUENCE_FOLDER \nDownload the dataset (grayscale images) from http://www.cvlibs.net/datasets/kitti/eval_odometry.php  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8720022695779587
      ],
      "excerpt": "./Examples/Monocular/mono_kitti Vocabulary/ORBvoc.txt Examples/Monocular/KITTIX.yaml PATH_TO_DATASET_FOLDER/dataset/sequences/SEQUENCE_NUMBER \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8836714632287089,
        0.8836714632287089,
        0.8222054293770924
      ],
      "excerpt": "./Examples/Monocular/mono_euroc Vocabulary/ORBvoc.txt Examples/Monocular/EuRoC.yaml PATH_TO_SEQUENCE_FOLDER/mav0/cam0/data Examples/Monocular/EuRoC_TimeStamps/SEQUENCE.txt \n./Examples/Monocular/mono_euroc Vocabulary/ORBvoc.txt Examples/Monocular/EuRoC.yaml PATH_TO_SEQUENCE/cam0/data Examples/Monocular/EuRoC_TimeStamps/SEQUENCE.txt \nDownload the dataset (grayscale images) from http://www.cvlibs.net/datasets/kitti/eval_odometry.php  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8917770107462397
      ],
      "excerpt": "./Examples/Stereo/stereo_kitti Vocabulary/ORBvoc.txt Examples/Stereo/KITTIX.yaml PATH_TO_DATASET_FOLDER/dataset/sequences/SEQUENCE_NUMBER \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9176564733466388,
        0.9176564733466388
      ],
      "excerpt": "./Examples/Stereo/stereo_euroc Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml PATH_TO_SEQUENCE/mav0/cam0/data PATH_TO_SEQUENCE/mav0/cam1/data Examples/Stereo/EuRoC_TimeStamps/SEQUENCE.txt \n./Examples/Stereo/stereo_euroc Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml PATH_TO_SEQUENCE/cam0/data PATH_TO_SEQUENCE/cam1/data Examples/Stereo/EuRoC_TimeStamps/SEQUENCE.txt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8039235039959722,
        0.8191737254063525
      ],
      "excerpt": "Associate RGB images and depth images using the python script associate.py. We already provide associations for some of the sequences in Examples/RGB-D/associations/. You can generate your own associations file executing: \npython associate.py PATH_TO_SEQUENCE/rgb.txt PATH_TO_SEQUENCE/depth.txt &gt; associations.txt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8543805549699007
      ],
      "excerpt": "./Examples/RGB-D/rgbd_tum Vocabulary/ORBvoc.txt Examples/RGB-D/TUMX.yaml PATH_TO_SEQUENCE_FOLDER ASSOCIATIONS_FILE \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ivalab/gf_orb_slam2/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "Cuda",
      "Python",
      "CMake",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "A cost-efficient, heavily-modified ORB-SLAM2 (tested on Ubuntu 16.04 + ROS Kinetic)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "gf_orb_slam2",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ivalab",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ivalab/gf_orb_slam2/blob/catkin/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "We have tested the library in **Ubuntu 12.04**, **14.04** and **16.04**, but it should be easy to compile in other platforms. A powerful computer (e.g. i7) will ensure real-time performance and provide more stable and accurate results.\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To build GF-ORB-SLAM2, first clone the repo to your catkin workspace\n\n    cd ~/catkin_ws/src && git clone https://github.com/ivalab/gf_orb_slam2.git\n\nas well as the config files\n\n    git clone https://github.com/ivalab/ORB_Data.git\n\nThen build dependencies (by default we assume a GPU is available for opencv; otherwise use the non-gpu build cmd in build_dep.sh accordingly)\n\n    cd gf_orb_slam2 && ./build_dep.sh && ./build_supports.sh\n\nNow build the GF-ORB-SLAM2 package with GPU\n\n    catkin config --cmake-args -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=\"-O3 -DNDEBUG -march=native\" -DCMAKE_C_FLAGS_RELEASE=\"-O3 -DNDEBUG -march=native\"\n    catkin build --this\n\nor without GPU:\n\n    catkin config --cmake-args -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=\"-O3 -DNDEBUG -march=native\" -DCMAKE_C_FLAGS_RELEASE=\"-O3 -DNDEBUG -march=native\"\n    catkin build --this -DENABLE_CUDA_IN_OPENCV=False\n\nWe recommend converting the ORB vocabulary to binary format, by calling\n\n    ./tools/bin_vocabulary\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "For a monocular input from topic `/camera/image_raw` run node ORB_SLAM2/Mono. You will need to provide the vocabulary file and a settings file. See the monocular examples above.\n\n  ```\n  rosrun ORB_SLAM2 Mono PATH_TO_VOCABULARY PATH_TO_SETTINGS_FILE\n  ```\n  \n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "This is a demo of augmented reality where you can use an interface to insert virtual cubes in planar regions of the scene.\nThe node reads images from topic `/camera/image_raw`.\n\n  ```\n  rosrun ORB_SLAM2 MonoAR PATH_TO_VOCABULARY PATH_TO_SETTINGS_FILE\n  ```\n  \n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "For a stereo input from topic `/camera/left/image_raw` and `/camera/right/image_raw` run node ORB_SLAM2/Stereo. You will need to provide the vocabulary file and a settings file. If you **provide rectification matrices** (see Examples/Stereo/EuRoC.yaml example), the node will recitify the images online, **otherwise images must be pre-rectified**.\n\n  ```\n  rosrun ORB_SLAM2 Stereo PATH_TO_VOCABULARY PATH_TO_SETTINGS_FILE ONLINE_RECTIFICATION\n  ```\n  \n**Example**: Download a rosbag (e.g. V1_01_easy.bag) from the EuRoC dataset (http://projects.asl.ethz.ch/datasets/doku.php?id=kmavvisualinertialdatasets). Open 3 tabs on the terminal and run the following command at each tab:\n  ```\n  roscore\n  ```\n  \n  ```\n  rosrun ORB_SLAM2 Stereo Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml true\n  ```\n  \n  ```\n  rosbag play --pause V1_01_easy.bag /cam0/image_raw:=/camera/left/image_raw /cam1/image_raw:=/camera/right/image_raw\n  ```\n  \nOnce ORB-SLAM2 has loaded the vocabulary, press space in the rosbag tab. Enjoy!. Note: a powerful computer is required to run the most exigent sequences of this dataset.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "For an RGB-D input from topics `/camera/rgb/image_raw` and `/camera/depth_registered/image_raw`, run node ORB_SLAM2/RGBD. You will need to provide the vocabulary file and a settings file. See the RGB-D example above.\n\n  ```\n  rosrun ORB_SLAM2 RGBD PATH_TO_VOCABULARY PATH_TO_SETTINGS_FILE\n  ```\n  \n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 175,
      "date": "Sat, 25 Dec 2021 15:06:35 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Clone the repository:\n```\ngit clone https://github.com/raulmur/ORB_SLAM2.git ORB_SLAM2\n```\n\nWe provide a script `build.sh` to build the *Thirdparty* libraries and *ORB-SLAM2*. Please make sure you have installed all required dependencies (see section 2). Execute:\n```\ncd ORB_SLAM2\nchmod +x build.sh\n./build.sh\n```\n\nThis will create **libORB_SLAM2.so**  at *lib* folder and the executables **mono_tum**, **mono_kitti**, **rgbd_tum**, **stereo_kitti**, **mono_euroc** and **stereo_euroc** in *Examples* folder.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "This is a demo of augmented reality where you can use an interface to insert virtual cubes in planar regions of the scene.\nThe node reads images from topic `/camera/image_raw`.\n\n  ```\n  rosrun ORB_SLAM2 MonoAR PATH_TO_VOCABULARY PATH_TO_SETTINGS_FILE\n  ```\n  \n",
      "technique": "Header extraction"
    }
  ]
}