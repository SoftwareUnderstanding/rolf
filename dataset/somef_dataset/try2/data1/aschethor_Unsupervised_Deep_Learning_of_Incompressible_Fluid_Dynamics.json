{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2006.08762",
      "https://arxiv.org/abs/2012.11893",
      "https://arxiv.org/abs/2109.07143",
      "https://arxiv.org/abs/2006.08762},\n}\n```\n\nIf there are questions left, contact us: wandeln@cs.uni-bonn.de\n\n## References\n\nThe U-Net implementation is for the most part taken from https://github.com/milesial/Pytorch-UNet/ - an Open Source implementation of:  \n\n[U-Net: Convolutional Networks for Biomedical Image Segmentation](https://arxiv.org/abs/1505.04597",
      "https://arxiv.org/abs/1505.04597"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The U-Net implementation is for the most part taken from https://github.com/milesial/Pytorch-UNet/ - an Open Source implementation of:  \n\n[U-Net: Convolutional Networks for Biomedical Image Segmentation](https://arxiv.org/abs/1505.04597)  \n*Olaf Ronneberger, Philipp Fischer, Thomas Brox*, MICCAI, 2015\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{Wandel2021Learning,\n    author = {Wandel, Nils and Weinmann, Michael and Klein, Reinhard},\n    series = {Ninth International Conference on Learning Representations},\n    year = {2021},\n    title = {Learning Incompressible Fluid Dynamics from Scratch - Towards Fast, Differentiable Fluid Models that Generalize},\n    howpublished = {https://arxiv.org/abs/2006.08762},\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9554441738822752
      ],
      "excerpt": "Nils Wandel, Michael Weinmann, Reinhard Klein, ICLR, 2021 (Video,Spotlight presentation) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.977265581187069
      ],
      "excerpt": "Nils Wandel, Michael Weinmann, Reinhard Klein, Physics of Fluids, 2021 (Code,Video) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8678707754070779,
        0.9553055233818778
      ],
      "excerpt": "Spline-PINN: Approaching PDEs without Data using Fast, Physics-Informed Hermite-Spline CNNs \nNils Wandel, Michael Weinmann, Michael Neidlin, Reinhard Klein, AAAI, 2022 (Code) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/aschethor/Unsupervised_Deep_Learning_of_Incompressible_Fluid_Dynamics",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-10-09T12:52:17Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-16T13:04:08Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9249712046819399,
        0.9691585196985949,
        0.8004571944438583
      ],
      "excerpt": "Then, this is the right repository for you! :) \nIn this project, we aim at learning different time integration schemes (explicit / implicit / IMEX) to solve the incompressible Navier Stokes equations on a Marker and Cell (MAC) grid using a U-Net. \nComprehensive background information is provided in our paper: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9157121749631834,
        0.9164406596288766
      ],
      "excerpt": "We extended this work to 3D, so you might also want to check out: \nTeaching the Incompressible Navier Stokes Equations to Fast Neural Surrogate Models in 3D \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9565133620844352
      ],
      "excerpt": "Recently, we proposed a continuous extension of this work that makes use of Hermite-Splines: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9909512863214579
      ],
      "excerpt": "As our fluid models are fully differentiable, gradients of the fluid simulation can be easily computed with backpropagation through time. We demonstrate this in a proof of concept experiment that aims at controling the fluid velocity such that the vortex shedding frequency behind an obstacle matches a predefined target frequency. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/aschethor/Unsupervised_Deep_Learning_of_Incompressible_Fluid_Dynamics/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 11,
      "date": "Tue, 28 Dec 2021 11:24:35 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/aschethor/Unsupervised_Deep_Learning_of_Incompressible_Fluid_Dynamics/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "aschethor/Unsupervised_Deep_Learning_of_Incompressible_Fluid_Dynamics",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "First, create a new Conda-environment:\n\n```\nconda create --name my_cool_fluid_env python=3.7  \nsource activate my_cool_fluid_env\n```\n\nNow, install the following packages:\n\n```\nconda install pytorch torchvision cudatoolkit=10.2 -c pytorch  \nconda install matplotlib statsmodels natsort tensorboard  \npip install opencv-python\n```\n\n... and you're done :)  \nThe installation was tested on Ubuntu 18.04, but other operating systems should work as well. \nIf you have troubles with cuda (e.g. because you don't have a GPU at hand), use the \"\\-\\-cuda=f\" option for all of the following python scripts.\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9188784316685811
      ],
      "excerpt": "python train.py --mu=0.5 --rho=4 --dt=4 --integrator=imex \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9355986061254542
      ],
      "excerpt": "python train.py --help \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8711488065417864
      ],
      "excerpt": "python demo_interactive.py --mu=0.5 --rho=4 --dt=4 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8711488065417864
      ],
      "excerpt": "python control_frequency.py --mu=0.1 --rho=4 --dt=4 --target_freq=8 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/aschethor/Unsupervised_Deep_Learning_of_Incompressible_Fluid_Dynamics/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Learning Incompressible Fluid Dynamics from Scratch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Unsupervised_Deep_Learning_of_Incompressible_Fluid_Dynamics",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "aschethor",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/aschethor/Unsupervised_Deep_Learning_of_Incompressible_Fluid_Dynamics/blob/main/readme.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 40,
      "date": "Tue, 28 Dec 2021 11:24:35 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "We provide you with 2 pretrained models so you can directly \"dive into\" some fluid simulations: In the following, you can start to play around with our interactive demo and generate streamline plots :)\n\nThe first model was trained with mu=0.1, rho=4 and dt=4. To start the interactive fluid simulation, run:\n\n```\npython demo_interactive.py --mu=0.1 --rho=4 --dt=4\n```\n\nThe second model was trained with mu=0.5, rho=1 and dt=4. To start the demo using this model, run:\n\n```\npython demo_interactive.py --mu=0.5 --rho=1 --dt=4\n```\n\nThe obstacles follow the mouse if the left button is pressed.\nBy pressing 'x' or 'y' the flow can be accelerated or decelerated respectively and by tipping 'n' you can swap to a new randomly chosen fluid domain.\nWith 'p', you can generate streamline plots.\n\nIf you want to change the obstacles, please have a look into demo_interactive.py and setup.py\n\n",
      "technique": "Header extraction"
    }
  ]
}