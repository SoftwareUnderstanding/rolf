{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hans/adversarial",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2015-02-15T03:17:19Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-26T16:46:16Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9305357782543165
      ],
      "excerpt": "trained models. Some highlights are listed below (see the head of the linked \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Conditional generative adversarial networks for convolutional face generation",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hans/adversarial/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 33,
      "date": "Thu, 30 Dec 2021 00:10:03 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/hans/adversarial/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "hans/adversarial",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This code is built on the [Pylearn2][4] framework for machine learning.\nThe abstract model structures are implemented as Python classes (see e.g.\nthe [`ConditionalAdversaryPair` class][5], and concrete model\ninstantiations / training configurations are described in YAML files\n(see e.g. [a file for training with LFW data][6]).\n\nYou can perform your own training runs using these YAML files. The paths in\nthe YAML files reference my own local data; you'll need to download the LFW\ndataset and change these paths yourself. The \"file-list\" and embedding files\nreferenced in the YAML files are available for LFW\n[in the `data/lfwcrop_color` folder][7]. Once you have the paths in the YAML\nfile, you can start training a model with the simple invocation of Pylearn2's\n`train.py` binary, e.g.\n\n    train.py models/lfwcrop_convolutional_conditional.yaml\n    \n",
      "technique": "Header extraction"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/hans/adversarial/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "BSD 3-Clause \"New\" or \"Revised\" License",
      "url": "https://api.github.com/licenses/bsd-3-clause"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Copyright (c) 2014, Ian Goodfellow\\nAll rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met:\\n\\n Redistributions of source code must retain the above copyright notice, this\\n  list of conditions and the following disclaimer.\\n\\n Redistributions in binary form must reproduce the above copyright notice,\\n  this list of conditions and the following disclaimer in the documentation\\n  and/or other materials provided with the distribution.\\n\\n* Neither the name of the {organization} nor the names of its\\n  contributors may be used to endorse or promote products derived from\\n  this software without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Conditional Generative Adversarial Networks",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "adversarial",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "hans",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hans/adversarial/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Numpy\n- Theano\n- Pylearn2\n\n[1]: https://github.com/hans/adversarial/blob/master/paper.pdf\n[2]: https://github.com/goodfeli/adversarial\n[3]: http://arxiv.org/abs/1406.2661\n[4]: http://deeplearning.net/software/pylearn2/\n[5]: https://github.com/hans/adversarial/blob/master/conditional/__init__.py#L13\n[6]: https://github.com/hans/adversarial/blob/master/models/lfwcrop_convolutional_conditional_retrain.yaml\n[7]: https://github.com/hans/adversarial/tree/master/data/lfwcrop_color\n[8]: https://github.com/hans/adversarial/blob/master/sampler/noise_browser.py\n[9]: https://github.com/hans/adversarial/blob/master/sampler/data_browser.py\n[10]: https://github.com/hans/adversarial/blob/master/sampler/show_samples_lfw_conditional.py\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 98,
      "date": "Thu, 30 Dec 2021 00:10:03 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This code is built on the [Pylearn2][4] framework for machine learning.\nThe abstract model structures are implemented as Python classes (see e.g.\nthe [`ConditionalAdversaryPair` class][5], and concrete model\ninstantiations / training configurations are described in YAML files\n(see e.g. [a file for training with LFW data][6]).\n\nYou can perform your own training runs using these YAML files. The paths in\nthe YAML files reference my own local data; you'll need to download the LFW\ndataset and change these paths yourself. The \"file-list\" and embedding files\nreferenced in the YAML files are available for LFW\n[in the `data/lfwcrop_color` folder][7]. Once you have the paths in the YAML\nfile, you can start training a model with the simple invocation of Pylearn2's\n`train.py` binary, e.g.\n\n    train.py models/lfwcrop_convolutional_conditional.yaml\n    \n",
      "technique": "Header extraction"
    }
  ]
}