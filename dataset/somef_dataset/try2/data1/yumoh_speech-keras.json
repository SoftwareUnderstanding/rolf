{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1706.03762\u3002\n\n- tutorial\uff1ahttps://blog.csdn.net/chinatelecom08/article/details/85051817\n\n\u57fa\u4e8eCBHG\u7ed3\u6784\u7684\u8bed\u8a00\u6a21\u578b`model_language\\cbhg.py`\uff0c\u8be5\u6a21\u578b\u4e4b\u524d\u7528\u4e8e\u8c37\u6b4c\u58f0\u97f3\u5408\u6210\uff0c\u79fb\u690d\u5230\u8be5\u9879\u76ee\u4e2d\u4f5c\u4e3a\u57fa\u4e8e\u795e\u7ecf\u7f51\u7edc\u7684\u8bed\u8a00\u6a21\u578b\u3002\n\n- \u539f\u7406\u5730\u5740\uff1ahttps://github.com/crownpku/Somiao-Pinyin\n\n- tutorial\uff1ahttps://blog.csdn.net/chinatelecom08/article/details/85048019\n\n\n## 4. \u6570\u636e\u96c6\n\u5305\u62ecstc\u3001primewords\u3001Aishell\u3001thchs30\u56db\u4e2a\u6570\u636e\u96c6\uff0c\u5171\u8ba1\u7ea6430\u5c0f\u65f6, \u76f8\u5173\u94fe\u63a5\uff1a[http://www.openslr.org/resources.php](http://www.openslr.org/resources.php"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "|thchs-30 | 10000 | 893 | 2495 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "data_args.data_length = 10 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "epochs = 10 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9820575821110855
      ],
      "excerpt": "100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:00&lt;00:00, 9986.44it/s]   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9820575821110855
      ],
      "excerpt": "100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:00&lt;00:00, 9946.18it/s] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9820575821110855
      ],
      "excerpt": "100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:00&lt;00:00, 9950.90it/s] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "epochs = 10 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9783599346414921
      ],
      "excerpt": "            if (k * batch_num + i) % 10 == 0: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "        if (k+1) % 5 == 0: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "data_args.data_length = 10 #: \u91cd\u65b0\u8bad\u7ec3\u9700\u8981\u6ce8\u91ca\u8be5\u884c \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9820575821110855
      ],
      "excerpt": "100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:00&lt;00:00, 9950.90it/s] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9172460325642322
      ],
      "excerpt": "100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:00&lt;?, ?it/s] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9820575821110855
      ],
      "excerpt": "100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:00&lt;00:00, 9953.26it/s] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9507374082549614,
        0.9507374082549614
      ],
      "excerpt": "\u6587\u672c\u7ed3\u679c\uff1a lv4 shi4 yang2 chun1 yan1 jing3 da4 kuai4 wen2 zhang1 de di3 se4 si4 yue4 de lin2 luan2 geng4 shi4 lv4 de2 xian1 huo2 xiu4 mei4 shi1 yi4 ang4 ran2 \n\u539f\u6587\u7ed3\u679c\uff1a lv4 shi4 yang2 chun1 yan1 jing3 da4 kuai4 wen2 zhang1 de di3 se4 si4 yue4 de lin2 luan2 geng4 shi4 lv4 de2 xian1 huo2 xiu4 mei4 shi1 yi4 ang4 ran2 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9507374082549614,
        0.9507374082549614
      ],
      "excerpt": "\u6587\u672c\u7ed3\u679c\uff1a ta1 jin3 ping2 yao1 bu4 de li4 liang4 zai4 yong3 dao4 shang4 xia4 fan1 teng2 yong3 dong4 she2 xing2 zhuang4 ru2 hai3 tun2 yi4 zhi2 yi3 yi1 tou2 de you1 shi4 ling3 xian1 \n\u539f\u6587\u7ed3\u679c\uff1a ta1 jin3 ping2 yao1 bu4 de li4 liang4 zai4 yong3 dao4 shang4 xia4 fan1 teng2 yong3 dong4 she2 xing2 zhuang4 ru2 hai3 tun2 yi4 zhi2 yi3 yi1 tou2 de you1 shi4 ling3 xian1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488,
        0.8356013927728488
      ],
      "excerpt": "\u6587\u672c\u7ed3\u679c\uff1a ke3 shei2 zhi1 wen2 wan2 hou4 ta1 yi1 zhao4 jing4 zi zhi1 jian4 zuo3 xia4 yan3 jian3 de xian4 you4 cu1 you4 hei1 yu3 you4 ce4 ming2 xian3 bu2 dui4 cheng1 \n\u539f\u6587\u7ed3\u679c\uff1a ke3 shei2 zhi1 wen2 wan2 hou4 ta1 yi1 zhao4 jing4 zi zhi1 jian4 zuo3 xia4 yan3 jian3 de xian4 you4 cu1 you4 hei1 yu3 you4 ce4 ming2 xian3 bu2 dui4 cheng1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9507374082549614,
        0.9507374082549614
      ],
      "excerpt": "\u6587\u672c\u7ed3\u679c\uff1a yi1 jin4 men2 wo3 bei4 jing1 dai1 le zhe4 hu4 ming2 jiao4 pang2 ji2 de lao3 nong2 shi4 kang4 mei3 yuan2 chao2 fu4 shang1 hui2 xiang1 de lao3 bing1 qi1 zi3 chang2 nian2 you3 bing4 jia1 tu2 si4 bi4 yi1 pin2 ru2 xi3 \n\u539f\u6587\u7ed3\u679c\uff1a yi1 jin4 men2 wo3 bei4 jing1 dai1 le zhe4 hu4 ming2 jiao4 pang2 ji2 de lao3 nong2 shi4 kang4 mei3 yuan2 chao2 fu4 shang1 hui2 xiang1 de lao3 bing1 qi1 zi3 chang2 nian2 you3 bing4 jia1 tu2 si4 bi4 yi1 pin2 ru2 xi3 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9105368110547479
      ],
      "excerpt": "\u6211\u7684github: https://github.com/audier \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yumoh/speech-keras",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-02-16T06:06:47Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-02-16T06:10:10Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "\u8be5\u7cfb\u7edf\u5b9e\u73b0\u4e86\u57fa\u4e8e\u6df1\u5ea6\u6846\u67b6\u7684\u8bed\u97f3\u8bc6\u522b\u4e2d\u7684\u58f0\u5b66\u6a21\u578b\u548c\u8bed\u8a00\u6a21\u578b\u5efa\u6a21\uff0c\u5176\u4e2d\u58f0\u5b66\u6a21\u578b\u5305\u62ecCNN-CTC\u3001GRU-CTC\u3001CNN-RNN-CTC\uff0c\u8bed\u8a00\u6a21\u578b\u5305\u542b[transformer](https://jalammar.github.io/illustrated-transformer/)\u3001[CBHG](https://github.com/crownpku/Somiao-Pinyin)\uff0c\u6570\u636e\u96c6\u5305\u542bstc\u3001primewords\u3001Aishell\u3001thchs30\u56db\u4e2a\u6570\u636e\u96c6\u3002\n\n\u672c\u7cfb\u7edf\u66f4\u6574\u4f53\u4ecb\u7ecd\uff1ahttps://blog.csdn.net/chinatelecom08/article/details/82557715\n\n\u672c\u9879\u76ee\u73b0\u5df2\u8bad\u7ec3\u4e00\u4e2a\u8ff7\u4f60\u7684\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf\uff0c\u5c06\u9879\u76ee\u4e0b\u8f7d\u5230\u672c\u5730\u4e0a\uff0c\u4e0b\u8f7d[thchs\u6570\u636e\u96c6](http://www.openslr.org/resources/18/data_thchs30.tgz)\u5e76\u89e3\u538b\u81f3data\uff0c\u8fd0\u884c`test.py`\uff0c\u4e0d\u51fa\u610f\u5916\u80fd\u591f\u8fdb\u884c\u8bc6\u522b\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a\n\n     the  0 th example.\n    \u6587\u672c\u7ed3\u679c\uff1a lv4 shi4 yang2 chun1 yan1 jing3 da4 kuai4 wen2 zhang1 de di3 se4 si4 yue4 de lin2 luan2 geng4 shi4 lv4 de2 xian1 huo2 xiu4 mei4 shi1 yi4 ang4 ran2\n    \u539f\u6587\u7ed3\u679c\uff1a lv4 shi4 yang2 chun1 yan1 jing3 da4 kuai4 wen2 zhang1 de di3 se4 si4 yue4 de lin2 luan2 geng4 shi4 lv4 de2 xian1 huo2 xiu4 mei4 shi1 yi4 ang4 ran2\n    \u539f\u6587\u6c49\u5b57\uff1a \u7eff\u662f\u9633\u6625\u70df\u666f\u5927\u5757\u6587\u7ae0\u7684\u5e95\u8272\u56db\u6708\u7684\u6797\u5ce6\u66f4\u662f\u7eff\u5f97\u9c9c\u6d3b\u79c0\u5a9a\u8bd7\u610f\u76ce\u7136\n    \u8bc6\u522b\u7ed3\u679c\uff1a \u7eff\u662f\u9633\u6625\u70df\u666f\u5927\u5757\u6587\u7ae0\u7684\u5e95\u8272\u56db\u6708\u7684\u6797\u5ce6\u66f4\u662f\u7eff\u5f97\u9c9c\u6d3b\u79c0\u5a9a\u8bd7\u610f\u76ce\u7136\n\n\u82e5\u81ea\u5df1\u5efa\u7acb\u6a21\u578b\u5219\u9700\u8981\u5220\u9664\u73b0\u6709\u6a21\u578b\uff0c\u91cd\u65b0\u914d\u7f6e\u53c2\u6570\u8bad\u7ec3\uff0c\u5177\u4f53\u5b9e\u73b0\u6d41\u7a0b\u53c2\u8003\u672c\u9875\u6700\u540e\u3002\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "        data_path = 'data/', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "    am.ctc_model.load_weights('logs_am/model.h5') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577302739126875
      ],
      "excerpt": "dense_1 (Dense)              (None, None, 256)         819456     \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577302739126875
      ],
      "excerpt": "dense_2 (Dense)              (None, None, 230)         59110      \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.931057316776452
      ],
      "excerpt": "with lm.graph.as_default(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.897772994032026
      ],
      "excerpt": "with tf.Session(graph=lm.graph) as sess: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "        saver.restore(sess, 'logs_lm/model') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8606822220048336
      ],
      "excerpt": "loading language model... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "    for i in r1: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.931057316776452
      ],
      "excerpt": "with lm.graph.as_default(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127,
        0.860059181823877
      ],
      "excerpt": "with sess.as_default(): \n    saver.restore(sess, 'logs_lm/model') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577302739126875
      ],
      "excerpt": "dense_3 (Dense)              (None, None, 256)         819456     \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8577302739126875
      ],
      "excerpt": "dense_4 (Dense)              (None, None, 230)         59110      \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8606822220048336
      ],
      "excerpt": "loading language model... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127
      ],
      "excerpt": "    with sess.as_default(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8674699144987233
      ],
      "excerpt": "        got = ''.join(train_data.han_vocab[idx] for idx in preds[0]) \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yumoh/speech-keras/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 21 Dec 2021 07:40:00 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yumoh/speech-keras/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "yumoh/speech-keras",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/yumoh/speech-keras/master/tutorial/CBHG_tutorail.ipynb",
      "https://raw.githubusercontent.com/yumoh/speech-keras/master/tutorial/CNN%2BCTC_tutorial.ipynb",
      "https://raw.githubusercontent.com/yumoh/speech-keras/master/tutorial/self-attention_tutorial.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8926435941617008
      ],
      "excerpt": "|Name | train | dev | test \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8962484861720871
      ],
      "excerpt": "get source list... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8474895321345809
      ],
      "excerpt": "make am vocab... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8474895321345809
      ],
      "excerpt": "make lm pinyin vocab... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8474895321345809
      ],
      "excerpt": "make lm hanzi vocab... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8962484861720871
      ],
      "excerpt": "get source list... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8474895321345809
      ],
      "excerpt": "make am vocab... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8474895321345809
      ],
      "excerpt": "make lm pinyin vocab... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8474895321345809
      ],
      "excerpt": "make lm hanzi vocab... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8918974083095406
      ],
      "excerpt": "\u6211\u7684github: https://github.com/audier \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8911211957476298
      ],
      "excerpt": "|Name | train | dev | test \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8315707700434394
      ],
      "excerpt": "- data_type: train, test, dev \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9092688189402632
      ],
      "excerpt": "    params = tf.contrib.training.HParams( \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8589534893990137
      ],
      "excerpt": "        data_type = 'train', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984,
        0.8594142235991984
      ],
      "excerpt": "        thchs30 = True, \n        aishell = True, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8024390320377861
      ],
      "excerpt": "      return params \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516,
        0.8801854956928516
      ],
      "excerpt": "from model_speech.cnn_ctc import Am, am_hparams \nfrom model_speech.gru_ctc import Am, am_hparams \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516,
        0.8801854956928516
      ],
      "excerpt": "from model_language.transformer import Lm, lm_hparams \nfrom model_language.cbhg import Lm, lm_hparams \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8401558704798054,
        0.925671696398174,
        0.9416522774131079
      ],
      "excerpt": "import os \nimport tensorflow as tf \nfrom utils import get_data, data_hparams \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from model_speech.cnn_ctc import Am, am_hparams \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8172342705654815
      ],
      "excerpt": "am_args.vocab_size = len(train_data.am_vocab) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9095939619843445
      ],
      "excerpt": "    print('load acoustic model...') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8355222064578357
      ],
      "excerpt": "batch_num = len(train_data.wav_lst) // train_data.batch_size \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8034809085571653
      ],
      "excerpt": "    print('this is the', k+1, 'th epochs trainning !!!') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8009205206373847
      ],
      "excerpt": "load  thchs_train.txt  data... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8009205206373847
      ],
      "excerpt": "load  aishell_train.txt  data... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.906614234580968
      ],
      "excerpt": "Layer (type)                 Output Shape              Param \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8166220806941422
      ],
      "excerpt": "batch_normalization_7 (Batch (None, None, 25, 128)     512        \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8166220806941422
      ],
      "excerpt": "batch_normalization_8 (Batch (None, None, 25, 128)     512        \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8166220806941422
      ],
      "excerpt": "batch_normalization_9 (Batch (None, None, 25, 128)     512        \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8934745846565956
      ],
      "excerpt": "Total params: 1,759,174 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from model_language.transformer import Lm, lm_hparams \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8172342705654815,
        0.8172342705654815
      ],
      "excerpt": "lm_args.input_vocab_size = len(train_data.pny_vocab) \nlm_args.label_vocab_size = len(train_data.han_vocab) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8936954105699045
      ],
      "excerpt": "    saver =tf.train.Saver() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8123763140827432,
        0.8670539095623045
      ],
      "excerpt": "    merged = tf.summary.merge_all() \n    sess.run(tf.global_variables_initializer()) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8222972544037735
      ],
      "excerpt": "    writer = tf.summary.FileWriter('logs_lm/tensorboard', tf.get_default_graph()) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428
      ],
      "excerpt": "            cost,_ = sess.run([lm.mean_loss,lm.train_op], feed_dict=feed) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428
      ],
      "excerpt": "                rs=sess.run(merged, feed_dict=feed) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8174321575537652
      ],
      "excerpt": "INFO:tensorflow:Restoring parameters from logs_lm/model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8401558704798054,
        0.925671696398174,
        0.9457175861910134
      ],
      "excerpt": "import os \nimport tensorflow as tf \nimport numpy as np \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8102780086823556,
        0.9094150935015075,
        0.8569541163445885,
        0.915092800704967
      ],
      "excerpt": "    result = num_result[:, :, :] \n    in_len = np.zeros((1), dtype = np.int32) \n    in_len[0] = result.shape[1] \n    r = K.ctc_decode(result, in_len, greedy = True, beam_width=10, top_paths=1) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8359299706379749
      ],
      "excerpt": "    text = [] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8226440209499781
      ],
      "excerpt": "    return r1, text \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9416522774131079
      ],
      "excerpt": "from utils import get_data, data_hparams \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9138299324532082
      ],
      "excerpt": ":    \u6b64\u5904\u5e94\u8bbe\u4e3a'test'\uff0c\u6211\u7528\u4e86'train'\u56e0\u4e3a\u6f14\u793a\u6a21\u578b\u8f83\u5c0f\uff0c\u5982\u679c\u4f7f\u7528'test'\u770b\u4e0d\u51fa\u6548\u679c\uff0c \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8589534893990137
      ],
      "excerpt": "data_args.data_type = 'train' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8009205206373847
      ],
      "excerpt": "load  thchs_train.txt  data... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8009205206373847
      ],
      "excerpt": "load  aishell_train.txt  data... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from model_speech.cnn_ctc import Am, am_hparams \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8172342705654815
      ],
      "excerpt": "am_args.vocab_size = len(train_data.am_vocab) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9015253587891704
      ],
      "excerpt": "print('loading acoustic model...') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from model_language.transformer import Lm, lm_hparams \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8172342705654815,
        0.8172342705654815
      ],
      "excerpt": "lm_args.input_vocab_size = len(train_data.pny_vocab) \nlm_args.label_vocab_size = len(train_data.han_vocab) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8936954105699045
      ],
      "excerpt": "    saver =tf.train.Saver() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.906614234580968
      ],
      "excerpt": "Layer (type)                 Output Shape              Param \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8934745846565956
      ],
      "excerpt": "Total params: 1,759,174 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8174321575537652
      ],
      "excerpt": "INFO:tensorflow:Restoring parameters from logs_lm/model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9373455499717481
      ],
      "excerpt": "    print('\\n the ', i, 'th example.') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8024395254384221
      ],
      "excerpt": "    result = am.model.predict(x, steps=1) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8871758901424025,
        0.8167441417582336,
        0.9442417739250801,
        0.8195082496323761
      ],
      "excerpt": "    , text = decode_ctc(result, train_data.am_vocab) \n    text = ' '.join(text) \n    print('\u6587\u672c\u7ed3\u679c\uff1a', text) \n    print('\u539f\u6587\u7ed3\u679c\uff1a', ' '.join([train_data.am_vocab[int(i)] for i in y])) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8359299706379749,
        0.9131333212775155
      ],
      "excerpt": "        text = text.strip('\\n').split(' ') \n        x = np.array([train_data.pny_vocab.index(pny) for pny in text]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428
      ],
      "excerpt": "        preds = sess.run(lm.preds, {lm.x: x}) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8121440518152376,
        0.8517100343443746
      ],
      "excerpt": "        print('\u539f\u6587\u6c49\u5b57\uff1a', ''.join(train_data.han_vocab[idx] for idx in y[0])) \n        print('\u8bc6\u522b\u7ed3\u679c\uff1a', got) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8402070395374024
      ],
      "excerpt": " the  0 th example. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8402070395374024
      ],
      "excerpt": " the  1 th example. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8402070395374024
      ],
      "excerpt": " the  2 th example. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8402070395374024
      ],
      "excerpt": " the  3 th example. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8402070395374024
      ],
      "excerpt": " the  4 th example. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yumoh/speech-keras/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u4e2d\u6587\u8bed\u97f3\u8bc6\u522b\u7cfb\u7edf",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "speech-keras",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "yumoh",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yumoh/speech-keras/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 21 Dec 2021 07:40:00 GMT"
    },
    "technique": "GitHub API"
  }
}