{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The design of the library and implementations are based on \n* [OpenNMT-tf](https://github.com/OpenNMT/OpenNMT-tf)\n* [Gated Graph Neural Networks](https://github.com/Microsoft/gated-graph-neural-network-samples)\n\nSince most of the code adapted from OpenNMT-tf is spread across multiple files, the license for the\nlibrary is located in the [base folder](/OPENNMT.LICENSE) rather than in the headers of the files.\n\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1811.01824},\n}\n```\n\n\n\n\n\n"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use this library in your own research, please cite\n\n```\n@inproceedings{\n    pfernandes2018structsumm,\n    title=\"Structured Neural Summarization\",\n    author={Patrick Fernandes and Miltiadis Allamanis and Marc Brockschmidt },\n    booktitle={Proceedings of the 7th International Conference on Learning Representations (ICLR)},\n    year={2019},\n    url={https://arxiv.org/abs/1811.01824},\n}\n```\n\n\n\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{\n    pfernandes2018structsumm,\n    title=\"Structured Neural Summarization\",\n    author={Patrick Fernandes and Miltiadis Allamanis and Marc Brockschmidt },\n    booktitle={Proceedings of the 7th International Conference on Learning Representations (ICLR)},\n    year={2019},\n    url={https://arxiv.org/abs/1811.01824},\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/CoderPat/OpenGNN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-01-27T22:29:54Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-08T10:33:28Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9926431108994137
      ],
      "excerpt": "OpenGNN is a machine learning library for learning over graph-structured data. It was built with generality in mind and supports tasks such as: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8449260326152946,
        0.9684413980407849
      ],
      "excerpt": "graph-to-sequence mapping \nIt supports various graph encoders including GGNNs, GCNs, SequenceGNNs and other variations of neural graph message passing. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8684465541259176,
        0.9402996091780057
      ],
      "excerpt": "For example, to train a model on the previously extracted chemical data \n(again inside data/chem) using a predefined model in the  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8229587796666389
      ],
      "excerpt": "The following example shows how to create a GGNN Encoder to encode a batch of random graphs. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8303512087454666
      ],
      "excerpt": ": build a batch of graphs with random initial features \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Open source machine learning for graph-structured data",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/CoderPat/OpenGNN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Tue, 28 Dec 2021 14:30:16 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/CoderPat/OpenGNN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "CoderPat/OpenGNN",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "OpenGNN requires \n\n* Python (>= 3.5)\n* Tensorflow (>= 1.10 < 2.0)\n\nTo install the library aswell as the command-line entry points run\n\n``` pip install -e .```\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8929859950099549,
        0.8168637126680117
      ],
      "excerpt": "For example, to train a model on the previously extracted chemical data \n(again inside data/chem) using a predefined model in the  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8627422690488425
      ],
      "excerpt": "For example, we can train using the a custom model in model.py using \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8791204924452767,
        0.8314776415698638
      ],
      "excerpt": "ognn-main train_and_eval --model model.py --config config.yml \nWhile the training script doesn't log the training to the standard output,  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8149277597742944
      ],
      "excerpt": "Examples of other config files can be found in the data folder. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.925671696398174,
        0.9012248701992861
      ],
      "excerpt": "import tensorflow as tf \nimport opengnn as ognn \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/CoderPat/OpenGNN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\r\\n\\r\\nCopyright (c) 2018-present The OpenGNN Authors.\\r\\n\\r\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\r\\nof this software and associated documentation files (the \"Software\"), to deal\\r\\nin the Software without restriction, including without limitation the rights\\r\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\r\\ncopies of the Software, and to permit persons to whom the Software is\\r\\nfurnished to do so, subject to the following conditions:\\r\\n\\r\\nThe above copyright notice and this permission notice shall be included in all\\r\\ncopies or substantial portions of the Software.\\r\\n\\r\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\nSOFTWARE.\\r\\n\\r\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "OpenGNN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "OpenGNN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "CoderPat",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/CoderPat/OpenGNN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "CoderPat",
        "body": "",
        "dateCreated": "2019-01-27T22:40:39Z",
        "datePublished": "2019-02-21T10:18:15Z",
        "html_url": "https://github.com/CoderPat/OpenGNN/releases/tag/0.1",
        "name": "Initial Release",
        "tag_name": "0.1",
        "tarball_url": "https://api.github.com/repos/CoderPat/OpenGNN/tarball/0.1",
        "url": "https://api.github.com/repos/CoderPat/OpenGNN/releases/15689380",
        "zipball_url": "https://api.github.com/repos/CoderPat/OpenGNN/zipball/0.1"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 29,
      "date": "Tue, 28 Dec 2021 14:30:16 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "graph-neural-networks",
      "deep-learning"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To experiment with the library, you can use one datasets provided in the [data](/data) folder.\nFor example, to experiment with the chemical dataset, first install the `rdkit` library that \ncan be obtained by running `conda install -c rdkit rdkit`.\nThen, in the [data/chem](/data/chem) folder, run `python get_data.py` to download the dataset.\n\nAfter getting the data, generate a node and edge vocabulary for them using \n```bash\nognn-build-vocab --field_name node_labels --save_vocab node.vocab \\\n                 molecules_graphs_train.jsonl\nognn-build-vocab --no_pad_token --field_name edges --string_index 0 --save_vocab edge.vocab \\\n                 molecules_graphs_train.jsonl\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}