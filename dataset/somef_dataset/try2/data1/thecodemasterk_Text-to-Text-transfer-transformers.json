{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1910.10683\n[released_checkpoints]: https://github.com/google-research/text-to-text-transfer-transformer/blob/master/released_checkpoints.md\n[beam]: https://beam.apache.org\n[c4]: https://www.tensorflow.org/datasets/catalog/c4\n[cc]: https://commoncrawl.org\n[dataflow]: https://cloud.google.com/dataflow/\n[gcs]: https://www.tensorflow.org/datasets/gcs\n[gcd]: https://cloud.google.com/dataflow/\n[gin]: https://github.com/google/gin-config\n[mtft]: https://github.com/tensorflow/mesh/tree/master/mesh_tensorflow/transformer\n[tfds]: https://www.tensorflow.org/datasets\n[tfds_beam]: https://www.tensorflow.org/datasets/beam_datasets"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you extend or use this work, please cite the [paper][paper] where it was introduced:\n\n```\n@article{2019t5,\n  author = {Colin Raffel and Noam Shazeer and Adam Roberts and Katherine Lee and Sharan Narang and Michael Matena and Yanqi Zhou and Wei Li and Peter J. Liu},\n  title = {Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer},\n  journal = {arXiv e-prints},\n  year = {2019},\n  archivePrefix = {arXiv},\n  eprint = {1910.10683},\n}\n```\n\n[paper]: https://arxiv.org/abs/1910.10683\n[released_checkpoints]: https://github.com/google-research/text-to-text-transfer-transformer/blob/master/released_checkpoints.md\n[beam]: https://beam.apache.org\n[c4]: https://www.tensorflow.org/datasets/catalog/c4\n[cc]: https://commoncrawl.org\n[dataflow]: https://cloud.google.com/dataflow/\n[gcs]: https://www.tensorflow.org/datasets/gcs\n[gcd]: https://cloud.google.com/dataflow/\n[gin]: https://github.com/google/gin-config\n[mtft]: https://github.com/tensorflow/mesh/tree/master/mesh_tensorflow/transformer\n[tfds]: https://www.tensorflow.org/datasets\n[tfds_beam]: https://www.tensorflow.org/datasets/beam_datasets\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{2019t5,\n  author = {Colin Raffel and Noam Shazeer and Adam Roberts and Katherine Lee and Sharan Narang and Michael Matena and Yanqi Zhou and Wei Li and Peter J. Liu},\n  title = {Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer},\n  journal = {arXiv e-prints},\n  year = {2019},\n  archivePrefix = {arXiv},\n  eprint = {1910.10683},\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8942856639420041
      ],
      "excerpt": "How to Cite \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/thecodemasterk/Text-to-Text-transfer-transformers",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "How to Contribute\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\nContributor License Agreement\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to https://cla.developers.google.com/ to see\nyour current agreements on file or to sign a new one.\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\nCode reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\nGitHub Help for more\ninformation on using pull requests.\nCommunity Guidelines\nThis project follows\nGoogle's Open Source Community Guidelines.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-08-06T14:11:39Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-09-08T16:06:00Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9951069582628213,
        0.996946620703908,
        0.8819104505040255,
        0.9561336714917962
      ],
      "excerpt": "T5 serves primarily as code for reproducing the experiments in [Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer][paper]. In the paper, we demonstrate how to achieve state-of-the-art results on multiple NLP tasks using a text-to-text transformer pre-trained on a large text corpus. \nThe bulk of the code in this repository is used for loading, preprocessing, mixing, and evaluating datasets. \nIt also provides a way to fine-tune the pre-trained models released alongside the publication. \nT5 can be used as a library for future model development by providing useful modules for training and fine-tuning (potentially huge) models on mixtures of text-to-text tasks. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9833731589146529,
        0.8764766879966616
      ],
      "excerpt": "t5.data is a package for defining Task objects that provide tf.data.Datasets. \nEach Task is made up of: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "a SentencePiece model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8119100384736897,
        0.9354190742641657
      ],
      "excerpt": "The data source can be an arbitrary function that provides a tf.data.Dataset, but we also provide simpler wrappers for datasets available in [TensorFlow Datasets (TFDS)][tfds] (a TfdsTask) or stored as text files with one example per line (a TextLineTask). \nThe text preprocessor converts the examples in the source dataset into the appropriate format for a text-to-text model with fields for inputs and targets.  For example, the predefined t5.data.preprocessors.translate preprocessor converts inputs in the form \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8855165817003802,
        0.8096858349554713
      ],
      "excerpt": "{'de': 'Das ist gut.', 'en': 'That is good.'} \nto the form \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9613825202627354,
        0.9398002045396708,
        0.8159708273949915,
        0.9570184473338094,
        0.8495132977378916,
        0.8711404628696638
      ],
      "excerpt": "{'inputs': 'translate German to English: Das ist gut.', 'targets': 'That is good.'} \nIn additon to text preprocessing, you can also use one or more token preprocessors to modify the inputs post-tokenization. We implemented our unsupervised pre-training objectives using these token preprocessors. \nWe provide many predefined preprocessors in t5.data.preprocessors, but you may also define your own. \nThe SentencePiece model is used to tokenize the input strings and decode the output tokens. You can create your own model with the google/sentencepiece library, or use our default one at t5.data.DEFAULT_SPM_PATH. If you create your own, you must use the flags --pad_id=0 --eos_id=1 --unk_id=2 with spm_train to be compatible with our model code. \nThe metric function returns a score given the target and prediction from the model. You may also define a postprocess function to convert the target and prediction text to another format before calling the metric. We provide some predefined metrics in t5.evaluation.metrics. \nFinally, t5.data contains a Mixture class that can be instantiated to combine multiple Task datasets for multi-task training using various functions for specifying the mixture rates. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8094904219253037,
        0.9771223988189554,
        0.9790339474987432,
        0.9882631060041461,
        0.8457949264495881
      ],
      "excerpt": "utilities for applying these metrics at evaluation time \nt5.models contains shims for connecting T5 Tasks and Mixtures to a model implementation for training, evaluation, and inference. \nCurrently there are two shims available: One for the [Mesh TensorFlow Transformer][mtft] that we used in our paper and another for the Hugging Face Transformers library. \nThe Hugging Face API is currently experimental and subject to change, but provides a simple and easy way to load, fine-tune, and evaluate our pre-trained models using PyTorch on a single GPU. \nIf you want to use our largest models on TPUs and/or reproduce the results in our paper, you should use the MtfModel API and the t5_mesh_transformer binary. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9853899981353501,
        0.8403676954012252
      ],
      "excerpt": "Since the HfPyTorchModel is experimental, the remainder of this README assumes usage of the MtfModel and its associated binary. \nA usage example of HfPyTorchModel is available here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9651856483854434,
        0.982246332810838
      ],
      "excerpt": "Most of our predefined Tasks use [TensorFlow Datasets (TFDS)][tfds] as their data source. When you run our training binary (see instructions below) with a TfdsTask, the dataset will automatically be downloaded and prepared on its first use. After preparation is complete, the dataset is cached to your local storage to avoid this overhead in future runs.  If working in the cloud, we recommend you set the --t5_tfds_data_dir flag to point to a persistent storage location, such as a [GCS bucket][gcs]. This is a requirement when training on TPU. \nThe [C4][c4] dataset we created for unsupervised pre-training is available in TensorFlow Datasets, but it requires a significant amount of bandwith for downloading the raw [Common Crawl][cc] scrapes (~7 TB) and compute for its preparation (~335 CPU-days). We suggest you take advantage of the [Apache Beam][beam] support in TFDS, which enables distributed preprocessing of the dataset and can be run on [Google Cloud Dataflow][gcd]. With 500 workers, the job should complete in ~16 hours. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9140161995161014,
        0.8496895304251911
      ],
      "excerpt": "There is no way to define a text processor, so the TSV will need to contain your data in a preprocessed format. \nThere is also currently no way to set a token preprocessor, postprocess function, or metric function for evaluation when using a TSV file directly. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8121722823790731,
        0.8888449110034131
      ],
      "excerpt": "Similar to the above cases, your TSV file(s) must be accessible to the TPU (i.e., are in a GCS bucket). \nIn the command below, we train a model on the GLUE Benchmark MRPC task from scratch. You can change the MIXTURE_NAME gin parameter to use any of the tasks or mixtures provided in our package. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9629962971611608
      ],
      "excerpt": "  --gcp_project=\"${PROJECT}\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8633833461810619
      ],
      "excerpt": "The full list of tasks and mixtures can be obtained by running: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.929095207315264
      ],
      "excerpt": "In order to fine-tune one of our pre-trained models, you need to pass the operative config of the pre-trained model to the training script. The operative config should be passed in as a gin_file flag. It specifies the model architecture and other hyperparameters. In addition, you need to specify the mixture to fine-tune on. For example, to fine-tune the T5-small model on the glue_mrpc_v002 mixture, please run: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9629962971611608
      ],
      "excerpt": "  --gcp_project=\"${PROJECT}\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.809504647691836
      ],
      "excerpt": "  --gin_file=\"gs://t5-data/pretrained_models/small/operative_config.gin\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9770015980980188
      ],
      "excerpt": "To fine-tune with the same hyperparameters we used in the [paper][paper] (using a constant learning rate of 0.001), you can pass in this gin file which is included in the T5 package: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8285306597501727
      ],
      "excerpt": "You can also use a different batch size for fine-tuning. We set the batch size according to the total number of tokens in a batch. By default, a batch uses a sequence length of 512. To set the number of tokens in a batch, you should set \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9104312196830935
      ],
      "excerpt": "In order to evaluate a model in the T5 framework, you need to use the eval.gin file, specify the model directory, decoding method, and which checkpoint step(s) to evaluate. So, to evaluate on the GLUE MRPC task using beam search on all checkpoints, use the following command: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9629962971611608
      ],
      "excerpt": "  --gcp_project=\"${PROJECT}\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8009512079859675,
        0.8872788319718352
      ],
      "excerpt": "  --gin_param=\"eval_checkpoint_step = 'all'\" \nTo evaluate a specific checkpoint, simply set the eval_checkpoint_step parameter to appropriate checkpoint. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9629962971611608
      ],
      "excerpt": "  --gcp_project=\"${PROJECT}\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8009512079859675,
        0.9151685340760687
      ],
      "excerpt": "  --gin_param=\"infer_checkpoint_step = 'all'\" \nTo predict with a specific checkpoint, simply set the infer_checkpoint_step parameter to appropriate checkpoint. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8894032483726932
      ],
      "excerpt": "You may also want to export a SavedModel, which is useful for serving your trained model, (e.g., when deploying with ML Engine or in a Docker image). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9629962971611608
      ],
      "excerpt": "  --gcp_project=\"${PROJECT}\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9783944870773987,
        0.9346808801400569,
        0.8388462901955878
      ],
      "excerpt": "The t5-deploy notebook demonstrates exporting a SavedModel and packaging it in a Docker image for serving. \nWe provide operative configs for all of the experiments in the [paper][paper] in gs://t5-data/experiments. \nThe experiments folder has different subdirectories corresponding to the different sections in our paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9443993815013229
      ],
      "excerpt": "Each subdirectory of the objectives folder contains operative configs for some particular experiment (where loosely speaking an \"experiment\" is one of the rows in one of the tables in our paper). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8072345539632845
      ],
      "excerpt": "Then, there are subdirectories for each of the downstream fine-tuning mixtures we consider, each of which has its own operative config (for example, gs://t5-data/experiments/objectives/obj-prefix_lm/cnn_dailymail_v002/operative_config.gin). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9629962971611608
      ],
      "excerpt": "  --gcp_project=\"${PROJECT}\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9629962971611608
      ],
      "excerpt": "  --gcp_project=\"${PROJECT}\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "  --gin_param=\"init_checkpoint = '${PRETRAIN_MODEL_DIR}/model.ckpt-524288'\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9132887480470636
      ],
      "excerpt": "We have released the following checkpoints for pre-trained models described in our [paper][paper]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/thecodemasterk/Text-to-Text-transfer-transformers/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 22 Dec 2021 08:26:51 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/thecodemasterk/Text-to-Text-transfer-transformers/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "thecodemasterk/Text-to-Text-transfer-transformers",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/thecodemasterk/Text-to-Text-transfer-transformers/master/notebooks/t5-deploy.ipynb",
      "https://raw.githubusercontent.com/thecodemasterk/Text-to-Text-transfer-transformers/master/notebooks/t5-trivia.ipynb",
      "https://raw.githubusercontent.com/thecodemasterk/Text-to-Text-transfer-transformers/master/Testing/notebooks/t5-deploy.ipynb",
      "https://raw.githubusercontent.com/thecodemasterk/Text-to-Text-transfer-transformers/master/Testing/notebooks/t5-trivia.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You will first need to launch a Virtual Machine (VM) on Google Cloud. Details about launching the VM can be found at the [Google Cloud Documentation](https://cloud.google.com/compute/docs/instances/create-start-instance).\n\nIn order to run training or eval on Cloud TPUs, you must set up the following variables based on your project, zone and GCS bucket appropriately. Please refer to the [Cloud TPU Quickstart](https://cloud.google.com/tpu/docs/quickstart) guide for more details.\n\n```sh\nexport PROJECT=your_project_name\nexport ZONE=your_project_zone\nexport BUCKET=gs://yourbucket/\nexport TPU_NAME=t5-tpu\nexport TPU_SIZE=v3-8\nexport DATA_DIR=\"${BUCKET}/your_data_dir\"\nexport MODEL_DIR=\"${BUCKET}/your_model_dir\"\n```\n\nPlease use the following command to create a TPU device in the Cloud VM.\n\n```sh\nctpu up --name=$TPU_NAME --project=$PROJECT --zone=$ZONE --tpu-size=$TPU_SIZE \\\n        --tpu-only   --tf-version=2.1 --noconf\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "To install the T5 package, simply run:\n\n```sh\npip install t5[gcp]\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "You may either use a new or pre-existing `Task`, or you may load examples from a preprocessed TSV file.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.884469201104353
      ],
      "excerpt": "GPU Usage \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9250850359801611
      ],
      "excerpt": "If you are interested fine-tuning our models on a GPU in PyTorch, you should try the HfPyTorchModel API. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8745335039915848
      ],
      "excerpt": "Depending on your data source (see above), you will need to prepare your data appropriately. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8480974180500747,
        0.9910210531727922
      ],
      "excerpt": "After defining MY_PROJECT and MY_BUCKET appropriately, you can build the datast in DataFlow from GCP using the following commands: \npip install tfds-nightly[c4] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8270299523161858
      ],
      "excerpt": "python -m tensorflow_datasets.scripts.download_and_prepare \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8362973781971202
      ],
      "excerpt": "Make sure your files are accessible to the TPU (i.e., are in a GCS bucket), and you should be good to go! \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8881276749812184
      ],
      "excerpt": "You can also use greedy_decode.gin or sample_decode.gin instead of beam_search.gin in the command above. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8881276749812184
      ],
      "excerpt": "You can also use beam_search.gin or greedy_decode.gin instead of sample_decode.gin in the command above. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8194842505323139
      ],
      "excerpt": "Dataset Preparation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8735750002412684
      ],
      "excerpt": "GPU Usage \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8699836679442406
      ],
      "excerpt": "text preprocessor function(s) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8568206076593858
      ],
      "excerpt": "The data source can be an arbitrary function that provides a tf.data.Dataset, but we also provide simpler wrappers for datasets available in [TensorFlow Datasets (TFDS)][tfds] (a TfdsTask) or stored as text files with one example per line (a TextLineTask). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8645159917764699
      ],
      "excerpt": "A usage example of HfPyTorchModel is available here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8862790262763057
      ],
      "excerpt": "A TextLineTask is useful when your data source is a text file (or files) with one example per line. You can then use a text preprocessor to convert each line into a dictionary of inputs and targets. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924976426181745,
        0.8924976426181745
      ],
      "excerpt": "  --gin_param=\"utils.tpu_mesh_shape.model_parallelism = 1\" \\ \n  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9743904774208516
      ],
      "excerpt": "python -c \"import t5; print(t5.data.MixtureRegistry.names())\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924976426181745,
        0.8924976426181745
      ],
      "excerpt": "  --gin_param=\"utils.tpu_mesh_shape.model_parallelism = 1\" \\ \n  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9215818214871311,
        0.8248766312215771
      ],
      "excerpt": "--gin_param=\"utils.run.train_dataset_fn = @t5.models.mesh_transformer.tsv_dataset_fn\" \n--gin_param=\"tsv_dataset_fn.filename = 'gs:/path/to/tsv'\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428
      ],
      "excerpt": "--gin_param=\"run.train_steps = 1010000\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8045378192983498,
        0.8924976426181745
      ],
      "excerpt": "  --gin_param=\"run.dataset_split = 'validation'\" \\ \n  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924976426181745
      ],
      "excerpt": "  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\"\\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.889846392544687
      ],
      "excerpt": "To run this experiment, first pre-train a model with the pre-training operative config: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924976426181745,
        0.8924976426181745
      ],
      "excerpt": "  --gin_param=\"utils.tpu_mesh_shape.model_parallelism = 1\" \\ \n  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924976426181745,
        0.8924976426181745
      ],
      "excerpt": "  --gin_param=\"utils.tpu_mesh_shape.model_parallelism = 1\" \\ \n  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\" \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/thecodemasterk/Text-to-Text-transfer-transformers/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "T5: Text-To-Text Transfer Transformer",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Text-to-Text-transfer-transformers",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "thecodemasterk",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/thecodemasterk/Text-to-Text-transfer-transformers/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 22 Dec 2021 08:26:51 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The easiest way to try out T5 is with a free TPU in our [Colab Tutorial](https://tiny.cc/t5-colab).\n\nBelow we provide examples for how to pre-train, fine-tune, evaluate, and decode from a model from the command-line with our codebase. You can use these instructions to reproduce our results, fine-tune one of our released checkpoints with your own data and/or hyperparameters, or pre-train a model from scratch.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "If you would like to use GPU instead of TPUs, you can modify the above commands by removing TPU-specific flags (`--tpu`, `--tpu_zone`, `--gcp_project`) and setting the gin params for `mesh_shape` and `mesh_devices` based on your desired setup.\n\nFor example, if your machine has access to 6 GPUs and you'd like to do 3-way model parallelism and 2-way data parallelism, the fine-tuning command above would become:\n\n```sh\nt5_mesh_transformer  \\\n  --model_dir=\"${MODEL_DIR}\" \\\n  --t5_tfds_data_dir=\"${DATA_DIR}\" \\\n  --gin_file=\"dataset.gin\" \\\n  --gin_param=\"utils.run.mesh_shape = 'model:3,batch:2'\" \\\n  --gin_param=\"utils.run.mesh_devices = ['gpu:0','gpu:1','gpu:2','gpu:3','gpu:4','gpu:5']\" \\\n  --gin_param=\"MIXTURE_NAME = 'glue_mrpc_v002'\" \\\n  --gin_file=\"gs://t5-data/pretrained_models/small/operative_config.gin\"\n```\n\nWith a single GPU, the command is:\n\n```sh\nt5_mesh_transformer  \\\n  --model_dir=\"${MODEL_DIR}\" \\\n  --t5_tfds_data_dir=\"${DATA_DIR}\" \\\n  --gin_file=\"dataset.gin\" \\\n  --gin_param=\"utils.run.mesh_shape = 'model:1,batch:1'\" \\\n  --gin_param=\"utils.run.mesh_devices = ['gpu:0']\" \\\n  --gin_param=\"MIXTURE_NAME = 'glue_mrpc_v002'\" \\\n  --gin_file=\"gs://t5-data/pretrained_models/small/operative_config.gin\"\n```\n\n\n",
      "technique": "Header extraction"
    }
  ]
}