{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1710.02298\n\nretro contest retrospective\nhttps://blog.openai.com/first-retro-contest-retrospective/\n\n\nMETA LEARNING SHARED HIERARCHIES\nhttps://arxiv.org/pdf/1710.09767.pdf"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/dsapandora/s_cera",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-07-23T06:46:47Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-03T03:54:17Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9887277258986004,
        0.9488274002993901
      ],
      "excerpt": "The server publish a compressed image topic aka a numpy matrix named: world_observation/image_raw and is subscribed to a topic named: world_observation/cmd_vel that is a Twist message. Sonic is moved with linear.x and linear.y. \nThe angular and the linear.z is open for any change that you want to apply.   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8049011555014224,
        0.9821004106409371
      ],
      "excerpt": "Linear.y move the sonic agent 1 jump, -1 crunch.  \nThe viewer publish  world_observation/cmd_vel  topic mapped from the key events in pygame. and is subscribed to  world_observation/image_raw so it will desplay instantaneously what is happening in the server.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A ROS NODE Integration of the cera cranium cognitive framework using OPENAI retro Sonic Domain",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/dsapandora/s_cera/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Fri, 24 Dec 2021 12:47:42 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/dsapandora/s_cera/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "dsapandora/s_cera",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/dsapandora/s_cera/master/agents/baselines/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Clone the repo in your ros workspace.\n``` git clone https://github.com/dsapandora/s_cera```\n2. The issue with **OPENAI RETRO GYM** and **ROS** is tha OPENAI work only with *python 3.5*  and ROS can hardly work *python 2.7* [StackOverflow](https://stackoverflow.com/questions/49758578/installation-guide-for-ros-kinetic-with-python-3-5-on-ubuntu-16-04) \n3. Inside the s_cera, create a virtual env enviroment used for python 3.5.\n```\nvirtualenv -p python3  env\nsource env/bin/activate\npip3 install gym-retro\npip3 install opencv-python\npip3 install pygame\npip3 install imutils\npip3 install scipy\npip3 install pyyaml\npip3 install catkin_pkg\npip3 install rospkg\nmkdir roms\nchmod +x retro_gym_server.py\nchmod +x viewer.py\n```\n4. This plugin is test with sonic the headhog from sega genesis,but we don't distribute the rom in this repo. But the rom is easy to find in the internet. But If you still have issue to find it, just let me know. The rom must be places in the rom folder. To see wich rom are compatible and more info about retro gym just follow the link [gym retro repository](https://github.com/openai/retro)\n\n5. Import the rom with the following command: ```python3 -m retro.import roms``` It must be executed in the s_cera folder.\n7. In your workspace execute: ```catkin_make``` \n\n",
      "technique": "Header extraction"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/dsapandora/s_cera/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "CMake",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "GNU General Public License v3.0",
      "url": "https://api.github.com/licenses/gpl-3.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'The MIT License\\n\\nCopyright (c) 2017 OpenAI (http://openai.com)\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "OpenAi ROS integration",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "s_cera",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "dsapandora",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/dsapandora/s_cera/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Fri, 24 Dec 2021 12:47:42 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "![Imgur](https://i.imgur.com/GtFcaIG.png)\n\n1. The server will run in python 3 using the python3 env, the reason behind is the following [issues](https://stackoverflow.com/questions/43019951/after-install-ros-kinetic-cannot-import-opencv), so to run the server a export need that change the issue with opencv must run before the server execution.\n\n```\nexport PYTHONPATH=\"<S_CERA_FOLDER_PATH>/env/lib/python3.5/site-packages:$PYTHONPATH\"\nrosrun s_cera retro_gym_server.py\n```\n\n2. To execute the client you must open another console, and run:\n``` rosrun s_cera viewer.py```\n\nThis will open a pygame view that will allow you to control the agent in the enviroment. Using the keyboard. \n\n\n**Because the game is tested with sonic, i didn't intend to map every sega genesis button. But you can do it if you want.***\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "open ai\nhttps://blog.openai.com/retro-contest/\nhttps://contest.openai.com/2018-1/\nhttps://arxiv.org/pdf/1804.03720.pdf\nhttps://github.com/openai/retro\n\n\nretro ppo baselines\nhttps://blog.openai.com/openai-baselines-ppo/\nhttps://github.com/openai/retro-baselines\n\n\nRainbow: Combining Improvements in Deep Reinforcement Learning\nhttps://arxiv.org/abs/1710.02298\n\nretro contest retrospective\nhttps://blog.openai.com/first-retro-contest-retrospective/\n\n\nMETA LEARNING SHARED HIERARCHIES\nhttps://arxiv.org/pdf/1710.09767.pdf)\n\n\nOpenAI retro reports\nhttps://medium.com/@olegmrk/openai-retro-contest-report-b870bfd014e0\n\nPolicy distillation\nhttps://arxiv.org/pdf/1511.06295.pdf\n\n\njerk agent\nhttps://github.com/olegmyrk/retro-rl/blob/master/jerk_agent.py\n\n\ndylan world model\nhttps://dylandjian.github.io/world-models/\nhttps://github.com/dylandjian/retro-contest-sonic\n\n\nJaan altosar\nhttps://jaan.io/what-is-variational-autoencoder-vae-tutorial/\n\nconscale\nhttp://www.conscious-robots.com/consscale/\n\n\nhuman like behaviour\nhttps://www.sciencedirect.com/science/article/pii/S0957417414002759?via%3Dihub\n\n\nSoar cognitive\nhttps://github.com/SoarGroup/Soar\n\ncera\nhttp://www.conscious-robots.com/es/tag/cranium/\n",
      "technique": "Header extraction"
    }
  ]
}