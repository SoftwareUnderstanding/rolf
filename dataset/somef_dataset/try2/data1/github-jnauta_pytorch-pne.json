{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1805.12114"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9568333795376694
      ],
      "excerpt": "* Lakshminarayanan et al., Simple and Scalable Predictive Uncertainty Estimation using Deep Ensembles (2017) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/github-jnauta/pytorch-pne",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-04-11T14:01:02Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-05T00:00:04Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9888845632662352
      ],
      "excerpt": "PyTorch implementations that trains an ensemble of probabilistic neural networks to fit data of toy problems, effectively replicating the results from \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9085672732086608,
        0.8757777433523259,
        0.822893345668409
      ],
      "excerpt": "* Chua et al., Deep Reinforcement Learning in a Handful of Trials using Probabilistic Dynamic Models \nCurrently implements three data sets:  \n* A simple sine wave y = sin(x) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9693910065057209,
        0.9763669761461438,
        0.8378896615458605
      ],
      "excerpt": "Fig 3: Ground truth, ensemble mean and ensemble standard deviation with the same training data. Notice the mean is accurate where there is training data available, but inaccurate outside. However this is reflected by the increase in standard deviation. \nNote that the implementation is rather naive and might not work for different data sets, other architectures, different hyperparameters, etc. \nTo ignore the parallel computation one can simply run the code with python toy.py and increasing the ensemble_size to any desired size. This will execute the program on a single core. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "PyTorch implementation of Probabilistic Network Ensembles on toy problems",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/github-jnauta/pytorch-pne/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Mon, 27 Dec 2021 14:19:35 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/github-jnauta/pytorch-pne/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "github-jnauta/pytorch-pne",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/github-jnauta/pytorch-pne/master/run.sh"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/github-jnauta/pytorch-pne/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Probabilistic Network Ensemble",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pytorch-pne",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "github-jnauta",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/github-jnauta/pytorch-pne/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "In addition to the standard Python 3 libraries, to run the code you will need:\n* PyTorch\n* mpi4py\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Executing the code is done through the `run.sh` bash file which requires the script to execute and has an additional plotting flag. For general use please execute\n```\n    bash run.sh toy.py plot\n```\nwhich trains the network and plots the figures. After training, the output models are stored in the `/data/` directory and can be plotten by simply calling `python plot.py`. Additionally, the plots can be saved with an additional `save` argument, e.g. `python plot.py save` saves the figures in the `/figures/` directory.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 15,
      "date": "Mon, 27 Dec 2021 14:19:35 GMT"
    },
    "technique": "GitHub API"
  }
}