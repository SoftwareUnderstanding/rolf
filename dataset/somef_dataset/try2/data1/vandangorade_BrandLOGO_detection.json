{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "    https://towardsdatascience.com/training-a-tensorflow-faster-r-cnn-object-detection-model-on-your-own-dataset-b3b175708d6d\n\n    https://www.analyticsvidhya.com/blog/2020/04/build-your-own-object-detection-model-using-tensorflow-api/\n\n    https://github.com/tensorflow/models/tree/master/research/object_detection\n\n    https://medium.com/@marklabinski/installing-tensorflow-object-detection-api-on-windows-10-7a4eb83e1e7b\n  \n    Y. Kalantidis, LG. Pueyo, M. Trevisiol, R. van Zwol, Y. Avrithis. Scalable Triangulation-based Logo Recognition. In Proceedings of ACM International Conference on Multimedia Retrieval (ICMR 2011), Trento, Italy, April 2011.\n    https://arxiv.org/abs/1512.02325\n  \n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1512.02325\n  \n## License\nMIT"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8618068946573249
      ],
      "excerpt": "Brand logo detection on custom dataset using Tesorflow object detection API. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vandangorade/BrandLOGO_detection",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-05-29T11:20:38Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-05-29T15:25:23Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Tensorflow object detection is very good, easy and free framework for object detection tasks.\n\nIt contains varous models trained on COCO, Kitty like large dataset and we use these pretrained models on our custom datset.\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8756253197843048
      ],
      "excerpt": "inference graph of the trained model will be saved here \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.804532775751842
      ],
      "excerpt": "These are some detection results by DeepLogo. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9740529229038164,
        0.9384214445072535
      ],
      "excerpt": "About the Project \nBuilt With \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Brand LOGO detection on custom dataset using Tesorflow object detection API",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vandangorade/BrandLOGO_detection/releases",
    "technique": "GitHub API"
  },
  "faq": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Brand logo detection system custom dataset using Tesorflow object detection API.\n\n",
      "technique": "Header extraction"
    }
  ],
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sun, 26 Dec 2021 13:42:45 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/vandangorade/BrandLOGO_detection/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "vandangorade/BrandLOGO_detection",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/vandangorade/BrandLOGO_detection/master/Brandlogodetector.ipynb"
    ],
    "technique": "File Exploration"
  },
  "invocation": [
    {
      "confidence": [
        0.8386688546788972
      ],
      "excerpt": "Annotations for your training images will come here \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8155441506667238
      ],
      "excerpt": "all of your images for training will come here \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8210153982067249
      ],
      "excerpt": "all your images for testing will come here \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8213440818471638
      ],
      "excerpt": "config file for the choosen model \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/vandangorade/BrandLOGO_detection/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 vandangorade\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# BrandLOGO_detection",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "BrandLOGO_detection",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "vandangorade",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/vandangorade/BrandLOGO_detection/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Dependancies \n    ```sh\n    pip install python==3.6\n    pip install virtualenv \n    pip install -r requirements.txt\n    ```\nyou may need to download and install other packages also as you go.\n** Do not install tensorflow 2.0. **\n\n2. Clone the tensorflow/models repository and download the pre-trained model from model zoo.\n     ```sh\n     git clone https://github.com/tensorflow/models.git\n     cd models/research\n     python setup.py install\n     export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim\n     protoc object_detection/protos/*.proto --python_out=.\n     ```\nwindows users need to build protobuf from source and also need to download VScode with c++ support.\n\n3. clone this repo or create structure like this in your local enviournment.\n\n4. Download dataset or create custom dataset\n    Download the flickr logos 27 dataset from [here](http://image.ntua.gr/iva/datasets/flickr_logos/) and unzip it and move to\n    Dataset folder\n    Or\n    For custom dataset capture images, Once you have captured images, transfer it to your PC and resize it to a smaller size \n    so that your training will go smoothly without running out of memory. Now rename and divide your captured images into two \n    chunks, one chunk for training(80%) and other for testing(20%). Finally, move training images into train_data folder and\n    testing images into test_data folder\n  \n5. Label the data\n    for labelling your custom data you need to download [LableImg](https://github.com/tzutalin/labelImg) tool.\n    Label the data and save it in Annotations folder.\n  \n6. Preprocess the annotation files\n    flickr training Annotations file contains some invalid annotations.\n   ```sh\n     cd BrandLOGO_detection \n     python preprocessor.py\n     ```\n   \n7. Generate tfrecord files.\n\n     The Tensorflow Object Detection API expects data to be in the TFRecord format. Run the following command to convert from       \n     preprocessed files into TFRecords.\n\n     In case you made custom dataset:\n     ```sh\n     python object_detection/dataset_tools/create_pascal_tf_record.py --data_dir=<path_to_your_dataset_directory> --annotations_dir=<name_of_annotations_directory> --output_path=<path_where_you_want_record_file_to_be_saved> --label_map_path=<path_of_label_map_file>\n     ```\n\n     for fickr dataset:\n     ```\n      python tfrecord_generator.py --train_or_test train --csv_input Dataset/flickr_logos_27_dataset/flickr_logos_27_dataset_training_set_annotation_cropped.txt --img_dir Dataset/flickr_logos_27_dataset/flickr_logos_27_dataset_images --output_path Dataset/train.tfrecord\n\n      python gen_tfrecord.py --train_or_test test --csv_input Dataset/flickr_logos_27_dataset/flickr_logos_27_dataset_test_set_annotation_cropped.txt --img_dir Dataset/flickr_logos_27_dataset/flickr_logos_27_dataset_images --output_path Dataset/test.tfrecord ```\n    \n\n8. **Training** \n    1. Download the pretrained model you want from [Tensorflow detection model zoo Github page](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md)\n\n    2.Extract it.\n\n    3.keep it in pretrained model folder. now,\n\n    ```sh \n    cd models/research/object_detection/sample/config/\n    ```\n\n    5.copy model to main directory(BrandLOGO_detection).\n\n    6.open that .config file and search \"PATH TO BE CONFIGURED\" and change it with required path. now,\n\n    ```sh \n    cd models/research/ \n\n    python object_detection/legacy/train.py --train_dir=<path_to_the folder_for_saving_checkpoints> --pipeline_config_path=<path_to_config_file> \n    ```\n\n    Example:\n    \n    ```sh python object_detection/legacy/train.py --train_dir=<full dir>/BrandLOGO_detection/checkpoint --pipeline_config_path=/BrandLOGO_detection/faster_rcnn_resnet101_coco.config\n    ```\n  interrurpt training when loss is below 0.1.Checkpoints will be saved in Checkpoint folder\n\n9. generate inference graph from saved checkpoints\n\n    ```sh\n    python object_detection/export_inference_graph.py --input_type=image_tensor --pipeline_config_path=<path_to_config_file> --trained_checkpoint_prefix=<path to saved checkpoint> --output_directory=<path_to_the_folder_for_saving_inference_graph>\n    ```\nit will be saved in inf_graph folder.\n\n10. **Testing**\n\n    ```sh \n    cd models/research/object_detection/object_detection_tutorial.ipynb\n    ```\n\n    2. make nessesary changes which results in BrandLOGOdetector.ipynb as given.\n\n    3. you just need to change paths and class number in BrandLOGOdetector.ipynb and run it!\n\n    4. you can see evalation result on ** Tensorboard **\n  \n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Sun, 26 Dec 2021 13:42:45 GMT"
    },
    "technique": "GitHub API"
  }
}