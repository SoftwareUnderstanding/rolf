{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1708.02002",
      "https://arxiv.org/abs/1612.03144.\n- [x] [Focal Loss](https://arxiv.org/abs/1708.02002",
      "https://arxiv.org/abs/1708.02002",
      "https://arxiv.org/abs/1708.02002\nhttps://github.com/facebookresearch/detectron2\nhttps://github.com/pytorch/vision\nhttps://github.com/fastai/course-v3/blob/master/nbs/dl2/pascal.ipynb\nhttps://github.com/tensorflow/models/tree/master/research/object_detection\nhttps://github.com/PyTorchLightning/wheat/tree/dee605b0bf5cf6b0ab08755c45e38dc07d338bb7\n```"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\nhttps://arxiv.org/abs/1708.02002\nhttps://github.com/facebookresearch/detectron2\nhttps://github.com/pytorch/vision\nhttps://github.com/fastai/course-v3/blob/master/nbs/dl2/pascal.ipynb\nhttps://github.com/tensorflow/models/tree/master/research/object_detection\nhttps://github.com/PyTorchLightning/wheat/tree/dee605b0bf5cf6b0ab08755c45e38dc07d338bb7\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8829021559993814
      ],
      "excerpt": "   #: image = Image.open(image_path) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/benihime91/pytorch_retinanet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-08-17T04:18:19Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-04T09:25:02Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.957680914715759,
        0.9674374439128741
      ],
      "excerpt": "A PyTorch implementation of Retinanet for object detection as described in the paper Focal Loss for Dense Object Detection. \nThe code is heavily influended by Detectron2 , torchvision implementation of RCNN models and the FastAI implementation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9317825866136815
      ],
      "excerpt": "[x] Create ResNet based BackBone Model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8535658678035102,
        0.9224176697858351,
        0.9594483548507817
      ],
      "excerpt": "[x] Focal Loss & Regeression and Classification Head for Retinanet. \n[x] Assemble Retinanet Using BackBone => FeaturePyramid => AnchorGenerator => Regeression & Classification. \nThe data can be loaded into the model in one of 3 ways.   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8778820264358741
      ],
      "excerpt": "to generate a LABEL_MAP to be used for visulazation purposes: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A PyTorch implementation of RetinaNet with `ResNet` backbone",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/benihime91/pytorch_retinanet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Sun, 26 Dec 2021 12:11:37 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/benihime91/pytorch_retinanet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "benihime91/pytorch_retinanet",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/benihime91/pytorch_retinanet/master/demo.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "  Ensure that [python>=3.6](https://www.python.org/) , [torch>=1.6.0](https://pytorch.org/), torchvision>=0.7.0 is installed .\n   ```bash\n   $ git clone https://github.com/benihime91/pytorch_retinanet.git\n   $ cd pytorch_retinanet\n   $ pip install -r requirements.txt\n   ```\n   Note: for `pytorch-lightning` versions >= 1.0.0 t training will fail .\n   \n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8378616132071695
      ],
      "excerpt": "set dataset.root_dir = {path to the coco dataset} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8244453191770256
      ],
      "excerpt": "   Note:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8057675898656085
      ],
      "excerpt": "df = pd.read_csv(path) \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8256771747491445,
        0.8357247902140905
      ],
      "excerpt": "The datasets can also be loaded from a csv format. The csv file should be as follows : \n   filename,width,height,class,xmin,ymin,xmax,ymax,labels \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8526266663994561
      ],
      "excerpt": "   Images/007826.jpg,500,375,chair,197,193,257,326,9 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.927448327020275
      ],
      "excerpt": "    from utils.pascal import generate_pascal_category_names \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8246051771316243
      ],
      "excerpt": "path = ... #: path to csv file contraining the annotations \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9401176992946465,
        0.8044146895679722,
        0.9133368656218674,
        0.9457175861910134
      ],
      "excerpt": "   from utils import visualize_boxes_and_labels_on_image_array as vis_bbs \n   from PIL import Image \n   import cv2 \n   import numpy as np \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8124597522735804
      ],
      "excerpt": "   #: image = np.array(image) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/benihime91/pytorch_retinanet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Ayushman Buragohain\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "pytorch_retinanet",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pytorch_retinanet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "benihime91",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/benihime91/pytorch_retinanet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "  Ensure that [python>=3.6](https://www.python.org/) , [torch>=1.6.0](https://pytorch.org/), torchvision>=0.7.0 is installed .\n   ```bash\n   $ git clone https://github.com/benihime91/pytorch_retinanet.git\n   $ cd pytorch_retinanet\n   $ pip install -r requirements.txt\n   ```\n   Note: for `pytorch-lightning` versions >= 1.0.0 t training will fail .\n   \n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 8,
      "date": "Sun, 26 Dec 2021 12:11:37 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "pytorch",
      "torchvision",
      "pytorch-lightning",
      "retinanet",
      "computer-vision",
      "deeplearning",
      "object-detection",
      "python3"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- <a href=\"https://colab.research.google.com/github/benihime91/pytorch_retinanet/blob/master/demo.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>  [demo.ipynb](https://github.com/benihime91/pytorch_retinanet/blob/master/demo.ipynb)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "   Clone the Github Repo\n   ```bash\n   $ git clone https://github.com/benihime91/pytorch_retinanet.git\n   ```\n\n   For easy training pipeline, we recommend using **`pytorch-lightning`** for **training** and **testing**.  \n   \n   \n   First of all open the **`hparams.yaml`** file and modify it according to need. Instructions to \n   modeify the same are present inside the file.  \n   \n   \n   Create a python script inside the `retinanet repo`. Name it whatever you want and then insert the \n   following lines:\n   ```python\n    from omegaconf import OmegaConf, DictConfig\n    import pytorch_lightning as pl\n    from pytorch_lightning import Trainer\n\n    from model import RetinaNetModel\n    \n    #: load in the hparams yaml file\n    hparams = OmegaConf.load(\"hparams.yaml\")\n\n    #: instantiate lightning module\n    model = RetinaNetModel(hparams)\n    \n    #: Instantiate Trainer\n    trainer = Trainer()\n    #: start train\n    trainer.fit(model)\n    #: to test model using COCO API\n    trainer.test(model)\n   ```\n\n",
      "technique": "Header extraction"
    }
  ]
}