{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- [Exploring Randomly Wired Neural Networks for Image Recognition](https://arxiv.org/pdf/1904.01569.pdf)\n  - Author: Saining Xie Alexander Kirillov Ross Girshick Kaiming He(Facebook AI Research, FAIR)\n  - The paper is really awesome.\n- [Random Graph Generator Module(networkx)](https://networkx.github.io/documentation/networkx-1.10/reference/generators.html)\n- [Visualize Network in Pytorch](https://github.com/szagoruyko/pytorchviz)\n- [Must have Module, cairosvg](https://cairosvg.org/)\n- [Separable Convolution Code](https://github.com/tstandley/Xception-PyTorch/blob/master/xception.py)\n- [CIFAR benchmark](https://github.com/kuangliu/pytorch-cifar)\n- [CIFAR datasets](https://www.cs.toronto.edu/~kriz/cifar.html)\n- [IMAGENET datasets](http://www.image-net.org/)\n- Really thank you :)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9462256160072358
      ],
      "excerpt": "Implement Exploring Randomly Wired Neural Networks for Image Recognition :) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8550101043698384,
        0.8550101043698384
      ],
      "excerpt": "CIFAR-10 | RandWireNN(4, 0.75), c=78 | 93.61% | 77 | 3h 50m | 4.75M \nCIFAR-10 | RandWireNN(4, 0.75), c=109 | 94.03% | 62 | 3h 50m | 8.93M \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "graphviz 0.10.1 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/leaderj1001/RandWireNN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-04-10T06:15:30Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-19T14:45:42Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.876324516328535
      ],
      "excerpt": "| Datasets | Model | Accuracy | Epoch | Training Time | Model Parameters | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.854094547911672
      ],
      "excerpt": "I have added a part to report learning time and accuracy. Reporting of the above results can be seen in the reporting folder. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9340786439303217,
        0.85626976407096
      ],
      "excerpt": "To implement Optimzier like the paper. \n- As each Epoch passes, we can see that the feature map is formed around the object. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9847019165607789
      ],
      "excerpt": "- The model file currently in the checkpoint folder is a model with an accuracy of 92.70%. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8609108245760055,
        0.8476012425144419
      ],
      "excerpt": "- --k (int) - each node is connected to k nearest neighbors in ring topology, (default: 4). \n- --m (int) - number of edges to attach from a new node to existing nodes, (default: 5). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8119320281820458
      ],
      "excerpt": "- --node-num (int) - number of graph node (default n=32). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8869914811911642
      ],
      "excerpt": "Erdos-Renyi (ER) Graph, Watts-Strogatz (WS) Graph and Barabasi-Albert (BA) Graph are all available. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8990449035887222
      ],
      "excerpt": "I have presented two graph visualizations. The ONNX module seems to be visualized more intuitively. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8447758029949791,
        0.9686434312770351
      ],
      "excerpt": "It is a picture of the sample small network in the visualize_graph directory. \nWhen I draw the contents of \"Exploring Randomly Wired Neural Networks for Image Recognition\" on the network, too many nodes are created. So I tried to draw a small network for visualization. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Implementing Randomly Wired Neural Networks for Image Recognition, Using CIFAR-10 dataset, CIFAR-100 dataset",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/leaderj1001/RandWireNN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 15,
      "date": "Sun, 26 Dec 2021 07:35:02 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/leaderj1001/RandWireNN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "leaderj1001/RandWireNN",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/leaderj1001/RandWireNN/master/visualize_graph/ONNX_module/RandWiredNetworkGraphVizualize_ONNX.ipynb",
      "https://raw.githubusercontent.com/leaderj1001/RandWireNN/master/visualize_graph/graphviz_module/RandWiredNetworkGraphVizualize_graphviz.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9313399344354308
      ],
      "excerpt": "If you want to visualize the network connection, you can follow the jupyter notebook in visualize_graph directory. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8837680365796365,
        0.8411004553040458
      ],
      "excerpt": "Python 3.7 \nCuda 9.2 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9322609392449874
      ],
      "excerpt": "pytorch 1.0.1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9659853828578493
      ],
      "excerpt": "conda install cairo(If you want to visualize the network, it is a required module.) \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8066842396672533
      ],
      "excerpt": "| Datasets | Model | Accuracy | Epoch | Training Time | Model Parameters | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8275268114133674
      ],
      "excerpt": "CIFAR-10 | RandWireNN(4, 0.75), c=154 | 94.23% | 94 | 8h 40m | 17.31M \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9515752551715031,
        0.8995814371402017,
        0.8285073497495613
      ],
      "excerpt": "python test.py \n- Put the saved model file in the checkpoint folder and saved graph file in the saved_graph folder and type \"python test.py\". \n- If you want to change hyper-parameters, you can check \"python test.py --help\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.841319427000385,
        0.8411011778112992,
        0.9088670956206164
      ],
      "excerpt": "- --batch-size (int) - batch size, (default: 100). \n- --dataset-mode (str) - which dataset you use, (example: CIFAR10, CIFAR100, MNIST), (default: CIFAR10). \n- --is-train (bool) - True if training, False if test. (default: False). \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/leaderj1001/RandWireNN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Myeongjun Kim\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Randomly Wired Neural Network",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "RandWireNN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "leaderj1001",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/leaderj1001/RandWireNN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\npython main.py\n```\n- If you want to change hyper-parameters, you can check \"python main.py --help\"\n\nOptions:\n- `--epochs` (int) - number of epochs, (default: 100).\n- `--p` (float) - graph probability, (default: 0.75).\n- `--c` (int) - channel count for each node, (example: 78, 109, 154), (default: 78).\n- `--k` (int) - each node is connected to k nearest neighbors in ring topology, (default: 4).\n- `--m` (int) - number of edges to attach from a new node to existing nodes, (default: 5).\n- `--graph-mode` (str) - kinds of random graph, (exampple: ER, WS, BA), (default: WS).\n- `--node-num` (int) - number of graph node (default n=32).\n- `--learning-rate` (float) - learning rate, (default: 1e-1).\n- `--model-mode` (str) - which network you use, (example: CIFAR10, CIFAR100, SMALL_REGIME, REGULAR_REGIME), (default: CIFAR10).\n- `--batch-size` (int) - batch size, (default: 100).\n- `--dataset-mode` (str) - which dataset you use, (example: CIFAR10, CIFAR100, MNIST), (default: CIFAR10).\n- `--is-train` (bool) - True if training, False if test. (default: True).\n- `--load-model` (bool) - (default: False).\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 85,
      "date": "Sun, 26 Dec 2021 07:35:02 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "deep-neural-networks",
      "cifar-10",
      "cifar-100",
      "randomly-wired-neural-networks",
      "randwirenn"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "![image](https://user-images.githubusercontent.com/22078438/55872389-d1eb7780-5bc7-11e9-95a6-7e053cefd1be.png)\n",
      "technique": "Header extraction"
    }
  ]
}