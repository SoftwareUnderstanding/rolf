{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1605.06211\n\n#### Success Target\nThe measure of success was how well the road surface could be identified from the input dashboard camera images. As shown below, successful segmentation entails the proper overlay of green on the road surface, while leaving the rest of the driving environment unchanged.\n\nTarget Segmentation          |  Poor Segmentation\n:-------------------------:|:-------------------------:\n![Sufficient](./examples/sufficient_result.png"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/DrBoltzmann/CarND-Semantic-Segmentation",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-07-18T12:05:59Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-08-21T15:00:13Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "In this project, you'll label the pixels of a road in images using a Fully Convolutional Network (FCN).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "The outline of the code implementation is shown below. The VGG16 model was downloaded, and the architecture was modified in the last layers. The final model was run with 50 Epochs and a batch size of 4.\n\n![alt text][image1]\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "This project is focused on the segmentation of images from a color camera for perception of the driving environment for autonomous vehicle design. The VGG16 model was used with further training on the [Kitti Road](http://www.cvlibs.net/datasets/kitti/eval_road.php) dataset in order to optimize the segmentation using a convolutional neural network. The approach is based on the following research work:\n\nFully Convolutional Networks for Semantic Segmentation\nhttps://arxiv.org/abs/1605.06211\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9265545244060337
      ],
      "excerpt": "The measure of success was how well the road surface could be identified from the input dashboard camera images. As shown below, successful segmentation entails the proper overlay of green on the road surface, while leaving the rest of the driving environment unchanged. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9137484588875849,
        0.912410232427097
      ],
      "excerpt": "The function train_nn is implemented correctly. The loss of the network should be printed while the network is training. \nOn average, the model decreases loss over time. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.946485969587433,
        0.9442762736681971,
        0.9278763164192203
      ],
      "excerpt": "The project labels most pixels of roads close to the best solution. The model doesn't have to predict correctly all the images, just most of them. \nA solution that is close to best would label at least 80% of the road and label no more than 20% of non-road pixels as road. \nAfter the CNN pipeline was implemented correctly, the number of epochs was investigated to see the effect on segmentation quality. As seen below 10 epochs produced an insufficient result, with jagged segmentation boundaries. This improved at 40 epochs, but 50 epochs was required for smooth boundaries to be developed to properly segment the road section. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9160047853197315
      ],
      "excerpt": "During training the Loss was printed. Below is a plot of the epoch and loss values, showing that the loss decreased even after 40 epochs, which supports the above findings that 50 epochs was required to attain proper segmentation results. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9424409556161649
      ],
      "excerpt": "Image augmentation was investigated in the Traffic Sign Classifier Project \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8219879722347835
      ],
      "excerpt": "Ensure you pass all points on the rubric. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9714168353373813,
        0.9889150572381015,
        0.9544826005676674,
        0.9035426678660855,
        0.8958244331905663,
        0.9242729720536519
      ],
      "excerpt": "The link for the frozen VGG16 model is hardcoded into helper.py.  The model can be found here. \nThe model is not vanilla VGG16, but a fully convolutional version, which already contains the 1x1 convolutions to replace the fully connected layers. Please see this post for more information.  A summary of additional points, follow. \nThe original FCN-8s was trained in stages. The authors later uploaded a version that was trained all at once to their GitHub repo.  The version in the GitHub repo has one important difference: The outputs of pooling layers 3 and 4 are scaled before they are fed into the 1x1 convolutions.  As a result, some students have found that the model learns much better with the scaling layers included. The model may not converge substantially faster, but may reach a higher IoU and accuracy. \nWhen adding l2-regularization, setting a regularizer in the arguments of the tf.layers is not enough. Regularization loss terms must be manually added to your loss function. otherwise regularization is not implemented. \nIn main.py, you'll notice that layers 3, 4 and 7 of VGG16 are utilized in creating skip layers for a fully convolutional network. The reasons for this are contained in the paper Fully Convolutional Networks for Semantic Segmentation. \nIn section 4.3, and further under header \"Skip Architectures for Segmentation\" and Figure 3, they note these provided for 8x, 16x and 32x upsampling, respectively. Using each of these in their FCN-8s was the most effective architecture they found. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8785883537698231
      ],
      "excerpt": "Train and perform inference on the Cityscapes Dataset. Note that the project_tests.py is not currently set up to also unit test for this alternate dataset, and helper.py will also need alterations, along with changing num_classes and input_shape in main.py. Cityscapes is a much more extensive dataset, with segmentation of 30 different classes (compared to road vs. not road on KITTI) on either 5,000 finely annotated images or 20,000 coarsely annotated images. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9326649466267191,
        0.8436220079956447,
        0.9568821597256538
      ],
      "excerpt": "Apply the trained model to a video. This project only involves performing inference on a set of test images, but you can also try to utilize it on a full video. \nIf you are unfamiliar with GitHub , Udacity has a brief GitHub tutorial to get you started. Udacity also provides a more detailed free course on git and GitHub. \nTo learn about REAMDE files and Markdown, Udacity provides a free course on READMEs, as well. \n",
      "technique": "Supervised classification"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://pillow.readthedocs.io/",
      "technique": "Regular expression"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/DrBoltzmann/CarND-Semantic-Segmentation/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 14:52:34 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/DrBoltzmann/CarND-Semantic-Segmentation/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "DrBoltzmann/CarND-Semantic-Segmentation",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/DrBoltzmann/CarND-Semantic-Segmentation/master/set_git.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9769469944203201,
        0.9488380094485268,
        0.8837680365796365
      ],
      "excerpt": "main.py will check to make sure you are using GPU - if you don't have a GPU on your system, you can use AWS or another cloud computing platform. \nMake sure you have the following is installed: \n - Python 3 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8233588558014837,
        0.8841036387318887
      ],
      "excerpt": " - NumPy \n - SciPy \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9288501620764702
      ],
      "excerpt": "The comments indicated with \"OPTIONAL\" tag are not required to complete. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8811980283777079
      ],
      "excerpt": "If you are unfamiliar with GitHub , Udacity has a brief GitHub tutorial to get you started. Udacity also provides a more detailed free course on git and GitHub. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8359299706379749
      ],
      "excerpt": "![alt text][image2] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9294400219931852
      ],
      "excerpt": "Download the Kitti Road dataset from here.  Extract the dataset in the data folder.  This will create the folder data_road with all the training a test images. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/DrBoltzmann/CarND-Semantic-Segmentation/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2017-2018 Udacity, Inc.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "## Summary",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "CarND-Semantic-Segmentation",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "DrBoltzmann",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/DrBoltzmann/CarND-Semantic-Segmentation/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "https://review.udacity.com/#!/rubrics/989/view\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Run the following command to run the project:\n```\npython main.py\n```\n**Note:** If running this in Jupyter Notebook system messages, such as those regarding test status, may appear in the terminal rather than the notebook.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 14:52:34 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Here are examples of a sufficient vs. insufficient output from a trained network:\n\nSufficient Result          |  Insufficient Result\n:-------------------------:|:-------------------------:\n![Sufficient](./examples/sufficient_result.png)  |  ![Insufficient](./examples/insufficient_result.png)\n\n",
      "technique": "Header extraction"
    }
  ]
}