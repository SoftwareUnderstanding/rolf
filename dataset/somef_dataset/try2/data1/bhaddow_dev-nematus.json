{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1707.07631\n     - dropout on all layers (Gal, 2015",
      "https://arxiv.org/abs/1608.05859\n     - layer normalisation (Ba et al, 2016",
      "https://arxiv.org/abs/1607.06450\n\n - improvements to scoring and decoding:\n     - n-best output for decoder\n     - scripts for scoring (given parallel corpus"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@InProceedings{sennrich-EtAl:2017:EACLDemo,\n  author    = {Sennrich, Rico  and  Firat, Orhan  and  Cho, Kyunghyun  and  Birch, Alexandra  and  Haddow, Barry  and  Hitschler, Julian  and  Junczys-Dowmunt, Marcin  and  L\\\"{a}ubli, Samuel  and  Miceli Barone, Antonio Valerio  and  Mokry, Jozef  and  Nadejde, Maria},\n  title     = {Nematus: a Toolkit for Neural Machine Translation},\n  booktitle = {Proceedings of the Software Demonstrations of the 15th Conference of the European Chapter of the Association for Computational Linguistics},\n  month     = {April},\n  year      = {2017},\n  address   = {Valencia, Spain},\n  publisher = {Association for Computational Linguistics},\n  pages     = {65--68},\n  url       = {http://aclweb.org/anthology/E17-3017}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8550101043698384
      ],
      "excerpt": "| --patience INT        | early stopping patience (default: 10) | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9993875687433214,
        0.9994470217270375
      ],
      "excerpt": "if you use Nematus, please cite the following paper: \nRico Sennrich, Orhan Firat, Kyunghyun Cho, Alexandra Birch, Barry Haddow, Julian Hitschler, Marcin Junczys-Dowmunt, Samuel L\u00e4ubli, Antonio Valerio Miceli Barone, Jozef Mokry and Maria Nadejde (2017): Nematus: a Toolkit for Neural Machine Translation. In Proceedings of the Software Demonstrations of the 15th Conference of the European Chapter of the Association for Computational Linguistics, Valencia, Spain, pp. 65-68. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9992416025985289
      ],
      "excerpt": "Dzmitry Bahdanau, Kyunghyun Cho, Yoshua Bengio (2015): Neural Machine Translation by Jointly Learning to Align and Translate, Proceedings of the International Conference on Learning Representations (ICLR). \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/bhaddow/dev-nematus",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-10-02T15:05:36Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-10-02T15:06:47Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8838297634740128
      ],
      "excerpt": "| --tie_decoder_embeddings | tie the input embeddings of the decoder with the softmax output embeddings | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9228610584288126
      ],
      "excerpt": "| --prior_model STR    | Prior model for MAP-L2 regularization. Unless using \"--reload\", this will also be used for initialization. | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9159701410234803
      ],
      "excerpt": "| --no_shuffle         |  disable shuffling of training data (for each epoch) | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9278701362913904
      ],
      "excerpt": "| --maxibatch_size INT |  size of maxibatch (number of minibatches that are sorted by length) (default: 20) | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9008999366055155,
        0.8653287554650174
      ],
      "excerpt": "| --beam_size INT      | size of the beam (default: 12) | \nIf you have a Theano model (model.npz) with network architecture features that are currently \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9738563714852548,
        0.9835788685846333,
        0.9033605606244167,
        0.966036011134468
      ],
      "excerpt": "Rico Sennrich, Orhan Firat, Kyunghyun Cho, Alexandra Birch, Barry Haddow, Julian Hitschler, Marcin Junczys-Dowmunt, Samuel L\u00e4ubli, Antonio Valerio Miceli Barone, Jozef Mokry and Maria Nadejde (2017): Nematus: a Toolkit for Neural Machine Translation. In Proceedings of the Software Demonstrations of the 15th Conference of the European Chapter of the Association for Computational Linguistics, Valencia, Spain, pp. 65-68. \nthe code is based on the following model: \nDzmitry Bahdanau, Kyunghyun Cho, Yoshua Bengio (2015): Neural Machine Translation by Jointly Learning to Align and Translate, Proceedings of the International Conference on Learning Representations (ICLR). \nplease refer to the Nematus paper for a description of implementation differences \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/bhaddow/dev-nematus/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 22 Dec 2021 03:08:39 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/bhaddow/dev-nematus/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "bhaddow/dev-nematus",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/bhaddow/dev-nematus/master/test/test_train_l2_loss.sh",
      "https://raw.githubusercontent.com/bhaddow/dev-nematus/master/test/test_train_outputactivations.sh",
      "https://raw.githubusercontent.com/bhaddow/dev-nematus/master/test/test_train_mapl2_loss.sh",
      "https://raw.githubusercontent.com/bhaddow/dev-nematus/master/test/test_train_summaries.sh",
      "https://raw.githubusercontent.com/bhaddow/dev-nematus/master/test/test_train.sh",
      "https://raw.githubusercontent.com/bhaddow/dev-nematus/master/test/test_train_reload.sh",
      "https://raw.githubusercontent.com/bhaddow/dev-nematus/master/data/postprocess.sh",
      "https://raw.githubusercontent.com/bhaddow/dev-nematus/master/data/merge.sh",
      "https://raw.githubusercontent.com/bhaddow/dev-nematus/master/data/preprocess.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "| parameter            | description |\n|---                   |--- |\n| --source_dataset PATH |  parallel training corpus (source side) |\n| --target_dataset PATH |  parallel training corpus (target side) |\n| --dictionaries PATH [PATH ...] | network vocabularies (one per source factor, plus target vocabulary) |\n| --model PATH         |  model file name (default: model.npz) |\n| --saveFreq INT       |  save frequency (default: 30000) |\n| --reload             |  load existing model (if '--model' points to existing model) |\n| --no_reload_training_progress | don't reload training progress (only used if --reload is enabled) |\n| --summary_dir        |  directory for saving summaries (default: same directory as the --saveto file) |\n| --summaryFreq        |  Save summaries after INT updates, if 0 do not save summaries (default: 0) |\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8377516816896062
      ],
      "excerpt": "| --valid_source_dataset PATH | parallel validation corpus (source side)| (default: None) | \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8230019213958345,
        0.8431444997546245
      ],
      "excerpt": "| --state_size INT         |  hidden layer size (default: 1000) | \n| --source_vocab_sizes INT |  source vocabulary sizes (one per input factor) (default: None) | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8610064261332286
      ],
      "excerpt": "| --dim_per_factor INT [INT ...] | list of word vector dimensionalities (one per factor): '--dim_per_factor 250 200 50' for total dimensionality of 500 (default: None) | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8454855050993229
      ],
      "excerpt": "| --batch_size INT     | minibatch size (default: 80) | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8253679049493864
      ],
      "excerpt": "| --no_shuffle         |  disable shuffling of training data (for each epoch) | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8431515624772767
      ],
      "excerpt": "| --valid_batch_size INT | validation minibatch size (default: 80) | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8100142192393219
      ],
      "excerpt": "supported then you can convert it into a tensorflow model using nematus/theano_tf_convert.py. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/bhaddow/dev-nematus/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Perl",
      "Emacs Lisp",
      "JavaScript",
      "PHP",
      "Shell",
      "Smalltalk",
      "Ruby",
      "NewLisp",
      "Slash",
      "SystemVerilog"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "BSD 3-Clause \"New\" or \"Revised\" License",
      "url": "https://api.github.com/licenses/bsd-3-clause"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Copyright (c) 2015, Kyunghyun Cho\\nAll rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met:\\n\\n Redistributions of source code must retain the above copyright notice, this\\n  list of conditions and the following disclaimer.\\n\\n Redistributions in binary form must reproduce the above copyright notice,\\n  this list of conditions and the following disclaimer in the documentation\\n  and/or other materials provided with the distribution.\\n\\n* Neither the name of Nematus nor the names of its\\n  contributors may be used to endorse or promote products derived from\\n  this software without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "### `nematus/nmt.py` : use to train a new model",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "dev-nematus",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "bhaddow",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/bhaddow/dev-nematus/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 22 Dec 2021 03:08:39 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "| parameter            | description |\n|---                   |--- |\n| -k K                 | Beam size (default: 5)) |\n| -p P                 | Number of processes (default: 5)) |\n| -n                   | Normalize scores by sentence length |\n| -v                   | verbose mode. |\n| --models MODELS [MODELS ...], -m MODELS [MODELS ...] | model to use. Provide multiple models (with same vocabulary) for ensemble decoding |\n| --input PATH, -i PATH | Input file (default: standard input) |\n| --output PATH, -o PATH | Output file (default: standard output) |\n| --n-best             | Write n-best list (of size k) |\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "| parameter              | description |\n|---                     |--- |\n| -b B                   |   Minibatch size (default: 80)) |\n| -n                     |   Normalize scores by sentence length |\n| -v                     |   verbose mode. |\n| --models MODELS [MODELS ...], -m MODELS [MODELS ...] | model to use. Provide multiple models (with same vocabulary) for ensemble decoding |\n| --source PATH, -s PATH | Source text file |\n| --target PATH, -t PATH | Target text file |\n| --output PATH, -o PATH | Output file (default: standard output) |\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "The n-best list is assumed to have the same format as Moses:\n\n    sentence-ID (starting from 0) ||| translation ||| scores\n\nnew scores will be appended to the end. `rescore.py` has the same arguments as `score.py`, with the exception of this additional parameter:\n\n| parameter             | description |\n|---                    |--- |\n| --input PATH, -i PATH | Input n-best list file (default: standard input) |\n\n\n",
      "technique": "Header extraction"
    }
  ]
}