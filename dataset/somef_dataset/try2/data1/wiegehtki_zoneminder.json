{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2004.10934\n* Infos zum Darknet framework: http://pjreddie.com/darknet/\n* Infos zu OpenCV findet Ihr hier: https://opencv.org/\n\n\n#### Videos zu diesem Projekt (und weitere"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9393081277762776
      ],
      "excerpt": "Unter WIEGEHTKI.DE (https://www.youtube.com/channel/UC_OeEKyvDfCVdhYrEKYf1lA) findet Ihr den Video zur Installation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8955886365383559
      ],
      "excerpt": "OpenCV - Anpassung der Grafikkarte. Dieser Schritt ist sehr wichtig da ansonsten die Grafikkarte von OpenCV nicht angesprochen werden kann und keine Objekterkennung durchgef\u00fchrt wird. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8095051336682023
      ],
      "excerpt": "Entscheidend ist der Eintrag -D CUDA_ARCH_BIN=6.1 und -D CUDA_ARCH_PTX=6.1 \\, genau genommen der Wert 6.1 Dieser MUSS an die vorhandene Grafikkarte angepasst werden und repr\u00e4sentiert die sogenannte Compute capability version. Dazu die Site https://en.wikipedia.org/wiki/CUDA \u00f6ffnen und die jeweilige Grafikkarte in der Tabelle suchen. Der ben\u00f6tigte Wert steht ganz links in der Spalte. F\u00fcr die im Test verwendetet GTX 1070 betr\u00e4gt dieser 6.1, bei einer V100 7.0. Bitte diesen Wert auf den f\u00fcr Eure Grafikkarte angegebenen \u00e4ndern! \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/wiegehtki/zoneminder",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Thank you for your interest in this project! Please refer to the following\nsections on how to contribute code and bug reports.\nReporting bugs\nAt the moment, this project is run in the spare time of a single person\n(Wenzel Jakob) with very limited resources\nfor issue tracker tickets. Thus, before submitting a question or bug report,\nplease take a moment of your time and ensure that your issue isn't already\ndiscussed in the project documentation provided at\nhttp://pybind11.readthedocs.org/en/latest.\nAssuming that you have identified a previously unknown problem or an important\nquestion, it's essential that you submit a self-contained and minimal piece of\ncode that reproduces the problem. In other words: no external dependencies,\nisolate the function(s) that cause breakage, submit matched and complete C++\nand Python snippets that can be easily compiled and run on my end.\nPull requests\nContributions are submitted, reviewed, and accepted using Github pull requests.\nPlease refer to this\narticle for details and\nadhere to the following rules to make the process as smooth as possible:\n\nMake a new branch for every feature you're working on.\nMake small and clean pull requests that are easy to review but make sure they\n  do add value by themselves.\nAdd tests for any new functionality and run the test suite (make pytest)\n  to ensure that no existing features break.\nThis project has a strong focus on providing general solutions using a\n  minimal amount of code, thus small pull requests are greatly preferred.\n\nLicensing of contributions\npybind11 is provided under a BSD-style license that can be found in the\nLICENSE file. By using, distributing, or contributing to this project, you\nagree to the terms and conditions of this license.\nYou are under no obligation whatsoever to provide any bug fixes, patches, or\nupgrades to the features, functionality or performance of the source code\n(\"Enhancements\") to anyone; however, if you choose to make your Enhancements\navailable either publicly, or directly to the author of this software, without\nimposing a separate written license agreement for such Enhancements, then you\nhereby grant the following license: a non-exclusive, royalty-free perpetual\nlicense to install, use, modify, prepare derivative works, incorporate into\nother computer software, distribute, and sublicense such enhancements or\nderivative works thereof, in binary and source code form.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-12-25T19:07:57Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-08T03:06:58Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8088569793749713
      ],
      "excerpt": "secrets.ini:  Zun\u00e4chst einloggen, in das /root - Verzeichnis wechseln und die erste Datei mit dem Editor \u00f6ffnen. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8215704942325371,
        0.9394449182630016
      ],
      "excerpt": "Nur bei Bedarf Wenn Ihr ein anderes Framework/Model nutzen wollt,k\u00f6nnt Ihr den dazugeh\u00f6rigen Eintrag anpassen. Dazu einfach ein # vor die Zeile setzen, welche inaktviert werden soll bzw. entfernen, wenn Zeilen aktiviert werden sollen. Die Vorgabe von mir sieht wie folgt aus: \n#: FOR YoloV4.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8372396012058242,
        0.8372396012058242,
        0.8372396012058242,
        0.8372396012058242
      ],
      "excerpt": "        -D OPENCV_ENABLE_NONFREE=ON \\ \n        -D WITH_CUDA=ON \\ \n        -D WITH_CUDNN=ON \\ \n        -D OPENCV_DNN_CUDA=ON \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8372396012058242
      ],
      "excerpt": "        -D HAVE_opencv_python3=ON \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Zoneminder mit YOLO Objekterkennung",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/wiegehtki/zoneminder/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 02:40:51 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/wiegehtki/zoneminder/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "wiegehtki/zoneminder",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/wiegehtki/zoneminder/tree/main/dlib/docs",
      "https://github.com/wiegehtki/zoneminder/tree/main/dlib/docs/docs"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/Initial_old.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/hilfe_testaufrufe.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/Initial.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/Final_old.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/Final.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/Final_Installation_v1_35_xx_latest.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/training_gesichter.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/dlib/dlib/external/pybind11/tools/check-style.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/dlib/dlib/java/run_test.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/dlib/dlib/travis/get-old-cmakes.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/dlib/dlib/travis/build-and-test.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/zmeventnotification/EventServer.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/defaults/opencv_compile.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/image_yolov2.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/video_v2.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/json_mjpeg_streams.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/image_yolov3.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/listWebCams.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/training_carrera.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/build.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/smartcam.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/video_frames.sh.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/webcam.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/net_cam_v3.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/video_yolov4.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/video_yolov3.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/scripts/dice_label.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/scripts/setup.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/scripts/get_imagenet_train.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/scripts/gen_tactic.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/scripts/get_coco_dataset.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/scripts/imagenet_label.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/scripts/windows/windows_imagenet_train.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/scripts/windows/windows_imagenet_label.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/scripts/windows/otb_get_labels.sh",
      "https://raw.githubusercontent.com/wiegehtki/zoneminder/main/darknet.repo/mark/linux_mark.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Einloggen und dann die erste Stufe der Installation starten, der Rechner rebootet danach automatisch:\n```\n       sudo su\n       cd ~\n       git clone https://github.com/wiegehtki/zoneminder.git\n       cp zoneminder/*sh .\n       sudo chmod +x *sh\n       ./Initial.sh      \n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "In diesem Projekt kommt eine NVIDIA\u00ae Grafikkarte zum Einsatz um den Prozessor von rechenintensiven Verarbeitungen zu befreien. Dazu setzen wir NVIDIA\u00ae's CUDA\u00ae und cuDNN\u00ae ein. CUDA\u00ae ist eine Technologie, die es erlaubt Programmteile durch den Grafikprozessor abarbeiten zu lassen w\u00e4hrend die NVIDIA\u00ae CUDA\u00ae Deep Neural Network Bibliothek (cuDNN) eine GPU-beschleunigte Bibliothek mit Primitiven f\u00fcr tiefe neuronale Netzwerke darstellt. Solche Primitive, typischerweise neuronale Netzwerkschichten genannt, sind die grundlegenden Bausteine tiefer Netzwerke.\n\ncuDNN\u00ae ist insofern nicht frei verf\u00fcgbar als dass man sich bei NVIDIA\u00ae registrieren muss. Das ist aktuell kostenlos, nach der Registrierung startet eine sehr kurze Umfrage, wozu man das einsetzt und dann kommt man auf die Download-Site.\n\n1. Der Link zur Registrierung: https://developer.nvidia.com/CUDNN. Dort auf **Download cuDNN** klicken und anschlie\u00dfend registrieren.\n2. Nach erfolgreicher Reistrierung bitte in der Sektion **Download cuDNN v8.0.5 (November 9th, 2020), for CUDA 10.2** (das kann sich nat\u00fcrlich ggfs. \u00e4ndern und etwas anders hei\u00dfen) unter **Library for Linux, Ubuntu(x86_64 & PPC architecture)** die Datei **cuDNN Library for Linux (x86)** runter laden; **NICHT die Ubuntu-Dateien!** \n3. Die Datei per `scp` oder einem entsprechenden Tool direkt in das `/root/` - Verzeichnis kopieren.\n4. Auf der Maschine anmelden und folgende Schritte ausf\u00fchren, wobei `sudo su` nicht notwendig ist, wenn Ihr bereits **root** sein solltet.\n```\n       sudo su\n       cd ~\n       sudo chmod +x cudnn*     \n```\nAnschlie\u00dfend kommen wir zur eigentlichen Installation des Systems. Diese ist in zwei Stufen unterteilt: In Stufe 1 installieren wir einige Standard-Pakete und de-aktivieren den bisherigen Grafiktreiber, anschlie\u00dfend startet das System neu. Der Script geht davon aus, dass es sich um eine neu aufgesetzte Maschine handelt, falls nicht, m\u00fcsst Ihr entsprechende Anpassungen machen oder die Befehle per Hand ausf\u00fchren um sicher zu gehen, dass eine vorhandene Installation nicht beeintr\u00e4chtigt wird. Empfohlen wird daher, ein verf\u00fcgbares Testsystem zu nutzen welches neu aufgesetzt werden kann.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "* Mit Zoneminder Eure IP-Kameras einbinden und mobil verf\u00fcgbar machen\n* Den Livestream mit OpenCV und YOLO auf Objekte untersuchen\n* Erkannte Objekte, z.B. Personen, zuverl\u00e4ssig melden lassen\n* Gesichter trainieren (Achtung: Datenschutzgesetz beachten!)\n* Dokument zu Yolo(v4): https://arxiv.org/abs/2004.10934\n* Infos zum Darknet framework: http://pjreddie.com/darknet/\n* Infos zu OpenCV findet Ihr hier: https://opencv.org/\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9815608087096758,
        0.9026179699661261,
        0.8677275935505847
      ],
      "excerpt": "Installation des Betriebssystems: https://youtu.be/_P9d5rERbBA \nInstallation der Software: https://youtu.be/9pQ3ouCPqm8 \nInbetriebnahme: https://youtu.be/3yM87yOXaBs \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8274381667190921,
        0.8315190989652981,
        0.9769420979004304
      ],
      "excerpt": "Ihr k\u00f6nnt den Ubuntu Server unter https://releases.ubuntu.com/18.04/ runter laden. Anschlie\u00dfend das Image auf einen USB-Stick \u00fcbertragen, zum Beispiel mit balenaEtcher (https://www.balena.io/etcher/) oder einem anderem Tool welches daf\u00fcr geeignet ist. \nUnter WIEGEHTKI.DE (https://www.youtube.com/channel/UC_OeEKyvDfCVdhYrEKYf1lA) findet Ihr den Video zur Installation \nOhne diese Anpassungen wird die Installation nicht funktionieren. Daher ist dieser Schritt besonders sorgf\u00e4ltig durchzuf\u00fchren. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "       cd ~ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8536809724362512
      ],
      "excerpt": "objectconfig.ini:  Diese Datei muss nur dann angepasst werden, wenn das vor-trainierte Model gewechselt werden soll. Ich habe hier yolov4 mit GPU-Unterst\u00fctzung vor- eingestellt. Sollte man KEINE GPU zur Unterst\u00fctzung zur Verf\u00fcgung haben, kann der entsprechende Eintrag notfalls auch auf CPU ge\u00e4ndert werden. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9748709027320682
      ],
      "excerpt": "       object_processor=gpu  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9023697225149864
      ],
      "excerpt": "Dazu die Datei Final.sh im Editor \u00f6ffnen und folgenden Eintrag suchen: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9032837796845528
      ],
      "excerpt": "        -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9769420979004304
      ],
      "excerpt": "3.  Erneut Einloggen und dann die zweite und letzte Stufe der Installation starten: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466,
        0.9023697225149864
      ],
      "excerpt": "       cd ~ \n       ./Final.sh \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9769420979004304
      ],
      "excerpt": "Nach der Installation einen reboot ausf\u00fchren. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8514763608467749
      ],
      "excerpt": "Falls nicht, hier die Download-Links: \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/wiegehtki/zoneminder/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "Makefile",
      "C",
      "Cuda",
      "CMake",
      "Python",
      "Shell",
      "XSLT",
      "HTML",
      "PowerShell",
      "Java",
      "CSS",
      "Batchfile",
      "JavaScript",
      "Perl",
      "MATLAB"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "GNU General Public License v2.0",
      "url": "https://api.github.com/licenses/gpl-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                  YOLO LICENSE\\n                             Version 2, July 29 2016\\n\\nTHIS SOFTWARE LICENSE IS PROVIDED \"ALL CAPS\" SO THAT YOU KNOW IT IS SUPER\\nSERIOUS AND YOU DON\\'T MESS AROUND WITH COPYRIGHT LAW BECAUSE YOU WILL GET IN\\nTROUBLE HERE ARE SOME OTHER BUZZWORDS COMMONLY IN THESE THINGS WARRANTIES\\nLIABILITY CONTRACT TORT LIABLE CLAIMS RESTRICTION MERCHANTABILITY. NOW HERE\\'S\\nTHE REAL LICENSE:\\n\\n0. Darknet is public domain.\\n1. Do whatever you want with it.\\n2. Stop emailing me about it!\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Kamera\u00fcberwachung mit Objekt- und Gesichtserkennung mittels Zoneminder, YOLO und OpenCV auf x86 - Plattformen, ben\u00f6tigt NVIDIA\u00ae - GPU mit CUDA\u00ae und cuDNN\u00ae",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "zoneminder",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "wiegehtki",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/wiegehtki/zoneminder/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Wed, 29 Dec 2021 02:40:51 GMT"
    },
    "technique": "GitHub API"
  }
}