{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1911.09070 . According to Tensorflow, It can run in 133 fps in a fast computer and it performed 48.5 mAP (Mean Average Precision"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kochlisGit/LogoLens",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-04-12T20:51:27Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-05-29T15:03:20Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9806609915125407,
        0.8840696752794154
      ],
      "excerpt": "Logo Detection of a custom small dataset. In this project, I created a custom dataset with images from Google and then I trained a model, in order to detect any of the known logos in images and video streams. I used a state of the art model, which is both fast and performs high accuracy. \nThe dataset contains 108 Images with logos of 6 famous brands (classes): Nike | Jordans | Adidas | Puma | Kappa | Quicksilver.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8914706641806097,
        0.9522230379856085
      ],
      "excerpt": "The LOGOs could be displayed in any size in a frame. As You can notice, some logos have bigger size than others and every logo has different size in every image. \nThe LOGOs could be rotated and even located everywhere in the image. In the MNIST Digit dataset, all digits are placed in the center of the image. However, in this case, logos could be everywhere, without having fixed size. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9636052579939092,
        0.9894322810012122,
        0.9849859169661678
      ],
      "excerpt": "The dataset is very small, because It was made by manually downloading from Google. Usually, when a client requests a LOGO Detection model, they don't provide a lot of images, which are necessary for the training of the model. \nThe model needs to be fast enough to detect LOGOs in a video stream. However, the faster a network becomes, the lower it performs. There are state of the art models with very high performance in low fps, such as Hourglass CenterNet, however, this model has tons of parameters (1.3 GB) and requires a lot of time and a lot of money for good hardware. \nFor this particular project, I used the Object Detection API by Tensorflow. This package provides state-of-the-art models, that can be trained with little effort. Also, their implementation of the models is highly optimized, by Tensorflow team. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9239904533018936,
        0.8947072577782643
      ],
      "excerpt": "Changed number of classes from 90 to 6, because our dataset contains only 6 classes. \nReplaced random initialization of weights with Xavier Initialization. This type of initializer has shown that it can prevent exploding weights. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8676242008293858,
        0.8886913866785764,
        0.9942664959969125,
        0.972986575038747,
        0.894000458703349,
        0.9689018422954253,
        0.9789868106717257
      ],
      "excerpt": "Reduced the batch size from 128 to 16. It is important to keep the batch size low. Models that are trained with low batch sizes have shown to train faster and perform better than those with big batch sizes. However, result in faster training. \nSet the number of epochs to 70000. This should be enough for our small dataset. \nReplaced the momentum optimizer with ADAM. Adam optimizer is an improvement of momentum optimizer. It combines: SGD, ADAGrad, RMSProp.  \nAdded Data Augmentation techniques: Random Horizontal Flip | Random Crop | Random Saturation | Random Brightness | Random Hue | Random Contrast. This is how I dealt with most of the challenges of the dataset. \nAdded shuffling in the training inputs. In each epoch, the model will shuffle the inputs. This is a quick way of dealing with overfitting. An alternative could be Cross Validation. \nFinally, It took 12 hours for the model to be trained with a TPU in the Google Cloud. \nNotice how easily It manages to detect any logo, no matter where it placed, or how big it is, or how it is rotated in the image. I also created a script that uses the webcam to detect logos, so that I could try it by myself. However, the video is a bit laggy, because I run it on GTX 980, which is an old GPU with not much Computational power. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.891171554086312
      ],
      "excerpt": "Below, I will provide you with the model's graph, in case You are interested in downloading the model: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Logo Detection of a custom small dataset. The dataset contains logos of 6 famous brands: Nike, Jordans, Adidas, Puma, Kappa, Quicksilver",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kochlisGit/Custom-Small-Logo-Detection/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 01:10:07 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/kochlisGit/LogoLens/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "kochlisGit/LogoLens",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/kochlisGit/Custom-Small-Logo-Detection/main/logo_detection_colab.ipynb"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/kochlisGit/LogoLens/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Custom Small Logo Detection",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "LogoLens",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "kochlisGit",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kochlisGit/LogoLens/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 01:10:07 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "tensorflow-object-detection-api",
      "computer-vision",
      "object-detection",
      "logo-detection",
      "logo-detection-model",
      "python",
      "neural-networks",
      "tensorflow",
      "tensorflow2",
      "efficientdet",
      "efficientdet-d4",
      "bounding-boxes",
      "nike",
      "adidas",
      "dataset",
      "detect-logos",
      "realtime-detection",
      "webcam",
      "video-streams"
    ],
    "technique": "GitHub API"
  }
}