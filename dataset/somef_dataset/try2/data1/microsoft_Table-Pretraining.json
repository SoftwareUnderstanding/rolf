{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1910.13461"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If our work is useful for you, please consider citing our paper:\n\n```bibtex\n@misc{liu2021tapex,\n    title={TAPEX: Table Pre-training via Learning a Neural SQL Executor}, \n    author={Qian Liu and Bei Chen and Jiaqi Guo and Zeqi Lin and Jian-guang Lou},\n    year={2021},\n    eprint={2107.07653},\n    archivePrefix={arXiv},\n    primaryClass={cs.CL}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{liu2021tapex,\n    title={TAPEX: Table Pre-training via Learning a Neural SQL Executor}, \n    author={Qian Liu and Bei Chen and Jiaqi Guo and Zeqi Lin and Jian-guang Lou},\n    year={2021},\n    eprint={2107.07653},\n    archivePrefix={arXiv},\n    primaryClass={cs.CL}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8444342525991423
      ],
      "excerpt": "<figure style=\"text-align:center\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8955886365383559
      ],
      "excerpt": "<div style=\"text-align:center\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9999997647529134
      ],
      "excerpt": "select ( select number where number = 4 ) - ( select number where number = 3 ) col : number | date | name | age (at execution) | age (at offense) | race | state | method row 1 : 1 | november 2, 1984 | velma margie barfield | 52 | 45 | white | north carolina | lethal injection row 2 : 2 | february 3, 1998 | karla faye tucker | 38 | 23 | white | texas | lethal injection row 3 : 3 | march 30, 1998 | judias v. buenoano | 54 | 28 | white | florida | electrocution row 4 : 4 | february 24, 2000 | betty lou beets | 62 | 46 | white | texas | lethal injection row 5 : 5 | may 2, 2000 | christina marie riggs | 28 | 26 | white | arkansas | lethal injection row 6 : 6 | january 11, 2001 | wanda jean allen | 41 | 29 | black | oklahoma | lethal injection row 7 : 7 | may 1, 2001 | marilyn kay plantz | 40 | 27 | white | oklahoma | lethal injection row 8 : 8 | december 4, 2001 | lois nadean smith | 61 | 41 | white | oklahoma | lethal injection row 9 : 9 | may 10, 2002 | lynda lyon block | 54 | 45 | white | alabama | electrocution row 10 : 10 | october 9, 2002 | aileen carol wuornos | 46 | 33 | white | florida | lethal injection row 11 : 11 | september 14, 2005 | frances elaine newton | 40 | 21 | black | texas | lethal injection row 12 : 12 | september 23, 2010 | teresa wilson bean lewis | 41 | 33 | white | virginia | lethal injection row 13 : 13 | june 26, 2013 | kimberly lagayle mccarthy | 52 | 36 | black | texas | lethal injection row 14 : 14 | february 5, 2014 | suzanne margaret basso | 59 | 44 | white | texas | lethal injection \n",
      "technique": "Supervised classification"
    }
  ],
  "codeOfConduct": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://raw.githubusercontent.com/microsoft/Table-Pretraining/main/CODE_OF_CONDUCT.md",
    "technique": "File Exploration"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/microsoft/Table-Pretraining",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-06-22T09:36:17Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-26T01:18:20Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9463179274226543
      ],
      "excerpt": "The official repository which contains the code and pre-trained models for our paper T<span style=\"font-size:0.8em;\">A</span>PE<span style=\"font-size:0.8em;\">X</span>: Table Pre-training via Learning a Neural SQL Executor. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.919325257437469,
        0.9256086548877082,
        0.8122247660497448,
        0.8883058648044244,
        0.8268563533928205
      ],
      "excerpt": "2021-10-01: We released the code for TableFT and the fine-tuned model weights on TabFact! \n2021-08-28: We released the fine-tuned model weights on WikiSQL, SQA and WikiTableQuestions! \n2021-08-27: We released the code, the pre-training corpus, and the pre-trained TAPEX model weights. Thanks for your patience! \n2021-07-16: We released our paper and home page. Check it out! \nIn the paper, we present T<span class=\"span-small\">A</span>PE<span class=\"span-small\">X</span> (for Table Pre-training via Execution), a conceptually simple and empirically powerful pre-training approach to empower existing generative pre-trained models (e.g., BART in our paper) with table reasoning skills. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8833200947013103,
        0.8027846862281941
      ],
      "excerpt": "The central point of T<span class=\"span-small\">A</span>PE<span class=\"span-small\">X</span> is to train a model to mimic the SQL query execution process over a table. \nWe believe that if a model can be trained to faithfully execute SQL queries, then it must have a deep understanding of table structures and possess an inductive bias towards table structures. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9538319720969933,
        0.9491186011937708
      ],
      "excerpt": "This project contains two parts, tapex library and examples to employ it on different table-related applications (e.g., Table Question Answering). \nFor tapex, there is an overview: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8045875760512841
      ],
      "excerpt": "    |-- dbengine.py #: the database engine to return answer for a SQL query \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8884777961644996
      ],
      "excerpt": "        |-- executor.py #: the re-implementation of WikiSQL style SQL execution to obtain ground-truth answers in the dataset \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9250028762183753,
        0.8459097338860592,
        0.8869792328254394
      ],
      "excerpt": "|-- model_eval.py #: evaluate the denotation accuracy of model \n|-- model_interface.py #: wrap a model interface for interaction based on HubInterface \nFor examples, please refer to here for more details. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9933732217296417
      ],
      "excerpt": "Here we want to acknowledge the huge effort of paper On the Potential of Lexico-logical Alignments for Semantic Parsing to SQL Queries, which provides the rich resources of SQL templates for us to synthesize the pre-training corpus. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8112146660077283,
        0.9906360138958445
      ],
      "excerpt": "Model | Description | \nWe provide fine-tuned model weights and their performance on different datasets below. The following Accuracy (Acc) refers to denotation accuracy computed by our script model_eval.py. Meanwhile, it is worth noting that we need truncating long tables during preprocessing with some randomness. Therefore, we also provide preprocessed datasets for reproducing our experimental results. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8199837720617734
      ],
      "excerpt": "a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8073737513954784,
        0.9783267603835809
      ],
      "excerpt": "This project has adopted the Microsoft Open Source Code of Conduct. \nFor more information see the Code of Conduct FAQ or \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8411378894176985,
        0.9214339495776546
      ],
      "excerpt": "This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft  \ntrademarks or logos is subject to and must follow  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "TAPEX: Table Pre-training via Learning a Neural SQL Executor",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "---|---|---|---\n`tapex.base` | 6 encoder and decoder layers | 140M | [tapex.base.tar.gz](https://github.com/microsoft/Table-Pretraining/releases/download/pretrained-model/tapex.base.tar.gz)\n`tapex.large` | 12 encoder and decoder layers | 400M | [tapex.large.tar.gz](https://github.com/microsoft/Table-Pretraining/releases/download/pretrained-model/tapex.large.tar.gz)\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/microsoft/Table-Pretraining/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 8,
      "date": "Mon, 27 Dec 2021 22:27:07 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/microsoft/Table-Pretraining/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "microsoft/Table-Pretraining",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The main requirements of our code base is [fairseq](https://github.com/pytorch/fairseq), which may be difficult for beginners to get started in an hour.\n\nHowever, do not worry, we already wrap all necessary commands for developers.\nIn other words, you do not need to study fairseq to start your journey about TAPEX!\nYou can simply run the following command (in the virtual environment) to use TAPEX:\n\n```bash\n$ pip install --editable ./\n```\n\n> The argument `--editable` is important for your potential follow-up modification on the tapex library. The command will not only install dependencies, but also install `tapex` as a library, which can be imported easily.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "First, you should set up a python environment. This code base has been tested under python 3.x, and we officially support python 3.8.\n\nAfter installing python 3.8, we strongly recommend you to use `virtualenv` (a tool to create isolated Python environments) to manage the python environment. You could use following commands to create an environment `venv` and activate it.\n\n```bash\n$ python3.8 -m venv venv\n$ source venv/bin/activate\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8987170981204853
      ],
      "excerpt": "For example, you can use the following command and see its log: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9047865514047789,
        0.9808961624283565
      ],
      "excerpt": "You should firstly check the version of fairseq, which should be 1.0.0a0+801a646 when you use pip list to show it. \nNote that the fairseq dependency is not officially released as 1.0.0, so the one is not correct if you directly install it from pip install fairseq. Our installtion is equalivant to the following command: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9991729034001374,
        0.9420480737763316
      ],
      "excerpt": "pip install git+https://github.com/pytorch/fairseq.git@801a64683164680562c77b688d9ca77fc3e0cea7 \nIt also requires you to have Git installed at first. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8003352366805131
      ],
      "excerpt": "a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8404731522450745
      ],
      "excerpt": "    |-- download.py #: download helper for automatic resource \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8143389038344261
      ],
      "excerpt": "The SQL Execution Result as OUTPUT: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.896921863129074
      ],
      "excerpt": "Model | Dev Acc | Test Acc | Dataset | Download Data | Download Model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8630913126996026
      ],
      "excerpt": "Given these fine-tuned model weights, you can play with them using the predict mode in examples/tableqa/run_model.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9586263009350087
      ],
      "excerpt": "$ python examples/tableqa/run_model.py predict --resource-dir ./tapex.large.wtq --checkpoint-name model.pt \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/microsoft/Table-Pretraining/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "T<span style=\"font-size:0.8em;\">A</span>PE<span style=\"font-size:0.8em;\">X</span>: Table Pre-training via Learning a Neural SQL Executor",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Table-Pretraining",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "microsoft",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/microsoft/Table-Pretraining/blob/main/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "SivilTaram",
        "body": "",
        "dateCreated": "2021-09-23T04:24:48Z",
        "datePublished": "2021-09-30T12:56:23Z",
        "html_url": "https://github.com/microsoft/Table-Pretraining/releases/tag/origin-data",
        "name": "TabFact Data",
        "tag_name": "origin-data",
        "tarball_url": "https://api.github.com/repos/microsoft/Table-Pretraining/tarball/origin-data",
        "url": "https://api.github.com/repos/microsoft/Table-Pretraining/releases/50548600",
        "zipball_url": "https://api.github.com/repos/microsoft/Table-Pretraining/zipball/origin-data"
      },
      {
        "authorType": "User",
        "author_name": "SivilTaram",
        "body": "",
        "dateCreated": "2021-08-28T01:59:39Z",
        "datePublished": "2021-08-29T09:44:52Z",
        "html_url": "https://github.com/microsoft/Table-Pretraining/releases/tag/preprocessed-data",
        "name": "TAPEX Preprocessed Dataset",
        "tag_name": "preprocessed-data",
        "tarball_url": "https://api.github.com/repos/microsoft/Table-Pretraining/tarball/preprocessed-data",
        "url": "https://api.github.com/repos/microsoft/Table-Pretraining/releases/48628882",
        "zipball_url": "https://api.github.com/repos/microsoft/Table-Pretraining/zipball/preprocessed-data"
      },
      {
        "authorType": "User",
        "author_name": "SivilTaram",
        "body": "",
        "dateCreated": "2021-08-28T01:59:39Z",
        "datePublished": "2021-08-29T09:40:31Z",
        "html_url": "https://github.com/microsoft/Table-Pretraining/releases/tag/fine-tuned-model",
        "name": "TAPEX Fine-tuned Models",
        "tag_name": "fine-tuned-model",
        "tarball_url": "https://api.github.com/repos/microsoft/Table-Pretraining/tarball/fine-tuned-model",
        "url": "https://api.github.com/repos/microsoft/Table-Pretraining/releases/48628713",
        "zipball_url": "https://api.github.com/repos/microsoft/Table-Pretraining/zipball/fine-tuned-model"
      },
      {
        "authorType": "User",
        "author_name": "SivilTaram",
        "body": "The largest sythetic corpus (500M pairs of SQL-Table-Answers) used by TAPEX during pre-training.",
        "dateCreated": "2021-08-28T01:59:39Z",
        "datePublished": "2021-08-24T06:16:38Z",
        "html_url": "https://github.com/microsoft/Table-Pretraining/releases/tag/pretraining-corpus",
        "name": "TAPEX Pre-training Corpus",
        "tag_name": "pretraining-corpus",
        "tarball_url": "https://api.github.com/repos/microsoft/Table-Pretraining/tarball/pretraining-corpus",
        "url": "https://api.github.com/repos/microsoft/Table-Pretraining/releases/48328778",
        "zipball_url": "https://api.github.com/repos/microsoft/Table-Pretraining/zipball/pretraining-corpus"
      },
      {
        "authorType": "User",
        "author_name": "SivilTaram",
        "body": "",
        "dateCreated": "2021-08-28T01:59:39Z",
        "datePublished": "2021-07-19T12:56:42Z",
        "html_url": "https://github.com/microsoft/Table-Pretraining/releases/tag/pretrained-model",
        "name": "TAPEX Pre-trained Models",
        "tag_name": "pretrained-model",
        "tarball_url": "https://api.github.com/repos/microsoft/Table-Pretraining/tarball/pretrained-model",
        "url": "https://api.github.com/repos/microsoft/Table-Pretraining/releases/46013183",
        "zipball_url": "https://api.github.com/repos/microsoft/Table-Pretraining/zipball/pretrained-model"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 63,
      "date": "Mon, 27 Dec 2021 22:27:07 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "table-pretraining",
      "semantic-parsing",
      "fact-verification",
      "table-qa"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Once `tapex` is successfully installed, you could go into [examples](examples) to enjoy fine-tuning TAPEX models and using them on different applications!\n\n",
      "technique": "Header extraction"
    }
  ]
}