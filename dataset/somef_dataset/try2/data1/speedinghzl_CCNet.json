{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "We thank NSFC, ARC DECRA DE190101315, ARC DP200100938, HUST-Horizon Computer Vision ResearchCenter, and IBM-ILLINOIS Center for Cognitive ComputingSystems Research (C3SR).\n\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1811.11721"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you find CCNet useful in your research, please consider citing:\n```BibTex\n@article{huang2020ccnet,\n  author={Huang, Zilong and Wang, Xinggang and Wei, Yunchao and Huang, Lichao and Shi, Humphrey and Liu, Wenyu and Huang, Thomas S.},\n  journal={IEEE Transactions on Pattern Analysis and Machine Intelligence}, \n  title={CCNet: Criss-Cross Attention for Semantic Segmentation}, \n  year={2020},\n  month={},\n  volume={},\n  number={},\n  pages={1-1},\n  keywords={Semantic Segmentation;Graph Attention;Criss-Cross Network;Context Modeling},\n  doi={10.1109/TPAMI.2020.3007032},\n  ISSN={1939-3539}}\n\n@article{huang2018ccnet,\n    title={CCNet: Criss-Cross Attention for Semantic Segmentation},\n    author={Huang, Zilong and Wang, Xinggang and Huang, Lichao and Huang, Chang and Wei, Yunchao and Liu, Wenyu},\n    booktitle={ICCV},\n    year={2019}}\n```    \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.999999750184645
      ],
      "excerpt": "By Zilong Huang, Xinggang Wang, Yunchao Wei, Lichao Huang, Chang Huang, Humphrey Shi, Wenyu Liu and Thomas S. Huang. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9656899326139788
      ],
      "excerpt": "2018/11: Code released. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8878427416407261
      ],
      "excerpt": "Object Context Network   \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/speedinghzl/CCNet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-11-26T19:39:02Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-19T20:08:56Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "![motivation of CCNet](https://user-images.githubusercontent.com/4509744/50546460-7df6ed00-0bed-11e9-9340-d026373b2cbe.png)\nLong-range dependencies can capture useful contextual information to benefit visual understanding problems. In this work, we propose a Criss-Cross Network (CCNet) for obtaining such important information through a more effective and efficient way. Concretely, for each pixel, our CCNet can harvest the contextual information of its surrounding pixels on the criss-cross path through a novel criss-cross attention module. By taking a further recurrent operation, each pixel can finally capture the long-range dependencies from all pixels. Overall, our CCNet is with the following merits: \n- **GPU memory friendly**  \n- **High computational efficiency** \n- **The state-of-the-art performance** \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9141701891692833,
        0.9639404619133599,
        0.9523500062993949,
        0.9317202810890032,
        0.8323332505898986
      ],
      "excerpt": "*2021/02: The pure python implementation of CCNet is released in the branch pure-python. Thanks Serge-weihao.* \n2019/08: The new version CCNet is released on branch Pytorch-1.1 which supports Pytorch 1.0 or later and distributed multiprocessing training and testing \nThis current code is a implementation of the experiments on Cityscapes in the CCNet ICCV version.  \nWe implement our method based on open source pytorch segmentation toolbox.  \n2018/12: Renew the code and release trained models with R=1,2. The trained model with R=2 achieves 79.74% on val set and 79.01% on test set with single scale testing. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9199832547363822,
        0.9877761323016122
      ],
      "excerpt": "Overview of the proposed CCNet for semantic segmentation. The proposed recurrent criss-cross attention takes as input feature maps H and output feature maps H'' which obtain rich and dense contextual information from all pixels. Recurrent criss-cross attention module can be unrolled into R=2 loops, in which all Criss-Cross Attention modules share parameters. \nTo get a deeper understanding of our RCCA, we visualize the learned attention masks as shown in the figure.  For each input image, we select one point (green cross) and show its corresponding attention maps when R=1 and R=2 in columns 2 and 3 respectively. In the figure, only contextual information from the criss-cross path of the target point is capture when R=1. By adopting one more criss-cross module, ie, R=2  the RCCA can finally aggregate denser and richer contextual information compared with that of R=1. Besides, we observe that the attention module could capture semantic similarity and long-range dependencies. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8375859353183429
      ],
      "excerpt": "We run CCNet with R=1,2 three times on cityscape dataset separately and report the results in the following table. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133377073273814
      ],
      "excerpt": "to achieve a small gap or turn on OHEM flag. Turning on OHEM flag also can improve the performance on the val set. In general\uff0c \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8048593761471745,
        0.9376034317722692
      ],
      "excerpt": "We train all the models on fine training set and use the single scale for testing. \nThe trained model with R=2 79.74  can also achieve about 79.01 mIOU on cityscape test set with single scale testing (for saving time, we use the whole image as input). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "CCNet: Criss-Cross Attention for Semantic Segmentation (TPAMI 2020 & ICCV 2019).",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/speedinghzl/CCNet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 249,
      "date": "Tue, 21 Dec 2021 13:14:19 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/speedinghzl/CCNet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "speedinghzl/CCNet",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/speedinghzl/CCNet/master/run_local.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9986563398845941,
        0.9951750829147036,
        0.999833231880651,
        0.9876636780183828,
        0.9906248903846466
      ],
      "excerpt": ": Install Pytorch \n$ conda install pytorch torchvision -c pytorch \n: Install Apex \n$ git clone https://github.com/NVIDIA/apex \n$ cd apex \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.999833231880651,
        0.9893272198983933,
        0.9906248903846466,
        0.9820226428242687
      ],
      "excerpt": ": Install Inplace-ABN \n$ git clone https://github.com/mapillary/inplace_abn.git \n$ cd inplace_abn \n$ python setup.py install \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9023697225149864
      ],
      "excerpt": "./run_local.sh YOUR_CS_PATH \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8244408400926513,
        0.8077319622579018
      ],
      "excerpt": "Please download MIT imagenet pretrained resnet101-imagenet.pth, and put it into dataset folder. \nTraining script. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9149071052596406
      ],
      "excerpt": "python train.py --data-dir ${YOUR_CS_PATH} --random-mirror --random-scale --restore-from ./dataset/resnet101-imagenet.pth --gpu 0,1,2,3 --learning-rate 1e-2 --input-size 769,769 --weight-decay 1e-4 --batch-size 8 --num-steps 60000 --recurrence 2  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9195488564269875
      ],
      "excerpt": "python train.py --data-dir ${YOUR_CS_PATH} --random-mirror --random-scale --restore-from ./dataset/resnet101-imagenet.pth --gpu 0,1,2,3 --learning-rate 1e-2 --input-size 769,769 --weight-decay 1e-4 --batch-size 8 --num-steps 60000 --recurrence 2 --ohem 1 --ohem-thres 0.7 --ohem-keep 100000  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9118930559404135
      ],
      "excerpt": "python evaluate.py --data-dir ${YOUR_CS_PATH} --restore-from snapshots/CS_scenes_60000.pth --gpu 0 --recurrence 2  \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/speedinghzl/CCNet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 Zilong Huang\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "CCNet: Criss-Cross Attention for Semantic Segmentation",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "CCNet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "speedinghzl",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/speedinghzl/CCNet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To install PyTorch==0.4.0 or 0.4.1, please refer to https://github.com/pytorch/pytorch#installation.   \n4 x 12G GPUs (_e.g._ TITAN XP)  \nPython 3.6   \ngcc (GCC) 4.8.5  \nCUDA 8.0  \n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1183,
      "date": "Tue, 21 Dec 2021 13:14:19 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "cityscape",
      "semantic-segmentation",
      "self-attention",
      "pytorch",
      "scene-parsing",
      "segmentation"
    ],
    "technique": "GitHub API"
  }
}