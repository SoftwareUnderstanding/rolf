{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1911.09070\n\nUpdates:\n\n  - **Apr22: Speed up end-to-end latency: D0 has up to >200 FPS throughput on Tesla V100.**\n    * A great collaboration with [@fsx950223](https://github.com/fsx950223",
      "https://arxiv.org/abs/1905.11946",
      "https://arxiv.org/abs/1804.02767",
      "https://arxiv.org/abs/1911.09070"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9944894080071676,
        0.9998416198938155
      ],
      "excerpt": "[1] Mingxing Tan, Ruoming Pang, Quoc V. Le. EfficientDet: Scalable and Efficient Object Detection. CVPR 2020. \nArxiv link: https://arxiv.org/abs/1911.09070 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8207940084462922
      ],
      "excerpt": "|     EfficientDet-D0 (ckpt, val, test-dev)    | 33.5 | 33.8 | 52.2 | 35.8 | 12.0 | 38.3 | 51.2 |  | 3.9M | 2.54B  | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8985452683513004
      ],
      "excerpt": "On single Tesla V100 without using TensorRT, our end-to-end \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "| EfficientDet-D0 |  33.8 | 10.2ms | 97 fps | 209 fps | \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lvweiwolf/efficientdet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-05-27T09:08:57Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-05-27T12:11:12Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8070665968276607
      ],
      "excerpt": "A great collaboration with @fsx950223. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9020995752406095,
        0.9485828373396905
      ],
      "excerpt": "EfficientDets are a family of object detection models, which achieve state-of-the-art 52.6mAP on COCO test-dev, yet being 4x - 9x smaller and using 13x - 42x fewer FLOPs than previous detectors. Our models also run 2x - 4x faster on GPU, and 5x - 11x faster on CPU than other detectors. \nEfficientDets are developed based on the advanced backbone, a new BiFPN, and a new scaling technique: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9494412181572609
      ],
      "excerpt": "Backbone: we employ EfficientNets as our backbone networks. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.932692277568677,
        0.9903101764322733
      ],
      "excerpt": "Scaling: we use a single compound scaling factor to govern the depth, width, and resolution for all backbone, feature & prediction networks. \nOur model family starts from EfficientDet-D0, which has comparable accuracy as YOLOv3. Then we scale up this baseline model using our compound scaling method to obtain a list of detection models EfficientDet-D1 to D6, with different trade-offs between accuracy and model complexity. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9977032069472552,
        0.8387581326052365
      ],
      "excerpt": "** For simplicity, we compare the whole detectors here. For more comparison on FPN/NAS-FPN/BiFPN, please see Table 4 of our paper. \nWe have provided a list of EfficientDet checkpoints and results as follows: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8048577363307465,
        0.8715634860839298
      ],
      "excerpt": " <em>val</em> denotes validation results, <em>test-dev</em> denotes test-dev2017 results. AP<sup>val</sup> is for validation accuracy, all other AP results in the table are for COCO test-dev2017. All accuracy numbers are for single-model single-scale without ensemble or test-time augmentation. All checkpoints are trained with baseline preprocessing (no autoaugmentation). \n EfficientNet-D0 to D6 are trained with 300 epochs, EfficientNet-D7 is trained with 500 epochs. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8411282805212246
      ],
      "excerpt": "saved model under savedmodeldir/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8411282805212246
      ],
      "excerpt": "TensorRT saved model under savedmodeldir/tensorrt_fp32/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9585577329595145
      ],
      "excerpt": "There are two types of latency: network latency and end-to-end latency. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9141472032430418
      ],
      "excerpt": "On single Tesla V100 without TensorRT, our D0 network (no pre/post-processing) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9399272225428145,
        0.8424142769798452
      ],
      "excerpt": "(2) To measure the end-to-end latency (from the input image to the final rendered \nnew image, including: image preprocessing, network, postprocessing and NMS), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9787013915010594,
        0.8693712061571589,
        0.8061811575056023
      ],
      "excerpt": "On single Tesla V100 without using TensorRT, our end-to-end \nlatency and throughput are: \n|       Model    |   mAP | batch1 latency |  batch1 throughput |  batch8 throughput | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9809716729281546
      ],
      "excerpt": "Here is an example of EfficientDet-D0 visualization: more on tutorial \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "    --model_name=${MODEL}  --model_dir=${CKPT_PATH}  \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "    --model_name=${MODEL}  --model_dir=${CKPT_PATH}  \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8555267069708148
      ],
      "excerpt": "A GCE VM instance with an associated Cloud TPU resource. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9497999837966019
      ],
      "excerpt": "For more instructions about training on TPUs, please refer to the following tutorials: \n",
      "technique": "Supervised classification"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "    !export MODEL=efficientdet-d0\n    !export CKPT_PATH=efficientdet-d0\n    !wget https://storage.googleapis.com/cloud-tpu-checkpoints/efficientdet/coco/${MODEL}.tar.gz\n    !wget https://user-images.githubusercontent.com/11736571/77320690-099af300-6d37-11ea-9d86-24f14dc2d540.png -O img.png\n    !tar xf ${MODEL}.tar.gz\n\n    ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "    !wget https://storage.googleapis.com/cloud-tpu-checkpoints/efficientdet/data/video480p.mov -O input.mov\n\n    ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "    !wget http://host.robots.ox.ac.uk/pascal/VOC/voc2012/VOCtrainval_11-May-2012.tar\n    !tar xf VOCtrainval_11-May-2012.tar\n    !mkdir tfrecord\n    !PYTHONPATH=\".:$PYTHONPATH\"  python dataset/create_pascal_tfrecord.py  \\\n        --data_dir=VOCdevkit --year=VOC2012  --output_path=tfrecord/pascal\n\n    ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "    !wget https://storage.googleapis.com/cloud-tpu-checkpoints/efficientnet/ckptsaug/efficientnet-b0.tar.gz\n    !tar xf efficientnet-b0.tar.gz \n\n    !python main.py --mode=train_and_eval \\\n        --training_file_pattern=tfrecord/pascal*.tfrecord \\\n        --validation_file_pattern=tfrecord/pascal*.tfrecord \\\n        --model_name=efficientdet-d0 \\\n        --model_dir=/tmp/efficientdet-d0-scratch  \\\n        --backbone_ckpt=efficientnet-b0  \\\n        --train_batch_size=8 \\\n        --eval_batch_size=8 --eval_samples=512 \\\n        --num_examples_per_epoch=5717 --num_epochs=1  \\\n        --hparams=\"num_classes=20,moving_average_decay=0\"\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lvweiwolf/efficientdet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 23:51:18 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lvweiwolf/efficientdet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "lvweiwolf/efficientdet",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/lvweiwolf/efficientdet/master/tutorial.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "    !python model_inspect.py --runmode=infer \\\n      --model_name=efficientdet-d0   --ckpt_path=efficientdet-d0 \\\n      --hparams=voc_config.yaml  \\\n      --input_image=img.png --output_image_dir=/tmp/\n\nYou should check more details of runmode which is written in caption-4.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "    !python model_inspect.py --runmode=infer \\\n      --model_name=efficientdet-d0   --ckpt_path=efficientdet-d0 \\\n      --hparams=voc_config.yaml  \\\n      --input_image=img.png --output_image_dir=/tmp/\n\nYou should check more details of runmode which is written in caption-4.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "    ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9979648453964488
      ],
      "excerpt": "Quick install dependencies: pip install -r requirements.txt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8805978989706508
      ],
      "excerpt": "Run the following command line to export models: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9379580093194964
      ],
      "excerpt": "Then you will get: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8677002193925168
      ],
      "excerpt": "prediction output), use the following command: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9459838960565696
      ],
      "excerpt": "use the following command: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8296443122018258
      ],
      "excerpt": "Lastly, if you only have one image and just want to run a quick test, you can also run the following command (it is slow because it needs to construct the graph from scratch): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8902627162932362
      ],
      "excerpt": "!mkdir tfrecord \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9496350873739744
      ],
      "excerpt": "You can also run eval on test-dev set with the following command: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8902627162932362
      ],
      "excerpt": "!mkdir tfrecord \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9312943805775956,
        0.8644968988464741,
        0.8644500257064217
      ],
      "excerpt": "Download efficientdet coco checkpoint. \n!wget https://storage.googleapis.com/cloud-tpu-checkpoints/efficientdet/coco/efficientdet-d0.tar.gz \n!tar xf efficientdet-d0.tar.gz \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.999833231880651
      ],
      "excerpt": "Install horovod. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9312943805775956,
        0.8644968988464741,
        0.8644500257064217
      ],
      "excerpt": "Download efficientdet coco checkpoint. \n!wget https://storage.googleapis.com/cloud-tpu-checkpoints/efficientdet/coco/efficientdet-d0.tar.gz \n!tar xf efficientdet-d0.tar.gz \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8096864377725893
      ],
      "excerpt": "Install latest TensorFlow for both GCE VM and Cloud. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8354454587085117
      ],
      "excerpt": "Quick start tutorial: tutorial.ipynb \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8400408016478923
      ],
      "excerpt": "<img src=\"./g3doc/network.png\" width=\"800\" /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.909130101466226
      ],
      "excerpt": "    <img src=\"./g3doc/flops.png\" width=\"100%\" /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9303755601074072
      ],
      "excerpt": "    <img src=\"./g3doc/params.png\", width=\"100%\" /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.889858763044754
      ],
      "excerpt": "|       Model    |  AP<sup>val</sup> | AP<sup>test</sup>    |  AP<sub>50</sub> | AP<sub>75</sub> |AP<sub>S</sub>   |  AP<sub>M</sub>    |  AP<sub>L</sub>   | | #params | #FLOPs | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8775435821294271
      ],
      "excerpt": "|     EfficientDet-D3 (ckpt, val, test-dev)    | 45.9 | 45.8 | 65.0 | 49.3 | 26.6 | 49.4 | 59.8 | | 12.0M | 24.9B | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8617590508969503
      ],
      "excerpt": "!python model_inspect.py --runmode=saved_model --model_name=efficientdet-d0 \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8953715875555636
      ],
      "excerpt": "tflite file with name efficientdet-d0.tflite \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8617590508969503
      ],
      "excerpt": "!python model_inspect.py --runmode=bm --model_name=efficientdet-d0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.80772695337263
      ],
      "excerpt": "has 134 FPS (frame per second) for batch size 1, and 238 FPS for batch size 8. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8617590508969503
      ],
      "excerpt": "!python model_inspect.py --runmode=saved_model --model_name=efficientdet-d0 \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "!python model_inspect.py --runmode=saved_model_benchmark \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8172418176965975
      ],
      "excerpt": "  --model_name=efficientdet-d0  --input_image=testdata/img1.jpg  \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8846199122927526,
        0.8047116813200568
      ],
      "excerpt": "| EfficientDet-D3 |  45.8 | 29.0ms | 35 fps | 58 fps  | \n| EfficientDet-D4 |  49.4 | 42.8ms | 23 fps | 35 fps  | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "!python model_inspect.py --runmode=saved_model \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "!python model_inspect.py --runmode=saved_model_infer \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "!python model_inspect.py --runmode=saved_model_infer \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9197735714648932
      ],
      "excerpt": "<img src=\"./g3doc/street.jpg\" width=\"800\" /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "!python model_inspect.py --runmode=saved_model \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "!python model_inspect.py --runmode=saved_model_video \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "!python model_inspect.py --runmode=saved_model_video \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8289669050403863
      ],
      "excerpt": "  --output_video=output.mov \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8082022887640018
      ],
      "excerpt": "!unzip annotations_trainval2017.zip \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8059726881648243,
        0.9225246410527294
      ],
      "excerpt": "// Run eval. \n!python main.py --mode=eval  \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8082022887640018
      ],
      "excerpt": "!unzip -q test2017.zip \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8082022887640018
      ],
      "excerpt": "!unzip image_info_test2017.zip \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9225246410527294
      ],
      "excerpt": "!python main.py --mode=eval  \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8269488975932054
      ],
      "excerpt": "Create a config file for the PASCAL VOC dataset called voc_config.yaml and put this in it. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246998602001967
      ],
      "excerpt": "!python main.py --mode=train_and_eval \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8269488975932054
      ],
      "excerpt": "Create a config file for the PASCAL VOC dataset called voc_config.yaml and put this in it. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8125638471012283
      ],
      "excerpt": "A GCS bucket to store your training checkpoints (the \"model directory\"). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8667333958410304
      ],
      "excerpt": "Then train the model: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8645614517158713
      ],
      "excerpt": "!python main.py --tpu=TPU_NAME --training_file_pattern=DATA_DIR/*.tfrecord --model_dir=MODEL_DIR --strategy=tpu \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lvweiwolf/efficientdet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "EfficientDet",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "efficientdet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "lvweiwolf",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lvweiwolf/efficientdet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "    !python model_inspect.py --runmode=infer --model_name=$MODEL \\\n      --hparams=\"image_size=1920x1280\"  --max_boxes_to_draw=100   --min_score_thresh=0.4 \\\n      --ckpt_path=$CKPT_PATH --input_image=img.png --output_image_dir=/tmp\n    ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "    ",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 23:51:18 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "    !wget https://storage.googleapis.com/cloud-tpu-checkpoints/efficientdet/data/video480p.mov -O input.mov\n\n    ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "    ",
      "technique": "Header extraction"
    }
  ]
}