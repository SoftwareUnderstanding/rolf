{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This work was initiated as a project of our master's level [course](https://www.kth.se/student/kurser/kurs/DD2412?l=en) titled 'Deep Learning, Advanced Course' @ KTH Stockholm, Sweden. We would like to thank the course staff for providing us with the necessary Google Cloud tickets to run our (several) experiments. \n\nMost importantly, we would like to thank the authors of the original paper, [Paul Micaelli](https://github.com/polo5) and [Amos Storkey](https://homepages.inf.ed.ac.uk/amos/) for answering immediately all the questions that came up during this work. \n\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1905.09768",
      "https://arxiv.org/abs/1605.07146",
      "https://arxiv.org/abs/1612.03928",
      "https://arxiv.org/abs/1905.09768"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9919071674813691
      ],
      "excerpt": "Our code for the Reproducibility Challenge of the 2019 Conference on Neural Information Processing Systems. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9979049702269159
      ],
      "excerpt": "Journal Publication Open Review \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/AlexandrosFerles/NIPS_2019_Reproducibilty_Challenge_Zero-shot_Knowledge_Transfer_via_Adversarial_Belief_Matching",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-09-12T21:05:24Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-01-29T09:32:31Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8804828333227673,
        0.8675638476011344
      ],
      "excerpt": "Our code for the Reproducibility Challenge of the 2019 Conference on Neural Information Processing Systems. \nWe participate in the Baseline Track with the paper Zero-Shot Knowledge Transfer via Adversarial Belief Matching \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8311633739192358
      ],
      "excerpt": "Update: Our work was accepted from the NeurIPS 2019 Reproducibility Challenge Program Chairs and is under publication! \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/AlexandrosFerles/NIPS_2019_Reproducibilty_Challenge_Zero-shot_Knowledge_Transfer_via_Adversarial_Belief_Matching/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 15:48:08 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/AlexandrosFerles/NIPS_2019_Reproducibilty_Challenge_Zero-shot_Knowledge_Transfer_via_Adversarial_Belief_Matching/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "AlexandrosFerles/NIPS_2019_Reproducibilty_Challenge_Zero-shot_Knowledge_Transfer_via_Adversarial_Belief_Matching",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/AlexandrosFerles/NIPS_2019_Reproducibilty_Challenge_Zero-shot_Knowledge_Transfer_via_Adversarial_Belief_Matching/master/src/PyTorch/Colab_Notebooks/zero_shot_M.ipynb",
      "https://raw.githubusercontent.com/AlexandrosFerles/NIPS_2019_Reproducibilty_Challenge_Zero-shot_Knowledge_Transfer_via_Adversarial_Belief_Matching/master/src/PyTorch/Colab_Notebooks/zero_shot.ipynb",
      "https://raw.githubusercontent.com/AlexandrosFerles/NIPS_2019_Reproducibilty_Challenge_Zero-shot_Knowledge_Transfer_via_Adversarial_Belief_Matching/master/src/PyTorch/Colab_Notebooks/KD_ATT.ipynb",
      "https://raw.githubusercontent.com/AlexandrosFerles/NIPS_2019_Reproducibilty_Challenge_Zero-shot_Knowledge_Transfer_via_Adversarial_Belief_Matching/master/src/PyTorch/Colab_Notebooks/scratches.ipynb",
      "https://raw.githubusercontent.com/AlexandrosFerles/NIPS_2019_Reproducibilty_Challenge_Zero-shot_Knowledge_Transfer_via_Adversarial_Belief_Matching/master/src/PyTorch/Colab_Notebooks/modified_zero_shot.ipynb"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/AlexandrosFerles/NIPS_2019_Reproducibilty_Challenge_Zero-shot_Knowledge_Transfer_via_Adversarial_Belief_Matching/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "NeurIPS 2019 Reproducibilty Challenge \"Zero-shot Knowledge Transfer via Adversarial Belief Matching\"",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "NIPS_2019_Reproducibilty_Challenge_Zero-shot_Knowledge_Transfer_via_Adversarial_Belief_Matching",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "AlexandrosFerles",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/AlexandrosFerles/NIPS_2019_Reproducibilty_Challenge_Zero-shot_Knowledge_Transfer_via_Adversarial_Belief_Matching/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "For all the experiments listed on the main report and its 'Appendix' section, we provide the corresponding configuration files in JSON format so that you can re-train a Wide ResNet of your choice under the same circumstances as we did. \nFeel free to manipulate the config files to run your own experiments. \n\nAdditionally, we have provided all necessary pre-trained documents needed for the experiments (WRN scratches, zero-shot and few-shot trained models for extra experiments and adversarial belief matching) in the 'PreTrainedModels' folder.  The folder structure has already been taken care of, so please note that changing a file location requires an assignment of different file paths in the training codes. \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Train a scratch of Wide ResNet-16-1 on CIFAR: \n```\npython train_scratches.py --config configs/scratch_configs/WRN-16-1-scratch-cifar.json\n```\n\nTrain a no-teacher WRN-16-1 with M=10 samples per class on SVHN:\n```\npython train_no_teacher.py --config configs/no_teacher_configs/SVHN_KD_ATT_M10.json\n```\n\nTrain a WRN-16-1 on CIFAR with M=25 samples per class and few-shot knowledge distillation from WRN-40-2:\n```\npython train_kd_att.py --config configs/kd_att_configs/CIFAR10_KD_ATT_M25.json\n```\n\nTrain a WRN-40-2, WRN-40-1 teacher-student pair on CIFAR with M=200 samples per class:\n\n```\npython train_kd_att.py --config configs/kd_att_configs/CIFAR10_KD_ATT_TEACHER_WRN_40_2_STUDENT_WRN_40_1.json\n```\n\nRepeat the above pair in a zero-shot knowledge transfer setting:\n\n```\npython train_reproducibility_zero_shot.py --config configs/zero_shot_configs/CIFAR10_ZERO_SHOT_TEACHER_WRN_40_2_STUDENT_WRN_40_1.json\n```\n\nOr use our own method to do so:\n```\npython train_modified_zero_shot.py --config configs/zero_shot_configs/CIFAR10_ZERO_SHOT_TEACHER_WRN_40_2_STUDENT_WRN_40_1.json\n```\n\nUpdate a zero-shot pre-trained WRN-16-1 on SVHN with few-shot attention transfer from its WRN-40-2 teacher (also used on the zero-shot pre-training) with M=50 samples per class:\n\n```\npython train_with_extra_M_samples_zero_shot.py --config configs/extra_M_configs/SVHN_ZERO_SHOT_M50.json\n```\n\nAnd again, try the same update setting on a network trained by our method:\n```\npython train_with_extra_M_samples_zero_shot.py --config configs/extra_M_configs/SVHN_ZERO_SHOT_M50_MODIFIED.json\n```\n\nFinally, measure belief matching between Zero-Shot and Few-Shot WRNs-16-1 with their WRN-40-2 teacher:\n```\npython adversarial_belief_matching.py --config configs/abm_configs/ABM_ZERO_SHOT_CIFAR.json && python adversarial_belief_matching.py --config configs/abm_configs/ABM_ZERO_SHOT_SVHN.json\n``` \n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 8,
      "date": "Mon, 27 Dec 2021 15:48:08 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Train a scratch of Wide ResNet-16-1 on CIFAR: \n```\npython train_scratches.py --config configs/scratch_configs/WRN-16-1-scratch-cifar.json\n```\n\nTrain a no-teacher WRN-16-1 with M=10 samples per class on SVHN:\n```\npython train_no_teacher.py --config configs/no_teacher_configs/SVHN_KD_ATT_M10.json\n```\n\nTrain a WRN-16-1 on CIFAR with M=25 samples per class and few-shot knowledge distillation from WRN-40-2:\n```\npython train_kd_att.py --config configs/kd_att_configs/CIFAR10_KD_ATT_M25.json\n```\n\nTrain a WRN-40-2, WRN-40-1 teacher-student pair on CIFAR with M=200 samples per class:\n\n```\npython train_kd_att.py --config configs/kd_att_configs/CIFAR10_KD_ATT_TEACHER_WRN_40_2_STUDENT_WRN_40_1.json\n```\n\nRepeat the above pair in a zero-shot knowledge transfer setting:\n\n```\npython train_reproducibility_zero_shot.py --config configs/zero_shot_configs/CIFAR10_ZERO_SHOT_TEACHER_WRN_40_2_STUDENT_WRN_40_1.json\n```\n\nOr use our own method to do so:\n```\npython train_modified_zero_shot.py --config configs/zero_shot_configs/CIFAR10_ZERO_SHOT_TEACHER_WRN_40_2_STUDENT_WRN_40_1.json\n```\n\nUpdate a zero-shot pre-trained WRN-16-1 on SVHN with few-shot attention transfer from its WRN-40-2 teacher (also used on the zero-shot pre-training) with M=50 samples per class:\n\n```\npython train_with_extra_M_samples_zero_shot.py --config configs/extra_M_configs/SVHN_ZERO_SHOT_M50.json\n```\n\nAnd again, try the same update setting on a network trained by our method:\n```\npython train_with_extra_M_samples_zero_shot.py --config configs/extra_M_configs/SVHN_ZERO_SHOT_M50_MODIFIED.json\n```\n\nFinally, measure belief matching between Zero-Shot and Few-Shot WRNs-16-1 with their WRN-40-2 teacher:\n```\npython adversarial_belief_matching.py --config configs/abm_configs/ABM_ZERO_SHOT_CIFAR.json && python adversarial_belief_matching.py --config configs/abm_configs/ABM_ZERO_SHOT_SVHN.json\n``` \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "We publicly share a Dropbox [folder](https://www.dropbox.com/sh/xuk69az4dlw26uu/AAAG2v_tgXrivL_dSHd486a9a?dl=0) with several checkpoint files for our trained model. We have also compiled a few [Google Colaboratory](https://colab.research.google.com) notebooks that present some of our most interesting results based on these checkpoints. You can upload and use them (remember to enable GPU acceleration!) for inference.   \n\n",
      "technique": "Header extraction"
    }
  ]
}