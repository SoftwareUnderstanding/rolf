{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1608.03983",
      "https://arxiv.org/abs/1704.00109"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/PatriciaRodrigues1994/pytorch-facebook-udacity-challenge",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-03-02T12:01:28Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-12-19T12:52:58Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9816334572151919
      ],
      "excerpt": "PyTorch implementation of a Deep learning network to identify 102 different types of flowers (PyTorch Scholarship Challenge).    \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9359513570754461,
        0.945565424394362,
        0.9817628977812844,
        0.9535505450060664,
        0.9212594157040397,
        0.9746142051881074,
        0.9567588029116127,
        0.9688101563002213,
        0.8944259288264839,
        0.8570609438173347,
        0.9817243179146047
      ],
      "excerpt": "In addition, the repository contains a utility for testing the performance of a model on the original flower dataset or alternatively on a dataset obtained by downloading the first 10 resulting images from Google, querying it by the name of the flower categories. \nThe repository contains 3 different implementation techniques :       \nimage-classifier-project-with-sgdr-warm-restarts    \n      This is based on the following paper. The basic idea contains the following points :   \n      a.  Reset the learning rate every so many iterations so that the model may be able to more easily pop out of a local minimum if it appears to be stuck. \n      b.  We know we will most likely get closer to a global minimum the more iterations we do through our dataset, we need a way to lengthen the time spent decreasing our learning rate. Instead of restarting every epoch, we can lengthen the number of epochs in a multiplicative way so that the first cycle will decrease over the span of 1 epoch, the second over the span of 2 epochs, and the third using 4 epochs, etc.  \nresnet50-with-snapshots     \n    This is based on the following paper  \n    The implementation contains ways to train once and get m models, giving an ensemble of models by training just once. \nimage-classifier-project-resnet50-final    \n     This is the final implememntation with the best validation accuracy for the model. Steps followed for this are :    \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Implementations of the various techniques using to solve the Facebook Pytorch Udacity Challenge.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/PatriciaRodrigues1994/pytorch-facebook-udacity-challenge/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Fri, 24 Dec 2021 14:09:13 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/PatriciaRodrigues1994/pytorch-facebook-udacity-challenge/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "PatriciaRodrigues1994/pytorch-facebook-udacity-challenge",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/PatriciaRodrigues1994/pytorch-facebook-udacity-challenge/master/resnet50-with-snapshots.ipynb",
      "https://raw.githubusercontent.com/PatriciaRodrigues1994/pytorch-facebook-udacity-challenge/master/image-classifier-project-with-sgdr-warm-restarts.ipynb",
      "https://raw.githubusercontent.com/PatriciaRodrigues1994/pytorch-facebook-udacity-challenge/master/image-classifier-project-resnet50-final.ipynb"
    ],
    "technique": "File Exploration"
  },
  "invocation": [
    {
      "confidence": [
        0.8437612238279277
      ],
      "excerpt": "     d. Train last layer with data augmentation (i.e. precompute=False) for 2-3 epochs with cycle_len=1 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/PatriciaRodrigues1994/pytorch-facebook-udacity-challenge/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "pytorch-facebook-udacity-challenge",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pytorch-facebook-udacity-challenge",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "PatriciaRodrigues1994",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/PatriciaRodrigues1994/pytorch-facebook-udacity-challenge/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Fri, 24 Dec 2021 14:09:13 GMT"
    },
    "technique": "GitHub API"
  }
}