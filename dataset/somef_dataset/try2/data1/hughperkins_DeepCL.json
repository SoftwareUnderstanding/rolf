{
  "citation": [
    {
      "confidence": [
        0.8840467439138965
      ],
      "excerpt": "open a cmd \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8875925321434643,
        0.9153195662974134,
        0.8709273166115206
      ],
      "excerpt": "If you're using Clover, you might want to look at: \nthis thread https://github.com/hughperkins/DeepCL/issues/35 \nthis branch https://github.com/hughperkins/DeepCL/tree/clover-compatibility \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9375414872463178
      ],
      "excerpt": "2017 May 2nd: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9104388306336967
      ],
      "excerpt": "7th August 2016: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9104388306336967
      ],
      "excerpt": "29th July 2016: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9104388306336967
      ],
      "excerpt": "26th July 2016: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9104388306336967
      ],
      "excerpt": "4th January 2016: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9104388306336967
      ],
      "excerpt": "3rd January 2016: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8090016440670298
      ],
      "excerpt": "call dist\\bin\\activate.bat \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8955886365383559,
        0.8955886365383559
      ],
      "excerpt": "source env/bin/activate \nsource dist/bin/activate.sh \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9166139205764435,
        0.9166139205764435,
        0.8460639637017967,
        0.8460639637017967
      ],
      "excerpt": "visual studio 2010 32-bit python 2.7 \nvisual studio 2010 32-bit python 3.4 \nvisual studio 2010 64-bit python 2.7 \nvisual studio 2010 64-bit python 3.4 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8494427315343956
      ],
      "excerpt": "if you want to use lua with OpenCL, please consider using cltorch and clnn \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hughperkins/DeepCL",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2014-12-24T15:44:36Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-12T23:53:12Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8667618337859181
      ],
      "excerpt": "* If it's on my list of things I was going to do sooner or later anyway (see below), I might do it sooner rather than later. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9166389027525648
      ],
      "excerpt": "please feel free to fork this repository, tweak things, send a pull request.  Or get in contact. Or both :-) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.949416042258344
      ],
      "excerpt": "Note that Clover is NOT supported, these are just provided as \"starting-points\", in case someone wants to dabble in this :) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8054308822811426
      ],
      "excerpt": "Thank you to my employer ASAPP for providing me use of said Mac Sierra :-) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9369247915561668
      ],
      "excerpt": "(note: python2.7 continues to work as before on all of Windows 32/64, linux, Mac) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8067643654787011
      ],
      "excerpt": "fixed some bugs in manifest loader \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9968029537584643,
        0.9260920198443316
      ],
      "excerpt": "Week of 26th October: \ncreated branch clblas-2.8.0, which works with Visual Studio 2015.  It uses the latest 2.8.x release of clBLAS.  Thank you to jakakonda for helping to test this and get it working. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8177619146378203
      ],
      "excerpt": "created ClBlasHelper, to handle Gemm and Gemv \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008775228180506
      ],
      "excerpt": "week up to Aug 17th: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8692149789320738,
        0.9671719919046481
      ],
      "excerpt": "To get in contact \nJust create an issues, in github, in the top right of this page.  Don't worry about whether you think the issue sounds silly or anything.  The more feedback the better! \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "OpenCL library to train deep convolutional neural networks",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hughperkins/DeepCL/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 198,
      "date": "Mon, 27 Dec 2021 02:10:35 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/hughperkins/DeepCL/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "hughperkins/DeepCL",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/hughperkins/DeepCL/master/python/build.sh",
      "https://raw.githubusercontent.com/hughperkins/DeepCL/master/jenkins/linux-32-py27.sh",
      "https://raw.githubusercontent.com/hughperkins/DeepCL/master/jenkins/linux32-py.sh",
      "https://raw.githubusercontent.com/hughperkins/DeepCL/master/jenkins/linux64-py.sh",
      "https://raw.githubusercontent.com/hughperkins/DeepCL/master/jenkins/jjb.sh",
      "https://raw.githubusercontent.com/hughperkins/DeepCL/master/jenkins/perf-test.sh",
      "https://raw.githubusercontent.com/hughperkins/DeepCL/master/jenkins/update.sh",
      "https://raw.githubusercontent.com/hughperkins/DeepCL/master/jenkins/linux-64-py34.sh",
      "https://raw.githubusercontent.com/hughperkins/DeepCL/master/jenkins/linux-32-py34.sh",
      "https://raw.githubusercontent.com/hughperkins/DeepCL/master/jenkins/linux-cpp.sh",
      "https://raw.githubusercontent.com/hughperkins/DeepCL/master/jenkins/linux32-cpp.sh",
      "https://raw.githubusercontent.com/hughperkins/DeepCL/master/jenkins/linux-64-py27.sh",
      "https://raw.githubusercontent.com/hughperkins/DeepCL/master/jenkins/linux64-cpp-unittests.sh",
      "https://raw.githubusercontent.com/hughperkins/DeepCL/master/jenkins/linux64-cpp.sh",
      "https://raw.githubusercontent.com/hughperkins/DeepCL/master/test/scripts/test_manifestloader.sh",
      "https://raw.githubusercontent.com/hughperkins/DeepCL/master/src/activate.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This section installs the native libraries, and the command-line tools.  You always need to do this part, even if you will use the Python wrappers.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8906083029847109
      ],
      "excerpt": "run call dist\\bin\\activate.bat (adjusting the path appropriately for wherever you downloaded deepcl binaries to) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9443325268207363,
        0.9451874765334369
      ],
      "excerpt": "(New!), you can choose which gpu to run tests on now, eg: deepcl_unittests gpuindex=1 \nNote that you need to \"activate\" the installation each time you open a new cmd prompt (or you could add appropriate environment variables permanently, using Control Panel | System | Advanced System Settings | Environment Variables) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9440421907854313
      ],
      "excerpt": "in a bash prompt, run source dist/bin/activate.sh (adjust the path appropriate for wherever you untarred the binaries tar file to) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9443325268207363,
        0.9826186538630264,
        0.8587311526435341,
        0.9959780165854154
      ],
      "excerpt": "(New!), you can choose which gpu to run tests on now, eg: deepcl_unittests gpuindex=1 \nNote that you need to \"activate\" the installation each time you open a new bash prompt (or you can call activate.sh from your .bashrc file) \nmake sure you already installed the native library, and \"activate\"d it, by doing call dist\\bin\\activate.bat, or source dist/bin/activate.sh \nrun pip install --pre DeepCL \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9568746570129847,
        0.8561954770148191
      ],
      "excerpt": "Building from source is only needed if installing from binaries doesn't work for your configuration, or if you want to modify DeepCL. \nSee Build.md \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8384426295401389
      ],
      "excerpt": "* If it's to do with usability, I will try to make that a priority \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9748709027320682,
        0.9748709027320682,
        0.9412303154846907
      ],
      "excerpt": "Intel HD Graphics 530 GPU \nRadeon Pro 450 GPU \nThis latest EasyCL lets you use environment variable CL_GPUOFFSET to select gpus, eg set to 1 for second GPU, or 2 for third \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.943241593909058,
        0.929386245382383,
        0.8153159444933397,
        0.9682961315835017
      ],
      "excerpt": "\"standard\" version of windows compiler changed from msvc2010 to msvc2015 update 3  (no change to linux/mac) \n\"standard\" version of python 3.x on windows changed from 3.4 to 3.5  (no change to linux/mac) \n(note: python2.7 continues to work as before on all of Windows 32/64, linux, Mac) \nstandard c++ version on linux/mac changed from c++0x to c++11 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8837680365796365
      ],
      "excerpt": "python fixes: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8286622239910811
      ],
      "excerpt": "fixed a number of build warnings on Mac, both in OpenCL build, and C++ build \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8861651128324225
      ],
      "excerpt": "create Mac OS X build on Travis, and fix the build, https://travis-ci.org/hughperkins/DeepCL \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9529258308808579
      ],
      "excerpt": "installation of 8.x from binaries on Windows works now, by doing, eg on 32-bit Windows 7, and assuming you already activated an appropriate python environment (assumes 7-zip is installed, in default location, otherwise do the unzip by hand): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9488986555340193
      ],
      "excerpt": "rem following command is likewgetin linux: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8911501970405323
      ],
      "excerpt": "rem following command is liketar -xf` in linux: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9959163716291661
      ],
      "excerpt": "pip install --pre DeepCL \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8604886344412378,
        0.8902627162932362,
        0.9906248903846466
      ],
      "excerpt": "* Aug 26th: installation of 8.x from binaries on linux works now, by doing, eg on 64-bit Ubuntu 14.04: \nmkdir 8.0.0rc4 \ncd 8.0.0rc4 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.844564981998935,
        0.8799912836851375,
        0.8512599312397078,
        0.9959163716291661
      ],
      "excerpt": "virtualenv env \nsource env/bin/activate \nsource dist/bin/activate.sh \npip install --pre DeepCL \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8878868244003599
      ],
      "excerpt": "test by doing python -c \"import PyDeepCL; cl = PyDeepCL.DeepCL()\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8291693158813308
      ],
      "excerpt": "no longer need to specify the number of images in the first line of the manifest file \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8303939156014152
      ],
      "excerpt": "\"c:\\program files\\7-Zip\\7z.exe\" x deepcl-win32-v8.0.0rc8.zip \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9141233739123581
      ],
      "excerpt": "python -c \"import PyDeepCL; cl = PyDeepCL.DeepCL()\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9141233739123581
      ],
      "excerpt": "python -c \"import PyDeepCL; cl = PyDeepCL.DeepCL()\" \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/hughperkins/DeepCL/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "C",
      "Python",
      "CMake",
      "JavaScript",
      "Batchfile",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Mozilla Public License 2.0",
      "url": "https://api.github.com/licenses/mpl-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Mozilla Public License, version 2.0\\n\\n1. Definitions\\n\\n1.1. \"Contributor\"\\n\\n     means each individual or legal entity that creates, contributes to the\\n     creation of, or owns Covered Software.\\n\\n1.2. \"Contributor Version\"\\n\\n     means the combination of the Contributions of others (if any) used by a\\n     Contributor and that particular Contributor\\'s Contribution.\\n\\n1.3. \"Contribution\"\\n\\n     means Covered Software of a particular Contributor.\\n\\n1.4. \"Covered Software\"\\n\\n     means Source Code Form to which the initial Contributor has attached the\\n     notice in Exhibit A, the Executable Form of such Source Code Form, and\\n     Modifications of such Source Code Form, in each case including portions\\n     thereof.\\n\\n1.5. \"Incompatible With Secondary Licenses\"\\n     means\\n\\n     a. that the initial Contributor has attached the notice described in\\n        Exhibit B to the Covered Software; or\\n\\n     b. that the Covered Software was made available under the terms of\\n        version 1.1 or earlier of the License, but not also under the terms of\\n        a Secondary License.\\n\\n1.6. \"Executable Form\"\\n\\n     means any form of the work other than Source Code Form.\\n\\n1.7. \"Larger Work\"\\n\\n     means a work that combines Covered Software with other material, in a\\n     separate file or files, that is not Covered Software.\\n\\n1.8. \"License\"\\n\\n     means this document.\\n\\n1.9. \"Licensable\"\\n\\n     means having the right to grant, to the maximum extent possible, whether\\n     at the time of the initial grant or subsequently, any and all of the\\n     rights conveyed by this License.\\n\\n1.10. \"Modifications\"\\n\\n     means any of the following:\\n\\n     a. any file in Source Code Form that results from an addition to,\\n        deletion from, or modification of the contents of Covered Software; or\\n\\n     b. any new file in Source Code Form that contains any Covered Software.\\n\\n1.11. \"Patent Claims\" of a Contributor\\n\\n      means any patent claim(s), including without limitation, method,\\n      process, and apparatus claims, in any patent Licensable by such\\n      Contributor that would be infringed, but for the grant of the License,\\n      by the making, using, selling, offering for sale, having made, import,\\n      or transfer of either its Contributions or its Contributor Version.\\n\\n1.12. \"Secondary License\"\\n\\n      means either the GNU General Public License, Version 2.0, the GNU Lesser\\n      General Public License, Version 2.1, the GNU Affero General Public\\n      License, Version 3.0, or any later versions of those licenses.\\n\\n1.13. \"Source Code Form\"\\n\\n      means the form of the work preferred for making modifications.\\n\\n1.14. \"You\" (or \"Your\")\\n\\n      means an individual or a legal entity exercising rights under this\\n      License. For legal entities, \"You\" includes any entity that controls, is\\n      controlled by, or is under common control with You. For purposes of this\\n      definition, \"control\" means (a) the power, direct or indirect, to cause\\n      the direction or management of such entity, whether by contract or\\n      otherwise, or (b) ownership of more than fifty percent (50%) of the\\n      outstanding shares or beneficial ownership of such entity.\\n\\n\\n2. License Grants and Conditions\\n\\n2.1. Grants\\n\\n     Each Contributor hereby grants You a world-wide, royalty-free,\\n     non-exclusive license:\\n\\n     a. under intellectual property rights (other than patent or trademark)\\n        Licensable by such Contributor to use, reproduce, make available,\\n        modify, display, perform, distribute, and otherwise exploit its\\n        Contributions, either on an unmodified basis, with Modifications, or\\n        as part of a Larger Work; and\\n\\n     b. under Patent Claims of such Contributor to make, use, sell, offer for\\n        sale, have made, import, and otherwise transfer either its\\n        Contributions or its Contributor Version.\\n\\n2.2. Effective Date\\n\\n     The licenses granted in Section 2.1 with respect to any Contribution\\n     become effective for each Contribution on the date the Contributor first\\n     distributes such Contribution.\\n\\n2.3. Limitations on Grant Scope\\n\\n     The licenses granted in this Section 2 are the only rights granted under\\n     this License. No additional rights or licenses will be implied from the\\n     distribution or licensing of Covered Software under this License.\\n     Notwithstanding Section 2.1(b) above, no patent license is granted by a\\n     Contributor:\\n\\n     a. for any code that a Contributor has removed from Covered Software; or\\n\\n     b. for infringements caused by: (i) Your and any other third party\\'s\\n        modifications of Covered Software, or (ii) the combination of its\\n        Contributions with other software (except as part of its Contributor\\n        Version); or\\n\\n     c. under Patent Claims infringed by Covered Software in the absence of\\n        its Contributions.\\n\\n     This License does not grant any rights in the trademarks, service marks,\\n     or logos of any Contributor (except as may be necessary to comply with\\n     the notice requirements in Section 3.4).\\n\\n2.4. Subsequent Licenses\\n\\n     No Contributor makes additional grants as a result of Your choice to\\n     distribute the Covered Software under a subsequent version of this\\n     License (see Section 10.2) or under the terms of a Secondary License (if\\n     permitted under the terms of Section 3.3).\\n\\n2.5. Representation\\n\\n     Each Contributor represents that the Contributor believes its\\n     Contributions are its original creation(s) or it has sufficient rights to\\n     grant the rights to its Contributions conveyed by this License.\\n\\n2.6. Fair Use\\n\\n     This License is not intended to limit any rights You have under\\n     applicable copyright doctrines of fair use, fair dealing, or other\\n     equivalents.\\n\\n2.7. Conditions\\n\\n     Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in\\n     Section 2.1.\\n\\n\\n3. Responsibilities\\n\\n3.1. Distribution of Source Form\\n\\n     All distribution of Covered Software in Source Code Form, including any\\n     Modifications that You create or to which You contribute, must be under\\n     the terms of this License. You must inform recipients that the Source\\n     Code Form of the Covered Software is governed by the terms of this\\n     License, and how they can obtain a copy of this License. You may not\\n     attempt to alter or restrict the recipients\\' rights in the Source Code\\n     Form.\\n\\n3.2. Distribution of Executable Form\\n\\n     If You distribute Covered Software in Executable Form then:\\n\\n     a. such Covered Software must also be made available in Source Code Form,\\n        as described in Section 3.1, and You must inform recipients of the\\n        Executable Form how they can obtain a copy of such Source Code Form by\\n        reasonable means in a timely manner, at a charge no more than the cost\\n        of distribution to the recipient; and\\n\\n     b. You may distribute such Executable Form under the terms of this\\n        License, or sublicense it under different terms, provided that the\\n        license for the Executable Form does not attempt to limit or alter the\\n        recipients\\' rights in the Source Code Form under this License.\\n\\n3.3. Distribution of a Larger Work\\n\\n     You may create and distribute a Larger Work under terms of Your choice,\\n     provided that You also comply with the requirements of this License for\\n     the Covered Software. If the Larger Work is a combination of Covered\\n     Software with a work governed by one or more Secondary Licenses, and the\\n     Covered Software is not Incompatible With Secondary Licenses, this\\n     License permits You to additionally distribute such Covered Software\\n     under the terms of such Secondary License(s), so that the recipient of\\n     the Larger Work may, at their option, further distribute the Covered\\n     Software under the terms of either this License or such Secondary\\n     License(s).\\n\\n3.4. Notices\\n\\n     You may not remove or alter the substance of any license notices\\n     (including copyright notices, patent notices, disclaimers of warranty, or\\n     limitations of liability) contained within the Source Code Form of the\\n     Covered Software, except that You may alter any license notices to the\\n     extent required to remedy known factual inaccuracies.\\n\\n3.5. Application of Additional Terms\\n\\n     You may choose to offer, and to charge a fee for, warranty, support,\\n     indemnity or liability obligations to one or more recipients of Covered\\n     Software. However, You may do so only on Your own behalf, and not on\\n     behalf of any Contributor. You must make it absolutely clear that any\\n     such warranty, support, indemnity, or liability obligation is offered by\\n     You alone, and You hereby agree to indemnify every Contributor for any\\n     liability incurred by such Contributor as a result of warranty, support,\\n     indemnity or liability terms You offer. You may include additional\\n     disclaimers of warranty and limitations of liability specific to any\\n     jurisdiction.\\n\\n4. Inability to Comply Due to Statute or Regulation\\n\\n   If it is impossible for You to comply with any of the terms of this License\\n   with respect to some or all of the Covered Software due to statute,\\n   judicial order, or regulation then You must: (a) comply with the terms of\\n   this License to the maximum extent possible; and (b) describe the\\n   limitations and the code they affect. Such description must be placed in a\\n   text file included with all distributions of the Covered Software under\\n   this License. Except to the extent prohibited by statute or regulation,\\n   such description must be sufficiently detailed for a recipient of ordinary\\n   skill to be able to understand it.\\n\\n5. Termination\\n\\n5.1. The rights granted under this License will terminate automatically if You\\n     fail to comply with any of its terms. However, if You become compliant,\\n     then the rights granted under this License from a particular Contributor\\n     are reinstated (a) provisionally, unless and until such Contributor\\n     explicitly and finally terminates Your grants, and (b) on an ongoing\\n     basis, if such Contributor fails to notify You of the non-compliance by\\n     some reasonable means prior to 60 days after You have come back into\\n     compliance. Moreover, Your grants from a particular Contributor are\\n     reinstated on an ongoing basis if such Contributor notifies You of the\\n     non-compliance by some reasonable means, this is the first time You have\\n     received notice of non-compliance with this License from such\\n     Contributor, and You become compliant prior to 30 days after Your receipt\\n     of the notice.\\n\\n5.2. If You initiate litigation against any entity by asserting a patent\\n     infringement claim (excluding declaratory judgment actions,\\n     counter-claims, and cross-claims) alleging that a Contributor Version\\n     directly or indirectly infringes any patent, then the rights granted to\\n     You by any and all Contributors for the Covered Software under Section\\n     2.1 of this License shall terminate.\\n\\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user\\n     license agreements (excluding distributors and resellers) which have been\\n     validly granted by You or Your distributors under this License prior to\\n     termination shall survive termination.\\n\\n6. Disclaimer of Warranty\\n\\n   Covered Software is provided under this License on an \"as is\" basis,\\n   without warranty of any kind, either expressed, implied, or statutory,\\n   including, without limitation, warranties that the Covered Software is free\\n   of defects, merchantable, fit for a particular purpose or non-infringing.\\n   The entire risk as to the quality and performance of the Covered Software\\n   is with You. Should any Covered Software prove defective in any respect,\\n   You (not any Contributor) assume the cost of any necessary servicing,\\n   repair, or correction. This disclaimer of warranty constitutes an essential\\n   part of this License. No use of  any Covered Software is authorized under\\n   this License except under this disclaimer.\\n\\n7. Limitation of Liability\\n\\n   Under no circumstances and under no legal theory, whether tort (including\\n   negligence), contract, or otherwise, shall any Contributor, or anyone who\\n   distributes Covered Software as permitted above, be liable to You for any\\n   direct, indirect, special, incidental, or consequential damages of any\\n   character including, without limitation, damages for lost profits, loss of\\n   goodwill, work stoppage, computer failure or malfunction, or any and all\\n   other commercial damages or losses, even if such party shall have been\\n   informed of the possibility of such damages. This limitation of liability\\n   shall not apply to liability for death or personal injury resulting from\\n   such party\\'s negligence to the extent applicable law prohibits such\\n   limitation. Some jurisdictions do not allow the exclusion or limitation of\\n   incidental or consequential damages, so this exclusion and limitation may\\n   not apply to You.\\n\\n8. Litigation\\n\\n   Any litigation relating to this License may be brought only in the courts\\n   of a jurisdiction where the defendant maintains its principal place of\\n   business and such litigation shall be governed by laws of that\\n   jurisdiction, without reference to its conflict-of-law provisions. Nothing\\n   in this Section shall prevent a party\\'s ability to bring cross-claims or\\n   counter-claims.\\n\\n9. Miscellaneous\\n\\n   This License represents the complete agreement concerning the subject\\n   matter hereof. If any provision of this License is held to be\\n   unenforceable, such provision shall be reformed only to the extent\\n   necessary to make it enforceable. Any law or regulation which provides that\\n   the language of a contract shall be construed against the drafter shall not\\n   be used to construe this License against a Contributor.\\n\\n\\n10. Versions of the License\\n\\n10.1. New Versions\\n\\n      Mozilla Foundation is the license steward. Except as provided in Section\\n      10.3, no one other than the license steward has the right to modify or\\n      publish new versions of this License. Each version will be given a\\n      distinguishing version number.\\n\\n10.2. Effect of New Versions\\n\\n      You may distribute the Covered Software under the terms of the version\\n      of the License under which You originally received the Covered Software,\\n      or under the terms of any subsequent version published by the license\\n      steward.\\n\\n10.3. Modified Versions\\n\\n      If you create software not governed by this License, and you want to\\n      create a new license for such software, you may create and use a\\n      modified version of this License if you rename the license and remove\\n      any references to the name of the license steward (except to note that\\n      such modified license differs from this License).\\n\\n10.4. Distributing Source Code Form that is Incompatible With Secondary\\n      Licenses If You choose to distribute Source Code Form that is\\n      Incompatible With Secondary Licenses under the terms of this version of\\n      the License, the notice described in Exhibit B of this License must be\\n      attached.\\n\\nExhibit A - Source Code Form License Notice\\n\\n      This Source Code Form is subject to the\\n      terms of the Mozilla Public License, v.\\n      2.0. If a copy of the MPL was not\\n      distributed with this file, You can\\n      obtain one at\\n      http://mozilla.org/MPL/2.0/.\\n\\nIf it is not possible or desirable to put the notice in a particular file,\\nthen You may include the notice in a location (such as a LICENSE file in a\\nrelevant directory) where a recipient would be likely to look for such a\\nnotice.\\n\\nYou may add additional accurate notices of copyright ownership.\\n\\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\\n\\n      This Source Code Form is \"Incompatible\\n      With Secondary Licenses\", as defined by\\n      the Mozilla Public License, v. 2.0.\\n\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "DeepCL",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "DeepCL",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "hughperkins",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/hughperkins/DeepCL/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "Compared to v8.1.3:\n- added ScaledTanh on python\n- added ELU\n- removed some build warnings on Mac\n- various fixes and tweaks (see https://github.com/hughperkins/DeepCL/commits/v8.3.1 )\n\nNative library downloads for linux and Windows:\n\n```\nhttp://deepcl.hughperkins.com/Downloads/\nusage instructions in the readme, https://github.com/hughperkins/DeepCL\n```\n\nPython packages on pypi: https://pypi.python.org/pypi/DeepCL/8.3.1\n",
        "dateCreated": "2016-03-23T12:31:08Z",
        "datePublished": "2016-03-27T20:06:38Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v8.3.1",
        "name": "v8.3.1",
        "tag_name": "v8.3.1",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v8.3.1",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/2896442",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v8.3.1"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "Code changes:\n- removed the norbloader unit test, which systematically fails (since requires norb dataset to be downloaded)\n\nRelease changes:\n- Edward Geist has very kindly created a Mac OS X Homebrew formula for this release, DeepCL v8.1.3, which you can find at: https://gist.github.com/GOFAI/53a25ff22f31ec144608\n\nNative library downloads for linux and Windows:\n- http://deepcl.hughperkins.com/Downloads/\n- usage instructions in the readme, https://github.com/hughperkins/DeepCL\n",
        "dateCreated": "2015-11-22T01:26:22Z",
        "datePublished": "2015-11-22T03:30:57Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v8.1.3",
        "name": "v8.1.3",
        "tag_name": "v8.1.3",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v8.1.3",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/2166375",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v8.1.3"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "(these notes are kind of a bit retroactive, but better late than never :-) I've just copied them from the 8.0.0rc9 notes actually...)\n\nNative library downloads:\n- http://deepcl.hughperkins.com/Downloads/\n- usage instructions in the readme, https://github.com/hughperkins/DeepCL\n\nPython wrappers:\n- first activate the native libraries, as per the native library readme above\n- now do pip install --pre DeepCL\n- do python -c \"import PyDeepCL; cl = PyDeepCL.DeepCL()\" to check all is working\n\nChanges since 5.x:\n- added clblas\n- added im2col\n- python wrappers now a thin layer around the standard native libraries, rather than having separate native library build process for python\n- lua wrappers removed (please use https://github.com/hughperkins/cltorch and https://github.com/hughperkins/clnn if you want to train convolutional neural networks using lua)\n- installation process has changed, so please follow the instructions in the readme\n- the commandline utilities are now called deepcl_train and deepcl_predict, in place of deepclrun, deepclexec, etc\n\n(Note that 6.x only had a single release, then the clblas / build overhaul was immediately started, producing 8.x. I skipped 7.x by accident :-P )\n",
        "dateCreated": "2015-08-28T00:12:47Z",
        "datePublished": "2015-11-21T04:52:35Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v8.0.0",
        "name": "v8.0.0",
        "tag_name": "v8.0.0",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v8.0.0",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/2164475",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v8.0.0"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "Bug fixes mostly (compared to v8.0.0):\n- use int64_t, to ensure 64-bit ints are 64-bit on all platforms\n- add guards to some kernels to prevent crashing on certain geometries\n- python build works on OS X now\n- fixed some OpenCL warnings, and some failing tests\n- python build works now when opencl headers not present\n\nAlso, one minor feature-ette:\n- in python, can call 'getLabels' on a SoftMax layer\n\nNative library downloads (for linux and Windows; Mac you need to build your own for now...):\n- http://deepcl.hughperkins.com/Downloads/\n- usage instructions in the readme, https://github.com/hughperkins/DeepCL\n",
        "dateCreated": "2015-11-20T15:49:40Z",
        "datePublished": "2015-11-21T04:46:44Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v8.1.2",
        "name": "v8.1.2",
        "tag_name": "v8.1.2",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v8.1.2",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/2164470",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v8.1.2"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "Probalby the final `rc` release for 8.0.0, before the first non-rc release.\n\nNative library downloads:\n- http://deepcl.hughperkins.com/Downloads/\n- usage instructions in the readme, https://github.com/hughperkins/DeepCL\n\nPython wrappers:\n- first activate the native libraries, as per the native library readme above\n- now do `pip install --pre DeepCL`\n- do `python -c \"import PyDeepCL; cl = PyDeepCL.DeepCL()\"` to check all is working\n\nChanges since 5.x:\n- added clblas\n- added im2col\n- python wrappers now a thin layer around the standard native libraries, rather than having separate native library build process for python\n- lua wrappers removed (please use https://github.com/hughperkins/cltorch and https://github.com/hughperkins/clnn if you want to train convolutional neural networks using lua)\n- installation process has changed, so please follow the instructions in the readme\n- the commandline utilities are now called `deepcl_train` and `deepcl_predict`, in place of `deepclrun`, `deepclexec`, etc\n\n(Note that 6.x only had a single release, then the clblas / build overhaul was immediately started, producing 8.x.  I skipped 7.x by accident :-P )\n",
        "dateCreated": "2015-08-28T00:04:26Z",
        "datePublished": "2015-08-28T00:19:45Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v8.0.0rc9",
        "name": "v8.0.0rc9",
        "tag_name": "v8.0.0rc9",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v8.0.0rc9",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1734296",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v8.0.0rc9"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "This release doesnt so much add any new features, as deprecate a couple of ones, and hopefully fix a build issue in 5.8 on Python.\n\nChanges this release:\n- lua wrappers removed.  lua is now supported via [cltorch](https://github.com/hughperkins/cltorch) and [clnn](https://github.com/hughperkins/clnn), which are still under development, but fairly far advanced\n- deepclrun and train commands are both deprecated in favor of `deepcl_train`\n- predict becomes `deepcl_predict`\n- under the covers, easycl has been upgraded to use lua kernel templates\n\nPlease download the binaries from http://deepcl.hughperkins.com/Downloads/  For python, you can install via [pypi](https://pypi.python.org/pypi/DeepCL/6.0.0)\n",
        "dateCreated": "2015-06-25T13:16:59Z",
        "datePublished": "2015-06-25T13:57:04Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v6.0.0",
        "name": "v6.0.0",
        "tag_name": "v6.0.0",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v6.0.0",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1460555",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v6.0.0"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "_New:_\n- new commandline option to `predict`, `outputlayer=`, which selects which layer you want to record the output from (ie, doesnt have to be the last layer)\n\n_Bug fixes:_\n- each example in output in text format of `predict` is now on a separate line, rather than all examples from each batch on one single line\n- in `predict`, every other input example is no longer skipped\n- `gpuinfo` works on hd5500 integrated graphics now, without causing display corruption\n\nCommandline tools and c++ library: http://deepcl.hughperkins.com/Downloads\nPython wrapper: https://pypi.python.org/pypi/DeepCL/5.10.2\n",
        "dateCreated": "2015-05-31T06:14:38Z",
        "datePublished": "2015-05-31T06:28:06Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v5.10.2",
        "name": "v5.10.2",
        "tag_name": "v5.10.2",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v5.10.2",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1357620",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v5.10.2"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "_New:_\n- `deepclrun` becomes `train`: handles training, and validation, using labelled data\n- `deepclexec` becomes `predict`: handles creating predictions from unlabelled data\n- `predict` can take input from a file, using GenericLoader, same formats as training, or from stdin\n- `predict` can output to a file, or to stdout, in text or binary format\n\nPlease download commandline version and library from http://deepcl.hughperkins.com/Downloads\nPython wrappers available on pypi at https://pypi.python.org/pypi/DeepCL/5.9.0 and https://pypi.python.org/pypi/DeepCL/v5.9.0 (apparently I need to fix the version so linux and Windows go to the same pypi version)\n",
        "dateCreated": "2015-05-30T15:19:31Z",
        "datePublished": "2015-05-30T15:54:22Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v5.9.0",
        "name": "v5.9.0",
        "tag_name": "v5.9.0",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v5.9.0",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1356520",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v5.9.0"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "_Bug fixes:_\n- clean up some memory leaks in unit tests\n\nDownload from http://deepcl.hughperkins.com/Downloads/\n",
        "dateCreated": "2015-05-28T15:09:07Z",
        "datePublished": "2015-05-28T15:24:06Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v5.8.3",
        "name": "v5.8.3",
        "tag_name": "v5.8.3",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v5.8.3",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1348576",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v5.8.3"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "_Bug fixes:_\n- remove memory leaks in various clMath objects, associated with not deleting kernels\n",
        "dateCreated": "2015-05-28T13:40:30Z",
        "datePublished": "2015-05-28T15:13:13Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v5.8.2",
        "name": "v5.8.2",
        "tag_name": "v5.8.2",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v5.8.2",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1348378",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v5.8.2"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "_Bug fixes:_\n- fixed a memory leak in the random number generator module, which meant that the amount of memory used was excessive, and that using random translations, random patches, or dropout used up all available memory within seconds\n- fixed a bug in the forward1 propagate kernel, which meant that it crashed for certain geometries\n",
        "dateCreated": "2015-05-28T10:16:49Z",
        "datePublished": "2015-05-28T14:40:22Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v5.8.1",
        "name": "v5.8.1",
        "tag_name": "v5.8.1",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v5.8.1",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1347455",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v5.8.1"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "### New:\n- Josef Moudrik has started work on `deepclexec`, to run prediction, on pre-trained weights, for new data samples\n- Added jpeg loader, so can load imagenet data now\n\n### Changes\n- Added dependency on libjpeg-turbo, for the jpeg loader.  This can be turned off in cmake options, if you want\n\n### Changes under the covers\n- factorized applying bias into separate class for forward3 (it was already in a separate OpenCLKernel), and away from the convolutional forward opencl in forward4, and forward1\n- fixed a bug in forward4, where images larger than the square root of the maximum gpu workgroupsize sometimes has incorrect values for the last few pixels\n- migrated to latest version of EasyCL, which handles storing the device dirty flag for us, rather than having lots of flags in our code like `weightsCopiedToHost`, and so on\n- GenericLoaderv2 is now stateful, rather than using static methods as per original GenericLoader\n  - new NetLearnerOnDemandv2 uses GenericLoaderv2, as does new OnDemandBatcherv2\n  - deepclrun migrated to use GenericLoaderv2\n  - GenericLoaderv1Wrapper wraps existing GenericLoader implementations, so no need to re-write those in any way for now, and any new GenericLoader implementations can continue to be v1, via the wrapper, if they dont need state\n  - making GenericLoaderv2 stateful means we can read a jpeg manifest, eg for imagenet et al, once, and then hold it in memory\n",
        "dateCreated": "2015-05-17T14:37:34Z",
        "datePublished": "2015-05-17T15:05:20Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v5.8.0",
        "name": "v5.8.0",
        "tag_name": "v5.8.0",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v5.8.0",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1305288",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v5.8.0"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "### New:\n- added Adadelta\n  - in commandline, 'trainer=adadelta rho=0.9'\n  - in C++, `trainer = new Adadelta( cl, 0.9f );`\n  - In Python and Lua, as in C++\n",
        "dateCreated": "2015-05-04T10:34:57Z",
        "datePublished": "2015-05-04T10:35:48Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v5.7.0",
        "name": "v5.7.0",
        "tag_name": "v5.7.0",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v5.7.0",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1253098",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v5.7.0"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "### New\n- added WeightInitializer abstraction, so can customizer how weights are initialized\n- two implementations:\n  - OriginalInitializer: default, corresponds to initialization method up to now\n  - UniformInitializer: samples uniformly, from a range parameterized by passed in `initialWeights` parameter\n",
        "dateCreated": "2015-05-03T11:03:03Z",
        "datePublished": "2015-05-03T11:05:24Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v5.6.0",
        "name": "v5.6.0",
        "tag_name": "v5.6.0",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v5.6.0",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1249952",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v5.6.0"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "### New\n- added Rmsprop\n  - available in commandline, using `trainer=rmsprop`\n  - available in c++, using `Rmsprop *trainer = new Rmsprop( cl );`, and using it to do training (`trainer->train(...)` etc)\n  - available in lua wrappers, by creating an Rmsprop object, and using for training\n  - available in python wrappers, by creating an Rmsprop object, and using for training\n\nNote: builds ok on Windows.\n",
        "dateCreated": "2015-05-03T08:43:48Z",
        "datePublished": "2015-05-03T08:48:57Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v5.5.0",
        "name": "v5.5.0",
        "tag_name": "v5.5.0",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v5.5.0",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1249831",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v5.5.0"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "### New:\n- added Adagrad\n  - in commandline, use `trainer=adagrad`\n  - In C++, use `Adagrad *adagrad = new Adagrad( cl ); adagrad->setLearningRate( 0.002f );`\n  - In Python and Lua, create an Adagrad instance, as per C++\n\n### Under the hood\n- a bunch of functions added to CLMathWrapper, like: per element inverse, per element add scalar, per element multiply, per element squared, per element square root\n- simplified SGD etc, by moving most stuff from bindState into the Trainer base class\n",
        "dateCreated": "2015-05-03T08:11:34Z",
        "datePublished": "2015-05-03T08:11:45Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v5.4.0",
        "name": "v5.4.0",
        "tag_name": "v5.4.0",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v5.4.0",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1249796",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v5.4.0"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "### New\n- added Nesterov trainer to python wrappers\n- added Nesterov trainer to lua wrappers\n",
        "dateCreated": "2015-05-03T03:35:30Z",
        "datePublished": "2015-05-03T03:36:02Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v5.3.0",
        "name": "v5.3.0",
        "tag_name": "v5.3.0",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v5.3.0",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1249502",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v5.3.0"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "### New:\n- added Nesterov trainer\n  - available from C++ api, and from commandline\n",
        "dateCreated": "2015-05-03T03:28:14Z",
        "datePublished": "2015-05-03T03:29:03Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v5.2.0",
        "name": "v5.2.0",
        "tag_name": "v5.2.0",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v5.2.0",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1249492",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v5.2.0"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "Under the hood:\n- added new CLMathWrapper class, to make per-element gpu array arithmetic easy\n  - migrated SGD and Annealer to use CLMathWrapper\n\nBug fixes:\n- fixed crash in unittests, caused by attempting to reuse kernels across multiple EasyCL instances\n- added appropriate exports, so builds on Windows again now\n",
        "dateCreated": "2015-05-03T01:30:15Z",
        "datePublished": "2015-05-03T01:37:58Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v5.1.0",
        "name": "v5.1.0",
        "tag_name": "v5.1.0",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v5.1.0",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1249386",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v5.1.0"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "### New:\n- Added Annealer trainer, and 'anneal=' commandline option\n  - python and lua wrappers can also create Annealer trainer, as well as the existing SGD trainer\n\n### Changes:\n- bunch of changes to many of the classes now in `src/batch` directory, ie xxxBatcher classes, xxxNetAction type classes, and NetLearnerxxx classes, hence bumped major version to `5`, eg\n  - XXXBatcher.tick: added parameter 'epoch' to 'tick' and 'run' methods\n  - OnDemandBatcher constructor takes in a Batcher\\* object\n  - created new Batcher2, and NetAction2 classes\n  - removed BatchLearner class\n\n### Bug fixes\n- bunch of bugfixes to the python and lua wrappers\n",
        "dateCreated": "2015-05-02T14:04:38Z",
        "datePublished": "2015-05-02T14:06:30Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v5.0.0",
        "name": "v5.0.0",
        "tag_name": "v5.0.0",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v5.0.0",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1247636",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v5.0.0"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "### New:\n- added weight decay to python wrappers.  Accessible by calling `setWeightDecay(0.001)` on SGD object\n- added weight decay to lua wrappers.  Accessible by calling `setWeightDecay(0.001)` on SGD object\n\n### Bug fixes:\n- fixed python test_deepcl.py script to work correctly\n- fixed python wrappers to expose the NetLearner.run() method\n- fixed python benchmarking scripts to work correctly\n",
        "dateCreated": "2015-05-01T09:24:14Z",
        "datePublished": "2015-05-01T09:25:18Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v4.2.1",
        "name": "v4.2.1",
        "tag_name": "v4.2.1",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v4.2.1",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1243253",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v4.2.1"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "### New\n- added weightdecay, where `0` means no decay, and `1` would be full decay to nothing each step\n  - in commandline, add option `weightdecay=0.001` for example\n  - in C++ API, call `setWeightDecay( 0.001f )` on the `SGD` trainer object\n\n### Bug fixes\n- certain kernels were being deleted multiple times, causing a segfault on shutdown, or after exceptions were thrown.  This should be fixed now.\n",
        "dateCreated": "2015-05-01T08:59:02Z",
        "datePublished": "2015-05-01T09:02:23Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v4.1.0",
        "name": "v4.1.0",
        "tag_name": "v4.1.0",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v4.1.0",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1243241",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v4.1.0"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "First stable 4.0.0 release :-)\n\nNo major changes since the last 4.0.0 rc, 4.0.0rc18.  Which is how it should be, right? :-)\n\nThere will probably be some new features added, within 4.x version, hopefully without needing any major structural changes.\n",
        "dateCreated": "2015-05-01T07:58:50Z",
        "datePublished": "2015-05-01T08:03:20Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v4.0.0",
        "name": "v4.0.0",
        "tag_name": "v4.0.0",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v4.0.0",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1243156",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v4.0.0"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "New:\n- momentum added, to commandline, python wrappers, lua wrappers, and c++ api\n- when using one of the APIs, ie c++/lua/python:\n  - new SGD object implements SGD training, and replaces the learningRate parameter in NetLearner etc\n  - new Trainer object represents arbitrary trainers, eg we can create Nesterov trainers etc\n\nChanges:\n- moved python swig wrappers out of main master branch, since they're not production-ready at the moment, and we already have the Cython wrappers, which work well\n- when using one of the APIs, you need to create an EasyCL object first, and pass this into the NeuralNet constructor\n- when using the c++ api, the include file has changed from `NeuralNet.h` to `DeepCL.h`\n- behind the scenes, the OpenCLHelper project has changed name to EasyCL, which is easy to type, and remember\n",
        "dateCreated": "2015-05-01T04:20:53Z",
        "datePublished": "2015-05-01T04:31:01Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v4.0.0rc18",
        "name": "v4.0.0rc18",
        "tag_name": "v4.0.0rc18",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v4.0.0rc18",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1242848",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v4.0.0rc18"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "New:\n- in `deepclrun`, can choose which gpu device you want to use (thank-you Joe Moudrik for this enhancement)\n\nChanges:\n- renamed `propagate` to `forward`, and `backProp` to `backward`.  Changes like this are one reason why this is all in `rc`, and not reached release state yet\n  - there is a page at [doc/Nomenclature.md](doc/Nomenclature.md) describing the new/planned nomenclature, based on the torch neural network package nomenclature, which i think is clean, simple, easy to understand\n- removed the activations from convolutional and fc layers: activation layers are added now using ActivationMaker, or by putting `-relu`, `-tanh` etc into the netdef commandline definition\n  - basically, their existence complicated the architecture, slowing enhancements, increasing the chance of bugs, and duplicating effort\n\nBug fixes:\n- fixed some critical bugs in the new ActivationLayer, that meant it basically didnt work\n",
        "dateCreated": "2015-04-28T23:21:50Z",
        "datePublished": "2015-04-29T00:08:29Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v4.0.0rc16",
        "name": "v4.0.0rc16",
        "tag_name": "v4.0.0rc16",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v4.0.0rc16",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1230168",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v4.0.0rc16"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "### New:\n- added dropout :-)\n- activations now available as separate layers\n  - simply specify 'linear' as the type for the previous convolutional or fullyconnected layer, and then append an appropriate activation layer\n- you can put 'z' at the end of a a convolutional layer in netdef syntax to make it zero-padded\n- Doxygen documentation available for C++ API at http://hughperkins.github.io/DeepCL/4.x.x/html/annotated.html \n\n### Changes:\n- default in netdef syntax is that convolutional layers and fully connected layers are now linear\n\nExample of a new-style netdef, incorporating dropout, making use of linear is the new default, and using the `z` syntax for zero-padding:\n\n``` bash\nnetdef=rt2-8c5z-relu-mp2-16c5z-relu-mp3-150n-drop-tanh-10n\n```\n\n### Binaries:\n- Windows commandline and C++ libraries attached\n- for Python wrappers, in Cython, please use pypi: https://pypi.python.org/pypi/DeepCL/4.0.0rc12 \n",
        "dateCreated": "2015-04-26T09:39:45Z",
        "datePublished": "2015-04-26T09:51:32Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v4.0.0rc12",
        "name": "v4.0.0rc12",
        "tag_name": "v4.0.0rc12",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v4.0.0rc12",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1217891",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v4.0.0rc12"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "Note: this is explicitly _NOT_ a stable release.  Stable releases are the 3.x.x versions for now.  That doesn't mean this is buggy (though it might be :-P ), but it means that if you write code that uses the APIs in this release, the code might break in a later 4.x.x release.\n\nNote that the documentation for this release is on the [4.x.x-snapshot branch](https://github.com/hughperkins/DeepCL/tree/4.x.x-snapshot), or for this specific tag at [v4.0.0rc4](https://github.com/hughperkins/DeepCL/tree/v4.0.0rc4), different from the master branch readmes on the main page.\n\nNew in this release:\n- added swig wrappers for Python, in `python_swig` directory.  These have good/bad points compared to the cython wrappers, so the two can co-exist for a while\n- created [PublicApis.md](https://github.com/hughperkins/DeepCL/tree/v4.0.0rc4/doc/PublicApis.md) document, to document what should be, and is not, stable in the APIs between major version changes\n- started to integrate the lua wrappers, and the Python swig wrappers, into the main build process\n- lua wrappers can be built using `cmake` now, and dont need swig installed, which should plausibly be cross-platform\n- new commandline option `writeweightsinterval`, which will write the weights every this many minutes, even if the current epoch hasnt finished.  Then, if training is interrupted, if you restart with `loadweights=1`, it should continue where it left off :-)\n\nChanges in this release, C++ api:\n- removed C++ templates, everything is `float` now, no more `unsigned char`.  C++ templates are not really directly usable from scripting languages, so made creating python wrappers, lua wrappers etc more painful than I'd like :-)\n- removed the postepoch callbacks from NetLearner et al.  The same functionality is available now by simply calling `tickBatch` or `tickEpoch`, and then doing whatever you want to do afterwards, no callback required :-) This is significantly easier to wrap for lua, python et al\n\nOther news:\n- I set up a jenkins server, so it's easy for me to check the windows builds now :-)  There are 12 build configurations, corresponding to windows vs linux, 32-bit vs 64-bit, and python2.7 vs python3.4 vs C++ library\n",
        "dateCreated": "2015-04-18T09:30:30Z",
        "datePublished": "2015-04-18T09:42:06Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v4.0.0rc4",
        "name": "v4.0.0rc4",
        "tag_name": "v4.0.0rc4",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v4.0.0rc4",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1184445",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v4.0.0rc4"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "New:\n- Lua wrapper\n- QLearner2: refactorized slightly, so no callbacks, easy to wrap from python, lua, etc ...\n\nBugfixes:\n- some critical bugs in QLearner fixed\n",
        "dateCreated": "2015-04-12T23:33:46Z",
        "datePublished": "2015-04-12T23:39:05Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v3.5.0",
        "name": "v3.5.0",
        "tag_name": "v3.5.0",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v3.5.0",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1156635",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v3.5.0"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "New features:\n- q-learning works from python now\n",
        "dateCreated": "2015-04-11T01:01:45Z",
        "datePublished": "2015-04-10T16:18:28Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v3.4.1",
        "name": "v3.4.1",
        "tag_name": "v3.4.1",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v3.4.1",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1150322",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v3.4.1"
      },
      {
        "authorType": "User",
        "author_name": "hughperkins",
        "body": "New features:\n- can directly use mnist-format files, rather than having to use idx-to-mat to convert them to norb-format first\n- added several method to python NeuralNet class\n- added ForceBackpropLayer, which is just a pass-thru layer, but forces next layer to backprop gradients to it (normally, the first couple of layers dont need gradients, so dont request them).  This is useful for benchmarking\n- added asString and getClassName to python Layer class\n\nBug fixes:\n- fixed bug in propagate which crashed with bad_alloc for certain geometries\n",
        "dateCreated": "2015-04-06T12:05:14Z",
        "datePublished": "2015-04-06T14:23:52Z",
        "html_url": "https://github.com/hughperkins/DeepCL/releases/tag/v3.3.0",
        "name": "v3.3.0",
        "tag_name": "v3.3.0",
        "tarball_url": "https://api.github.com/repos/hughperkins/DeepCL/tarball/v3.3.0",
        "url": "https://api.github.com/repos/hughperkins/DeepCL/releases/1129303",
        "zipball_url": "https://api.github.com/repos/hughperkins/DeepCL/zipball/v3.3.0"
      }
    ],
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* OpenCL-enabled GPU or APU, along with appropriate OpenCL driver installed\n* Tested using Windows 2012 RC2, and (New!) Visual Studio 2015, this is how the CI builds run\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "* OpenCL-enabled GPU or APU, along with appropriate OpenCL driver installed (can check by running `clinfo`, which should show your desired GPU device)\n* Tested using Ubuntu 14.04 32-bit/64-bit\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Check if you have an OpenCL-enabled device on your system\n  * ideally a GPU, or accelerator, since there is no attempt to optimize DeepCL for CPUs (at least, not currently, could change, feel free to submit a pull request :-) )\n* Try running `gpuinfo` (from [EasyCL](https://github.com/hughperkins/EasyCL), but built as part of this project too, for ease of use )\n  * it should output at least one OpenCL-enabled device\n  * if it doesn't, then you need to make sure you have an OpenCL-enabled device, and that appropriate drivers are installed, and that the ICD is configured appropriately (registry in Windows, and `/etc/OpenCL/vendors` in linux)\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 816,
      "date": "Mon, 27 Dec 2021 02:10:35 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- obtained 37.2% test accuracy, on next move prediction task, using 33.6 million training examples from [kgsgo v2 dataset](https://github.com/hughperkins/kgsgo-dataset-preprocessor)\n  - commandline used `./deepcl_train dataset=kgsgoall netdef=12*(32c5z-relu)-500n-tanh-361n numepochs=15 learningrate=0.0001`\n  - 2 epochs, 2 days per epoch, on an Amazon GPU instance, comprising half an NVidia GRID K520 GPU (about half as powerful as a GTX780)\n- obtained 99.5% test accuracy on MNIST, using `netdef=rt2-8c5z-relu-mp2-16c5z-relu-mp3-150n-tanh-10n numepochs=20 multinet=6 learningrate=0.002`\n   - epoch time 99.8 seconds, using an Amazon GPU instance, ie half an NVidia GRID K520 GPU (since we are learning 6 nets in parallel, so 16.6seconds per epoch per net)\n\n",
      "technique": "Header extraction"
    }
  ]
}