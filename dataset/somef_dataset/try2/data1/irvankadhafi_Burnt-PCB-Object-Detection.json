{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1911.09070"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9017912595277376
      ],
      "excerpt": "git clone --recursive https://github.com/irvankadhafi/Burnt-PCB-Object-Detection.git \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8955886365383559
      ],
      "excerpt": "source venv/bin/activate \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/irvankadhafi/Burnt-PCB-Object-Detection",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-06-30T12:42:22Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-08T10:43:44Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.893581920037732,
        0.9588025077674149
      ],
      "excerpt": "This model was trained with state-of-the-art objection detection algorithm which is SSD with EfficientNet-b0 + BiFPN feature extractor a.k.a EfficientDet (you can read the paper here https://arxiv.org/abs/1911.09070). To be precise, we use EfficientDet D0 512x512 as the pretrained model. We only used 81 data of pcb burnt images to train the model and split those data into 65 train set, 8 validation set, and 8 test set. \nThe technology that we used is Tensorflow 2. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Using EfficientDet D0 Pre Trained Model",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/irvankadhafi/Burnt-PCB-Object-Detection/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Fri, 24 Dec 2021 06:30:02 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/irvankadhafi/Burnt-PCB-Object-Detection/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "irvankadhafi/Burnt-PCB-Object-Detection",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/irvankadhafi/Burnt-PCB-Object-Detection/master/training_phase/main.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Sources :\n- https://www.geeksforgeeks.org/ml-training-image-classifier-using-tensorflow-object-detection-api/\n- https://blog.tensorflow.org/2021/01/custom-object-detection-in-browser.html\n- https://gilberttanner.com/blog/tensorflow-object-detection-with-tensorflow-2-creating-a-custom-model\n\n1. Go to `tfod_api/research` folder\n2. Compile protos. <br> \nCreate use_protobuf.py in ``research`` folder\n```python\nimport os\nimport sys\nargs = sys.argv\ndirectory = args[1]\nprotoc_path = args[2]\nfor file in os.listdir(directory):\n    if file.endswith(\".proto\"):\n        os.system(protoc_path+\" \"+directory+\"/\"+file+\" --python_out=.\")\n```\n3. Run use_protobuf.py that inside ``research`` folder\n```bash\npython use_protobuf.py  .\\object_detection\\protos\\ <path to protoc file>\n```\n``<path to protoc file> `` is a folder where protobuf exist, on linux is ``/bin/protoc``, on windows you can download here https://github.com/protocolbuffers/protobuf/releases and then extract them.\n4. Finishing Installing TFOD API (current diretory : `research`)\n```bash\ncp object_detection/packages/tf2/setup.py .\npython -m pip install .\n```\n___\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "- Windows : Administrator CMD\n```bash\nset PYTHONPATH=<absolute-project-path>\\tfod-api;<absolute-project-path>\\tfod-api\\research;<absolute-project-path>\\tfod-api\\research\\slim\n```\n\n- Linux : Bash\n```bash\nexport PYTHONPATH=<absolute-project-path>/tfod-api:<absolute-project-path>/tfod-api/research:<absolute-project-path>/tfod-api/research/slim\n```\n\n- PyCharm\n```\nFile | Settings | Project: BurnoutObjectDetectio... | Python Interpreter\n```\n![alt text](screenshot/ss2.png)\n```\nClick \"Show All\"\n```\nAnd the add tfod_api path\n![alt text](screenshot/ss3.png)\n![alt text](screenshot/ss4.png)\n![alt text](screenshot/ss5.png)\n___\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\npip install -r requirements.txt\n```\n___\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9371802820644184,
        0.8211232956927162
      ],
      "excerpt": "git clone --recursive https://github.com/irvankadhafi/Burnt-PCB-Object-Detection.git \nsource venv/bin/activate \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/irvankadhafi/Burnt-PCB-Object-Detection/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2021 Rezky Wahyuda Sitepu\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Burnout PCB Object Detection",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Burnt-PCB-Object-Detection",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "irvankadhafi",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/irvankadhafi/Burnt-PCB-Object-Detection/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\npython -m venv ./venv\n```\nit will created folder named `venv`\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Fri, 24 Dec 2021 06:30:02 GMT"
    },
    "technique": "GitHub API"
  }
}