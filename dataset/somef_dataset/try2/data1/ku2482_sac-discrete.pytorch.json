{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1910.07207",
      "https://arxiv.org/abs/1511.05952",
      "https://arxiv.org/abs/1511.06581",
      "https://arxiv.org/abs/1910.07207 (2019).\n\n[[2]](https://arxiv.org/abs/1511.05952) Schaul, Tom, et al. \"Prioritized experience replay.\" arXiv preprint https://arxiv.org/abs/1511.05952 (2015).\n\n[[3]](https://arxiv.org/abs/1511.06581) Wang, Ziyu, et al. \"Dueling network architectures for deep reinforcement learning.\" arXiv preprint https://arxiv.org/abs/1511.06581 (2015).",
      "https://arxiv.org/abs/1511.05952 (2015).\n\n[[3]](https://arxiv.org/abs/1511.06581) Wang, Ziyu, et al. \"Dueling network architectures for deep reinforcement learning.\" arXiv preprint https://arxiv.org/abs/1511.06581 (2015).",
      "https://arxiv.org/abs/1511.06581 (2015)."
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[[1]](https://arxiv.org/abs/1910.07207) Christodoulou, Petros. \"Soft Actor-Critic for Discrete Action Settings.\" arXiv preprint arXiv:1910.07207 (2019).\n\n[[2]](https://arxiv.org/abs/1511.05952) Schaul, Tom, et al. \"Prioritized experience replay.\" arXiv preprint arXiv:1511.05952 (2015).\n\n[[3]](https://arxiv.org/abs/1511.06581) Wang, Ziyu, et al. \"Dueling network architectures for deep reinforcement learning.\" arXiv preprint arXiv:1511.06581 (2015).\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "- 2020.5.10 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ku2482/sac-discrete.pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-10-17T08:45:26Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-29T22:21:27Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9491784585859621
      ],
      "excerpt": "This is a PyTorch implementation of SAC-Discrete[1]. I tried to make it easy for readers to understand the algorithm. Please let me know if you have any questions. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9843402779947282
      ],
      "excerpt": "    - Refactor codes and fix a bug of SAC-Discrete algorithm. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9592296082293597
      ],
      "excerpt": "I just evaluated vanilla SAC-Discrite, with PER, N-step Return or Dueling Networks in MsPacmanNoFrameskip-v4. The graph below shows the test returns along with environment steps (which equals environment frames divided by the factor of 4). Also, note that curves are smoothed by exponential moving average with weight=0.5 for visualization. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A PyTorch implementation of SAC-Discrete.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ku2482/sac-discrete.pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 17,
      "date": "Thu, 30 Dec 2021 01:29:37 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ku2482/sac-discrete.pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ku2482/sac-discrete.pytorch",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you are using Anaconda, first create the virtual environment.\n\n```bash\nconda create -n sacd python=3.7 -y\nconda activate sacd\n```\n\nYou can install Python liblaries using pip.\n\n```bash\npip install -r requirements.txt\n```\n\nIf you're using other than CUDA 10.2, you may need to install PyTorch for the proper version of CUDA. See [instructions](https://pytorch.org/get-started/locally/) for more details.\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8114102558109896
      ],
      "excerpt": "I just evaluated vanilla SAC-Discrite, with PER, N-step Return or Dueling Networks in MsPacmanNoFrameskip-v4. The graph below shows the test returns along with environment steps (which equals environment frames divided by the factor of 4). Also, note that curves are smoothed by exponential moving average with weight=0.5 for visualization. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8270638176098473
      ],
      "excerpt": "    - Test them. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ku2482/sac-discrete.pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Toshiki Watanabe\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "SAC-Discrete in PyTorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "sac-discrete.pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ku2482",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ku2482/sac-discrete.pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 142,
      "date": "Thu, 30 Dec 2021 01:29:37 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You can train SAC-Discrete agent like this example [here](https://github.com/ku2482/sac-discrete.pytorch/blob/master/train.py).\n\n```\npython train.py --config config/sacd.yaml --env_id MsPacmanNoFrameskip-v4 --cuda --seed 0\n```\n\nIf you want to use Prioritized Experience Replay(PER), N-step return or Dueling Networks, change `use_per`, `multi_step` or `dueling_net` respectively.\n\n",
      "technique": "Header extraction"
    }
  ]
}