{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Pytorch framework from [pytorch-CycleGAN-and-pix2pix](https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix).\n\nPytorch Inception metrics code from [BigGAN-PyTorch](https://github.com/ajbrock/BigGAN-PyTorch).\n\nTensorFlow Inception Score code from [OpenAI's Improved-GAN.](https://github.com/openai/improved-gan).\n\nTensorFlow FID code from [TTUR](https://github.com/bioinf-jku/TTUR).\n\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1803.00657",
      "https://arxiv.org/abs/1611.04076",
      "https://arxiv.org/abs/1406.2661",
      "https://arxiv.org/abs/1406.2661",
      "https://arxiv.org/abs/1611.04076",
      "https://arxiv.org/abs/1704.00028",
      "https://arxiv.org/abs/1802.05957",
      "https://arxiv.org/abs/1807.00734",
      "https://arxiv.org/abs/1511.06434"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use this code for your research, please cite our paper.\n```\n@article{wang2019evolutionary,\n  title={Evolutionary generative adversarial networks},\n  author={Wang, Chaoyue and Xu, Chang and Yao, Xin and Tao, Dacheng},\n  journal={IEEE Transactions on Evolutionary Computation},\n  year={2019},\n  publisher={IEEE}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{wang2019evolutionary,\n  title={Evolutionary generative adversarial networks},\n  author={Wang, Chaoyue and Xu, Chang and Yao, Xin and Tao, Dacheng},\n  journal={IEEE Transactions on Evolutionary Computation},\n  year={2019},\n  publisher={IEEE}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/WANG-Chaoyue/EvolutionaryGAN-pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-04-09T01:11:26Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-01T07:19:32Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9548798233245991
      ],
      "excerpt": "The author still working on improving the pytorch version and attempting to add more related functions to achieve better performance. Besides the proposed EGAN farmework, we also provide the two_player_gan_model framework that contributes to integrating some existing GAN models together. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9156147822341609,
        0.9538031090031318
      ],
      "excerpt": "Different from Two-player GANs, here the arg --g_loss_mode should be set as a list of 'losses' (e.g., --g_loss_mode vanilla nsgan lsgan), which are corresponding to different mutations (or variations). \nThis code borrows heavily from pytorch-CycleGAN-and-pix2pix, since it provided a flexible and efficient framework for pytorch deep networks training. In this part, we briefly introduce the functions of this code. The author is working on implementing more GAN related functions. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8562197119101924
      ],
      "excerpt": "Note that functions f(.) and g(.) are defined similarly with Standard GANs, yet the average term of both real and fake images are further considered.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8352174334097823
      ],
      "excerpt": "The Higne GAN losses: --d_loss_mode hinge or --g_loss_mode hinge. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.881305795205308,
        0.8750626149529478
      ],
      "excerpt": "Note that, in practice, different kinds of g_loss and d_loss can be combined, and the GP term can also be added into all Discriminators' training. \nAlthough many Inception metrics have been proposed to measure generation performance, Inception Score (IS) and Fr\u00e9chet Inception Distance (FID) are two most used. Since both of them are firstly calculated by tensorflow codes, we adopted related codes: TensorFlow Inception Score code from OpenAI's Improved-GAN and TensorFlow FID code from TTUR. Through setting --score_name IS, related scores will be measured during the training process. But, note that you will need to have TensorFlow 1.3 or earlier installed, as TF1.4+ breaks the original IS code. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "The author's officially unofficial Pytorch EvolutionaryGAN implementation.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/WANG-Chaoyue/EvolutionaryGAN-pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 14,
      "date": "Fri, 24 Dec 2021 03:36:17 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/WANG-Chaoyue/EvolutionaryGAN-pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "WANG-Chaoyue/EvolutionaryGAN-pytorch",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/WANG-Chaoyue/EvolutionaryGAN-pytorch/master/scripts/train_lsgan_cifar10.sh",
      "https://raw.githubusercontent.com/WANG-Chaoyue/EvolutionaryGAN-pytorch/master/scripts/train_egan_cifar10.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Clone this repo:\n```bash\ngit clone https://github.com/WANG-Chaoyue/EvolutionaryGAN-pytorch.git\ncd EvolutionaryGAN-pytorch\n```\n\n- Install [PyTorch](https://pytorch.org/get-started/locally/) and other dependencies [requirements.txt](https://github.com/WANG-Chaoyue/EvolutionaryGAN-pytorch/blob/master/requirements.txt) (e.g., torchvision, [visdom](https://github.com/facebookresearch/visdom) and [dominate](https://github.com/Knio/dominate)).\n\n- Preparing *.npz* files for Pytorch Inception metrics evaluation (cifar10 as an example):\n```\npython inception_pytorch/calculate_inception_moments.py --dataset C10 --data_root datasets\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9414119019616536
      ],
      "excerpt": "bash ./scripts/train_lsgan_cifar10.sh \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9414119019616536
      ],
      "excerpt": "bash ./scripts/train_egan_cifar10.sh \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9116222030675042
      ],
      "excerpt": "PyTorch version inception metrics were adopted from BigGAN-PyTorch. If you want to use it, simply set --use_pytorch_scores. However, these scores are different from the scores you would get using the official TF inception code, and are only for monitoring purposes. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8493744177595266
      ],
      "excerpt": "An example of LSGAN training command was saved in ./scripts/train_lsgan_cifar10.sh. Train a model (cifar10 as an example):  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8315866675138645
      ],
      "excerpt": "An example of E-GAN training command was saved in ./scripts/train_egan_cifar10.sh. Train a model (cifar10 as an example): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.824917531692574
      ],
      "excerpt": "Loading from image folder: ./data/single_dataset.py --dataset_mode single \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8791100812562784,
        0.8199308018827741,
        0.9192884543685227
      ],
      "excerpt": "Loading from ./data/torchvision: torchvision_dataset.py --dataset_mode torchvision \nTwo-player GANs: ./models/two_player_gan_model.py --model two_player_gan \nEvolutionaryGAN: ./models/egan_model.py --model egan \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9157848383774334
      ],
      "excerpt": "python inception_pytorch/calculate_inception_moments.py --dataset C10 --data_root datasets \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/WANG-Chaoyue/EvolutionaryGAN-pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Chaoyue Wang\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "EvolutionaryGAN-pytorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "EvolutionaryGAN-pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "WANG-Chaoyue",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/WANG-Chaoyue/EvolutionaryGAN-pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Linux or macOS\n- Python 3\n- CPU or NVIDIA GPU + CUDA CuDNN\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 48,
      "date": "Fri, 24 Dec 2021 03:36:17 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "two-player-gans",
      "evolutionary-gan",
      "pytorch-implementation"
    ],
    "technique": "GitHub API"
  }
}