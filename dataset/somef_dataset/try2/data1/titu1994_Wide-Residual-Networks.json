{
  "citation": [
    {
      "confidence": [
        0.9895499634217814,
        0.9848179726092176
      ],
      "excerpt": "Implementation of Wide Residual Networks from the paper <a href=\"http://arxiv.org/pdf/1605.07146v1.pdf\">Wide Residual Networks</a> in Keras. \nwrn_28_10 = wrn.create_wide_residual_network(ip, nb_classes=10, N=4, k=10, dropout=0.0, verbose=1) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/titu1994/Wide-Residual-Networks",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-06-28T09:32:14Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-25T10:37:38Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.860059181823877,
        0.8832359373421675,
        0.9807070544689446
      ],
      "excerpt": "model = Model(ip, wrn_28_10) \nThe WRN-16-8 model has been tested on the CIFAR 10 dataset. It achieves a score of 93.68% after 100 epochs. It is not as high as the accuracy posted in the paper (95.19%), however the score may improve with further training.  \nTraining was done by using the Adam optimizer instead of SGD+Momentum for faster convergence. The history of training/validation accuracy and loss is not available for the first 30 epochs due to an overwriting of the files. However the history of the last 70 epochs has been shown in the figure below. The script and weights for this model are also provided. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9392205461265138,
        0.9826195921928764
      ],
      "excerpt": "The WRN-28-10 model could not be used due to GPU memory constraints, hence WRN-28-8 model was used instead with a batch size of 64. Each epoch requires roughly 886 seconds, and therefore this was only run for 100 epochs. It achieves a score of 95.08 %, less than the best score of 95.83 % obtained by the WRN-28-10 network. \nThe Adadelta optimizer was used instead of SGD+Momentum for faster convergence. The history of training/validation accuracy and loss is shown as below. The script and weights for this model are also provided. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9693326289436995
      ],
      "excerpt": "The below model is the WRN-28-8 model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Wide Residual Networks in Keras",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/titu1994/Wide-Residual-Networks/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 43,
      "date": "Sun, 26 Dec 2021 03:04:22 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/titu1994/Wide-Residual-Networks/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "titu1994/Wide-Residual-Networks",
    "technique": "GitHub API"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/titu1994/Wide-Residual-Networks/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Wide Residual Networks in Keras",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Wide-Residual-Networks",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "titu1994",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/titu1994/Wide-Residual-Networks/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "titu1994",
        "body": "This is a tag for the final commit to the old version of Wide Residual Networks. This was the implementation which deviates from the paper in the order of concatenations, and therefore performance of these models is a little less than the paper.\r\n\r\nThe checkpoint is only for old weights purposes. I would not recommend using the older models, even if weights are available for them.",
        "dateCreated": "2017-05-23T20:08:26Z",
        "datePublished": "2017-06-20T21:36:49Z",
        "html_url": "https://github.com/titu1994/Wide-Residual-Networks/releases/tag/v1.2-final",
        "name": "Old version",
        "tag_name": "v1.2-final",
        "tarball_url": "https://api.github.com/repos/titu1994/Wide-Residual-Networks/tarball/v1.2-final",
        "url": "https://api.github.com/repos/titu1994/Wide-Residual-Networks/releases/6778714",
        "zipball_url": "https://api.github.com/repos/titu1994/Wide-Residual-Networks/zipball/v1.2-final"
      },
      {
        "authorType": "User",
        "author_name": "titu1994",
        "body": "Weights for the WRN-28-8 model.\n\nLightly improved accuracy (95.54 % compared earlier models 95.08%)\n",
        "dateCreated": "2016-12-07T04:50:15Z",
        "datePublished": "2017-02-13T06:49:05Z",
        "html_url": "https://github.com/titu1994/Wide-Residual-Networks/releases/tag/v1.2",
        "name": "WRN-28-8 Weights v2",
        "tag_name": "v1.2",
        "tarball_url": "https://api.github.com/repos/titu1994/Wide-Residual-Networks/tarball/v1.2",
        "url": "https://api.github.com/repos/titu1994/Wide-Residual-Networks/releases/5436166",
        "zipball_url": "https://api.github.com/repos/titu1994/Wide-Residual-Networks/zipball/v1.2"
      },
      {
        "authorType": "User",
        "author_name": "titu1994",
        "body": "",
        "dateCreated": "2016-12-07T04:50:15Z",
        "datePublished": "2017-02-03T23:05:04Z",
        "html_url": "https://github.com/titu1994/Wide-Residual-Networks/releases/tag/v1.1",
        "name": "",
        "tag_name": "v1.1",
        "tarball_url": "https://api.github.com/repos/titu1994/Wide-Residual-Networks/tarball/v1.1",
        "url": "https://api.github.com/repos/titu1994/Wide-Residual-Networks/releases/5357497",
        "zipball_url": "https://api.github.com/repos/titu1994/Wide-Residual-Networks/zipball/v1.1"
      },
      {
        "authorType": "User",
        "author_name": "titu1994",
        "body": "",
        "dateCreated": "2016-12-07T04:50:15Z",
        "datePublished": "2017-02-03T22:57:44Z",
        "html_url": "https://github.com/titu1994/Wide-Residual-Networks/releases/tag/v1.0",
        "name": "",
        "tag_name": "v1.0",
        "tarball_url": "https://api.github.com/repos/titu1994/Wide-Residual-Networks/tarball/v1.0",
        "url": "https://api.github.com/repos/titu1994/Wide-Residual-Networks/releases/5357426",
        "zipball_url": "https://api.github.com/repos/titu1994/Wide-Residual-Networks/zipball/v1.0"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 104,
      "date": "Sun, 26 Dec 2021 03:04:22 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "residual-networks",
      "wide",
      "deep-learning",
      "keras"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "It can be used by importing the wide_residial_network script and using the create_wide_residual_network() method.\nThere are several parameters which can be changed to increase the depth or width of the network.\n\nNote that the number of layers can be calculated by the formula : `nb_layers = 4 + 6 * N` <br>\nTherefore N can be computed as : `N = (nb_layers - 4) / 6`\n\n`import wide_residial_network as wrn`<br>\n`ip = Input(shape=(3, 32, 32)) ",
      "technique": "Header extraction"
    }
  ]
}