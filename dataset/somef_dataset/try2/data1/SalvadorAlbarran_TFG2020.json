{
  "citation": [
    {
      "confidence": [
        0.9788914761692258,
        0.8356013927728488,
        0.8854398367006624
      ],
      "excerpt": "En este repositorio se puede encontrar tanto los modelos usados para este trabajo, como los c\u00f3digo para la ejecuci\u00f3n de la aplicaci\u00f3n y el firmware utilizado en las placas Maix Go y Maix Bit. \nA continuaci\u00f3n se detalla la instalaci\u00f3n, entrenamiento y ejecuci\u00f3n del proyecto: \nTutorial sacado de: https://en.bbs.sipeed.com/t/topic/682/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9513733337966637,
        0.8638876166016836
      ],
      "excerpt": "Tensorflow es una plataforma de c\u00f3digo abierto para el aprendizaje autom\u00e1tico que cuenta con un ecosistema integral y flexible de herramientas, bibliotecas y recursos comunitarios para impulsar el estado del arte y desarrollar f\u00e1cilmente aplicaciones basadas en aprendizaje autom\u00e1tico. \nKeras es una API de redes neuronales de alto nivel, escrita en Python y capaz de ejecutarse sobre TensorFlow, CNTK o Theano. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9989903491799825
      ],
      "excerpt": "Nota: La versi\u00f3n de tensorflow 1.x a 2.x cambia la forma de escribir los scripts, por lo que si se usan los scripts que se dan en este ejemplo con la versi\u00f3n 2.x no funcionar\u00e1, los cambios son b\u00e1sicamente que ya no hay que instalar Keras ya que est\u00e1 implementado dentro de tensorflow, por lo que para usar una librer\u00eda de keras tendr\u00edamos que hacer: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9993447027410576
      ],
      "excerpt": "Aqu\u00ed recomiendan la versi\u00f3n de tensorflow 1.13.1, para usarlo se necesita actualizar los drivers de la gr\u00e1fica, aqu\u00ed ten\u00e9is la gu\u00eda de instalaci\u00f3n de tensorflow: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9797211947074573
      ],
      "excerpt": "Se necesita instalar tensorflow-gpu == 1.13.1 si quieres usar la misma versi\u00f3n que recomiendan en sipeed con la versi\u00f3n de gpu, si quieres usar la versi\u00f3n de cpu hay que eliminar la parte de gpu: tensorflow==1.13.1. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8374695145293155
      ],
      "excerpt": "Instalaci\u00f3n mediante conda (Anaconda, la que he usado yo): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9872371620122309
      ],
      "excerpt": "Adem\u00e1s, en el caso de que se use la versi\u00f3n de CPU (intel) anaconda tiene un rendimiento bastante significativo (alrededor de 8 veces m\u00e1s r\u00e1pido) en comparaci\u00f3n con pip como se muestra en la siguiente figura: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "La informaci\u00f3n se puede encontrar aqu\u00ed: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9985822330263412
      ],
      "excerpt": "Mobilenetv1 son clases de modelos eficientes llamados MobileNets para aplicaciones de m\u00f3viles y aplicaciones de visi\u00f3n empotradas. Se basa en una arquitectura optimizada que utiliza convoluciones separables en profundidad para construir redes profundas de peso ligero. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9999740652035157,
        0.9964189199332645,
        0.999054375125654,
        0.9827573060106022,
        0.8356013927728488,
        0.9865374311292784
      ],
      "excerpt": "Multiplicador de anchura: Se usa para adelgazar una red de manera uniforme en cada capa. Dada una capa y un multiplicador de anchura \u03b1 el n\u00famero de canales de entrada M ser\u00eda \u03b1M y el n\u00famero de canales de salida N ser\u00eda \u03b1N. \nEsto tiene el efecto de reducir el coste computacional y el n\u00famero de par\u00e1metros cuadr\u00e1ticamente alrededor de \u03b12. Se puede aplicar a cualquier estructura de modelo para definir un nuevo modelo m\u00e1s peque\u00f1o. \nMultiplicador de resoluci\u00f3n (\u03c1): Se aplica en la imagen de entrada y la interna representaci\u00f3n de cada capa es reducida por dicho multiplicador. \nAplicamos este hiperpar\u00e1metro impl\u00edcitamente cuando ajustamos la resoluci\u00f3n de entrada, es decir al poner como resoluci\u00f3n 224,192,160 o 128. \nEsto hace reducir el coste computacional alrededor de \u03c12. \nLa arquitectura de mobilenet se puede observar en la siguiente tabla: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9976421160367258,
        0.8356013927728488,
        0.9998360951304567,
        0.9611392738115246,
        0.9104388306336967
      ],
      "excerpt": "Significa que tiene un valor alpha = 0.75 llamado multiplicador de anchura, el tama\u00f1o de la imagen de entrada es de 224x224 y sin capa del top(sin dropout ni \u00faltima capa conectada con activaci\u00f3n softmax). \nSe recomienda por la siguiente tabla: \nLa diferencia entre un alpha 1.00x  a 0.75x es de m\u00e1s o menos un 2% de p\u00e9rdida de precisi\u00f3n, mientras que el n\u00famero de par\u00e1metros se reduce de 4.24M a 2.59M, que usando una cuantizaci\u00f3n de 8 bits se resume en 4.25MB vs 2.59MB, una diferencia considerable. \nUsando Micropython no podr\u00edamos usar el de 4.35MB, pero s\u00ed el de 2.59MB, en cambio s\u00ed se usa Standalone o FreeRTOS se podr\u00eda usar ambos sin problema. \nYo he probado a entrenar ambos modelos, que los comentar\u00e9 m\u00e1s adelante. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9600732982240069,
        0.993209286423248
      ],
      "excerpt": "Este conjunto de datos contiene 1000 clases, al descomprimirlo tendr\u00e1s 1000 .tar por lo que ser\u00e1 necesario usar un script para agilizar la operaci\u00f3n: \nEl chip k210 usa un relleno de ceros en todas las direcciones (arriba, abajo, derecha, izquierda) mientras que el relleno de Keras es solo de derecha y abajo, por lo que vamos a necesitar cambiar dos l\u00edneas al fichero original. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9507374082549614
      ],
      "excerpt": "Aparece 2 veces, en la l\u00ednea 354 y en la 423. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.966171548323668
      ],
      "excerpt": "En mi caso, tengo una Nvidia 1060 6GB por lo que la l\u00ednea donde se paraleliza el modelo no la uso, as\u00ed que si tienes m\u00faltiples gr\u00e1ficas te servir\u00e1 para acelerar el proceso, en mi caso no, por lo que basta con eliminar la parte de: paralleled_ quedando, por ejemplo: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9104388306336967,
        0.9507374082549614,
        0.9507374082549614,
        0.9507374082549614
      ],
      "excerpt": "Algunos par\u00e1metros que he modificado en el entrenamiento: \nbatch_size: N\u00famero de ejemplos de entrenamiento utilizados en una iteraci\u00f3n. \nepotch: Es un paso completo a trav\u00e9s de los datos de entrenamiento. \nstep_size_train: N\u00famero de pasos dentro de un epotch. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9104388306336967,
        0.9932230983117876
      ],
      "excerpt": "He realizado 3 entrenamientos, \n1\u00ba Sin modificar ning\u00fan par\u00e1metro y usando el modelo con 0.75x , donde he conseguido una precisi\u00f3n de 0.60 tardando algo m\u00e1s de 4 horas. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9243188970772274,
        0.9865374311292784,
        0.989380652325719,
        0.999054375125654,
        0.8356013927728488
      ],
      "excerpt": "2\u00ba Usando el modelo es el de 1.00x  donde consegu\u00ed una precisi\u00f3n de 0.62 tardando 3 horas 24 min. \nUn resultado esperado ya que en la tabla pod\u00edamos apreciar que aument\u00e1bamos mucho el n\u00famero de par\u00e1metros, pero tendr\u00edamos una diferencia de un 2% aproximadamente y es lo que hemos obtenido. \nEn este modelo, he necesitado cambiar el batch size de 512 a 256, ya que por la cantidad de memoria de mi gpu no pod\u00eda distribuir tantos datos, significando un error de OOM (Out Of Memory) y no pod\u00eda entrenarlo con mi gr\u00e1fica, bajando este par\u00e1metro funcion\u00f3 sin problemas. \n3\u00ba Usando el modelo de 0.75x cambiando el batch size y el n\u00famero de epotch. En este caso decid\u00ed aumentar por 4 este n\u00famero, siendo as\u00ed epotch = 80 y un batch size de 256 intentando conseguir una mejora, pero solo consegu\u00ed un 0.63 de precisi\u00f3n (vs el 0.60 del primer ejemplo) tardando alrededor de 8 horas en entrenarlo. \nIntentando ver si aumentando el par\u00e1metro epotch observamos una mejora de precisi\u00f3n: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488,
        0.9507374082549614
      ],
      "excerpt": "Maix Toolbox es una colecci\u00f3n de herramientas para modelos (scripts). \nSe puede usar para convertir el modelo de un formato a otro, lo podemos ver en la siguiente tabla: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9507374082549614
      ],
      "excerpt": "NNcase es un compilador de modelos y herramienta de inferencia. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9999658487207741
      ],
      "excerpt": "KmodelV3 es la generada por la versi\u00f3n anterior de nncase a 0.2 y es la versi\u00f3n m\u00e1s optimizada, ya que la versi\u00f3n kmodelV4 a pesar de soportar m\u00e1s operaciones, m\u00e1s modelos cuesta m\u00e1s memoria (alrededor de 360KBde ram ), est\u00e1 en desarrollo luego hay operaciones que no est\u00e1n tan bien como el la V3 y tiene una latencia mayor (37ms vs  111ms) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9788914761692258,
        0.9973481621320687,
        0.9975164699952898,
        0.999964726672313,
        0.9980316546245553
      ],
      "excerpt": "**-t, --target** La opci\u00f3n se utiliza para configurar el dispositivo de destino deseado para ejecutar el modelo. CPU es el objetivo m\u00e1s general que casi todas las plataformas deber\u00edan admitir. k210 es la plataforma Kendryte K210 SoC. Si se configura esta opci\u00f3n en k210, este modelo solo puede ejecutarse en K210 o ser emulado en el PC. \n**--inference-type** se configura a float si se quiere precisi\u00f3n a coste de m\u00e1s memoria y p\u00e9rdida de aceleraci\u00f3n en el K210 KPU.Configurar a unit8 si se quiere mayor aceleraci\u00f3n del KPU y mayor velocidad, se necesita dar un conjunto de datos para la cuantizaci\u00f3n de calibraci\u00f3n para cuantizar los modelos m\u00e1s tarde. \n**--dataset** es para proporcionar tu conjunto de datos de calibraci\u00f3n de cuantizaci\u00f3n para cuantificar tus modelos. Debe poner cientos o miles de datos en el conjunto de entrenamiento en este directorio. Solo se necesita esta opci\u00f3n cuando se establece --inference-type en uint8. \n**--dataset-format** es para establecer el formato del conjunto de datos de calibraci\u00f3n. El valor predeterminado es \u2018image\u2019, nncase usar\u00e1 opencv para leer sus im\u00e1genes y escalar autom\u00e1ticamente al tama\u00f1o de entrada deseado de tu modelo. Si la entrada tiene 3 canales, ncc convertir\u00e1 im\u00e1genes a float tensors RGB [0,1] en dise\u00f1o NCHW. Si la entrada tiene solo 1 canal, ncc escalar\u00e1 en gris sus im\u00e1genes. Establezca en \u2018raw\u2019 si el conjunto de datos no es un conjunto de datos de imagen, por ejemplo, audio o matrices. En este escenario, debes convertir tu conjunto de datos a archivos binarios sin formato que contengan float tensors. Solo necesita esta opci\u00f3n cuando se establece --inference-type en uint8. \n**--input-std and --input-mean** es para establecer el m\u00e9todo de preproceso en tu conjunto de datos de calibraci\u00f3n. Como se dijo anteriormente, ncc primero convertir\u00e1 las im\u00e1genes en float tensors RGB [0,1] en el dise\u00f1o NCHW, luego ncc normalizar\u00e1 sus im\u00e1genes usando la f\u00f3rmula y = (x - mean) / std. Hay una tabla de argumentos de referencia: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9962282006245561,
        0.9406680116399395,
        0.9996062456502341,
        0.9670481089962383,
        0.9848979463745606
      ],
      "excerpt": "**--calibrate-method** El m\u00e9todo consiste en establecer el m\u00e9todo de calibraci\u00f3n deseado, que se utiliza para seleccionar los rangos de activaci\u00f3n \u00f3ptimos. El valor predeterminado es no_clip, ya que ncc usar\u00e1 el rango completo de activaciones. Si se desea un mejor resultado de cuantizaci\u00f3n, puede usar l2 pero tomar\u00e1 m\u00e1s tiempo encontrar los rangos \u00f3ptimos. \n**--input-type** es para establecer el tipo de datos de entrada deseado cuando se hace la inferencia. El valor predeterminado es igual al tipo de inferencia. Si --input-type es uint8, por ejemplo, debe proporcionar RGB888 uint8 tensors cuando se haga la inferencia. Si --input-type es float, debe proporcionar float tensors RGB en su lugar. \n**--max-allocator-solve-secs** es para limitar el tiempo m\u00e1ximo de resoluci\u00f3n cuando se realiza la mejor b\u00fasqueda de asignaci\u00f3n. Si se excede el tiempo de b\u00fasqueda, ncc recurrir\u00e1 para usar el primer m\u00e9todo de ajuste. El valor predeterminado es 60 segundos, establecido en 0 para deshabilitar la b\u00fasqueda. \n**--dump-ir** es una opci\u00f3n de debug. Cuando est\u00e1 activado, ncc producir\u00e1 algunos archivos de gr\u00e1ficos .dot en el directorio de trabajo. Puede usar Graphviz o Graphviz Online para ver estos archivos. \nEl comando infer puede ejecutar el kmodel, y se usa como prop\u00f3sito de depuraci\u00f3n. ncc guardar\u00e1 los tensors de salida del modelo en archivos .bin en NCHW. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488,
        0.9799647861241964
      ],
      "excerpt": "Tambi\u00e9n puedes descargarlo manualmente y poner los contenidos en la carpeta creada ncc. \nenlace aqu\u00ed: https://github.com/kendryte/nncase/releases  la versi\u00f3n utilizada es  NNCase Converter v0.1.0 RC5 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9507374082549614,
        0.9383367092404993
      ],
      "excerpt": "pb significa \u2018protobuf\u2019, este contiene tanto la definici\u00f3n de  grafo como los pesos del modelo. \nPara convertir nuestro modelo.pb a modelo.tflite existe un script que te gu\u00eda a obtener el comando pb2tflite.sh, al final el comando quedar\u00eda de la siguiente forma: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8729393277090676
      ],
      "excerpt": "--output_file. Type: string. Especifica la ruta completa del archivo de salida. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9268240064709804
      ],
      "excerpt": "--saved_model_dir. Type: string. Especifica la ruta completa al directorio que contiene el modelo guardado. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9992225408395428,
        0.999704655164343,
        0.999704655164343,
        0.9243188970772274,
        0.999870495234775,
        0.9999995009033393,
        0.9507374082549614,
        0.9997507821127818,
        0.9996370352236321
      ],
      "excerpt": "Tener en cuenta que pasar GRAPHVIZ_DOT a --output_format conduce a la p\u00e9rdida de transformaciones espec\u00edficas de TFLite. Por lo tanto, la visualizaci\u00f3n resultante puede no reflejar el conjunto final de transformaciones gr\u00e1ficas. Para obtener una visualizaci\u00f3n final con todas las transformaciones de gr\u00e1ficos, usar --dump_graphviz_dir en su lugar. \n--input_arrays. Type: lista de cadenas separadas por comas. Especifica la lista de nombres de tensores de activaci\u00f3n de entrada. \n--output_arrays. Type: lista de cadenas separadas por comas. Especifica la lista de nombres de tensores de activaci\u00f3n de salida. \nLos siguientes indicadores definen las propiedades de los tensores de entrada. Cada elemento en el indicador --input_arrays debe corresponder a cada elemento en los siguientes indicadores seg\u00fan el \u00edndice. \n--input_shapes. Tipo: lista separada por dos puntos de listas enteras separadas por comas. Cada lista de enteros separados por comas da la forma de una de las matrices de entrada especificadas en la convenci\u00f3n TensorFlow. \nEjemplo: --input_shapes = 1,60,80,3 para un modelo de visi\u00f3n t\u00edpico significa un batch size de 1, una altura de imagen de entrada de 60, un ancho de imagen de entrada de 80 y una profundidad de imagen de entrada de 3 (que representan canales RGB ) \nEjemplo: --input_arrays = foo, bar --input_shapes = 2,3: 4,5,6 significa que \"foo\" tiene una forma de [2, 3] y \"bar\" tiene una forma de [4, 5, 6]. \n--std_dev_values, --mean_values. Tipo: lista de floats separados por comas. Estos especifican los par\u00e1metros de (de-)cuantizaci\u00f3n de la matriz de entrada, cuando se cuantifica. Esto solo es necesario si inference_input_type es QUANTIZED_UINT8. \nEl significado de mean_values y std_dev_values es el siguiente: cada valor cuantificado en la matriz de entrada cuantificada se interpretar\u00e1 como un n\u00famero real matem\u00e1tico (es decir, como un valor de activaci\u00f3n de entrada) de acuerdo con la siguiente f\u00f3rmula: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.999977770092077,
        0.9998652619907649,
        0.9976421160367258,
        0.9215872621226883,
        0.9943529507053313,
        0.9788914761692258,
        0.9999993192801256,
        0.999997301641886,
        0.9999306182754736
      ],
      "excerpt": "Al realizar la inferencia flotante (--inference_type = FLOAT) en una entrada cuantificada, la entrada cuantificada se descartar\u00eda inmediatamente por el c\u00f3digo de inferencia de acuerdo con la f\u00f3rmula anterior, antes de proceder con la inferencia flotante. \nCuando se realiza una inferencia cuantificada (--inference_type = QUANTIZED_UINT8), el c\u00f3digo de inferencia no realiza la descuantificaci\u00f3n. Sin embargo, los par\u00e1metros de cuantificaci\u00f3n de todas las matrices, incluidas las de las matrices de entrada especificadas por mean_value y std_dev_value, determinan los multiplicadores de punto fijo utilizados en el c\u00f3digo de inferencia cuantificado. mean_value debe ser un n\u00famero entero cuando se realiza una inferencia cuantificada. \n--inference_type. Tipo: string. Predeterminado: float. Tipo de datos de todas las matrices de n\u00fameros reales en el archivo de salida, excepto las matrices de entrada (definidas por --inference_input_type). Debe ser {FLOAT, QUANTIZED_UINT8}. \nEste indicador solo afecta a las matrices de n\u00fameros reales, incluidas las matrices flotantes y cuantizadas. Esto excluye todos los dem\u00e1s tipos de datos, incluidas las matrices enteras simples y las matrices de cadenas. Espec\u00edficamente: \nSi FLOAT, las matrices de n\u00fameros reales ser\u00e1n de tipo float en el archivo de salida. Si se cuantificaron en el archivo de entrada, se descuantifican. \nSi QUANTIZED_UINT8, las matrices de n\u00fameros reales se cuantificar\u00e1n como uint8 en el archivo de salida. Si fueron flotantes en el archivo de entrada, entonces se cuantizaron. \n--inference_input_type. Tipo: string. Tipo de datos de una matriz de entrada de n\u00famero real en el archivo de salida. Por defecto, --inference_type se usa como tipo de todas las matrices de entrada. Flag est\u00e1 destinado principalmente a generar un gr\u00e1fico de punto flotante con una matriz de entrada cuantificada. Se agrega un operador descuantificado inmediatamente despu\u00e9s de la matriz de entrada. Debe ser {FLOAT, QUANTIZED_UINT8}. \nLa bandera se usa t\u00edpicamente para modelos de visi\u00f3n que toman un mapa de bits como entrada, pero requieren inferencia de punto flotante. Para tales modelos de imagen, la entrada uint8 se cuantifica y los par\u00e1metros de cuantificaci\u00f3n utilizados para tales matrices de entrada son sus par\u00e1metros mean_value y std_dev_value. \n--default_ranges_min, --default_ranges_max. Tipo: punto flotante. Valor predeterminado para los valores de rango (min, max) utilizados para todas las matrices sin un rango especificado. Permite al usuario proceder con la cuantificaci\u00f3n de archivos de entrada no cuantificados o cuantificados incorrectamente. Estas banderas producen modelos con baja precisi\u00f3n. Est\u00e1n destinados a una f\u00e1cil experimentaci\u00f3n con la cuantizaci\u00f3n a trav\u00e9s de la \"cuantificaci\u00f3n ficticia\". \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9788914761692258,
        0.9474635993655147,
        0.9946379808099154,
        0.9975773546103218
      ],
      "excerpt": "--reorder_across_fake_quant. Tipo: booleano. Valor predeterminado: falso. Indica si se debe reordenar los nodos FakeQuant en ubicaciones inesperadas. Se utiliza cuando la ubicaci\u00f3n de los nodos FakeQuant impide las transformaciones gr\u00e1ficas necesarias para convertir el gr\u00e1fico. Resultados en un gr\u00e1fico que difiere del gr\u00e1fico de entrenamiento cuantificado, lo que puede causar un comportamiento aritm\u00e9tico diferente. \n--allow_custom_ops. Tipo: string. Valor predeterminado: falso. Indica si se permiten operaciones personalizadas. Cuando es falso, cualquier operaci\u00f3n desconocida es un error. Cuando es verdadero, se crean operaciones personalizadas para cualquier operaci\u00f3n que sea desconocida. El desarrollador deber\u00e1 proporcionarlos al tiempo de ejecuci\u00f3n de TensorFlow Lite con un solucionador personalizado. \n--post_training_quantize. Tipo: booleano. Valor predeterminado: falso. Booleano que indica si cuantificar los pesos del modelo flotante convertido. El tama\u00f1o del modelo se reducir\u00e1 y habr\u00e1 mejoras de latencia (a costa de la precisi\u00f3n). \nPara convertir a kmodel recuerda que en la carpeta images:\\ de la herramienta necesitamos meter algunas im\u00e1genes, en este caso he usado las mismas del conjunto de datos del entrenamiento  asegur\u00e1ndome que tiene una resoluci\u00f3n 224x224(las puedes cambiar de resoluci\u00f3n si no tuvieran el tama\u00f1o deseado). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9747466821846071
      ],
      "excerpt": "A\u00f1adir firmware de maixpy he usado esta versi\u00f3n: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488,
        0.9954004602913301
      ],
      "excerpt": "A\u00f1adir el modelo en la direcci\u00f3n 0x00200000 \nIntroducir en la memoria flash del sistema el archivo labels.txt que contiene los \u201csynsets\u201d correspondientes al conjunto de datos (lista de palabras o frases que pueden sustituirse entre ellas en alg\u00fan contexto). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9104388306336967
      ],
      "excerpt": "Para hacerlo podemos usar distintas opciones, yo he usado uPyloader, esta informaci\u00f3n se puede encontrar en: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "Una vez que tengamos todo solo necesitamos ejecutar la demo en micropython. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9104388306336967,
        0.989333157434365
      ],
      "excerpt": "En mi caso he usado Standalone. \nHe usado platformIO como ide para compilar el proyecto, obteniendo el firmware que introduciremos en la direcci\u00f3n 0x00000000 y el modelo en la direcci\u00f3n 0x00200000. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/SalvadorAlbarran/TFG2020",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-06-04T18:01:22Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-11-04T00:38:05Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "        model.summary() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8054494046444708
      ],
      "excerpt": "TFLITE: TensorFlow Lite FlatBuffer format. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Aceleraci\u00f3n de AI en dispositivos de bajo consumo",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/SalvadorAlbarran/TFG2020/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Fri, 24 Dec 2021 07:56:48 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/SalvadorAlbarran/TFG2020/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "SalvadorAlbarran/TFG2020",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9736629876602173
      ],
      "excerpt": "Instalaci\u00f3n mediante pip: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9216235989721194
      ],
      "excerpt": "Adem\u00e1s, necesitaremos instalar el software de NVIDIA donde se puede encontrar la informaci\u00f3n aqu\u00ed: https://www.tensorflow.org/install/gpu/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9685083344745312
      ],
      "excerpt": "Sacada de https://www.tensorflow.org/install/source#linux \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9463621818845376,
        0.9982013395830298
      ],
      "excerpt": "Parecido a la instalaci\u00f3n mediante pip pero con m\u00e1s facilidades, para instalar Tensorflow gpu basta con poner el siguiente comando: \nconda install tensorflow-gpu==1.13.1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8516685309054747,
        0.8516685309054747
      ],
      "excerpt": "Tiene 2 comandos \u2018compile e \u2018infer\u2019 \n\u2018compile\u2019 compila el modelo entrenado (.tflite, .caffemodel) a kmodel. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8689958215320748,
        0.8504530739640459
      ],
      "excerpt": "tar -Jxf ncc-linux-x86_64.tar.xz \nrm ncc-linux-x86_64.tar.xz \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8270864476522917
      ],
      "excerpt": "enlace aqu\u00ed: https://github.com/kendryte/nncase/releases  la versi\u00f3n utilizada es  NNCase Converter v0.1.0 RC5 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9023697225149864
      ],
      "excerpt": "./tflite2kmodel.sh workspace/mbnet75.tflite \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.925671696398174
      ],
      "excerpt": "Import tensorflow as tf \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": "archivo mbnet_keras.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": "Ejecutamos mbnet_keras.py y empezar\u00e1 a entrenar. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8160677842987113
      ],
      "excerpt": "Las herramientas las proporciona sipeed, aqu\u00ed pod\u00e9is encontralas: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8217615128802548
      ],
      "excerpt": "La diferencia de fps entre las dos versiones es notoria (V3: ~24.05 fps V4: 8.45 fps). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8121118006281737,
        0.8561128582406019
      ],
      "excerpt": "\"NCHW\" significa data cuyo dise\u00f1o es (batch_size, channel, height, width) \n**<input file>** es tu direcci\u00f3n donde se encuentra tu kmodel. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8166459341480593
      ],
      "excerpt": "Ojo que hay un error en el script hay que cambiar a las siguientes l\u00edneas: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": "./keras_to_tensorflow.py --input_model workspace/mbnet75.h5  --output_model workspace/mbnet75.pb \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": "./gen_pb_graph.py workspace/mbnet75.pb \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/SalvadorAlbarran/TFG2020/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright 2018 Canaan Inc.\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "TFG2020",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "TFG2020",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "SalvadorAlbarran",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/SalvadorAlbarran/TFG2020/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Fri, 24 Dec 2021 07:56:48 GMT"
    },
    "technique": "GitHub API"
  }
}