{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2003.10152 \n\n## shortages\n1\u3001Only supports Resnet18, Resnet34 backbone to train.   \n2\u3001Multi GPU parallel training is not supported.   \n3\u3001Incomplete configuration items for training and testing.     \n\n## Install\npython 3.6+     \npip install torch==1.5.1  torchvision==0.6.1   #Higher versions of PyTorch also tested OK         \npip install pycocotools      \npip install numpy   \npip install scipy    \ncd pytorch_solov2/      \npython setup.py develop      #*Install the original FocalLoss of SoloV2*\n\n**2021-05-17 update**    \nCompletely remove the dependency on MMCV\n\n**2020-10-13 update**          \nImprove the evaluation code, save it as the picture after instance segmentation, and add video test code.    \n\n**2020-07-23update**    \nThe implementation of FocalLoss in the latest version of MMCV-Full is different from that in the original SOLO version (the processing label of the background class is different"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "https://github.com/WXinlong/SOLO   \nhttps://github.com/open-mmlab/mmdetection   \nhttps://github.com/open-mmlab/mmcv  \n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9092486771425272,
        0.9977994744046882
      ],
      "excerpt": "official code\uff1a https://github.com/WXinlong/SOLO      \npaper\uff1a https://arxiv.org/abs/2003.10152 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8906174419333412
      ],
      "excerpt": "    dict(type='RandomFlip', flip_ratio=0.5),                    #:Stochastic inversion, prob=0.5  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8511535834563826
      ],
      "excerpt": "#: learning policy \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "            max_per_img=30) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/OpenFirework/pytorch_solov2",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-07-23T08:13:32Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-21T07:45:05Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9918703180268044
      ],
      "excerpt": "This code is a partial code extracted from the original code of the official author of SOLOV2 (the part of the lightweight implementation of SOLOV2_LIGHT), which does not rely on MMDetetion and MMCV. It is still relatively simple and has a lot of shortcomings to be improved.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8568103952748233
      ],
      "excerpt": "1\u3001Only supports Resnet18, Resnet34 backbone to train.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8290981361906036
      ],
      "excerpt": "3\u3001Incomplete configuration items for training and testing. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9256604530546862
      ],
      "excerpt": "    dict(type='Pad', size_divisor=32),                                #: SOLOV2 has requirements on the size of network input, and the image size needs to be a multiple of 32 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8914746454310497
      ],
      "excerpt": "Modify the last code of the 'eval.py' code based on your dataset \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": ": valmodel_weight     model weight \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9451655049349765,
        0.9919990476998681
      ],
      "excerpt": "2. The inputs of solov2 require multiples of 32 in both length and width, depending on the grid he is drawing, and other dimensions may be impossible to calculate.     \n3. Solov2 is relatively simple on the whole, with no strange operations or layers. There is a convolution operation in post-processing (the convolution core is learned during training, and it takes little time to compute on GPU). Matrix_NMS also takes little time. After this part of processing, the output of the network is: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "SOLOv2 pytorch (without mmdetection and mmcv)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/OpenFirework/pytorch_solov2/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 12,
      "date": "Wed, 29 Dec 2021 04:37:55 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/OpenFirework/pytorch_solov2/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "OpenFirework/pytorch_solov2",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "python 3.6+     \npip install torch==1.5.1  torchvision==0.6.1   #Higher versions of PyTorch also tested OK         \npip install pycocotools      \npip install numpy   \npip install scipy    \ncd pytorch_solov2/      \npython setup.py develop      #*Install the original FocalLoss of SoloV2*\n\n**2021-05-17 update**    \nCompletely remove the dependency on MMCV\n\n**2020-10-13 update**          \nImprove the evaluation code, save it as the picture after instance segmentation, and add video test code.    \n\n**2020-07-23update**    \nThe implementation of FocalLoss in the latest version of MMCV-Full is different from that in the original SOLO version (the processing label of the background class is different). If the MMCV-Full FocalLoss is used for training, although the loss is reduced, the actual prediction is not accurate.\n\nSo replace it with the original FocalLoss implementation. \n```\npython setup.py develop\n```\nAfter the replacement, retraining, loss and prediction are normal.\n\n\n ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8276515421988071
      ],
      "excerpt": "if use COCO dataset   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9303832791208821
      ],
      "excerpt": "ln -s /path/coco2017 coco \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8393211816004532
      ],
      "excerpt": "   'name': 'COCO 2017', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8837680365796365
      ],
      "excerpt": "```python  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8668241835521246
      ],
      "excerpt": "    'name': 'casia-SPT 2020',   #:dataset's name  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "    'name': 'solov2_base',  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8072936531771125
      ],
      "excerpt": "    'num_gpus': 1,                       #:only support single GPU for now \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "    'name': 'solov2_base',  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8837680365796365
      ],
      "excerpt": "```Python  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8732089505944296
      ],
      "excerpt": "\u94fe\u63a5\uff1ahttps://pan.baidu.com/s/1MCVkAeKwTua-m9g1NLyRpw  \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.865434129483685
      ],
      "excerpt": "After configuring the items in the config.py\uff0crun command \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8178418550761815
      ],
      "excerpt": "in 'data' path run command: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8919770137505503
      ],
      "excerpt": "modify the 'coco2017_dataset' item in 'config.py' , for example\uff1a  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8696526610142726,
        0.8045003346982441,
        0.8483228575442472
      ],
      "excerpt": "    'name': 'casia-SPT 2020',   #:dataset's name  \n    'train_prefix': './data/casia-SPT_val/val/',   #:dataset path \n    'train_info': 'val_annotation.json',           #:label file \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "    'name': 'solov2_base',  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8172342705654815
      ],
      "excerpt": "    'num_classes': len(coco2017_dataset.class_names) + 1, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9217978575119137
      ],
      "excerpt": "- Complete Example Settings in 'data/config.py'python \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "    'name': 'solov2_base',  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8172342705654815
      ],
      "excerpt": "    'num_classes': len(coco2017_dataset.class_names) + 1, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8888541102551851,
        0.8223298755278993
      ],
      "excerpt": "    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),     #:load annotations  \n    dict(type='Resize',                                              #:Multiscale training, then select a size from the size behind \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029,
        0.8594142235991984
      ],
      "excerpt": "        multiscale_mode='value', \n        keep_ratio=True), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8143532214572897
      ],
      "excerpt": "    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'], meta_keys=('filename', 'ori_shape', 'img_shape', 'pad_shape', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.847968214625765
      ],
      "excerpt": "'total_epoch': 36,               #:set epoch number for train \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8786742964490298
      ],
      "excerpt": "'optimizer': dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001),   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8237935980447728,
        0.8314176166058286
      ],
      "excerpt": "'resume_from': None,    #:resume from a checkpoing file,  start epoch 1  if None \n'epoch_iters_start': 1,    #:start epoch number \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8606875871258853
      ],
      "excerpt": "            dict(type='Resize', keep_ratio=True), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9059382683940477
      ],
      "excerpt": ": benchmark         whether write result json to file \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9036097632154906,
        0.8521380035598477,
        0.8059726881648243,
        0.8943096850060217
      ],
      "excerpt": "eval(valmodel_weight='pretrained/solov2_448_r18_epoch_36.pth',data_path=\"data/casia-SPT_val/val/JPEGImages\", benchmark=False, test_mode=\"images\", save_imgs=False) \n:eval(valmodel_weight='pretrained/solov2_448_r18_epoch_36.pth',data_path=\"cam0.avi\", benchmark=False, test_mode=\"video\") \nrun eval.pyPython \npython eval.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8509653106547419,
        0.8509653106547419
      ],
      "excerpt": "resnet18: ./pretrained/resnet18_nofc.pth \nresnet34:  ./pretrained/resnet18_nofc.pth  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8509653106547419
      ],
      "excerpt": "SOLOv2_Light_448_R18_36: ./pretrained/solov2_448_r18_epoch_36.pth  \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/OpenFirework/pytorch_solov2/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Cuda",
      "C++"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Pytorch solov2 project",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pytorch_solov2",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "OpenFirework",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/OpenFirework/pytorch_solov2/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 43,
      "date": "Wed, 29 Dec 2021 04:37:55 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "instance-segmentation",
      "cv"
    ],
    "technique": "GitHub API"
  }
}