{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1710.10196",
      "https://arxiv.org/abs/2002.07940](https://arxiv.org/pdf/2002.07940.pdf)). The neural network is a progressively growing generative adversarial network (PGGAN, T. Karras, T. Aila, S. Laine, J. Lehtinen, *Progressive Growing of GANs for Improved Quality, Stability, and Variation*, [https://arxiv.org/abs/1710.10196](https://arxiv.org/abs/1710.10196)).\n\n![PGGAN](https://github.com/FloList/21cmGAN/blob/master/pngs/PGGAN_sketch.png)\n\nThe 21cmGAN code makes use of code snippets from the following sources:\n\n - https://github.com/tkarras/progressive_growing_of_gans\n - https://github.com/zhangqianhui/progressive_growing_of_gans_tensorflow\n - https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/6_MultiGPU/multigpu_cnn.py\n - https://github.com/shaohua0116/Group-Normalization-Tensorflow/blob/master/ops.py\n\n*Author*: Florian List (Sydney Institute for Astronomy, School of Physics, A28, The University of Sydney, NSW 2006, Australia).\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n   \nFor any queries, please contact me at flis0155 at uni dot sydney dot edu dot au.\n\nThe training data is taken from the 21SSD catalogue (B. Semelin, E. Eames, F. Bolgar, M. Caillat, *21SSD: a public data base of simulated 21-cm signals from the epoch of reionization*, 2017, [MNRAS 472, 4508](http://academic.oup.com/mnras/article/472/4/4508/4104651/21SSD-a-public-data-base-of-simulated-21cm-signals)).\n\n# Requirements\n21cmGAN has been tested with `Tensorflow 1.13.1`, `Numpy 1.15.4`, `Scipy 1.1.0`, `Matplotlib 3.1.0`. Moreover, we use `Scikit-image 0.14.0` for resizing images, `Pynverse 0.1.4.4` for numerically inverting the scaling of the brightness temperature (this is not needed if you scale the data with a function that has an analytic inverse function), and `h5py 2.8.0` for loading HDF5 files.\n\n# Generating samples using the trained PGGAN \n\nUsing the trained PGGAN for the generation of tomographic samples is easy. A tutorial that shows how to do it is provided as a Jupyter notebook, named `21cmGAN_tutorial.ipynb`. The three parameters that you can adjust are:\n\n- X-ray emissivity <img src=\"https://render.githubusercontent.com/render/math?math=f_X = (0.1 - 10.0)\">\n- Fraction of hard X-rays <img src=\"https://render.githubusercontent.com/render/math?math=r_{h/s",
      "https://arxiv.org/abs/1710.10196](https://arxiv.org/abs/1710.10196)).\n\n![PGGAN](https://github.com/FloList/21cmGAN/blob/master/pngs/PGGAN_sketch.png)\n\nThe 21cmGAN code makes use of code snippets from the following sources:\n\n - https://github.com/tkarras/progressive_growing_of_gans\n - https://github.com/zhangqianhui/progressive_growing_of_gans_tensorflow\n - https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/6_MultiGPU/multigpu_cnn.py\n - https://github.com/shaohua0116/Group-Normalization-Tensorflow/blob/master/ops.py\n\n*Author*: Florian List (Sydney Institute for Astronomy, School of Physics, A28, The University of Sydney, NSW 2006, Australia).\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n   \nFor any queries, please contact me at flis0155 at uni dot sydney dot edu dot au.\n\nThe training data is taken from the 21SSD catalogue (B. Semelin, E. Eames, F. Bolgar, M. Caillat, *21SSD: a public data base of simulated 21-cm signals from the epoch of reionization*, 2017, [MNRAS 472, 4508](http://academic.oup.com/mnras/article/472/4/4508/4104651/21SSD-a-public-data-base-of-simulated-21cm-signals)).\n\n# Requirements\n21cmGAN has been tested with `Tensorflow 1.13.1`, `Numpy 1.15.4`, `Scipy 1.1.0`, `Matplotlib 3.1.0`. Moreover, we use `Scikit-image 0.14.0` for resizing images, `Pynverse 0.1.4.4` for numerically inverting the scaling of the brightness temperature (this is not needed if you scale the data with a function that has an analytic inverse function), and `h5py 2.8.0` for loading HDF5 files.\n\n# Generating samples using the trained PGGAN \n\nUsing the trained PGGAN for the generation of tomographic samples is easy. A tutorial that shows how to do it is provided as a Jupyter notebook, named `21cmGAN_tutorial.ipynb`. The three parameters that you can adjust are:\n\n- X-ray emissivity <img src=\"https://render.githubusercontent.com/render/math?math=f_X = (0.1 - 10.0)\">\n- Fraction of hard X-rays <img src=\"https://render.githubusercontent.com/render/math?math=r_{h/s"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9988146602855877
      ],
      "excerpt": "Author: Florian List (Sydney Institute for Astronomy, School of Physics, A28, The University of Sydney, NSW 2006, Australia). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9435132689567252
      ],
      "excerpt": "For any queries, please contact me at flis0155 at uni dot sydney dot edu dot au. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8207940084462922
      ],
      "excerpt": "    cat trained.ckpt-440000.tar.xz.part* &gt; trained.ckpt-440000.tar.xz \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/FloList/21cmGAN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-12-16T02:09:44Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-11-17T22:08:57Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9736611529796008
      ],
      "excerpt": "This is the Tensorflow implementation of the code 21cmGAN, which generates 2D tomographic samples of the 21cm brightness temperature of HI gas at a resolution of (up to) 32 x 256 pixels during the Epoch of Reionisation between redshifts  <img src=\"https://render.githubusercontent.com/render/math?math=z = 6 - 15\">. The paper can be found here: https://doi.org/10.1093/mnras/staa523 (arXiv:2002.07940). The neural network is a progressively growing generative adversarial network (PGGAN, T. Karras, T. Aila, S. Laine, J. Lehtinen, Progressive Growing of GANs for Improved Quality, Stability, and Variation, arXiv:1710.10196). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8236738901713548,
        0.9947447326224833,
        0.9829525588499433,
        0.9950001196796986
      ],
      "excerpt": "Author: Florian List (Sydney Institute for Astronomy, School of Physics, A28, The University of Sydney, NSW 2006, Australia). \nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: \nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. \nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9610766165988818,
        0.9288658999328283
      ],
      "excerpt": "The training data is taken from the 21SSD catalogue (B. Semelin, E. Eames, F. Bolgar, M. Caillat, 21SSD: a public data base of simulated 21-cm signals from the epoch of reionization, 2017, MNRAS 472, 4508). \nUsing the trained PGGAN for the generation of tomographic samples is easy. A tutorial that shows how to do it is provided as a Jupyter notebook, named 21cmGAN_tutorial.ipynb. The three parameters that you can adjust are: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.892968755527947
      ],
      "excerpt": "Since the trained neural network is too large to host it on Github as a whole, the file is split up into several parts. Run \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259,
        0.8979411005071259
      ],
      "excerpt": "X = data[()][\"params\"]   \nY = data[()][\"data\"] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "    Y = np.asarray(hf[\"data\"]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8930901044020226,
        0.8930901044020226
      ],
      "excerpt": "features = tf.parse_single_example(serialised,   \n           features={   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9585901085476115,
        0.8779269009658863
      ],
      "excerpt": "If your images have a different aspect ratio from 1 : 8, you will need to manually go through the code and change this wherever it occurs (one of the reasons for this inflexible behaviour is that the two final convolutional layers with kernel sizes 1x4 and 1x5 with valid padding at the end of the discriminator are chosen such that a single number (1 x 1) results. \nMoreover, check the functions \"parse_function\" and \"parse_function_tf\" in ops.py that might be adjusted, in particular \"scale_pars\" and \"scale_pars_tf\", as well as the plotting functions in utils.py some of which are tailored for the 21SSD catalogue (legends, etc.). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8893805629506615,
        0.8430753972173081
      ],
      "excerpt": "A workflow for producing the plots in the 21cmGAN paper, generating and saving samples, as well as a basic ABC rejection sampling algorithm can be found in model_test.py. \nRandom samples for some parameter vectors: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9518663993370683
      ],
      "excerpt": "Interpolating in parameter space: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Tensorflow implementation of the PGGAN \"21cmGAN\" for the creation of 2D tomography samples of the 21cm brightness temperature during the Epoch of Reionization.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/FloList/21cmGAN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 10:48:30 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/FloList/21cmGAN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "FloList/21cmGAN",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/FloList/21cmGAN/master/21cmGAN_tutorial.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/FloList/21cmGAN/master/download_data.sh"
    ],
    "technique": "File Exploration"
  },
  "invocation": [
    {
      "confidence": [
        0.8415976035938979
      ],
      "excerpt": "Then, extract the archive trained.ckpt-440000.tar.xz in the same folder where checkpoint, trained.ckpt-440000.index, and trained.ckpt-440000.meta are saved. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8986915561295276,
        0.8550162597498284
      ],
      "excerpt": "data = np.load(\"....\")   \nX = data[()][\"params\"]   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8299921343146337,
        0.9173513826860761,
        0.9119655117178174
      ],
      "excerpt": "with h5.File(\"...\", 'r') as hf:   \n    X = np.asarray(hf[\"params\"]) \n    Y = np.asarray(hf[\"data\"]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8123763140827432,
        0.8123763140827432
      ],
      "excerpt": "        'params_raw': tf.VarLenFeature(tf.float32),   \n              'image_raw': tf.VarLenFeature(tf.float32)}) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8893529395006635
      ],
      "excerpt": "The script for training 21cmGAN is main.py.  First, adjust the hyperparameters (fields of the dictionary \"par\"), then run the script. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/FloList/21cmGAN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 FloList\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "21cmGAN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "21cmGAN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "FloList",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/FloList/21cmGAN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "21cmGAN has been tested with `Tensorflow 1.13.1`, `Numpy 1.15.4`, `Scipy 1.1.0`, `Matplotlib 3.1.0`. Moreover, we use `Scikit-image 0.14.0` for resizing images, `Pynverse 0.1.4.4` for numerically inverting the scaling of the brightness temperature (this is not needed if you scale the data with a function that has an analytic inverse function), and `h5py 2.8.0` for loading HDF5 files.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Thu, 23 Dec 2021 10:48:30 GMT"
    },
    "technique": "GitHub API"
  }
}