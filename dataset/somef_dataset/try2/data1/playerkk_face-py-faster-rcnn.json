{
  "citation": [
    {
      "confidence": [
        0.999827053202734
      ],
      "excerpt": "For technical details, please refer to the technial report here. Faster R-CNN was initially described in the NIPS 2015 paper. The approximate joint end-to-end training was described in the PAMI paper. Please consider cite these papers if you find this repository useful for your research. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/playerkk/face-py-faster-rcnn",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-10-29T02:57:22Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-16T15:13:48Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9844618953904538,
        0.9293133965017917
      ],
      "excerpt": "This repository contains source files of face detection using the Faster R-CNN. It is developed based on the awesome py-faster-rcnn repository.  \nFor technical details, please refer to the technial report here. Faster R-CNN was initially described in the NIPS 2015 paper. The approximate joint end-to-end training was described in the PAMI paper. Please consider cite these papers if you find this repository useful for your research. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Face Detection with the Faster R-CNN",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Pre-trained ImageNet models can be downloaded for the three networks described in the paper: ZF and VGG16.\n\n```Shell\ncd $FRCN_ROOT\n./data/scripts/fetch_imagenet_models.sh\n```\nVGG16 comes from the [Caffe Model Zoo](https://github.com/BVLC/caffe/wiki/Model-Zoo), but is provided here for your convenience.\nZF was trained at MSRA.\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/playerkk/face-py-faster-rcnn/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 156,
      "date": "Fri, 24 Dec 2021 09:19:16 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/playerkk/face-py-faster-rcnn/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "playerkk/face-py-faster-rcnn",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/playerkk/face-py-faster-rcnn/master/experiments/scripts/fast_rcnn.sh",
      "https://raw.githubusercontent.com/playerkk/face-py-faster-rcnn/master/experiments/scripts/faster_rcnn_end2end.sh",
      "https://raw.githubusercontent.com/playerkk/face-py-faster-rcnn/master/experiments/scripts/faster_rcnn_alt_opt.sh",
      "https://raw.githubusercontent.com/playerkk/face-py-faster-rcnn/master/data/scripts/fetch_faster_rcnn_models.sh",
      "https://raw.githubusercontent.com/playerkk/face-py-faster-rcnn/master/data/scripts/fetch_selective_search_data.sh",
      "https://raw.githubusercontent.com/playerkk/face-py-faster-rcnn/master/data/scripts/fetch_imagenet_models.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Download the WIDER face dataset [here](http://mmlab.ie.cuhk.edu.hk/projects/WIDERFace/). Extract all files into one directory named WIDER.\n\n2. It should have this basic structure\n\n  ```Shell\n    $WIDER/                                 #: data directory\n    $WIDER/WIDER_train/                     #: training set\n    $WIDER/WIDER_val/                       #: validation set\n    #: ... and several other directories ...\n  ```\n    \n3. Download the [file](http://jianghz.me/files/wider_face_train_annot.txt) and put it under the WIDER directory. It contains annotations of the training images, which follows the annotation format of [FDDB](http://vis-www.cs.umass.edu/fddb/README.txt). Faces that are less than 10 pixels are discarded (considered as background), which slightly improves the performance.\n\n4. Create symlinks for the WIDER dataset\n\n  ```Shell\n    cd $FRCN_ROOT/data\n    ln -s $WIDER WIDER\n  ```\nUsing symlinks is a good idea because you will likely want to share the same PASCAL dataset installation between multiple projects.\n5. Follow the next sections to download pre-trained ImageNet models\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Clone the face Faster R-CNN repository\n  ```Shell\n  #: Make sure to clone with --recursive\n  git clone --recursive git@github.com:playerkk/face-py-faster-rcnn.git\n  ```\n\n2. We'll call the directory that you cloned Faster R-CNN into `FRCN_ROOT`\n\n   *Ignore notes 1 and 2 if you followed step 1 above.*\n\n   **Note 1:** If you didn't clone Faster R-CNN with the `--recursive` flag, then you'll need to manually clone the `caffe-fast-rcnn` submodule:\n    ```Shell\n    git submodule update --init --recursive\n    ```\n    **Note 2:** The `caffe-fast-rcnn` submodule needs to be on the `faster-rcnn` branch (or equivalent detached state). This will happen automatically *if you followed step 1 instructions*.\n\n3. Build the Cython modules\n    ```Shell\n    cd $FRCN_ROOT/lib\n    make\n    ```\n\n4. Build Caffe and pycaffe\n    ```Shell\n    cd $FRCN_ROOT/caffe-fast-rcnn\n    #: Now follow the Caffe installation instructions here:\n    #:   http://caffe.berkeleyvision.org/installation.html\n\n    #: If you're experienced with Caffe and have all of the requirements installed\n    #: and your Makefile.config in place, then simply do:\n    make -j8 && make pycaffe\n    ```\n\n5. Download pre-computed Faster R-CNN detectors\n    ```Shell\n    cd $FRCN_ROOT\n    ./data/scripts/fetch_faster_rcnn_models.sh\n    ```\n\n    This will populate the `$FRCN_ROOT/data` folder with `faster_rcnn_models`. See `data/README.md` for details.\n    These models were trained on VOC 2007 trainval.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8864574716181884,
        0.8028459453632889
      ],
      "excerpt": "Requirements: hardware \nBasic installation \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/playerkk/face-py-faster-rcnn/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "C",
      "Shell",
      "Cuda",
      "MATLAB",
      "C++",
      "Makefile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2016 Huaizu Jiang\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Face Detection with the Faster R-CNN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "face-py-faster-rcnn",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "playerkk",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/playerkk/face-py-faster-rcnn/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Requirements for `Caffe` and `pycaffe` (see: [Caffe installation instructions](http://caffe.berkeleyvision.org/installation.html))\n\n  **Note:** Caffe *must* be built with support for Python layers!\n\n  ```make\n  #: In your Makefile.config, make sure to have this line uncommented\n  WITH_PYTHON_LAYER := 1\n  #: Unrelatedly, it's also recommended that you use CUDNN\n  USE_CUDNN := 1\n  ```\n\n  You can download the [Makefile.config](http://www.cs.berkeley.edu/~rbg/fast-rcnn-data/Makefile.config) (from Ross Girshick) for reference.  \n  \n2. Python packages you might not have: `cython`, `python-opencv`, `easydict`\n\n3. [Optional] MATLAB is required for **official** PASCAL VOC evaluation only. The code now includes unofficial Python evaluation code.\n\n4. If you have trouble compiling the Caffe in the submodule, you might find [this one](https://supermoe.cs.umass.edu/~hzjiang/data/caffe-fast-rcnn-cuda8.tar.gz) helpful.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "1. For training smaller networks (ZF, VGG_CNN_M_1024) a good GPU (e.g., Titan, K20, K40, ...) with at least 3G of memory suffices\n2. For training Fast R-CNN with VGG16, you'll need a K40 (~11G of memory)\n3. For training the end-to-end version of Faster R-CNN with VGG16, 3G of GPU memory is sufficient (using CUDNN)\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 368,
      "date": "Fri, 24 Dec 2021 09:19:16 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Clone the face Faster R-CNN repository\n  ```Shell\n  #: Make sure to clone with --recursive\n  git clone --recursive git@github.com:playerkk/face-py-faster-rcnn.git\n  ```\n\n2. We'll call the directory that you cloned Faster R-CNN into `FRCN_ROOT`\n\n   *Ignore notes 1 and 2 if you followed step 1 above.*\n\n   **Note 1:** If you didn't clone Faster R-CNN with the `--recursive` flag, then you'll need to manually clone the `caffe-fast-rcnn` submodule:\n    ```Shell\n    git submodule update --init --recursive\n    ```\n    **Note 2:** The `caffe-fast-rcnn` submodule needs to be on the `faster-rcnn` branch (or equivalent detached state). This will happen automatically *if you followed step 1 instructions*.\n\n3. Build the Cython modules\n    ```Shell\n    cd $FRCN_ROOT/lib\n    make\n    ```\n\n4. Build Caffe and pycaffe\n    ```Shell\n    cd $FRCN_ROOT/caffe-fast-rcnn\n    #: Now follow the Caffe installation instructions here:\n    #:   http://caffe.berkeleyvision.org/installation.html\n\n    #: If you're experienced with Caffe and have all of the requirements installed\n    #: and your Makefile.config in place, then simply do:\n    make -j8 && make pycaffe\n    ```\n\n5. Download pre-computed Faster R-CNN detectors\n    ```Shell\n    cd $FRCN_ROOT\n    ./data/scripts/fetch_faster_rcnn_models.sh\n    ```\n\n    This will populate the `$FRCN_ROOT/data` folder with `faster_rcnn_models`. See `data/README.md` for details.\n    These models were trained on VOC 2007 trainval.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "To train a Faster R-CNN face detector using the **approximate joint training** method, use `experiments/scripts/faster_rcnn_end2end.sh`.\nOutput is written underneath `$FRCN_ROOT/output`.\n\n```Shell\ncd $FRCN_ROOT\n./experiments/scripts/faster_rcnn_end2end.sh [GPU_ID] [NET] wider [--set ...]\n#: GPU_ID is the GPU you want to train on\n#: NET in {VGG16} is the network arch to use\n#: --set ... allows you to specify fast_rcnn.config options, e.g.\n#:   --set EXP_DIR seed_rng1701 RNG_SEED 1701\n```\n\nThis method trains the RPN module jointly with the Fast R-CNN network, rather than alternating between training the two. It results in faster (~ 1.5x speedup) training times and similar detection accuracy. See these [slides](https://www.dropbox.com/s/xtr4yd4i5e0vw8g/iccv15_tutorial_training_rbg.pdf?dl=0) for more details.\n\nArtifacts generated by the scripts in `tools` are written in this directory.\n\nTrained Fast R-CNN networks are saved under:\n\n```\noutput/<experiment directory>/<dataset name>/\n```\n\nTo test the trained model, run\n\n```\npython ./tools/run_face_detection_on_fddb.py --gpu=0\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}