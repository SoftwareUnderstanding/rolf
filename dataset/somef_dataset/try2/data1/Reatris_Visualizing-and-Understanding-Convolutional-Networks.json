{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1311.2901](https://arxiv.org/abs/1311.2901",
      "https://arxiv.org/abs/1311.2901"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9848179726092176
      ],
      "excerpt": "\u4e00\u822c\u7684RGB\u56fe\u50cf\u50cf\u7d20\u53d6\u503c\u8303\u56f4\u4e3a0-255\uff0c\u4f46\u5728\u7f51\u7edc\u4e2d\u7684\u6570\u636e\u4e0d\u4e00\u5b9a\u4f1a\u5728\u8fd9\u4e2a\u8303\u56f4\u5185\uff0c\u5b83\u53ef\u80fd\u66f4\u63a5\u8fd1(-1, 1)\u3001(-10, 10)... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9546157635310808
      ],
      "excerpt": "    self.title = layername \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "    if(pix_range==0): #:\u5982\u679c\u6240\u6709\u503c\u90fd\u662f\u96f6\u5219\u76f4\u63a5\u8fd4\u56de\uff08\u4e0b\u9762\u4e0d\u80fd\u9664\u4ee5\u96f6\uff09 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "        if count==0: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8043073075947367
      ],
      "excerpt": "        if(self.single_featuremap_display):#:\u5355\u72ec\u663e\u793a\u4e00\u5f20featuremap \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9977457373114543
      ],
      "excerpt": "            plt.title('featuremap'+str(count)+' of '+self.title) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9977457373114543
      ],
      "excerpt": "    plt.title('total_featuremap of '+self.title) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9456255068125268
      ],
      "excerpt": "2020-07-28 11:12:35,993-INFO: generated new fontManager \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "    input_shape : \u8f93\u5165\u6570\u636e\u7684\u5f62\u72b6\uff08\u4f8b\uff1a(10, 1, 28, 28)\uff09 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8955886365383559
      ],
      "excerpt": "    dx=fluid.dygraph.to_variable(dx.astype('float32')) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "    if is_display_feature: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "            if(count%train_paramters['batch_size']==0): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8469050553620789
      ],
      "excerpt": "    plt.title('cat to classes12 ',fontsize=24) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "            if(all_iter%893==0): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "    if len(cat_face0)>0: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8834756699654108
      ],
      "excerpt": "            img=Image.open(imgp) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8834756699654108
      ],
      "excerpt": "        img=Image.open(img_path) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9501841117884755
      ],
      "excerpt": "        if(result==10): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8739914556468978
      ],
      "excerpt": "        if(result==11): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "    print('\u732b\u7c7b\u522b:10') \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Reatris/Visualizing-and-Understanding-Convolutional-Networks",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-07-29T13:36:34Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-12T09:00:29Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8051419082246902
      ],
      "excerpt": "    for featuremap in self.featuremaps: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8113085226632281
      ],
      "excerpt": "2020-07-28 11:12:35,993-INFO: generated new fontManager \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259,
        0.8979411005071259
      ],
      "excerpt": "unzip data/data10954/cat_12_test.zip  \nunzip data/data10954/cat_12_train.zip \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.895608950120991
      ],
      "excerpt": "    with open(train_list_path,'r') as train_dirs: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "        for i in img_mask: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127
      ],
      "excerpt": "with fluid.dygraph.guard(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "    model=VGG16net()  #:\u5b9e\u5217\u5316\u6a21\u578b \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "        model.load_dict(param_dict) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9813385508298789
      ],
      "excerpt": "        for pass_id,data in enumerate(train_loader()): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "        fluid.save_dygraph(model.state_dict(),train_paramters['save_model_name']) #:\u4fdd\u5b58\u6a21\u578b\u53c2\u6570 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "        for imgp in cat_face0: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127
      ],
      "excerpt": "with fluid.dygraph.guard(): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877,
        0.860059181823877,
        0.860059181823877
      ],
      "excerpt": "    model=VGG16net() \n    model.load_dict(param_dict) \n    model.eval() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "paddlepaddle\u6846\u67b6 \u8bba\u6587\u590d\u73b0\uff08CNN\u7279\u5f81\u53ef\u89c6\u5316\uff09+VGG16\u732b\u8138\u5206\u7c7b\uff08\u52a8\u6001\u56fe\uff09",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Reatris/Visualizing-and-Understanding-Convolutional-Networks/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Sun, 26 Dec 2021 12:06:47 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Reatris/Visualizing-and-Understanding-Convolutional-Networks/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Reatris/Visualizing-and-Understanding-Convolutional-Networks",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Reatris/Visualizing-and-Understanding-Convolutional-Networks/master/647130.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9295482193607497
      ],
      "excerpt": "2020-07-28 11:12:35,653-INFO: font search path ['/opt/conda/envs/python35-paddle120-env/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf', '/opt/conda/envs/python35-paddle120-env/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/afm', '/opt/conda/envs/python35-paddle120-env/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/pdfcorefonts'] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8233588558014837
      ],
      "excerpt": "    dout = dout.numpy()        \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8233588558014837
      ],
      "excerpt": "        all_loss.append(avg_loss.numpy()[0]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8233588558014837
      ],
      "excerpt": "        all_accs.append(acc.numpy()[0]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8732089505944296
      ],
      "excerpt": "| \u4e3b\u9875|https://aistudio.baidu.com/aistudio/personalcenter/thirdview/206265| \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9457175861910134,
        0.9133368656218674,
        0.8998762352091253,
        0.8044146895679722
      ],
      "excerpt": "import numpy as np \nimport cv2 \nimport matplotlib.pylab as plt \nfrom PIL import Image \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8255393659724009
      ],
      "excerpt": "        layername\uff1a\u663e\u793a\u7279\u5f81\u56fe\u65f6\u81ea\u5b9a\u4e49\u7684\u540d\u79f0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8478307060456173
      ],
      "excerpt": "        self.param = (np.transpose(layer.parameters()[0].numpy(),(0,1,3,2)))   #:\u83b7\u5f97\u5bf9\u5e94\u5c42\u5377\u79ef\u53c2\u6570\uff0c\u5e76\u4e14\u8f6c\u7f6e\uff08NCHW-->NCWH\uff09\u4f5c\u4e3a\u65b0\u53c2\u6570 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8997243352845468,
        0.859319223362436,
        0.8997243352845468
      ],
      "excerpt": "    pix_max=np.max(img_pixs)#:\u53d6\u6700\u5927\u50cf\u7d20 \n    pix_min=np.min(img_pixs)#:\u53d6\u6700\u5c0f\u50cf\u7d20 \n    pix_range=np.abs(pix_max)+np.abs(pix_min)#:\u83b7\u53d6\u50cf\u7d20\u8ddd\u79bb \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8727826850285016,
        0.8310159060815993
      ],
      "excerpt": "            single_featuremap = Image.fromarray(np.asarray(featuremap).astype('uint8')).convert('RGB') \n            plt.imshow(single_featuremap) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8668258580770863
      ],
      "excerpt": "            plt.show() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8727826850285016,
        0.8310159060815993
      ],
      "excerpt": "    total_featuremaps = Image.fromarray(np.asarray(total_featuremaps).astype('uint8')).convert('RGB') \n    plt.imshow(total_featuremaps) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8668258580770863
      ],
      "excerpt": "    plt.show() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8405090118362882,
        0.8826917448272372
      ],
      "excerpt": "    img = np.pad(input_data, [(0,0), (0,0), (pad, pad), (pad, pad)], 'constant') #:\u8fdb\u884c\u8fb9\u586b\u5145\uff0cpadding \n    col = np.zeros((N, C, filter_h, filter_w, out_h, out_w))    #:\u521b\u5efa\u6c60\u5316\u8f93\u51fa \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8690828222267011
      ],
      "excerpt": "    img=np.zeros((N,C,H+2*pad+stride-1,W+2*pad+stride-1)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8899299545219052
      ],
      "excerpt": "    out = np.max(col,axis=1) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8245864319340724
      ],
      "excerpt": "    arg_max = np.argmax(col,axis=1)   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8940619758681293
      ],
      "excerpt": "    dmax = np.zeros((dout.size,pool_size)) #:\u521b\u5efa\u53cd\u6c60\u5316\u8f93\u51fa \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8505159152472684,
        0.8505159152472684
      ],
      "excerpt": "unzip data/data10954/cat_12_test.zip  \nunzip data/data10954/cat_12_train.zip \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8124716930588934
      ],
      "excerpt": "            img_path,label=line.split() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9215012081578806,
        0.8737288687529231
      ],
      "excerpt": "        img_mask=np.arange(len(train_dir_list)) #:\u751f\u6210\u7d22\u5f15 \n        np.random.shuffle(img_mask) #:\u968f\u673a\u6253\u4e71\u7d22\u5f15 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8805376655291574
      ],
      "excerpt": "                yield np.asarray(imgs).astype('float32'),np.asarray(labels).astype('int64').reshape((train_paramters['batch_size'],1)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8219152953767295
      ],
      "excerpt": "    plt.xlabel('iters',fontsize=20) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8533491498728487,
        0.8397595023834776,
        0.8310159060815993,
        0.9259057526449173,
        0.8668258580770863
      ],
      "excerpt": "    plt.plot(iters,accs,color='red',label='accuracy') \n    plt.plot(iters,loss,color='green',label='loss') \n    plt.legend() \n    plt.grid() \n    plt.show() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9446546964994679
      ],
      "excerpt": "        print('continue training') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8737873112808705
      ],
      "excerpt": "    model.train() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8404927443466946
      ],
      "excerpt": "    opt=fluid.optimizer.SGDOptimizer(learning_rate=0.01,parameter_list=model.parameters()) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984,
        0.8032388657350569
      ],
      "excerpt": "                is_display_feature=True \n                out = model(images,is_display_feature) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8032388657350569
      ],
      "excerpt": "                out = model(images,is_display_feature) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8645317995600886
      ],
      "excerpt": "        print('pass_epoch:{},iters:{},loss\uff1a{},acc\uff1a{}'.format(pass_num,all_iter,avg_loss.numpy()[0],acc.numpy()[0])) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731919162700088
      ],
      "excerpt": "    print('finished training') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8032073815753684
      ],
      "excerpt": "    img=np.reshape(img,(1,3,244,244))#:\u9884\u6d4b\u56fe\u7247\u8981\u662f4\u7ef4\u7684 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8101925974096635,
        0.8532835160041915
      ],
      "excerpt": "            plt.imshow(img) \n            plt.show(img) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "        print(\"\u6ca1\u6709\u8fd9\u4e2a\u7c7b\u522b\u7684\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9215012081578806,
        0.8737288687529231
      ],
      "excerpt": "    list_mask=np.arange(len(dir_list)) \n    np.random.shuffle(list_mask) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "        is_display_feature=True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8101925974096635,
        0.8532835160041915
      ],
      "excerpt": "        plt.imshow(img) \n        plt.show(img) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8615811777429726
      ],
      "excerpt": "        result=np.argmax(out.numpy()) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "    print('\u732b\u7c7b\u522b:0') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "    print('\u732b\u7c7b\u522b:1') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "    print('\u732b\u7c7b\u522b:2') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "    print('\u732b\u7c7b\u522b:3') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "    print('\u732b\u7c7b\u522b:4') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "    print('\u732b\u7c7b\u522b:5') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "    print('\u732b\u7c7b\u522b:6') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "    print('\u732b\u7c7b\u522b:7') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "    print('\u732b\u7c7b\u522b:8') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.936606094659785
      ],
      "excerpt": "    print('\u732b\u7c7b\u522b:9') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9346081970836996
      ],
      "excerpt": "    print('\u732b\u7c7b\u522b:10') \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Reatris/Visualizing-and-Understanding-Convolutional-Networks/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Reatris\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Visualizing-and-Understanding-Convolutional-Networks",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Visualizing-and-Understanding-Convolutional-Networks",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Reatris",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Reatris/Visualizing-and-Understanding-Convolutional-Networks/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Sun, 26 Dec 2021 12:06:47 GMT"
    },
    "technique": "GitHub API"
  }
}