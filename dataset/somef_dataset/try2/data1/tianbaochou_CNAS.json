{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1806.09055"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tianbaochou/CNAS",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-10-28T13:30:11Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-11-02T09:08:48Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9973686961975222,
        0.8437316264048577
      ],
      "excerpt": "Our work is based on DARTS \nWe add the cweight operation (squeeze-and-excitation) and channel shuffle operation  \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tianbaochou/CNAS/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Thu, 23 Dec 2021 10:07:45 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/tianbaochou/CNAS/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "tianbaochou/CNAS",
    "technique": "GitHub API"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/tianbaochou/CNAS/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "C",
      "HTML",
      "C++"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# CNAS",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "CNAS",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "tianbaochou",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tianbaochou/CNAS/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "\r\n+ Ubuntu14.04/16.04 or Window10 (Win7 may also support.)\r\n\r\n+ Python >= 3.6\r\n\r\n+ torch >= 0.4.1\r\n\r\n+ torchvision == 0.2.1\r\n\r\n+ seaborn (optional)\r\n\r\n+ pygraphviz (optional)\r\n\r\nNOTE: pytorch 0.4.x also work ok, but will meet [ConnectionResetError](https://github.com/pytorch/pytorch/issues/9127)\r\nWhen use the second approximation. \r\n\r\nTodo:\r\n\r\n- [ ] Merge into the CNASV prototype\r\n- [ ] Replace the backbone network by automatically search outer network\r\n- [ ] Give up the cell-based architecture for designing more flexible search space\r\n- [ ] Merge this work to CNASV ( Search-Train Prototype for Computer Vision [CNASV](https://github.com/tianbaochou/CNASV))\r\n \r\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Thu, 23 Dec 2021 10:07:45 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "cnasv"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "\r\n```bash\r\npip3 install requirements.txt\r\n```\r\n\r\n**Notice**\r\n> if you use win10, and want to show the cell architecture with graph, you \r\nneed install the pygraphviz and add ```$workdir$\\\\3rd_tools\\\\graphviz-2.38\\\\bin```\r\ninto environment path. Here ```$workdir$``` is the custom work directory. such as ```E:\\\\workspace\\\\cnas``` \r\n\r\n\r\n> How to search:\r\n\r\n```bash\r\npython train_search.py --num-meta-node 4 --cutout --data '../data/cifar10'\r\n```\r\n\r\n> How to evaluate the CNN architecture we searched\r\n\r\n+ run on multi gpus (gpu1, gpu2)\r\n```bash\r\nCUDA_VISIBLE_DEVICES=1,2  train_cnn.py --cutout  --multi-gpus\r\n```\r\n\r\n+ run on single gpus\r\nwe will find a max free memory gpus and run on it.\r\n```bash\r\npython train_cnn.py --cutout  --multi-gpus\r\n```\r\n\r\n\r\n**Configure details**\r\n\r\n> Notice:  num-meta-node, use-sparse and train-portion invalid in evaluate stage and \r\nmulti-gpus, auxiliary and auxuliary-weight invalid in search stage\r\n\r\n+ train-dataset \uff1athe train dataset for search or train ('cifar10','cifar100', 'tiny-imagenet200')\r\n+ data : the train dataset path ('../data/cifar10')\r\n+ arch : the search arch name \r\n+ start-epoch:  manual epoch number (0) \r\n+ batch-size: the batch size (64)\r\n+ num-meta-node: the number of intermediate nodes (4)\r\n+ learning-rate: init learning rate (0.025)\r\n+ learning-rate-min: minimize learning rate (0.003)\r\n+ arch-learning-rate: learning rate for arch encoding\r\n+ arch-weight-decay: weight decay for arch encoding\r\n+ momentum: momentum for sgd (0.9)\r\n+ weight-decay: weight decay (3e-4)\r\n+ epochs: num of training epochs (60)\r\n+ init-channels: num of init channels (16)\r\n+ image-channels: num of image channels (3)\r\n+ layers: total number of layers(cells) stacked for architecture in search stage\r\n+ model-path: path to save the model (use for restart)\r\n+ cutout: use cutout (False)\r\n+ cutout-length: cutout length (16)\r\n+ save: experiment name\r\n+ resume: path to latest checkpoint (default: none)\r\n+ grad-clip: gradient clipping (5)\r\n+ train-portion: portion of training data (0.5)\r\n+ sec-approx: use 2 order approximate validation loss (False)\r\n+ use-sparse: use sparse framework (False)\r\n+ multi-gpus: train network use multi-gpus \r\n+ auxiliary: use auxiliary tower (True)\r\n+ auxuliary-weight: weight for auxiliary loss (0.4)\r\n+ opt: optimizer (sgd)\r\n\r\n",
      "technique": "Header extraction"
    }
  ]
}