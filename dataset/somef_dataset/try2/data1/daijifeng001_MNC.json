{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1412.1283"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you find MNC useful in your research, please consider citing:\n\n    @inproceedings{dai2016instance,\n        title={Instance-aware Semantic Segmentation via Multi-task Network Cascades},\n        author={Dai, Jifeng and He, Kaiming and Sun, Jian},\n        booktitle={CVPR},\n        year={2016}\n    }\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{dai2015convolutional,\n    title={Convolutional Feature Masking for Joint Object and Stuff Segmentation},\n    author={Dai, Jifeng and He, Kaiming and Sun, Jian},\n    booktitle={CVPR},\n    year={2015}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{dai2016instance,\n    title={Instance-aware Semantic Segmentation via Multi-task Network Cascades},\n    author={Dai, Jifeng and He, Kaiming and Sun, Jian},\n    booktitle={CVPR},\n    year={2016}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9997923174527217
      ],
      "excerpt": "By Jifeng Dai, Kaiming He, Jian Sun \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9939639277345774,
        0.9999992935762173,
        0.9953582834232122,
        0.9864698047705643
      ],
      "excerpt": "    title={Convolutional Feature Masking for Joint Object and Stuff Segmentation}, \n    author={Dai, Jifeng and He, Kaiming and Sun, Jian}, \n    booktitle={CVPR}, \n    year={2015} \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/daijifeng001/MNC",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-06-21T08:13:49Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-06T03:36:56Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "MNC is an instance-aware semantic segmentation system based on deep convolutional networks, which won the first place in COCO segmentation challenge 2015, and test at a fraction of a second per image. We decompose the task of instance-aware semantic segmentation into related sub-tasks, which are solved by multi-task network cascades (MNC) with shared features. The entire MNC network is trained end-to-end with error gradients across cascaded stages.\n\n\n![example](data/readme_img/example.png)\n\n\nMNC was initially described in a [CVPR 2016 oral paper](http://arxiv.org/abs/1512.04412).\n\nThis repository contains a python implementation of MNC, which is ~10% slower than the original matlab implementation.\n\nThis repository includes a bilinear RoI warping layer, which enables gradient back-propagation with respect to RoI coordinates.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.937218966551044,
        0.9272588240695403
      ],
      "excerpt": "The code is built based on py-faster-rcnn. \nMNC is released under the MIT License (refer to the LICENSE file for details). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9027953637084536
      ],
      "excerpt": "This repository contains code to end-to-end train MNC for instance-aware semantic segmentation, where gradients across cascaded stages are counted in training. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Instance-aware Semantic Segmentation via Multi-task Network Cascades",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Download and process the pre-computed MCG proposals.\n\n```Shell\ncd $MNC_ROOT\n./data/scripts/fetch_mcg_data.sh\npython ./tools/prepare_mcg_maskdb.py --para_job 24 --db train --output data/cache/voc_2012_train_mcg_maskdb/\npython ./tools/prepare_mcg_maskdb.py --para_job 24 --db val --output data/cache/voc_2012_val_mcg_maskdb/\n```\nResulting proposals would be at folder ```data/MCG/```.\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/daijifeng001/MNC/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 190,
      "date": "Wed, 22 Dec 2021 03:12:30 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/daijifeng001/MNC/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "daijifeng001/MNC",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/daijifeng001/MNC/master/experiments/scripts/faster_rcnn_end2end.sh",
      "https://raw.githubusercontent.com/daijifeng001/MNC/master/experiments/scripts/mnc_5stage.sh",
      "https://raw.githubusercontent.com/daijifeng001/MNC/master/experiments/scripts/cfm.sh",
      "https://raw.githubusercontent.com/daijifeng001/MNC/master/data/scripts/fetch_mcg_data.sh",
      "https://raw.githubusercontent.com/daijifeng001/MNC/master/data/scripts/fetch_sbd_data.sh",
      "https://raw.githubusercontent.com/daijifeng001/MNC/master/data/scripts/fetch_mnc_model.sh",
      "https://raw.githubusercontent.com/daijifeng001/MNC/master/data/scripts/fetch_imagenet_models.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "0. Run `./data/scripts/fetch_imagenet_models.sh` to download the ImageNet pre-trained VGG-16 net. \n0. Download the VOC 2007 dataset to ./data/VOCdevkit2007\n0. Run `./data/scripts/fetch_sbd_data.sh` to download the VOC 2012 dataset together with the additional segmentation annotations in [SBD](https://9bc0b5eb4c18f1fc9a28517a91305702c68a10ae.googledrive.com/host/0ByUkob0WA1-NQi1sNlg4WkJQbTg/codes/SBD/download.html) to ./data/VOCdevkitSDS.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Clone the MNC repository:\n  ```Shell\n  #: Make sure to clone with --recursive\n  git clone --recursive https://github.com/daijifeng001/MNC.git\n  ```\n \n2. Install Python packages: `numpy`, `scipy`, `cython`, `python-opencv`, `easydict`, `yaml`.\n\n3. Build the Cython modules and the gpu_nms, gpu_mask_voting modules by:\n  ```Shell\n  cd $MNC_ROOT/lib\n  make\n  ```\n\n4. Install `Caffe` and `pycaffe` dependencies (see: [Caffe installation instructions](http://caffe.berkeleyvision.org/installation.html) for official installation guide)\n\n  **Note:** Caffe *must* be built with support for Python layers!\n\n  ```make\n  #: In your Makefile.config, make sure to have this line uncommented\n  WITH_PYTHON_LAYER := 1\n  #: CUDNN is recommended in building to reduce memory footprint\n  USE_CUDNN := 1\n  ```\n\n5. Build Caffe and pycaffe:\n    ```Shell\n    cd $MNC_ROOT/caffe-mnc\n    #: If you have all of the requirements installed\n    #: and your Makefile.config in place, then simply do:\n    make -j8 && make pycaffe\n    ```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8281020479709043
      ],
      "excerpt": "This code has been tested on Linux (Ubuntu 14.04), using K40/Titan X GPUs. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "cd $MNC_ROOT \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9334835686912241
      ],
      "excerpt": ": GPU_ID is the GPU you want to train on \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "cd $MNC_ROOT \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9334835686912241
      ],
      "excerpt": ": GPU_ID is the GPU you want to train on \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "cd $MNC_ROOT \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9334835686912241
      ],
      "excerpt": ": GPU_ID is the GPU you want to train on \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/daijifeng001/MNC/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Cuda",
      "Shell",
      "C++",
      "Makefile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/daijifeng001/MNC/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Faster R-CNN\\n\\nThe MIT License (MIT)\\n\\nCopyright (c) 2015 Microsoft Corporation\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n\\n**********\\n\\nTHIRD-PARTY SOFTWARE NOTICES AND INFORMATION\\n\\nThis project, Faster R-CNN, incorporates material from the project(s) listed below (collectively, \"Third Party Code\").  Microsoft is not the original author of the Third Party Code.  The original copyright notice and license under which Microsoft received such Third Party Code are set out below. This Third Party Code is licensed to you under their original license terms set forth below.  Microsoft reserves all other rights not expressly granted, whether by implication, estoppel or otherwise.\\n \\n1.\\tCaffe, version 0.9, (https://github.com/BVLC/caffe/)\\n\\nCOPYRIGHT\\n\\nAll contributions by the University of California:\\nCopyright (c) 2014, 2015, The Regents of the University of California (Regents)\\nAll rights reserved.\\n\\nAll other contributions:\\nCopyright (c) 2014, 2015, the respective contributors\\nAll rights reserved.\\n\\nCaffe uses a shared copyright model: each contributor holds copyright over their contributions to Caffe. The project versioning records all such contribution and copyright details. If a contributor wants to further mark their specific copyright on a particular contribution, they should indicate their copyright solely in the commit message of the change when it is committed.\\n\\nThe BSD 2-Clause License\\n\\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n\\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\n*END OF THIRD-PARTY SOFTWARE NOTICES AND INFORMATION*\\n\\n\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Instance-aware Semantic Segmentation via Multi-task Network Cascades",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "MNC",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "daijifeng001",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/daijifeng001/MNC/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 480,
      "date": "Wed, 22 Dec 2021 03:12:30 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "First, download the trained MNC model.\n```Shell\n./data/scripts/fetch_mnc_model.sh\n``` \n\nRun the demo:\n```Shell\ncd $MNC_ROOT\n./tools/demo.py\n```\nResult demo images will be stored to ```data/demo/```.\n\nThe demo performs instance-aware semantic segmentation with a trained MNC model (using VGG-16 net). The model is pre-trained on ImageNet, and finetuned on VOC 2012 train set with additional annotations from [SBD](http://home.bharathh.info/pubs/codes/SBD/download.html). The mAP^r of the model is 65.0% on VOC 2012 validation set. The test speed per image is ~0.33sec on Titian X and ~0.42sec on K40.\n\n",
      "technique": "Header extraction"
    }
  ]
}