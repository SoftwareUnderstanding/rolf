{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1506.01497"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kevinjliang/tf-Faster-RCNN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-12-29T00:41:54Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-26T00:32:09Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9700939834485767
      ],
      "excerpt": "A Python 3/TensorFlow implementation of Faster R-CNN (paper). See official implementations here: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9970250008622641
      ],
      "excerpt": "The deep models in this implementation are built on TensorBase, a minimalistic framework for end-to-end TensorFlow applications created by my good friend and collaborator Dan Salo. Check it out. My personal fork (whose changes are typically regularly pulled into Dan's) is a submodule of this tf-Faster-RCNN repo. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.899642639456769
      ],
      "excerpt": "Data: Scripts for creating, downloading, organizing datasets. Output detections are saved here. For your local copy, the actual data will also reside here \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8961649953319362,
        0.9502962351609426
      ],
      "excerpt": "Models: Runnable files that create a Faster R-CNN class with a specific convolutional network and dataset. Config files for changing model parameters are also here. \nNetworks: Neural networks or components that form parts of a Faster R-CNN network \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "    |--Data/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8923623506261003
      ],
      "excerpt": "          |--valid.txt (List of validation data filenames) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9506154626899335
      ],
      "excerpt": "The network architecture and model parameters depend on the kind of data you are trying to process. Most of these are adjustable from the config file.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8785264626227944,
        0.9278982881918991,
        0.9434981837627349
      ],
      "excerpt": "- Update NUM_CLASSES to the number of classes in CLASSES \nThe model file you use depends on the data you wish to train on. For something like the simple, single-channeled cluttered MNIST, Model/faster_rcnn_conv5.py is probably sufficient. More complex, RGB-channeled real data like PASCAL VOC, MS COCO, or ImageNet require a correspondingly more advanced architecture (example). \nMake sure that the number of channels of the input placeholder in the _data constructor function matches your data. faster_rcnn_conv5.py is defaulted to a single channel (grayscale). faster_rcnn_resnet50ish.py is three channels (RGB). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8888739727114331
      ],
      "excerpt": "Additional arguments (defaults in parentheses; see main() of a model file for additional comments): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8299415780176974
      ],
      "excerpt": "- [-v]: Eval (1) - Evaluate the model if equal to 1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "TensorFlow implementation of Faster R-CNN",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kevinjliang/tf-Faster-RCNN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 100,
      "date": "Thu, 23 Dec 2021 17:57:16 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/kevinjliang/tf-Faster-RCNN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "kevinjliang/tf-Faster-RCNN",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/kevinjliang/tf-Faster-RCNN/master/Development/genClutteredMNIST.ipynb",
      "https://raw.githubusercontent.com/kevinjliang/tf-Faster-RCNN/master/Development/test_faster_rcnn_networks.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Clone this repository (tf-Faster-RCNN) \n  ```Shell\n  #: Make sure to clone with --recursive. This'll also clone TensorBase\n  git clone --recursive https://github.com/kevinjliang/tf-Faster-RCNN.git\n  ```\n  \n2. We'll call the directory that you cloned tf-Faster-RCNN into `tf-FRC_ROOT`\n\n   *Ignore notes 1 and 2 if you followed step 1 above.*\n\n   **Note 1:** If you didn't clone tf-Faster-RCNN with the `--recursive` flag, then you'll need to manually clone the `TensorBase` submodule:\n    ```Shell\n    git submodule update --init --recursive\n    ```\n    **Note 2:** The `TensorBase` submodule needs to be on the `faster-rcnn` branch (or equivalent detached state). This will happen automatically *if you followed step 1 instructions*.\n\n3. Build the Cython modules\n  ```Shell\n  cd $tf-FRC_ROOT/Lib\n  make\n  ```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8629233392885318
      ],
      "excerpt": "- [-g]: GPU (0) - Specify which GPU to use. Input 'all' to use all available GPUs. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8358891950409307
      ],
      "excerpt": "Training and Testing Your Data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8744086789022526
      ],
      "excerpt": "Logs: Holds the tfevents files for TensorBoard, model checkpoints for restoring, and validation/test logs. This directory is created the first time you run a model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8300081185484971
      ],
      "excerpt": "In order to train (and then test) on your own data: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8123763140827432
      ],
      "excerpt": "  |--tf-FRC_ROOT \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8434133947859233,
        0.809547384061538,
        0.8262477921253464
      ],
      "excerpt": "          |--.[png/jpg] (Image files) \n        |--Names/ \n          |--train.txt (List of training data filenames) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8173423443161482
      ],
      "excerpt": "          |--test.txt  (List of testing data filenames) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8894316285682731
      ],
      "excerpt": "Step 1 of the cluttered MNIST demo automatically creates this data and organizes it accordingly, so run the MNIST.py script for an example file structure. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8597477880762653
      ],
      "excerpt": "Default settings and their descriptions are located at Lib/faster_rcnn_config.py. You should not modify this. Instead, write a yaml file, save it under Models/cfgs, and pass it as an argument to your model. See Models/cfgs/ for examples. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8263658111116641
      ],
      "excerpt": "- Point DATA_DIRECTORY to your dataset folder (denoted by [YOUR_DATASET] in the earlier file tree). Make this path relative to the Models/ directory. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8090130666843167
      ],
      "excerpt": "- Change CLASSES to a list of the class names in your data. IMPORTANT: Leave the first class as 'background' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.932067325394414
      ],
      "excerpt": "To train the model (assumingfaster_rcnn_resnet50ish.py): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8999102830260683
      ],
      "excerpt": "  python faster_rcnn_resnet50ish.py [arguments] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8099059591234758
      ],
      "excerpt": "- [-f]: File Epoch (1) - Specifies which epoch checkpoint to restore from \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9346418950793489
      ],
      "excerpt": "- [-y]: YAML (pascal_voc2007.yml) - Name of the YAML file in the Models/cfg/ folder to override faster_rcnn_config.py defaults \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8265480834837059,
        0.8875900750765536,
        0.889276238374435
      ],
      "excerpt": "  #: Train model, starting from pre-trained weights \n  python faster_rcnn_resnet50ish.py -n 10 -e 20 -y 'myYAML.yml' \n#: Test model, using a previously trained model (0). Save output images with boxes \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/kevinjliang/tf-Faster-RCNN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook",
      "Cuda",
      "C++",
      "Makefile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "tf-Faster-RCNN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "tf-Faster-RCNN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "kevinjliang",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kevinjliang/tf-Faster-RCNN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "kevinjliang",
        "body": "A working Python 3.5 and TensorFlow v1.0 version of the code, with runnable demos for the simple translated/cluttered MNIST datasets.\r\n\r\nv0.2: Updated visualizations, bug fixes, additional arg parser arguments. Improved performance over v0.1",
        "dateCreated": "2017-03-14T04:02:05Z",
        "datePublished": "2017-03-14T04:05:24Z",
        "html_url": "https://github.com/kevinjliang/tf-Faster-RCNN/releases/tag/v0.2",
        "name": "Cluttered MNIST Demo",
        "tag_name": "v0.2",
        "tarball_url": "https://api.github.com/repos/kevinjliang/tf-Faster-RCNN/tarball/v0.2",
        "url": "https://api.github.com/repos/kevinjliang/tf-Faster-RCNN/releases/5733094",
        "zipball_url": "https://api.github.com/repos/kevinjliang/tf-Faster-RCNN/zipball/v0.2"
      },
      {
        "authorType": "User",
        "author_name": "kevinjliang",
        "body": "A working Python 3.5 and TensorFlow v1.0 version of the code, with runnable demos for the simple translated/cluttered MNIST datasets.",
        "dateCreated": "2017-02-23T17:58:44Z",
        "datePublished": "2017-03-14T01:57:48Z",
        "html_url": "https://github.com/kevinjliang/tf-Faster-RCNN/releases/tag/v0.1",
        "name": "Cluttered MNIST Demo",
        "tag_name": "v0.1",
        "tarball_url": "https://api.github.com/repos/kevinjliang/tf-Faster-RCNN/tarball/v0.1",
        "url": "https://api.github.com/repos/kevinjliang/tf-Faster-RCNN/releases/5732381",
        "zipball_url": "https://api.github.com/repos/kevinjliang/tf-Faster-RCNN/zipball/v0.1"
      }
    ],
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Ubuntu 16: I haven't tested it on any other Linux distributions or versions, but there's a chance it might work as is. Let me know if it does!\n2. Python 3.5+: I recommend Anaconda for your Python distribution and package management. See (3) below.\n3. TensorFlow v1.0: See [TensorFlow Installation with Anaconda](https://www.tensorflow.org/install/install_linux#InstallingAnaconda). Install the version that matches your preferred Python version. Instructions for Python 3.6 below:\n  ```Shell\n  #: Create a Conda environment for TensorFlow (defaults to Python 3.6)\n  conda create --name tensorflow \n  \n  #: Activate your environment\n  source activate tensorflow\n  \n  #: Install TensorFlow, for Python 3.6 with GPU support\n  pip install --ignore-installed --upgrade \\\n  https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.3.0-cp36-cp36m-linux_x86_64.whl\n  ```\n4. Some additional python packages you may or may not already have: `cython`, `easydict`, `matplotlib` `scipy`, `Pillow`, `pyyaml`, `tqdm`. These should all be pip installable within your Anaconda environment (pip install [package]):\n\n  ```Shell\n  pip install cython easydict matplotlib scipy Pillow pyyaml tqdm \n  ```\n5. TensorBase: Tensorbase is used as a submodule, so you can get this recursively while cloning this repo. See [Installation](#installation) below.\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 171,
      "date": "Thu, 23 Dec 2021 17:57:16 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "tensorflow",
      "python",
      "faster-rcnn"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you would like to try training and/or testing the Faster R-CNN network, we currently have a complete model available for cluttered MNIST. Cluttered MNIST is a dataset of images consisting of randomly scaled MNIST digits embedded in a larger image, with random pieces of other MNIST digits scattered throughout. It serves as a simple dataset for detection, as the algorithm must find the digit and classify it. PASCAL VOC and MS COCO on the way.\n\nTo run the model on cluttered MNIST:\n\n1. Generate the data:\n  ```Shell\n  cd $tf-FRC_ROOT/Data/scripts\n  \n  #: Generate images and bounding box data; place it in the folder $tf-FRC_ROOT/Data/clutteredMNIST \n  python MNIST.py\n  ```\n2. Run the model:\n  ```Shell\n  cd $tf-FRC_ROOT/Models\n  \n  #: Change flags accordingly (see argparser in main() of Model/faster_rcnn_conv5.py file)\n  python faster_rcnn_conv5.py -n [Model num, ex 1] -e [Num of epochs, ex 5]\n  ```\n  \n3. To reload a previously trained model and test\n  ```Shell\n  #: For just mAP and AP performance metrics:\n  python faster_rcnn_conv5.py -r 1 -m [Model num] -f [epoch to restore] -t 0\n\n  #: To also save test images with overlaid detection boxes as PNGs:\n  python faster_rcnn_conv5.py -r 1 -m [Model num] -f [epoch to restore] -t 0 -i 1\n  ```\n\n",
      "technique": "Header extraction"
    }
  ]
}