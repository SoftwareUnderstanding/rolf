{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1703.06868](https://arxiv.org/abs/1703.06868",
      "https://arxiv.org/abs/1703.06868"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9829731073143274
      ],
      "excerpt": "A Pytorch implementation of the 2017 Huang et. al. paper \"Arbitrary Style Transfer in Real-time with Adaptive Instance Normalization\" https://arxiv.org/abs/1703.06868 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/CellEight/Pytorch-Adaptive-Instance-Normalization",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-07-11T13:16:08Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-09T12:13:33Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9752124094730245
      ],
      "excerpt": "Written from scratch with essentially no reference to Xun Huangs implementation in lua/torch (can be found here: https://github.com/xunhuang1995/AdaIN-style) but I'm none the less incredbily greatful to Huang et. al. for writing such an outstandingly beautiful paper and making their method so clear and easy to implement! \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8985056159005894
      ],
      "excerpt": "Update default hyperparameters to match that of Huang \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9202474186965977
      ],
      "excerpt": "Add more advanced runtime style interpolation and masking features from the paper \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A Pytorch implementation of the 2017 Huang et. al. paper \"Arbitrary Style Transfer in Real-time with Adaptive Instance Normalization\"",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/CellEight/Pytorch-Adaptive-Instance-Normalization/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Mon, 27 Dec 2021 02:19:44 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/CellEight/Pytorch-Adaptive-Instance-Normalization/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "CellEight/Pytorch-Adaptive-Instance-Normalization",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8119555644634826
      ],
      "excerpt": "Once downloaded just place it into the root directory of the repo and you're good to go. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8990122559349517
      ],
      "excerpt": "Add automatic gpu/cpu selection \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8407751504440645
      ],
      "excerpt": "Make requirements.txt file \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9270748538061528
      ],
      "excerpt": "To actully train the model just run python -i train.py which will start training and output previews of it's progress into the tmp directory every few interations. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8468563828987807
      ],
      "excerpt": "Add command line options for hyperparameters \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/CellEight/Pytorch-Adaptive-Instance-Normalization/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Pytorch-Adaptive-Instance-Normalization",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Pytorch-Adaptive-Instance-Normalization",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "CellEight",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/CellEight/Pytorch-Adaptive-Instance-Normalization/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To run this model please install the latest version of pytorch, torchvision and CUDA.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 15,
      "date": "Mon, 27 Dec 2021 02:19:44 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "deep-learning",
      "style-transfer",
      "neural-networks",
      "computer-vision",
      "machine-learning",
      "deep-learning-papers",
      "pretrained-weights",
      "pytorch",
      "paper",
      "huang",
      "datasets"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To use the model for style transfer use the command `python style.pt <path to content image> <path to style image>`. \nThe styled image will be saves as `output.jpg` in the currect directory.\n\n",
      "technique": "Header extraction"
    }
  ]
}