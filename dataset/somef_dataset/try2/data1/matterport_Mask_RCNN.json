{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1703.06870"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Use this bibtex to cite this repository:\n```\n@misc{matterport_maskrcnn_2017,\n  title={Mask R-CNN for object detection and instance segmentation on Keras and TensorFlow},\n  author={Waleed Abdulla},\n  year={2017},\n  publisher={Github},\n  journal={GitHub repository},\n  howpublished={\\url{https://github.com/matterport/Mask_RCNN}},\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{matterport_maskrcnn_2017,\n  title={Mask R-CNN for object detection and instance segmentation on Keras and TensorFlow},\n  author={Waleed Abdulla},\n  year={2017},\n  publisher={Github},\n  journal={GitHub repository},\n  howpublished={\\url{https://github.com/matterport/Mask_RCNN}},\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9972385549141555
      ],
      "excerpt": "The code is documented and designed to be easy to extend. If you use it in your research, please consider citing this repository (bibtex below). If you work on 3D vision, you might find our recently released Matterport3D dataset useful as well. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/matterport/Mask_RCNN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-10-19T20:28:34Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-20T09:28:04Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9951128122208056,
        0.9328830280660902,
        0.980200824961809
      ],
      "excerpt": "This is an implementation of Mask R-CNN on Python 3, Keras, and TensorFlow. The model generates bounding boxes and segmentation masks for each instance of an object in the image. It's based on Feature Pyramid Network (FPN) and a ResNet101 backbone. \nThe repository includes: \n* Source code of Mask R-CNN built on FPN and ResNet101. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9553522167300541
      ],
      "excerpt": "To help with debugging and understanding the model, there are 3 notebooks  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8676484940430731,
        0.9170834915849713,
        0.9388296745477471,
        0.8690788978652966,
        0.985272910237318
      ],
      "excerpt": "This is an example of final detection boxes (dotted lines) and the refinement applied to them (solid lines) in the second stage. \nExamples of generated masks. These then get scaled and placed on the image in the right location. \nOften it's useful to inspect the activations at different layers to look for signs of trouble (all zeros or random noise). \nAnother useful debugging tool is to inspect the weight histograms. These are included in the inspect_weights.ipynb notebook. \nTensorBoard is another great debugging and visualization tool. The model is configured to log losses and save weights at the end of every epoch. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8270568799304001
      ],
      "excerpt": "Start by reading this blog post about the balloon color splash sample. It covers the process starting from annotating images to training to using the results in a sample application. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9122820965888477
      ],
      "excerpt": "This class provides a consistent way to work with any dataset.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9879470973130347
      ],
      "excerpt": "the code of the model. It also supports loading multiple datasets at the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9677108687719861,
        0.9825966053556698,
        0.950988947162637
      ],
      "excerpt": "This implementation follows the Mask RCNN paper for the most part, but there are a few cases where we deviated in favor of code simplicity and generalization. These are some of the differences we're aware of. If you encounter other differences, please do let us know. \nImage Resizing: To support training multiple images per batch we resize all images to the same size. For example, 1024x1024px on MS COCO. We preserve the aspect ratio, so if an image is not square we pad it with zeros. In the paper the resizing is done such that the smallest side is 800px and the largest is trimmed at 1000px. \nBounding Boxes: Some datasets provide bounding boxes and some provide masks only. To support training on multiple datasets we opted to ignore the bounding boxes that come with the dataset and generate them on the fly instead. We pick the smallest box that encapsulates all the pixels of the mask as the bounding box. This simplifies the implementation and also makes it easy to apply image augmentations that would otherwise be harder to apply to bounding boxes, such as image rotation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9502771600953054,
        0.9639843021025845,
        0.928232361960351,
        0.9173091310372988
      ],
      "excerpt": "We found that ~2% of bounding boxes differed by 1px or more, ~0.05% differed by 5px or more,  \nand only 0.01% differed by 10px or more. \nLearning Rate: The paper uses a learning rate of 0.02, but we found that to be \ntoo high, and often causes the weights to explode, especially when using a small batch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8784688533781598
      ],
      "excerpt": "gradients (sum vs mean across batches and GPUs). Or, maybe the official model uses gradient \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9263916241712177
      ],
      "excerpt": "We found that smaller learning rates converge faster anyway so we go with that. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8494666833719585
      ],
      "excerpt": "You can also join our team and help us build even more projects like this one. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.954091149800593,
        0.9831329102336807,
        0.9131473737571731
      ],
      "excerpt": "A proof of concept project by Esri, in collaboration with Nvidia and Miami-Dade County. Along with a great write up and code by Dmitry Kudinov, Daniel Hedges, and Omar Maher. \nA project from Japan to automatically track cells in a microfluidics platform. Paper is pending, but the source code is released. \nResearch project to understand the complex processes between degradations in the Arctic and climate change. By Weixing Zhang, Chandi Witharana, Anna Liljedahl, and Mikhail Kanevskiy. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Mask R-CNN for object detection and instance segmentation on Keras and TensorFlow",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/matterport/Mask_RCNN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 10369,
      "date": "Mon, 20 Dec 2021 10:33:55 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/matterport/Mask_RCNN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "matterport/Mask_RCNN",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/demo.ipynb",
      "https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/shapes/train_shapes.ipynb",
      "https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/coco/inspect_model.ipynb",
      "https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/coco/inspect_data.ipynb",
      "https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/coco/inspect_weights.ipynb",
      "https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/balloon/inspect_balloon_model.ipynb",
      "https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/balloon/inspect_balloon_data.ipynb",
      "https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/nucleus/inspect_nucleus_data.ipynb",
      "https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/nucleus/inspect_nucleus_model.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Clone this repository\n2. Install dependencies\n   ```bash\n   pip3 install -r requirements.txt\n   ```\n3. Run setup from the repository root directory\n    ```bash\n    python3 setup.py install\n    ``` \n3. Download pre-trained COCO weights (mask_rcnn_coco.h5) from the [releases page](https://github.com/matterport/Mask_RCNN/releases).\n4. (Optional) To train or test on MS COCO install `pycocotools` from one of these repos. They are forks of the original pycocotools with fixes for Python3 and Windows (the official repo doesn't seem to be active anymore).\n\n    * Linux: https://github.com/waleedka/coco\n    * Windows: https://github.com/philferriere/cocoapi.\n    You must have the Visual C++ 2015 build tools on your path (see the repo for additional details)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.858886831996798
      ],
      "excerpt": "We're providing pre-trained weights for MS COCO to make it easier to start. You can \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8297320213661676
      ],
      "excerpt": "python3 samples/coco/coco.py train --dataset=/path/to/coco/ --model=coco \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8399644222683978
      ],
      "excerpt": "python3 samples/coco/coco.py train --dataset=/path/to/coco/ --model=/path/to/weights.h5 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8087393406843508
      ],
      "excerpt": "python3 samples/coco/coco.py train --dataset=/path/to/coco/ --model=last \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8834774609522587
      ],
      "excerpt": "You can also run the COCO evaluation code with: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8213442465659659
      ],
      "excerpt": "* Example of training on your own dataset \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8301661069485722
      ],
      "excerpt": "Start by reading this blog post about the balloon color splash sample. It covers the process starting from annotating images to training to using the results in a sample application. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8298128525487963
      ],
      "excerpt": "See examples in samples/shapes/train_shapes.ipynb, samples/coco/coco.py, samples/balloon/balloon.py, and samples/nucleus/nucleus.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8190821438385925
      ],
      "excerpt": "* Visualizations and examples. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/matterport/Mask_RCNN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/matterport/Mask_RCNN/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Mask R-CNN\\n\\nThe MIT License (MIT)\\n\\nCopyright (c) 2017 Matterport, Inc.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Mask R-CNN for Object Detection and Segmentation",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Mask_RCNN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "matterport",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/matterport/Mask_RCNN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "waleedka",
        "body": "This release adds:\r\n\r\n* The Balloon Color Splash sample, along with dataset and trained weights.\r\n* Convert the last prediction layer from Python to TensorFlow operations.\r\n* Automatic download of COCO weights and dataset.\r\n* Fixes for running on Windows.\r\n\r\nThanks to everyone who made this possible with fixes and pull requests.\r\n\r\nNote: COCO weights are not updated in this release. Continue to use the .h5 file from release 2.0.",
        "dateCreated": "2018-03-19T23:05:16Z",
        "datePublished": "2018-03-19T23:26:21Z",
        "html_url": "https://github.com/matterport/Mask_RCNN/releases/tag/v2.1",
        "name": "Mask R-CNN 2.1",
        "tag_name": "v2.1",
        "tarball_url": "https://api.github.com/repos/matterport/Mask_RCNN/tarball/v2.1",
        "url": "https://api.github.com/repos/matterport/Mask_RCNN/releases/10160031",
        "zipball_url": "https://api.github.com/repos/matterport/Mask_RCNN/zipball/v2.1"
      },
      {
        "authorType": "User",
        "author_name": "waleedka",
        "body": "This release includes updates to improve training and accuracy, and a new MS COCO trained model. \r\n\r\n* Remove unnecessary dropout layer\r\n* Reduce anchor stride from 2 to 1\r\n* Increase ROI training mini batch to 200 per image\r\n* Improve computing proposal positive:negative ratio\r\n* Updated COCO training schedule\r\n* Add --logs param to coco.py to set logging directory\r\n* Bug Fix: exclude BN weights from L2 regularization\r\n* Use mean (rather than sum) of L2 regularization for a smoother loss in TensorBoard\r\n* Better compatibility with Python 2.7\r\n\r\nThe new MS COCO trained weights improve the accuracy compared to the previous weights. These are the evaluation results on the minival dataset:\r\n\r\n```\r\nEvaluate annotation type *bbox*\r\n Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.347\r\n Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.544\r\n Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.377\r\n Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.163\r\n Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.390\r\n Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.486\r\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.295\r\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.424\r\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.433\r\n Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.214\r\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.481\r\n Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.601\r\n```\r\n\r\n```\r\nEvaluate annotation type *segm*\r\n Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.296\r\n Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.510\r\n Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.306\r\n Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.128\r\n Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.330\r\n Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.430\r\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.258\r\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.369\r\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.376\r\n Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.173\r\n Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.417\r\n Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.538\r\n```\r\n\r\nBig thanks to everyone who contributed to this repo. Names are in the commits history. \r\n",
        "dateCreated": "2017-11-26T03:26:43Z",
        "datePublished": "2017-11-26T04:33:46Z",
        "html_url": "https://github.com/matterport/Mask_RCNN/releases/tag/v2.0",
        "name": "Mask R-CNN 2.0",
        "tag_name": "v2.0",
        "tarball_url": "https://api.github.com/repos/matterport/Mask_RCNN/tarball/v2.0",
        "url": "https://api.github.com/repos/matterport/Mask_RCNN/releases/8656621",
        "zipball_url": "https://api.github.com/repos/matterport/Mask_RCNN/zipball/v2.0"
      },
      {
        "authorType": "User",
        "author_name": "waleedka",
        "body": "",
        "dateCreated": "2017-11-03T20:45:21Z",
        "datePublished": "2017-10-23T22:57:20Z",
        "html_url": "https://github.com/matterport/Mask_RCNN/releases/tag/v1.0",
        "name": "Mask R-CNN 1.0",
        "tag_name": "v1.0",
        "tarball_url": "https://api.github.com/repos/matterport/Mask_RCNN/tarball/v1.0",
        "url": "https://api.github.com/repos/matterport/Mask_RCNN/releases/8229259",
        "zipball_url": "https://api.github.com/repos/matterport/Mask_RCNN/zipball/v1.0"
      }
    ],
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Python 3.4, TensorFlow 1.3, Keras 2.0.8 and other common packages listed in `requirements.txt`.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "To train or test on MS COCO, you'll also need:\n* pycocotools (installation instructions below)\n* [MS COCO Dataset](http://cocodataset.org/#home)\n* Download the 5K [minival](https://dl.dropboxusercontent.com/s/o43o90bna78omob/instances_minival2014.json.zip?dl=0)\n  and the 35K [validation-minus-minival](https://dl.dropboxusercontent.com/s/s3tw5zcg7395368/instances_valminusminival2014.json.zip?dl=0)\n  subsets. More details in the original [Faster R-CNN implementation](https://github.com/rbgirshick/py-faster-rcnn/blob/master/data/README.md).\n\nIf you use Docker, the code has been verified to work on\n[this Docker container](https://hub.docker.com/r/waleedka/modern-deep-learning/).\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 21050,
      "date": "Mon, 20 Dec 2021 10:33:55 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "mask-rcnn",
      "tensorflow",
      "object-detection",
      "instance-segmentation",
      "keras"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* [demo.ipynb](samples/demo.ipynb) Is the easiest way to start. It shows an example of using a model pre-trained on MS COCO to segment objects in your own images.\nIt includes code to run object detection and instance segmentation on arbitrary images.\n\n* [train_shapes.ipynb](samples/shapes/train_shapes.ipynb) shows how to train Mask R-CNN on your own dataset. This notebook introduces a toy dataset (Shapes) to demonstrate training on a new dataset.\n\n* ([model.py](mrcnn/model.py), [utils.py](mrcnn/utils.py), [config.py](mrcnn/config.py)): These files contain the main Mask RCNN implementation. \n\n\n* [inspect_data.ipynb](samples/coco/inspect_data.ipynb). This notebook visualizes the different pre-processing steps\nto prepare the training data.\n\n* [inspect_model.ipynb](samples/coco/inspect_model.ipynb) This notebook goes in depth into the steps performed to detect and segment objects. It provides visualizations of every step of the pipeline.\n\n* [inspect_weights.ipynb](samples/coco/inspect_weights.ipynb)\nThis notebooks inspects the weights of a trained model and looks for anomalies and odd patterns.\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "![Balloon Color Splash](assets/balloon_color_splash.gif)\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "![Mapping Challenge](assets/mapping_challenge.png)\n\n",
      "technique": "Header extraction"
    }
  ]
}