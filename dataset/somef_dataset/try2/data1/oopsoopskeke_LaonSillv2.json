{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1406.2661]\n* Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks [https://arxiv.org/abs/1511.06434]\n\nLet's begin. First, let's talk about the necessary files. Go the folder that contains the GAN example and check what kind of file it is.\n\n```\n$ cd $LAONSILL_BUILD_PATH/src/examples/GAN\n$ ls -al\ndrwxrwxr-x 2 monhoney monhoney  4096  6\uc6d4 30 14:44 .\ndrwxrwxr-x 5 monhoney monhoney  4096  6\uc6d4 27 16:13 ..\n-rw-rw-r-- 1 monhoney monhoney  2641  6\uc6d4 27 16:13 GAN.cpp\n-rw-rw-r-- 1 monhoney monhoney   343  6\uc6d4 27 16:13 GAN.h\n-rw-rw-r-- 1 monhoney monhoney  5738  6\uc6d4 27 16:13 networkD.json\n-rw-rw-r-- 1 monhoney monhoney 10958  6\uc6d4 27 16:13 networkG0.json\n-rw-rw-r-- 1 monhoney monhoney 11536  6\uc6d4 27 16:13 networkG1.json\n```\n\n`GAN.cpp` and `GAN.h` are source and header files for GAN. `NetworkD.json`, `networkG0.json`, and `networkG1.json` are network definition files that define the GAN network. As you can guess from the name, it is in JSON format. Typical networks consist of one network definition file. There are various ways to implement, but we have prepared three networks(networkD, networkG0, networkG1",
      "https://arxiv.org/abs/1511.06434]\n\nLet's begin. First, let's talk about the necessary files. Go the folder that contains the GAN example and check what kind of file it is.\n\n```\n$ cd $LAONSILL_BUILD_PATH/src/examples/GAN\n$ ls -al\ndrwxrwxr-x 2 monhoney monhoney  4096  6\uc6d4 30 14:44 .\ndrwxrwxr-x 5 monhoney monhoney  4096  6\uc6d4 27 16:13 ..\n-rw-rw-r-- 1 monhoney monhoney  2641  6\uc6d4 27 16:13 GAN.cpp\n-rw-rw-r-- 1 monhoney monhoney   343  6\uc6d4 27 16:13 GAN.h\n-rw-rw-r-- 1 monhoney monhoney  5738  6\uc6d4 27 16:13 networkD.json\n-rw-rw-r-- 1 monhoney monhoney 10958  6\uc6d4 27 16:13 networkG0.json\n-rw-rw-r-- 1 monhoney monhoney 11536  6\uc6d4 27 16:13 networkG1.json\n```\n\n`GAN.cpp` and `GAN.h` are source and header files for GAN. `NetworkD.json`, `networkG0.json`, and `networkG1.json` are network definition files that define the GAN network. As you can guess from the name, it is in JSON format. Typical networks consist of one network definition file. There are various ways to implement, but we have prepared three networks(networkD, networkG0, networkG1"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9964838015383283,
        0.9437907358345415
      ],
      "excerpt": "Generative Adversarial Networks [https://arxiv.org/abs/1406.2661] \nUnsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks [https://arxiv.org/abs/1511.06434] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "        if (j % 100 == 0) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9499963145257574,
        0.9232124692869111,
        0.9499963145257574,
        0.8573766346231053,
        0.8573766346231053
      ],
      "excerpt": "[2017/06/30 16:47:54:542476(30884/0)] LaonSill engine starts \n[2017/06/30 16:47:54:630809(30884/0)] enter developerMain() \n[2017/06/30 16:47:55:189182(30884/0)] *************************************************** \n[2017/06/30 16:47:55:189201(30884/0)] * GAN example \n[2017/06/30 16:47:55:189206(30884/0)] *  - description : GAN example \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.986327158429457
      ],
      "excerpt": "[2017/06/30 17:11:49:082883(31132/0)] LaonSill engine starts \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9474635993655147
      ],
      "excerpt": "[2017/06/30 17:28:14:930091(6764/0)] *************************************************** \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9194381812714563,
        0.9506413101004808,
        0.986327158429457
      ],
      "excerpt": "[2017/06/30 17:29:03:222832(6764/0)] *  - elapsed time : 48.292703 sec \n[2017/06/30 17:29:03:222850(6764/0)] *  - result : success \n[2017/06/30 17:29:03:222852(6764/0)] *************************************************** \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/oopsoopskeke/LaonSillv2",
    "technique": "GitHub API"
  },
  "contact": [
    {
      "confidence": [
        1
      ],
      "excerpt": "![Image of Laonbud](laonbud.png)\n\n* developer@laonbud.com\n* http://www.laonbud.com\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-01-20T04:42:13Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-04-05T02:14:32Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.997064291766709
      ],
      "excerpt": "LaonSill is a C++ based open source software framework. LaonSill supports a wide variety of distributed GPUs and offers excellent performance in speed / memory to work well in commercial environments. LaonSill is distributed under the Apache 2.0 license and offers paid models such as subscription models with technical support for paid users. Currently, LaonSill is developing a framework to run in embedded and mobile environment and will provide functions to analyze / design using GUI. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9415157046299031
      ],
      "excerpt": "This project started with NSIGHT. You can compile directly with the NSIGHT by pressing build button. Please refer to the link below for the usage NSIGHT. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8492657345467121
      ],
      "excerpt": "We have created out own build scripts that are independent of NSIGHT builds. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8939721431563754
      ],
      "excerpt": "Developer mode is a boot mode for experts who can use it directly while modifing the source. We have a tutorial on the GAN(Generative Adverarial Nets) algorithm. GAN is a thesis published by Ian GoodFellow in 2014 and is a very popular algorithm in image generation. We have written tutorial example code with reference to two papers: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8769873533066863
      ],
      "excerpt": "Let's begin. First, let's talk about the necessary files. Go the folder that contains the GAN example and check what kind of file it is. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8741871349378882
      ],
      "excerpt": "GAN.cpp and GAN.h are source and header files for GAN. NetworkD.json, networkG0.json, and networkG1.json are network definition files that define the GAN network. As you can guess from the name, it is in JSON format. Typical networks consist of one network definition file. There are various ways to implement, but we have prepared three networks(networkD, networkG0, networkG1) that share learning parameters to implement GAN. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "            \"imageDir\" : \"/data/celebA\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8138023758731507,
        0.9578069640834714
      ],
      "excerpt": "Below the CelebAInput layer is the convolution layer. This layer also contains several properties for performing convolution. See the $LAONSILL_BUILD_PATH/src/prop/layerPropDef.json file for information on the various layer properties. \nThe network properties define how many epochs the entwork will learn and how to learn using some optimizing alogorithms. As you can see in the networkD.json file, the GAN is learning using the ADAM optimizer. See the $LAONSILL_BUILD_PATH/src/prop/networkPropDef.json file for information on the various layer properties. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9394449182630016
      ],
      "excerpt": "    for (int i = 0; i < 10000; i++) { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9394449182630016
      ],
      "excerpt": "        for (int j = 0; j < miniBatchCount; j++) { \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.819765229000225
      ],
      "excerpt": "minibatch 0 is done. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8118650396642096
      ],
      "excerpt": "After a certain amount of time, you can check the results in $LAONSILL_HOME/output_images. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9394449182630016
      ],
      "excerpt": "for softmax \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9394449182630016
      ],
      "excerpt": "for softmax \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8967798631587863
      ],
      "excerpt": "2 | ClientError getSession(ClientHandle& handle) | Connect to server and get a session \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8105591999277607
      ],
      "excerpt": "4 | ClientError createNetwork(ClientHandle handle, std::string networkDef, NetworkHandle& netHandle) | Create a network by sending a network defined string to the server \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8014099519838709
      ],
      "excerpt": "2 | PlanParser | int loadNetworkByJSONString(std::string jsonString) | Parse the specified network definition string. Then create a new network based on the parsed results. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/oopsoopskeke/LaonSillv2/releases",
    "technique": "GitHub API"
  },
  "faq": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You can perform learning and inferencing by simply defining a network definition file of your network. We tried to run a network definition file called network.conf.test as follows:\n\n```\n$ ./LaonSillServer -f network.conf.test \n[2017/06/30 17:04:37:143834(31037/0)] LaonSill engine starts\n[2017/06/30 17:04:37:219181(31037/0)] enter single job(network.conf.test)\nfor softmax\nlossWeight: 1.0000000\nhasIgnoreLabel: 0\nignoreLabel: -1\nhasNormalize: 0\nnormalize: 0\nhasNormalization: 0\nnormalization: 1\nsoftmaxAxis: 2\n[2017/06/30 17:04:42:790448(31037/0)] exit single job(network.conf.test)\n[2017/06/30 17:04:42:790787(31037/0)] server running time : 5.646955\n\n[2017/06/30 17:04:42:790795(31037/0)] LaonSill engine ends\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 7,
      "date": "Sun, 26 Dec 2021 15:59:52 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/oopsoopskeke/LaonSillv2/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "oopsoopskeke/LaonSillv2",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/oopsoopskeke/LaonSillv2/main/LaonSill/scripts/autogen/build_autogen.sh",
      "https://raw.githubusercontent.com/oopsoopskeke/LaonSillv2/main/LaonSill/scripts/sdf_convert/convert_data.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You need to prepare the cluster.conf file under `$LAONSILL_HOME`. The cluster.conf file defines GPU settings needed to run LaonSill framework. Please refer to `$LAONSILL_BUILD_PATH/template/cluster.conf.sample` file for basic format. The configuration file has a list value for the keyword node. One list consists of a tuple with five values. A description of each tuple value is given below:\n\n* 1st value indicates the node ID\n* 2nd value indicates server address\n* 3rd value indicates server port number\n* 4th value indicates GPU device ID\n* 5th value indicates GPU memory size(byte)\n\n```\n{\n    \"node\" : \n    [\n         [0, \"127.0.0.1\", 13001, 0, 8388608000]\n    ]\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "You need to prepare the `laonsill.conf` file under `$LAONSILL_HOME`. A `laonsill.conf` file defines the settings needed to run LaonSill framework. Please refer to `$LAONSILL_BUILD_PATH/template/laonsill.conf.sample` file for basic format. See the `$LAONSILL_BUILD_PATH/src/param/paramDef.json` file for a description of each configuration parameter.\n\n```\n[laonsill.conf example]\nSESS_COUNT=5\nGPU_COUNT=1\nJOB_CONSUMER_COUNT=6\nNETWORK_SAVE_DIR=/home/monhoney/LAONSILL_HOME/network\nSTATFILE_OUTPUT_DIR=/home/monhoney/LAONSILL_HOME/stat\nIMAGEUTIL_SAVE_DIR=/home/monhoney/LAONSILL_HOME/output_images\nCOLDLOG_DIR=/home/monhoney/LAONSILL_HOME/log\nHOTLOG_DIR=/home/monhoney/LAONSILL_HOME/log\nSYSLOG_DIR=/home/monhoney/LAONSILL_HOME/log\nCOLDLOG_LEVEL=0\nBASE_DATA_DIR=/data\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "In order to compile, you have to configure it according to your environment. We provide the buildDef.json file to accomplish that goal. Create buildDef.json from the template file(buildDef.json.eg). And then modify the buildDef.json file to suit your environment.\n\n```\ncd $LAONSILL_BUILD_PATH/build\ncp buildDef.json.eg buildDef.json\nvi buildDef.json\n[buildDef.json]\n{\n    \"LIBS\" :\n        [\n            \"cudart\", \"opencv_core\", \"cublas\", \"cudnn\", \"boost_system\", \"boost_filesystem\",\n            \"opencv_highgui\", \"opencv_imgproc\", \"opencv_features2d\", \"z\", \"boost_iostreams\",\n            \"X11\", \"gpu_nms\", \"lmdb\"\n        ],\n    \"LIBDIRS\" :\n        [\n            \"../src/3rd_party/nms\"\n        ],\n    \"ARCH\" : \"compute_60\",\n    \"CODE\" : \"sm_60\"\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Download the LaonSill framework. Then set the top directory path to `$LAONSILL_BUILD_PATH`\n\n```\n$ cd $HOME\n$ git clone https://github.com/laonbud/LaonSill.git\n$ export LAONSILL_BUILD_PATH=$HOME/laonsill/LaonSill\n```\n\nMake $LAONSILL_HOME in the right place. There are configuration files, log files and so on that are needed for LaonSill framework.\n\n```\n$ cd $HOME\n$ mkdir LAONSILL_HOME\n$ export LAONSILL_HOME=$HOME/LAONSILL_HOME\n```\n\nCopy the env.sh.eg file located in $LAONSILL_BUILD_PATH to the env.sh file. Then set the env.sh file appropriately for your environment. This env.sh file should always be run. It is recommended that you configure env.sh to run in files such as .bashrc, .bash_profile, and so on.\n\n```\n$ cd $LAONSILL_BUILD_PATH\n$ cp env.sh.eg env.sh\n$ vi env.sh\n[env.sh example]\nexport LAONSILL_HOME=\"/home/monhoney/LAONSILL_HOME\"\nexport INC_PATH_GNUPLOT=\"/home/monhoney/install/gnuplot-iostream\"\nexport INC_PATH_CIMG=\"/usr/include\"\nexport LAONSILL_SOURCE_PATH=\"/home/monhoney/laonsill/LaonSill/src\"\nexport LAONSILL_BUILD_PATH=\"/home/monhoney/laonsill/LaonSill\"\nexport LD_LIBRARY_PATH=$LAONSILL_SOURCE_PATH/3rd_party/nms:$LD_LIBRARY_PATH\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8411004553040458
      ],
      "excerpt": "CUDA 8.0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9743934988399806
      ],
      "excerpt": "python 2.x(we recommend above 2.7 version) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9452797457628369
      ],
      "excerpt": "$ cd $LAONSILL_BUILD_PATH/src/param \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9452797457628369
      ],
      "excerpt": "$ cd $LAONSILL_BUILD_PATH/src/prop \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9010175614034382
      ],
      "excerpt": "$ cd $LAONSILL_BUILD_PATH/src/log \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9452797457628369
      ],
      "excerpt": "$ cd $LAONSILL_BUILD_PATH/src/perf \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8201821051304141
      ],
      "excerpt": "$ cd $LAONSILL_BUILD_PATH/src/examples/GAN \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8201428470102653
      ],
      "excerpt": "drwxrwxr-x 5 monhoney monhoney  4096  6\uc6d4 27 16:13 .. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8201428470102653
      ],
      "excerpt": "-rw-rw-r-- 1 monhoney monhoney   343  6\uc6d4 27 16:13 GAN.h \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "            \"name\" : \"celebAInput\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "        \"name\" : \"conv1\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "        \"name\" : \"lrelu1\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "        \"name\" : \"celossDGAN\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "$ cd / \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9134632588786469,
        0.9075500242753394
      ],
      "excerpt": "Let's run the GAN example now. Run LaonSill with the following options: \n$ cd $LAONSILL_BUILD_PATH/bin \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466,
        0.9906248903846466
      ],
      "excerpt": "$ cd $LAONSILL_HOME/output_images \n$ cd 20170630_171753_643146 \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8629400568140789,
        0.9336801098518991,
        0.8629400568140789,
        0.9336801098518991,
        0.9336801098518991,
        0.9336801098518991,
        0.8601529374818169,
        0.9336801098518991,
        0.8629400568140789,
        0.9336801098518991
      ],
      "excerpt": "$ cd $LAONSILL_BUILD_PATH/src/param \n$ ./genParam.py \n$ cd $LAONSILL_BUILD_PATH/src/prop \n$ ./genEnum.py \n$ ./genLayerPropList.py \n$ ./genNetworkProp.py \n$ cd $LAONSILL_BUILD_PATH/src/log \n$ ./genHotCode.py \n$ cd $LAONSILL_BUILD_PATH/src/perf \n$ ./genPerf.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8738449601968665
      ],
      "excerpt": "$ cd $LAONSILL_BUILD_PATH/src/examples/GAN \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "            \"name\" : \"celebAInput\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8733742484037544
      ],
      "excerpt": "            \"output\" : [\"data\"], \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "            \"resizeImage\" : true, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "        \"name\" : \"conv1\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8090667506781878,
        0.8289669050403863
      ],
      "excerpt": "        \"input\" : [\"data\"], \n        \"output\" : [\"conv1\"], \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029
      ],
      "excerpt": "        \"weightFiller.value\" : 0.02, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029
      ],
      "excerpt": "        \"biasFiller.value\" : 0.0, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "        \"receive\" : true, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "        \"name\" : \"lrelu1\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8731562459058029,
        0.8594142235991984
      ],
      "excerpt": "        \"biasFiller.value\" : 0.0, \n        \"receive\" : true, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421074476017179
      ],
      "excerpt": "        \"name\" : \"celossDGAN\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8289669050403863
      ],
      "excerpt": "        \"output\" : [\"prob\"], \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "        \"withSigmoid\" : true \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8056452525872493
      ],
      "excerpt": "and download celebA dataset into /data/celebA/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8847080753284582
      ],
      "excerpt": ":define EXAMPLE_GAN_NETWORKG0_FILEPATH              (\"../src/examples/GAN/networkG0.json\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8263118049311234
      ],
      "excerpt": "Let's run the GAN example now. Run LaonSill with the following options: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428
      ],
      "excerpt": "$ ./LaonSillClient -t run \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/oopsoopskeke/LaonSillv2/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "Cuda",
      "Python",
      "Shell",
      "C"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'The MIT License\\n\\nCopyright (c) Carl Rogers, 2011\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Welcome to LaonSill framework",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "LaonSillv2",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "oopsoopskeke",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/oopsoopskeke/LaonSillv2/blob/main/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You can run this script to compile. Note that the first argument of this script represents the degree of parallelism. Put the number of CPU core as an argument.\n\n```\n$ cd $LAONSILL_BUILD_PATH\\build\n$ ./build_only.sh 4\n```\n\nIf a new file is added or there is a missing configuration in the buildDef.json file and you need to create the Makefile again, run the script below:\n\n```\n$ ./cleanBuildGen.sh\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "After compilation, binaries can be found in the following locations:\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 8,
      "date": "Sun, 26 Dec 2021 15:59:52 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Check LaonSill version. If you have been working so far, you are ready to run LaonSill.\n\n```\n$ ./LaonSillServer -v\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "LaonSill supports various boot modes. We have prepared simple tutorials for each boot mode.\n\n",
      "technique": "Header extraction"
    }
  ]
}