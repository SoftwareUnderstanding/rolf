{
  "citation": [
    {
      "confidence": [
        0.8444342525991423
      ],
      "excerpt": "| VGG16_reduced 300x300 | VOC07+12 trainval| VOC07 test| 77.8| fast | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9115465676107753,
        0.9115465676107753
      ],
      "excerpt": "| MobileNet 512x512 | VOC07+12 trainval| VOC07 test| 72.5 | super fast | \n| MobileNet 608x608 | VOC07+12 trainval| VOC07 test| 74.7 | super fast | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8028046190715653
      ],
      "excerpt": "wget http://host.robots.ox.ac.uk/pascal/VOC/voc2012/VOCtrainval_11-May-2012.tar \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8109194328925066
      ],
      "excerpt": "tar -xvf VOCtrainval_11-May-2012.tar \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/LanqingLi/Chromosome",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-12-14T06:27:11Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-12-14T06:31:58Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9341210378373819
      ],
      "excerpt": "SSD is an unified framework for object detection with a single network. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.995649733775079,
        0.9403334346166099
      ],
      "excerpt": "This is a re-implementation of original SSD which is based on caffe. The official \nrepository is available here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8718554370844985
      ],
      "excerpt": "This example is intended for reproducing the nice detector while fully utilize the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9593410074207135
      ],
      "excerpt": "* The model is fully compatible with caffe version. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8808098437107397,
        0.8910156121961085
      ],
      "excerpt": "* The result is almost identical to the original version. However, due to different implementation details, the results might differ slightly. \nThis repo is now deprecated, I am migrating to the latest Gluon-CV which is more user friendly and has a lot more algorithms in development. This repo will not receive active development, however, you can continue use it with the mxnet 1.1.0(probably 1.2.0). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9423630130052847,
        0.802683170782351
      ],
      "excerpt": "added Docker support for this repository, prebuilt & including all packages and dependencies. (linux only) \nadded tensorboard support, allowing a more convenient way of research. (linux only) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8442991172546226
      ],
      "excerpt": "More to be added \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9147079964372326
      ],
      "excerpt": "Forward time only, data loading and drawing excluded. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8119988180697673
      ],
      "excerpt": "* We are going to use `trainval` set in VOC2007/2012 as a common strategy. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8149906214697968
      ],
      "excerpt": "Use hard link instead of copy could save us a bit disk space. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8321064376482818
      ],
      "excerpt": "This simply removes all loss layers, and attach a layer for merging results and non-maximum suppression. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.85714747078858
      ],
      "excerpt": "This is specifically modified to handle custom layer in caffe-ssd. Usage: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8974040727905973,
        0.8669345215902556
      ],
      "excerpt": "There is no guarantee that conversion will always work, but at least it's good for now. \nSince the new interface for composing network is introduced, the old models have inconsistent names for weights. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9584076663677538
      ],
      "excerpt": "for more information, see the Guide. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9322443782630155
      ],
      "excerpt": "Visualization with Docker: the UI of tensorboard has changed over time. to get the best experience, download the new tensorflow docker-image: \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/LanqingLi/Chromosome/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 07:14:30 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/LanqingLi/Chromosome/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "LanqingLi/Chromosome",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/LanqingLi/Chromosome/master/docker/cudnn6.0/Dockerfile",
      "https://raw.githubusercontent.com/LanqingLi/Chromosome/master/docker/cudnn5.1/Dockerfile",
      "https://raw.githubusercontent.com/LanqingLi/Chromosome/master/docker/mxnet_0.12/Dockerfile",
      "https://raw.githubusercontent.com/LanqingLi/Chromosome/master/docker/mxnet_0_11/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/LanqingLi/Chromosome/master/scripts/train_script.sh",
      "https://raw.githubusercontent.com/LanqingLi/Chromosome/master/scripts/run_tensorboard.sh",
      "https://raw.githubusercontent.com/LanqingLi/Chromosome/master/scripts/run_ssd_docker.sh",
      "https://raw.githubusercontent.com/LanqingLi/Chromosome/master/tools/prepare_coco.sh",
      "https://raw.githubusercontent.com/LanqingLi/Chromosome/master/tools/prepare_pascal.sh",
      "https://raw.githubusercontent.com/LanqingLi/Chromosome/master/tools/caffe_converter/run.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8285095234517257,
        0.8696148452886361
      ],
      "excerpt": "This repo is now deprecated, I am migrating to the latest Gluon-CV which is more user friendly and has a lot more algorithms in development. This repo will not receive active development, however, you can continue use it with the mxnet 1.1.0(probably 1.2.0). \nNow this repo is internally synchronized up to data with offical mxnet backend. pip install mxnet will work for this repo as well in most cases. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9273956135108576
      ],
      "excerpt": "Update to the latest version according to caffe version, with 5% mAP increase. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.832487805246197
      ],
      "excerpt": "Extra operators are now in mxnet/src/operator/contrib, symbols are modified. Please use Release-v0.2-beta for old models. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8272491559990689
      ],
      "excerpt": "* Download the PASCAL VOC dataset, skip this step if you already have one. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9842172039800472
      ],
      "excerpt": "cd /path/to/where_you_store_datasets/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9891677819012177,
        0.8819007017145146,
        0.9675226671353572
      ],
      "excerpt": ": cd /path/to/mxnet-ssd \nbash tools/prepare_pascal.sh \n: or if you are using windows \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9891677819012177
      ],
      "excerpt": ": cd /path/to/mxnet-ssd \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9891677819012177
      ],
      "excerpt": ": cd /path/to/mxnet-ssd \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.811248007729755
      ],
      "excerpt": "Converter from caffe is available at /path/to/mxnet-ssd/tools/caffe_converter \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9723314094497566
      ],
      "excerpt": "cd /path/to/mxnet-ssd/tools/caffe_converter \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.97546648920242
      ],
      "excerpt": "now you can execute commands the same way as you would, if you'd install mxnet on your own computer. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9612704924707773
      ],
      "excerpt": "If you chose to work with dockers, you have it installed in the pre-built image you've downloaded. otherwise, follow here for installation steps. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "cd /res \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8564833714801625
      ],
      "excerpt": "MobileNet pretrained model now provided. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8646854274793416
      ],
      "excerpt": "|        Model          | Training data    | Test data |  mAP | Note | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8224118177918246
      ],
      "excerpt": "This example only covers training on Pascal VOC dataset. Other datasets should \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8556207548361155,
        0.9139581445967263
      ],
      "excerpt": "See example of dataset/pascal_voc.py for details. \n* Download the converted pretrained vgg16_reduced model here, unzip .param and .json files \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8090092352504654,
        0.8375727514122794,
        0.8407651001510851,
        0.9503189345333785
      ],
      "excerpt": "python tools/prepare_dataset.py --dataset pascal --year 2007,2012 --set trainval --target ./data/train.lst \npython tools/prepare_dataset.py --dataset pascal --year 2007 --set test --target ./data/val.lst --shuffle False \n* Start training: \npython train.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9107676762170533
      ],
      "excerpt": "Check `python train.py --help` for more training options. For example, if you have 4 GPUs, use: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.939074354014186
      ],
      "excerpt": "python train.py --gpus 0,1,2,3 --batch-size 128 --lr 0.001 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9199868900334766
      ],
      "excerpt": "python evaluate.py --gpus 0,1 --batch-size 128 --epoch 0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8672914567192442,
        0.8161362394252876,
        0.8569945389705426
      ],
      "excerpt": "python deploy.py --num-class 20 \n: then you can run demo with new model without loading python symbol \npython demo.py --prefix model/ssd_300_deploy --epoch 0 --deploy \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8231671128734107
      ],
      "excerpt": "python convert_model.py deploy.prototxt name_of_pretrained_caffe_model.caffemodel ssd_converted \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8343431649223643
      ],
      "excerpt": "python demo.py --prefix ssd_converted --epoch 1 --deploy \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8416025659151101,
        0.8216270093103228,
        0.8943830768925682
      ],
      "excerpt": "and call with python train/demo.py --network legacy_xxx \nFor example: \npython demo.py --network 'legacy_vgg16_ssd_300.py' --prefix model/ssd_300 --epoch 0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8354824332914882
      ],
      "excerpt": "to run a container instance: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9543836231541957
      ],
      "excerpt": "python train.py --gpus 0,1,2,3 --batch-size 128 --lr 0.001 --tensorboard True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9463592886783507
      ],
      "excerpt": "python train.py --gpus 0,1,2,3 --batch-size 128 --lr 0.001 --tensorboard True --monitor 40 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/LanqingLi/Chromosome/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell",
      "Dockerfile",
      "Makefile",
      "Batchfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2016 Joshua Z. Zhang\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "SSD: Single Shot MultiBox Object Detector",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Chromosome",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "LanqingLi",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/LanqingLi/Chromosome/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 07:14:30 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "![demo1](https://cloud.githubusercontent.com/assets/3307514/19171057/8e1a0cc4-8be0-11e6-9d8f-088c25353b40.png)\n![demo2](https://cloud.githubusercontent.com/assets/3307514/19171063/91ec2792-8be0-11e6-983c-773bd6868fa8.png)\n![demo3](https://cloud.githubusercontent.com/assets/3307514/19171086/a9346842-8be0-11e6-8011-c17716b22ad3.png)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "* Option #1 - install using 'Docker'. if you are not familiar with this technology, there is a 'Docker' section below.\nyou can get the latest image:\n```\ndocker pull daviddocker78/mxnet-ssd:gpu_0.12.0_cuda9\n```\n* You will need python modules: `cv2`, `matplotlib` and `numpy`.\nIf you use mxnet-python api, you probably have already got them.\nYou can install them via pip or package manegers, such as `apt-get`:\n```\nsudo apt-get install python-opencv python-matplotlib python-numpy\n```\n* Clone this repo:\n```\n#: if you don't have git, install it via apt or homebrew/yum based on your system\nsudo apt-get install git\n#: cd where you would like to clone this repo\ncd ~\ngit clone --recursive https://github.com/zhreshold/mxnet-ssd.git\n#: make sure you clone this with --recursive\n#: if not done correctly or you are using downloaded repo, pull them all via:\n#: git submodule update --recursive --init\ncd mxnet-ssd/mxnet\n```\n* (Skip this step if you have offcial MXNet installed.) Build MXNet: `cd /path/to/mxnet-ssd/mxnet`. Follow the official instructions [here](http://mxnet.io/get_started/install.html).\n```\n#: for Ubuntu/Debian\ncp make/config.mk ./config.mk\n#: modify it if necessary\n```\nRemember to enable CUDA if you want to be able to train, since CPU training is\ninsanely slow. Using CUDNN is optional, but highly recommanded.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "* Download the pretrained model: [`ssd_resnet50_0712.zip`](https://github.com/zhreshold/mxnet-ssd/releases/download/v0.6/resnet50_ssd_512_voc0712_trainval.zip), and extract to `model/` directory.\n* Run\n```\n#: cd /path/to/mxnet-ssd\npython demo.py --gpu 0\n#: play with examples:\npython demo.py --epoch 0 --images ./data/demo/dog.jpg --thresh 0.5\npython demo.py --cpu --network resnet50 --data-shape 512\n#: wait for library to load for the first time\n```\n* Check `python demo.py --help` for more options.\n\n",
      "technique": "Header extraction"
    }
  ]
}