{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use DeCLUTR in your work, please consider citing our preprint\n\n```\n@inproceedings{giorgi-etal-2021-declutr,\n    title = \"{D}e{CLUTR}: Deep Contrastive Learning for Unsupervised Textual Representations\",\n    author = \"Giorgi, John  and\n      Nitski, Osvald  and\n      Wang, Bo  and\n      Bader, Gary\",\n    booktitle = \"Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers)\",\n    month = aug,\n    year = \"2021\",\n    address = \"Online\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2021.acl-long.72\",\n    doi = \"10.18653/v1/2021.acl-long.72\",\n    pages = \"879--895\",\n    abstract = \"Sentence embeddings are an important component of many natural language processing (NLP) systems. Like word embeddings, sentence embeddings are typically learned on large text corpora and then transferred to various downstream tasks, such as clustering and retrieval. Unlike word embeddings, the highest performing solutions for learning sentence embeddings require labelled data, limiting their usefulness to languages and domains where labelled data is abundant. In this paper, we present DeCLUTR: Deep Contrastive Learning for Unsupervised Textual Representations. Inspired by recent advances in deep metric learning (DML), we carefully design a self-supervised objective for learning universal sentence embeddings that does not require labelled training data. When used to extend the pretraining of transformer-based language models, our approach closes the performance gap between unsupervised and supervised pretraining for universal sentence encoders. Importantly, our experiments suggest that the quality of the learned embeddings scale with both the number of trainable parameters and the amount of unlabelled training data. Our code and pretrained models are publicly available and can be easily adapted to new domains or used to embed unseen text.\",\n}\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{giorgi-etal-2021-declutr,\n    title = \"{D}e{CLUTR}: Deep Contrastive Learning for Unsupervised Textual Representations\",\n    author = \"Giorgi, John  and\n      Nitski, Osvald  and\n      Wang, Bo  and\n      Bader, Gary\",\n    booktitle = \"Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers)\",\n    month = aug,\n    year = \"2021\",\n    address = \"Online\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://aclanthology.org/2021.acl-long.72\",\n    doi = \"10.18653/v1/2021.acl-long.72\",\n    pages = \"879--895\",\n    abstract = \"Sentence embeddings are an important component of many natural language processing (NLP) systems. Like word embeddings, sentence embeddings are typically learned on large text corpora and then transferred to various downstream tasks, such as clustering and retrieval. Unlike word embeddings, the highest performing solutions for learning sentence embeddings require labelled data, limiting their usefulness to languages and domains where labelled data is abundant. In this paper, we present DeCLUTR: Deep Contrastive Learning for Unsupervised Textual Representations. Inspired by recent advances in deep metric learning (DML), we carefully design a self-supervised objective for learning universal sentence embeddings that does not require labelled training data. When used to extend the pretraining of transformer-based language models, our approach closes the performance gap between unsupervised and supervised pretraining for universal sentence encoders. Importantly, our experiments suggest that the quality of the learned embeddings scale with both the number of trainable parameters and the amount of unlabelled training data. Our code and pretrained models are publicly available and can be easily adapted to new domains or used to embed unseen text.\",\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "| InferSent V2                                              |           Yes           |     38M    |     4096    |        76.00       |   72.58   | -3.10 | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8251022327183287
      ],
      "excerpt": "| DeCLUTR-base (RoBERTa-base)                                         |            No           |    125M    |     768     |      79.10     |   74.65   |   --  | \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/JohnGiorgi/DeCLUTR",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing\nTo submit a pull request, please do the following:\n\n\nFork the repository by clicking on the 'Fork' button on the repository's page. This creates a copy of the code under your GitHub user account.\n\n\nClone your fork to your local disk, and add the base repository as a remote:\n\n\nbash\n   $ git clone git@github.com:&lt;your Github handle&gt;/DeCLUTR.git\n   $ cd DeCLUTR\n   $ git remote add upstream https://github.com/JohnGiorgi/DeCLUTR.git\n\nCreate a new branch to hold your development changes:\n\nbash\n   $ git checkout -b a-descriptive-name-for-my-changes\ndo not work on the master branch.\n\nSet up a development environment by running the following command in a virtual environment:\n\nbash\n   $ pip install -e \".[dev]\"\n(If the repository was already installed in the virtual environment, remove it with pip uninstall before reinstalling it in editable mode with the -e flag.)\n\nDevelop the features on your branch.\n\nThis repository relies on black to format its source code\n   consistently. After you make changes, format them with:\nbash\n   $ black declutr\nThis repository also uses flake8 to check for coding mistakes. To run the checks locally:\nbash\n   $ flake8 declutr\nOnce you're happy with your changes, add changed files using git add and\n   make a commit with git commit to record your changes locally:\nbash\n   $ git add modified_file.py\n   $ git commit\nPlease write good commit messages.\nIt is a good idea to sync your copy of the code with the original\n   repository regularly. This way you can quickly account for changes:\nbash\n   $ git fetch upstream\n   $ git rebase upstream/master\nPush the changes to your account using:\nbash\n   $ git push -u origin a-descriptive-name-for-my-changes\n\nOnce you are satisfied, go to the webpage of your fork on GitHub.\n   Click on 'Pull request' to send your changes to the project maintainers for review.\n\n\nThis is a work in progress. Inspiration for these guidelines were drawn from here and here.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-11-26T18:36:43Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-22T10:55:08Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9874352677883764
      ],
      "excerpt": "The corresponding code for our paper: DeCLUTR: Deep Contrastive Learning for Unsupervised Textual Representations. Results on SentEval are presented below (as averaged scores on the downstream and probing task test sets), along with existing state-of-the-art methods. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9241363942844049
      ],
      "excerpt": "Transformer- is the same underlying architecture and pretrained weights as DeCLUTR- before continued pretraining with our contrastive objective. Transformer- and DeCLUTR- use mean pooling on their token-level embeddings to produce a fixed-length sentence representation. Downstream scores are computed without considering perfomance on SNLI (denoted \"Downstream (-SNLI)\") as InferSent, USE and Sentence Transformers all train on SNLI. \u0394: difference to DeCLUTR-base downstream score. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127
      ],
      "excerpt": "Evaluating with SentEval \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9812736570576609
      ],
      "excerpt": "The easiest way to get started is to follow along with one of our notebooks: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9048840932941887,
        0.9710087041128412
      ],
      "excerpt": "Embedding text with a pretrained model  \nEvaluating a model with SentEval \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9954742503696453
      ],
      "excerpt": "A training dataset should contain documents with a minimum of num_anchors * max_span_len * 2 whitespace tokens. This is required to sample spans according to our sampling procedure. See the dataset reader and/or our paper for more details on these hyperparameters. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8887167760981535
      ],
      "excerpt": ": This can be (almost) any model from https://huggingface.co/ that supports masked language modelling. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9475561814557093
      ],
      "excerpt": "There was a small bug in the original implementation that caused gradients derived from the contrastive loss to be scaled by 1/N, where N is the number of GPUs used during training. This has been fixed. To reproduce results from the paper, set model.scale_fix to False in your config. Note that this will have no effect if you are not using distributed training with more than 1 GPU. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8720825532509602
      ],
      "excerpt": "The model, saved to --save-directory, can then be loaded using the Hugging Face Transformers library (see Embedding for more details) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = AutoModel.from_pretrained(\"output_transformers\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9032937187206141
      ],
      "excerpt": "If you would like to upload your model to the Hugging Face model repository, follow the instructions here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9526166023174554
      ],
      "excerpt": "Hugging Face Transformers: load our pretrained model with the Hugging Face Transformers library. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9139970905553262
      ],
      "excerpt": "To use the model as a library, import Encoder and pass it some text (it accepts both strings and lists of strings) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9034161401509038
      ],
      "excerpt": ": the name of one of our pretrained models. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.970067301286574,
        0.835726878064569
      ],
      "excerpt": "    \"A smiling costumed woman is holding an umbrella.\", \n    \"A happy woman in a fairy costume holds an umbrella.\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8881848379393691
      ],
      "excerpt": "See the list of available PRETRAINED_MODELS in declutr/encoder.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9755391629802904
      ],
      "excerpt": "Our pretrained models are also hosted with Hugging Face Transformers, so they can be used like any other model in that library. Here is a simple example: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8088475081181175,
        0.9107462877600564
      ],
      "excerpt": "model = AutoModel.from_pretrained(\"johngiorgi/declutr-small\") \n: Prepare some text to embed \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.970067301286574,
        0.835726878064569
      ],
      "excerpt": "    \"A smiling costumed woman is holding an umbrella.\", \n    \"A happy woman in a fairy costume holds an umbrella.\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490037945672047
      ],
      "excerpt": ": Embed the text \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8098271940730201
      ],
      "excerpt": ": Mean pool the token-level embeddings to get sentence-level embeddings \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8372529871594637
      ],
      "excerpt": "Load the model serialized to \"output\" with the \"best\" weights (i.e. the ones that achieved the lowest loss during training). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9897052146694489
      ],
      "excerpt": "SentEval is a library for evaluating the quality of sentence embeddings. We provide a script to evaluate our model against SentEval. We have provided a notebook that documents the process of evaluating a trained model on SentEval. Broadly, the steps are the following: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9895303240399965
      ],
      "excerpt": "See the SentEval repository for full details. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9074310892456946
      ],
      "excerpt": "Pass the flag --prototyping-config to get a proxy of the results while dramatically reducing computation time. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "The corresponding code from our paper \"DeCLUTR: Deep Contrastive Learning for Unsupervised Textual Representations\". Do not hesitate to open an issue if you run into any trouble!",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/JohnGiorgi/DeCLUTR/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 25,
      "date": "Thu, 23 Dec 2021 19:15:31 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/JohnGiorgi/DeCLUTR/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "JohnGiorgi/DeCLUTR",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/JohnGiorgi/DeCLUTR/master/notebooks/training.ipynb",
      "https://raw.githubusercontent.com/JohnGiorgi/DeCLUTR/master/notebooks/embedding.ipynb",
      "https://raw.githubusercontent.com/JohnGiorgi/DeCLUTR/master/notebooks/evaluating.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "A dataset is simply a file containing one item of text (a document, a scientific paper, etc.) per line. For demonstration purposes, we have provided a script that will download the [WikiText-103](https://www.salesforce.com/products/einstein/ai-research/the-wikitext-dependency-language-modeling-dataset/) dataset and match our minimal preprocessing\n\n```bash\npython scripts/preprocess_wikitext_103.py path/to/output/wikitext-103/train.txt --min-length 2048\n```\n\n> See [scripts/preprocess_openwebtext.py](scripts/preprocess_openwebtext.py) for a script that can be used to recreate the (much larger) dataset used in our paper.\n\nYou can specify the train set path in the [configs](training_config) under `\"train_data_path\"`.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "If you _don't_ plan on modifying the source code, install from `git` using `pip`\n\n```\npip install git+https://github.com/JohnGiorgi/DeCLUTR.git\n```\n\nOtherwise, clone the repository locally and then install\n\n```bash\ngit clone https://github.com/JohnGiorgi/DeCLUTR.git\ncd DeCLUTR\npip install --editable .\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Before installing, you should create and activate a Python virtual environment. See [here](https://github.com/allenai/allennlp#installing-via-pip) for detailed instructions.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "This repository requires Python 3.6.1 or later.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.993524252831998
      ],
      "excerpt": "If you plan on training your own model, you should also install PyTorch with CUDA support by following the instructions for your system here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8041269066251733
      ],
      "excerpt": "To train the model, use the allennlp train command with our declutr.jsonnet config. For example, to train DeCLUTR-small, run the following \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9092405514341683
      ],
      "excerpt": "    --overrides \"{'train_data_path': 'path/to/your/dataset/train.txt'}\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8828436538887439
      ],
      "excerpt": "The --overrides flag allows you to override any field in the config with a JSON-formatted string, but you can equivalently update the config itself if you prefer. During training, models, vocabulary, configuration, and log files will be saved to the directory provided by --serialization-dir. This can be changed to any directory you like. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9024187163140793
      ],
      "excerpt": "To train on more than one GPU, provide a list of CUDA devices in your call to allennlp train. For example, to train with four CUDA devices with IDs 0, 1, 2, 3 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9893272198983933,
        0.8080002376980483,
        0.9906248903846466
      ],
      "excerpt": "git clone https://github.com/JohnGiorgi/SentEval.git \ncd SentEval/data/downstream/ \ncd ../../../ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8335669757966607
      ],
      "excerpt": "The results will be saved to \"output/senteval_results.json\". This can be changed to any path you like. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8318400529087887
      ],
      "excerpt": "Embedding text with a pretrained model  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8398240104586067
      ],
      "excerpt": "To train the model, use the allennlp train command with our declutr.jsonnet config. For example, to train DeCLUTR-small, run the following \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8589534893990137,
        0.811869988768564,
        0.84669458307596
      ],
      "excerpt": "allennlp train \"training_config/declutr.jsonnet\" \\ \n    --serialization-dir \"output\" \\ \n    --overrides \"{'train_data_path': 'path/to/your/dataset/train.txt'}\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9649029626254486
      ],
      "excerpt": "python save_pretrained_hf.py --archive-file \"output\" --save-directory \"output_transformers\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from transformers import AutoTokenizer, AutoModelForMaskedLM \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8813595683727634
      ],
      "excerpt": "python -c \"from declutr.encoder import PRETRAINED_MODELS ; print(list(PRETRAINED_MODELS.keys()))\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from transformers import AutoModel, AutoTokenizer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8455854738180621
      ],
      "excerpt": "To embed all text in a given file with a trained model, run the following command \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8943058515222809,
        0.8837856910754242
      ],
      "excerpt": "allennlp predict \"output\" \"path/to/input.txt\" \\ \n --output-file \"output/embeddings.jsonl\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.811732786549249,
        0.8898317150092778
      ],
      "excerpt": "Use that model to embed the text in the provided input file (\"path/to/input.txt\"). \nSave the embeddings to disk as a JSON lines file (\"output/embeddings.jsonl\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.872591765025668,
        0.8629415489563114
      ],
      "excerpt": "python scripts/run_senteval.py allennlp \"SentEval\" \"output\" \n --output-filepath \"output/senteval_results.json\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8184605694110304
      ],
      "excerpt": "python scripts/run_senteval.py --help \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8184605694110304
      ],
      "excerpt": "python scripts/run_senteval.py allennlp --help \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8453308660641624
      ],
      "excerpt": "    --output-filepath \"senteval_results.json\" \\ \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/JohnGiorgi/DeCLUTR/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook",
      "Jsonnet"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "DeCLUTR: Deep Contrastive Learning for Unsupervised Textual Representations",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "DeCLUTR",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "JohnGiorgi",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/JohnGiorgi/DeCLUTR/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "JohnGiorgi",
        "body": "# Overview\r\n\r\nThis is the first release candidate for the eventual v0.1.0 release of the associated code for our paper: [DeCLUTR: Deep Contrastive Learning for Unsupervised Textual Representations](https://arxiv.org/abs/2006.03659).\r\n\r\nThe release contains configs to recreate the experiments from our model, along with pretrained models which can be used off-the-shelf.",
        "dateCreated": "2020-07-10T20:01:15Z",
        "datePublished": "2020-07-10T20:01:43Z",
        "html_url": "https://github.com/JohnGiorgi/DeCLUTR/releases/tag/v0.1.0rc1",
        "name": "v0.1.0rc1",
        "tag_name": "v0.1.0rc1",
        "tarball_url": "https://api.github.com/repos/JohnGiorgi/DeCLUTR/tarball/v0.1.0rc1",
        "url": "https://api.github.com/repos/JohnGiorgi/DeCLUTR/releases/27935003",
        "zipball_url": "https://api.github.com/repos/JohnGiorgi/DeCLUTR/zipball/v0.1.0rc1"
      }
    ],
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you _don't_ plan on modifying the source code, install from `git` using `pip`\n\n```\npip install git+https://github.com/JohnGiorgi/DeCLUTR.git\n```\n\nOtherwise, clone the repository locally and then install\n\n```bash\ngit clone https://github.com/JohnGiorgi/DeCLUTR.git\ncd DeCLUTR\npip install --editable .\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 255,
      "date": "Thu, 23 Dec 2021 19:15:31 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "contrastive-learning",
      "natural-language-processing",
      "allennlp",
      "pytorch",
      "transformers",
      "representation-learning",
      "sentence-embeddings",
      "sentence-similarity",
      "semantic-search",
      "semantic-text-similarity",
      "metric-learning",
      "self-supervised-learning"
    ],
    "technique": "GitHub API"
  }
}