{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[1] https://papers.nips.cc/paper/5423-generative-adversarial-nets.pdf <br>\n[2] https://arxiv.org/pdf/1511.06434.pdf <br>\n[3] https://github.com/soumith/ganhacks <br>\n[4] https://medium.com/activating-robotic-minds/up-sampling-with-transposed-convolution-9ae4f2df52d0 <br>\n\n\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/AKASHKADEL/dcgan-celeba",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-08-22T16:05:50Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-23T18:29:54Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Deep Convolutional GAN is one of the most coolest and popular deep learning technique. It is a great improvement upon the [original GAN network](https://papers.nips.cc/paper/5423-generative-adversarial-nets.pdf) that was first introduced by Ian Goodfellow at NIPS 2014. (DCGANs are much more stable than Vanilla GANs) DCGAN uses the same framework of generator and discriminator. This is analogous to solving a two player minimax game: Ideally the goal of the discriminator is to be very sharp in distinguishing between the real and fake data, whereas, generator aims at faking data in such a way that it becomes nearly impossible for the discriminator to classify it as a fake. The below gif shows how quickly dcgan learns the distribution of celebrity images and generates real looking people. The gif is created for both, a fixed noise and variable noise:-\n\n<p float=\"left\">\n  <img src=\"https://github.com/AKASHKADEL/dcgan-celeba/blob/master/results/variable_noise/animated.gif\" width=\"400\" height=\"400\" />\n  <img src=\"https://github.com/AKASHKADEL/dcgan-celeba/blob/master/results/fixed_noise/animated.gif\" width=\"400\" height=\"400\" />\n</p>\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9469289789053651
      ],
      "excerpt": "This is my second implementation of dcgan. My first implementation was on mnist dataset which could be found here. This implementation is on the celebrity faces dataset. This is the link to the dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "#: Data Loader \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "PyTorch Implementation of DCGAN (on CelebA dataset)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/AKASHKADEL/dcgan-celeba/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 29 Dec 2021 02:30:05 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/AKASHKADEL/dcgan-celeba/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "AKASHKADEL/dcgan-celeba",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8199943448413267
      ],
      "excerpt": "You can also generate sample output using a fixed noise vector (It's easier to interpret the output on a fixed noise. Ex: the above gif), use this \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8848314163268719
      ],
      "excerpt": "dataloader = torch.utils.data.DataLoader(dataset, batch_size=batch_size, shuffle=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9469322826519512
      ],
      "excerpt": "python main.py --num-epochs 100 --output-path ./results/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9349610041493125
      ],
      "excerpt": "python main.py --num-epochs 100 --output-path ./results/ --use-fixed \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/AKASHKADEL/dcgan-celeba/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "DCGAN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "dcgan-celeba",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "AKASHKADEL",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/AKASHKADEL/dcgan-celeba/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Python 3+ distribution\n* PyTorch >= 1.0\n\nOptional:\n\n* Matplolib and Imageio to produce basic visualizations.\n* Cuda >= 10.0\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Wed, 29 Dec 2021 02:30:05 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "deep-learning",
      "dcgan",
      "celeba-dataset",
      "pytorch",
      "visualization"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To get started and to replicate the above result, follow the instructions in this section. This wil allow you to train the model from scratch and help produce basic visualizations. \n\n",
      "technique": "Header extraction"
    }
  ]
}