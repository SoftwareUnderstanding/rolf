{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1511.06434",
      "https://arxiv.org/abs/1611.04076",
      "https://arxiv.org/abs/1606.03657",
      "https://arxiv.org/abs/1703.10717"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.994799811898885
      ],
      "excerpt": "<!--BEGAN | [paper](https://arxiv.org/abs/1703.10717) | [details](docs/began/) | \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/conan7882/tf-gans",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-08-13T15:09:03Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-01-20T07:18:38Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9368914112007711,
        0.9638482793925001,
        0.9777436330043311,
        0.990258564865153,
        0.8638996580541706
      ],
      "excerpt": "This repository contains TensorFlow implementations of GANs inspired by several other repositories of GANs or generative models (generative-models, tensorflow-generative-model-collections). \nThis repository is used for me to learn and experiment on various GANs. \nAll the GANs are tested on MNIST and CelebA and the architecture of each GAN is the same as or slightly modified from the original paper to make them compatible for images with size 28 x 28 and 64 x 64. \nResults of the GAN models implemented in this repository are briefly shown in this page. Implementation details and full results of each GAN can be found in indvidual pages for each model. \nHere are my other implementations related to GAN: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9025363534199087,
        0.9817664276885518,
        0.9950821430547319
      ],
      "excerpt": "DCGAN | paper | details | DCGAN improves the GAN performance by using a more advanced architecture than the original GAN, including batchnorm, fully convolutional structure, ReLU and LeakyReLU activations, and removing pooling layers.|  \nLSGAN | paper | details |  LSGAN uses least squares losses instead of original cross entropy losses to pull the generated data close to the real data. \nInfoGAN | paper | details | InfoGAN is able to learn disentangled representations from data in a completely unsupervised manner by maximize the mutual information between a small subset of input latent codes and the generated data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8382760893385077
      ],
      "excerpt": "--load: The epoch ID of pre-trained model to be restored. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8234324682645066
      ],
      "excerpt": "--keep_prob: Keep probability of dropout. Default: 1.0. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.833978506902685,
        0.8028588789773274,
        0.8054475343431883
      ],
      "excerpt": "--ng: Number of times of training generator for each step. Default: 1. \n--nd: Number of times of training discriminator for each step. Default: 1. \n--w_mutual: Weight of mutual information loss for InfoGAN. Default: 1.0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8218369107869792,
        0.9658919332675936
      ],
      "excerpt": "Here are example results of each GAN model.  \nDetails of the implementation and more results for each GAN model can be access by clicking details under model names. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Tensorflow implementation of Generative Adversarial Networks",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://pillow.readthedocs.io/",
      "technique": "Regular expression"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/conan7882/tf-gans/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Tue, 21 Dec 2021 12:00:53 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/conan7882/tf-gans/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "conan7882/tf-gans",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/conan7882/tf-gans/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Download the MNIST dataset from [here](http://yann.lecun.com/exdb/mnist/) and CelebA from [here](http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html).\n- Setup path in [`examples/gans.py`](examples/gans.py): `MNIST_PATH` is the directory to put MNIST dataset and `CELEBA_PATH` is the directory to put CelebA dataset. `SAVE_PATH` is the directory to save output images and trained model.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "<!-- *Name* | *MNIST* |*CelebA* | \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9169842187038684,
        0.8742298037069648,
        0.8884300879063488,
        0.8036868233215435
      ],
      "excerpt": "Run the script examples/gans.py to train GAN models. Here are all the arguments: \n--train: Train the model. \n--generate: Randomly sample images from trained model. \n--load: The epoch ID of pre-trained model to be restored. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8020496733873106
      ],
      "excerpt": "--zlen: Length of input random vector z. Default: 100 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8430718834731352
      ],
      "excerpt": "--bsize: Batch size. Default: 128. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.872444696555995,
        0.8912058470953815,
        0.8235881185106803
      ],
      "excerpt": "Go to examples/, then run \npython gans.py --train --gan_type GAN_NAME --dataset DATASET_NAME \nThe trained model and images sampled from the model during training will be saved in SAVE_PATH. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8150422092760947
      ],
      "excerpt": "Here are example results of each GAN model.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8922994003851814,
        0.8922994003851814,
        0.8922994003851814
      ],
      "excerpt": "DCGAN <br/>details | <img src = 'docs/dcgan/figs/mnist/generate_im_20.png' height = '220px' width = '220px'>|  <img src = 'docs/dcgan/figs/mnist/manifoid_23.png' height = '220px' width = '220px'> <img src = 'docs/dcgan/figs/mnist/interpolate_19.png' height = '80px' width = '240px'> \nLSGAN <br/>details | <img src = 'docs/lsgan/figs/mnist/generate_im_20.png' height = '220px' width = '220px'> | <img src = 'docs/lsgan/figs/mnist/manifoid_24.png' height = '220px' width = '220px'> <img src = 'docs/lsgan/figs/mnist/interpolate_24.png' height = '80px' width = '240px'> \nInfoGAN <br/>details  |<img src = 'docs/infogan/figs/mnist/random_sampling_49.png' height = '220px' width = '220px'>  | <img src = 'docs/infogan/figs/mnist/generate_im_49.png' height = '220px' width = '220px'> <img src = 'docs/infogan/figs/mnist/interp_cont_1_49.png' height = '220px' width = '220px'> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9013878266978705,
        0.9013878266978705,
        0.9013878266978705,
        0.8421074476017179
      ],
      "excerpt": "DCGAN <br/>details | <img src = 'docs/dcgan/figs/face/generate_im_25.png' height = '220px' width = '220px'> | <img src = 'docs/dcgan/figs/face/interpolate_22.png' height = '150px' width = '450px'> \nLSGAN <br/>details |  <img src = 'docs/lsgan/figs/face/generate_im_49.png' height = '220px' width = '220px'> | <img src = 'docs/lsgan/figs/face/interpolate_47.png' height = '150px' width = '450px'> \nInfoGAN <br/>details  | <img src = 'docs/infogan/figs/face/random_sampling_49.png' height = '220px' width = '220px'>| <img src = 'docs/infogan/figs/face/interp_cont_1_25.png' height = '210px' width = '420px'> \n<!-- *Name* | *MNIST* |*CelebA* | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8978790100537234,
        0.8900772491035861,
        0.8718733401996207
      ],
      "excerpt": "DCGAN | <img src = 'docs/dcgan/figs/mnist/generate_im_20.png' height = '220px' width = '220px'> <img src = 'docs/dcgan/figs/mnist/manifoid_23.png' height = '220px' width = '220px'> |Random Sampling and interpolation <br/> <img src = 'docs/dcgan/figs/face/generate_im_25.png' height = '220px' width = '220px'> <img src = 'docs/lsgan/figs/face/interpolate_47.png' height = '110px' width = '330px'> \nLSGAN |Random Sampling and interpolation <br/> <img src = 'docs/lsgan/figs/mnist/generate_im_20.png' height = '220px' width = '220px'> <img src = 'docs/lsgan/figs/mnist/manifoid_24.png' height = '220px' width = '220px'> | Random Sampling and interpolation <br/> <img src = 'docs/lsgan/figs/face/generate_im_49.png' height = '220px' width = '220px'> <img src = 'docs/dcgan/figs/face/interpolate_24.png' height = '110px' width = '330px'> \nInfoGAN |Varying categorical latent codes and continuous latent codes <br/> <img src = 'docs/infogan/figs/mnist/generate_im_49.png' height = '220px' width = '220px'> <img src = 'docs/infogan/figs/mnist/interp_cont_1_49.png' height = '220px' width = '220px'> | Random sampling and varying continuous latent codes <br/> <img src = 'docs/infogan/figs/face/random_sampling_49.png' height = '220px' width = '220px'> <img src = 'docs/infogan/figs/face/interp_cont_3_41.png' height = '110px' width = '220px'> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/conan7882/tf-gans/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 Qian Ge\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "TensorFlow implementation of Generative Adversarial Networks",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "tf-gans",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "conan7882",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/conan7882/tf-gans/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Python 3.3+\n- [Tensorflow 1.10+](https://www.tensorflow.org/)\n- [TensorFlow Probability](https://www.tensorflow.org/probability/)\n- [numpy](http://www.numpy.org/)\n- [Scipy](https://www.scipy.org/)\n- [Matplotlib](https://matplotlib.org/)\n- [skimage](https://scikit-image.org/)\n- [pillow](https://pillow.readthedocs.io/en/5.2.x/)\n- [imageio 2.4.1+](http://imageio.github.io/)\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 7,
      "date": "Tue, 21 Dec 2021 12:00:53 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "tensorflow",
      "gan",
      "generative-adversarial-network",
      "dcgan",
      "lsgan",
      "infogan"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- GAN models are defined in [`src/nets/`](src/nets/).\n- The script [`example/gans.py`](example/gans.py) contains experiments of all the GAN models.\n\n",
      "technique": "Header extraction"
    }
  ]
}