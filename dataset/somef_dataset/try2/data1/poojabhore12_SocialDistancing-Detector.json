{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1506.02640\n- YOLO TensorFlow implementation (darkflow"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "***Main:***\n- YOLOv3 paper: https://arxiv.org/pdf/1804.02767.pdf\n- YOLO original paper: https://arxiv.org/abs/1506.02640\n- YOLO TensorFlow implementation (darkflow): https://github.com/thtrieu/darkflow\n\n***Optional:***\n- More theory: https://www.pyimagesearch.com/2018/11/12/yolo-object-detection-with-opencv/\n- Other trained model weights from official doc: https://pjreddie.com/darknet/yolo/\n\n---\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9146894306581498
      ],
      "excerpt": "Object detection: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9444212796006252
      ],
      "excerpt": "- YOLO treats object detection as a regression problem, taking a given input image and simultaneously learning bounding box coordinates and corresponding class label probabilities. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/poojabhore12/SocialDistancing-Detector",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-04-12T14:17:28Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-09-11T11:26:12Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8910384896090979
      ],
      "excerpt": "Please refer to the added Features. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8175593778787391,
        0.9257354145704297
      ],
      "excerpt": "- Sending an alert to the staff if the people are way over the social distancing limits. \n- Optimizing the real-time stream for better performance (with threading). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9143378366138633
      ],
      "excerpt": "- In general, single-stage detectors like YOLO tend to be less accurate than two-stage detectors (R-CNN) but are significantly faster. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8922409339511432
      ],
      "excerpt": "- It is used to return the person prediction probability, bounding box coordinates for the detection, and the centroid of the person. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8025312102415724,
        0.9226172041801873,
        0.9238819834965523,
        0.9554483531141419
      ],
      "excerpt": "- NMS (Non-maxima suppression) is also used to reduce overlapping bounding boxes to only a single bounding box, thus representing the true detection of the object.  \n- Having overlapping boxes is not exactly practical and ideal, especially if we need to count the number of objects in an image. \n- Euclidean distance is then computed between all pairs of the returned centroids. Simply, a centroid is the center of a bounding box. \n- Based on these pairwise distances, we check to see if any two people are less than/close to 'N' pixels apart. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8024819343227143,
        0.8269554079625092,
        0.9184034694613071
      ],
      "excerpt": "- Threading removes OpenCV's internal buffer (which basically stores the new frames yet to be processed until your system processes the old frames) and thus reduces the lag/increases fps. \n- If your system is not capable of simultaneously processing and outputting the result, you might see a delay in the stream. This is where threading comes into action. \n- It is most suitable for solid performance on complex real-time applications. To use threading: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "System for detecting crowd of people who are not maintaining social distancing using IOT.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/poojabhore12/SocialDistancing-Detector/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 23:04:52 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/poojabhore12/SocialDistancing-Detector/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "poojabhore12/SocialDistancing-Detector",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.8100229687036724
      ],
      "excerpt": "set Thread = True in the config. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/poojabhore12/SocialDistancing-Detector/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Social-Distancing-in-Real-Time",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "SocialDistancing-Detector",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "poojabhore12",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/poojabhore12/SocialDistancing-Detector/blob/main/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Install all the required Python dependencies:\n```\npip install -r requirements.txt\n```\n- If you would like to use GPU, set ```USE_GPU = True``` in the config. options at 'mylib/config.py'.\n\n- Note that you need to build OpenCV with CUDA (for an NVIDIA GPU) support first:\n\n> Click [**here**](https://jamesbowley.co.uk/accelerate-opencv-4-2-0-build-with-cuda-and-python-bindings/) for build instructions on Windows.\n\n- To run inference on an IP camera, Setup your camera url in 'mylib/config.py':\n\n- Then run with the command:\n```\npython run.py\n\nor\n\ntime python run.py --input video.mp4 --output output.avi --display 1 \n```\n> Set url = 0 for live stream.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Mon, 27 Dec 2021 23:04:52 GMT"
    },
    "technique": "GitHub API"
  }
}