{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1802.01483",
      "https://arxiv.org/abs/1612.01105"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{li2018explicit,\n  author    = {Li, Xuhong and Grandvalet, Yves and Davoine, Franck},\n  title     = {Explicit Inductive Bias for Transfer Learning with Convolutional Networks},\n  booktitle={International Conference on Machine Learning (ICML)},\n   pages     = {2830--2839},\n  year      = {2018}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9508376338065959
      ],
      "excerpt": "(Updated 2019/02/26. A major change of code structure. For the version before, checkout v0.9 https://github.com/holyseven/PSPNet-TF-Reproduce/tree/v0.9.) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9999852988060709
      ],
      "excerpt": "If you find the L2-SP useful for your research (not limited in image segmentation), please consider citing our work: \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/holyseven/PSPNet-TF-Reproduce",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-04-13T15:18:20Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-18T16:21:26Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9485298147236415
      ],
      "excerpt": "(Updated 2021/04/09. Authors of PSPNet have provided a Pytorch implementation for PSPNet and their new work with supporting Sync Batch Norm, see https://github.com/hszhao/semseg.) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8719487747380342,
        0.8329374765215304
      ],
      "excerpt": "This is an implementation of PSPNet (from training to test) in pure Tensorflow library (tested on TF1.12, Python 3). \nSupported Backbones: ResNet-V1-50, ResNet-V1-101 and other ResNet-V1s can be easily added. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8568339524342794,
        0.987129721933077
      ],
      "excerpt": "More things: L2-SP regularization and sync batch normalization implementation. \nL2-SP regularization is a variant of L2 regularization. Instead of the origin like L2 does, L2-SP sets the pre-trained model as reference, just like (w - w0)^2, where w0 is the pre-trained model. Simple but effective. More details about L2-SP can be found in the paper and the code. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8553198514670004,
        0.9580011556792284,
        0.9521734132880163,
        0.9391767134256334,
        0.9394449182630016
      ],
      "excerpt": "This repo resolves this problem in pure python and pure Tensorflow by simply using a list as input. The main idea is located in model/utils_mg.py \nI do not know if this is the first implementation of sync batch norm in Tensorflow, but there is already an implementation in PyTorch and some applications. \nUpdate: There is other implementation that uses NCCL to gather statistics across GPUs, see in tensorpack. However, TF1.1 does not support gradients passing by nccl_all_reduce. Plus, ppc64le with tf1.10, cuda9.0 and nccl1.3.5 was not able to run this code. No idea why, and do not want to spend a lot of time on this. Maybe nccl2 can solve this. \nRandom scaling for all \nRandom rotation for SBD \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9698630643519727
      ],
      "excerpt": "What is optimal hyperparameter of decay for statistics of batch normalization layers? (0.9, 0.95, 0.9997) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9540736345027774,
        0.9834938440997539
      ],
      "excerpt": "Code structure: wrapping of the model. \nAdd tf.data support, but with queue-based reader is faster. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Training PSPNet in Tensorflow. Reproduce the performance from the paper.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/holyseven/PSPNet-TF-Reproduce/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 31,
      "date": "Sun, 26 Dec 2021 01:09:01 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/holyseven/PSPNet-TF-Reproduce/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "holyseven/PSPNet-TF-Reproduce",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/holyseven/PSPNet-TF-Reproduce/master/z_pretrained_weights/download_resnet_v1_101.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8957503101769545
      ],
      "excerpt": "(Updated 2019/02/26. A major change of code structure. For the version before, checkout v0.9 https://github.com/holyseven/PSPNet-TF-Reproduce/tree/v0.9.) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.818033245669587,
        0.9906248903846466,
        0.9023697225149864
      ],
      "excerpt": "Download pretrained models. \ncd z_pretrained_weights \nsh download_resnet_v1_101.sh \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8079022373111922
      ],
      "excerpt": "The default environment is Python 3 and TF1.12. OpenCV is needed for predicting and demo_infer. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.81260763509323
      ],
      "excerpt": "      <td rowspan=\"2\">Cityscapes (train set: 3K)</td> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8778534729040356
      ],
      "excerpt": "Download pretrained models. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8987931546714022
      ],
      "excerpt": "python ./run.py --network 'resnet_v1_50' --visible_gpus '0,1' --reader_method 'queue' --lrn_rate 0.01 --weight_decay_mode 0 --weight_decay_rate 0.0001 --weight_decay_rate2 0.001 --database 'ADE' --subsets_for_training 'train' --batch_size 8 --train_image_size 480 --snapshot 30000 --train_max_iter 90000 --test_image_size 480 --random_rotate 0 --fine_tune_filename './z_pretrained_weights/resnet_v1_50.ckpt' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8926559113436661
      ],
      "excerpt": "python predict.py --visible_gpus '0' --network 'resnet_v1_101' --database 'ADE' --weights_ckpt './log/ADE/PSP-resnet_v1_101-gpu_num2-batch_size8-lrn_rate0.01-random_scale1-random_rotate1-480-60000-train-1-0.0001-0.001-0-0-1-1/snapshot/model.ckpt-60000' --test_subset 'val' --test_image_size 480 --batch_size 8 --ms 1 --mirror 1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8730690638002491,
        0.8011095113816955
      ],
      "excerpt": "python demo_infer.py --database 'Cityscapes' --network 'resnet_v1_101' --weights_ckpt './log/Cityscapes/old/model.ckpt-50000' --test_image_size 864 --batch_size 4 --ms 1 \n(Cityscapes only) Whether finely labeled data in the first training stage should be involved? \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9587605353700053
      ],
      "excerpt": "print results using python utils.py in experiment_manager dir. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/holyseven/PSPNet-TF-Reproduce/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 LI Xuhong\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Training Reproduce of PSPNet.",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "PSPNet-TF-Reproduce",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "holyseven",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/holyseven/PSPNet-TF-Reproduce/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 122,
      "date": "Sun, 26 Dec 2021 01:09:01 GMT"
    },
    "technique": "GitHub API"
  }
}