{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1909.10351",
      "https://arxiv.org/abs/2002.06305"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use this code for your publication, please cite the original paper:\n```\n@inproceedings{clark2020electra,\n  title = {{ELECTRA}: Pre-training Text Encoders as Discriminators Rather Than Generators},\n  author = {Kevin Clark and Minh-Thang Luong and Quoc V. Le and Christopher D. Manning},\n  booktitle = {ICLR},\n  year = {2020},\n  url = {https://openreview.net/pdf?id=r1xMH1BtvB}\n}\n```\n\nIf you use the code for Electric, please cite the Electric paper:\n```\n@inproceedings{clark2020electric,\n  title = {Pre-Training Transformers as Energy-Based Cloze Models},\n  author = {Kevin Clark and Minh-Thang Luong and Quoc V. Le and Christopher D. Manning},\n  booktitle = {EMNLP},\n  year = {2020},\n  url = {https://www.aclweb.org/anthology/2020.emnlp-main.20.pdf}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{clark2020electric,\n  title = {Pre-Training Transformers as Energy-Based Cloze Models},\n  author = {Kevin Clark and Minh-Thang Luong and Quoc V. Le and Christopher D. Manning},\n  booktitle = {EMNLP},\n  year = {2020},\n  url = {https://www.aclweb.org/anthology/2020.emnlp-main.20.pdf}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{clark2020electra,\n  title = {{ELECTRA}: Pre-training Text Encoders as Discriminators Rather Than Generators},\n  author = {Kevin Clark and Minh-Thang Luong and Quoc V. Le and Christopher D. Manning},\n  booktitle = {ICLR},\n  year = {2020},\n  url = {https://openreview.net/pdf?id=r1xMH1BtvB}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8028046190715653,
        0.9278824608274014
      ],
      "excerpt": "| ELECTRA-Small | 12 | 256 | 14M | 77.4  | link | \n| ELECTRA-Base | 12 | 768 | 110M | 82.7 | link | \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/google-research/electra",
    "technique": "GitHub API"
  },
  "contact": [
    {
      "confidence": [
        1
      ],
      "excerpt": "For help or issues using ELECTRA, please submit a GitHub issue.\n\nFor personal communication related to ELECTRA, please contact [Kevin Clark](https://cs.stanford.edu/~kevclark/) (`kevclark@cs.stanford.edu`).\n",
      "technique": "Header extraction"
    }
  ],
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "How to Contribute\nWe'd love to accept your patches and contributions to this project. There are just a few small guidelines you need to follow.\nContributor License Agreement\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to https://cla.developers.google.com/ to see\nyour current agreements on file or to sign a new one.\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\nCode reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\nGitHub Help for more\ninformation on using pull requests.\nCommunity Guidelines\nThis project follows\nGoogle's Open Source Community Guidelines.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-10T03:42:50Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-21T11:16:57Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**ELECTRA** is a method for self-supervised language representation learning. It can be used to pre-train transformer networks using relatively little compute. ELECTRA models are trained to distinguish \"real\" input tokens vs \"fake\" input tokens generated by another neural network, similar to the discriminator of a [GAN](https://arxiv.org/pdf/1406.2661.pdf). At small scale, ELECTRA achieves strong results even when trained on a single GPU. At large scale, ELECTRA achieves state-of-the-art results on the [SQuAD 2.0](https://rajpurkar.github.io/SQuAD-explorer/) dataset.\n\nFor a detailed description and experimental results, please refer to our ICLR 2020 paper [ELECTRA: Pre-training Text Encoders as Discriminators Rather Than Generators](https://openreview.net/pdf?id=r1xMH1BtvB).\n\nThis repository contains code to pre-train ELECTRA, including small ELECTRA models on a single GPU. It also supports fine-tuning ELECTRA on downstream tasks including classification tasks (e.g,. [GLUE](https://gluebenchmark.com/)), QA tasks (e.g., [SQuAD](https://rajpurkar.github.io/SQuAD-explorer/)), and sequence tagging tasks (e.g., [text chunking](https://www.clips.uantwerpen.be/conll2000/chunking/)).\n\nThis repository also contains code for **Electric**, a version of ELECTRA inspired by [energy-based models](http://yann.lecun.com/exdb/publis/pdf/lecun-06.pdf). Electric provides a more principled view of ELECTRA as a \"negative sampling\" [cloze model](https://en.wikipedia.org/wiki/Cloze_test). It can also efficiently produce [pseudo-likelihood scores](https://arxiv.org/pdf/1910.14659.pdf) for text, which can be used to re-rank the outputs of speech recognition or machine translation systems. For details on Electric, please refer to out EMNLP 2020 paper [Pre-Training Transformers as Energy-Based Cloze Models](https://www.aclweb.org/anthology/2020.emnlp-main.20.pdf).\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9768905022788237,
        0.8886819592537577
      ],
      "excerpt": "The models were trained on uncased English text. They correspond to ELECTRA-Small++, ELECTRA-Base++, ELECTRA-1.75M  in our paper. We hope to release other models, such as multilingual models, in the future. \nOn GLUE, ELECTRA-Large scores slightly better than ALBERT/XLNET, ELECTRA-Base scores better than BERT-Large, and ELECTRA-Small scores slightly worst than TinyBERT (but uses no distillation). See the expected results section below for detailed performance numbers. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8659667313227625,
        0.910509352061994,
        0.991662564952471
      ],
      "excerpt": "3. Increase the learning rate to account for the linear learning rate decay. For example, to start with a learning rate of 2e-4 you should set the learning_rate hparam to 2e-4 * (4e6 + 10000) / 10000. \n4. For ELECTRA-Small, you also need to specifiy \"generator_hidden_size\": 1.0 in the hparams because we did not use a small generator for that model. \nThese instructions pre-train a small ELECTRA model (12 layers, 256 hidden size). Unfortunately, the data we used in the paper is not publicly available, so we will use the OpenWebTextCorpus released by Aaron Gokaslan and Vanya Cohen instead. The fully-trained model (~4 days on a v100 GPU) should perform roughly in between GPT and BERT-Base in terms of GLUE performance. By default the model is trained on length-128 sequences, so it is not suitable for running on question answering. See the \"expected results\" section below for more details on model performance. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8575732319496469
      ],
      "excerpt": "to train a small ELECTRA model for 1 million steps on the data. This takes slightly over 4 days on a Tesla V100 GPU. However, the model should achieve decent results after 200k steps (10 hours of training on the v100 GPU). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9791052843397448,
        0.9440748520153299,
        0.885895192122379
      ],
      "excerpt": "\"model_size\": one of \"small\", \"base\", or \"large\": determines the size of the model \n\"electra_objective\": false trains a model with masked language modeling instead of replaced token detection (essentially BERT with dynamic masking and no next-sentence prediction). \n\"num_train_steps\": n controls how long the model is pre-trained for. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9589813136688208,
        0.955089993051123,
        0.8913306860441469
      ],
      "excerpt": "See configure_pretraining.py for the full set of supported hyperparameters. \nTo evaluate the model on a downstream task, see the below finetuning instructions. To evaluate the generator/discriminator on the openwebtext data run python3 run_pretraining.py --data-dir $DATA_DIR --model-name electra_small_owt --hparams '{\"do_train\": false, \"do_eval\": true}'. This will print out eval metrics such as the accuracy of the generator and discriminator, and also writing the metrics out to data-dir/model-name/results. \nUse run_finetuning.py to fine-tune and evaluate an ELECTRA model on a downstream NLP task. It expects three arguments: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9262312444315677
      ],
      "excerpt": "\"model_size\": one of \"small\", \"base\", or \"large\": determines the size of the model; you must set this to the same size as the pre-trained model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8723099170275076
      ],
      "excerpt": "Or fine-tune a small model pre-trained using the above instructions on CoLA. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9414485037899769
      ],
      "excerpt": "The code supports SQuAD 1.1 and 2.0, as well as datasets in the 2019 MRQA shared task \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9543134218036913
      ],
      "excerpt": "This repository uses the official evaluation code released by the SQuAD authors and the MRQA shared task to compute metrics \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8029101619325559
      ],
      "excerpt": "The easiest way to run on a new task is to implement a new finetune.task.Task, add it to finetune.task_builder.py, and then use run_finetuning.py as normal. For classification/qa/sequence tagging, you can inherit from a finetune.classification.classification_tasks.ClassificationTask, finetune.qa.qa_tasks.QATask, or finetune.tagging.tagging_tasks.TaggingTask. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9722188351690259
      ],
      "excerpt": "Here are expected results for ELECTRA on various tasks (test set for chunking, dev set for the other tasks). Note that variance in fine-tuning can be quite large, so for some tasks you may see big fluctuations in scores when fine-tuning from the same checkpoint multiple times. The below scores show median performance over a large number of random seeds.  ELECTRA-Small/Base/Large are our released models. ELECTRA-Small-OWT is the OpenWebText-trained model from above (it performs a bit worse than ELECTRA-Small due to being trained for less time and on a smaller dataset). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8688443365752754
      ],
      "excerpt": "See here for losses / training curves of the models during pre-training. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "ELECTRA: Pre-training Text Encoders as Discriminators Rather Than Generators",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/google-research/electra/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 289,
      "date": "Wed, 22 Dec 2021 22:19:05 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/google-research/electra/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "google-research/electra",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Get a pre-trained ELECTRA model either by training your own (see pre-training instructions above), or downloading the release ELECTRA weights and unziping them under `$DATA_DIR/models` (e.g., you should have a directory`$DATA_DIR/models/electra_large` if you are using the large model).\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Place a vocabulary file in `$DATA_DIR/vocab.txt`. Our ELECTRA models all used the exact same vocabulary as English uncased BERT, which you can download [here](https://storage.googleapis.com/electra-data/vocab.txt).\n2. Download the [OpenWebText](https://skylion007.github.io/OpenWebTextCorpus/) corpus (12G) and extract it  (i.e., run `tar xf openwebtext.tar.xz`). Place it in `$DATA_DIR/openwebtext`.\n3. Run `python3 build_openwebtext_pretraining_dataset.py --data-dir $DATA_DIR --num-processes 5`. It pre-processes/tokenizes the data and outputs examples as [tfrecord](https://www.tensorflow.org/tutorials/load_data/tfrecord) files under `$DATA_DIR/pretrain_tfrecords`. The tfrecords require roughly 30G of disk space.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8575401928070079
      ],
      "excerpt": "Download the CoNLL-2000 text chunking dataset from here and put it under $DATA_DIR/finetuning_data/chunk/(train|dev).txt. Then run \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.912038732196584
      ],
      "excerpt": "| Model | Layers | Hidden Size | Params | GLUE score (test set) | Download | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8511806179478854,
        0.9129068098894251
      ],
      "excerpt": "Use build_pretraining_dataset.py to create a pre-training dataset from a dump of raw text. It has the following arguments: \n--corpus-dir: A directory containing raw text files to turn into ELECTRA examples. A text file can contain multiple documents with empty lines separating them. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9044445043405785,
        0.8725614274844324
      ],
      "excerpt": "--output-dir: Where to write out ELECTRA examples. \n--max-seq-length: The number of tokens per example (128 by default). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8668567202276953,
        0.8206651711792948
      ],
      "excerpt": "--hparams (optional): a JSON dict or path to a JSON file containing model hyperparameters, data paths, etc. See configure_pretraining.py for the supported hyperparameters. \nIf training is halted, re-running the run_pretraining.py with the same arguments will continue the training where it left off. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9480791974006706
      ],
      "excerpt": "Run python3 run_pretraining.py --data-dir $DATA_DIR --model-name electra_small_owt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8604533817448382
      ],
      "excerpt": "To customize the training, add --hparams '{\"hparam1\": value1, \"hparam2\": value2, ...}' to the run command. --hparams can also be a path to a .json file containing the hyperparameters. Some particularly useful options: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8488825391935262
      ],
      "excerpt": "To evaluate the model on a downstream task, see the below finetuning instructions. To evaluate the generator/discriminator on the openwebtext data run python3 run_pretraining.py --data-dir $DATA_DIR --model-name electra_small_owt --hparams '{\"do_train\": false, \"do_eval\": true}'. This will print out eval metrics such as the accuracy of the generator and discriminator, and also writing the metrics out to data-dir/model-name/results. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.887540213930484,
        0.8268432050311249,
        0.8734846968343648
      ],
      "excerpt": "--model-name: a name of the pre-trained model: the pre-trained weights should exist in data-dir/models/model-name. \n--hparams: a JSON dict containing model hyperparameters, data paths, etc. (e.g., --hparams '{\"task_names\": [\"rte\"], \"model_size\": \"base\", \"learning_rate\": 1e-4, ...}'). See configure_pretraining.py for the supported hyperparameters.  Instead of a dict, this can also be a path to a .json file containing the hyperparameters. You must specify the \"task_names\" and \"model_size\" (see examples below). \nEval metrics will be saved in data-dir/model-name/results and model weights will be saved in data-dir/model-name/finetuning_models by default. Evaluation is done on the dev set by default. To customize the training, add --hparams '{\"hparam1\": value1, \"hparam2\": value2, ...}' to the run command. Some particularly useful options: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8906158552508522
      ],
      "excerpt": "\"do_train\" and \"do_eval\": train and/or evaluate a model (both are set to true by default). For using \"do_eval\": true with \"do_train\": false, you need to specify the init_checkpoint, e.g., python3 run_finetuning.py --data-dir $DATA_DIR --model-name electra_base --hparams '{\"model_size\": \"base\", \"task_names\": [\"mnli\"], \"do_train\": false, \"do_eval\": true, \"init_checkpoint\": \"&lt;data-dir&gt;/models/electra_base/finetuning_models/mnli_model_1\"}' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8176202512759123,
        0.8481585896318304,
        0.8992474819756389
      ],
      "excerpt": "Download the GLUE data by running this script. Set up the data by running mv CoLA cola &amp;&amp; mv MNLI mnli &amp;&amp; mv MRPC mrpc &amp;&amp; mv QNLI qnli &amp;&amp; mv QQP qqp &amp;&amp; mv RTE rte &amp;&amp; mv SST-2 sst &amp;&amp; mv STS-B sts &amp;&amp; mv diagnostic/diagnostic.tsv mnli &amp;&amp; mkdir -p $DATA_DIR/finetuning_data &amp;&amp; mv * $DATA_DIR/finetuning_data. \nThen run run_finetuning.py. For example, to fine-tune ELECTRA-Base  on MNLI \npython3 run_finetuning.py --data-dir $DATA_DIR --model-name electra_base --hparams '{\"model_size\": \"base\", \"task_names\": [\"mnli\"]}' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9128514513027959
      ],
      "excerpt": "python3 run_finetuning.py --data-dir $DATA_DIR --model-name electra_small_owt --hparams '{\"model_size\": \"small\", \"task_names\": [\"cola\"]}' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8040601209534189,
        0.821030001856061,
        0.8433262872653459,
        0.8792445821351466,
        0.8992474819756389
      ],
      "excerpt": "Squad 1.1: Download the train and dev datasets and move them under $DATA_DIR/finetuning_data/squadv1/(train|dev).json \nSquad 2.0: Download the datasets from the SQuAD Website and move them under $DATA_DIR/finetuning_data/squad/(train|dev).json \nMRQA tasks: Download the data from here. Move the data to $DATA_DIR/finetuning_data/(newsqa|naturalqs|triviaqa|searchqa)/(train|dev).jsonl. \nThen run (for example) \npython3 run_finetuning.py --data-dir $DATA_DIR --model-name electra_base --hparams '{\"model_size\": \"base\", \"task_names\": [\"squad\"]}' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9224338665741352,
        0.8992474819756389
      ],
      "excerpt": "Download the CoNLL-2000 text chunking dataset from here and put it under $DATA_DIR/finetuning_data/chunk/(train|dev).txt. Then run \npython3 run_finetuning.py --data-dir $DATA_DIR --model-name electra_base --hparams '{\"model_size\": \"base\", \"task_names\": [\"chunk\"]}' \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8374648797375805
      ],
      "excerpt": "See here for losses / training curves of the models during pre-training. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/google-research/electra/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'\\n                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "ELECTRA",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "electra",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "google-research",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/google-research/electra/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Python 3\n* [TensorFlow](https://www.tensorflow.org/) 1.15 (although we hope to support TensorFlow 2.0 at a future date)\n* [NumPy](https://numpy.org/)\n* [scikit-learn](https://scikit-learn.org/stable/) and [SciPy](https://www.scipy.org/) (for computing some evaluation metrics).\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1941,
      "date": "Wed, 22 Dec 2021 22:19:05 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "nlp",
      "deep-learning",
      "tensorflow"
    ],
    "technique": "GitHub API"
  }
}