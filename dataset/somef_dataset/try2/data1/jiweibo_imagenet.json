{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[PyTorch Examples](https://github.com/pytorch/examples/tree/master/imagenet)\n\n[AlexNet](https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf)\n\n[VGG](https://arxiv.org/abs/1409.1556)\n\n[ResNet](https://arxiv.org/abs/1512.03385)\n\n[SqueezeNet](https://arxiv.org/abs/1602.07360)\n\n[DenseNet](https://arxiv.org/pdf/1608.06993.pdf)\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1409.1556",
      "https://arxiv.org/abs/1512.03385",
      "https://arxiv.org/abs/1602.07360"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8428182282926905
      ],
      "excerpt": "The default learning rate schedule starts at 0.01 and decays by a factor of 10 every 30 epochs. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jiweibo/ImageNet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-11-15T09:07:48Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-16T06:42:18Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9561146035529131
      ],
      "excerpt": "This implements training of popular model architectures, such as AlexNet, SqueezeNet, ResNet, DenseNet and VGG on the ImageNet dataset(Now we supported alexnet, vgg, resnet, squeezenet, densenet). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8151980291508301,
        0.9774679757674658
      ],
      "excerpt": "The default learning rate schedule starts at 0.01 and decays by a factor of 10 every 30 epochs. \nThe results of a single model on ILSVRC-2012 validation set. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "        <th>Model</th> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924212690395703
      ],
      "excerpt": "        <th>Vgg16</th> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "This implements training of popular model architectures, such as AlexNet, ResNet and VGG on the ImageNet dataset(Now we supported alexnet, vgg, resnet, squeezenet, densenet)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jiweibo/imagenet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 55,
      "date": "Tue, 21 Dec 2021 07:33:45 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jiweibo/ImageNet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "jiweibo/ImageNet",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/jiweibo/imagenet/master/valprep.sh"
    ],
    "technique": "File Exploration"
  },
  "invocation": [
    {
      "confidence": [
        0.9056046740740866,
        0.9564982163984996
      ],
      "excerpt": "To train a model, run main.py with the desired model architecture and the path to the ImageNet dataset: \npython main.py [imagenet-folder with train and val folders] -a alexnet --lr 0.01 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jiweibo/ImageNet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\r\\n\\r\\nCopyright (c) 2017 Ji Weibo\\r\\n\\r\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\r\\nof this software and associated documentation files (the \"Software\"), to deal\\r\\nin the Software without restriction, including without limitation the rights\\r\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\r\\ncopies of the Software, and to permit persons to whom the Software is\\r\\nfurnished to do so, subject to the following conditions:\\r\\n\\r\\nThe above copyright notice and this permission notice shall be included in all\\r\\ncopies or substantial portions of the Software.\\r\\n\\r\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\nSOFTWARE.\\r\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "ImageNet",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "ImageNet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "jiweibo",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jiweibo/ImageNet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* PyTorch 0.4.0\n* cuda && cudnn\n* Download the ImageNet dataset and move validation images to labeled subfolders\n  * To do this, you can use the following script:\n  [https://raw.githubusercontent.com/soumith/imagenetloader.torch/master/valprep.sh](https://raw.githubusercontent.com/soumith/imagenetloader.torch/master/valprep.sh)\n \n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 178,
      "date": "Tue, 21 Dec 2021 07:33:45 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "pytorch",
      "python",
      "imagenet",
      "alexnet",
      "squeezenet",
      "densenet-pytorch",
      "densenet",
      "resnet",
      "vgg",
      "model-architecture"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\nusage: main.py [-h] [-a ARCH] [--epochs N] [--start-epoch N] [-b N] [--lr LR]\n               [--momentum M] [--weight-decay W] [-j N] [-m] [-p]\n               [--print-freq N] [--resume PATH] [-e]\n               DIR\n\nPyTorch ImageNet Training\n\npositional arguments:\n  DIR                   path to dataset\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a ARCH, --arch ARCH  model architecture: alexnet | squeezenet1_0 |\n                        squeezenet1_1 | densenet121 | densenet169 |\n                        densenet201 | densenet201 | densenet161 | vgg11 |\n                        vgg11_bn | vgg13 | vgg13_bn | vgg16 | vgg16_bn | vgg19\n                        | vgg19_bn | resnet18 | resnet34 | resnet50 |\n                        resnet101 | resnet152 (default: alexnet)\n  --epochs N            numer of total epochs to run\n  --start-epoch N       manual epoch number (useful to restarts)\n  -b N, --batch-size N  mini-batch size (default: 256)\n  --lr LR, --learning-rate LR\n                        initial learning rate\n  --momentum M          momentum\n  --weight-decay W, --wd W\n                        Weight decay (default: 1e-4)\n  -j N, --workers N     number of data loading workers (default: 4)\n  -m, --pin-memory      use pin memory\n  -p, --pretrained      use pre-trained model\n  --print-freq N, -f N  print frequency (default: 10)\n  --resume PATH         path to latest checkpoitn, (default: None)\n  -e, --evaluate        evaluate model on validation set\n\n\n```\n\n\n",
      "technique": "Header extraction"
    }
  ]
}