{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1810.04805",
      "https://arxiv.org/abs/1901.02860",
      "https://arxiv.org/abs/1906.08237",
      "https://arxiv.org/abs/1901.07291"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "At the moment, there is no paper associated to PyTorch-Transformers but we are working on preparing one. In the meantime, please include a mention of the library and a link to the present repository if you use this work in a published or open-source project.\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/samwisegamjeee/pytorch-transformers",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-08-01T12:42:54Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-08-01T12:42:57Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9715240634184349,
        0.9199185009812905,
        0.9788134372186559,
        0.8356071331431575,
        0.8530797045319042,
        0.8935326417771288,
        0.9410141275101865,
        0.9594426707598807,
        0.9558361826889944
      ],
      "excerpt": "PyTorch-Transformers (formerly known as pytorch-pretrained-bert) is a library of state-of-the-art pre-trained models for Natural Language Processing (NLP). \nThe library currently contains PyTorch implementations, pre-trained model weights, usage scripts and conversion utilities for the following models: \nBERT (from Google) released with the paper BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding by Jacob Devlin, Ming-Wei Chang, Kenton Lee and Kristina Toutanova. \nGPT (from OpenAI) released with the paper Improving Language Understanding by Generative Pre-Training by Alec Radford, Karthik Narasimhan, Tim Salimans and Ilya Sutskever. \nGPT-2 (from OpenAI) released with the paper Language Models are Unsupervised Multitask Learners by Alec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei and Ilya Sutskever. \nTransformer-XL (from Google/CMU) released with the paper Transformer-XL: Attentive Language Models Beyond a Fixed-Length Context by Zihang Dai, Zhilin Yang, Yiming Yang, Jaime Carbonell, Quoc V. Le, Ruslan Salakhutdinov. \nXLNet (from Google/CMU) released with the paper \u200bXLNet: Generalized Autoregressive Pretraining for Language Understanding by Zhilin Yang, Zihang Dai, Yiming Yang, Jaime Carbonell, Ruslan Salakhutdinov, Quoc V. Le. \nXLM (from Facebook) released together with the paper Cross-lingual Language Model Pretraining by Guillaume Lample and Alexis Conneau. \nThese implementations have been tested on several datasets (see the example scripts) and should match the performances of the original implementations (e.g. ~93 F1 on SQuAD for BERT Whole-Word-Masking, ~88 F1 on RocStories for OpenAI GPT, ~18.3 perplexity on WikiText 103 for Transformer-XL, ~0.916 Peason R coefficient on STS-B for XLNet). You can find more details on the performances in the Examples section of the documentation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8033877917612252
      ],
      "excerpt": "| Migrating from pytorch-pretrained-bert to pytorch-transformers | Migrating your code from pytorch-pretrained-bert to pytorch-transformers | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8621329858715573
      ],
      "excerpt": "You can run the tests from the root of the cloned repository with the commands: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8889913141350007
      ],
      "excerpt": ": for 6 transformer architectures and 27 pretrained weights. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9484522044348984,
        0.9197792449074065
      ],
      "excerpt": ": Let's encode some text in a sequence of hidden-states using each model: \nfor model_class, tokenizer_class, pretrained_weights in MODELS: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "    model = model_class.from_pretrained(pretrained_weights) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246861231539446
      ],
      "excerpt": "input_ids = torch.tensor([tokenizer.encode(\"Here is some text to encode\")]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8505601935960453
      ],
      "excerpt": ": Note that additional weights added for fine-tuning are only initialized \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for model_class in BERT_MODEL_CLASSES: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "    model = model_class.from_pretrained('bert-base-uncased') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = model_class.from_pretrained(pretrained_weights, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9433531186471941,
        0.860059181823877,
        0.9394034668929406
      ],
      "excerpt": "input_ids = torch.tensor([tokenizer.encode(\"Let's see all hidden-states and attentions on this text\")]) \nall_hidden_states, all_attentions = model(input_ids)[-2:] \n: Models are compatible with Torchscript \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.901529589189769
      ],
      "excerpt": ": Simple serialization for models and tokenizers \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9037471024162802
      ],
      "excerpt": "The General Language Understanding Evaluation (GLUE) benchmark is a collection of nine sentence- or sentence-pair language understanding tasks for evaluating and analyzing natural language understanding systems. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8942357458162394,
        0.9056812380967819
      ],
      "excerpt": "This example code fine-tunes XLNet on the STS-B corpus using parallel training on a server with 4 V100 GPUs. \nParallel training is a simple way to use several GPUs (but is slower and less flexible than distributed training, see below). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8528602602330617,
        0.881043968958612
      ],
      "excerpt": "On this machine we thus have a batch size of 32, please increase gradient_accumulation_steps to reach the same batch size if you have a smaller machine. These hyper-parameters should result in a Pearson correlation coefficient of +0.917 on the development set. \nThis example code fine-tunes the Bert Whole Word Masking model on the Microsoft Research Paraphrase Corpus (MRPC) corpus using distributed training on 8 V100 GPUs to reach a F1 > 92. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9329656774088492
      ],
      "excerpt": "This example code fine-tunes BERT on the SQuAD dataset using distributed training on 8 V100 GPUs and Bert Whole Word Masking uncased model to reach a F1 > 93 on SQuAD: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8971910943995131
      ],
      "excerpt": "This is the model provided as bert-large-uncased-whole-word-masking-finetuned-squad. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9463144365198662
      ],
      "excerpt": "Here is how to run the script with the small version of OpenAI GPT-2 model: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8930953170361479,
        0.9859351480726882,
        0.9802753442236812
      ],
      "excerpt": "Here is a quick summary of what you should take care of when migrating from pytorch-pretrained-bert to pytorch-transformers \nThe main breaking change when migrating from pytorch-pretrained-bert to pytorch-transformers is that the models forward method always outputs a tuple with various elements depending on the model and the configuration parameters. \nThe exact content of the tuples for each model are detailed in the models' docstrings and the documentation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9276179376307367
      ],
      "excerpt": "Here is a pytorch-pretrained-bert to pytorch-transformers conversion example for a BertForSequenceClassification classification model: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8695539313589236,
        0.860059181823877
      ],
      "excerpt": ": Let's load our model \nmodel = BertForSequenceClassification.from_pretrained('bert-base-uncased') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490530017172825
      ],
      "excerpt": ": In pytorch-transformers you can also have access to the logits: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.816751680829079
      ],
      "excerpt": "Breaking change in the from_pretrained()method: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9742645152428853,
        0.8290245201609591
      ],
      "excerpt": "The additional *input and **kwargs arguments supplied to the from_pretrained() method used to be directly passed to the underlying model's class __init__() method. They are now used to update the model configuration attribute instead which can break derived model classes build based on the previous BertForSequenceClassification examples. We are working on a way to mitigate this breaking change in #866 by forwarding the the model __init__() method (i) the provided positional arguments and (ii) the keyword arguments which do not match any configuratoin class attributes. \nAlso, while not a breaking change, the serialization methods have been standardized and you probably should switch to the new method save_pretrained(save_directory) if you were using any other serialization method before. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = BertForSequenceClassification.from_pretrained('bert-base-uncased') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9849878697352159,
        0.9986316489938961
      ],
      "excerpt": ":#:#: Do some stuff to our model and tokenizer \n: Ex: add new tokens to the vocabulary and embeddings of our model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9701598174361984,
        0.860059181823877
      ],
      "excerpt": ":#:#: Reload the model and the tokenizer \nmodel = BertForSequenceClassification.from_pretrained('./my_saved_model_directory/') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8397619951764831,
        0.87573421900976,
        0.9209017738717474
      ],
      "excerpt": "The new optimizer AdamW matches PyTorch Adam optimizer API. \nThe schedules are now standard PyTorch learning rate schedulers and not part of the optimizer anymore. \nHere is a conversion examples from BertAdam with a linear warmup and decay schedule to AdamW and the same schedule: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8620007613560474
      ],
      "excerpt": "for batch in train_data: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.949839781480022
      ],
      "excerpt": ":#:#: In PyTorch-Transformers, optimizer and schedules are splitted and instantiated like this: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8620007613560474
      ],
      "excerpt": "for batch in train_data: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "\ud83d\udc7e A library of state-of-the-art pretrained models for Natural Language Processing (NLP)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/samwisegamjeee/pytorch-transformers/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 08:41:28 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/samwisegamjeee/pytorch-transformers/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "samwisegamjeee/pytorch-transformers",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/samwisegamjeee/pytorch-transformers/master/docker/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/samwisegamjeee/pytorch-transformers/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/samwisegamjeee/pytorch-transformers/master/notebooks/Comparing-TF-and-PT-models-SQuAD.ipynb",
      "https://raw.githubusercontent.com/samwisegamjeee/pytorch-transformers/master/notebooks/Comparing-TF-and-PT-models.ipynb",
      "https://raw.githubusercontent.com/samwisegamjeee/pytorch-transformers/master/notebooks/Comparing-PT-and-TF-models.ipynb",
      "https://raw.githubusercontent.com/samwisegamjeee/pytorch-transformers/master/notebooks/Comparing-TF-and-PT-models-MLM-NSP.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This repo is tested on Python 2.7 and 3.5+ (examples are tested only on python 3.5+) and PyTorch 0.4.1 to 1.1.0\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9910659893881812
      ],
      "excerpt": "| Installation | How to install the package | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9519681244224086
      ],
      "excerpt": "| Migrating from pytorch-pretrained-bert to pytorch-transformers | Migrating your code from pytorch-pretrained-bert to pytorch-transformers | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9709706075148068,
        0.9995486579735738
      ],
      "excerpt": "PyTorch-Transformers can be installed by pip as follows: \npip install pytorch-transformers \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9855251805776313
      ],
      "excerpt": "pip install [--editable] . \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9897810013387345
      ],
      "excerpt": "These tests can be run using pytest (install pytest if needed with pip install pytest). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.837644081528339
      ],
      "excerpt": ": PyTorch-Transformers has a unified API \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8213223220954162
      ],
      "excerpt": "tokenizer.save_pretrained('./directory/to/save/')  #: save \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9720524808839848
      ],
      "excerpt": "You should also install the additional packages required by the examples: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.989546273021627
      ],
      "excerpt": "pip install -r ./examples/requirements.txt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8446363609937482
      ],
      "excerpt": ": In pytorch-transformers you can also have access to the logits: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9322609392449874
      ],
      "excerpt": "scheduler = WarmupLinearSchedule(optimizer, warmup_steps=num_warmup_steps, t_total=num_total_steps)  #: PyTorch scheduler \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.903531602638598
      ],
      "excerpt": "| Quick tour: Usage | Tokenizers & models usage: Bert and GPT-2 | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8193126040847027
      ],
      "excerpt": "A series of tests is included for the library and the example scripts. Library tests can be found in the tests folder and examples tests in the examples folder. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8630645762968261,
        0.8757250914833031
      ],
      "excerpt": "python -m pytest -sv ./pytorch_transformers/tests/ \npython -m pytest -sv ./examples/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from pytorch_transformers import * \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8313987326114234
      ],
      "excerpt": "    #: Load pretrained model/tokenizer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8359299706379749
      ],
      "excerpt": "#: Encode text \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8313987326114234
      ],
      "excerpt": "    #: Load pretrained model/tokenizer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984,
        0.8594142235991984
      ],
      "excerpt": "                                    output_hidden_states=True, \n                                    output_attentions=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8779795841842539
      ],
      "excerpt": "model = model_class.from_pretrained(pretrained_weights, torchscript=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8421839381076783
      ],
      "excerpt": ": SOTA examples for GLUE, SQUAD, text generation... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8608097421341938
      ],
      "excerpt": "Here are three quick usage examples for these scripts: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9563277988753164
      ],
      "excerpt": "python ./examples/run_glue.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8122137593338149
      ],
      "excerpt": "The dev set results will be present within the text file 'eval_results.txt' in the specified output_dir. In case of MNLI, since there are two separate dev sets, matched and mismatched, there will be a separate output folder called '/tmp/MNLI-MM/' in addition to '/tmp/MNLI/'. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9563277988753164
      ],
      "excerpt": "python ./examples/run_glue.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8390618001787894
      ],
      "excerpt": "python -m torch.distributed.launch --nproc_per_node 8 ./examples/run_glue.py   \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8390618001787894
      ],
      "excerpt": "python -m torch.distributed.launch --nproc_per_node=8 ./examples/run_squad.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8445146240188418
      ],
      "excerpt": "    --train_file $SQUAD_DIR/train-v1.1.json \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8477155098953351
      ],
      "excerpt": "python $SQUAD_DIR/evaluate-v1.1.py $SQUAD_DIR/dev-v1.1.json ../models/wwm_uncased_finetuned_squad/predictions.json \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9563277988753164
      ],
      "excerpt": "python ./examples/run_generation.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8211967361428026
      ],
      "excerpt": "Here is an example: \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/samwisegamjeee/pytorch-transformers/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'\\n                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "\ud83d\udc7e PyTorch-Transformers",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pytorch-transformers",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "samwisegamjeee",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/samwisegamjeee/pytorch-transformers/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 08:41:28 GMT"
    },
    "technique": "GitHub API"
  }
}