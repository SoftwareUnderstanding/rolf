{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9201896952023112
      ],
      "excerpt": ".. image:: https://readthedocs.org/projects/sparsemax/badge/?version=latest \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8709273166115206,
        0.8715509475085587
      ],
      "excerpt": ".. image:: https://pyup.io/repos/github/aced125/sparsemax/shield.svg \n     :target: https://pyup.io/repos/github/aced125/sparsemax/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9944484218006108
      ],
      "excerpt": "ProtoAttend (https://arxiv.org/pdf/1902.06292v4.pdf). \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/aced125/sparsemax",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-05-25T13:28:35Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-02T02:51:38Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9590395831846346
      ],
      "excerpt": "Sparsemax is an alternative to softmax when one wants to generate \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8776462716702602,
        0.8194542778459696
      ],
      "excerpt": "Backward pass equations implemented natively as a :code:torch.autograd.Function, resulting in 30% speedup, compared to the above repository. \nThe package is easily pip-installable (no need to copy the code). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8336482785686815
      ],
      "excerpt": "The operator forward and backward passes are tested (backward-pass check due to :code:torch.autograd.gradcheck \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": ":boom: A PyTorch Implementation of the Sparsemax operator (https://arxiv.org/pdf/1803.09820.pdf)",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://sparsemax.readthedocs.io/",
      "technique": "Regular expression"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/aced125/sparsemax/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Thu, 23 Dec 2021 20:36:22 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/aced125/sparsemax/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "aced125/sparsemax",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/aced125/sparsemax/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": ".. code-block:: bash\n\n   pip install -U sparsemax\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8373490594817731,
        0.9468523482201536
      ],
      "excerpt": ".. image:: https://img.shields.io/pypi/v/sparsemax.svg \n        :target: https://pypi.python.org/pypi/sparsemax \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8328635853330358
      ],
      "excerpt": ".. image:: https://readthedocs.org/projects/sparsemax/badge/?version=latest \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.964212650325266
      ],
      "excerpt": "This repo borrows heavily from: https://github.com/KrisKorrel/sparsemax-pytorch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8154502747834947
      ],
      "excerpt": "The package is easily pip-installable (no need to copy the code). \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from sparsemax import Sparsemax \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/aced125/sparsemax/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Makefile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020, Laksh Aithani\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n\\n'",
    "technique": "File Exploration"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "sparsemax",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "aced125",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/aced125/sparsemax/blob/master/README.rst",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 11,
      "date": "Thu, 23 Dec 2021 20:36:22 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Use as if it was :code:`nn.Softmax()`! Nice and simple.\n\n.. code-block:: python\n\n    from sparsemax import Sparsemax\n    import torch\n    import torch.nn as nn\n\n    sparsemax = Sparsemax(dim=-1)\n    softmax = torch.nn.Softmax(dim=-1)\n\n    logits = torch.randn(2, 3, 5)\n    logits.requires_grad = True\n    print(\"\\nLogits\")\n    print(logits)\n\n    softmax_probs = softmax(logits)\n    print(\"\\nSoftmax probabilities\")\n    print(softmax_probs)\n\n    sparsemax_probs = sparsemax(logits)\n    print(\"\\nSparsemax probabilities\")\n    print(sparsemax_probs)\n\n\n",
      "technique": "Header extraction"
    }
  ]
}