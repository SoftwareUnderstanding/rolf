{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1605.07648",
      "https://arxiv.org/abs/1603.09382, 2016.\n\n### CIFAR-10\n\nTraining as reported by the paper with SGD for 400 epochs starting with 0.02 learning rate and reducing it by 10x each time it reaches half of the remaining epochs (200, 300, 350, 375). Training with Adam is with default parameters.\n\n![](https://raw.githubusercontent.com/snf/keras-fractalnet/master/doc/c10_loss_train.png)\n\n\n### CIFAR-100\n\nTrained with SGD (as with CIFAR-10) and Adam with default parameters:\n\n![](https://raw.githubusercontent.com/snf/keras-fractalnet/master/doc/c100_loss_train.png)\n\n## Paper\n\nhttps://arxiv.org/abs/ [FractalNet: Ultra-Deep Neural Networks without Residuals](https://arxiv.org/abs/1605.07648)\n\n    @article{larsson2016fractalnet,\n      title={FractalNet: Ultra-Deep Neural Networks without Residuals",
      "https://arxiv.org/abs/ [FractalNet: Ultra-Deep Neural Networks without Residuals](https://arxiv.org/abs/1605.07648)\n\n    @article{larsson2016fractalnet,\n      title={FractalNet: Ultra-Deep Neural Networks without Residuals",
      "https://arxiv.org/abs/1605.07648"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{larsson2016fractalnet,\n  title={FractalNet: Ultra-Deep Neural Networks without Residuals},\n  author={Larsson, Gustav and Maire, Michael and Shakhnarovich, Gregory},\n  journal={arXiv preprint arXiv:1605.07648},\n  year={2016}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9896534279187987
      ],
      "excerpt": "FractalNet (paper w/SGD)                   | 10.18 | 35.34 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9999991490260737
      ],
      "excerpt": "[1] G. Huang, Y. Sun, Z. Liu, D. Sedra, and K. Weinberger.  Deep networks with stochastic depth. arXiv preprint arXiv:1603.09382, 2016. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.962435155057675,
        0.9863394707209803,
        0.9973638085240776,
        0.9999537354568557,
        0.9954488832581693
      ],
      "excerpt": "arXiv: FractalNet: Ultra-Deep Neural Networks without Residuals \n  title={FractalNet: Ultra-Deep Neural Networks without Residuals}, \n  author={Larsson, Gustav and Maire, Michael and Shakhnarovich, Gregory}, \n  journal={arXiv preprint arXiv:1605.07648}, \n  year={2016} \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/snf/keras-fractalnet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-06-23T19:07:57Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-08T09:31:18Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9713333660485005
      ],
      "excerpt": "I built this network as stated in the paper but fractals are done iterative instead of functional to avoid the extra complexity when merging the fractals. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9837662963753916,
        0.9733225211739641,
        0.9858819640789437,
        0.976080392720392,
        0.9928213554438776
      ],
      "excerpt": "In the paper, they state that the last Join layer of each block is switched with the MaxPooling layer because of convenience. I don't do it and finish each block with a Join->MaxPooling but it should not affect the model. \nAlso it's not clear how and where the Dropout should be used. I found an implementation of the network here by Larsson (one of the paper authors) and he adds it in each convolutional block (Convolution->Dropout->BatchNorm->ReLU). I implemented it the same way. \nFor testing the deepest column, the network is built with all the columns but the indicator for global drop-path is always set and the tensor with the paths is set to a constant array indicating which column is enabled. \nModel graph image of FractalNet(c=3, b=5) generated by Keras: link \nThis results are from the experiments with the code published here. The authors of the paper have not yet released a complete implementation of the network as of the publishing of this so I can't say what's different from theirs code. Also there is no kind of standardization, scaling or normalization across the dataset in these raw tests (which they may have used). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8150771532802734
      ],
      "excerpt": "Method | C10 | C100 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9749150982682073,
        0.8137602249276885
      ],
      "excerpt": "Training as reported by the paper with SGD for 400 epochs starting with 0.02 learning rate and reducing it by 10x each time it reaches half of the remaining epochs (200, 300, 350, 375). Training with Adam is with default parameters. \nTrained with SGD (as with CIFAR-10) and Adam with default parameters: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "FractalNet implementation in Keras: Ultra-Deep Neural Networks without Residuals",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/snf/keras-fractalnet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 40,
      "date": "Sun, 26 Dec 2021 08:21:44 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/snf/keras-fractalnet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "snf/keras-fractalnet",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.8293869119418764
      ],
      "excerpt": "Test error (%) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/snf/keras-fractalnet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'The MIT License (MIT)\\n\\nCopyright (c) 2016 Sebastian N. Fernandez\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "FractalNet implementation in Keras",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "keras-fractalnet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "snf",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/snf/keras-fractalnet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 156,
      "date": "Sun, 26 Dec 2021 08:21:44 GMT"
    },
    "technique": "GitHub API"
  }
}