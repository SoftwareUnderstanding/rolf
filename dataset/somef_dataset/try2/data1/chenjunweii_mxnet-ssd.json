{
  "citation": [
    {
      "confidence": [
        0.8444342525991423
      ],
      "excerpt": "| VGG16_reduced 300x300 | VOC07+12 trainval| VOC07 test| 77.8| fast | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8028046190715653
      ],
      "excerpt": "wget http://host.robots.ox.ac.uk/pascal/VOC/voc2012/VOCtrainval_11-May-2012.tar \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8109194328925066
      ],
      "excerpt": "tar -xvf VOCtrainval_11-May-2012.tar \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/chenjunweii/mxnet-ssd",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-12-17T00:59:29Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-12-17T01:03:41Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9341210378373819
      ],
      "excerpt": "SSD is an unified framework for object detection with a single network. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.995649733775079,
        0.9403334346166099
      ],
      "excerpt": "This is a re-implementation of original SSD which is based on caffe. The official \nrepository is available here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8718554370844985
      ],
      "excerpt": "This example is intended for reproducing the nice detector while fully utilize the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8808098437107397
      ],
      "excerpt": "* The result is almost identical to the original version. However, due to different implementation details, the results might differ slightly. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9147079964372326
      ],
      "excerpt": "Forward time only, data loading and drawing excluded.* \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9768833011532414
      ],
      "excerpt": "with the detection threshold to get more or less detections. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8119988180697673
      ],
      "excerpt": "* We are going to use `trainval` set in VOC2007/2012 as a common strategy. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8149906214697968
      ],
      "excerpt": "Use hard link instead of copy could save us a bit disk space. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8524255707577211
      ],
      "excerpt": ": note that a perfect training parameter set is yet to be discovered for multi-GPUs \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8321064376482818
      ],
      "excerpt": "This simply removes all loss layers, and attach a layer for merging results and non-maximum suppression. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.85714747078858
      ],
      "excerpt": "This is specifically modified to handle custom layer in caffe-ssd. Usage: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8974040727905973,
        0.8669345215902556
      ],
      "excerpt": "There is no guarantee that conversion will always work, but at least it's good for now. \nSince the new interface for composing network is introduced, the old models have inconsistent names for weights. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "mxnet-ssd",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/chenjunweii/mxnet-ssd/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 07:15:16 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/chenjunweii/mxnet-ssd/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "chenjunweii/mxnet-ssd",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/chenjunweii/mxnet-ssd/master/.ipynb_checkpoints/Untitled-checkpoint.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/chenjunweii/mxnet-ssd/master/init.sh",
      "https://raw.githubusercontent.com/chenjunweii/mxnet-ssd/master/tools/prepare_coco.sh",
      "https://raw.githubusercontent.com/chenjunweii/mxnet-ssd/master/tools/prepare_pascal.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9273956135108576
      ],
      "excerpt": "Update to the latest version according to caffe version, with 5% mAP increase. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8579449617583059,
        0.8175404183044511
      ],
      "excerpt": "will open a window that will display the camera output together with the detections. You can play \nwith the detection threshold to get more or less detections. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8272491559990689
      ],
      "excerpt": "* Download the PASCAL VOC dataset, skip this step if you already have one. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9842172039800472
      ],
      "excerpt": "cd /path/to/where_you_store_datasets/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9701125269659696,
        0.8819007017145146,
        0.9675226671353572
      ],
      "excerpt": ": cd /path/to/incubator-mxnet/example/ssd \nbash tools/prepare_pascal.sh \n: or if you are using windows \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9701125269659696
      ],
      "excerpt": ": cd /path/to/incubator-mxnet/example/ssd \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9701125269659696
      ],
      "excerpt": ": cd /path/to/incubator-mxnet/example/ssd \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9701125269659696
      ],
      "excerpt": ": cd /path/to/incubator-mxnet/example/ssd \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8058481250032264
      ],
      "excerpt": "Converter from caffe is available at /path/to/incubator-mxnet/example/ssd/tools/caffe_converter \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9512735648962175
      ],
      "excerpt": "cd /path/to/incubator-mxnet/example/ssd/tools/caffe_converter \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8646854274793416
      ],
      "excerpt": "|        Model          | Training data    | Test data |  mAP | Note | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8224118177918246
      ],
      "excerpt": "This example only covers training on Pascal VOC dataset. Other datasets should \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8556207548361155,
        0.9139581445967263
      ],
      "excerpt": "See example of dataset/pascal_voc.py for details. \n* Download the converted pretrained vgg16_reduced model here, unzip .param and .json files \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8090092352504654
      ],
      "excerpt": "python tools/prepare_dataset.py --dataset pascal --year 2007,2012 --set trainval --target ./data/train.lst \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8407651001510851
      ],
      "excerpt": "* Start training: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9107676762170533
      ],
      "excerpt": "Check `python train.py --help` for more training options. For example, if you have 4 GPUs, use: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9094328670417526
      ],
      "excerpt": "python train.py --gpus 0,1,2,3 --batch-size 32 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9199868900334766
      ],
      "excerpt": "python evaluate.py --gpus 0,1 --batch-size 128 --epoch 0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8672914567192442
      ],
      "excerpt": "python deploy.py --num-class 20 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8231671128734107
      ],
      "excerpt": "python convert_model.py deploy.prototxt name_of_pretrained_caffe_model.caffemodel ssd_converted \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8343431649223643
      ],
      "excerpt": "python demo.py --prefix ssd_converted --epoch 1 --deploy \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/chenjunweii/mxnet-ssd/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell",
      "Makefile",
      "Batchfile",
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "SSD: Single Shot MultiBox Object Detector",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "mxnet-ssd",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "chenjunweii",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/chenjunweii/mxnet-ssd/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 23 Dec 2021 07:15:16 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "![demo1](https://cloud.githubusercontent.com/assets/3307514/19171057/8e1a0cc4-8be0-11e6-9d8f-088c25353b40.png)\n![demo2](https://cloud.githubusercontent.com/assets/3307514/19171063/91ec2792-8be0-11e6-983c-773bd6868fa8.png)\n![demo3](https://cloud.githubusercontent.com/assets/3307514/19171086/a9346842-8be0-11e6-8011-c17716b22ad3.png)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "* You will need python modules: `cv2`, `matplotlib` and `numpy`.\nIf you use mxnet-python api, you probably have already got them.\nYou can install them via pip or package managers, such as `apt-get`:\n```\nsudo apt-get install python-opencv python-matplotlib python-numpy\n```\n\n* Build MXNet: Follow the official instructions\n```\n#: for Ubuntu/Debian\ncp make/config.mk ./config.mk\n#: enable cuda, cudnn if applicable\n```\nRemember to enable CUDA if you want to be able to train, since CPU training is\ninsanely slow. Using CUDNN is optional, but highly recommended.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "* Download the pretrained model: [`ssd_resnet50_0712.zip`](https://github.com/zhreshold/mxnet-ssd/releases/download/v0.6/resnet50_ssd_512_voc0712_trainval.zip), and extract to `model/` directory.\n\n* Run\n```\n#: cd /path/to/incubator-mxnet/example/ssd\n#: download the test images\npython data/demo/download_demo_images.py\n#: run the demo\npython demo.py --gpu 0\n#: play with examples:\npython demo.py --epoch 0 --images ./data/demo/dog.jpg --thresh 0.5\npython demo.py --cpu --network resnet50 --data-shape 512\n#: wait for library to load for the first time\n```\n* Check `python demo.py --help` for more options.\n\n",
      "technique": "Header extraction"
    }
  ]
}