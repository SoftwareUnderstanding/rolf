{
  "citation": [
    {
      "confidence": [
        0.9970499061229053
      ],
      "excerpt": "A. G. Howard, M. Zhu, B. Chen, D. Kalenichenko, W. Wang, T. Weyand, M. Andreetto, and H. Adam\\ \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/christophmeyer/longboard-pothole-detection",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-07-13T20:31:48Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-12T12:46:03Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9990297625754271
      ],
      "excerpt": "In this project, a model is trained to detect irregularities on the surface in front of a longboard to warn the rider by activating a piezo buzzer. The repository contains all code necessary to collect training data, train and run a model on an ESP32 CAM using TensorFlow Lite for Microcontrollers. It also contains the tflite version of a model that was trained on data that I collected and labeled.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9996072700993963
      ],
      "excerpt": "The idea for this project is to warn the rider to pay attention to the surface in front of them to avoid falling, but mostly the project is an excuse to play with the ESP32 CAM and TF Lite Micro :smiley:. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259,
        0.8979411005071259
      ],
      "excerpt": "Data Capture \nData Preprocessing \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9354160250134973
      ],
      "excerpt": "| USB-A -> micro USB cable  | 3 EUR | For connecting the UART adapter to the computer or the powerbank. |  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9358097254723593,
        0.9832049277590408
      ],
      "excerpt": "For a total of 40EUR (~50USD) you can get all the electronics parts for this project. Apart from those parts, your longboard and a computer with sdcard reader, you will need some means to mount the parts on your longboard. Here is how I did that: \nFor the ESP32 CAM and the camera, I came up with a contraption made of wood and tape:   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9954211567322461
      ],
      "excerpt": "For the UART adapter and buzzer I found it to be sufficient to tape them to the longboard, in case of the UART adapter I also used some foam for protection: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9894705024849237
      ],
      "excerpt": "For the IMU, I use the two screw holes on the MPU6050 board to screw it to a small piece of wood, which I then taped to the longboard with a strong double-sided tape. For protection, I then covered it with a piece of foam.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9805203226422722,
        0.984603792784184
      ],
      "excerpt": "The following image shows the longboard in inference configuration (with buzzer, no IMU). The powerbank is taped to the board at the back: \nThe pins of the ESP32 CAM need to be connected to the other components depending on the scenario (flashing a new binary/collecting data/running inference). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9139706448338056,
        0.8969843419690404
      ],
      "excerpt": "The OV2640 camera can be connected at all times, just plug the ribbon cable into its slot on the front of the ESP32 CAM.  \nWe use the UART adapter as power supply both when connected to the computer via USB and on the longboard. To set the UART adapters VCCIO output voltage to 5V (which I found to work very reliably), you need to set the small yellow jumper to 5V. Then the power lines can be connected: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8767024983338986
      ],
      "excerpt": "For the serial connection, two more jumper cables are needed: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8875667774842547,
        0.9497466370306841,
        0.8979411005071259,
        0.8193011831409186
      ],
      "excerpt": "Flashing a new binary: \nTo put the ESP32 CAM into flashing mode, GPIO 0 needs to be grounded (i.e. connected with a jumper to GND). \nCollecting data: \nIf you are not interested in capturing additional IMU data with the MPU6050, you only need to connect the power lines as described above. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8067931044582977
      ],
      "excerpt": "This of course means that you cannot use the serial connection in this configuration.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.820929274459055
      ],
      "excerpt": "Apart from connecting the power lines as described above, the KY-012 active piezo buzzer needs to be connected as follows: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8852393937180336
      ],
      "excerpt": "After successfully building and connecting everything as described above you can connect the UART adapter to your computer via USB. You might have to first set the right permissions for the device (it is the case for me on Ubuntu): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9524298437433427,
        0.9261873249580577
      ],
      "excerpt": "After flashing the data capture binary, connecting everything as described above, and inserting the sdcard, the ESP32 CAM concurrently takes pictures (and optionally IMU data) and writes it to the sdcard. If you have an MPU6050 connected and want to capture the IMU data as well, make sure to set the global record_imu_data in ./esp32_data_collection/main/main.cc to true before building. \nAfter each restart (trigger with the reset button or interrupt power supply) a new folder (with incrementing folder name) is created to which the data is written. On a successful initialization, the LED on the ESP32 CAM board should light up for about a second. The resulting folder will for example look like this \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9886290808554736
      ],
      "excerpt": "where capture_*.gs are 96x96 8-bit grayscale images and gyrodata.csv contains the IMU data. The timestamp (time since boot) in the image filename suffix is in the format hhmmssSSS. The timestamps in the first column of gyrodata.csv are of the same format. With IMU data recording switched on, an IMU record is taken every 20ms and a picture is taken about every 600ms. Without IMU data, an image is recorded about every 300ms. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9912512689554441
      ],
      "excerpt": "The original idea for the project was to use the IMU data to generate labels for the images by looking at the strength of the vibrations that occurred in a time window after the image was taken. However, this still requires some work, so I also went with manually labeling the images for now. To start with an easy case, I focused on detecting white markings on the surface ahead, which usually come with bumps in the transition - so it is worth being warned about them.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.987487015681825,
        0.9556767234297491
      ],
      "excerpt": "which saves the respective data in the ./train, ./val and ./test subdirectories of your './train_data_dir'. There is not any actual preprocessing of the images performed in this step. However, upon loading the data into a tf.data.Dataset, the unsigned 8-bit integer values are converted into signed 8-bit integers, because this conversion needs to be done as well during inference, which in turn is necessary since unsigned 8-bit integer quantization is getting deprecated in TF Lite. For the data augmentation which is only done for the training data, the images are just vertically flipped. \nThe ESP32 CAM platform is quite constrained and therefore an efficient model architecture needs to be used. In this project, we use the original MobileNet architecture: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9423826544109274
      ],
      "excerpt": "In the config (./pothole_model/model/config.yaml) you can set the model_save_dir, which is where the trained model will be saved as a SavedModel. You can also set a few other model/training-related parameters, in particular the alpha parameter, which controls the number of filters used throughout the model. So by increasing it, you will get a model with more capacity, but also with a larger model size and longer inference time. To train the model run \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9821364174018699
      ],
      "excerpt": "After training, the script also evaluates the model on the test dataset, which you should only use as an performance estimate for your final model. For the model that is included in this repo, I used ~3800 manually labeled images (before augmentation and splitting) in which the relative frequency of the classes bump and no bump are 0.4 and 0.6, respectively. The final model achieved an accuracy of 0.97 on the test set. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9463070819015027
      ],
      "excerpt": "This will run the conversion to pothole.tflite, which includes the int8 quantization. Quantization can of course impact the performance of the model, therefore it needs to be tested again after the conversion by running: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9608293056795041
      ],
      "excerpt": "which evaluates the converted model on the test dataset (change it to validation dataset, if you are still iterating on the model). The model included in this repo also achieves an accuracy of 0.97 after conversion. The next step is to create a C++ file pothole_model.cc which defines a byte array that represents the model. This file then needs to be copied into the ./esp32_inference subproject: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9592610538698777,
        0.9582222072389998,
        0.8297962975686739
      ],
      "excerpt": "After building and flashing the inference binary as described above, the model should run at about 2 fps and switch on the buzzer each time a bump/marking is detected until no-bump is detected anymore. \nThe converted version of the included model (./esp32_inference/main/pothole_model.cc), might not work well in your circumstances (different longboard/camera perspective, different surface conditions) so I recommend collecting data and training a new model. If you want to see how it looks like when it works as intended, have a look here. \nNicer case, maybe 3d printed  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Pothole detection on a longboard with ESP32 CAM and TF Lite Micro",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/christophmeyer/longboard-pothole-detection/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 30 Dec 2021 04:46:20 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/christophmeyer/longboard-pothole-detection/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "christophmeyer/longboard-pothole-detection",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/christophmeyer/longboard-pothole-detection/master/pothole_model/convert_model_to_tflite.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "First clone this repo:\n\n```\ngit clone https://github.com/christophmeyer/pothole-detection-longboard.git\n```\n\nThe project is divided into three subprojects:\n\n`./esp32_data_collection`: C++ code to build the esp32 binary for data collection, i.e. for saving grayscale pictures and (optional) imu data to the sdcard. \n\n`./pothole_model`: Python code for preparing the collected data for training, training the model, and converting/quantizing the model such that it can be compiled into the inference binary.\n\n`./esp32_inference`: C++ code to build the esp32 binary for running inference and driving the piezo buzzer.\n\nBoth, the data collection and inference subprojects use the esp-idf build system, which you can set up by following the steps [here](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/). \n\nNext, one needs to fetch the camera drivers for both esp32 subprojects:\n\n```\ngit clone https://github.com/espressif/esp32-camera esp32_data_collection/components/esp32-camera\ncd ./esp32_data_collection/components/esp32-camera\ngit checkout 722497cb19383cd4ee6b5d57bb73148b5af41b24\n\ngit clone https://github.com/espressif/esp32-camera esp32_inference/components/esp32-camera\ncd ./esp32_inference/components/esp32-camera\ngit checkout 722497cb19383cd4ee6b5d57bb73148b5af41b24\n```\n\nFor the IMU, one needs the I2C and MPU drivers:\n\n```\ngit clone https://github.com/natanaeljr/esp32-I2Cbus.git esp32_data_collection/components/I2Cbus\ncd ./esp32_data_collection/components/I2Cbus\ngit checkout c792c7b5141772f805766a289b86819664894b23\n\ngit clone https://github.com/natanaeljr/esp32-MPU-driver.git esp32_data_collection/components/MPUdriver\ncd ./esp32_data_collection/components/MPUdriver\ngit checkout c82b00502eb4c101a3f6b8134cd9b4a13f88e016\n```\n\nThe above commits of the driver repos are the ones that I used. Using newer ones might be fine as well, in particular in the case of the MPU and I2C drivers. However, for the camera driver, I encountered a bug with grayscale images that was introduced after the commit mentioned above. So check for yourself if you want to use more recent drivers.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9127800202063389
      ],
      "excerpt": "| ESP32 CAM |       10 EUR        | Make sure to get the version with 4MB PSRAM. | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.836370174782248
      ],
      "excerpt": "| OV2640 camera      | 1.5 EUR | Depending on your mounting situation, make sure to choose one with a long enough cable (I used 75mm). Since the cables easily fail if you bend them too much, you might want to order a spare or two.  |  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8015278993387235
      ],
      "excerpt": "| MPU6050 IMU | 3EUR | (Optional) if you also want to capture IMU data. Unless you want to solder, get one with header pins. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9913348614020817
      ],
      "excerpt": "cd ./esp32_data_collection (or cd ./esp32_inference) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8078259163701544
      ],
      "excerpt": "and then you can flash the binary with \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9887863332322161,
        0.9906248903846466,
        0.9979947896609701
      ],
      "excerpt": "The following steps are done in python and to run them you first need to install the dependencies (preferably into a virtual env or conda env) by \ncd ./pothole_model \npip install -r requirements.txt \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8666117960574022
      ],
      "excerpt": "idf.py build \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.891011076703722
      ],
      "excerpt": "python -m model.train --config_path=./model/config.yaml \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.838150978052095
      ],
      "excerpt": "python -m model.evaluate --config_path=./model/config.yaml \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8069255709014079
      ],
      "excerpt": "cp models/pothole/pothole_model.cc ../esp32_inference/main/pothole_model.cc \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/christophmeyer/longboard-pothole-detection/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "C",
      "Python",
      "CMake",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'\\n                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Longboard Pothole Detection",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "longboard-pothole-detection",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "christophmeyer",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/christophmeyer/longboard-pothole-detection/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Thu, 30 Dec 2021 04:46:20 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To get started, you will need a few pieces of hardware. Everything can be put together with jumper cables without soldering.\n\n",
      "technique": "Header extraction"
    }
  ]
}