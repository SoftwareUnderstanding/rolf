{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1511.06434\n\nDataset: https://drive.google.com/file/d/1VT-8w1rTT2GCE5IE5zFJPMzv7bqca-Ri/view"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9437907358345415
      ],
      "excerpt": "UNSUPERVISED REPRESENTATION LEARNING WITH DEEP CONVOLUTIONAL GENERATIVE ADVERSARIAL NETWORKS: https://arxiv.org/abs/1511.06434 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/LingaswamyD23/GAN-Pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-08-21T11:42:03Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-08-25T15:08:22Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8656499619292638,
        0.9180334603066718
      ],
      "excerpt": "What is a GAN? \nGANs are a framework for teaching a DL model to capture the training data\u2019s distribution so we can generate new data from that same distribution.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9222450213432946,
        0.9557117891527651,
        0.9519151287416358,
        0.9863162902172606,
        0.9796064227181432,
        0.9563744451688091
      ],
      "excerpt": "They are made of two distinct models, a generator and a discriminator. The job of the generator is to spawn \u2018fake\u2019 images that look like the training images.  \nThe job of the discriminator is to look at an image and output whether or not it is a real training image or a fake image from the generator. \n During training, the generator is constantly trying to outsmart the discriminator by generating better and better fakes, while the discriminator is working to become a better detective and correctly classify the real and fake images. T \n he equilibrium of this game is when the generator is generating perfect fakes that look as if they came directly from the training data, and the discriminator is left to always guess at 50% confidence that the generator output is real or fake. \n D(G(z))\u00a0is the probability (scalar) that the output of the generator\u00a0G\u00a0is a real image.  \n As described in\u00a0Goodfellow\u2019s paper,\u00a0D\u00a0and\u00a0G\u00a0play a minimax game in which\u00a0D\u00a0tries to maximize the probability it correctly classifies reals and fakes (logD(x)), and\u00a0G\u00a0tries to minimize the probability that\u00a0D\u00a0will predict its outputs are fake (log(1\u2212D(G(z)))). From the paper, the GAN loss function is \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9948230012839372,
        0.9386988667781963
      ],
      "excerpt": "The generator, GG, is designed to map the latent space vector (zz) to data-space.  \nSince our data are images, converting zz to data-space means ultimately creating a RGB image with the same size as the training images (i.e. 3x64x64).  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9781436855625848
      ],
      "excerpt": "The discriminator, DD, is a binary classification network that takes an image as input and outputs a scalar probability that the input image is real (as opposed to fake).  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9250071433566734,
        0.80437422007281
      ],
      "excerpt": "we will do some statistic reporting and at the end of each epoch we will push our fixed_noise batch through the generator to visually track the progress of G\u2019s training. The training statistics reported are: \nLoss_D - discriminator loss calculated as the sum of losses for the all real and all fake batches (log(D(x)) + log(1 - D(G(z)))log(D(x))+log(1\u2212D(G(z)))). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.959876826782852,
        0.9512749597791429
      ],
      "excerpt": "D(x) - the average output (across the batch) of the discriminator for the all real batch. This should start close to 1 then theoretically converge to 0.5 when G gets better. Think about why this is. \nD(G(z)) - average discriminator outputs for the all fake batch. The first number is before D is updated and the second number is after D is updated. These numbers should start near 0 and converge to 0.5 as G gets better. Think about why this is. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/LingaswamyD23/GAN_Using_Pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 21 Dec 2021 08:54:59 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/LingaswamyD23/GAN-Pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "LingaswamyD23/GAN-Pytorch",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/LingaswamyD23/GAN_Using_Pytorch/main/GAN_Using_Pytorch.ipynb"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/LingaswamyD23/GAN-Pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2021 LINGASWAMY DACHARAM\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "GAN_Using_Pytorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "GAN-Pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "LingaswamyD23",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/LingaswamyD23/GAN-Pytorch/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 21 Dec 2021 08:54:59 GMT"
    },
    "technique": "GitHub API"
  }
}