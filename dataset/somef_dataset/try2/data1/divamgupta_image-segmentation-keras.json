{
  "citation": [
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "| mobilenet_unet   | MobileNet         | U-Net              | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.962435155057675,
        0.9105368110547479,
        0.9100829319908923,
        0.9105368110547479,
        0.9105368110547479,
        0.9105368110547479,
        0.8320601091898192,
        0.8029948720864918,
        0.9105368110547479,
        0.9736844042150471,
        0.9626356225854676,
        0.9105368110547479,
        0.9715300342475984,
        0.9105368110547479,
        0.9105368110547479,
        0.9422100272984922,
        0.9105368110547479,
        0.9747762585923935,
        0.9626356225854676,
        0.8466432032523193,
        0.9105368110547479,
        0.9105368110547479,
        0.8730726134075774
      ],
      "excerpt": "* https://github.com/SteliosTsop/QF-image-segmentation-keras paper \n* https://github.com/willembressers/bouquet_quality \n* https://github.com/jqueguiner/image-segmentation \n* https://github.com/pan0rama/CS230-Microcrystal-Facet-Segmentation \n* https://github.com/theerawatramchuen/Keras_Segmentation \n* https://github.com/neheller/labels18 \n* https://github.com/Divyam10/Face-Matting-using-Unet \n* https://github.com/shsh-a/segmentation-over-web \n* https://github.com/chenwe73/deep_active_learning_segmentation \n* https://github.com/vigneshrajap/vision-based-navigation-agri-fields \n* https://github.com/ronalddas/Pneumonia-Detection \n* https://github.com/Aiwiscal/ECG_UNet \n* https://github.com/TianzhongSong/Unet-for-Person-Segmentation \n* https://github.com/Guyanqi/GMDNN \n* https://github.com/kozemzak/prostate-lesion-segmentation \n* https://github.com/lixiaoyu12138/fcn-date \n* https://github.com/sagarbhokre/LyftChallenge \n* https://github.com/TianzhongSong/Person-Segmentation-Keras \n* https://github.com/divyanshpuri02/COCO_2018-Stuff-Segmentation-Challenge \n* https://github.com/XiangbingJi/Stanford-cs230-final-project \n* https://github.com/lsh1994/keras-segmentation \n* https://github.com/SpirinEgor/mobile_semantic_segmentation \n* https://github.com/LeadingIndiaAI/COCO-DATASET-STUFF-SEGMENTATION-CHALLENGE \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9105368110547479,
        0.9105368110547479,
        0.9105368110547479,
        0.9105368110547479,
        0.9105368110547479,
        0.9105368110547479,
        0.8656070203791273,
        0.9105368110547479,
        0.9100829319908923
      ],
      "excerpt": "* https://github.com/laoj2/segnet_crfasrnn \n* https://github.com/rancheng/AirSimProjects \n* https://github.com/RadiumScriptTang/cartoon_segmentation \n* https://github.com/dquail/NerveSegmentation \n* https://github.com/Bhomik/SemanticHumanMatting \n* https://github.com/Symefa/FP-Biomedik-Breast-Cancer \n* https://github.com/Alpha-Monocerotis/PDF_FigureTable_Extraction \n* https://github.com/rusito-23/mobile_unet_segmentation \n* https://github.com/Philliec459/ThinSection-image-segmentation-keras \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/divamgupta/image-segmentation-keras",
    "technique": "GitHub API"
  },
  "contributor": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* [Divam Gupta](https://divamgupta.com) [![Twitter](https://img.shields.io/twitter/url.svg?label=Follow%20%40divamgupta&style=social&url=https%3A%2F%2Ftwitter.com%2Fdivamgupta)](https://twitter.com/divamgupta)\n* [Rounaq Jhunjhunu wala](https://github.com/rjalfa)\n* [Marius Juston](https://github.com/Marius-Juston)\n* [JaledMC](https://github.com/JaledMC)\n\n",
      "technique": "Header extraction"
    }
  ],
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-03-20T20:48:54Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-29T06:22:42Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8883935450148722
      ],
      "excerpt": "Implementation of various Deep Image Segmentation models in keras. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8701475524883261
      ],
      "excerpt": "Attention based Language Translation in Keras \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9627487715650112,
        0.9627487715650112
      ],
      "excerpt": "| fcn_8            | Vanilla CNN       | FCN8               | \n| fcn_32           | Vanilla CNN       | FCN8               | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9627487715650112
      ],
      "excerpt": "| pspnet           | Vanilla CNN       | PSPNet             | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9256989112831817,
        0.9256989112831817
      ],
      "excerpt": "| unet_mini        | Vanilla Mini CNN  | U-Net              | \n| unet             | Vanilla CNN       | U-Net              | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9627487715650112
      ],
      "excerpt": "| segnet           | Vanilla CNN       | Segnet             | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8007554335625409,
        0.8961964302175768
      ],
      "excerpt": "model = pspnet_101_voc12() #: load the pretrained model trained on Pascal VOC 2012 dataset \n: load any of the 3 pretrained models \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = vgg_unet(n_classes=51 ,  input_height=416, input_width=608  ) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9302287581602335
      ],
      "excerpt": ": evaluating the model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9130611722985525
      ],
      "excerpt": "To get predictions of a video \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8166608782195921,
        0.8630317011183918
      ],
      "excerpt": "--display opens a window with the predicted video. Remove this argument when using a headless system. \nTo get the IoU scores  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9308959102242779
      ],
      "excerpt": "The following example shows transfer the knowledge from a larger ( and more accurate ) model to a smaller model. In most cases the smaller model trained via knowledge distilation is more accurate compared to the same model trained using vanilla supervised learning.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.859060005285154,
        0.859060005285154
      ],
      "excerpt": "            iaa.Fliplr(0.5),  #: horizontally flip 50% of all images \n            iaa.Flipud(0.5), #: horizontally flip 50% of all images \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = vgg_unet(n_classes=51 ,  input_height=416, input_width=608) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = vgg_unet(n_classes=51 ,  input_height=416, input_width=608,  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = vgg_unet(n_classes=51 ,  input_height=416, input_width=608) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877,
        0.9340929858552927
      ],
      "excerpt": "model = vgg_unet(n_classes=51 ,  input_height=416, input_width=608 ) \n: When using custom callbacks, the default checkpoint saver is removed \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = vgg_unet(n_classes=51 ,  input_height=416, input_width=608) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8699255057284786
      ],
      "excerpt": "Here are a few projects which are using our library : \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Implementation of Segnet, FCN, UNet , PSPNet and other models in Keras.",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Download and extract the following:\n\nhttps://drive.google.com/file/d/0B0d9ZiqAgFkiOHR1NTJhWVJMNEU/view?usp=sharing\n\nYou will get a folder named dataset1/\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/divamgupta/image-segmentation-keras/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 983,
      "date": "Wed, 29 Dec 2021 10:37:35 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/divamgupta/image-segmentation-keras/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "divamgupta/image-segmentation-keras",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/divamgupta/image-segmentation-keras/master/docker/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You can also visualize your prepared annotations for verification of the prepared data.\n\n\n```shell\npython -m keras_segmentation verify_dataset \\\n --images_path=\"dataset1/images_prepped_train/\" \\\n --segs_path=\"dataset1/annotations_prepped_train/\"  \\\n --n_classes=50\n```\n\n```shell\npython -m keras_segmentation visualize_dataset \\\n --images_path=\"dataset1/images_prepped_train/\" \\\n --segs_path=\"dataset1/annotations_prepped_train/\"  \\\n --n_classes=50\n```\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Download and extract the following:\n\nhttps://drive.google.com/file/d/0B0d9ZiqAgFkiOHR1NTJhWVJMNEU/view?usp=sharing\n\nYou will get a folder named dataset1/\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "You need to make two folders\n\n*  Images Folder - For all the training images\n* Annotations Folder - For the corresponding ground truth segmentation images\n\nThe filenames of the annotation images should be same as the filenames of the RGB images.\n\nThe size of the annotation image for the corresponding RGB image should be same.\n\nFor each pixel in the RGB image, the class label of that pixel in the annotation image would be the value of the blue pixel.\n\nExample code to generate annotation images :\n\n```python\nimport cv2\nimport numpy as np\n\nann_img = np.zeros((30,30,3)).astype('uint8')\nann_img[ 3 , 4 ] = 1 #: this would set the label of pixel 3,4 as 1\n\ncv2.imwrite( \"ann_1.png\" ,ann_img )\n```\n\nOnly use bmp or png format for the annotation images.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Install the module\n\nRecommended way:\n```shell\npip install --upgrade git+https://github.com/divamgupta/image-segmentation-keras\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9810096559140954
      ],
      "excerpt": "pip install keras-segmentation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9421025041683309,
        0.8041636444612729,
        0.9820226428242687
      ],
      "excerpt": "git clone https://github.com/divamgupta/image-segmentation-keras \ncd image-segmentation-keras \npython setup.py install \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8682180175299594
      ],
      "excerpt": "To train the model run the following command: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8921748492701493
      ],
      "excerpt": "python -m keras_segmentation train \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8837680365796365
      ],
      "excerpt": "python -m keras_segmentation predict_video \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8696317593402121
      ],
      "excerpt": "To get the IoU scores  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8837680365796365
      ],
      "excerpt": "python -m keras_segmentation evaluate_model \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8227995747001028
      ],
      "excerpt": "        \"/path/to/other/directory\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8918974083095406
      ],
      "excerpt": "* https://github.com/willembressers/bouquet_quality \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8918974083095406,
        0.8918974083095406,
        0.884768357925068
      ],
      "excerpt": "* https://github.com/theerawatramchuen/Keras_Segmentation \n* https://github.com/neheller/labels18 \n* https://github.com/Divyam10/Face-Matting-using-Unet \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8918974083095406
      ],
      "excerpt": "* https://github.com/chenwe73/deep_active_learning_segmentation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8918974083095406
      ],
      "excerpt": "* https://github.com/Aiwiscal/ECG_UNet \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8918974083095406
      ],
      "excerpt": "* https://github.com/Guyanqi/GMDNN \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8918974083095406
      ],
      "excerpt": "* https://github.com/sagarbhokre/LyftChallenge \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8918974083095406,
        0.8655372342195214
      ],
      "excerpt": "* https://github.com/SpirinEgor/mobile_semantic_segmentation \n* https://github.com/LeadingIndiaAI/COCO-DATASET-STUFF-SEGMENTATION-CHALLENGE \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8918974083095406,
        0.8918974083095406,
        0.8918974083095406,
        0.8918974083095406,
        0.8918974083095406,
        0.8918974083095406
      ],
      "excerpt": "* https://github.com/laoj2/segnet_crfasrnn \n* https://github.com/rancheng/AirSimProjects \n* https://github.com/RadiumScriptTang/cartoon_segmentation \n* https://github.com/dquail/NerveSegmentation \n* https://github.com/Bhomik/SemanticHumanMatting \n* https://github.com/Symefa/FP-Biomedik-Breast-Cancer \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8176064258987801
      ],
      "excerpt": "Ladder Network in Keras  model achives 98% test accuracy on MNIST with just 100 labeled examples \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490087571632008
      ],
      "excerpt": "Example results for the pre-trained models provided : \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8998492179403905
      ],
      "excerpt": "from keras_segmentation.pretrained import pspnet_50_ADE_20K , pspnet_101_cityscapes, pspnet_101_voc12 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8534121815329072,
        0.8702741540807638
      ],
      "excerpt": "model = pspnet_101_cityscapes() #: load the pretrained model trained on Cityscapes dataset \nmodel = pspnet_101_voc12() #: load the pretrained model trained on Pascal VOC 2012 dataset \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8639986685036579
      ],
      "excerpt": "    inp=\"input_image.jpg\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8900486270063179
      ],
      "excerpt": "from keras_segmentation.models.unet import vgg_unet \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8036863379628726
      ],
      "excerpt": "    out_fname=\"/tmp/out.png\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9068127677393759
      ],
      "excerpt": "import matplotlib.pyplot as plt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9316937895561977
      ],
      "excerpt": "print(model.evaluate_segmentation( inp_images_dir=\"dataset1/images_prepped_test/\"  , annotations_dir=\"dataset1/annotations_prepped_test/\" ) ) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8132721336631622
      ],
      "excerpt": "To train the model run the following command: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8725153287135207
      ],
      "excerpt": "python -m keras_segmentation train \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8554138574456002
      ],
      "excerpt": " --output_file=\"path_for_save_inferenced_video\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8900486270063179,
        0.8998492179403905,
        0.8900486270063179
      ],
      "excerpt": "from keras_segmentation.models.model_utils import transfer_weights \nfrom keras_segmentation.pretrained import pspnet_50_ADE_20K \nfrom keras_segmentation.models.pspnet import pspnet_50 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9139318269440286,
        0.8900486270063179,
        0.8801854956928516
      ],
      "excerpt": "from keras_segmentation.predict import model_from_checkpoint_path \nfrom keras_segmentation.models.unet import unet_mini \nfrom keras_segmentation.model_compression import perform_distilation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8900486270063179,
        0.8796325398080971
      ],
      "excerpt": "from keras_segmentation.models.unet import vgg_unet \nfrom imgaug import augmenters as iaa \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8900486270063179
      ],
      "excerpt": "from keras_segmentation.models.unet import vgg_unet \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8900486270063179
      ],
      "excerpt": "from keras_segmentation.models.unet import vgg_unet \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8900486270063179,
        0.8855298618768842
      ],
      "excerpt": "from keras_segmentation.models.unet import vgg_unet \nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8348013554365014,
        0.8594142235991984,
        0.8594142235991984
      ],
      "excerpt": "                filepath=\"checkpoints/\" + model.name + \".{epoch:05d}\", \n                save_weights_only=True, \n                verbose=True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8900486270063179
      ],
      "excerpt": "from keras_segmentation.models.unet import vgg_unet \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/divamgupta/image-segmentation-keras/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Divam Gupta\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Image Segmentation Keras : Implementation of Segnet, FCN, UNet, PSPNet and other models in Keras.",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "image-segmentation-keras",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "divamgupta",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/divamgupta/image-segmentation-keras/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "divamgupta",
        "body": "Adding VOC pretrained model",
        "dateCreated": "2018-04-12T06:39:56Z",
        "datePublished": "2019-04-26T05:53:38Z",
        "html_url": "https://github.com/divamgupta/image-segmentation-keras/releases/tag/pretrained_model_1",
        "name": "Adding VOC pretrained model",
        "tag_name": "pretrained_model_1",
        "tarball_url": "https://api.github.com/repos/divamgupta/image-segmentation-keras/tarball/pretrained_model_1",
        "url": "https://api.github.com/repos/divamgupta/image-segmentation-keras/releases/16993196",
        "zipball_url": "https://api.github.com/repos/divamgupta/image-segmentation-keras/zipball/pretrained_model_1"
      }
    ],
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Keras ( recommended version : 2.4.3 )\n* OpenCV for Python\n* Tensorflow ( recommended  version : 2.4.1 )\n\n```shell\napt-get install -y libsm6 libxext6 libxrender-dev\npip install opencv-python\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2335,
      "date": "Wed, 29 Dec 2021 10:37:35 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Python Interface: https://colab.research.google.com/drive/1q_eCYEzKxixpCKH1YDsLnsvgxl92ORcv?usp=sharing\n* CLI Interface: https://colab.research.google.com/drive/1Kpy4QGFZ2ZHm69mPfkmLSUes8kj6Bjyi?usp=sharing\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "You can also use the tool just using command line\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "To get the predictions of a trained model\n\n```shell\npython -m keras_segmentation predict \\\n --checkpoints_path=\"path_to_checkpoints\" \\\n --input_path=\"dataset1/images_prepped_test/\" \\\n --output_path=\"path_to_predictions\"\n\n```\n\n\n\n",
      "technique": "Header extraction"
    }
  ]
}