{
  "citation": [
    {
      "confidence": [
        0.8997098193315181
      ],
      "excerpt": "  http://robohub.org/artificial-general-intelligence-that-plays-atari-video-games-how-did-deepmind-do-it/ \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sygi/deep_q_rl",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-02-16T20:30:47Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-04-08T14:54:08Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This repository is a fork of the Nathan Sprague implementation of the deep\nQ-learning algorithm described in:\n\n[Playing Atari with Deep Reinforcement Learning](http://arxiv.org/abs/1312.5602)\nVolodymyr Mnih, Koray Kavukcuoglu, David Silver, Alex Graves, Ioannis\nAntonoglou, Daan Wierstra, Martin Riedmiller\n\nand \n\nMnih, Volodymyr, et al. \"Human-level control through deep reinforcement learning.\" Nature 518.7540 (2015): 529-533.\n\nWe use the DQN algorithm to learn the strategies for Atari games using the RAM state of the machine.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8414556390180457,
        0.8141492458714825
      ],
      "excerpt": "just_ram - network that takes only RAM as inputs, passes it through 2 ReLU layers with 128 nodes each and scales the output to the appropriate size \nbig_ram - the analogous network, but with 4 hidden layers \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8654555768565786,
        0.9137310077367746,
        0.9280954303472183
      ],
      "excerpt": "ram_dropout - the just_ram with applied dropout to all the layers except the output \nbig_dropout - the big_ram network with dropout \nEvaluation of a model using a different frame skip: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560144943862483
      ],
      "excerpt": "ram_dropout is a network with two dense hidden layers, big_dropout with 4. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370246166820286
      ],
      "excerpt": "Original Nathan Sprague implementation of DQN. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9508672601721868,
        0.971697145541323
      ],
      "excerpt": "This is the code DeepMind used for the Nature paper.  The license \n  only permits the code to be used for \"evaluating and reviewing\" the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8629206103762034,
        0.963772552007359
      ],
      "excerpt": "Working Caffe-based implementation.  (I haven't tried it, but there \n  is a video of the agent playing Pong successfully.) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9458478724383588
      ],
      "excerpt": "Defunct?  As far as I know, this package was never fully functional.  The project is described here:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.802988752209957
      ],
      "excerpt": "This is an almost-working implementation developed during Spring \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Theano-based implementation of Deep Q-learning",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sygi/deep_q_rl/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Fri, 24 Dec 2021 09:14:44 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/sygi/deep_q_rl/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "sygi/deep_q_rl",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/sygi/deep_q_rl/master/dep_script.sh",
      "https://raw.githubusercontent.com/sygi/deep_q_rl/master/unroll-frameskip.sh",
      "https://raw.githubusercontent.com/sygi/deep_q_rl/master/learningrate.sh",
      "https://raw.githubusercontent.com/sygi/deep_q_rl/master/dropout.sh",
      "https://raw.githubusercontent.com/sygi/deep_q_rl/master/frameskip.sh",
      "https://raw.githubusercontent.com/sygi/deep_q_rl/master/weight-decay.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9023697225149864
      ],
      "excerpt": "./frameskip.sh breakout just_ram 8 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.828192808899342
      ],
      "excerpt": "./dropout.sh &lt;rom name&gt; ram_dropout \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9141872294666699
      ],
      "excerpt": "You can try the models with l2-regularization using: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9023697225149864
      ],
      "excerpt": "./weight-decay.sh breakout big_ram \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9023697225149864
      ],
      "excerpt": "./learningrate.sh breakout big_ram \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/sygi/deep_q_rl/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "BSD 3-Clause \"New\" or \"Revised\" License",
      "url": "https://api.github.com/licenses/bsd-3-clause"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Introduction",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "deep_q_rl",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "sygi",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sygi/deep_q_rl/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* A reasonably modern NVIDIA GPU\n* OpenCV\n* [Theano](http://deeplearning.net/software/theano/) ([https://github.com/Theano/Theano](https://github.com/Theano/Theano))\n* [Lasagne](http://lasagne.readthedocs.org/en/latest/) ([https://github.com/Lasagne/Lasagne](https://github.com/Lasagne/Lasagne)\n* [Pylearn2](http://deeplearning.net/software/pylearn2/) ([https://github.com/lisa-lab/pylearn2](https://github.com/lisa-lab/pylearn2))\n* [Arcade Learning Environment](http://www.arcadelearningenvironment.org/) ([https://github.com/mgbellemare/Arcade-Learning-Environment](https://github.com/mgbellemare/Arcade-Learning-Environment))\n\nThe script `dep_script.sh` can be used to install all dependencies under Ubuntu.\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "We've done a number of experiments with models that use RAM state. They don't fully share the code, so we split them in branches. To re-run them, you can use our scripts, which are located in the main directory of the repository.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 8,
      "date": "Fri, 24 Dec 2021 09:14:44 GMT"
    },
    "technique": "GitHub API"
  }
}