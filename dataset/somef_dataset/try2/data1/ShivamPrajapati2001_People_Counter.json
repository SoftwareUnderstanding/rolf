{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1512.02325\n- MobileNet paper: https://arxiv.org/abs/1704.04861\n- Centroid tracker: https://www.pyimagesearch.com/2018/07/23/simple-object-tracking-with-opencv/\n\n***Optional:***\n- https://towardsdatascience.com/review-ssd-single-shot-detector-object-detection-851a94607d11\n- https://pypi.org/project/schedule/\n\n## Next steps\n- Train the SSD on human data (with a top-down view",
      "https://arxiv.org/abs/1704.04861\n- Centroid tracker: https://www.pyimagesearch.com/2018/07/23/simple-object-tracking-with-opencv/\n\n***Optional:***\n- https://towardsdatascience.com/review-ssd-single-shot-detector-object-detection-851a94607d11\n- https://pypi.org/project/schedule/\n\n## Next steps\n- Train the SSD on human data (with a top-down view"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "***Main:***\n- SSD paper: https://arxiv.org/abs/1512.02325\n- MobileNet paper: https://arxiv.org/abs/1704.04861\n- Centroid tracker: https://www.pyimagesearch.com/2018/07/23/simple-object-tracking-with-opencv/\n\n***Optional:***\n- https://towardsdatascience.com/review-ssd-single-shot-detector-object-detection-851a94607d11\n- https://pypi.org/project/schedule/\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9746765770146428
      ],
      "excerpt": "- Variables and memory would be reset == less load on your machine. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if Timer: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8456806903995955
      ],
      "excerpt": "    if num_seconds &gt; 28800: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8949682828295372
      ],
      "excerpt": "- Useful for footfall analysis. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ShivamPrajapati2001/People_Counter",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-08-08T10:02:36Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-21T14:31:33Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9045504693411341
      ],
      "excerpt": "Refer to added Features. Also, added support for an IP camera. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9589243995608476
      ],
      "excerpt": "The primary aim is to use the project as a business perspective, ready to scale. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8175593778787391,
        0.9743883841426167,
        0.8550085417249137
      ],
      "excerpt": "Sending an alert to the staff if the people are way over the limit. \nAutomating features and optimising the real-time stream for better performance (with threading). \nActs as a measure towards footfall analysis and in a way to tackle COVID-19. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9849918691189825,
        0.9707508691823755
      ],
      "excerpt": "- We are using a SSD (Single Shot Detector) with a MobileNet architecture. In general, it only takes a single shot to detect whatever is in an image. That is, one for generating region proposals, one for detecting the object of each proposal.  \n- Compared to other 2 shot detectors like R-CNN, SSD is quite fast. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8864410137832828,
        0.8831424336938448,
        0.9776897515607071,
        0.9770893869901278,
        0.9498499774321993
      ],
      "excerpt": "- Centroid tracker is one of the most reliable trackers out there. \n- To be straightforward, the centroid tracker computes the centroid of the bounding boxes. \n- That is, the bounding boxes are (x, y) co-ordinates of the objects in an image.  \n- Once the co-ordinates are obtained by our SSD, the tracker computes the centroid (center) of the box. In other words, the center of an object. \n- Then an unique ID is assigned to every particular object deteced, for tracking over the sequence of frames. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8024819343227143,
        0.8269554079625092,
        0.9184034694613071
      ],
      "excerpt": "- Threading removes OpenCV's internal buffer (which basically stores the new frames yet to be processed until your system processes the old frames) and thus reduces the lag/increases fps.  \n- If your system is not capable of simultaneously processing and outputting the result, you might see a delay in the stream. This is where threading comes into action. \n- It is most suitable for solid performance on complex real-time applications. To use threading: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.813717457739989
      ],
      "excerpt": "- Automatic scheduler to start the software. Configure to run at every second, minute, day, or Monday to Friday. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8039715993698165
      ],
      "excerpt": "    #: Automatic timer to stop the live stream. Set to 8 hours (28800s). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9841776733998697
      ],
      "excerpt": "- Logs all data at end of the day. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8781240702822949,
        0.8087734913340751
      ],
      "excerpt": "Experiment with other detectors and benchmark the results on computationally less expensive embedded hardware.  \nEvaluate the performance on multiple IP cameras. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8390397432824835
      ],
      "excerpt": "\ud83c\udf74 Fork this repo and pull request! \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "This is Real Time People Counting using OpenCV",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ShivamPrajapati2001/People_Counter/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Wed, 29 Dec 2021 05:02:16 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ShivamPrajapati2001/People_Counter/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ShivamPrajapati2001/People_Counter",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8817415589474913,
        0.9893272198983933
      ],
      "excerpt": "\ud83d\udc6f Clone this repo: \n$ git clone https://github.com/ShivamPrajapati2001/People_Counter.git \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8172281698124619
      ],
      "excerpt": "set Thread = True in config. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ShivamPrajapati2001/People_Counter/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Sai Subhakar T\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "People-Counting-in-Real-Time",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "People_Counter",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ShivamPrajapati2001",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ShivamPrajapati2001/People_Counter/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Install all the required Python dependencies:\n```\npip install -r requirements.txt\n```\n- To run inference on a test video file, head into the directory/use the command: \n```\npython run.py --prototxt mobilenet_ssd/MobileNetSSD_deploy.prototxt --model mobilenet_ssd/MobileNetSSD_deploy.caffemodel --input videos/example_01.mp4\n```\n> To run inference on an IP camera:\n- Setup your camera url in 'mylib/config.py':\n\n```\n#: Enter the ip camera url (e.g., url = 'http://191.138.0.100:8040/video')\nurl = ''\n```\n- Then run with the command:\n```\npython run.py --prototxt mobilenet_ssd/MobileNetSSD_deploy.prototxt --model mobilenet_ssd/MobileNetSSD_deploy.caffemodel\n```\n> Set url = 0 for webcam.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Wed, 29 Dec 2021 05:02:16 GMT"
    },
    "technique": "GitHub API"
  }
}