{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1710.09435",
      "https://arxiv.org/abs/1709.01471"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[1] Malware Detection by Eating a Whole EXE\n\n```\n@misc{raff2017malware,\n      title={Malware Detection by Eating a Whole EXE},\n      author={Edward Raff and Jon Barker and Jared Sylvester and Robert Brandon and Bryan Catanzaro and Charles Nicholas},\n      year={2017},\n      eprint={1710.09435},\n      archivePrefix={arXiv},\n      primaryClass={stat.ML}\n}\n```\n\n[2] Learning the PE Header, Malware Detection with Minimal Domain Knowledge\n\n```\n@article{Raff_2017,\n   title={Learning the PE Header, Malware Detection with Minimal Domain Knowledge},\n   ISBN={9781450352024},\n   url={http://dx.doi.org/10.1145/3128572.3140442},\n   DOI={10.1145/3128572.3140442},\n   journal={Proceedings of the 10th ACM Workshop on Artificial Intelligence and Security - AISec  \u201917},\n   publisher={ACM Press},\n   author={Raff, Edward and Sylvester, Jared and Nicholas, Charles},\n   year={2017}\n}\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{Raff_2017,\n   title={Learning the PE Header, Malware Detection with Minimal Domain Knowledge},\n   ISBN={9781450352024},\n   url={http://dx.doi.org/10.1145/3128572.3140442},\n   DOI={10.1145/3128572.3140442},\n   journal={Proceedings of the 10th ACM Workshop on Artificial Intelligence and Security - AISec  \u201917},\n   publisher={ACM Press},\n   author={Raff, Edward and Sylvester, Jared and Nicholas, Charles},\n   year={2017}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@misc{raff2017malware,\n      title={Malware Detection by Eating a Whole EXE},\n      author={Edward Raff and Jon Barker and Jared Sylvester and Robert Brandon and Bryan Catanzaro and Charles Nicholas},\n      year={2017},\n      eprint={1710.09435},\n      archivePrefix={arXiv},\n      primaryClass={stat.ML}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8955886365383559
      ],
      "excerpt": "source venv/bin/activate \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jaketae/deep-malware-detection",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-10-31T14:36:26Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-03T18:19:52Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8477014728729738
      ],
      "excerpt": "PyTorch implementation of [1] Malware Detection by Eating a Whole EXE, [2] Learning the PE Header, Malware Detection with Minimal Domain Knowledge, and other derived custom models for malware detection. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8893228775457351,
        0.9850585880418065,
        0.9687136315838115,
        0.9901683810054409,
        0.9609676361444819
      ],
      "excerpt": "While [2] used LSTMs for the sequential model, we tested both GRU and LSTMs and found that the former was easier to train. \nWe combined models presented in papers [1] and [2] to derive a custom model that uses concatenated feature vector produced by the entry point 1D-CNN layer as well as the RNN units that follow. We denote these custom models with a \"Res\" prefix in the table below. \nWe also further develop the attention-based model in [2] with this residual approach. \nWhile the [1] used the entire binary of PE files, our approach more closely resembles that of [2]. Due to computational constraints, we decided to only use PE file headers up to their 4096th bytes, thus creating a 4096 dimensional sequential feature vector for every file. \nPresented below is a table detailing the performance of each model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9627487715650112,
        0.9627487715650112,
        0.9627487715650112,
        0.9627487715650112,
        0.9627487715650112,
        0.9627487715650112
      ],
      "excerpt": "| GRU-CNN        | 93  | .946 | \n| BiGRU-CNN      | 91  | .931 | \n| GRU-CNN (H128) | 93  | .946 | \n| ResGRU-CNN     | 94  | .948 | \n| AttnGRU-CNN    | 94  | .952 | \n| AttnResGRU-CNN | 94  | .952 | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A neural approach to malware detection in portable executables",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://black.readthedocs.io/",
      "technique": "Regular expression"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jaketae/pytorch-malware-detection/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 8,
      "date": "Wed, 29 Dec 2021 20:07:34 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jaketae/deep-malware-detection/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "jaketae/deep-malware-detection",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/jaketae/pytorch-malware-detection/master/run.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9616921919673982,
        0.9691744730099083,
        0.9702896958564144
      ],
      "excerpt": "git clone https://github.com/jaketae/deep-malware-detection.git \ncd pytorch-malware-detection \nThen, a Python virtual environment: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8211232956927162,
        0.9979947896609701,
        0.8202660956624873,
        0.9935459261120722,
        0.896783382828579
      ],
      "excerpt": "source venv/bin/activate \npip install -r requirements.txt \nIf you have pipenv, you can also type \npipenv install -r requirements.txt \nTrain the model in Jupyter notebook titled run.ipynb, or start training through the terminal via \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8988753500836807
      ],
      "excerpt": "The coding style is dictated by black. Depending on development environment, you can toggle format-on-save options in your code editor or set up pre-commit hooks to make the linter run on every push. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jaketae/deep-malware-detection/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\r\\n\\r\\nCopyright (c) 2020 Jake Tae\\r\\n\\r\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\r\\nof this software and associated documentation files (the \"Software\"), to deal\\r\\nin the Software without restriction, including without limitation the rights\\r\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\r\\ncopies of the Software, and to permit persons to whom the Software is\\r\\nfurnished to do so, subject to the following conditions:\\r\\n\\r\\nThe above copyright notice and this permission notice shall be included in all\\r\\ncopies or substantial portions of the Software.\\r\\n\\r\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\nSOFTWARE.\\r\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Neural Network Malware Binary Classification",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "deep-malware-detection",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "jaketae",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jaketae/deep-malware-detection/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 15,
      "date": "Wed, 29 Dec 2021 20:07:34 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "deep-learning",
      "pytorch",
      "malware-detection"
    ],
    "technique": "GitHub API"
  }
}