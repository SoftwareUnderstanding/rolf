{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1910.10683\n[released_checkpoints]: https://github.com/google-research/text-to-text-transfer-transformer/blob/main/released_checkpoints.md\n[beam]: https://beam.apache.org\n[c4]: https://www.tensorflow.org/datasets/catalog/c4\n[cc]: https://commoncrawl.org\n[dataflow]: https://cloud.google.com/dataflow/\n[gcs]: https://www.tensorflow.org/datasets/gcs\n[gcd]: https://cloud.google.com/dataflow/\n[gin]: https://github.com/google/gin-config\n[mtft]: https://github.com/tensorflow/mesh/tree/master/mesh_tensorflow/transformer\n[tfds]: https://www.tensorflow.org/datasets\n[tfds_beam]: https://www.tensorflow.org/datasets/beam_datasets"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you extend or use this work, please cite the [paper][paper] where it was introduced:\n\n```bibtex\n@article{2020t5,\n  author  = {Colin Raffel and Noam Shazeer and Adam Roberts and Katherine Lee and Sharan Narang and Michael Matena and Yanqi Zhou and Wei Li and Peter J. Liu},\n  title   = {Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer},\n  journal = {Journal of Machine Learning Research},\n  year    = {2020},\n  volume  = {21},\n  number  = {140},\n  pages   = {1-67},\n  url     = {http://jmlr.org/papers/v21/20-074.html}\n}\n```\n\n[paper]: https://arxiv.org/abs/1910.10683\n[released_checkpoints]: https://github.com/google-research/text-to-text-transfer-transformer/blob/main/released_checkpoints.md\n[beam]: https://beam.apache.org\n[c4]: https://www.tensorflow.org/datasets/catalog/c4\n[cc]: https://commoncrawl.org\n[dataflow]: https://cloud.google.com/dataflow/\n[gcs]: https://www.tensorflow.org/datasets/gcs\n[gcd]: https://cloud.google.com/dataflow/\n[gin]: https://github.com/google/gin-config\n[mtft]: https://github.com/tensorflow/mesh/tree/master/mesh_tensorflow/transformer\n[tfds]: https://www.tensorflow.org/datasets\n[tfds_beam]: https://www.tensorflow.org/datasets/beam_datasets\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{2020t5,\n  author  = {Colin Raffel and Noam Shazeer and Adam Roberts and Katherine Lee and Sharan Narang and Michael Matena and Yanqi Zhou and Wei Li and Peter J. Liu},\n  title   = {Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer},\n  journal = {Journal of Machine Learning Research},\n  year    = {2020},\n  volume  = {21},\n  number  = {140},\n  pages   = {1-67},\n  url     = {http://jmlr.org/papers/v21/20-074.html}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8942856639420041
      ],
      "excerpt": "How to Cite \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/google-research/text-to-text-transfer-transformer",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "How to Contribute\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\nContributor License Agreement\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to https://cla.developers.google.com/ to see\nyour current agreements on file or to sign a new one.\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\nCode reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\nGitHub Help for more\ninformation on using pull requests.\nCommunity Guidelines\nThis project follows\nGoogle's Open Source Community Guidelines.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-10-17T21:45:14Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-30T07:08:34Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9950147144900383,
        0.996946620703908,
        0.8819104505040255,
        0.9590490944121247
      ],
      "excerpt": "The t5 library serves primarily as code for reproducing the experiments in [Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer][paper]. In the paper, we demonstrate how to achieve state-of-the-art results on multiple NLP tasks using a text-to-text transformer pre-trained on a large text corpus. \nThe bulk of the code in this repository is used for loading, preprocessing, mixing, and evaluating datasets. \nIt also provides a way to fine-tune the pre-trained models released alongside the publication. \nThe t5 library can be used for future model development by providing useful modules for training and fine-tuning (potentially huge) models on mixtures of text-to-text tasks. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9833731589146529,
        0.8764766879966616
      ],
      "excerpt": "t5.data is a package for defining Task objects that provide tf.data.Datasets. \nEach Task is made up of: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "a SentencePiece model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8119100384736897,
        0.9354190742641657
      ],
      "excerpt": "The data source can be an arbitrary function that provides a tf.data.Dataset, but we also provide simpler wrappers for datasets available in [TensorFlow Datasets (TFDS)][tfds] (a TfdsTask) or stored as text files with one example per line (a TextLineTask). \nThe text preprocessor converts the examples in the source dataset into the appropriate format for a text-to-text model with fields for inputs and targets.  For example, the predefined t5.data.preprocessors.translate preprocessor converts inputs in the form \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8855165817003802,
        0.8096858349554713
      ],
      "excerpt": "{'de': 'Das ist gut.', 'en': 'That is good.'} \nto the form \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9613825202627354,
        0.937383086551229,
        0.8159708273949915,
        0.9570184473338094,
        0.8495132977378916,
        0.8711404628696638
      ],
      "excerpt": "{'inputs': 'translate German to English: Das ist gut.', 'targets': 'That is good.'} \nIn addition to text preprocessing, you can also use one or more token preprocessors to modify the inputs post-tokenization. We implemented our unsupervised pre-training objectives using these token preprocessors. \nWe provide many predefined preprocessors in t5.data.preprocessors, but you may also define your own. \nThe SentencePiece model is used to tokenize the input strings and decode the output tokens. You can create your own model with the google/sentencepiece library, or use our default one at t5.data.DEFAULT_SPM_PATH. If you create your own, you must use the flags --pad_id=0 --eos_id=1 --unk_id=2 --bos_id=-1 with spm_train to be compatible with our model code. \nThe metric function returns a score given the target and prediction from the model. You may also define a postprocess function to convert the target and prediction text to another format before calling the metric. We provide some predefined metrics in t5.evaluation.metrics. \nFinally, t5.data contains a Mixture class that can be instantiated to combine multiple Task datasets for multi-task training using various functions for specifying the mixture rates. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8094904219253037,
        0.9771223988189554,
        0.9790339474987432,
        0.9882631060041461,
        0.8457949264495881
      ],
      "excerpt": "utilities for applying these metrics at evaluation time \nt5.models contains shims for connecting T5 Tasks and Mixtures to a model implementation for training, evaluation, and inference. \nCurrently there are two shims available: One for the [Mesh TensorFlow Transformer][mtft] that we used in our paper and another for the Hugging Face Transformers library. \nThe Hugging Face API is currently experimental and subject to change, but provides a simple and easy way to load, fine-tune, and evaluate our pre-trained models using PyTorch on a single GPU. \nIf you want to use our largest models on TPUs and/or reproduce the results in our paper, you should use the MtfModel API and the t5_mesh_transformer binary. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9853899981353501,
        0.8403676954012252
      ],
      "excerpt": "Since the HfPyTorchModel is experimental, the remainder of this README assumes usage of the MtfModel and its associated binary. \nA usage example of HfPyTorchModel is available here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9651856483854434,
        0.982246332810838
      ],
      "excerpt": "Most of our predefined Tasks use [TensorFlow Datasets (TFDS)][tfds] as their data source. When you run our training binary (see instructions below) with a TfdsTask, the dataset will automatically be downloaded and prepared on its first use. After preparation is complete, the dataset is cached to your local storage to avoid this overhead in future runs.  If working in the cloud, we recommend you set the --t5_tfds_data_dir flag to point to a persistent storage location, such as a [GCS bucket][gcs]. This is a requirement when training on TPU. \nThe [C4][c4] dataset we created for unsupervised pre-training is available in TensorFlow Datasets, but it requires a significant amount of bandwidth for downloading the raw [Common Crawl][cc] scrapes (~7 TB) and compute for its preparation (~335 CPU-days). We suggest you take advantage of the [Apache Beam][beam] support in TFDS, which enables distributed preprocessing of the dataset and can be run on [Google Cloud Dataflow][gcd]. With 500 workers, the job should complete in ~16 hours. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9140161995161014,
        0.8496895304251911
      ],
      "excerpt": "There is no way to define a text processor, so the TSV will need to contain your data in a preprocessed format. \nThere is also currently no way to set a token preprocessor, postprocess function, or metric function for evaluation when using a TSV file directly. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8121722823790731,
        0.8888449110034131
      ],
      "excerpt": "Similar to the above cases, your TSV file(s) must be accessible to the TPU (i.e., are in a GCS bucket). \nIn the command below, we train a model on the GLUE Benchmark MRPC task from scratch. You can change the MIXTURE_NAME gin parameter to use any of the tasks or mixtures provided in our package. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9629962971611608
      ],
      "excerpt": "  --gcp_project=\"${PROJECT}\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8633833461810619
      ],
      "excerpt": "The full list of tasks and mixtures can be obtained by running: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.929095207315264
      ],
      "excerpt": "In order to fine-tune one of our pre-trained models, you need to pass the operative config of the pre-trained model to the training script. The operative config should be passed in as a gin_file flag. It specifies the model architecture and other hyperparameters. In addition, you need to specify the mixture to fine-tune on. For example, to fine-tune the T5-small model on the glue_mrpc_v002 mixture, please run: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9629962971611608
      ],
      "excerpt": "  --gcp_project=\"${PROJECT}\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.809504647691836
      ],
      "excerpt": "  --gin_file=\"gs://t5-data/pretrained_models/small/operative_config.gin\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9770015980980188
      ],
      "excerpt": "To fine-tune with the same hyperparameters we used in the [paper][paper] (using a constant learning rate of 0.001), you can pass in this gin file which is included in the T5 package: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8285306597501727
      ],
      "excerpt": "You can also use a different batch size for fine-tuning. We set the batch size according to the total number of tokens in a batch. By default, a batch uses a sequence length of 512. To set the number of tokens in a batch, you should set \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9104312196830935
      ],
      "excerpt": "In order to evaluate a model in the T5 framework, you need to use the eval.gin file, specify the model directory, decoding method, and which checkpoint step(s) to evaluate. So, to evaluate on the GLUE MRPC task using beam search on all checkpoints, use the following command: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9629962971611608
      ],
      "excerpt": "  --gcp_project=\"${PROJECT}\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8009512079859675,
        0.8872788319718352
      ],
      "excerpt": "  --gin_param=\"eval_checkpoint_step = 'all'\" \nTo evaluate a specific checkpoint, simply set the eval_checkpoint_step parameter to appropriate checkpoint. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9629962971611608
      ],
      "excerpt": "  --gcp_project=\"${PROJECT}\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8009512079859675,
        0.9151685340760687
      ],
      "excerpt": "  --gin_param=\"infer_checkpoint_step = 'all'\" \nTo predict with a specific checkpoint, simply set the infer_checkpoint_step parameter to appropriate checkpoint. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8894032483726932
      ],
      "excerpt": "You may also want to export a SavedModel, which is useful for serving your trained model, (e.g., when deploying with ML Engine or in a Docker image). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9629962971611608
      ],
      "excerpt": "  --gcp_project=\"${PROJECT}\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9783944870773987,
        0.9346808801400569,
        0.8388462901955878
      ],
      "excerpt": "The t5-deploy notebook demonstrates exporting a SavedModel and packaging it in a Docker image for serving. \nWe provide operative configs for all of the experiments in the [paper][paper] in gs://t5-data/experiments. \nThe experiments folder has different subdirectories corresponding to the different sections in our paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9443993815013229
      ],
      "excerpt": "Each subdirectory of the objectives folder contains operative configs for some particular experiment (where loosely speaking an \"experiment\" is one of the rows in one of the tables in our paper). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8072345539632845
      ],
      "excerpt": "Then, there are subdirectories for each of the downstream fine-tuning mixtures we consider, each of which has its own operative config (for example, gs://t5-data/experiments/objectives/obj-prefix_lm/cnn_dailymail_v002/operative_config.gin). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9629962971611608
      ],
      "excerpt": "  --gcp_project=\"${PROJECT}\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9629962971611608
      ],
      "excerpt": "  --gcp_project=\"${PROJECT}\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "  --gin_param=\"init_checkpoint = '${PRETRAIN_MODEL_DIR}/model.ckpt-524288'\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9961146064838204
      ],
      "excerpt": "of the below variants, add the group of flags to \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9106050150634234
      ],
      "excerpt": "Language model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9132887480470636
      ],
      "excerpt": "We have released the following checkpoints for pre-trained models described in our [paper][paper]: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Code for the paper \"Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer\"",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/google-research/text-to-text-transfer-transformer/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 539,
      "date": "Thu, 30 Dec 2021 07:51:06 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/google-research/text-to-text-transfer-transformer/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "google-research/text-to-text-transfer-transformer",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/google-research/text-to-text-transfer-transformer/main/notebooks/t5-deploy.ipynb",
      "https://raw.githubusercontent.com/google-research/text-to-text-transfer-transformer/main/notebooks/t5-trivia.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You will first need to launch a Virtual Machine (VM) on Google Cloud. Details about launching the VM can be found at the [Google Cloud Documentation](https://cloud.google.com/compute/docs/instances/create-start-instance).\n\nIn order to run training or eval on Cloud TPUs, you must set up the following variables based on your project, zone and GCS bucket appropriately. Please refer to the [Cloud TPU Quickstart](https://cloud.google.com/tpu/docs/quickstart) guide for more details.\n\n```sh\nexport PROJECT=your_project_name\nexport ZONE=your_project_zone\nexport BUCKET=gs://yourbucket/\nexport TPU_NAME=t5-tpu\nexport TPU_SIZE=v3-8\nexport DATA_DIR=\"${BUCKET}/your_data_dir\"\nexport MODEL_DIR=\"${BUCKET}/your_model_dir\"\n```\n\nPlease use the following command to create a TPU device in the Cloud VM.\n\n```sh\nctpu up --name=$TPU_NAME --project=$PROJECT --zone=$ZONE --tpu-size=$TPU_SIZE \\\n        --tpu-only --noconf\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "To install the T5 package, simply run:\n\n```sh\npip install t5[gcp]\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "You may either use a new or pre-existing `Task`, or you may load examples from a preprocessed TSV file.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.884469201104353
      ],
      "excerpt": "GPU Usage \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9250850359801611
      ],
      "excerpt": "If you are interested fine-tuning our models on a GPU in PyTorch, you should try the HfPyTorchModel API. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8745335039915848
      ],
      "excerpt": "Depending on your data source (see above), you will need to prepare your data appropriately. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8548155212785384,
        0.9910210531727922
      ],
      "excerpt": "After defining MY_PROJECT and MY_BUCKET appropriately, you can build the dataset in DataFlow from GCP using the following commands: \npip install tfds-nightly[c4] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8270299523161858
      ],
      "excerpt": "python -m tensorflow_datasets.scripts.download_and_prepare \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8362973781971202
      ],
      "excerpt": "Make sure your files are accessible to the TPU (i.e., are in a GCS bucket), and you should be good to go! \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8881276749812184
      ],
      "excerpt": "You can also use greedy_decode.gin or sample_decode.gin instead of beam_search.gin in the command above. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8881276749812184
      ],
      "excerpt": "You can also use beam_search.gin or greedy_decode.gin instead of sample_decode.gin in the command above. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8194842505323139
      ],
      "excerpt": "Dataset Preparation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8735750002412684
      ],
      "excerpt": "GPU Usage \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8699836679442406
      ],
      "excerpt": "text preprocessor function(s) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8568206076593858
      ],
      "excerpt": "The data source can be an arbitrary function that provides a tf.data.Dataset, but we also provide simpler wrappers for datasets available in [TensorFlow Datasets (TFDS)][tfds] (a TfdsTask) or stored as text files with one example per line (a TextLineTask). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8645159917764699
      ],
      "excerpt": "A usage example of HfPyTorchModel is available here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8862790262763057
      ],
      "excerpt": "A TextLineTask is useful when your data source is a text file (or files) with one example per line. You can then use a text preprocessor to convert each line into a dictionary of inputs and targets. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924976426181745,
        0.8924976426181745
      ],
      "excerpt": "  --gin_param=\"utils.tpu_mesh_shape.model_parallelism = 1\" \\ \n  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9743904774208516
      ],
      "excerpt": "python -c \"import t5; print(t5.data.MixtureRegistry.names())\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924976426181745,
        0.8924976426181745
      ],
      "excerpt": "  --gin_param=\"utils.tpu_mesh_shape.model_parallelism = 1\" \\ \n  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9215818214871311,
        0.8248766312215771
      ],
      "excerpt": "--gin_param=\"utils.run.train_dataset_fn = @t5.models.mesh_transformer.tsv_dataset_fn\" \n--gin_param=\"tsv_dataset_fn.filename = 'gs:/path/to/tsv'\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428
      ],
      "excerpt": "--gin_param=\"run.train_steps = 1010000\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8045378192983498,
        0.8924976426181745
      ],
      "excerpt": "  --gin_param=\"run.dataset_split = 'validation'\" \\ \n  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924976426181745
      ],
      "excerpt": "  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\"\\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.889846392544687
      ],
      "excerpt": "To run this experiment, first pre-train a model with the pre-training operative config: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924976426181745,
        0.8924976426181745
      ],
      "excerpt": "  --gin_param=\"utils.tpu_mesh_shape.model_parallelism = 1\" \\ \n  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8924976426181745,
        0.8924976426181745
      ],
      "excerpt": "  --gin_param=\"utils.tpu_mesh_shape.model_parallelism = 1\" \\ \n  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8174540907975313
      ],
      "excerpt": "Deterministic training \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9474605237582184
      ],
      "excerpt": "  --train_gin_param=\"utils.run.skip_seen_data = True\" \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9174323646705539
      ],
      "excerpt": "  --train_gin_param=\"utils.run.model_type = \\\"lm\\\"\" \\ \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/google-research/text-to-text-transfer-transformer/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'\\n                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "T5: Text-To-Text Transfer Transformer",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "text-to-text-transfer-transformer",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "google-research",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/google-research/text-to-text-transfer-transformer/blob/main/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "adarob",
        "body": "* Adds support for TF 2.0\r\n* Adds support for GPU training and inference.\r\n* Adds support for exporting CPU/GPU SavedModels.",
        "dateCreated": "2020-04-03T18:58:37Z",
        "datePublished": "2020-04-03T19:06:25Z",
        "html_url": "https://github.com/google-research/text-to-text-transfer-transformer/releases/tag/v0.4.0",
        "name": "v0.4.0",
        "tag_name": "v0.4.0",
        "tarball_url": "https://api.github.com/repos/google-research/text-to-text-transfer-transformer/tarball/v0.4.0",
        "url": "https://api.github.com/repos/google-research/text-to-text-transfer-transformer/releases/25184521",
        "zipball_url": "https://api.github.com/repos/google-research/text-to-text-transfer-transformer/zipball/v0.4.0"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3868,
      "date": "Thu, 30 Dec 2021 07:51:06 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The easiest way to try out T5 is with a free TPU in our [Colab Tutorial](https://colab.research.google.com/github/google-research/text-to-text-transfer-transformer/blob/main/notebooks/t5-trivia.ipynb).\n\nBelow we provide examples for how to pre-train, fine-tune, evaluate, and decode from a model from the command-line with our codebase. You can use these instructions to reproduce our results, fine-tune one of our released checkpoints with your own data and/or hyperparameters, or pre-train a model from scratch.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "If you would like to use GPU instead of TPUs, you can modify the above commands by removing TPU-specific flags (`--tpu`, `--tpu_zone`, `--gcp_project`) and setting the gin params for `mesh_shape` and `mesh_devices` based on your desired setup.\n\nFor example, if your machine has access to 6 GPUs and you'd like to do 3-way model parallelism and 2-way data parallelism, the fine-tuning command above would become:\n\n```sh\nt5_mesh_transformer  \\\n  --model_dir=\"${MODEL_DIR}\" \\\n  --t5_tfds_data_dir=\"${DATA_DIR}\" \\\n  --gin_file=\"dataset.gin\" \\\n  --gin_param=\"utils.run.mesh_shape = 'model:3,batch:2'\" \\\n  --gin_param=\"utils.run.mesh_devices = ['gpu:0','gpu:1','gpu:2','gpu:3','gpu:4','gpu:5']\" \\\n  --gin_param=\"MIXTURE_NAME = 'glue_mrpc_v002'\" \\\n  --gin_file=\"gs://t5-data/pretrained_models/small/operative_config.gin\"\n```\n\nWith a single GPU, the command is:\n\n```sh\nt5_mesh_transformer  \\\n  --model_dir=\"${MODEL_DIR}\" \\\n  --t5_tfds_data_dir=\"${DATA_DIR}\" \\\n  --gin_file=\"dataset.gin\" \\\n  --gin_param=\"utils.run.mesh_shape = 'model:1,batch:1'\" \\\n  --gin_param=\"utils.run.mesh_devices = ['gpu:0']\" \\\n  --gin_param=\"MIXTURE_NAME = 'glue_mrpc_v002'\" \\\n  --gin_file=\"gs://t5-data/pretrained_models/small/operative_config.gin\"\n```\n\n\n\n",
      "technique": "Header extraction"
    }
  ]
}