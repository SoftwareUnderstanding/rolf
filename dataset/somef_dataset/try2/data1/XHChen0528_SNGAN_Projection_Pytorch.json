{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- [sngan_projection](https://github.com/pfnet-research/sngan_projection)\n- [BigGAN-PyTorch](https://github.com/ajbrock/BigGAN-PyTorch)\n- [pytorch.sngan_projection](https://github.com/crcrpar/pytorch.sngan_projection)",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1802.05637",
      "https://arxiv.org/abs/1802.05637 (2018).](https://arxiv.org/abs/1802.05637)\n\n# Dependencies:\n- PyTorch1.0\n- numpy\n- scipy\n- tensorboardX\n- tqdm\n- [torchviz](https://github.com/szagoruyko/pytorchviz) pip install torchviz and [graphviz](http://www.graphviz.org/) sudo apt-get install graphviz\n\n# Usage:\nThere are two ways to run the training script:\n- Run the script directly (We recommend this way): `python3 main.py` or `python main.py`.\n    In this way, the training parameters can be modified by modifying the `parameter.py` parameter defaults.\n\n# Parameters\n|  Parameters   | Function  |\n|  :----  | :----  |\n| --version  | Experiment name |\n| --train  | Set the model stage, Ture---training stage; False---testing stage |\n| --experiment_description  | Descriptive text for this experiment  |\n| --total_step  | Totally training step |\n| --batch_size  | Batch size |\n| --g_lr  | Learning rate of generator |\n| --d_lr  | Learning rate of discriminator |\n| --parallel  | Enable the parallel training |\n| --dataset  | Set the dataset name,lsun,celeb,cifar10 |\n| --cuda  | Set GPU device number |\n| --image_path  | The root dir to training dataset |\n| --FID_mean_cov  | The root dir to dataset moments npz file |\n\n# Results\nWe have reproduced the FID (in Cifar-10, best result is FID=17.2) result reported in the paper.\n\nThe convergence curve of FID is as follows:\n\n![image](https://github.com/XHChen0528/SNGAN_Projection_Pytorch/blob/master/figures/fid_result.JPG)\n\n## CIFAR10 results\n200K:\n\n![image](https://github.com/XHChen0528/SNGAN_Projection_Pytorch/blob/master/figures/200000_fake.png)\n\n500K:\n\n![image](https://github.com/XHChen0528/SNGAN_Projection_Pytorch/blob/master/figures/500000_fake.png)\n\n600K:\n\n![image](https://github.com/XHChen0528/SNGAN_Projection_Pytorch/blob/master/figures/600000_fake.png)\n\n800K:\n\n![image](https://github.com/XHChen0528/SNGAN_Projection_Pytorch/blob/master/figures/800000_fake.png)\n\n1000K:\n\n![image](https://github.com/XHChen0528/SNGAN_Projection_Pytorch/blob/master/figures/1000000_fake.png)\n\n\n\n\n\n# Acknowledgement\n- [sngan_projection](https://github.com/pfnet-research/sngan_projection)\n- [BigGAN-PyTorch](https://github.com/ajbrock/BigGAN-PyTorch)\n- [pytorch.sngan_projection](https://github.com/crcrpar/pytorch.sngan_projection"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9996459340580869
      ],
      "excerpt": "Miyato, Takeru, and Masanori Koyama. \"cGANs with projection discriminator.\" arXiv preprint arXiv:1802.05637 (2018). \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/neuralchen/SNGAN_Projection",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-09-11T17:03:24Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-11T18:05:12Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9906215949009196
      ],
      "excerpt": "This is an unofficial PyTorch implementation of sngan_projection \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8294735643120554
      ],
      "excerpt": "| --g_lr  | Learning rate of generator | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9548244802195335
      ],
      "excerpt": "The convergence curve of FID is as follows: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "An unofficial PyTorch implementation of SNGAN (ICLR 2018) and cGANs with projection discriminator (ICLR 2018)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/XHChen0528/SNGAN_Projection_Pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Fri, 24 Dec 2021 15:27:33 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/neuralchen/SNGAN_Projection/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "neuralchen/SNGAN_Projection",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9343778106612105
      ],
      "excerpt": "| --version  | Experiment name | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9048146202618774
      ],
      "excerpt": "| --cuda  | Set GPU device number | \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.806231503790735
      ],
      "excerpt": "| --batch_size  | Batch size | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8535636471387829
      ],
      "excerpt": "| --dataset  | Set the dataset name,lsun,celeb,cifar10 | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8026786500148446
      ],
      "excerpt": "| --image_path  | The root dir to training dataset | \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/neuralchen/SNGAN_Projection/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Six_God\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "GANs with spectral normalization and projection discriminator",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "SNGAN_Projection",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "neuralchen",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/neuralchen/SNGAN_Projection/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- PyTorch1.0\n- numpy\n- scipy\n- tensorboardX\n- tqdm\n- [torchviz](https://github.com/szagoruyko/pytorchviz) pip install torchviz and [graphviz](http://www.graphviz.org/) sudo apt-get install graphviz\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 11,
      "date": "Fri, 24 Dec 2021 15:27:33 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "deep-learning",
      "gan",
      "generative-adversarial-network",
      "conditional-gan",
      "cgan",
      "cifar10"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "There are two ways to run the training script:\n- Run the script directly (We recommend this way): `python3 main.py` or `python main.py`.\n    In this way, the training parameters can be modified by modifying the `parameter.py` parameter defaults.\n\n",
      "technique": "Header extraction"
    }
  ]
}