{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1905.01164",
      "https://arxiv.org/abs/1607.08022",
      "https://arxiv.org/abs/1704.00028"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/cryu854/SinGAN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-05-18T08:12:39Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-09T06:52:50Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9838795184535069,
        0.9504976107049639
      ],
      "excerpt": "This is an implementation of SinGAN on Python 3 and Tensorflow 2.  \nSinGAN is an unconditional generative model that can be learned from a single natural image, and is then able to generate diverse realistic image samples with new object shapes and structures while preserving the original image distribution, making it very useful in various image manipulation tasks. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9917754306308606,
        0.9196779858130302
      ],
      "excerpt": "The multi-scale network is roughly based on the SinGAN paper,  with zero-pad the inputs to the generator(both image and noise) instead of padding in each layer, increasing the variability at corners, and replace batch normalization with instance normalization, since instance-norm is more suitable for generative model. \nThe WGAN-GP objective function is a bit different from the \"regular\" WGAN-GP which trained on a dataset of images, the intention is to maintain 1-lipschitz condition in a patch manner, as the output of discriminator is a map of score per patch. Therefore, the gradient norms are computed by slopes = tf.sqrt(tf.reduce_sum(tf.square(gradients), axis=[3])).  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567395838060984
      ],
      "excerpt": "The training configuration follows supplementary material, and all the examples of this repository were generated from the same network with 8 scales. The training takes 40~50 minutes on a GTX 1060 3GB . \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9559269280705192
      ],
      "excerpt": "Results of Editing and Harmonization : \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9788338973677785
      ],
      "excerpt": "Results of Paint to image : \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "\"SinGAN : Learning a Generative Model from a Single Natural Image\" in TensorFlow 2",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/cryu854/SinGAN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Tue, 28 Dec 2021 00:50:12 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/cryu854/SinGAN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "cryu854/SinGAN",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.9033091292649842
      ],
      "excerpt": "<img src = 'images/src/applications.PNG' height = '360px'> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8446679909773326
      ],
      "excerpt": "The WGAN-GP objective function is a bit different from the \"regular\" WGAN-GP which trained on a dataset of images, the intention is to maintain 1-lipschitz condition in a patch manner, as the output of discriminator is a map of score per patch. Therefore, the gradient norms are computed by slopes = tf.sqrt(tf.reduce_sum(tf.square(gradients), axis=[3])).  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9083525711348268
      ],
      "excerpt": "<img src = 'images/src/architecture.PNG' height = '300px'> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9010448609661241
      ],
      "excerpt": "Use main.py to train a new SinGAN model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.925619830435868,
        0.9206212574583632
      ],
      "excerpt": "Example usage: \npython main.py train --image ./path/to/image.jpg --num_scales 8 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9344049002332512
      ],
      "excerpt": "<img src = 'images/src/effect_training_scales.PNG' height = '240px'> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8177493243063597
      ],
      "excerpt": "Use main.py to generate new image.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.925619830435868,
        0.8988301644211564
      ],
      "excerpt": "Example usage: \npython main.py inference --image ./path/to/inference_image.jpg  --dir ./weights_dir  --mode random_sample  --inject_scale 0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9344049002332512
      ],
      "excerpt": "<img src = 'images/src/random_generate.PNG' height = '240px'> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8178028224675028
      ],
      "excerpt": "Use main.py to manipulate image.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.925619830435868,
        0.8573691364723326
      ],
      "excerpt": "Example usage: \npython main.py inference --image ./path/to/inference_image.jpg  --dir ./weights_dir  --mode editing  --inject_scale 1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9098320438488601
      ],
      "excerpt": "<img src = 'images/src/manipulation.PNG' height = '280px'> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9344049002332512
      ],
      "excerpt": "<img src = 'images/src/paint2image.PNG' height = '160px'> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/cryu854/SinGAN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "SinGAN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "SinGAN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "cryu854",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/cryu854/SinGAN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "You will need the following to run the above:\n- TensorFlow >= 2.0\n- Python 3, Pillow 7.0.0, Numpy 1.18\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 8,
      "date": "Tue, 28 Dec 2021 00:50:12 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "deep-learning",
      "neural-network",
      "tensorflow",
      "tensorflow2",
      "keras",
      "gan",
      "singan",
      "harmonization",
      "editing",
      "image-generation"
    ],
    "technique": "GitHub API"
  }
}