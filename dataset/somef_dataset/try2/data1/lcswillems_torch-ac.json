{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lcswillems/torch-ac",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-04-07T08:47:24Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-18T05:04:44Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9783036573541264
      ],
      "excerpt": "The torch_ac package contains the PyTorch implementation of two Actor-Critic deep reinforcement learning algorithms: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9781297496731787
      ],
      "excerpt": "Note: An example of use of this package is given in the rl-starter-files repository. More details below. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8022717752504189
      ],
      "excerpt": "Handle observation spaces that are tensors or dict of tensors \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9638732559740116,
        0.8802085007537686,
        0.9244664635030015,
        0.9453023434925063,
        0.8762211513009431
      ],
      "excerpt": "A brief overview of the components of the package: \ntorch_ac.A2CAlgo and torch_ac.PPOAlgo classes for A2C and PPO algorithms \ntorch_ac.ACModel and torch_ac.RecurrentACModel abstract classes for non-recurrent and recurrent actor-critic models \ntorch_ac.DictList class for making dictionnaries of lists list-indexable and hence batch-friendly \nHere are detailled the most important components of the package. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.880177457772699,
        0.800637858715373,
        0.9224991496784277,
        0.9626887196700495
      ],
      "excerpt": "    - an acmodel actor-critic model, i.e. an instance of a class inheriting from either torch_ac.ACModel or torch_ac.RecurrentACModel. \n    - a preprocess_obss function that transforms a list of observations into a list-indexable object X (e.g. a PyTorch tensor). The default preprocess_obss function converts observations into a PyTorch tensor. \n    - a reshape_reward function that takes into parameter an observation obs, the action action taken, the reward reward received and the terminal status done and returns a new reward. By default, the reward is not reshaped. \n    - a recurrence number to specify over how many timesteps gradient is backpropagated. This number is only taken into account if a recurrent model is used and must divide the num_frames_per_agent parameter and, for PPO, the batch_size parameter. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9356219433900261,
        0.9559167574311415
      ],
      "excerpt": "- __init__ that takes into parameter an observation_space and an action_space. \n- forward that takes into parameter N preprocessed observations obs and returns a PyTorch distribution dist and a tensor of values value. The tensor of values must be of size N, not N x 1. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8519329920795397,
        0.9752411040025337,
        0.9206597912726604
      ],
      "excerpt": "- __init__ that takes into parameter the same parameters than torch_ac.ACModel. \n- forward that takes into parameter the same parameters than torch_ac.ACModel along with a tensor of N memories memory of size N x M where M is the size of a memory. It returns the same thing than torch_ac.ACModel plus a tensor of N memories memory. \n- memory_size that returns the size M of a memory. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Recurrent and multi-process PyTorch implementation of deep reinforcement Actor-Critic algorithms A2C and PPO",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lcswillems/torch-ac/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 50,
      "date": "Fri, 24 Dec 2021 22:00:00 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lcswillems/torch-ac/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "lcswillems/torch-ac",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\npip3 install torch-ac\n```\n\n**Note:** If you want to modify `torch-ac` algorithms, you will need to rather install a cloned version, i.e.:\n```\ngit clone https://github.com/lcswillems/torch-ac.git\ncd torch-ac\npip3 install -e .\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lcswillems/torch-ac/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Lucas Willems\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "PyTorch Actor-Critic deep reinforcement learning algorithms: A2C and PPO",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "torch-ac",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "lcswillems",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lcswillems/torch-ac/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 118,
      "date": "Fri, 24 Dec 2021 22:00:00 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "pytorch",
      "reinforcement-learning",
      "actor-critic",
      "deep-reinforcement-learning",
      "multi-process",
      "minigrid",
      "a2c",
      "a3c",
      "ppo",
      "advantage-actor-critic",
      "proximal-policy-optimization",
      "recurrent",
      "reward-shaping",
      "recurrent-neural-networks"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Examples of use of the package components are given in the [`rl-starter-scripts` repository](https://github.com/lcswillems/torch-rl).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```python\n...\n\nalgo = torch_ac.PPOAlgo(envs, acmodel, args.frames_per_proc, args.discount, args.lr, args.gae_lambda,\n                        args.entropy_coef, args.value_loss_coef, args.max_grad_norm, args.recurrence,\n                        args.optim_eps, args.clip_eps, args.epochs, args.batch_size, preprocess_obss)\n\n...\n\nexps, logs1 = algo.collect_experiences()\nlogs2 = algo.update_parameters(exps)\n```\n\nMore details [here](https://github.com/lcswillems/rl-starter-files/blob/master/scripts/train.py).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```python\ntorch_ac.DictList({\n    \"image\": preprocess_images([obs[\"image\"] for obs in obss], device=device),\n    \"text\": preprocess_texts([obs[\"mission\"] for obs in obss], vocab, device=device)\n})\n```\n\nMore details [here](https://github.com/lcswillems/rl-starter-files/blob/master/utils/format.py).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```python\nclass ACModel(nn.Module, torch_ac.RecurrentACModel):\n    ...\n\n    def forward(self, obs, memory):\n        ...\n\n        return dist, value, memory\n```\n\nMore details [here](https://github.com/lcswillems/rl-starter-files/blob/master/model.py).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "More details [here](https://github.com/lcswillems/rl-starter-files/blob/master/utils/format.py).\n",
      "technique": "Header extraction"
    }
  ]
}