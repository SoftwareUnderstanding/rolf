{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1606.03498\n- [2] \"GANs Trained by a Two Time-Scale Update Rule Converge to a Local Nash Equilibrium\", https://arxiv.org/abs/1706.08500\n- [3] \"Assessing Generative Models via Precision and Recall\", https://arxiv.org/abs/1806.00035\n- [4] \"An empirical study on evaluation metrics of generative adversarial networks\", https://arxiv.org/abs/1806.07755",
      "https://arxiv.org/abs/1706.08500\n- [3] \"Assessing Generative Models via Precision and Recall\", https://arxiv.org/abs/1806.00035\n- [4] \"An empirical study on evaluation metrics of generative adversarial networks\", https://arxiv.org/abs/1806.07755",
      "https://arxiv.org/abs/1806.00035\n- [4] \"An empirical study on evaluation metrics of generative adversarial networks\", https://arxiv.org/abs/1806.07755",
      "https://arxiv.org/abs/1806.07755"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- [1] \"Improved Techniques for Training GANs\", https://arxiv.org/abs/1606.03498\n- [2] \"GANs Trained by a Two Time-Scale Update Rule Converge to a Local Nash Equilibrium\", https://arxiv.org/abs/1706.08500\n- [3] \"Assessing Generative Models via Precision and Recall\", https://arxiv.org/abs/1806.00035\n- [4] \"An empirical study on evaluation metrics of generative adversarial networks\", https://arxiv.org/abs/1806.07755\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.957894423531416
      ],
      "excerpt": "a tool for evaluation video GANs. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/raahii/evan",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-12-27T10:07:29Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-09T07:15:24Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": ":mag: python package to evaluate GANs for video generation",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/raahii/video-gans-evaluation/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Wed, 29 Dec 2021 22:02:01 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/raahii/evan/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "raahii/evan",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/raahii/video-gans-evaluation/master/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Required \n\n- Python 3.6 or higher\n- [FFmpeg](https://github.com/adaptlearning/adapt_authoring/wiki/Installing-FFmpeg)\n\n```\n$ pip install evan\n```\n\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8972971074395524
      ],
      "excerpt": "usage: evan [-h] {compute,plot} ... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8081597051617336
      ],
      "excerpt": "  command names. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/raahii/evan/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Dockerfile",
      "Makefile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Installation",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "evan",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "raahii",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/raahii/evan/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 17,
      "date": "Wed, 29 Dec 2021 22:02:01 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "gan",
      "gans",
      "video-generation",
      "deep-learning",
      "deep-neural-networks",
      "generative-adversarial-network",
      "video",
      "videos"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "See examples directory or docs for details.\n\n```python\nimport torch\nfrom pathlib import Path\nimport skvideo.io\nimport evan\n\ngen = YourGenerater()\nN = 5000\nbatchsize = 100\ntemp = tempfile.TemporaryDirectory()\ntemp_dir = Path(temp.name)\nfps = 30\n\n#: generate video samples by your GAN and\n#: save them into a directory in .mp4\nfor batch in range(0, N, batchsize):\n\txs = gen.generate(batchsize) #: (B, T, H, W, C)\n\tfor i, x in enumerate(xs):\n\t\tpath = str(temp_dir / f\"{i}.mp4\")\n\t\twriter = skvideo.io.FFmpegWriter(path, inputdict={\"-r\": str(fps)})\n\t\tfor frame in video:\n        writer.writeFrame(frame)\n\n#: compute Inception Score by using evan\nscore = evan.compute_inception_score(\n\ttemp_dir, batchsize=batchsize, verbose=True\n)\n#: >> found 10000 samples.\n#: >> converting videos into conv features using inception model (on gpu)...\n#:     100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [XX:XX<XX:XX, XX.XX s/it]\n#: >> computing IS...\n#:     generated samples: '/var/folders/k4/xxx/probs.npy'\n\nprint(score)\ntemp.cleanup()\n```\n\n\n\n",
      "technique": "Header extraction"
    }
  ]
}