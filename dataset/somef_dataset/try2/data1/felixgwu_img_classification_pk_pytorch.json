{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This code is based on the ImageNet training script provided in [PyTorch examples](https://github.com/pytorch/examples/blob/master/imagenet/main.py).\n\nThe author is not familiar with licensing. Please contact me there is there are any problems with it.\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1708.04552",
      "https://arxiv.org/abs/1512.03385",
      "https://arxiv.org/abs/1603.09382"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "- CIFAR-10 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/felixgwu/img_classification_pk_pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-04-01T07:33:45Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-24T02:55:02Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- *main.py*: main script to train or evaluate models\n- *train.py*: training and evaluation part of the code\n- *config*: storing configuration of datasets (and maybe other things in the future)\n- *utils.pypy*: useful functions\n- *getbest.py*: display the best validation error of each saving folder\n- *dataloader.py*: defines *getDataloaders* function which is used to load datasets\n- *models*: a folder storing all network models. Each script in it should contain a *createModel(\\*\\*kwargs)* function that takes the arguments and return a model (subclass of nn.Module) for training\n- *scripts*: a folder storing example training commands in UNIX shell scripts\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9466040806116275
      ],
      "excerpt": "This repo is designed for those who want to start their experiments two days before the deadline and kill the project in the last 6 hours. :new_moon_with_face: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.913362679934772
      ],
      "excerpt": "You can write your own model in a .py file and put it into models folder. All you need it to provide a createModel(arg1, arg2, **kwarg) function that returns the model which is an instance of nn.Module. Then you'll be able to use your model by setting --arch your_model_name (assuming that your model is in a the file models/your_model_name). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8936805070302876
      ],
      "excerpt": "In short, this script reads the scores.tsv in the saving folders and display the best validation errors of them. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9658638225053342
      ],
      "excerpt": "Last 5000 samples in the original training set is used for validation. Each pixel is in [0, 1]. Based on experiments results, normalizing the data to zero mean and unit standard deviation seems to be redundant. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Quickly comparing your image classification models with the state-of-the-art models (such as DenseNet, ResNet, ...)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/felixgwu/img_classification_pk_pytorch/releases",
    "technique": "GitHub API"
  },
  "faq": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The number of parameters are calculated based on CIFAR-10 model.\nResNets were training with 164 epochs (the same as the default setting in fb.resnet.torch) and DenseNets were trained 300 epochs.\nBoth are using batch\\_size=64.\n\n| Model                                   | Parameters | CIFAR-10 | CIFAR-10 (aug) | CIFAR-100 | CIFAR-100 (aug) |\n|-----------------------------------------| -----------|----------|-----------|-----------|------------|\n| ResNet-56                               | 0.86M      |          | 6.82      |           |            |\n| ResNet-110                              | 1.73M      |          |           |           |            |\n| ResNet-110 with Stochastic Depth        | 1.73M      |          | 5.25      |           | 24.2       |\n| DenseNet-BC-100 (k=12)                  | 0.8M       |          | 5.34      |           |            |\n| DenseNet-BC-190 (k=40)                  | 25.6M      |          |           |           |            |\n| Your model                              |            |          |           |           |            |\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Coming soon...\n\n",
      "technique": "Header extraction"
    }
  ],
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 72,
      "date": "Tue, 28 Dec 2021 13:05:49 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/felixgwu/img_classification_pk_pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "felixgwu/img_classification_pk_pytorch",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/felixgwu/img_classification_pk_pytorch/master/scripts/cifar100.sh",
      "https://raw.githubusercontent.com/felixgwu/img_classification_pk_pytorch/master/scripts/cifar10.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The number of parameters are calculated based on CIFAR-10 model.\nResNets were training with 164 epochs (the same as the default setting in fb.resnet.torch) and DenseNets were trained 300 epochs.\nBoth are using batch\\_size=64.\n\n| Model                                   | Parameters | CIFAR-10 | CIFAR-10 (aug) | CIFAR-100 | CIFAR-100 (aug) |\n|-----------------------------------------| -----------|----------|-----------|-----------|------------|\n| ResNet-56                               | 0.86M      |          | 6.82      |           |            |\n| ResNet-110                              | 1.73M      |          |           |           |            |\n| ResNet-110 with Stochastic Depth        | 1.73M      |          | 5.25      |           | 24.2       |\n| DenseNet-BC-100 (k=12)                  | 0.8M       |          | 5.34      |           |            |\n| DenseNet-BC-190 (k=40)                  | 25.6M      |          |           |           |            |\n| Your model                              |            |          |           |           |            |\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "- Ask before overwriting existing experiments, and move the old one to /tmp instead of overwriting\n- Saving training/validation loss, errors, and learning rate of each epoch to a TSV file\n- Automatically copying all source code to saving directory to prevent accidental deleteion of codes. This is inspired by [SGAN code](https://github.com/xunhuang1995/SGAN/tree/master/mnist).\n- [TensorBoard](https://www.tensorflow.org/get_started/summaries_and_tensorboard) support using [tensorboard\\_logger](https://github.com/TeamHG-Memex/tensorboard_logger)\n- One script to show all experiment results\n- Display training time\n- Holding out testing set and using validation set for hyperparameter tuning experiments\n- GPU support\n- Adding *save* & *data* folders to .gitignore to prevent commiting the datasets and trained models\n- Result table\n- Python 2.7 & 3.5 support\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9845050939592135
      ],
      "excerpt": "Updated to PyTorch version >= 0.4 \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8386894218880788
      ],
      "excerpt": "Train a ResNet-56 on CIFAR-10 with data augmentation using GPU0: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9201621132171101,
        0.8405026363036397
      ],
      "excerpt": "CUDA_VISIBLE_DEVICES=0 python main.py --data cifar10 --data_aug --arch resnet --depth 56 --save save/cifar10 -resnet-56 --epochs 164 \nTrain a ResNet-110 on CIFAR-100 without data augmentation using GPU0 and GPU2: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9227582286481099
      ],
      "excerpt": "CUDA_VISIBLE_DEVICES=0,2 python main.py --data cifar100 --arch resnet --depth 110 --save save/cifar100-resnet-110 --epochs 164 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9490955285155019
      ],
      "excerpt": "python main.py --resume save/resnet-56/model_best.pth.tar --evaluate test --data cifar10 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8913762373230715
      ],
      "excerpt": "getbest.py save/* FOLDER_1 FOLDER_2 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8157399092586706
      ],
      "excerpt": "Last 5000 samples in the original training set is used for validation. Each pixel is in [0, 1]. Based on experiments results, normalizing the data to zero mean and unit standard deviation seems to be redundant. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/felixgwu/img_classification_pk_pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Image Classification Project Killer in PyTorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "img_classification_pk_pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "felixgwu",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/felixgwu/img_classification_pk_pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 332,
      "date": "Tue, 28 Dec 2021 13:05:49 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "pytorch",
      "cifar",
      "deep-learning",
      "computer-vision"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Both Python 2.7 and 3 are supported; however, it was mainly tested on Python 3.\nUse `python main.py -h` to show all arguments.\n\n\n",
      "technique": "Header extraction"
    }
  ]
}