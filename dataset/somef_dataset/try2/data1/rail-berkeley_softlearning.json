{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1812.05905",
      "https://arxiv.org/abs/1804.02808",
      "https://arxiv.org/abs/1801.01290",
      "https://arxiv.org/abs/1803.06773",
      "https://arxiv.org/abs/1702.08165",
      "https://arxiv.org/abs/1812.05905"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The algorithms are based on the following papers:\n\n*Soft Actor-Critic Algorithms and Applications*.</br>\nTuomas Haarnoja*, Aurick Zhou*, Kristian Hartikainen*, George Tucker, Sehoon Ha, Jie Tan, Vikash Kumar, Henry Zhu, Abhishek Gupta, Pieter Abbeel, and Sergey Levine.\narXiv preprint, 2018.</br>\n[paper](https://arxiv.org/abs/1812.05905)  |  [videos](https://sites.google.com/view/sac-and-applications)\n\n*Latent Space Policies for Hierarchical Reinforcement Learning*.</br>\nTuomas Haarnoja*, Kristian Hartikainen*, Pieter Abbeel, and Sergey Levine.\nInternational Conference on Machine Learning (ICML), 2018.</br>\n[paper](https://arxiv.org/abs/1804.02808) | [videos](https://sites.google.com/view/latent-space-deep-rl)\n\n*Soft Actor-Critic: Off-Policy Maximum Entropy Deep Reinforcement Learning with a Stochastic Actor*.</br>\nTuomas Haarnoja, Aurick Zhou, Pieter Abbeel, and Sergey Levine.\nInternational Conference on Machine Learning (ICML), 2018.</br>\n[paper](https://arxiv.org/abs/1801.01290) | [videos](https://sites.google.com/view/soft-actor-critic)\n\n*Composable Deep Reinforcement Learning for Robotic Manipulation*.</br>\nTuomas Haarnoja, Vitchyr Pong, Aurick Zhou, Murtaza Dalal, Pieter Abbeel, Sergey Levine.\nInternational Conference on Robotics and Automation (ICRA), 2018.</br>\n[paper](https://arxiv.org/abs/1803.06773) | [videos](https://sites.google.com/view/composing-real-world-policies)\n\n*Reinforcement Learning with Deep Energy-Based Policies*.</br>\nTuomas Haarnoja*, Haoran Tang*, Pieter Abbeel, Sergey Levine.\nInternational Conference on Machine Learning (ICML), 2017.</br>\n[paper](https://arxiv.org/abs/1702.08165) | [videos](https://sites.google.com/view/softqlearning/home)\n\nIf Softlearning helps you in your academic research, you are encouraged to cite our paper. Here is an example bibtex:\n```\n@techreport{haarnoja2018sacapps,\n  title={Soft Actor-Critic Algorithms and Applications},\n  author={Tuomas Haarnoja and Aurick Zhou and Kristian Hartikainen and George Tucker and Sehoon Ha and Jie Tan and Vikash Kumar and Henry Zhu and Abhishek Gupta and Pieter Abbeel and Sergey Levine},\n  journal={arXiv preprint arXiv:1812.05905},\n  year={2018}\n}\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@techreport{haarnoja2018sacapps,\n  title={Soft Actor-Critic Algorithms and Applications},\n  author={Tuomas Haarnoja and Aurick Zhou and Kristian Hartikainen and George Tucker and Sehoon Ha and Jie Tan and Vikash Kumar and Henry Zhu and Abhishek Gupta and Pieter Abbeel and Sergey Levine},\n  journal={arXiv preprint arXiv:1812.05905},\n  year={2018}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8283216015784888
      ],
      "excerpt": "  --algorithm ALGORITHM \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8893977543919693
      ],
      "excerpt": "  --checkpoint-at-end CHECKPOINT_AT_END \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rail-berkeley/softlearning",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-12-03T05:55:54Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-22T19:55:30Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9915672974198556,
        0.9097077346041981
      ],
      "excerpt": "Softlearning is a deep reinforcement learning toolbox for training maximum entropy policies in continuous domains. The implementation is fairly thin and primarily optimized for our own development purposes. It utilizes the tf.keras modules for most of the model classes (e.g. policies and value functions). We use Ray for the experiment orchestration. Ray Tune and Autoscaler implement several neat features that enable us to seamlessly run the same experiment scripts that we use for local prototyping to launch large-scale experiments on any chosen cloud service (e.g. GCP or AWS), and intelligently parallelize and distribute training for effective resource allocation. \nThis implementation uses Tensorflow. For a PyTorch implementation of soft actor-critic, take a look at rlkit. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8009512079859675
      ],
      "excerpt": "    --rmi all \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8849124738184573
      ],
      "excerpt": "    --checkpoint-frequency 1000  #: Save the checkpoint to resume training later \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9526914666674348,
        0.8666197120353879
      ],
      "excerpt": "                        that the replay pool is saved (and constructed) piece \n                        by piece so that each experience is saved only once. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8683373372838626,
        0.8992388744415213
      ],
      "excerpt": "                        Save frequency for videos. \n  --cpus CPUS           Cpus to allocate to ray process. Passed to `ray.init`. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8992388744415213
      ],
      "excerpt": "                        Resources to allocate to ray process. Passed to \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.937333503708753
      ],
      "excerpt": "                        which is a Jupyter notebook. Passed to `ray.init`. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8631556685273185
      ],
      "excerpt": "                        Resources to allocate for each trial. Passed to \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9490153421123648,
        0.932319319978498,
        0.8469823441422287
      ],
      "excerpt": "                        CPUs to allocate for each trial. Note: this is only \n                        used for Ray's internal scheduling bookkeeping, and is \n                        not an actual hard limit for CPUs. Passed to \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9367737609488193,
        0.932319319978498,
        0.847241252062059
      ],
      "excerpt": "                        GPUs to allocate for each trial. Note: this is only \n                        used for Ray's internal scheduling bookkeeping, and is \n                        not an actual hard limit for GPUs. Passed to \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8733971594085799
      ],
      "excerpt": "  --checkpoint-frequency CHECKPOINT_FREQUENCY \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8733971594085799
      ],
      "excerpt": "    --checkpoint-frequency 1000 \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Softlearning is a reinforcement learning framework for training maximum entropy policies in continuous domains. Includes the official implementation of the Soft Actor-Critic algorithm.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rail-berkeley/softlearning/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 201,
      "date": "Thu, 23 Dec 2021 10:53:56 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/rail-berkeley/softlearning/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "rail-berkeley/softlearning",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/rail-berkeley/softlearning/master/scripts/test-cloud-build.sh",
      "https://raw.githubusercontent.com/rail-berkeley/softlearning/master/scripts/deploy-aws.sh",
      "https://raw.githubusercontent.com/rail-berkeley/softlearning/master/docker/entrypoint.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. [Download](https://www.roboti.us/index.html) and install MuJoCo 1.50 and 2.00 from the MuJoCo website. We assume that the MuJoCo files are extracted to the default location (`~/.mujoco/mjpro150` and `~/.mujoco/mujoco200_{platform}`). Unfortunately, `gym` and `dm_control` expect different paths for MuJoCo 2.00 installation, which is why you will need to have it installed both in `~/.mujoco/mujoco200_{platform}` and `~/.mujoco/mujoco200`. The easiest way is to create a symlink from `~/.mujoco/mujoco200_{plaftorm}` -> `~/.mujoco/mujoco200` with: `ln -s ~/.mujoco/mujoco200_{platform} ~/.mujoco/mujoco200`.\n\n2. Copy your MuJoCo license key (mjkey.txt) to ~/.mujoco/mjkey.txt:\n\n3. Clone `softlearning`\n```\ngit clone https://github.com/rail-berkeley/softlearning.git ${SOFTLEARNING_PATH}\n```\n\n4. Create and activate conda environment, install softlearning to enable command line interface.\n```\ncd ${SOFTLEARNING_PATH}\nconda env create -f environment.yml\nconda activate softlearning\npip install -e ${SOFTLEARNING_PATH}\n```\n\nThe environment should be ready to run. See examples section for examples of how to train and simulate the agents.\n\nFinally, to deactivate and remove the conda environment:\n```\nconda deactivate\nconda remove --name softlearning --all\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8244453191770256
      ],
      "excerpt": "                        variant['run_params']['checkpoint_replay_pool']. Note \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521,
        0.8894920956164994
      ],
      "excerpt": "  --trial-name-template TRIAL_NAME_TEMPLATE \n                        Optional string template for trial name. For example: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8559984414618247
      ],
      "excerpt": "See examples section for examples of how to train and simulate the agents. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8315433503509261
      ],
      "excerpt": "To train the agent \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8117680862247455
      ],
      "excerpt": "    --exp-name my-sac-experiment-1 \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8065610455479955
      ],
      "excerpt": "python -m examples.development.simulate_policy \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8465762271935425
      ],
      "excerpt": "examples.development.main contains several different environments and there are more example scripts available in the  /examples folder. For more information about the agents and configurations, run the scripts with --help flag: python ./examples/development/main.py --help \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8274889361475517
      ],
      "excerpt": "  --exp-name EXP_NAME \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428,
        0.8005666633078434
      ],
      "excerpt": "  --run-eagerly RUN_EAGERLY \n                        Whether to run tensorflow in eager mode. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8379723420781929
      ],
      "excerpt": "                        Destination local folder to save training results. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428
      ],
      "excerpt": "                        `tune.run`. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428
      ],
      "excerpt": "                        `tune.run`. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428
      ],
      "excerpt": "                        `tune.run`. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8169917415460671
      ],
      "excerpt": "  --num-samples NUM_SAMPLES \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428
      ],
      "excerpt": "                        `tune.run`. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8423131625785935
      ],
      "excerpt": "                        Optional string template for trial name. For example: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428
      ],
      "excerpt": "                        `tune.run`. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428,
        0.8647333478730717
      ],
      "excerpt": "                        `tune.run`. \nIn order to resume training from previous checkpoint, run the original example main-script, with an additional --restore flag. For example, the previous example can be resumed as follows: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8117680862247455
      ],
      "excerpt": "    --exp-name my-sac-experiment-1 \\ \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/rail-berkeley/softlearning/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/rail-berkeley/softlearning/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 Softlearning authors and contributors\\n\\nSoftlearning uses a shared copyright model: each contributor holds copyright over\\ntheir contributions to Softlearning. The project versioning records all such\\ncontribution and copyright details.\\n\\nBy contributing to the Softlearning repository through pull-request, comment,\\nor otherwise, the contributor releases their content to the license and\\ncopyright terms herein.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Softlearning",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "softlearning",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "rail-berkeley",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rail-berkeley/softlearning/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The environment can be run either locally using conda or inside a docker container. For conda installation, you need to have [Conda](https://conda.io/docs/user-guide/install/index.html) installed. For docker installation you will need to have [Docker](https://docs.docker.com/engine/installation/) and [Docker Compose](https://docs.docker.com/compose/install/) installed. Also, most of our environments currently require a [MuJoCo](https://www.roboti.us/license.html) license.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 854,
      "date": "Thu, 23 Dec 2021 10:53:56 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "reinforcement-learning",
      "soft-actor-critic",
      "deep-learning",
      "deep-reinforcement-learning",
      "deep-neural-networks",
      "machine-learning"
    ],
    "technique": "GitHub API"
  }
}