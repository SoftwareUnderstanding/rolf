{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2105.14242",
      "https://arxiv.org/abs/2105.14242"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n@article{jung2021commitbert,\n  title={CommitBERT: Commit Message Generation Using Pre-Trained Programming Language Model},\n  author={Jung, Tae-Hwan},\n  journal={arXiv preprint arXiv:2105.14242},\n  year={2021}\n}\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{jung2021commitbert,\n  title={CommitBERT: Commit Message Generation Using Pre-Trained Programming Language Model},\n  author={Jung, Tae-Hwan},\n  journal={arXiv preprint arXiv:2105.14242},\n  year={2021}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.970637128888202,
        0.8704036156874201,
        0.9217379280481715
      ],
      "excerpt": "<a href=\"https://github.com/graykode/commit-autosuggestions/blob/master/LICENSE\"><img alt=\"License: Apache 2.0\" src=\"https://img.shields.io/badge/License-Apache%202.0-blue.svg\"></a> \n<a href=\"https://pypi.org/project/commit/\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/commit\"></a> \n<a href=\"https://pepy.tech/project/commit\"><img alt=\"Downloads\" src=\"https://static.pepy.tech/badge/commit\"></a> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/graykode/commit-autosuggestions",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-08-26T18:37:19Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-24T19:29:40Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9628136811040467
      ],
      "excerpt": "This is implementation of CommitBERT: Commit Message Generation Using Pre-Trained Programming Language Model. CommitBERT is accepted in ACL workshop : NLP4Prog. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9185271390748274
      ],
      "excerpt": "CodeBERT: A Pre-Trained Model for Programming and Natural Languages introduces a pre-trained model in a combination of Program Language and Natural Language(PL-NL). It also introduces the problem of converting code into natural language (Code Documentation Generation). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9754816852786315
      ],
      "excerpt": "We can use CodeBERT to create a model that generates a commit message when code is added. However, most code changes are not made only by add of the code, and some parts of the code are deleted. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9264715759248844
      ],
      "excerpt": "Serve flask server with Nvidia Docker. Check the docker tag for programming language in here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8219015549360533
      ],
      "excerpt": "Refer How to train for your lint style. This allows you to re-fine tuning to your repository's commit lint style. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9106047885448479
      ],
      "excerpt": "Versions are managed only within the branch with the name of each version. After being released on Pypi, it is merged into the master branch and new development proceeds in the upgraded version branch. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A tool that AI automatically recommends commit messages.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/graykode/commit-autosuggestions/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 7,
      "date": "Sun, 26 Dec 2021 17:22:04 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/graykode/commit-autosuggestions/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "graykode/commit-autosuggestions",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/graykode/commit-autosuggestions/master/docker/python/Dockerfile",
      "https://raw.githubusercontent.com/graykode/commit-autosuggestions/master/docker/javascript/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/graykode/commit-autosuggestions/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/graykode/commit-autosuggestions/master/commit_autosuggestions.ipynb",
      "https://raw.githubusercontent.com/graykode/commit-autosuggestions/master/experiment/figures/verb_types.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/graykode/commit-autosuggestions/master/scripts/open_tunnel_ngrok.sh",
      "https://raw.githubusercontent.com/graykode/commit-autosuggestions/master/scripts/get_ngrok.sh",
      "https://raw.githubusercontent.com/graykode/commit-autosuggestions/master/experiment/tree-sitter/build.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8721471313325008
      ],
      "excerpt": "<a href=\"https://pypi.org/project/commit/\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/commit\"></a> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8911670816969495
      ],
      "excerpt": "Even if you don't have a GPU, you can still serve the flask server by using the ngrok setting in commit_autosuggestions.ipynb. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8734656776108102
      ],
      "excerpt": "diff --git a/test.py b/test.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9521174821235511
      ],
      "excerpt": "+++ b/test.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674
      ],
      "excerpt": "+import argparse \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8734656776108102
      ],
      "excerpt": "diff --git a/test.py b/test.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9521174821235511,
        0.9521174821235511
      ],
      "excerpt": "--- a/test.py \n+++ b/test.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674
      ],
      "excerpt": "-import argparse \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "| Python         | py    | \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/graykode/commit-autosuggestions/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook",
      "Perl",
      "Dockerfile",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/graykode/commit-autosuggestions/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Copyright 2020-present Tae Hwan Jung\\n\\nLicensed under the Apache License, Version 2.0 (the \"License\");\\nyou may not use this file except in compliance with the License.\\nYou may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\nUnless required by applicable law or agreed to in writing, software\\ndistributed under the License is distributed on an \"AS IS\" BASIS,\\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\nSee the License for the specific language governing permissions and\\nlimitations under the License.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "commit-autosuggestions",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "commit-autosuggestions",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "graykode",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/graykode/commit-autosuggestions/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "graykode",
        "body": "Hello World!",
        "dateCreated": "2020-11-07T14:06:26Z",
        "datePublished": "2020-11-07T14:19:44Z",
        "html_url": "https://github.com/graykode/commit-autosuggestions/releases/tag/v0.1.0",
        "name": "0.1.0",
        "tag_name": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/graykode/commit-autosuggestions/tarball/v0.1.0",
        "url": "https://api.github.com/repos/graykode/commit-autosuggestions/releases/33598535",
        "zipball_url": "https://api.github.com/repos/graykode/commit-autosuggestions/zipball/v0.1.0"
      }
    ],
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Prepare Docker and Nvidia-docker before running the server.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 270,
      "date": "Sun, 26 Dec 2021 17:22:04 GMT"
    },
    "technique": "GitHub API"
  },
  "support": [
    {
      "confidence": [
        1
      ],
      "excerpt": "| Language       | Added | Diff |  Data(Only Diff) | Weights |\n| :------------- | :---: | :---:| :---: | :---:|\n| Python         | \u2705    | \u2705   | [423k](https://drive.google.com/drive/folders/1_8lQmzTH95Nc-4MKd1RP3x4BVc8tBA6W?usp=sharing) |  [Link](https://drive.google.com/drive/folders/1OwM7_FiLiwVJAhAanBPWtPw3Hz3Dszbh?usp=sharing)  |\n| JavaScript     | \u2705    | \u2705   | [514k](https://drive.google.com/drive/folders/1-Hv0VZWSAGqs-ewNT6NhLKEqDH2oa1az?usp=sharing) |  [Link](https://drive.google.com/drive/folders/1Jw8vXfxUXsfElga_Gi6e7Uhfc_HlmOuD?usp=sharing)  |\n| Go             | \u2b1c    | \u2b1c   | \u2b1c |  \u2b1c  |\n| JAVA           | \u2b1c    | \u2b1c   | \u2b1c |  \u2b1c  |\n| Ruby           | \u2b1c    | \u2b1c   | \u2b1c |  \u2b1c  |\n| PHP            | \u2b1c    | \u2b1c   | \u2b1c |  \u2b1c  |\n* \u2705 \u2014 Supported\n* \u2b1c - N/A \ufe0f\n\nWe plan to slowly conquer languages that are not currently supported. However, I also need to use expensive GPU instances of AWS or GCP to train about the above languages. Please do a simple sponsor for this! Add data is [CodeSearchNet dataset](https://drive.google.com/uc?id=1rd2Tc6oUWBo7JouwexW3ksQ0PaOhUr6h).\n\n",
      "technique": "Header extraction"
    }
  ],
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "commit-autosuggestions",
      "natural-language",
      "bert",
      "text-generation",
      "nlp"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To run this project, you need a flask-based inference server (GPU) and a client (commit module). If you don't have a GPU, don't worry, you can use it through Google Colab.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "First, install the package through pip.\n```shell script\n$ pip install commit\n```\n\nSet the endpoint for the flask server configured in step 1 through the commit configure command. (For example, if the endpoint is http://127.0.0.1:5000, set it as follows: `commit configure --endpoint http://127.0.0.1:5000`)\n```shell script\n$ commit configure --help       \nUsage: commit configure [OPTIONS]\n\nOptions:\n  --profile TEXT   unique name for managing each independent settings\n  --endpoint TEXT  endpoint address accessible to the server (example :\n                   http://127.0.0.1:5000/)  [required]\n\n  --help           Show this message and exit.\n```\n\nAll setup is done! Now, you can get a commit message from the AI with the command commit.\n\n```shell script\n$ commit --help          \nUsage: commit [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --profile TEXT       unique name for managing each independent settings\n  -f, --file FILENAME  patch file containing git diff (e.g. file created by\n                       `git add` and `git diff --cached > test.diff`)\n\n  -v, --verbose        print suggested commit message more detail.\n  -a, --autocommit     automatically commit without asking if you want to\n                       commit\n\n  --help               Show this message and exit.\n\nCommands:\n  configure\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}