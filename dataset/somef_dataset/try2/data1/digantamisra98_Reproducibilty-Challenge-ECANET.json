{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1910.03151\" alt=\"ArXiv\">\n        <img src=\"https://img.shields.io/badge/Paper-arXiv-blue.svg\" /></a>\n    <a href=\"https://openaccess.thecvf.com/content_CVPR_2020/html/Wang_ECA-Net_Efficient_Channel_Attention_for_Deep_Convolutional_Neural_Networks_CVPR_2020_paper.html\"                     alt=\"CVF\">\n          <img src=\"https://img.shields.io/badge/CVF-Page-purple.svg\" /></a>\n    <a href=\"https://openaccess.thecvf.com/content_CVPR_2020/papers/Wang_ECA-Net_Efficient_Channel_Attention_for_Deep_Convolutional_Neural_Networks_CVPR_2020_paper.pdf\"                        alt=\"PDF\">\n          <img src=\"https://img.shields.io/badge/CVPR-PDF-neon.svg\" /></a>\n    <a href=\"https://openaccess.thecvf.com/content_CVPR_2020/supplemental/Wang_ECA-Net_Efficient_Channel_CVPR_2020_supplemental.pdf\" alt=\"Supp\">\n          <img src=\"https://img.shields.io/badge/CVPR-Supp-pink.svg\" /></a>\n    <a href=\"https://www.youtube.com/watch?v=ipZ2AS1b0rI\" alt=\"Video\">\n          <img src=\"https://img.shields.io/badge/CVPR-Video-maroon.svg\" /></a>\n    <a href=\"https://mybinder.org/v2/gh/digantamisra98/Reproducibilty-Challenge-ECANET/HEAD\" alt=\"ArXiv\">\n        <img src=\"https://mybinder.org/badge_logo.svg\" /></a>\n    <a href=\"https://twitter.com/DigantaMisra1\" alt=\"Twitter\">\n          <img src=\"https://img.shields.io/twitter/url/https/twitter.com/DigantaMisra1.svg?style=social&label=Follow%20%40DigantaMisra1\" /></a>\n    <br>\n    <a href=\"https://wandb.ai/diganta/ECANet-sweep?workspace=user-diganta\" alt=\"Dashboard\">\n        <img src=\"https://img.shields.io/badge/WandB-Dashboard-gold.svg\" /></a>\n    <a href=\"https://wandb.ai/diganta/ECANet-sweep/reports/ECA-Net-Efficient-Channel-Attention-for-Deep-Convolutional-Neural-Networks-NeurIPS-Reproducibility-Challenge-2020--VmlldzozODU0NTM\" alt=\"RC2020\">\n        <img src=\"https://img.shields.io/badge/WandB-Report1-yellow.svg\" /></a>\n    <a href=\"https://wandb.ai/diganta/ECANet-sweep/reports/Efficient-Channel-Attention--VmlldzozNzgwOTE\" alt=\"Report\">\n        <img src=\"https://img.shields.io/badge/WandB-Report2-yellow.svg\" /></a>\n    <a href=\"https://github.com/BangguWu/ECANet\" alt=\"Report\">\n        <img src=\"https://img.shields.io/badge/Official-Repository-black.svg\" /></a>\n    <a href=\"https://blog.paperspace.com/attention-mechanisms-in-computer-vision-ecanet/\" alt=\"Report\">\n        <img src=\"https://img.shields.io/badge/Paperspace-Blog-white.svg\" /></a>\n</p>\n\n<p align=\"center\">\n    <img width=\"1000\" src=\"figures/seg.png\">\n    </br>\n    <em>Bounding Box and Segmentation Maps of ECANet-50-Mask-RCNN using samples from the test set of MS-COCO 2017 dataset.</em>\n</p>\n\n# Introduction\n\n<p float=\"center\">\n    <img src=\"figures/eca_module.jpg\" width=\"1000\" alt=\"Struct.\">\n    <br>\n    <em>Structural comparison of SE and ECA attention mechanism.</em>\n</p>\n\nEfficient Channel Attention (ECA"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n@InProceedings{Wang_2020_CVPR,\nauthor = {Wang, Qilong and Wu, Banggu and Zhu, Pengfei and Li, Peihua and Zuo, Wangmeng and Hu, Qinghua},\ntitle = {ECA-Net: Efficient Channel Attention for Deep Convolutional Neural Networks},\nbooktitle = {Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},\nmonth = {June},\nyear = {2020}\n}\n```\n\n<p align=\"center\">\n    Made with \u2764\ufe0f and \u26a1\n</p>\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@InProceedings{Wang_2020_CVPR,\nauthor = {Wang, Qilong and Wu, Banggu and Zhu, Pengfei and Li, Peihua and Zuo, Wangmeng and Hu, Qinghua},\ntitle = {ECA-Net: Efficient Channel Attention for Deep Convolutional Neural Networks},\nbooktitle = {Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},\nmonth = {June},\nyear = {2020}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9366379980284788
      ],
      "excerpt": "        <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" /></a> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9366379980284788
      ],
      "excerpt": "        <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" /></a> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8444342525991423
      ],
      "excerpt": "        <img src=\"https://img.shields.io/badge/Sweeps-Dashboard-gold.svg\" /></a> \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/digantamisra98/Reproducibilty-Challenge-ECANET",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-12-27T00:20:49Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-09T12:22:40Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "<p float=\"center\">\n    <img src=\"figures/eca_module.jpg\" width=\"1000\" alt=\"Struct.\">\n    <br>\n    <em>Structural comparison of SE and ECA attention mechanism.</em>\n</p>\n\nEfficient Channel Attention (ECA) is a simple efficient extension of the popular Squeeze-and-Excitation Attention Mechanism, which is based on the foundation concept of Local Cross Channel Interaction (CCI). Instead of using fully-connected layers with reduction ratio bottleneck as in the case of SENets, ECANet uses an adaptive shared (across channels) 1D convolution kernel on the downsampled GAP *C* x 1 x 1 tensor. ECA is an equivalently plug and play module similar to SE attention mechanism and can be added anywhere in the blocks of a deep convolutional neural networks. Because of the shared 1D kernel, the parameter overhead and FLOPs cost added by ECA is significantly lower than that of SENets while achieving similar or superior performance owing to it's capabilities of constructing adaptive kernels. This work was accepted at the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), 2020. \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8094033764279219
      ],
      "excerpt": "    <em>Mean training curves of different attention mechanisms using ResNet-18 for CIFAR-10 training over 5 runs.</em> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8737837949102191
      ],
      "excerpt": "ECA layer is implemented in eca_module.py. Since ECA is a dimentionality-preserving module, it can be inserted between convolutional layers in most stages of most networks. We recommend using the model definition provided here with our imagenet training repo to use the fastest and most up-to-date training scripts along with detailed instructions on how to download and prepare dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8938888889461448
      ],
      "excerpt": "This project uses MMDetection for training the Mask RCNN model. One would require to make the following changes in the following file in the cloned source of MMDetection codebase to train the detector model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9965504374397188
      ],
      "excerpt": "    All that requires to be done now is to modify the source backbone code to convert it into ECA based backbone. For this case, the backbone is ECANet-50 and the detector is Mask-RCNN. Simply go to this file and add the original class definition of ECA Module which is: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8327499506491519
      ],
      "excerpt": "    channel: Number of channels of the input feature map \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8463720929059414
      ],
      "excerpt": "    #: feature descriptor on the global spatial information \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8645013155906278
      ],
      "excerpt": "#: Two different branches of ECA module \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9903071427225933
      ],
      "excerpt": "Note: This is done to ensure the backbone weights get loaded properly as ECANet-50 uses the input number of channels of the block <b>C</b> to predefine the kernel size for the 1D convolution filter in the ECA Module. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.955855951359365
      ],
      "excerpt": "Although the authors provide the trained detector weights in their repository, they contain a lot of bugs which are described in this open issue. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9055041558407707
      ],
      "excerpt": "The dashboard for this project can be accessed here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Unofficial Implementation of ECANets (CVPR 2020) for the Reproducibility Challenge 2020.",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://mmdetection.readthedocs.io/",
      "technique": "Regular expression"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Simply execute [this script](https://gist.githubusercontent.com/mkocabas/a6177fc00315403d31572e17700d7fd9/raw/a6ad5e9d7567187b65f222115dffcb4b8667e047/coco.sh) in your terminal to download and process the MS-COCO 2017 dataset. You can use the following command to do the same:\n```\ncurl https://gist.githubusercontent.com/mkocabas/a6177fc00315403d31572e17700d7fd9/raw/a6ad5e9d7567187b65f222115dffcb4b8667e047/coco.sh | sh\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Download the pretrained weights from the [original repository](https://github.com/BangguWu/ECANet). You can download them using `gdown` if you're on Colab or GCloud. For example to download the ECANet-50 weights for training a Mask RCNN, use the following command:\n\n```\npip install gdown\ngdown https://drive.google.com/u/0/uc?id=1670rce333c_lyMWFzBlNZoVUvtxbCF_U&export=download\n```\n\nTo make the weights compatible for MS-COCO training, run [this notebook](https://github.com/digantamisra98/Reproducibilty-Challenge-ECANET/blob/main/Weight_correction.ipynb) and then move the processed weight file `eca_net.pth.tar` to a new folder named `weights` in mmdetection directory. Once done, edit the `model` dict variable in `mmdetection/configs/_base_/models/mask_rcnn_r50_fpn.py` by updating the `pretrained` parameter to ```pretrained='weights/eca_net.pth.tar'```. This will load the ECANet-50 backbone weights correctly. \n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/digantamisra98/Reproducibilty-Challenge-ECANET/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 05:57:57 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/digantamisra98/Reproducibilty-Challenge-ECANET/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "digantamisra98/Reproducibilty-Challenge-ECANET",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/digantamisra98/Reproducibilty-Challenge-ECANET/main/inference_demo.ipynb",
      "https://raw.githubusercontent.com/digantamisra98/Reproducibilty-Challenge-ECANET/main/ECA_Comp.ipynb",
      "https://raw.githubusercontent.com/digantamisra98/Reproducibilty-Challenge-ECANET/main/Weight_correction.ipynb",
      "https://raw.githubusercontent.com/digantamisra98/Reproducibilty-Challenge-ECANET/main/sweep/ECA_Sweep.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\npip install -r requirements.txt\n```\n\nThis reproduction is build on PyTorch and MMDetection. Ensure you have CUDA Toolkit > 10.1 installed. For more details regarding installation of MMDetection, please visit this [resources page](https://mmdetection.readthedocs.io/en/latest/get_started.html#installation).\n\nIf ```pip install mmcv-full``` takes a lot of time or fails, use the following line (customize the torch and cuda versions as per your requirements):\n```\npip install mmcv-full==latest+torch1.7.0+cu101 -f https://download.openmmlab.com/mmcv/dist/index.html\n```\n\nAlthough [Echo](https://github.com/digantamisra98/Echo) can be installed via pip, the features we currently use in this project aren't available in the latest pip version. So it's advisable to rather install from source by the following commands and then clone this repository within the directory where Echo source is present and installed in your environment/local/instance:\n\n```\nimport os\ngit clone https://github.com/digantamisra98/Echo.git\nos.chdir(\"/path_to_Echo\")\ngit clone https://github.com/digantamisra98/ECANet.git\npip install -e \"/path_to_Echo/\"\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.933084237331733
      ],
      "excerpt": "Using the above linked colab notebook, you can run comparative runs for different attention mechanisms on CIFAR-10 using ResNets. You can add your own attention mechanisms by adding them in the source of Echo package. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8370315474915189
      ],
      "excerpt": "Note: MMDetection has significantly changed since and hence this notebook would be incompatible with the latest version. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.831472753912788,
        0.8170951648205632
      ],
      "excerpt": "    <img src=\"figures/acc.png\" width=\"415\" alt=\"Accuracy.\"> \n    <img src=\"figures/loss.png\" width=\"415\" alt=\"Loss.\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8741542412426502
      ],
      "excerpt": "    <img width=\"1000\" src=\"figures/sweeps_run.png\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8127869436011024
      ],
      "excerpt": "To run hyperparamter sweeps on WandB, simply run the above linked colab notebook. To add more hyperparameters, simply edit the sweep.yaml file present in sweep folder. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8883657864951777,
        0.8138291712660117,
        0.8216270093103228,
        0.8419916359041462,
        0.8543502349020639
      ],
      "excerpt": "You can run the main.py to train or evaluate as follow: \nCUDA_VISIBLE_DEVICES={device_ids} python main -a {model_name} --project {WandB Project Name} {the path of you datasets} \nFor example: \nCUDA_VISIBLE_DEVICES=0,1,2,3 python main -a eca_resnet50 --project ECANet_RC2020 ./datasets/ILSVRC2012/images \nIt is same with above ResNet replace main.py by light_main.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8617590508969503
      ],
      "excerpt": "python paras_flops.py -a {model_name} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8520449322029008
      ],
      "excerpt": "    <img width=\"500\" src=\"figures/seg_ep.gif\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9130679612931553
      ],
      "excerpt": "python tools/train.py configs/mask_rcnn/mask_rcnn_r50_fpn_1x_coco.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9280521067986907
      ],
      "excerpt": "python tools/train.py configs/mask_rcnn/mask_rcnn_r50_fpn_1x_coco.py --resume-from work_dirs/mask_rcnn_r50_fpn_1x_coco/epoch_5.pth \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/digantamisra98/Reproducibilty-Challenge-ECANET/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Introduction",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Reproducibilty-Challenge-ECANET",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "digantamisra98",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/digantamisra98/Reproducibilty-Challenge-ECANET/blob/main/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\npip install -r requirements.txt\n```\n\nThis reproduction is build on PyTorch and MMDetection. Ensure you have CUDA Toolkit > 10.1 installed. For more details regarding installation of MMDetection, please visit this [resources page](https://mmdetection.readthedocs.io/en/latest/get_started.html#installation).\n\nIf ```pip install mmcv-full``` takes a lot of time or fails, use the following line (customize the torch and cuda versions as per your requirements):\n```\npip install mmcv-full==latest+torch1.7.0+cu101 -f https://download.openmmlab.com/mmcv/dist/index.html\n```\n\nAlthough [Echo](https://github.com/digantamisra98/Echo) can be installed via pip, the features we currently use in this project aren't available in the latest pip version. So it's advisable to rather install from source by the following commands and then clone this repository within the directory where Echo source is present and installed in your environment/local/instance:\n\n```\nimport os\ngit clone https://github.com/digantamisra98/Echo.git\nos.chdir(\"/path_to_Echo\")\ngit clone https://github.com/digantamisra98/ECANet.git\npip install -e \"/path_to_Echo/\"\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 25,
      "date": "Mon, 27 Dec 2021 05:57:57 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "research",
      "reproducible-research",
      "reproducibility",
      "reproducible-paper",
      "wandb",
      "pytorch",
      "mmdetection",
      "image-classification",
      "image-recognition",
      "image-segmentation",
      "object-detection",
      "computer-vision",
      "cvpr2020",
      "deep-learning",
      "deep-neural-networks",
      "convolutional-neural-networks"
    ],
    "technique": "GitHub API"
  }
}