{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1603.06937"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9232124692869111
      ],
      "excerpt": "src/net : net definition, hourglass network implementation \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yuanyuanli85/Stacked_Hourglass_Network_Keras",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-06-08T06:09:00Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-20T11:29:00Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9498950298569803
      ],
      "excerpt": "This is a Keras implementation for stacked hourglass network for single human pose estimation.  The stacked hourglass network was proposed by [Stacked Hourglass Networks for Human Pose Estimation] (https://arxiv.org/abs/1603.06937). The official implementation built on top of torch is released under pose-hg-train, and pytorch version wrote by berapaw in repo pytorch-pose. Most of code for image processing and evaluation come from above repos. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8802353865736835
      ],
      "excerpt": "src/data_gen : data generator, augmentation and processnig code  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9834092540419291
      ],
      "excerpt": "src/tools: tool to draw accuracy curve and convert keras model to tf graph. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9313191271223639
      ],
      "excerpt": "When mobile set as True, SeparableConv2D() is used instead of standard convolution, which is much smaller and faster. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Keras Implementation for Stacked Hourglass Network",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yuanyuanli85/Stacked_Hourglass_Network_Keras/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 41,
      "date": "Tue, 21 Dec 2021 11:55:01 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yuanyuanli85/Stacked_Hourglass_Network_Keras/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "yuanyuanli85/Stacked_Hourglass_Network_Keras",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Download MPII Dataset and put its images under `data/mpii/images`\n- The json `mpii_annotations.json` contains all of images' annotations including train and validation.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8244453191770256
      ],
      "excerpt": "Note:  \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8609980622492196
      ],
      "excerpt": "data : data folder, mpii \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8398736791068776,
        0.8986950279030329,
        0.935979356950361
      ],
      "excerpt": "trained_models : folder to restore trained models. \nTrain from scratch, use python train.py --help to check all the valid arguments.  \npython train.py --gpuID 0 --epochs 100 --batch_size 24 --num_stack 2 --model_path ../../trained_models/hg_s2_b1_m \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9287511383298518
      ],
      "excerpt": "gpuID gpu id, epochs number of epoch to train, batch_size batch size of samples to train, num_stack number of hourglass stack, model_path path to store trained model snapshot   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9626834465178926
      ],
      "excerpt": "python train.py --gpuID 0 --epochs 100 --batch_size 24 --num_stack 2 --model_path ../../trained_models/hg_s2_b1_m  --resume True --resume_model_json ../../trained_models/hg_s2_b1_m/net_arch.json --resume_model ../../trained_models/hg_s2_b1_m/weights_epoch15.h5 --init_epoch 16 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9066258899583258
      ],
      "excerpt": "python eval.py --gpuID 1 --model_weights ../../trained_models/hg_s2_b1_mobile/weights_epoch70.h5  --model_json ../../trained_models/hg_s2_b1_mobile/net_arch.json --mat_file ../../trained_models/hg_s2_b1_mobile/preds.mat --num_stack 2 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yuanyuanli85/Stacked_Hourglass_Network_Keras/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Stacked_Hourglass_Network_Keras",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Stacked_Hourglass_Network_Keras",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "yuanyuanli85",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yuanyuanli85/Stacked_Hourglass_Network_Keras/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 104,
      "date": "Tue, 21 Dec 2021 11:55:01 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "stacked-hourglass-networks",
      "keras",
      "human-pose-estimation"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Download pre-trained model from shared drive and put them under `trained_models`  \n  BaiDu Pan:  [hg_s2_b1_mobile](https://pan.baidu.com/s/15NGJv1e-_5wqpu5NvJIifQ) and  [hg_s2_b1](https://pan.baidu.com/s/1Brjc9deRehnj7FhPV0UUOQ)  \n  Google Drive: [hg_s2_b1_mobile](https://drive.google.com/open?id=12lbNv7jTQDZArf-lVaZ9yKj6Jr7qB1tQ) and \n  [hg_s2_b1](https://drive.google.com/open?id=12ioJONmse658qc9fgMpzSy2D_JCdkFVg)\n\n- Run a quick demo to predict sample image\n```\npython demo.py --gpuID 0 --model_json ../../trained_models/hg_s2_b1/net_arch.json  --model_weights ../../trained_models/hg_s2_b1/weights_epoch89.h5  --conf_threshold 0.1 --input_image ../../images/sample.jpg\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}