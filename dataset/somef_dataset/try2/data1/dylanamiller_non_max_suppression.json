{
  "citation": [
    {
      "confidence": [
        0.8654671031158477
      ],
      "excerpt": "detection algorithm \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "    if len(proposals) == 0: \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/dylanamiller/non_max_suppression",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-01-04T16:52:29Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-01-04T16:55:12Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9314804160542974,
        0.9734349434254458,
        0.9499264143336
      ],
      "excerpt": "In this notebook I will give a brief and simple demonstration of Non Max Suppression (NMS) and Intersection over Union (Intersection over Union, or the Jaccard Index). This are algorithms used a lot in object detection algorithms, as together they provide a way to clean up extra boxes that were falsely detected during inference.  \nAdditionally, IOU, provides a good way to measure the effectiveness of detection algorithms. Mean IOU (mIOU) is a common metric to see in object detection papers. It measures on average how much did the predicted boxes overlap with the ground truth boxes. \nJoseph Redmon https://pjreddie.com/, the designer of the Yolo algorithms, uses IOU as one of his measures when training his networks and not only as a metric, although he calls it the objectness.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9664234341768784
      ],
      "excerpt": "Below is the function we will use at the end of the code to draw the bounding boxes. The detection model I use spits out boxes with multiple decimal places, which is why I am taking the floor of each coordinate when I draw it. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9002587163632528
      ],
      "excerpt": "Nothing special here. I am using pytorch's transforms to convert the image to a torch tensor so that it can be passed through the network. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.960809088150547
      ],
      "excerpt": "The next line of code is the first thing that has really shown up so far that plays a crucial rol in the NMS algorithm. This threshold value, although it may seems nonintuitive until you wrap your head around the whole algorithm, is used as the separating point in the decisions of which boxes to keep and which not to. Boxes that overlap more than the threshold's amout with the box in question are removed. I will explain this further in a few cells. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.972336112609186,
        0.8484245682592841
      ],
      "excerpt": "Now we have the function thsat performs IOU. It is actually fairly straight forward. It takes in two boxes, so two sets of four coordinates, and checks to see how much they overlap compared pared to how much space they take up in total between the two of them, the intersection over the union (holy toledo batman! that's the name of the algorithm!). This value is then returned and checked against the threshold value that we defined above. \nThe measurement of the overlap may seem odd. It took me a minute to get a handle on, but if you stare hard enough it works out. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8075432165639399
      ],
      "excerpt": "# calculate area of boxes - boxes represented as top left and bottom right coordinates \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9213408169225562
      ],
      "excerpt": "# area of intersection \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8441473098391812,
        0.9590159422168811,
        0.9702868797783356,
        0.9469894307597299,
        0.9410021386946557
      ],
      "excerpt": "And here is the NMS algorithm itself, hooray! As you can see, its extremely simple. The most confusing part was probably finding the intersection in the IOU.  \nSo, the function takes in all of the proposed boxes, which our detection model was kind enough to return to us in decending order of confidence (just to be clear, I mean considence of detection, not confidence of objectness as pjreddie would define. So, how sure are we that this box has classified x, not how sure are we that this box contains x). So, if your model does not return the boxes this way you, will have to sort them. \nThe algorithm takes the first box (with the highest classification confidence) and adds it into the list of filtered boxes. Then it begins calculating its IOU with respect to all the other boxes in decending order of confidence. For each box it is checked against, if the second box has an IOU higher than nms_threshold with respect to the first box, it is discarded. This is because, it is assumed that if a box overlaps with the box being examined by more than some amount, it is trying to classify the same object. But, because the design of the algorithm says that we are checking everything in decending order of classification condifence, we know that the first box is more confident about what thar object is, and is therefore probably the correct box. (Always wrong but never in doubt...) \nThis process is continued with the ever dwindling initial proposal list until the last box is reached. At this point, the remaining boxes are returned and used as detections. \n-> Note: There may be a lot of boxes. Yolo especially tends to produce a lot of undesirable boxes. Since you are checking against all other boxes, this algorithm takes O(n^2) time to run. Which if you are familiar with big-O notation, means that its run time increases at a rate of the input squared as more input, so as more boxes, are added. For a lot of boxes, this could be a faily high run time. So, it is reasonable in practice to only check against a fixed amount of boxes to reduce this time. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076,
        0.8812455921989943
      ],
      "excerpt": "for box_a in proposals: \n    # add box with highest confidence score to list of filtered boxes \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8548548853516118
      ],
      "excerpt": "    # idea is that high iou boxes are trying to classify same object, but have lower confidence than baxa, most like wrong \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8081303625433169
      ],
      "excerpt": "# return list of filtered boxes \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9491228936126378
      ],
      "excerpt": "Before the final result, the image below shows what the model spit out without performing NMS. It is not too bad, but clearly not optimal as there are a number of overlapping boxes, specifially on the woman in the foreground. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/dylanamiller/non_max_suppression/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Fri, 24 Dec 2021 05:02:44 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/dylanamiller/non_max_suppression/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "dylanamiller/non_max_suppression",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/dylanamiller/non_max_suppression/master/non%20max%20suppression.ipynb",
      "https://raw.githubusercontent.com/dylanamiller/non_max_suppression/master/.ipynb_checkpoints/non%20max%20suppression-checkpoint.ipynb"
    ],
    "technique": "File Exploration"
  },
  "invocation": [
    {
      "confidence": [
        0.9133368656218674,
        0.9068127677393759,
        0.9457175861910134,
        0.9133368656218674,
        0.8869999123707137
      ],
      "excerpt": "import torchvision \nimport matplotlib.pyplot as plt \nimport numpy as np \nimport cv2 \nimport copy \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8997243352845468,
        0.8997243352845468
      ],
      "excerpt": "                           (np.floor(bf[0]),  np.floor(bf[1])),  \n                           (np.floor(bf[2]),  np.floor(bf[3])),  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8318158500519445
      ],
      "excerpt": "det_model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9360178186919378
      ],
      "excerpt": "fig, ax = plt.subplots(figsize=(36,20))   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9360178186919378
      ],
      "excerpt": "fig, ax = plt.subplots(figsize=(36,20))   \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/dylanamiller/non_max_suppression/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "draw bounding boxes",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "non_max_suppression",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "dylanamiller",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/dylanamiller/non_max_suppression/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Fri, 24 Dec 2021 05:02:44 GMT"
    },
    "technique": "GitHub API"
  }
}