{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1301.3781"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/palmagro/gg2vec",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2015-11-10T03:29:20Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-05-06T16:54:58Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.99858494430373,
        0.9734724017101163
      ],
      "excerpt": "\"In this work a new machine learning approach to the study of Generalized Graphs as semantic data structures is presented. It shows how vector representations that maintain semantic and topological features of the original data can be obtained from neural encoding architectures and considering the topological properties of the graph. Also, semantic features of these new representations are tested by using some machine learning tasks and new directions on efficient link discovery methodologies on large relational datasets are investigated.\" \nWe present gg2vec, a python library to perform vector space embeddings of generalized graphs stored in a Neo4j DB. gg2vec uses word2vec neuroal encoder architectures (https://arxiv.org/abs/1301.3781) to obtain vector representations of the elements of a Neo4j graph. Next we we will demonstrate the capabilities of the library using the Movie Database (available in https://neo4j.com/developer/movie-database/ to allow reproducibility) as example data.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9869015121629319,
        0.9083062545995774
      ],
      "excerpt": "Generates a num_dim dimension embedding representation of the indicated Neo4j Database. This method trains a CBOW neural network with pairs word-context (w,C) where w is a node and C is a window of his context (properties and neighbours). The \"mode\" parameter is set as \"normal\" or \"degree\". \"normal\" mode generates random (w,C) pairs. \"degree\" mode generates (w,C) where the probability of generating a pair (w,C) is proportional to the degree of node w. \nThe library visualization.py offers some tools to visualize a Neo4j DB embedding.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Semantic Preserving Embeddings for Generalized Graphs",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/palmagro/gg2vec/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Mon, 20 Dec 2021 10:39:15 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/palmagro/gg2vec/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "palmagro/gg2vec",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "cine = gg2vec(\"cine\",7474,\"neo4j\",\"**\",\"name\",400000,200,6,\"normal\",[],1) \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8801854956928516,
        0.8364364855349268,
        0.8801854956928516,
        0.8276853569684732
      ],
      "excerpt": "from gg2vec import * \nfrom experiment import * \nfrom composite_experiment import * \ncine = gg2vec(\"cine\",7474,\"neo4j\",\"**\",\"name\",400000,200,6,\"normal\",[],1) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/palmagro/gg2vec/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Learning Neo4j DB content embedding using neural encoders",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "gg2vec",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "palmagro",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/palmagro/gg2vec/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 30,
      "date": "Mon, 20 Dec 2021 10:39:15 GMT"
    },
    "technique": "GitHub API"
  }
}