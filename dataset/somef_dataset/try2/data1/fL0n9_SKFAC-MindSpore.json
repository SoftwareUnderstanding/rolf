{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- This example is based on modifications to [THOR optimizer](https://gitee.com/mindspore/mindspore/tree/r1.1/model_zoo/official/cv/resnet_thor).\r\n- This example runs on [MindSpore framework](https://www.mindspore.cn/en).\r\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "\r\nPlease cite [our paper](https://openaccess.thecvf.com/content/CVPR2021/html/Tang_SKFAC_Training_Neural_Networks_With_Faster_Kronecker-Factored_Approximate_Curvature_CVPR_2021_paper.html) (and the respective papers of the methods used) if you use this code in your own work:\r\n\r\n```\r\n@InProceedings{Tang_2021_CVPR,\r\n    author    = {Tang, Zedong and Jiang, Fenlong and Gong, Maoguo and Li, Hao and Wu, Yue and Yu, Fan and Wang, Zidong and Wang, Min},\r\n    title     = {SKFAC: Training Neural Networks With Faster Kronecker-Factored Approximate Curvature},\r\n    booktitle = {Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},\r\n    month     = {June},\r\n    year      = {2021},\r\n    pages     = {13479-13487}\r\n}\r\n```\r\n\r\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@InProceedings{Tang_2021_CVPR,\n    author    = {Tang, Zedong and Jiang, Fenlong and Gong, Maoguo and Li, Hao and Wu, Yue and Yu, Fan and Wang, Zidong and Wang, Min},\n    title     = {SKFAC: Training Neural Networks With Faster Kronecker-Factored Approximate Curvature},\n    booktitle = {Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},\n    month     = {June},\n    year      = {2021},\n    pages     = {13479-13487}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "| 10 | 0.6129 | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "| 12 | 0.6348 | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "| 30 | 0.7379 | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "| 37 | 0.7500 | \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fL0n9/SKFAC-MindSpore",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-03-11T02:31:28Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-11T00:13:44Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "\r\nThis is a Mindspore implementation of our paper [SKFAC: Training Neural Networks With Faster Kronecker-Factored Approximate Curvature](https://openaccess.thecvf.com/content/CVPR2021/html/Tang_SKFAC_Training_Neural_Networks_With_Faster_Kronecker-Factored_Approximate_Curvature_CVPR_2021_paper.html)\r\n<!-- \r\nThis is an example of training ResNet-50 V1.5 with ImageNet2012 dataset by second-order optimizer [SKFAC](https://openaccess.thecvf.com/content/CVPR2021/html/Tang_SKFAC_Training_Neural_Networks_With_Faster_Kronecker-Factored_Approximate_Curvature_CVPR_2021_paper.html). This example is based on modifications to the [THOR optimizer](https://gitee.com/mindspore/mindspore/tree/r1.1/model_zoo/official/cv/resnet_thor) on the [MindSpore framework](https://www.mindspore.cn/en). -->\r\n\r\n\r\n<!-- TOC -->\r\n\r\n- [ResNet-50-SKFAC Example](#resnet-50-skfac-example)\r\n \t- [Description](#description)\r\n \t- [Model Architecture](#model-architecture)\r\n \t- [Dataset](#dataset)\r\n \t- [Environment Requirements](#environment-requirements)\r\n \t\t- Hardware\r\n \t\t- Framework\r\n \t- [Quick Start](#quick-start)\r\n \t- [Script Parameters](#script-parameters)\r\n\t- [Optimize Performance](#optimize-performance)\r\n\t- [References](#references)\r\n\r\n<!-- TOC -->\r\n\r\n\r\n\r\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9515153972215538
      ],
      "excerpt": "The overall network architecture of ResNet-50 is show below:link \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8457486409320324
      ],
      "excerpt": "\"batch_size\": 32,                 #: batch size of input tensor \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9968029537584643
      ],
      "excerpt": "\"momentum\": 0.9,                  #: momentum of SKFAC optimizer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9786557562543234
      ],
      "excerpt": "\"epoch_size\": 40,                 #: only valid for training, which is always 1 for inference \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8547921438052926
      ],
      "excerpt": "\"frequency\": 834,                 #: the step interval to update second-order information matrix \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "SKFAC Preconditioner for MindSpore",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fL0n9/SKFAC-MindSpore/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 14:44:05 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/fL0n9/SKFAC-MindSpore/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "fL0n9/SKFAC-MindSpore",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8485783839391842
      ],
      "excerpt": "Parameters for GPU \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8465938844587143
      ],
      "excerpt": "\"save_checkpoint_path\": \"./\",     #: path to save checkpoint relative to the executed path \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8712898244322753
      ],
      "excerpt": "Train\uff1a1,281,167 images \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8497083992686689,
        0.8309391638231081,
        0.8357448822472411
      ],
      "excerpt": "Note\uff1aData will be processed in dataset.py \nDownload the dataset ImageNet2012 \nUnzip the ImageNet2012 dataset to any path you want and the folder structure should include train and eval dataset as follows: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8733450332610028
      ],
      "excerpt": "    \u251c\u2500\u2500 ilsvrc                  #: train dataset \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8062650359639381
      ],
      "excerpt": "\"save_checkpoint\": True,          #: whether save checkpoint or not \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8039461330800713
      ],
      "excerpt": "\"use_label_smooth\": True,         #: label smooth \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.811854372964597
      ],
      "excerpt": "| 15 | 0.6626 | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8702815774991463
      ],
      "excerpt": "| 45 | 0.7565 | \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/fL0n9/SKFAC-MindSpore/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Description",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "SKFAC-MindSpore",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "fL0n9",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fL0n9/SKFAC-MindSpore/blob/main/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "\r\n- Hardware\r\n\t- The GPU processor which supports CUDA 10.1.\r\n- Framework\r\n    - [MindSpore](https://www.mindspore.cn/install/en)\r\n- For more information, please check the resources below\uff1a\r\n    - [MindSpore Tutorials](https://www.mindspore.cn/tutorial/training/en/master/index.html)\r\n    - [MindSpore Python API](https://www.mindspore.cn/doc/api_python/en/master/index.html)\r\n> This example was built and tested only on MindSpore 1.1.1 (GPU) installed in Docker. It may not work on other different environments.\r\n\r\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Sat, 25 Dec 2021 14:44:05 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "After installing MindSpore correctly, you can use this example with shell statements below:\r\n```shell\r\n#: run training example\r\npython train.py --dataset_path='DATASET_PATH'\r\n#: run evaluation example\r\npython eval.py --dataset_path='DATASET_PATH' --checkpoint_path='CHECKPOINT_PATH'\r\n\r\n#:For example:\r\npython train.py --dataset_path='ImageNet2012/train'\r\npython eval.py --dataset_path='ImageNet2012/val' --checkpoint_path='resnet-2_830.ckpt'\r\n```\r\n>You can also edit default arguments in train.py and eval.py and run them directly.\r\n\r\n",
      "technique": "Header extraction"
    }
  ]
}