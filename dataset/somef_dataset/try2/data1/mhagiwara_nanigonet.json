{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1612.08083",
      "https://arxiv.org/abs/1612.08083",
      "https://arxiv.org/abs/1512.03385"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/mhagiwara/nanigonet",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-09-27T23:54:45Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-06T08:20:04Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9679074750561315,
        0.9824669377901906,
        0.9522937058293041,
        0.9581687659713845
      ],
      "excerpt": "NanigoNet is a language detector for code-mixed input supporting 150 human and 19 programming languages implemented using AllenNLP+PyTorch.  \nUnlike other language detectors, NanigoNet detects language per character using a convolutional neural network-based sequential labeling model, which makes it suitable for code-mixed input where the language changes within the text (such as source code with comments, documents with markups, etc.). It can also produce prediction results for the entire text. \nThere is another language detector, LanideNN, which also makes a prediction per character. There are some notable differences between NanigoNet and LanideNN, including: \nNanigoNet supports more human languages, including Esperanto and Hawaiian \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9339859611860825
      ],
      "excerpt": "NanigoNet is implemented on AllenNLP+PyTorch while LanideNN uses TensorFlow \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9395264007167686,
        0.993883370206306
      ],
      "excerpt": "NanigoNet only uses CC-BY-SA resources, meaning you are free to use the code and the model for commercial purposes \nMany design decisions of NanigoNet, including the choice of the training data, are influenced by LanideNN. I hereby sincerely thank the authors of the software. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9570841709298931,
        0.8709922495310575,
        0.9290477968625989
      ],
      "excerpt": "NanigoNet uses a unified set of languages IDs both for human and programming languages. Human languages are identified by a prefix h: + 3-letter ISO 639-2 code (for example, h:eng for English). Only exception is h:cmn-hans for Simplified Chinese and h:cmn-hant for Traditional Chinese. \nFor programming languages, it uses a prefix p: + file extension most commonly used for that language (for example, p:js for JavaScript and p:py for Python). \nThe training data for human languages comes mainly from Wikipedia (Web To Corpus) and Tatoeba.org. For programming languages, I used randomly sampled code from Github repositories with permissive licenses (e.g., Apache 2.0) and file extensions. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "NanigoNet \u2014 Language detector for code-mixed input supporting 150+19 human+programming languages using deep neural networks",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/mhagiwara/nanigonet/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 8,
      "date": "Thu, 23 Dec 2021 10:09:07 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/mhagiwara/nanigonet/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "mhagiwara/nanigonet",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Clone the repository\n* Run `pip install -r requirements.txt` under a clean Python virtual environment\n* Download the [pre-trained model](https://nanigonet.s3.amazonaws.com/models/model.744k.256d.gcnn.11layers.tar.gz) and put it in the same directory\n\n",
      "technique": "Header extraction"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/mhagiwara/nanigonet/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jsonnet"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Masato Hagiwara\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "NanigoNet",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "nanigonet",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "mhagiwara",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/mhagiwara/nanigonet/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Python 3.6.1+\n* AllenNLP 0.9.0+\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 59,
      "date": "Thu, 23 Dec 2021 10:09:07 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "From command line:\n\n```\n$ python run.py [path to model.tar.gz] < [input text file]\n```\n\nFrom Python code:\n```\nfrom nanigonet import NanigoNet\n\nnet = NanigoNet(model_path=[path to model.tar.gz])\ntexts = ['Hello!', '\u4f60\u597d!']\nresults = net.predict_batch(texts)\n```\n\nThis produces a JSON object (or a Python dictionary) per input instance. The keys of the object/dictionary are:\n\n* `char_probs`: list of per-char dictionaries of `{lang_id: prob}`    \n* `char_best`: list of per-char language IDs with the largest probability  \n* `text_probs`: dictionary of `{lang_id: prob}` for the input text\n* `text_best`: Language ID for the input text with the largest probability \n\nExample:\n\n```\n$ echo 'Hello!' | python run.py model.744k.256d.gcnn.11layers.tar.gz | jq .\n{\n  \"char_probs\": [\n    {\n      \"h:eng\": 0.9916031956672668,\n      \"h:mar\": 0.004953697789460421,\n      \"h:sco\": 0.0008433321490883827\n    },\n    ...\n  \"text_probs\": {\n    \"h:eng\": 0.9324732422828674,\n    \"h:ita\": 0.0068493434228003025,\n    \"h:spa\": 0.006260495167225599\n  },\n  \"char_best\": [\n    \"h:eng\",\n    \"h:eng\",\n    \"h:eng\",\n    \"h:eng\",\n    \"h:eng\",\n    \"h:eng\"\n  ],\n  \"text_best\": \"h:eng\"\n}\n```\n\nUsage of `run.py`:\n\n```\nusage: run.py [-h] [--top-k TOP_K] [--cuda-device CUDA_DEVICE]\n              [--batch-size BATCH_SIZE]\n              archive_file\n```\n\nParameters to the constructor of `NanigoNet`:\n\n* `model_path`: path to the pre-trained model ifle\n* `top_k`: number of predictions returned with results in `char_probs` and `text_probs`\n* `cuda_device`: GPU index to use for prediction (specify `-1` for CPU)\n\n",
      "technique": "Header extraction"
    }
  ]
}