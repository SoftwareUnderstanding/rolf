{
  "citation": [
    {
      "confidence": [
        0.8283268420643993
      ],
      "excerpt": ".. [2] Breiman, Leo. Bagging Predictors. Machine Learning (1996): 123-140. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9984026302307886,
        0.9824898938859874,
        0.9974152565276645,
        0.9989378218888035,
        0.8028046190715653,
        0.854836641318266
      ],
      "excerpt": ".. [4] Huang, Gao, et al. Snapshot Ensembles: Train 1, Get M For Free. ICLR, 2017. \n.. [5] Lakshminarayanan, Balaji, et al. Simple and Scalable Predictive Uncertainty Estimation using Deep Ensembles. NIPS, 2017. \n.. [6] Garipov, Timur, et al. Loss Surfaces, Mode Connectivity, and Fast Ensembling of DNNs. NeurIPS, 2018. \n.. [7] Feng, Ji, et al. Soft Gradient Boosting Machine. ArXiv, 2020. \n.. _pytorch: https://pytorch.org/ \n.. _pypi: https://pypi.org/project/torchensemble/ \n",
      "technique": "Supervised classification"
    }
  ],
  "codeOfConduct": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://raw.githubusercontent.com/xuyxu/Ensemble-Pytorch/master/CODE_OF_CONDUCT.md",
    "technique": "File Exploration"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/xuyxu/Ensemble-Pytorch",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Welcome to the contributing guidelines of Ensemble-Pytorch!\nEnsemble-Pytorch is a community-driven project and your contributions are highly welcome. Feel free to raise an issue if you have any problem. Below is the table of contents in this contributing guidelines.\n\nWhere to contribute\nAreas of contribution\n\n\nRoadmap\nAcknowledging contributions\nInstallation\nReporting bugs\nContinuous integration\nUnit testing\nTest coverage\nCoding style\nAPI design\nDocumentation\nAcknowledgement\n\nWhere to contribute\nAreas of contribution\nWe value all kinds of contributions - not just code. The following table gives an overview of key contribution areas.\n| Area          | Description                                                                                                  |\n|---------------|--------------------------------------------------------------------------------------------------------------|\n| algorithm     | collect and report novel algorithms relevant to torchensemble, mainly from top-tier conferences and journals |\n| code          | implement algorithms, improve or add functionality, fix bugs                                                 |\n| documentation | improve or add docstrings, user guide, introduction, and experiments                                         |\n| testing       | report bugs, improve or add unit tests, improve the coverage of unit tests                                   |\n| maintenance   | improve the development pipeline (continuous integration, Github bots), manage and view issues/pull-requests |\n| api design    | design interfaces for estimators and other functionality                                                     |\nRoadmap\nFor a more detailed overview of current and future work, check out our development roadmap.\nAcknowledging contributions\nWe follow the all-contributors specification and recognise various types of contributions. Take a look at our past and current contributors!\nIf you are a new contributor, please make sure we add you to our list of contributors. All contributions are recorded in .all-contributorsrc.\nIf we have missed anything, please raise an issue or create a pull request!\nInstallation\nPlease visit our installation instructions to resolve any package issues and dependency errors. Feel free to raise an issue if the problem still exists.\nReporting bugs\nWe use GitHub issues to track all bugs and feature requests; feel free to open an issue if you have found a bug or wish to see a feature implemented.\nIt is recommended to check that your issue complies with the following rules before submitting:\n\nVerify that your issue is not being currently addressed by other issues or pull requests.\nPlease ensure all code snippets and error messages are formatted in appropriate code blocks. See Creating and highlighting code blocks.\nPlease be specific about what estimators and/or functions are involved and the shape of the data, as appropriate; please include a reproducible code snippet. If an exception is raised, please provide the traceback.\n\nContinuous integration\nWe use continuous integration services on GitHub to automatically check if new pull requests do not break anything and meet code quality standards. Please visit our config files on continuous integration.\nUnit testing\nWe use pytest for unit testing. To check if your code passes all tests locally, you need to install the development version of torchensemble and all extra dependencies.\n\n\nInstall all extra requirements from the root directory of torchensemble:\nbash\npip install -r build_tools/requirements.txt\n\n\nInstall the development version of torchensemble:\nbash\npip install -e .\n\n\nTo run all unit tests, run the following commend from the root directory:\nbash\npytest ./\n\n\nTest coverage\nWe use coverage via the pytest-cov plugin and codecov to measure and compare test coverage of our code.\nCoding style\nWe follow the PEP8 coding guidelines. A good example can be found here.\nWe use the pre-commit workflow together with black and flake8 to automatically apply consistent formatting and check whether your contribution complies with the PEP8 style. Besides, if you are using GitHub desktop on Windows, the following code snippet allows you to format and check the coding style manually.\nbash\nblack --skip-string-normalization --config pyproject.toml ./\nflake8 --filename=*.py torchensemble/\nAPI design\nThe general API design we use in torchensemble is similar to scikit-learn and skorch.\nFor docstrings, we use the numpy docstring standard.\nDocumentation\nWe use sphinx and readthedocs to build and deploy our online documentation. You can find our online documentation here.\nThe source files used to generate the online documentation can be found in docs/. For example, the main configuration file for sphinx is conf.py and the main page is index.rst. To add new pages, you need to add a new .rst file and include it in the index.rst file.\nTo build the documentation locally, you need to install a few extra dependencies listed in docs/requirements.txt.\n\n\nInstall extra requirements from the root directory, run:\nbash\npip install -r docs/requirements.txt\n\n\nTo build the website locally, run:\nbash\ncd docs\nmake html\n\n\nYou can find the generated files in the Ensemble-Pytorch/docs/_build/ folder. To view the website, open Ensemble-Pytorch/docs/_build/html/index.html with your preferred web browser.\nAcknowledgement\nThis CONTRIBUTING file is adapted from the PyTorch and Sktime.",
    "technique": "File Exploration"
  },
  "contributors": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributors \u2728\nThanks goes to these wonderful people (emoji key):\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://by256.github.io/\"><img src=\"https://avatars.githubusercontent.com/u/44163664?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Batuhan Yildirim</b></sub></a><br /><a href=\"https://github.com/TorchEnsemble-Community/Ensemble-Pytorch/commits?author=by256\" title=\"Code\">\ud83d\udcbb</a></td>\n    <td align=\"center\"><a href=\"https://github.com/mttgdd\"><img src=\"https://avatars.githubusercontent.com/u/3154919?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Matt Gadd</b></sub></a><br /><a href=\"https://github.com/TorchEnsemble-Community/Ensemble-Pytorch/commits?author=mttgdd\" title=\"Code\">\ud83d\udcbb</a></td>\n    <td align=\"center\"><a href=\"https://github.com/zzzzwj\"><img src=\"https://avatars.githubusercontent.com/u/23235538?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Wenjie Zhang</b></sub></a><br /><a href=\"https://github.com/TorchEnsemble-Community/Ensemble-Pytorch/commits?author=zzzzwj\" title=\"Code\">\ud83d\udcbb</a> <a href=\"https://github.com/TorchEnsemble-Community/Ensemble-Pytorch/commits?author=zzzzwj\" title=\"Tests\">\u26a0\ufe0f</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Xiaohui9607\"><img src=\"https://avatars.githubusercontent.com/u/37996225?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Xiaohui Chen</b></sub></a><br /><a href=\"https://github.com/TorchEnsemble-Community/Ensemble-Pytorch/issues?q=author%3AXiaohui9607\" title=\"Bug reports\">\ud83d\udc1b</a></td>\n    <td align=\"center\"><a href=\"https://github.com/xuyxu\"><img src=\"https://avatars.githubusercontent.com/u/22359569?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Yi-Xuan Xu</b></sub></a><br /><a href=\"https://github.com/TorchEnsemble-Community/Ensemble-Pytorch/commits?author=xuyxu\" title=\"Code\">\ud83d\udcbb</a> <a href=\"https://github.com/TorchEnsemble-Community/Ensemble-Pytorch/commits?author=xuyxu\" title=\"Documentation\">\ud83d\udcd6</a> <a href=\"https://github.com/TorchEnsemble-Community/Ensemble-Pytorch/commits?author=xuyxu\" title=\"Tests\">\u26a0\ufe0f</a> <a href=\"#example-xuyxu\" title=\"Examples\">\ud83d\udca1</a></td>\n    <td align=\"center\"><a href=\"https://github.com/cspsampedro\"><img src=\"https://avatars.githubusercontent.com/u/7384605?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>cspsampedro</b></sub></a><br /><a href=\"#ideas-cspsampedro\" title=\"Ideas, Planning, & Feedback\">\ud83e\udd14</a> <a href=\"https://github.com/TorchEnsemble-Community/Ensemble-Pytorch/commits?author=cspsampedro\" title=\"Code\">\ud83d\udcbb</a></td>\n    <td align=\"center\"><a href=\"https://github.com/kiranchari\"><img src=\"https://avatars.githubusercontent.com/u/1838910?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>kiranchari</b></sub></a><br /><a href=\"https://github.com/TorchEnsemble-Community/Ensemble-Pytorch/commits?author=kiranchari\" title=\"Documentation\">\ud83d\udcd6</a></td>\n    <td align=\"center\"><a href=\"https://github.com/nolaurence\"><img src=\"https://avatars.githubusercontent.com/u/53215736?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>nolaurence</b></sub></a><br /><a href=\"https://github.com/TorchEnsemble-Community/Ensemble-Pytorch/commits?author=nolaurence\" title=\"Code\">\ud83d\udcbb</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the all-contributors specification. Contributions of any kind welcome!",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-06T13:55:28Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-07T14:57:29Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9140140169905542
      ],
      "excerpt": "Thanks to all our contributors \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A unified ensemble framework for PyTorch to improve the performance and robustness of your deep learning model.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/xuyxu/Ensemble-Pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 28 Dec 2021 00:30:39 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/xuyxu/Ensemble-Pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "xuyxu/Ensemble-Pytorch",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/xuyxu/Ensemble-Pytorch/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/xuyxu/Ensemble-Pytorch/master/build_tools/linting.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "    ensemble.set_scheduler(\n        \"CosineAnnealingLR\",                    ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "    ensemble.set_optimizer(\n        \"Adam\",                                 ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8476101407682679
      ],
      "excerpt": "|       Ensemble Name      |  Type  |      Source Code      | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9326824573110946,
        0.8402705776263143
      ],
      "excerpt": ".. _pytorch: https://pytorch.org/ \n.. _pypi: https://pypi.org/project/torchensemble/ \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8213380337316241
      ],
      "excerpt": "acc = ensemble.predict(test_loader) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": "|    Snapshot Ensemble [4]    | Sequential |    snapshot_ensemble.py   | \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/xuyxu/Ensemble-Pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell",
      "Batchfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "BSD 3-Clause \"New\" or \"Revised\" License",
      "url": "https://api.github.com/licenses/bsd-3-clause"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'BSD 3-Clause License\\n\\nCopyright (c) 2019 - 2021 The Ensemble-Pytorch developers.\\n\\nAll rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met:\\n\\n Redistributions of source code must retain the above copyright notice, this\\n  list of conditions and the following disclaimer.\\n\\n Redistributions in binary form must reproduce the above copyright notice,\\n  this list of conditions and the following disclaimer in the documentation\\n  and/or other materials provided with the distribution.\\n\\n* Neither the name of the copyright holder nor the names of its\\n  contributors may be used to endorse or promote products derived from\\n  this software without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": ".. image:: ./docs/_images/badge_small.png\n\n|github|_ |readthedocs|_ |codecov|_ |license|_\n\n.. |github| image:: https://github.com/TorchEnsemble-Community/Ensemble-Pytorch/workflows/torchensemble-CI/badge.svg\n.. _github: https://github.com/TorchEnsemble-Community/Ensemble-Pytorch/actions\n\n.. |readthedocs| image:: https://readthedocs.org/projects/ensemble-pytorch/badge/?version=latest\n.. _readthedocs: https://ensemble-pytorch.readthedocs.io/en/latest/index.html\n\n.. |codecov| image:: https://codecov.io/gh/TorchEnsemble-Community/Ensemble-Pytorch/branch/master/graph/badge.svg?token=2FXCFRIDTV\n.. _codecov: https://codecov.io/gh/TorchEnsemble-Community/Ensemble-Pytorch\n\n.. |license| image:: https://img.shields.io/github/license/TorchEnsemble-Community/Ensemble-Pytorch\n.. _license: https://github.com/TorchEnsemble-Community/Ensemble-Pytorch/blob/master/LICENSE\n\nEnsemble PyTorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Ensemble-Pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "xuyxu",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/xuyxu/Ensemble-Pytorch/blob/master/README.rst",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 28 Dec 2021 00:30:39 GMT"
    },
    "technique": "GitHub API"
  }
}