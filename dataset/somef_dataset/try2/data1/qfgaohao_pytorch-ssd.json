{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1512.02325"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "person: 0.7042670984734087 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "person: 0.7176976451996411 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488
      ],
      "excerpt": "person: 0.793785185549561 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/qfgaohao/pytorch-ssd",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-05-18T04:56:09Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-28T05:54:13Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9655594358880684,
        0.9101090682051879,
        0.9535868205011601
      ],
      "excerpt": "This repo implements SSD (Single Shot MultiBox Detector). The implementation is heavily influenced by the projects ssd.pytorch and Detectron. \nThe design goal is modularity and extensibility. \nCurrently, it has MobileNetV1, MobileNetV2, and VGG based SSD/SSD-Lite implementations.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9169689767495027
      ],
      "excerpt": "The code to re-produce the model: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9169689767495027
      ],
      "excerpt": "The code to re-produce the model: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9398554668519851,
        0.9352868402857604
      ],
      "excerpt": "The converted models are models/mobilenet-v1-ssd.onnx, models/mobilenet-v1-ssd_init_net.pb and models/mobilenet-v1-ssd_predict_net.pb. The models in the format of pbtxt are also saved for reference. \nLet's we are building a model to detect guns for security purpose. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8671798444020483
      ],
      "excerpt": "If you manage to get more annotated data, the accuracy could become much higher. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8991620483130591,
        0.855391285059292
      ],
      "excerpt": "As subsets of open images data can be very unbalanced, it also provides \na handy option to roughly balance the data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8275963949527033
      ],
      "excerpt": "! The model is not really ONNX-Friendly due the issue mentioned here \"https://github.com/qfgaohao/pytorch-ssd/issues/33#issuecomment-467533485\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9274831846976022
      ],
      "excerpt": "Resnet34 Based Model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "MobileNetV1, MobileNetV2, VGG based SSD/SSD-lite implementation in Pytorch 1.0 / Pytorch 0.4. Out-of-box support for retraining on Open Images dataset. ONNX and Caffe2 support. Experiment Ideas like CoordConv.",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\npython open_images_downloader.py --root ~/data/open_images --class_names \"Handgun,Shotgun\" --num_workers 20\n```\n\nIt will download data into the folder ~/data/open_images.\n\nThe content of the data directory looks as follows.\n\n```\nclass-descriptions-boxable.csv       test                        validation\nsub-test-annotations-bbox.csv        test-annotations-bbox.csv   validation-annotations-bbox.csv\nsub-train-annotations-bbox.csv       train\nsub-validation-annotations-bbox.csv  train-annotations-bbox.csv\n```\n\nThe folders train, test, validation contain the images. The files like sub-train-annotations-bbox.csv \nis the annotation file.\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/qfgaohao/pytorch-ssd/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 463,
      "date": "Tue, 28 Dec 2021 20:21:23 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/qfgaohao/pytorch-ssd/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "qfgaohao/pytorch-ssd",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.821064970528751
      ],
      "excerpt": "Before you start you can try the demo. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8589534893990137
      ],
      "excerpt": "train: 0.8270992920206008 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8589534893990137
      ],
      "excerpt": "train: 0.8331588002612781 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9442935605963187
      ],
      "excerpt": "python train_ssd.py --dataset_type voc  --datasets ~/data/VOC0712/VOC2007 ~/data/VOC0712/VOC2012 --validation_dataset ~/data/VOC0712/test/VOC2007/ --net mb2-ssd-lite --base_net models/mb2-imagenet-71_8.pth  --scheduler cosine --lr 0.01 --t_max 200 --validation_epochs 5 --num_epochs 200 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8589534893990137
      ],
      "excerpt": "train: 0.8713861172265407 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9043325781447982
      ],
      "excerpt": "python train_ssd.py --datasets ~/data/VOC0712/VOC2007/ ~/data/VOC0712/VOC2012/ --validation_dataset ~/data/VOC0712/test/VOC2007/ --net vgg16-ssd --base_net models/vgg16_reducedfc.pth  --batch_size 24 --num_epochs 200 --scheduler \"multi-step\u201d \u2014-milestones \u201c120,160\u201d \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9600502720540518
      ],
      "excerpt": "python train_ssd.py --datasets ~/data/VOC0712/VOC2007/ ~/data/VOC0712/VOC2012/ --validation_dataset ~/data/VOC0712/test/VOC2007/ --net mb1-ssd --base_net models/mobilenet_v1_with_relu_69_5.pth  --batch_size 24 --num_epochs 200 --scheduler cosine --lr 0.01 --t_max 200 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9273985721097916
      ],
      "excerpt": "python eval_ssd.py --net mb1-ssd  --dataset ~/data/VOC0712/test/VOC2007/ --trained_model models/mobilenet-v1-ssd-mp-0_675.pth --label_file models/voc-model-labels.txt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8873001114318322
      ],
      "excerpt": "python convert_to_caffe2_models.py mb1-ssd models/mobilenet-v1-ssd-mp-0_675.pth models/voc-model-labels.txt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9288758435064718
      ],
      "excerpt": "python run_ssd_example.py mb1-ssd models/gun_model_2.21.pth models/open-images-model-labels.txt ~/Downloads/big.JPG \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9481149351511247
      ],
      "excerpt": "python train_ssd.py --dataset_type open_images --datasets ~/data/open_images --net mb1-ssd --pretrained_ssd models/mobilenet-v1-ssd-mp-0_675.pth --scheduler cosine --lr 0.01 --t_max 100 --validation_epochs 5 --num_epochs 100 --base_net_lr 0.001  --batch_size 5 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9250661133285324
      ],
      "excerpt": "python run_ssd_example.py mb1-ssd models/mobilenet-v1-ssd-Epoch-99-Loss-2.2184619531035423.pth models/open-images-model-labels.txt ~/Downloads/gun.JPG \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9149814336017691
      ],
      "excerpt": "python train_ssd.py --datasets ~/data/VOC0712/VOC2007/ ~/data/VOC0712/VOC2012/ --validation_dataset ~/data/VOC0712/test/VOC2007/ --net \"vgg16-ssd\" --base_net models/vgg16_reducedfc.pth  --batch_size 24 --num_epochs 150 --scheduler cosine --lr 0.0012 --t_max 150 --validation_epochs 5 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8921040985663126
      ],
      "excerpt": "python eval_ssd.py --net vgg16-ssd  --dataset ~/data/VOC0712/test/VOC2007/ --trained_model models/vgg16-ssd-Epoch-115-Loss-2.819455094383535.pth --label_file models/voc-model-labels.txt \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/qfgaohao/pytorch-ssd/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Hao Gao\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Single Shot MultiBox Detector Implementation in Pytorch",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pytorch-ssd",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "qfgaohao",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/qfgaohao/pytorch-ssd/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Python 3.6+\n2. OpenCV\n3. Pytorch 1.0 or Pytorch 0.4+\n4. Caffe2\n5. Pandas\n6. Boto3 if you want to train models on the Google OpenImages Dataset.\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\nwget -P models https://storage.googleapis.com/models-hao/mobilenet-v1-ssd-mp-0_675.pth\nwget -P models https://storage.googleapis.com/models-hao/voc-model-labels.txt\npython run_ssd_live_demo.py mb1-ssd models/mobilenet-v1-ssd-mp-0_675.pth models/voc-model-labels.txt \n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\nwget -P models https://storage.googleapis.com/models-hao/mobilenet_v1_ssd_caffe2/mobilenet-v1-ssd_init_net.pb\nwget -P models https://storage.googleapis.com/models-hao/mobilenet_v1_ssd_caffe2/mobilenet-v1-ssd_predict_net.pb\npython run_ssd_live_caffe2.py models/mobilenet-v1-ssd_init_net.pb models/mobilenet-v1-ssd_predict_net.pb models/voc-model-labels.txt \n```\n\nYou can see a decent speed boost by using Caffe2.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\nwget -P models https://storage.googleapis.com/models-hao/mb2-ssd-lite-mp-0_686.pth\nwget -P models https://storage.googleapis.com/models-hao/voc-model-labels.txt\npython run_ssd_live_demo.py mb2-ssd-lite models/mb2-ssd-lite-mp-0_686.pth models/voc-model-labels.txt \n```\n\nThe above MobileNetV2 SSD-Lite model is not ONNX-Compatible, as it uses Relu6 which is not supported by ONNX.\nThe code supports the ONNX-Compatible version. Once I have trained a good enough MobileNetV2 model with Relu, I will upload\nthe corresponding Pytorch and Caffe2 models.\n\nYou may notice MobileNetV2 SSD/SSD-Lite is slower than MobileNetV1 SSD/Lite on PC. However, MobileNetV2 is faster on mobile devices.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1204,
      "date": "Tue, 28 Dec 2021 20:21:23 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "ssd",
      "pytorch",
      "open-images",
      "object-detection"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\nwget -P models https://storage.googleapis.com/models-hao/mobilenet-v1-ssd-mp-0_675.pth\nwget -P models https://storage.googleapis.com/models-hao/voc-model-labels.txt\npython run_ssd_live_demo.py mb1-ssd models/mobilenet-v1-ssd-mp-0_675.pth models/voc-model-labels.txt \n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\nwget -P models https://storage.googleapis.com/models-hao/mobilenet_v1_ssd_caffe2/mobilenet-v1-ssd_init_net.pb\nwget -P models https://storage.googleapis.com/models-hao/mobilenet_v1_ssd_caffe2/mobilenet-v1-ssd_predict_net.pb\npython run_ssd_live_caffe2.py models/mobilenet-v1-ssd_init_net.pb models/mobilenet-v1-ssd_predict_net.pb models/voc-model-labels.txt \n```\n\nYou can see a decent speed boost by using Caffe2.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\nwget -P models https://storage.googleapis.com/models-hao/mb2-ssd-lite-mp-0_686.pth\nwget -P models https://storage.googleapis.com/models-hao/voc-model-labels.txt\npython run_ssd_live_demo.py mb2-ssd-lite models/mb2-ssd-lite-mp-0_686.pth models/voc-model-labels.txt \n```\n\nThe above MobileNetV2 SSD-Lite model is not ONNX-Compatible, as it uses Relu6 which is not supported by ONNX.\nThe code supports the ONNX-Compatible version. Once I have trained a good enough MobileNetV2 model with Relu, I will upload\nthe corresponding Pytorch and Caffe2 models.\n\nYou may notice MobileNetV2 SSD/SSD-Lite is slower than MobileNetV1 SSD/Lite on PC. However, MobileNetV2 is faster on mobile devices.\n\n",
      "technique": "Header extraction"
    }
  ]
}