{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[1] EfficientDet - Scalable and Efficient Object Detection: https://arxiv.org/pdf/1911.09070.pdf \\\n[2] EfficientDet - zylo117 Github: https://github.com/zylo117/Yet-Another-EfficientDet-Pytorch\n\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/phungpx/efficient_det_pytorch",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-06-18T02:22:45Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-10T16:00:14Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8680165457332017
      ],
      "excerpt": "[x] supporting for PASCAL VOC 2007, 2012 dataset with XML format. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8053207798958834,
        0.8053207798958834
      ],
      "excerpt": "2|Pascal VOC 2007 |5,011|4,952|-|PASCAL XML| \n3|Pascal VOC 2012 |1,464|1,449|-|PASCAL XML| \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9330853012903487
      ],
      "excerpt": "[x] Applied imgaug for augmenting data, dataloader with setting 'num_workers', 'pin_memory', 'drop_last' for optimizing training. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Re-implement Efficient Det model for object detection tasks",
      "technique": "GitHub API"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* COCO Train/Val/Test 2017\n```bash\nhttps://cocodataset.org/#:download\n```\n\n* Pascal VOC 2007\n```bash\nhttp://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtrainval_06-Nov-2007.tar\n```\n```bash\nhttp://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtest_06-Nov-2007.tar\n```\n\n* Pascal VOC 2012\n```bash\nhttp://host.robots.ox.ac.uk/pascal/VOC/voc2012/VOCtrainval_11-May-2012.tar\n```\n\n* Publaynet\n```bash\nhttps://developer.ibm.com/exchanges/data/all/publaynet/\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/phungpx/efficient_det_pytorch/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 27 Dec 2021 06:16:10 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/phungpx/efficient_det_pytorch/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "phungpx/efficient_det_pytorch",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/phungpx/efficient_det_pytorch/master/inference.ipynb",
      "https://raw.githubusercontent.com/phungpx/efficient_det_pytorch/master/flame/core/model/debug.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8417099621327021
      ],
      "excerpt": "4|PubLayNet |335,703|11,245|11,405|COCO JSON| \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8902627162932362,
        0.8902627162932362,
        0.8096422022825122
      ],
      "excerpt": "mkdir checkpoint/efficientnet_pretrained_weight \nmkdir checkpoint/efficientdet_pretrained_weight \nDownload Weight \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9336801098518991,
        0.9336801098518991,
        0.9336801098518991,
        0.9336801098518991
      ],
      "excerpt": "    \u251c\u2500\u2500 coco_dataset.py \n    \u251c\u2500\u2500 pascal_dataset.py \n    \u251c\u2500\u2500 labelme_dataset.py \n    \u2514\u2500\u2500 altheia_dataset.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9347931509085966
      ],
      "excerpt": "|ID|Dataset Name|Train|Val|Test|Format| \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.810870454768102
      ],
      "excerpt": "Download Weight \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/phungpx/efficient_det_pytorch/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "[Efficient Det: Scalable and Efficient Object Detection](https://arxiv.org/pdf/1911.09070.pdf)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "efficient_det_pytorch",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "phungpx",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/phungpx/efficient_det_pytorch/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 6,
      "date": "Mon, 27 Dec 2021 06:16:10 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "object-detection",
      "ignite"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Training\n```python\nCUDA_VISIBLE_DEVICES=<cuda_indice> python -m flame configs/voc2007_training.yaml\n```\n\n* Testing\n```python\nCUDA_VISIBLE_DEVICES=<cuda_indice> python -m flame configs/voc2007_testing.yaml\n```\n\n* mean average precision \\\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1LQWWi0IfUKFEtrJk-oAZcXKlf9hQ7cQ5?usp=sharing)\n\n* inference \\\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://drive.google.com/file/d/1n4QoUcpv3wz6lXsWJSBAbRk4ZdO6NnEb/view?usp=sharing)\n\n",
      "technique": "Header extraction"
    }
  ]
}