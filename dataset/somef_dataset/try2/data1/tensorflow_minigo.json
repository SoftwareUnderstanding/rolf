{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1712.01815"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9220679217031208
      ],
      "excerpt": "   as possible, through an open-source implementation and open-source pipeline \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.949971979433506
      ],
      "excerpt": "   machine learning, and Kubernetes communities. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9835281548744423
      ],
      "excerpt": "TWOGTP=\"gogui-twogtp -black \\\"$BLACK\\\" -white \\\"$WHITE\\\" -games 10 \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "  --num_readouts 10 \\ \n",
      "technique": "Supervised classification"
    }
  ],
  "codeOfConduct": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://raw.githubusercontent.com/tensorflow/minigo/master/CODE_OF_CONDUCT.md",
    "technique": "File Exploration"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tensorflow/minigo",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "How to Contribute\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\nContributor License Agreement\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to https://cla.developers.google.com/ to see\nyour current agreements on file or to sign a new one.\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\nCode reviews\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\nGitHub Help for more\ninformation on using pull requests.\nSome Minigo-specific Expectations:\n\nWe format all our python code with\n    autopep8. If you use Vim, check\n    out Vim-CodeFmt.\nWe use pylint to check the syntax of our code.\n    Not all of our code yet passes pylint, but we're working on it!",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-01-29T23:29:07Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-27T02:39:07Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9664942496603094,
        0.9559895250181487,
        0.9589608185794416
      ],
      "excerpt": "Repeat, this is not the official AlphaGo program by DeepMind.  This is an \nindependent effort by Go enthusiasts to replicate the results of the AlphaGo \nZero paper (\"Mastering the Game of Go without Human Knowledge,\" Nature), with \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9801162731510205
      ],
      "excerpt": "Minigo is based off of Brian Lee's \"MuGo\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9857821148483338
      ],
      "excerpt": "\"Mastering the Game of Go with Deep Neural Networks and \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9536652550382223
      ],
      "excerpt": "the more recent AlphaGo Zero paper, \"Mastering the Game of Go without Human \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8011132897304796
      ],
      "excerpt": "Self-Play with a General Reinforcement Learning \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9088041895116883,
        0.8077089674515044,
        0.9918818023019577,
        0.8277551320120372,
        0.9404030551122391
      ],
      "excerpt": "abridged in Minigo documentation as AG (for AlphaGo), AGZ (for AlphaGo \nZero), and AZ (for AlphaZero) respectively. \nGoals of the Project \nProvide a clear set of learning examples using Tensorflow, Kubernetes, and \n   Google Cloud Platform for establishing Reinforcement Learning pipelines on \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9363340313642577
      ],
      "excerpt": "Reproduce the methods of the original DeepMind AlphaGo papers as faithfully \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.923948005372906,
        0.9816002435609203,
        0.8022283893572555,
        0.9837738561388838,
        0.8517304438178619
      ],
      "excerpt": "   tools. \nProvide our data, results, and discoveries in the open to benefit the Go, \n   machine learning, and Kubernetes communities. \nAn explicit non-goal of the project is to produce a competitive Go program that \nestablishes itself as the top Go AI. Instead, we strive for a readable, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8582051127335638,
        0.932666324624374,
        0.8626088078550723,
        0.9861081301332804,
        0.9840654753938508
      ],
      "excerpt": "means our implementation is not as fast or efficient as possible. \nWhile this product might produce such a strong model, we hope to focus on the \nprocess.  Remember, getting there is half the fun. :) \nWe hope this project is an accessible way for interested developers to have \naccess to a strong Go model with an easy-to-understand platform of python code \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9838614324043128
      ],
      "excerpt": "To see our guidelines for contributing, see CONTRIBUTING.md. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9810706751001248
      ],
      "excerpt": "The Hitchhiker's guide to \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9690986287979776,
        0.8039205684533169
      ],
      "excerpt": "Prow, which is a \ntest framework created by the Kubernetes team for testing changes in a hermetic \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9478578834185677
      ],
      "excerpt": "You can see the status of our automated tests by looking at the Prow and \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9391374892087287
      ],
      "excerpt": "All commands are compatible with either Google Cloud Storage as a remote file \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9035805158274739
      ],
      "excerpt": "These four files comprise the model. Commands that take a model as an \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9089760321131265
      ],
      "excerpt": "to play using the latest model in your bucket \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8328690003460644
      ],
      "excerpt": "where READOUTS is how many searches to make per move.  Timing information and \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.866424674736719
      ],
      "excerpt": "One way to play via GTP is to use gogui-display (which implements a UI that \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8657108116028192
      ],
      "excerpt": "http://gogui.sourceforge.net/. See also \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9090879774968654,
        0.8490037945672047
      ],
      "excerpt": "Another way to play via GTP is to watch it play against GnuGo, while \nspectating the games: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9378362107500353
      ],
      "excerpt": "reinforcement learning on 9x9. These are the basic commands used to produce the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8977134965533426
      ],
      "excerpt": "selfplay: plays games with the latest model, producing data used for training \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8593342951966799
      ],
      "excerpt": "training logs, and the latest checkpoint is periodically exported to GCS, where \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.827481620548638
      ],
      "excerpt": "Configuration for things like \"where do debug SGFs get written\", \"where does \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8199909113346048
      ],
      "excerpt": "execute the same commands as demonstrated below. Configuration for things like \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8667231813890414
      ],
      "excerpt": "be passed in as flags. The mask_flags.py utility helps ensure all parts of the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8037326714031384,
        0.8918480710657483
      ],
      "excerpt": "All local paths in the examples can be replaced with gs:// GCS paths, and the \nKubernetes-orchestrated version of the reinforcement learning loop uses GCS. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9268462899222507
      ],
      "excerpt": "model. This random model is also exported to --model-save-path so that \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8412703666698298
      ],
      "excerpt": "new model, starting from the latest model weights in the estimator_working_dir \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9673419405163993
      ],
      "excerpt": "tracking the model overfitting.  One way to do this is with the validate \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8067976150982306
      ],
      "excerpt": "By default, Minigo will hold out 5% of selfplay games for validation. This can \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "An open-source implementation of the AlphaGoZero algorithm",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tensorflow/minigo/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 549,
      "date": "Wed, 29 Dec 2021 05:19:22 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/tensorflow/minigo/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "tensorflow/minigo",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/trainer/Dockerfile",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/cgos/Dockerfile",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/minigui/Dockerfile",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/calibrator/Dockerfile",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/base/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/tensorflow/minigo/master/test.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/minigui/unset-minigui-common.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/minigui/fetch-and-run.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/minigui/minigui-common.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/minigui/edgetpu/install_requirements.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/minigui/edgetpu/start_chromium.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/ml_perf/repeat_run.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/ml_perf/scripts/stop_selfplay.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/ml_perf/scripts/train.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/ml_perf/scripts/common.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/ml_perf/scripts/bootstrap.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/ml_perf/scripts/make_checkpoint.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/ml_perf/scripts/start_selfplay.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/ml_perf/scripts/init_from_checkpoint.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/oneoffs/modelstats.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/oneoffs/retrain.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/sgf/opening_stats.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/sgf/fetch_dataset.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cc/test.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cc/configure_tensorflow.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cc/tensorflow/copy_outputs.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/unset-common.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/cluster-up-gpu-large.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/utils.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/make-all.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/cluster-up-cpu.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/cluster-up-gpu.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/cluster-down.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/cluster-up-simple.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/common.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/create_table.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/cluster-up-tpu.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/init-credentials.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/destroy.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/var-status.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/ringmaster/ringmaster_wrapper.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/trainer/deploy-trainer.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/selfplay/deploy-gpu-player.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/selfplay/deploy-cpu-player.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/selfplay/launch-tpu-deployment.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/selfplay/deploy-cc-player.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/minigui/run-local.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/evaluator/deploy-cc-evaluator.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/evaluator/evaluator_cc_wrapper.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/evaluator/evaluator_ringmaster_wrapper.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/cluster/evaluator/evaluator_py_wrapper.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/testing/setup.sh",
      "https://raw.githubusercontent.com/tensorflow/minigo/master/testing/bootstrap_v2.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This might be useful if you have some known set of 'good data' to test your\nnetwork against, e.g., a set of pro games.\nAssuming you've got a set of .sgfs with the proper komi & boardsizes, you'll\nwant to preprocess them into the .tfrecord files, by running something similar\nto\n\n```python\nimport preprocessing\nfilenames = [generate a list of filenames here]\nfor f in filenames:\n    try:\n        preprocessing.make_dataset_from_sgf(f, f.replace(\".sgf\", \".tfrecord.zz\"))\n    except:\n        print(f)\n```\n\nOnce you've collected all the files in a directory, producing validation is as\neasy as\n\n```shell\npython3 validate.py \\\n  validation_files/ \\\n  --work_dir=estimator_working_dir \\\n  --validation_name=pro_dataset\n```\n\nThe validate.py will glob all the .tfrecord.zz files under the\ndirectories given as positional arguments and compute the validation error\nfor the positions from those files.\n\n\nRetraining a model\n======================\n\nThe training data for most of Minigo's models up to v13 is publicly available in\nthe `minigo-pub` Cloud storage bucket, e.g.:\n\n```shell\ngsutil ls gs://minigo-pub/v13-19x19/data/golden_chunks/\n```\n\nFor models v14 and onwards, we started using Cloud BigTable and are still\nworking on making that data public.\n\nHere's how to retrain your own model from this source data using a Cloud TPU:\n\n```shell\n#: I wrote these notes using our existing TPU-enabled project, so they're missing\n#: a few preliminary steps, like setting up a Cloud account, creating a project,\n#: etc. New users will also need to enable Cloud TPU on their project using the\n#: TPUs panel.\n\n#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:\n\n#: Note that you will be billed for any storage you use and also while you have\n#: VMs running. Remember to shut down your VMs when you're not using them!\n\n#: To use a Cloud TPU on GCE, you need to create a special TPU-enabled VM using\n#: the `ctpu` tool. First, set up some environment variables:\n#:   GCE_PROJECT=<your project name>\n#:   GCE_VM_NAME=<your VM's name>\n#:   GCE_ZONE<the zone in which you want to bring uo your VM, e.g. us-central1-f>\n\n#: In this example, we will use the following values:\nGCE_PROJECT=example-project\nGCE_VM_NAME=minigo-etpu-test\nGCE_ZONE=us-central1-f\n\n#: Create the Cloud TPU enabled VM.\nctpu up \\\n  --project=\"${GCE_PROJECT}\" \\\n  --zone=\"${GCE_ZONE}\" \\\n  --name=\"${GCE_VM_NAME}\" \\\n  --tf-version=1.13\n\n#: This will take a few minutes and you should see output similar to the\n#: following:\n#:   ctpu will use the following configuration values:\n#:         Name:                 minigo-etpu-test\n#:         Zone:                 us-central1-f\n#:         GCP Project:          example-project\n#:         TensorFlow Version:   1.13\n#:  OK to create your Cloud TPU resources with the above configuration? [Yn]: y\n#:  2019/04/09 10:50:04 Creating GCE VM minigo-etpu-test (this may take a minute)...\n#:  2019/04/09 10:50:04 Creating TPU minigo-etpu-test (this may take a few minutes)...\n#:  2019/04/09 10:50:11 GCE operation still running...\n#:  2019/04/09 10:50:12 TPU operation still running...\n\n#: Once the Cloud TPU is created, `ctpu` will have SSHed you into the machine.\n\n#: Remember to set the same environment variables on your VM.\nGCE_PROJECT=example-project\nGCE_VM_NAME=minigo-etpu-test\nGCE_ZONE=us-central1-f\n\n#: Clone the Minigo Github repository:\ngit clone --depth 1 https://github.com/tensorflow/minigo\ncd minigo\n\n#: Install virtualenv.\npip3 install virtualenv virtualenvwrapper\n\n#: Create a virtual environment\nvirtualenv -p /usr/bin/python3 --system-site-packages \"${HOME}/.venvs/minigo\"\n\n#: Activate the virtual environment.\nsource \"${HOME}/.venvs/minigo/bin/activate\"\n\n#: Install Minigo dependencies (TensorFlow for Cloud TPU is already installed as\n#: part of the VM image).\npip install -r requirements.txt\n\n#: When training on a Cloud TPU, the training work directory must be on Google Cloud Storage.\n#: You'll need to choose your own globally unique bucket name.\n#: The bucket location should be close to your VM.\nGCS_BUCKET_NAME=minigo_test_bucket\nGCE_BUCKET_LOCATION=us-central1\ngsutil mb -p \"${GCE_PROJECT}\" -l \"${GCE_BUCKET_LOCATION}\" \"gs://${GCS_BUCKET_NAME}\"\n\n#: Run the training script and note the location of the training work_dir\n#: it reports, e.g.\n#:    Writing to gs://minigo_test_bucket/train/2019-04-25-18\n./oneoffs/train.sh \"${GCS_BUCKET_NAME}\"\n\n#: Launch tensorboard, pointing it at the work_dir reported by the train.sh script.\ntensorboard --logdir=gs://minigo_test_bucket/train/2019-04-25-18\n\n#: After a few minutes, TensorBoard should start updating.\n#: Interesting graphs to look at are value_cost_normalized, policy_cost and policy_entropy.\n```\n\nRunning Minigo on a Kubernetes Cluster\n==============================\n\nSee more at [cluster/README.md](https://github.com/tensorflow/minigo/tree/master/cluster/README.md)\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8186224594723177,
        0.8837680365796365
      ],
      "excerpt": "virtualenv / virtualenvwrapper \nPython 3.5+ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8639640126627107
      ],
      "excerpt": "python has a good \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9930928235234707,
        0.999833231880651,
        0.999833231880651
      ],
      "excerpt": "pip3 install virtualenv \npip3 install virtualenvwrapper \nInstall Bazel \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9659055944588752,
        0.9266913193249209,
        0.961449963107769,
        0.9863615076084784
      ],
      "excerpt": "wget https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \nchmod 755 bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \nsudo ./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \nInstall TensorFlow \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9935459261120722,
        0.9951297142880173,
        0.9865281908021987,
        0.9727315365882028
      ],
      "excerpt": "pip3 install -r requirements.txt \nThen, you'll need to choose to install the GPU or CPU tensorflow requirements: \nGPU: pip3 install \"tensorflow-gpu==1.15.0\". \nNote: You must install CUDA 10.0. for Tensorflow \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9091319775126796,
        0.8901754417894243
      ],
      "excerpt": "CPU: pip3 install \"tensorflow==1.15.0\". \nSetting up the Environment \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8543730891372104
      ],
      "excerpt": "source cluster/common.sh \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8182252651179664
      ],
      "excerpt": "To run individual modules \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8554640628555029
      ],
      "excerpt": "Prow (Test-runner dashboard): https://prow.k8s.io/?repo=tensorflow%2Fminigo \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8919958595477101
      ],
      "excerpt": "mkdir -p $MINIGO_MODELS/models \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8143739791103648
      ],
      "excerpt": "The following sequence of commands will allow you to do one iteration of \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8412140143854837
      ],
      "excerpt": "If you point TensorBoard at the estimator working directory, it will find the \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8106026060542182
      ],
      "excerpt": "Then, running \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9394632735049693
      ],
      "excerpt": "Running unit tests \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9201379779961757,
        0.8937844064392872
      ],
      "excerpt": "BOARD_SIZE=9 python3 tests/run_tests.py test_go \nBOARD_SIZE=19 python3 tests/run_tests.py test_mcts \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8633989807152664
      ],
      "excerpt": "Test Dashboard \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": "python3 selfplay.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8478157699847053
      ],
      "excerpt": "higher will print a board at each move. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": "python3 gtp.py --load_file=$LATEST_MODEL --num_readouts=$READOUTS --verbose=3 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": "WHITE=\"python3 gtp.py --load_file=$LATEST_MODEL\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8174540907975313
      ],
      "excerpt": "Training Minigo \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": "python3 bootstrap.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8877443678905201
      ],
      "excerpt": "This command starts self-playing, outputting its raw game data as tf.Examples \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991
      ],
      "excerpt": "python3 selfplay.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8280836183783735
      ],
      "excerpt": "This command takes a directory of tf.Example files from selfplay and trains a \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.858311680452074
      ],
      "excerpt": "Run the training job: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.950563948951535
      ],
      "excerpt": "python3 train.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8059547985972196
      ],
      "excerpt": "training log files and display them. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/tensorflow/minigo/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "Python",
      "TypeScript",
      "Shell",
      "Starlark",
      "HTML",
      "JavaScript",
      "Makefile",
      "Dockerfile",
      "CSS"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b\"(The MIT License)\\n\\nCopyright (c) 2014-2018 Automattic &#100;&#101;&#118;&#64;&#99;&#108;&#111;&#117;&#100;&#117;&#112;&#46;&#99;&#111;&#109;\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n'Software'), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be\\nincluded in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\"",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Minigo: A minimalist Go engine modeled after AlphaGo Zero, built on MuGo",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "minigo",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "tensorflow",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/tensorflow/minigo/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "amj",
        "body": "Model files for v199-lightning",
        "dateCreated": "2018-01-30T00:44:30Z",
        "datePublished": "2018-01-30T01:18:32Z",
        "html_url": "https://github.com/tensorflow/minigo/releases/tag/v199",
        "name": "v199-lightning",
        "tag_name": "v199",
        "tarball_url": "https://api.github.com/repos/tensorflow/minigo/tarball/v199",
        "url": "https://api.github.com/repos/tensorflow/minigo/releases/9439523",
        "zipball_url": "https://api.github.com/repos/tensorflow/minigo/zipball/v199"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3276,
      "date": "Wed, 29 Dec 2021 05:19:22 GMT"
    },
    "technique": "GitHub API"
  }
}