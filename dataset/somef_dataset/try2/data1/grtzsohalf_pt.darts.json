{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1806.09055",
      "https://arxiv.org/abs/1806.09055 (2018). [[arxiv](https://arxiv.org/abs/1806.09055)]\n\n## Requirements\n\n- python 3\n- pytorch >= 0.4.1\n- graphviz\n    - First install using `apt install` and then `pip install`.\n- numpy\n- tensorboardX\n\n## Run example\n\nAdjust the batch size if out of memory (OOM) occurs. It dependes on your gpu memory size and genotype.\n\n- Search\n\n```shell\npython search.py --name cifar10 --dataset cifar10\n```\n\n- Augment\n\n```shell\n# genotype from search results\npython augment.py --name cifar10 --dataset cifar10 --genotype \"Genotype(\n    normal=[[('sep_conv_3x3', 0), ('dil_conv_5x5', 1)], [('skip_connect', 0), ('dil_conv_3x3', 2)], [('sep_conv_3x3', 1), ('skip_connect', 0)], [('sep_conv_3x3', 1), ('skip_connect', 0)]],\n    normal_concat=range(2, 6),\n    reduce=[[('max_pool_3x3', 0), ('max_pool_3x3', 1)], [('max_pool_3x3', 0), ('skip_connect', 2)], [('skip_connect', 3), ('max_pool_3x3', 0)], [('skip_connect', 2), ('max_pool_3x3', 0)]],\n    reduce_concat=range(2, 6)\n)\"\n```\n\n- with docker\n\n```shell\n$ docker run --runtime=nvidia -it khanrc/pytorch-darts:0.2 bash\n\n# you can run directly also\n$ docker run --runtime=nvidia -it khanrc/pytorch-darts:0.2 python search.py --name cifar10 --dataset cifar10\n```\n\n## Multi-GPU\n\nThis project suppports multi-gpu. The larger batch size and learning rate are required to take advantage of multi-gpu.\n\n- Search\n\n```\npython search.py --name cifar10-mg --dataset cifar10 --gpus 0,1,2,3 \\\n    --batch_size 256 --workers 16 --print_freq 10 \\\n    --w_lr 0.1 --w_lr_min 0.004 --alpha_lr 0.0012\n```\n\n- Augment\n\n```\npython augment.py --name cifar10-mg --dataset cifar10 --gpus 0,1,2,3 \\\n    --batch_size 384 --workers 16 --print_freq 50 --lr 0.1 \\\n    --genotype \"Genotype(\n    normal=[[('sep_conv_3x3', 0), ('dil_conv_5x5', 1)], [('skip_connect', 0), ('dil_conv_3x3', 2)], [('sep_conv_3x3', 1), ('skip_connect', 0)], [('sep_conv_3x3', 1), ('skip_connect', 0)]],\n    normal_concat=range(2, 6),\n    reduce=[[('max_pool_3x3', 0), ('max_pool_3x3', 1)], [('max_pool_3x3', 0), ('skip_connect', 2)], [('skip_connect', 3), ('max_pool_3x3', 0)], [('skip_connect', 2), ('max_pool_3x3', 0)]],\n    reduce_concat=range(2, 6)\n)\"\n```\n\nSimply, `--gpus all` makes to use all gpus.\n\n### Cautions\n\nIt is well-known problem that the larger batch size causes the lower generalization.\nNote that although the [linear scaling rule](https://arxiv.org/pdf/1706.02677) prevents this problem somewhat, the generalization still could be bad.\n\nFurthermore, we do not know about the scalability of DARTS, where larger batch size could be more harmful.\nSo, please pay attention to the hyperparameters when using multi-gpu.\n\n## Results\n\nThe following results were obtained using the default arguments, except for the epochs. `--epochs 300` was used in MNIST and Fashion-MNIST.\n\n| Dataset | Final validation acc | Best validation acc |\n| ------- | -------------------- | ------------------- |\n| MNIST         | 99.75% | 99.81% |\n| Fashion-MNIST | 99.27% | 99.39% |\n| CIFAR-10       | 97.17% | 97.23% |\n\n97.17%, final validation accuracy in CIFAR-10, is the same number as the paper.\n\n### Found architectures\n\n```py\n# CIFAR10\nGenotype(\n    normal=[[('sep_conv_3x3', 0), ('dil_conv_5x5', 1)], [('skip_connect', 0), ('dil_conv_3x3', 2)], [('sep_conv_3x3', 1), ('skip_connect', 0)], [('sep_conv_3x3', 1), ('skip_connect', 0)]],\n    normal_concat=range(2, 6),\n    reduce=[[('max_pool_3x3', 0), ('max_pool_3x3', 1)], [('max_pool_3x3', 0), ('skip_connect', 2)], [('skip_connect', 3), ('max_pool_3x3', 0)], [('skip_connect', 2), ('max_pool_3x3', 0)]],\n    reduce_concat=range(2, 6)\n)\n\n# FashionMNIST\nGenotype(\n    normal=[[('max_pool_3x3', 0), ('dil_conv_5x5', 1)], [('max_pool_3x3', 0), ('sep_conv_3x3', 1)], [('sep_conv_5x5', 1), ('sep_conv_3x3', 3)], [('sep_conv_5x5', 4), ('dil_conv_5x5', 3)]],\n    normal_concat=range(2, 6),\n    reduce=[[('sep_conv_3x3', 1), ('avg_pool_3x3', 0)], [('avg_pool_3x3', 0), ('skip_connect', 2)], [('skip_connect', 3), ('avg_pool_3x3', 0)], [('sep_conv_3x3', 2), ('skip_connect', 3)]],\n    reduce_concat=range(2, 6)\n)\n\n# MNIST\nGenotype(\n    normal=[[('sep_conv_3x3', 0), ('dil_conv_5x5', 1)], [('sep_conv_3x3', 2), ('sep_conv_3x3', 1)], [('dil_conv_5x5', 3), ('sep_conv_3x3', 1)], [('sep_conv_5x5', 4), ('dil_conv_5x5', 3)]],\n    normal_concat=range(2, 6),\n    reduce=[[('dil_conv_3x3', 0), ('sep_conv_3x3', 1)], [('avg_pool_3x3', 0), ('skip_connect', 2)], [('dil_conv_5x5', 3), ('avg_pool_3x3', 0)], [('dil_conv_3x3', 1), ('max_pool_3x3', 0)]],\n    reduce_concat=range(2, 6)\n)\n```\n\n### Architecture progress\n\n<p align=\"center\">\n<img src=\"assets/cifar10-normal.gif\" alt=\"cifar10-progress-normal\" width=45% />\n<img src=\"assets/cifar10-reduce.gif\" alt=\"cifar10-progress-reduce\" width=45% />\n<br/> CIFAR-10 \n</p>\n\n<p align=\"center\">\n<img src=\"assets/mnist-normal.gif\" alt=\"mnist-progress-normal\" width=45% />\n<img src=\"assets/mnist-reduce.gif\" alt=\"mnist-progress-reduce\" width=45% />\n<br/> MNIST \n</p>\n\n<p align=\"center\">\n<img src=\"assets/fashionmnist-normal.gif\" alt=\"fashionmnist-progress-normal\" width=45% />\n<img src=\"assets/fashionmnist-reduce.gif\" alt=\"fashionmnist-progress-reduce\" width=45% />\n<br/> Fashion-MNIST \n</p>\n\n### Plots\n\n<p align=\"center\">\n<img src=\"assets/fashionmnist-search.png\" alt=\"fashionmnist-search\" width=80% />\n</p>\n<p align=\"center\"> Search-training phase of Fashion-MNIST </p>\n\n<p align=\"center\">\n<img src=\"assets/cifar10-val.png\" alt=\"cifar10-val\" width=48% />\n<img src=\"assets/fashionmnist-val.png\" alt=\"fashionmnist-val\" width=48% />\n</p>\n<p align=\"center\"> Augment-validation phase of CIFAR-10 and Fashion-MNIST </p>\n\n## Reference\n\nhttps://github.com/quark0/darts (official implementation)\n\n### Main differences to reference code\n\n- Supporting pytorch >= 0.4\n- Supporting multi-gpu\n- Code that is easy to read and commented.\n- Implemenation of architect\n    - Original implementation is very slow in pytorch >= 0.4.\n- Tested on FashionMNIST / MNIST\n- Tensorboard\n- No RNN\n\nand so on."
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Supporting pytorch >= 0.4\n- Supporting multi-gpu\n- Code that is easy to read and commented.\n- Implemenation of architect\n    - Original implementation is very slow in pytorch >= 0.4.\n- Tested on FashionMNIST / MNIST\n- Tensorboard\n- No RNN\n\nand so on.\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "https://github.com/quark0/darts (official implementation)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9999994866699605
      ],
      "excerpt": "Liu, Hanxiao, Karen Simonyan, and Yiming Yang. \"Darts: Differentiable architecture search.\" arXiv preprint arXiv:1806.09055 (2018). [arxiv] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8550101043698384
      ],
      "excerpt": "| CIFAR-10       | 97.17% | 97.23% | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "<br/> CIFAR-10  \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/grtzsohalf/pt.darts",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-02-17T05:41:49Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-07-06T01:58:42Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8429175066359496
      ],
      "excerpt": "This project suppports multi-gpu. The larger batch size and learning rate are required to take advantage of multi-gpu. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9111074485627132,
        0.8090556745907551,
        0.9498776349430719
      ],
      "excerpt": "It is well-known problem that the larger batch size causes the lower generalization. \nNote that although the linear scaling rule prevents this problem somewhat, the generalization still could be bad. \nFurthermore, we do not know about the scalability of DARTS, where larger batch size could be more harmful. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9056138351452624
      ],
      "excerpt": "The following results were obtained using the default arguments, except for the epochs. --epochs 300 was used in MNIST and Fashion-MNIST. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8354789014027051
      ],
      "excerpt": "<p align=\"center\"> Search-training phase of Fashion-MNIST </p> \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/grtzsohalf/pt.darts/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 23:53:37 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/grtzsohalf/pt.darts/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "grtzsohalf/pt.darts",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/grtzsohalf/pt.darts/master/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "invocation": [
    {
      "confidence": [
        0.9109415763660691
      ],
      "excerpt": "python search.py --name cifar10-mg --dataset cifar10 --gpus 0,1,2,3 \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9109415763660691
      ],
      "excerpt": "python augment.py --name cifar10-mg --dataset cifar10 --gpus 0,1,2,3 \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8105373868313416
      ],
      "excerpt": "| CIFAR-10       | 97.17% | 97.23% | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9089680444231242,
        0.8626262671392911
      ],
      "excerpt": "<img src=\"assets/cifar10-normal.gif\" alt=\"cifar10-progress-normal\" width=45% /> \n<img src=\"assets/cifar10-reduce.gif\" alt=\"cifar10-progress-reduce\" width=45% /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9226304745401276,
        0.8466456688619642
      ],
      "excerpt": "<img src=\"assets/mnist-normal.gif\" alt=\"mnist-progress-normal\" width=45% /> \n<img src=\"assets/mnist-reduce.gif\" alt=\"mnist-progress-reduce\" width=45% /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9226304745401276,
        0.8466456688619642
      ],
      "excerpt": "<img src=\"assets/fashionmnist-normal.gif\" alt=\"fashionmnist-progress-normal\" width=45% /> \n<img src=\"assets/fashionmnist-reduce.gif\" alt=\"fashionmnist-progress-reduce\" width=45% /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8999813819370864
      ],
      "excerpt": "<img src=\"assets/fashionmnist-search.png\" alt=\"fashionmnist-search\" width=80% /> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8666765710752222,
        0.8511425194293429
      ],
      "excerpt": "<img src=\"assets/cifar10-val.png\" alt=\"cifar10-val\" width=48% /> \n<img src=\"assets/fashionmnist-val.png\" alt=\"fashionmnist-val\" width=48% /> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/grtzsohalf/pt.darts/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Junbum Cha\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "DARTS: Differentiable Architecture Search",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pt.darts",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "grtzsohalf",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/grtzsohalf/pt.darts/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- python 3\n- pytorch >= 0.4.1\n- graphviz\n    - First install using `apt install` and then `pip install`.\n- numpy\n- tensorboardX\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Adjust the batch size if out of memory (OOM) occurs. It dependes on your gpu memory size and genotype.\n\n- Search\n\n```shell\npython search.py --name cifar10 --dataset cifar10\n```\n\n- Augment\n\n```shell\n#: genotype from search results\npython augment.py --name cifar10 --dataset cifar10 --genotype \"Genotype(\n    normal=[[('sep_conv_3x3', 0), ('dil_conv_5x5', 1)], [('skip_connect', 0), ('dil_conv_3x3', 2)], [('sep_conv_3x3', 1), ('skip_connect', 0)], [('sep_conv_3x3', 1), ('skip_connect', 0)]],\n    normal_concat=range(2, 6),\n    reduce=[[('max_pool_3x3', 0), ('max_pool_3x3', 1)], [('max_pool_3x3', 0), ('skip_connect', 2)], [('skip_connect', 3), ('max_pool_3x3', 0)], [('skip_connect', 2), ('max_pool_3x3', 0)]],\n    reduce_concat=range(2, 6)\n)\"\n```\n\n- with docker\n\n```shell\n$ docker run --runtime=nvidia -it khanrc/pytorch-darts:0.2 bash\n\n#: you can run directly also\n$ docker run --runtime=nvidia -it khanrc/pytorch-darts:0.2 python search.py --name cifar10 --dataset cifar10\n```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 23:53:37 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Adjust the batch size if out of memory (OOM) occurs. It dependes on your gpu memory size and genotype.\n\n- Search\n\n```shell\npython search.py --name cifar10 --dataset cifar10\n```\n\n- Augment\n\n```shell\n#: genotype from search results\npython augment.py --name cifar10 --dataset cifar10 --genotype \"Genotype(\n    normal=[[('sep_conv_3x3', 0), ('dil_conv_5x5', 1)], [('skip_connect', 0), ('dil_conv_3x3', 2)], [('sep_conv_3x3', 1), ('skip_connect', 0)], [('sep_conv_3x3', 1), ('skip_connect', 0)]],\n    normal_concat=range(2, 6),\n    reduce=[[('max_pool_3x3', 0), ('max_pool_3x3', 1)], [('max_pool_3x3', 0), ('skip_connect', 2)], [('skip_connect', 3), ('max_pool_3x3', 0)], [('skip_connect', 2), ('max_pool_3x3', 0)]],\n    reduce_concat=range(2, 6)\n)\"\n```\n\n- with docker\n\n```shell\n$ docker run --runtime=nvidia -it khanrc/pytorch-darts:0.2 bash\n\n#: you can run directly also\n$ docker run --runtime=nvidia -it khanrc/pytorch-darts:0.2 python search.py --name cifar10 --dataset cifar10\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}