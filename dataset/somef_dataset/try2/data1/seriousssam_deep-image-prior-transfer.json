{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1806.09055"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9292203446217157
      ],
      "excerpt": "Project conducted with: Anirudh Singh Shekhawat, Aishma Raghu, Michelle Sit for CSE 253 (Neural Networks for Pattern Recognition) with Prof. Gary Cottrell. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/seriousssam/deep-image-prior-transfer",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-11-07T09:52:22Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-05-08T20:32:52Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.878036195859761,
        0.9037783480316257,
        0.904405617363417
      ],
      "excerpt": "Project conducted with: Anirudh Singh Shekhawat, Aishma Raghu, Michelle Sit for CSE 253 (Neural Networks for Pattern Recognition) with Prof. Gary Cottrell. \nThis project consists in: \n1) An implementation of Ulyanov et al's \"Deep Image Prior\" work (https://dmitryulyanov.github.io/deep_image_prior). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8151827266543753,
        0.9020196351940221
      ],
      "excerpt": "The notebook \nA pdf of the notebook (since the notebook doesn't load in the browser) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9640746387156309,
        0.9658053131519054,
        0.9644047405864566,
        0.9879247616606568,
        0.9674446306158268
      ],
      "excerpt": "Deep image prior is a convolutional neural network with a fixed input. The structure of the network functions as a prior for natural images; the network only trains on one image to complete an image enhancement task. \nWe have implemented two of those tasks based on the original paper: \n- In superresolution, the goal is to enhance an image by increasing its resolution. The output of the network has width and height equal to 4x the original image's width and size. The network's output image is downsampled (in a differentiable way) and the loss is computed against the original image itself. \n- In inpainting, the goal is to \"fill in\" a region that is corrupted. In our implementation, we assume the filter defining the corrupt pixels is given. The network's output is the same size as the original image, and the loss is computed only for non-corrupt pixels. The network \"hallucinates\" the corrupt pixels and achieves impressive results. \nCan this set-up be used more efficiently? For example, in video data, a lot of the images are very similar to each other, and if we wanted to remove subtitles from a movie, we shouldn't have to rerun the network with random weight initialization every time. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9726305032125412
      ],
      "excerpt": "- Using the weights of a network to encode in image can be used for image compression. In typical ML compression schemes, an autoencoder is used, with the encoder creating the compressed representation and the decoder \"unpacking\" it. Here the training would be the process by which the compressed representation is created, and the compressed representation would be the weights of the network. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9662889706777096
      ],
      "excerpt": "Subtitle Pixels Extraction: A portion of the code is dedicated to creating a filter that selects the pixels that are in the subtitle. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/seriousssam/deep-image-prior-transfer/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 22 Dec 2021 15:21:38 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/seriousssam/deep-image-prior-transfer/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "seriousssam/deep-image-prior-transfer",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/seriousssam/deep-image-prior-transfer/master/DIP_notebook.ipynb"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/seriousssam/deep-image-prior-transfer/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Deep Image Prior with Transfer Learning",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "deep-image-prior-transfer",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "seriousssam",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/seriousssam/deep-image-prior-transfer/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Wed, 22 Dec 2021 15:21:38 GMT"
    },
    "technique": "GitHub API"
  }
}