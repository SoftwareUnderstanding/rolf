{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[image1]: static/sample_dog_output.png \"Sample Output\"\n[image2]: static/vgg16_model.png \"VGG-16 Model Layers\"\n[image3]: static/vgg16_model_draw.png \"VGG16 Model Figure\"\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.915226336286114
      ],
      "excerpt": "* https://towardsdatascience.com/dog-breed-classification-hands-on-approach-b5e4f88c333e \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9813818230870502
      ],
      "excerpt": "* https://towardsdatascience.com/dog-breed-prediction-using-cnns-and-transfer-learning-22d8ed0b16c5 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8444342525991423
      ],
      "excerpt": "* https://course.fast.ai/videos/?lesson=6 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8112240738218601
      ],
      "excerpt": "Step 5: Write your Algorithm \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/bertrandlalo/DeepLearning_CNN_DogBreeds",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-11-10T11:37:35Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-05-06T15:47:47Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9517284606827299,
        0.9904193552202541
      ],
      "excerpt": "This repo hosts my capstone exercise to the Convolutional Neural Networks (CNN)  \nproject in the AI Nanodegree of Udacity!  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8797666009547398,
        0.938423772034906,
        0.8149617992933309
      ],
      "excerpt": "Given an image of a dog, my algorithm should be able to identify  \nan estimate of the canine\u2019s breed.  \nIf supplied an image of a human, it will identify the resembling dog breed.   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906012401445207
      ],
      "excerpt": "Along with exploring state-of-the-art CNN models for classification and localization, you will make important design decisions about the user experience for your app.  Our goal is that by completing this lab, you understand the challenges involved in piecing together a series of models designed to perform various tasks in a data processing pipeline.  Each model has its strengths and weaknesses, and engineering a real-world application often involves solving many problems without a perfect answer.  Your imperfect solution will nonetheless create a fun user experience! \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9931141449620001,
        0.8472199738267316,
        0.8693597097771151
      ],
      "excerpt": "I learned that the practice is far ahead of the theory in deep learning :)    \nFirst, I tried to build a CNN from scratch. This model had to learn how to see by seeing only a few dog images.  \nI experimented with many (many!!) different architectures...  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9579852453996746,
        0.9735366097105974,
        0.981318673081035,
        0.814636603022443
      ],
      "excerpt": "I took me hours of litterature reading, to handle overfitting, nights of training to test hyperparameters, almost drove me crazy not to do better than 35%! I conclueded, that one cannot properly learn how to see if it only sees dogs! \nThen, using transfer learning, I could take advantage of a model already sees, ie. recognizes patterns, textures, colors... and I only neeeded to teach him how to recognize dog breeds.  \nWith the very same sets preparation, it took me about half an hour to choose and implement the model, trained it for only 5 epochs and get >80% accuaracy. \nThere are a lot of very inspiring works already done, that I could read and take inspirations from, to quote a few:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8447539008718965
      ],
      "excerpt": "On optimization: gradient descent optimizer and batch normalization \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9742441374022618
      ],
      "excerpt": "I did not really work for me as good as I expected but I took time to do a 'POC' using Siamese network to teach a network to estimate the dissimilarity between two dog pictures. I certainly neeed to refine my architecture, but I took so long to train and test that I did not pursued in that direction... I'll put the exploratory notebook in this repository though.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8636003020126849,
        0.925344610050248,
        0.9436020623823118
      ],
      "excerpt": "- Dropout: remove activations at random during training in order to regularize the model \n- Data augmentation: modify model inputs during training in order to effectively increase data size \n- Batch normalization : adjust the parameterization of a model in order to make the loss surface smoother \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9490093806708662,
        0.8607652523345192,
        0.8715772418663581
      ],
      "excerpt": "- Optimizer & Batch size: I first added a momentum on my SGD optimizer, to accelerate the training, but I had trouble to adjust together (batch size, learning rate, momentum). I then readed about Adam Optimizer that is adaptative, which indeed was easyer to use. Also, I started with batch size of 64, but the variability on losses across epochs was large, as if the model learned too much before validation check, so I decreased batch size to 20.  \nSomething that would worse testing that would be instead of Adam, try Optimgrad or SGD with nesterov momentum (need to choose parameters). \nWe break the notebook into separate steps.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9295947358364784,
        0.9715360652689978
      ],
      "excerpt": "Step 3: Create a CNN to Classify Dog Breeds (from Scratch) \nStep 4: Create a CNN to Classify Dog Breeds (using Transfer Learning) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "As part of Udacity online course on Deep Learning, this notebook is my first 'hands-on' exercise to use convolutionnal neural networks to classify images.  I'm tackling the very classic problem of dog classification. The goal is to build a model capable of doing breed classification of a dog by just \u201clooking\u201d into its image.  If a dog is detected in the image, the app should provide an estimate of the dog's breed. If it's a human, it will provide an estimate of the dog breed that is most resembling.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/bertrandlalo/deep_dog_breeds/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Fri, 24 Dec 2021 16:46:04 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/bertrandlalo/DeepLearning_CNN_DogBreeds/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "bertrandlalo/DeepLearning_CNN_DogBreeds",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/bertrandlalo/deep_dog_breeds/master/dog_app.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8050169355212412,
        0.8892618668272806,
        0.8892618668272806
      ],
      "excerpt": "* https://towardsdatascience.com/dog-breed-classification-hands-on-approach-b5e4f88c333e \n* https://medium.com/@imBharatMishra/dog-breed-classification-with-keras-848b9b1525c1 \n* https://medium.com/@iliazaitsev/dogs-breeds-classification-with-keras-b1fd0ab5e49c \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8041174216608855
      ],
      "excerpt": "We break the notebook into separate steps.  \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8775139593253132
      ],
      "excerpt": "![Sample Output][image1] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8346205854340113
      ],
      "excerpt": "- Data augmentation: modify model inputs during training in order to effectively increase data size \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8016243621608051
      ],
      "excerpt": "Step 0: Import Datasets \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/bertrandlalo/DeepLearning_CNN_DogBreeds/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "HTML",
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "(Image References)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "DeepLearning_CNN_DogBreeds",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "bertrandlalo",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/bertrandlalo/DeepLearning_CNN_DogBreeds/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "0. Install Python 3.6\n1. Clone the repository and navigate to the downloaded folder.\n\t\n\t```\t\n\t\tgit clone https://github.com/udacity/deep-learning-v2-pytorch.git\n\t\tcd deep_dog_breeds\n\t```\n2. Download the [dog dataset](https://s3-us-west-1.amazonaws.com/udacity-aind/dog-project/dogImages.zip).  Unzip the folder and place it in the repo, at location `path/to/dog-project/dogImages`.  The `dogImages/` folder should contain 133 folders, each corresponding to a different dog breed.\n3. Download the [human dataset](http://vis-www.cs.umass.edu/lfw/lfw.tgz).  Unzip the folder and place it in the repo, at location `path/to/dog-project/lfw`.  If you are using a Windows machine, you are encouraged to use [7zip](http://www.7-zip.org/) to extract the folder. \n4. Create and activate an environment: \n\t```\t\n\t\tconda env create -f environment.yml \n\t\tconda activate deep_dog_breeds-env\n\t```\n5. Open a terminal window and navigate to the project folder. Open the notebook and follow the instructions.\n\t\n\t```\n\t\tjupyter notebook dog_app.ipynb\n\t```\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Fri, 24 Dec 2021 16:46:04 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "---\n\t\n```\n    jupyter notebook dog_app.ipynb\n```\n",
      "technique": "Header extraction"
    }
  ]
}