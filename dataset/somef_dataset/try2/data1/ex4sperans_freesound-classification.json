{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1704.03135",
      "https://arxiv.org/abs/1807.03748"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8906174419333412
      ],
      "excerpt": "  --experiment=path_to_an_experiment (see above) \\ \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ex4sperans/freesound-classification",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-04-12T18:15:06Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-07T07:24:42Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8072965569201253
      ],
      "excerpt": "My approach is outlined below. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9916963194315261,
        0.8733971594085799,
        0.9929837444463264
      ],
      "excerpt": "I used two types of models, both are based on convolutions. The first type uses 2d convolutions and works on top of mel-scale spectrograms, while the second uses 1d-convolutions on top of raw STFT representations with relatively small window size like 256, so it's only 5 ms per frame or so. Both types of models are relatively shallow and consist of 10-12 convolutional layers (or 5-6 resnet blocks) with a small number of filters. I use a form of deep supervision by applying global max pooling after each block (typically starting from the first or second block) and then concatenating maxpool outputs from each layer to form the final feature vector which then goes to a 2-layer fully-connected classifier. I also tried using RNNs instead of a max pooling for some models. It made results a bit worse, but RNN seemed to make different mistakes, so it turned out to be a good member of the final ensemble. \nFrequency encoding \n2d convolutions are position-invariant, so the output of a convolution would be the same regardless of where the feature is located. Spectrograms are not images, Y-axis corresponds to signal frequency, so it would be nice to assist a model by providing this sort of information. For this purpose, I used a linear frequency map going from -1 to 1 and concatenated it to input spectrogram as a second channel. It's hard to estimate now without retraining all the models how much gain I got from this little modification, but I can say It was no less than 0.005 in terms of local CV score. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9961351960510487,
        0.8979411005071259,
        0.9427622738381122,
        0.986342057276779,
        0.9839800046787754
      ],
      "excerpt": "Most teams treated the problem as a multilabel classification and used a form of a binary loss such as binary cross entropy or focal loss. This approach is definitely valid, but in my experiments, it appeared to be a little suboptimal. The reason is the metric (lwlrap) is not a pure classification metric. Contrary to accuracy or f-score, it is based on ranks. So it wasn't really a surprise for me when I used a loss function based on ranks rather than on binary outputs, I got a huge improvement. Namely, I used something called LSEP (https://arxiv.org/abs/1704.03135) which is just a soft version of pairwise rank loss. It makes your model to score positive classes higher than negative ones, while a binary loss increases positive scores and decreases negative scores independently. When I switched to LSEP from BCE, I immediately got approximately 0.015 of improvement, and, as a nice bonus, my models started to converge much faster. \nData augmentation \nI used two augmentation strategies. The first one is a modified MixUp. In contrast to the original approach, I used OR rule for mixing labels. I did so because a mix of two sounds still allows you to hear both. I tried the original approach with weighted targets on some point and my results got worse. \nThe second strategy is augmentations based on audio effects such as reverb, pitch, tempo and overdrive. I chose the parameters of these augmentations by carefully listening to augmented samples. \nI have found augmentations to be very important for getting good results. I guess the total improvement I got from these two strategies is about 0.05 or so. I also tried several other approaches such as splitting the audio into several chunks and then shuffling them, replacing some parts of the original signals with silence and some other, but they didn't make my models better. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8380189339108643,
        0.8979411005071259,
        0.9208267354487987,
        0.9799283008608157
      ],
      "excerpt": "I used quite large audio segments for training. For most of my models, I used segments from 8 to 12 seconds. I didn't use TTA for inference and used full-length audio instead. \nNoisy data \nI tried several unsupervised approaches such as Contrastive Predicting Coding, but never managed to get good results from it. \nI ended up applying a form of iterative pseudolabeling. I predicted new labels for the noisy subset using a model trained on curated data only, chose best 1k in terms of the agreement between the predicted labels and actual labels and added these samples to the curated subset with the original labels. I repeated the procedure using top 2k labels this time. I applied this approach several times until I reached 5k best noisy samples. At that point, predictions generated by a model started to diverge significantly from the actual noisy labels. I decided to discard the labels of the remaining noisy samples and simply used model prediction as actual labels. In total, I trained approximately 20 models using different subsets of the noisy train set with different pseudolabeling strategies. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9234165467005877
      ],
      "excerpt": "I got a great speed-up by computing both STFT spectrograms and mel spectrograms on a GPU. I also grouped samples with similar lengths together to avoid excessive padding. These two methods combined with relatively small models allowed me to predict the first stage test set in only 1 minute by any of my models (5 folds).  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9923191629415709,
        0.8132235659657563
      ],
      "excerpt": "For the final solution, I used a simple average of 11 models trained with slightly different architectures (1d/2d cnn, rnn/no-rnn), slightly different subsets of the noisy set (see \"noisy data\" section) and slightly different hyperparameters. \nMain training scripts are train_2d_cnn.py and train_hierarcical_cnn.py. All classification models are defined in networks/classifiers. All data augmentations are defined in ops/transforms. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "  --test_data_dir=data/train_noisy/ \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Code for the 3rd place solution to Freesound Audio Tagging 2019 Challenge",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ex4sperans/freesound-classification/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 7,
      "date": "Tue, 21 Dec 2021 23:04:17 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ex4sperans/freesound-classification/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ex4sperans/freesound-classification",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "I place all the data into `data/` directory, please adjust the following code to match yours data location. Run\n\n```bash\npython create_class_map.py --train_df data/train_curated.csv --output_file data/classmap.json\n```\n\nThis simply creates a JSON file with deterministic classname->label mapping used in all future experiments.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "I recommend using some environment manager such as conda or virtualenv in order to avoid potential conflicts between different versions of packages. To install all required packages, simply run `pip install -r requirements.txt`. This might take up to 15 minutes depending on your internet connection speed.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8902627162932362
      ],
      "excerpt": "mkdir predictions/ \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8106026060542182
      ],
      "excerpt": "Then, running  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091
      ],
      "excerpt": "python predict_2d_cnn.py \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8525447642357499
      ],
      "excerpt": "  --test_df=data/train_noisy.csv \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8518704234306399
      ],
      "excerpt": "  --classmap=data/classmap.json \\ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8573356932819617
      ],
      "excerpt": "creates a new csv file in the predictions folder with the class probabilties for the noisy dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091,
        0.8525447642357499
      ],
      "excerpt": "python relabel_noisy_data.py \\ \n  --noisy_df=data/train_noisy.csv \\ \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ex4sperans/freesound-classification/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "3rd place solution to Freesound Audio Tagging 2019 Challenge",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "freesound-classification",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ex4sperans",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ex4sperans/freesound-classification/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\npython train_2d_cnn.py \\\n  --train_df data/train_curated.csv \\\n  --train_data_dir data/train_curated/ \\\n  --classmap data/classmap.json \\\n  --device=cuda \\\n  --optimizer=adam \\\n  --folds 0 1 2 3 4 \\\n  --n_folds=5 \\\n  --log_interval=10 \\\n  --batch_size=20 \\\n  --epochs=20 \\\n  --accumulation_steps=1 \\\n  --save_every=20 \\\n  --num_conv_blocks=5 \\\n  --conv_base_depth=50 \\\n  --growth_rate=1.5 \\\n  --weight_decay=0.0 \\\n  --start_deep_supervision_on=1 \\\n  --aggregation_type=max \\\n  --lr=0.003 \\\n  --scheduler=1cycle_0.0001_0.005 \\\n  --test_data_dir data/test \\\n  --sample_submission data/sample_submission.csv \\\n  --num_workers=6 \\\n  --output_dropout=0.0 \\\n  --p_mixup=0.0 \\\n  --switch_off_augmentations_on=15 \\\n  --features=mel_2048_1024_128 \\\n  --max_audio_length=15 \\\n  --p_aug=0.0 \\\n  --label=basic_2d_cnn\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\npython train_2d_cnn.py \\\n  --train_df data/train_curated.csv \\\n  --train_data_dir data/train_curated/ \\\n  --classmap data/classmap.json \\\n  --device=cuda \\\n  --optimizer=adam \\\n  --folds 0 1 2 3 4 \\\n  --n_folds=5 \\\n  --log_interval=10 \\\n  --batch_size=20 \\\n  --epochs=100 \\\n  --accumulation_steps=1 \\\n  --save_every=20 \\\n  --num_conv_blocks=5 \\\n  --conv_base_depth=100 \\\n  --growth_rate=1.5 \\\n  --weight_decay=0.0 \\\n  --start_deep_supervision_on=1 \\\n  --aggregation_type=max \\\n  --lr=0.003 \\\n  --scheduler=1cycle_0.0001_0.005 \\\n  --test_data_dir data/test \\\n  --sample_submission data/sample_submission.csv \\\n  --num_workers=16 \\\n  --output_dropout=0.5 \\\n  --p_mixup=0.5 \\\n  --switch_off_augmentations_on=90 \\\n  --features=mel_2048_1024_128 \\\n  --max_audio_length=15 \\\n  --p_aug=0.75 \\\n  --label=2d_cnn\n```\n\nNote that each such run is followed by a creation of a new experiment subdirectory in the `experiments` folder. Each experiment has the following structure:\n\n```bash\nexperiments/some_experiment/\n\u251c\u2500\u2500 checkpoints\n\u251c\u2500\u2500 command\n\u251c\u2500\u2500 commit_hash\n\u251c\u2500\u2500 config.json\n\u251c\u2500\u2500 log\n\u251c\u2500\u2500 predictions\n\u251c\u2500\u2500 results.json\n\u2514\u2500\u2500 summaries\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\npython train_2d_cnn.py \\\n  --train_df data/train_curated.csv \\\n  --train_data_dir data/train_curated/ \\\n  --noisy_train_df predictions/ train_noisy_relabeled_1k.csv \\\n  --noisy_train_data_dir data/train_noisy/ \\\n  --classmap data/classmap.json \\\n  --device=cuda \\\n  --optimizer=adam \\\n  --folds 0 1 2 3 4 \\\n  --n_folds=5 \\\n  --log_interval=10 \\\n  --batch_size=20 \\\n  --epochs=150 \\\n  --accumulation_steps=1 \\\n  --save_every=20 \\\n  --num_conv_blocks=6 \\\n  --conv_base_depth=100 \\\n  --growth_rate=1.5 \\\n  --weight_decay=0.0 \\\n  --start_deep_supervision_on=1 \\\n  --aggregation_type=max \\\n  --lr=0.003 \\\n  --scheduler=1cycle_0.0001_0.005 \\\n  --test_data_dir data/test \\\n  --sample_submission data/sample_submission.csv \\\n  --num_workers=16 \\\n  --output_dropout=0.7 \\\n  --p_mixup=0.5 \\\n  --switch_off_augmentations_on=140 \\\n  --features=mel_2048_1024_128 \\\n  --max_audio_length=15 \\\n  --p_aug=0.75 \\\n  --label=2d_cnn_noisy\n```\n\nNote that `relabel_noisy_data.py` script supports multiple relabeling straregies. I mostly followed \"scoring\" strategy (selecting top-k noisy samples based on the agreement between the model and the actual labels), but after 5k noisy samples I switched to \"relabelall-replacenan\" strategy which is just a pseudolabeling (usage of the old model outputs) where the samples without any predictions are discarded.\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 51,
      "date": "Tue, 21 Dec 2021 23:04:17 GMT"
    },
    "technique": "GitHub API"
  }
}