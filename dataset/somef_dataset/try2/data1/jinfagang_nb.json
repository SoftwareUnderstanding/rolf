{
  "citation": [
    {
      "confidence": [
        0.8444342525991423
      ],
      "excerpt": "  rand_tensor = torch.rand(1,3,32,32) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jinfagang/nb",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-09-11T07:20:15Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-15T06:15:02Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8658332079605215,
        0.9708267626139627,
        0.9732350280234525
      ],
      "excerpt": "Nenural network Blocks (aka: NB, or neural network builder). This library provides massive fancy blocks for you for quick import to build your powerful. Some SOTA tricks and connections such as CSP, ASFF, Attention, BaseConv, Hardswish, Mish all included for quick prototype your model. This is an Arsenal for deeplearning forge. \nnb is an idea comes from engineering, we build model with some common blocks, we exploring new ideas with SOTA tricks, but all those thing can be gathered into one single place, and for model quick design and prototyping. \nthis project is under construct for now, I will update it quickly once I found some new blocks that really works in model. Also, every single updated block will be recorded in updates. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8475975626292845
      ],
      "excerpt": "2021.01.22: Adding Triplet Attention Mechanism. You can plug it in any of your conv net blocks using the following code: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9161506616605533
      ],
      "excerpt": "Also PANet module also provided now. BiFPN is on the way. We will also provide more examples on how to using it! \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9738775307989194
      ],
      "excerpt": "2020.09.22: New backbone of Ghostnet and MobilenetV3 included. Both of them can be used to replace any of your application's backbone. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9721804223549619
      ],
      "excerpt": "SpineNet is a backbone model specific for detection, it's a backbone but can do FPN's thing!! More info pls reference google's paper link. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = SpineNet() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Neural Network Blocks - Collect all kinds of fancy model blocks for you to build more powerful neural network model.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jinfagang/nb/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 33,
      "date": "Sun, 26 Dec 2021 07:14:03 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jinfagang/nb/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "jinfagang/nb",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/jinfagang/nb/master/upload_pypi.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**nb** can be installed from PIP, remember the name is `nbnb`:\n\n```\nsudo pip3 install nbnb\n```\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9062634780468262
      ],
      "excerpt": "2020.09.14: We release a primary version of 0.04, which you can build a simple YoloV5 with nb easily! \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.999746712887969
      ],
      "excerpt": "  pip install nbnb \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8289669050403863
      ],
      "excerpt": "  output = att_mechanism(rand_tensor) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jinfagang/nb/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/jinfagang/nb/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'        \\r\\n        \\r\\n        Copyright 2020 Fagang Jin \\r\\n         jinfagang19@gmail.com\\r\\n\\r\\n\\r\\nLicensed under the Apache License, Version 2.0 (the \"License\");\\r\\nyou may not use this file except in compliance with the License.\\r\\nYou may obtain a copy of the License at\\r\\n\\r\\n    http://www.apache.org/licenses/LICENSE-2.0\\r\\n\\r\\nUnless required by applicable law or agreed to in writing, software\\r\\ndistributed under the License is distributed on an \"AS IS\" BASIS,\\r\\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\nSee the License for the specific language governing permissions and\\r\\nlimitations under the License.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "NB",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "nb",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "jinfagang",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jinfagang/nb/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 146,
      "date": "Sun, 26 Dec 2021 07:14:03 GMT"
    },
    "technique": "GitHub API"
  },
  "support": [
    {
      "confidence": [
        1
      ],
      "excerpt": "We list all `conv` and `block` support in **nb** here:\n\n- `conv`:\n  - Conv\n  - ConvWS: https://arxiv.org/pdf/1903.10520.pdf\n  - ...\n- `Blocks`:\n  - CSPBlock: \n\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Here is an example of using NB to build YoloV5! \n\n**updates**: We have another YoloV5-ASFF version added in example!\n\n```python\nimport torch\nfrom torch import nn\nfrom nb.torch.blocks.bottleneck_blocks import SimBottleneckCSP\nfrom nb.torch.blocks.trans_blocks import Focus\nfrom nb.torch.blocks.head_blocks import SPP\nfrom nb.torch.blocks.conv_blocks import ConvBase\nfrom nb.torch.utils import device\n\nclass YoloV5(nn.Module):\n\n    def __init__(self, num_cls=80, ch=3, anchors=None):\n        super(YoloV5, self).__init__()\n        assert anchors != None, 'anchor must be provided'\n\n        #: divid by\n        cd = 2\n        wd = 3\n\n        self.focus = Focus(ch, 64//cd)\n        self.conv1 = ConvBase(64//cd, 128//cd, 3, 2)\n        self.csp1 = SimBottleneckCSP(128//cd, 128//cd, n=3//wd)\n        self.conv2 = ConvBase(128//cd, 256//cd, 3, 2)\n        self.csp2 = SimBottleneckCSP(256//cd, 256//cd, n=9//wd)\n        self.conv3 = ConvBase(256//cd, 512//cd, 3, 2)\n        self.csp3 = SimBottleneckCSP(512//cd, 512//cd, n=9//wd)\n        self.conv4 = ConvBase(512//cd, 1024//cd, 3, 2)\n        self.spp = SPP(1024//cd, 1024//cd)\n        self.csp4 = SimBottleneckCSP(1024//cd, 1024//cd, n=3//wd, shortcut=False)\n\n        #: PANet\n        self.conv5 = ConvBase(1024//cd, 512//cd)\n        self.up1 = nn.Upsample(scale_factor=2)\n        self.csp5 = SimBottleneckCSP(1024//cd, 512//cd, n=3//wd, shortcut=False)\n\n        self.conv6 = ConvBase(512//cd, 256//cd)\n        self.up2 = nn.Upsample(scale_factor=2)\n        self.csp6 = SimBottleneckCSP(512//cd, 256//cd, n=3//wd, shortcut=False)\n\n        self.conv7 = ConvBase(256//cd, 256//cd, 3, 2)\n        self.csp7 = SimBottleneckCSP(512//cd, 512//cd, n=3//wd, shortcut=False)\n\n        self.conv8 = ConvBase(512//cd, 512//cd, 3, 2)\n        self.csp8 = SimBottleneckCSP(512//cd, 1024//cd, n=3//wd, shortcut=False)\n\n    def _build_backbone(self, x):\n        x = self.focus(x)\n        x = self.conv1(x)\n        x = self.csp1(x)\n        x_p3 = self.conv2(x)  #: P3\n        x = self.csp2(x_p3)\n        x_p4 = self.conv3(x)  #: P4\n        x = self.csp3(x_p4)\n        x_p5 = self.conv4(x)  #: P5\n        x = self.spp(x_p5)\n        x = self.csp4(x)\n        return x_p3, x_p4, x_p5, x\n\n    def _build_head(self, p3, p4, p5, feas):\n        h_p5 = self.conv5(feas)  #: head P5\n        x = self.up1(h_p5)\n        x_concat = torch.cat([x, p4], dim=1)\n        x = self.csp5(x_concat)\n\n        h_p4 = self.conv6(x)  #: head P4\n        x = self.up2(h_p4)\n        x_concat = torch.cat([x, p3], dim=1)\n        x_small = self.csp6(x_concat)\n\n        x = self.conv7(x_small)\n        x_concat = torch.cat([x, h_p4], dim=1)\n        x_medium = self.csp7(x_concat)\n\n        x = self.conv8(x_medium)\n        x_concat = torch.cat([x, h_p5], dim=1)\n        x_large = self.csp8(x)\n        return x_small, x_medium, x_large\n\n    def forward(self, x):\n        p3, p4, p5, feas = self._build_backbone(x)\n        xs, xm, xl = self._build_head(p3, p4, p5, feas)\n        return xs, xm, xl\n```\n\nA simple example to build a layer of conv:\n\n```python\nfrom nb.torch.base.conv_block import ConvBase\na = ConvBase(128, 256, 3, 1, 2, norm_cfg=dict(type=\"BN\"), act_cfg=dict(type=\"Hardswish\"))\n```\nBe note that, the reason for us using `cfg` to specific norm and activation is for users dynamically switch their configuration of model in yaml format rather than hard code it.\n\nA simple example of using GhostNet:\n\n```python\nfrom nb.torch.backbones.ghostnet import GhostNet\n\nm = GhostNet(num_classes=8)\n\n#: if you want FPN output\nm = GhostNet(fpn_levels=[4, 5, 6])\n```\n\nA simple example of using MobilenetV3:\n\n```python\nfrom nb.torch.backbones.mobilenetv3_new import MobilenetV3_Small\n```\n\n\n\n\n\n",
      "technique": "Header extraction"
    }
  ]
}