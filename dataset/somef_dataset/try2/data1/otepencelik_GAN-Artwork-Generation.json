{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1511.06434, 2015.\n\n* [Conditional GAN (CGAN) Paper](https://arxiv.org/pdf/1411.1784.pdf): M. Mirza and S. Osindero, \u201cConditional generative adversarial nets,\u201darXiv preprinthttps://arxiv.org/abs/1411.1784, 2014.\n\n* [Creative GAN (CAN) Paper](https://arxiv.org/pdf/1706.07068.pdf): A. Elgammal, B. Liu, M. Elhoseiny, and M. Mazzone, \u201cCan:  Creative adversarial networks,generating  \u201cart\u201d  by  learning  about  styles  and  deviating  from  style  norms,\u201darXiv preprinthttps://arxiv.org/abs/1706.07068, 2017.\n\n[This PyTorch tutorial](https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html) was extremely helpful to develop our models.\n\n[Our project paper](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/Final_Project_Report.pdf) contains more detailed information and explanations about the architectures and results.\n\n## Models\n\n* DCGAN\n\nThe DCGAN architecture is our baseline for creating realistic artwork paintings. Below are some examples generated by our network.\n\n![](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/results_dcgan.png)\n\n* CGAN\n\nThe CGAN architecture enables style-specific artwork generation by feeding the discriminator and the generator with artistic style labels. Below are some examples that belong to several artistic style classes.\n\n![](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/cgan_results.png)\n\n* CAN\n\nThe CAN architecture aims to generate style-ambiguous (or style-agnostic, 'creative') artwork pieces. The discriminator has access to artistic style labels. During training, the generator is punished if the discriminator correctly classifies the artistic style of a fake artwork. The generator is therefore pushed to generate more creative artwork that can't be classified into any of the artistic styles. Below are some creative fake artwork pieces generated by our network.\n\n![](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/CAN_examples.png)\n\n## Usage\n\nThree very straight-forward notebooks are available for each of the models. Run each cell of the notebook to train the corresponding architecture and visualize the results.\n\n* DCGAN - [Baseline_DCGAN.ipynb](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/Baseline_DCGAN.ipynb)\n* CGAN - [cGAN.ipynb](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/cGAN.ipynb)\n* CAN - [CAN.ipynb](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/CAN.ipynb)\n\n",
      "https://arxiv.org/abs/1411.1784, 2014.\n\n* [Creative GAN (CAN) Paper](https://arxiv.org/pdf/1706.07068.pdf): A. Elgammal, B. Liu, M. Elhoseiny, and M. Mazzone, \u201cCan:  Creative adversarial networks,generating  \u201cart\u201d  by  learning  about  styles  and  deviating  from  style  norms,\u201darXiv preprinthttps://arxiv.org/abs/1706.07068, 2017.\n\n[This PyTorch tutorial](https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html) was extremely helpful to develop our models.\n\n[Our project paper](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/Final_Project_Report.pdf) contains more detailed information and explanations about the architectures and results.\n\n## Models\n\n* DCGAN\n\nThe DCGAN architecture is our baseline for creating realistic artwork paintings. Below are some examples generated by our network.\n\n![](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/results_dcgan.png)\n\n* CGAN\n\nThe CGAN architecture enables style-specific artwork generation by feeding the discriminator and the generator with artistic style labels. Below are some examples that belong to several artistic style classes.\n\n![](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/cgan_results.png)\n\n* CAN\n\nThe CAN architecture aims to generate style-ambiguous (or style-agnostic, 'creative') artwork pieces. The discriminator has access to artistic style labels. During training, the generator is punished if the discriminator correctly classifies the artistic style of a fake artwork. The generator is therefore pushed to generate more creative artwork that can't be classified into any of the artistic styles. Below are some creative fake artwork pieces generated by our network.\n\n![](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/CAN_examples.png)\n\n## Usage\n\nThree very straight-forward notebooks are available for each of the models. Run each cell of the notebook to train the corresponding architecture and visualize the results.\n\n* DCGAN - [Baseline_DCGAN.ipynb](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/Baseline_DCGAN.ipynb)\n* CGAN - [cGAN.ipynb](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/cGAN.ipynb)\n* CAN - [CAN.ipynb](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/CAN.ipynb)\n\n",
      "https://arxiv.org/abs/1706.07068, 2017.\n\n[This PyTorch tutorial](https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html) was extremely helpful to develop our models.\n\n[Our project paper](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/Final_Project_Report.pdf) contains more detailed information and explanations about the architectures and results.\n\n## Models\n\n* DCGAN\n\nThe DCGAN architecture is our baseline for creating realistic artwork paintings. Below are some examples generated by our network.\n\n![](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/results_dcgan.png)\n\n* CGAN\n\nThe CGAN architecture enables style-specific artwork generation by feeding the discriminator and the generator with artistic style labels. Below are some examples that belong to several artistic style classes.\n\n![](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/cgan_results.png)\n\n* CAN\n\nThe CAN architecture aims to generate style-ambiguous (or style-agnostic, 'creative') artwork pieces. The discriminator has access to artistic style labels. During training, the generator is punished if the discriminator correctly classifies the artistic style of a fake artwork. The generator is therefore pushed to generate more creative artwork that can't be classified into any of the artistic styles. Below are some creative fake artwork pieces generated by our network.\n\n![](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/CAN_examples.png)\n\n## Usage\n\nThree very straight-forward notebooks are available for each of the models. Run each cell of the notebook to train the corresponding architecture and visualize the results.\n\n* DCGAN - [Baseline_DCGAN.ipynb](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/Baseline_DCGAN.ipynb)\n* CGAN - [cGAN.ipynb](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/cGAN.ipynb)\n* CAN - [CAN.ipynb](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/CAN.ipynb)\n\n"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The models in this repository are the implementations of the following papers:\n\n* [Deep Convolutional GAN (DCGAN) Paper](https://arxiv.org/pdf/1511.06434.pdf): A. Radford, L. Metz, and S. Chintala, \u201cUnsupervised representation learning with deep convo-lutional generative adversarial networks,\u201darXiv preprint arXiv:1511.06434, 2015.\n\n* [Conditional GAN (CGAN) Paper](https://arxiv.org/pdf/1411.1784.pdf): M. Mirza and S. Osindero, \u201cConditional generative adversarial nets,\u201darXiv preprintarXiv:1411.1784, 2014.\n\n* [Creative GAN (CAN) Paper](https://arxiv.org/pdf/1706.07068.pdf): A. Elgammal, B. Liu, M. Elhoseiny, and M. Mazzone, \u201cCan:  Creative adversarial networks,generating  \u201cart\u201d  by  learning  about  styles  and  deviating  from  style  norms,\u201darXiv preprintarXiv:1706.07068, 2017.\n\n[This PyTorch tutorial](https://pytorch.org/tutorials/beginner/dcgan_faces_tutorial.html) was extremely helpful to develop our models.\n\n[Our project paper](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/Final_Project_Report.pdf) contains more detailed information and explanations about the architectures and results.\n\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/otepencelik/GAN-Artwork-Generation",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-03-04T00:41:16Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-22T18:23:50Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9741675294199011
      ],
      "excerpt": "This repository contains 3 GAN models to generate realistic artwork paintings. The models are implemented using PyTorch. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8810224834696723
      ],
      "excerpt": "The original WikiArt dataset is contained in this repo. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9289151312513736
      ],
      "excerpt": "The DCGAN architecture is our baseline for creating realistic artwork paintings. Below are some examples generated by our network. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/otepencelik/GAN-Artwork-Generation/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Wed, 29 Dec 2021 17:41:32 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/otepencelik/GAN-Artwork-Generation/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "otepencelik/GAN-Artwork-Generation",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/otepencelik/GAN-Artwork-Generation/master/Baseline_DCGAN.ipynb",
      "https://raw.githubusercontent.com/otepencelik/GAN-Artwork-Generation/master/cGAN.ipynb",
      "https://raw.githubusercontent.com/otepencelik/GAN-Artwork-Generation/master/CAN.ipynb",
      "https://raw.githubusercontent.com/otepencelik/GAN-Artwork-Generation/master/extra_code/Main_style.ipynb",
      "https://raw.githubusercontent.com/otepencelik/GAN-Artwork-Generation/master/extra_code/cGAN_conv_DCGAN.ipynb",
      "https://raw.githubusercontent.com/otepencelik/GAN-Artwork-Generation/master/extra_code/Main_wikiart.ipynb",
      "https://raw.githubusercontent.com/otepencelik/GAN-Artwork-Generation/master/extra_code/wCGAN-conditional.ipynb",
      "https://raw.githubusercontent.com/otepencelik/GAN-Artwork-Generation/master/extra_code/Main_style_gaussian.ipynb",
      "https://raw.githubusercontent.com/otepencelik/GAN-Artwork-Generation/master/extra_code/cGAN_custom_implementation_256.ipynb",
      "https://raw.githubusercontent.com/otepencelik/GAN-Artwork-Generation/master/extra_code/cGAN_fc_notgood.ipynb"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/otepencelik/GAN-Artwork-Generation/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Artwork Generation Using Deep Convolutional GAN, Conditional GAN and Creative Adversarial Network",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "GAN-Artwork-Generation",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "otepencelik",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 15,
      "date": "Wed, 29 Dec 2021 17:41:32 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Three very straight-forward notebooks are available for each of the models. Run each cell of the notebook to train the corresponding architecture and visualize the results.\n\n* DCGAN - [Baseline_DCGAN.ipynb](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/Baseline_DCGAN.ipynb)\n* CGAN - [cGAN.ipynb](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/cGAN.ipynb)\n* CAN - [CAN.ipynb](https://github.com/otepencelik/GAN-Artwork-Generation/blob/master/CAN.ipynb)\n\n\n",
      "technique": "Header extraction"
    }
  ]
}