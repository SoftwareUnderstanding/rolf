{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1703.10593\n\nCycleGAN github: https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix\n\nbook reference that hepls me alot to under stand cycleGAN: GANs in action\n\nbook link: https://www.amazon.com/GANs-Action-learning-Generative-Adversarial/dp/1617295566\n\n## Style transfer\nstyle transfer model from TensorFlow lite was used in the project as a trained model for the application.\n\ntensorFlow lite for style transfer: https://www.tensorflow.org/tutorials/generative/style_transfer\n\nmodel link: https://www.tensorflow.org/lite/examples/style_transfer/overview\n\n![image](https://user-images.githubusercontent.com/60838458/126884294-be707361-d415-4bc1-a1e6-065e1ee258ab.png"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8906174419333412
      ],
      "excerpt": "paper: https://openaccess.thecvf.com/content_cvpr_2018/papers/Chen_CartoonGAN_Generative_Adversarial_CVPR_2018_paper.pdf \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9653085683781825
      ],
      "excerpt": "DeepAI: https://deepai.org/machine-learning-model/toonify \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8854398367006624
      ],
      "excerpt": "paper: https://paperswithcode.com/method/stylegan2 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9977994744046882,
        0.9441931312872444
      ],
      "excerpt": "paper: https://arxiv.org/abs/1703.10593 \nCycleGAN github: https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9766292624434239
      ],
      "excerpt": "book link: https://www.amazon.com/GANs-Action-learning-Generative-Adversarial/dp/1617295566 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/NDCHIRO/Cartoonizer",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-06-01T13:49:38Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-09T18:40:01Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9512559311494312,
        0.9836815747013911,
        0.8306363224826018
      ],
      "excerpt": "This is an Android  app with the White-box CartoonGAN TensorFlow Lite models , cycleGAN & styleGAN2. \nThere are three TensorFlow Lite Models included in the Android app and see the ml README for details. \nAndroid Studio ML Model Binding was used to import these models into the Android project. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9491012813675067
      ],
      "excerpt": "The white-box CartooGAN TensorFlow Lite models (with metatdata) are available on TensorFlow Hub in three different formats: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9013412750123045,
        0.9819374292204476,
        0.9639500787395343,
        0.8340222511777382
      ],
      "excerpt": "helpful resources: https://blog.tensorflow.org/2020/09/how-to-create-cartoonizer-with-tf-lite.html \nthe classic StyleGAN model which is trained on photos of people\u2019s faces. This was released with the StyleGAN2 code and paper and produces pretty fantastically high-quality results. \nthe faces model were fine-tuned on a dataset of various characters from animated films. It\u2019s only around 300 images but enough for the model to start learning what features these characters typically have. \nthere are two API for the feature  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.973761195858559,
        0.9799976733086752
      ],
      "excerpt": "The model was built same as the model architecture described in the official cycleGAN paper and used across a range of image-to-image translation tasks. \nThe implementation used the Keras deep learning framework based directly on the model described in the paper and implemented in the author\u2019s codebase, designed to take and generate color images with the size 256\u00d7256 pixels. The architecture is comprised of four models, two discriminator models, and two generator models. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008364920593195
      ],
      "excerpt": "book reference that hepls me alot to under stand cycleGAN: GANs in action \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.975563016830906
      ],
      "excerpt": "style transfer model from TensorFlow lite was used in the project as a trained model for the application. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/NDCHIRO/Cartoonizer/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sun, 26 Dec 2021 03:22:40 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/NDCHIRO/Cartoonizer/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "NDCHIRO/Cartoonizer",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/NDCHIRO/Cartoonizer/master/cycleGAN_human_to_cartoon.ipynb",
      "https://raw.githubusercontent.com/NDCHIRO/Cartoonizer/master/My_neural_style_trial_3.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8248585073746026
      ],
      "excerpt": "refrence that i followed: https://machinelearningmastery.com/cyclegan-tutorial-with-keras/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8808525517063689
      ],
      "excerpt": "CycleGAN github: https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9191027049473263
      ],
      "excerpt": "if you are egyptian or someone who can't open medium website you can use this extension: \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/NDCHIRO/Cartoonizer/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Java",
      "GLSL",
      "Kotlin"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Cartoonizer Android App",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Cartoonizer",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "NDCHIRO",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/NDCHIRO/Cartoonizer/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Android Studio Preview Beta version - download [here](https://developer.android.com/studio/preview).\n* Android device (with at least 3GB RAM) in developer mode with USB debugging enabled\n* USB cable to connect an Android device to computer\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Clone the project repo:  \n`git clone https://github.com/margaretmz/CartoonGAN-e2e-tflite-tutorial.git`  \n* Open the  code in Android Studio.\n* Connect your Android device to computer then click on `\"Run -> Run 'app'`.\n* Once the app is launched on device, grant camera permission.\n* sign up to launch the app.\n* select the type you want (cartoonGAN , styleGAN2 , style transfer, filters).\n* Take a selfie or a photo and wait to process. \n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Sun, 26 Dec 2021 03:22:40 GMT"
    },
    "technique": "GitHub API"
  },
  "support": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1- courses:\n\nNeural Networks and Deep Learning: https://www.coursera.org/learn/neural-networks-deep-learning\n\nConvolutional Neural Networks: https://www.coursera.org/learn/convolutional-neural-networks\n\nNeural Style Transfer with TensorFlow: https://www.coursera.org/projects/neural-style-transfer\n\n2- books:\ndeep learning principles.\nGANs in Action.\n\n",
      "technique": "Header extraction"
    }
  ],
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "drive: https://drive.google.com/drive/folders/1jNj-ao5Ybb5HxuKZ3ZFKmmn04Sx2aOsv?usp=sharing\n\n",
      "technique": "Header extraction"
    }
  ]
}