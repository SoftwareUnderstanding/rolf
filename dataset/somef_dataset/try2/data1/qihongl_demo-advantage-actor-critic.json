{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[1] \nMnih, V., Badia, A. P., Mirza, M., Graves, A., Lillicrap, T. P., Harley, T., \u2026 Kavukcuoglu, K. (2016). Asynchronous Methods for Deep Reinforcement Learning. Retrieved from http://arxiv.org/abs/1602.01783\n\n[2] \nBrockman, G., Cheung, V., Pettersson, L., Schneider, J., Schulman, J., Tang, J., & Zaremba, W. (2016). OpenAI Gym. Retrieved from http://arxiv.org/abs/1606.01540\n\n[3] \n<a href=\"https://github.com/pytorch/examples/blob/master/reinforcement_learning/actor_critic.py\">pytorch/examples/reinforcement_learning/actor_critic</a>\n\n[4] \n<a href=\"http://rail.eecs.berkeley.edu/deeprlcourse/static/slides/lec-6.pdf\">Slides</a> from \nDeep Reinforcement Learning, CS294-112 at UC Berkeley\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8866169140621637
      ],
      "excerpt": "A demo of the discrete action space advantage actor critic (A2C) (Mnih et al. 2016).  \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/qihongl/demo-advantage-actor-critic",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-06-16T19:29:58Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-07-23T16:26:01Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8870839107515293
      ],
      "excerpt": "The animation below shows the learned behavior on CartPole-v0. The goal is to keep the pole upright. For comparison, here's <a href=\"https://gym.openai.com/docs/#environments\">a random policy</a>.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A pytorch implementation of the advantage actor-critic (A2C) algorithm (Mnih et al. 2016). Used as a demo for NEU330 Computational Modeling of Psychological Function, Spring 2019. ",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/qihongl/demo-advantage-actor-critic/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Fri, 24 Dec 2021 06:31:31 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/qihongl/demo-advantage-actor-critic/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "qihongl/demo-advantage-actor-critic",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9033987252512259
      ],
      "excerpt": "\u251c\u2500\u2500 requirements.txt \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9151270764930737
      ],
      "excerpt": "\u2514\u2500\u2500 src \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9336801098518991,
        0.9336801098518991
      ],
      "excerpt": "    \u2502\u00a0\u00a0 \u251c\u2500\u2500 _A2C_continuous.py      #: gaussian A2C \n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 _A2C_discrete.py        #: multinomial A2C \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9586232994076559
      ],
      "excerpt": "    \u2502\u00a0\u00a0 \u2514\u2500\u2500 utils.py               \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9377155933551108,
        0.9586232994076559
      ],
      "excerpt": "    \u251c\u2500\u2500 train.py                    #: train a model  \n    \u2514\u2500\u2500 utils.py \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/qihongl/demo-advantage-actor-critic/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Qihong Lu\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "demo-A2C",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "demo-advantage-actor-critic",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "qihongl",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/qihongl/demo-advantage-actor-critic/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Fri, 24 Dec 2021 06:31:31 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "reinforcement-learning",
      "a2c",
      "pytorch",
      "openai-gym"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The dependencies are: `pytorch`, `gym`, `numpy`, `matplotlib`, `seaborn`. The lastest version should work. \n\nFor training (the default environment is `CartPole-v0`): \n```\npython train.py\n```\n\nFor rendering the learned behavior:\n```\npython render.py\n```\n\nThe agent should be runnable on any environemnt with a discrete action space. To run the agent on some other environment, type `python train.py -env ENVIRONMENT_NAME`.\n\nFor example, the same architecture can also solve `Acrobot-v1`: \n\n<img src=\"https://github.com/qihongl/demo-advantage-actor-critic/blob/master/figs/render-Acrobot-v1.gif\" width=400>\n\n\n... and `LunarLander-v2`: \n\n<img src=\"https://github.com/qihongl/demo-advantage-actor-critic/blob/master/figs/render-LunarLander-v2.gif\" width=400>\n\n\n\n",
      "technique": "Header extraction"
    }
  ]
}