{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1508.06576",
      "https://arxiv.org/abs/1607.08022",
      "https://arxiv.org/abs/1607.08022"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{Johnson2016Perceptual,\n  title={Perceptual losses for real-time style transfer and super-resolution},\n  author={Johnson, Justin and Alahi, Alexandre and Fei-Fei, Li},\n  booktitle={European Conference on Computer Vision},\n  year={2016}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9747466821846071
      ],
      "excerpt": "Justin Johnson, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9983651232515929
      ],
      "excerpt": "Li Fei-Fei \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9935724698798681
      ],
      "excerpt": "Presented at ECCV 2016 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8351541540159684
      ],
      "excerpt": "by Gatys et al. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8278586383583552,
        0.9999828184774445
      ],
      "excerpt": "  method described by Gatys et al. \nIf you find this code useful for your research, please cite \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jcjohnson/fast-neural-style",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-10-04T03:44:11Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-22T03:46:55Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.98097388452418,
        0.8772233796846496
      ],
      "excerpt": "This is the code for the paper \nPerceptual Losses for Real-Time Style Transfer and Super-Resolution \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8483443378712128,
        0.8478384889285329
      ],
      "excerpt": "The paper builds on \nA Neural Algorithm of Artistic Style \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.954087852942677
      ],
      "excerpt": "hundreds of times faster than the optimization-based method presented \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9769602204584533,
        0.8711479974069407
      ],
      "excerpt": "This repository also includes an implementation of instance normalization as \ndescribed in the paper Instance Normalization: The Missing Ingredient for Fast Stylization \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8836993268664324,
        0.9838055391933888,
        0.8434113686308216
      ],
      "excerpt": "significantly improves the quality of feedforward style transfer models. \nStylizing this image of the Stanford campus at a resolution of 1200x630 \ntakes 50 milliseconds on a Pascal Titan X: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9335030335468717,
        0.8575001131561764
      ],
      "excerpt": "In this repository we provide: \n- The style transfer models used in the paper \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356269880564147,
        0.8155620070097147,
        0.9697054272694642
      ],
      "excerpt": "- A demo that runs models in real-time off a webcam \n- Code for training new feedforward style transfer models \n- An implementation of optimization-based style transfer \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8187751216358669,
        0.985722271854214
      ],
      "excerpt": "Here are some example results where we use these models to stylize this \nimage of the Chicago skyline with at an image size of 512: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.929609117874372
      ],
      "excerpt": "The script slow_neural_style.lua is similar to the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9305313510420814
      ],
      "excerpt": "the optimization-based style-transfer method described by Gatys et al. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030076513508136
      ],
      "excerpt": "and optimization-based style transfer. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Feedforward style transfer",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jcjohnson/fast-neural-style/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 794,
      "date": "Sun, 26 Dec 2021 08:35:42 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jcjohnson/fast-neural-style/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "jcjohnson/fast-neural-style",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/jcjohnson/fast-neural-style/master/models/download_vgg16.sh",
      "https://raw.githubusercontent.com/jcjohnson/fast-neural-style/master/models/download_style_transfer_models.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "All code is implemented in [Torch](http://torch.ch/).\n\nFirst [install Torch](http://torch.ch/docs/getting-started.html#installing-torch), then\nupdate / install the following packages:\n\n```bash\nluarocks install torch\nluarocks install nn\nluarocks install image\nluarocks install lua-cjson\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9567299978739519,
        0.9566941769304192,
        0.9973423572488611,
        0.999833231880651,
        0.999833231880651,
        0.9300523595592156
      ],
      "excerpt": "If you have an NVIDIA GPU, you can accelerate all operations with CUDA. \nFirst install CUDA, then \nupdate / install the following packages: \nluarocks install cutorch \nluarocks install cunn \nWhen using CUDA, you can use cuDNN to accelerate convolutions. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9027487910020306,
        0.9844224503198521
      ],
      "excerpt": "libraries to /usr/local/cuda/lib64/. Then install the Torch bindings for cuDNN: \nluarocks install cudnn \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9455056176493527
      ],
      "excerpt": "bash models/download_style_transfer_models.sh \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8505081210657339
      ],
      "excerpt": "this script has the following improvements: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9350382361893025,
        0.9086865456686715,
        0.9156136311144104
      ],
      "excerpt": "  <img src='images/styles/candy.jpg' height=\"225px\"> \n  <img src='images/content/hoovertowernight.jpg' height=\"225px\"> \n  <img src='images/outputs/hoovertowernight_candy.jpg' height=\"346px\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8255053069374182
      ],
      "excerpt": "Download all pretrained style transfer models by running the script \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8835197463565889
      ],
      "excerpt": "This will download ten model files (~200MB) to the folder models/. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9086865456686715
      ],
      "excerpt": "  <img src='images/content/chicago.jpg' height=\"185px\"> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9350382361893025,
        0.9350382361893025,
        0.9350382361893025,
        0.9350382361893025
      ],
      "excerpt": "<img src='images/styles/starry_night_crop.jpg' height=\"155px\"> \n<img src='images/styles/la_muse.jpg' height=\"155px\"> \n<img src='images/styles/composition_vii.jpg' height='155px'> \n<img src='images/styles/wave_crop.jpg' height='155px'> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9156136311144104,
        0.9156136311144104,
        0.9156136311144104,
        0.9156136311144104
      ],
      "excerpt": "<img src='images/outputs/eccv16/chicago_starry_night.jpg' height=\"142px\"> \n<img src='images/outputs/eccv16/chicago_la_muse.jpg' height=\"142px\"> \n<img src='images/outputs/eccv16/chicago_composition_vii.jpg' height=\"142px\"> \n<img src='images/outputs/eccv16/chicago_wave.jpg' height=\"142px\"> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/jcjohnson/fast-neural-style/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Lua",
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "fast-neural-style",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "fast-neural-style",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "jcjohnson",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/jcjohnson/fast-neural-style/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The script `fast_neural_style.lua` lets you use a trained model to stylize new images:\n\n```bash\nth fast_neural_style.lua \\\n  -model models/eccv16/starry_night.t7 \\\n  -input_image images/content/chicago.jpg \\\n  -output_image out.png\n```\n\nYou can run the same model on an entire directory of images like this:\n\n```bash\nth fast_neural_style.lua \\\n  -model models/eccv16/starry_night.t7 \\\n  -input_dir images/content/ \\\n  -output_dir out/\n```\n\nYou can control the size of the output images using the `-image_size` flag.\n\nBy default this script runs on CPU; to run on GPU, add the flag `-gpu`\nspecifying the GPU on which to run.\n\nThe full set of options for this script is [described here](doc/flags.md#fast_neural_stylelua).\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3954,
      "date": "Sun, 26 Dec 2021 08:35:42 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "As discussed in the paper\n[Instance Normalization: The Missing Ingredient for Fast Stylization](https://arxiv.org/abs/1607.08022)\nby Dmitry Ulyanov, Andrea Vedaldi, and Victor Lempitsky, replacing batch\nnormalization with instance normalization significantly improves the quality\nof feedforward style transfer models.\n\nWe have trained several models with instance normalization; after downloading\npretrained models they will be in the folder `models/instance_norm`.\n\nThese models use the same architecture as those used in our paper, except with\nhalf the number of filters per layer and with instance normalization instead of\nbatch normalization. Using narrower layers makes the models smaller and faster\nwithout sacrificing model quality.\n\nHere are some example outputs from these models, with an image size of 1024:\n\n<div align='center'>\n  <img src='images/styles/candy.jpg' height='174px'>\n  <img src='images/outputs/chicago_candy.jpg' height=\"174px\">\n  <img src='images/outputs/chicago_udnie.jpg' height=\"174px\">\n  <img src='images/styles/udnie.jpg' height='174px'>\n  <br>\n  <img src='images/styles/the_scream.jpg' height='174px'>\n  <img src='images/outputs/chicago_scream.jpg' height=\"174px\">\n  <img src='images/outputs/chicago_mosaic.jpg' height=\"174px\">\n  <img src='images/styles/mosaic.jpg' height='174px'>\n  <br>\n  <img src='images/styles/feathers.jpg' height='173px'>\n  <img src='images/outputs/chicago_feathers.jpg' height=\"173px\">\n  <img src='images/outputs/chicago_muse.jpg' height=\"173px\">\n  <img src='images/styles/la_muse.jpg' height='173px'>\n</div>\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "You can use the script `webcam_demo.lua` to run one or more models in real-time\noff a webcam stream. To run this demo you need to use `qlua` instead of `th`:\n\n```bash\nqlua webcam_demo.lua -models models/instance_norm/candy.t7 -gpu 0\n```\n\nYou can run multiple models at the same time by passing a comma-separated list\nto the `-models` flag:\n\n```bash\nqlua webcam_demo.lua \\\n  -models models/instance_norm/candy.t7,models/instance_norm/udnie.t7 \\\n  -gpu 0\n```\n\nWith a Pascal Titan X you can easily run four models in realtime at 640x480:\n\n<div align='center'>\n  <img src='images/webcam.gif' width='700px'>\n</div>\n\nThe webcam demo depends on a few extra Lua packages:\n- [clementfarabet/lua---camera](https://github.com/clementfarabet/lua---camera)\n- [torch/qtlua](https://github.com/torch/qtlua)\n\nYou can install / update these packages by running:\n\n```bash\nluarocks install camera\nluarocks install qtlua\n```\n\nThe full set of options for this script is [described here](doc/flags.md#webcam_demolua).\n\n\n",
      "technique": "Header extraction"
    }
  ]
}