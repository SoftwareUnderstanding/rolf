{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1706.08500"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9677640385174676
      ],
      "excerpt": " ICML 2017) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/minhnhat93/tf-SNDCGAN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-09-13T00:13:58Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-08-21T16:39:44Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9391623047176684
      ],
      "excerpt": "Tensorflow implementation of the paper \"Spectral Normalization for Generative Adversarial Networks\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.868592639609579
      ],
      "excerpt": "The implementation is based on the author's original code at: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8588901577576629,
        0.9918172317723302
      ],
      "excerpt": "This implementation works for tensorflow default data format \"NHWC\" \nThis method enforces Lipschitz-1 condition on the Discrminator of Wasserstein-GAN \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9968029537584643
      ],
      "excerpt": "of Wasserstein GAN\". \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8408183122729354
      ],
      "excerpt": "of weight matrices. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for update_op in spectral_norm_update_ops: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8902579510858355
      ],
      "excerpt": "The official github repostiory has an inception score of 7.41 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8287512274892054
      ],
      "excerpt": "uses 80%+ GPU most of the time. On an NVIDIA GTX 1080TI, their implementation \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9145480050650172,
        0.9204455416930786
      ],
      "excerpt": "that makes tensorflow create new assign node for graph each iteration, slow down the execution. \nThis also made the graph become very large over time leading to gigantic event files. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Tensorflow Implementation of the paper \"Spectral Normalization for Generative Adversarial Networks\" (ICML 2017 workshop)",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/minhnhat93/tf-SNDCGAN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 64,
      "date": "Sun, 26 Dec 2021 07:15:58 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/minhnhat93/tf-SNDCGAN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "minhnhat93/tf-SNDCGAN",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9223078430494616
      ],
      "excerpt": "GPU utilization is now around 85+% \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.913542909720186
      ],
      "excerpt": "W = tf.Variable(np.random.normal(size=[784, 10], scale=0.02), name='W', dtype=tf.float32) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008331685760428,
        0.900105014561665
      ],
      "excerpt": "        sess.run(update_op) \nFor an example, see the file test_sn_implementation.py \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/minhnhat93/tf-SNDCGAN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "tf-SNDCGAN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "tf-SNDCGAN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "minhnhat93",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/minhnhat93/tf-SNDCGAN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Keras is required for loading Cifar10 data set\n\n    python3 train.py\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "    for iter in range(max_iters):\n        ",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 246,
      "date": "Sun, 26 Dec 2021 07:15:58 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "deep-learning",
      "generative-adversarial-network",
      "tensorflow",
      "python"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "    ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "    spectral_norm_update_ops = tf.get_collection(SPECTRAL_NORM_UPDATE_OPS)\n    ...\n    ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "        ...\n        ",
      "technique": "Header extraction"
    }
  ]
}