{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1711.00937",
      "https://arxiv.org/abs/1701.05517"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Some of the VQ-VAE code is from [Zalando](https://github.com/zalandoresearch/pytorch-vq-vae), [Lucas Caccia](https://github.com/pclucas14/vq-vae), [Kim Seonghyeon](https://github.com/rosinality/vq-vae-2-pytorch), based on the official TensorFlow implementation from the [sonnet repo](https://github.com/deepmind/sonnet/blob/master/sonnet/python/modules/nets/vqvae.py).\n\n[1] Salimans, Tim, et al. \"Pixelcnn++: Improving the pixelcnn with discretized\n    logistic mixture likelihood and other modifications.\" ICLR 2017.\n    https://arxiv.org/abs/1701.05517\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/andrecianflone/vector_quantization",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-06-15T12:09:32Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-07-10T09:07:05Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9340519781289179
      ],
      "excerpt": "A PyTorch implementation of \"Neural Discrete Representation Learning\", van den Oord et al, NIPS 2017. Unlike the official sonnet repo, this repo uses Discretized Logistic [1], as suggested by Lucas Caccia \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/andrecianflone/vector_quantization/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 30 Dec 2021 01:37:26 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/andrecianflone/vector_quantization/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "andrecianflone/vector_quantization",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.9333384803827206
      ],
      "excerpt": "python main.py --num_epochs 40 --num_codebooks 1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9333384803827206
      ],
      "excerpt": "python main.py --num_epochs 40 --num_codebooks 2 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/andrecianflone/vector_quantization/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Vector Quantization",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "vector_quantization",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "andrecianflone",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/andrecianflone/vector_quantization/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "VQ-VAE\n```\npython main.py --model vqvae\n```\n\nRun DiffVQ-VAE where embeddings updated with EMA:\n```\npython main.py --model diffvqvae\n```\n\nRun DiffVQ-VAE where embeddings are updated with gradients:\n```\npython main.py --model diffvqvae --embed_grad_update\n```\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Thu, 30 Dec 2021 01:37:26 GMT"
    },
    "technique": "GitHub API"
  }
}