{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1511.05493"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{stierle2020grm,\ntitle = \"A technique for determining relevance scores of process activities using graph-based neural networks\",\njournal = \"Decision Support Systems\",\npages = \"113511\",\nvolume = \"144\",\nyear = \"2021\",\nissn = \"0167-9236\",\ndoi = \"https://doi.org/10.1016/j.dss.2021.113511\",\nurl = \"http://www.sciencedirect.com/science/article/pii/S016792362100021X\",\nauthor = \"Matthias Stierle and Sven Weinzierl and Maximilian Harl and Martin Matzner\"\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8954513787699915
      ],
      "excerpt": "To cite this work, please use: \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fau-is/grm",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-07-29T17:08:52Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-23T17:31:12Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9666221621354353
      ],
      "excerpt": "This repository contains the implementation of GRM from Stierle et al. (2021). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9736157375506015
      ],
      "excerpt": "The implementation of our model is based on the GGNN implementation of Li et al. (2015) which you can find here. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8953460797902308
      ],
      "excerpt": "|   +-- GGNN.py                     | The base implementation of a GGNN. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8507434161528061
      ],
      "excerpt": "|   +-- GRM.py                      | The sub-class of GGNNsparse that implements the Graph Relevance Miner (GRM). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.931418263671328,
        0.8546239234433424,
        0.8668483030714395,
        0.8251523963463586
      ],
      "excerpt": "|   |   +-- predictive_quality          | Dir: application of the baseline models (BiLSTM, RF, XGBoost) to event logs. \n|   +-- case_study          | Dir: contains the scripts used for the case study. \n|   +-- data                    | Dir: data used by GRM. \n|   +-- predictive_quality      | Dir: scripts that apply GRM to certain event logs. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9481729531746064,
        0.9375450593312821
      ],
      "excerpt": "|   +-- results                     | Dir: results of all evaluation runs and of the significance testing including the R script used \n|   +-- util                    | Dir: utilities to get information from the data (characteristics) or the artefact (metrics). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8118535203886239
      ],
      "excerpt": "Before you can use an event log with GRM, you have to preprocess the data and convert all traces in your log to Process Instance Graphs.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9596114746191244,
        0.9005606284411417
      ],
      "excerpt": "To build the model, you have to create an instance of GRM that receives especially the training data and the list of activities contained in the log (they can be obtained through get_activities).  \nThese are needed because a subsample of the event log may not contain all distinct activities from the event log and these need to be known to the model during training. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fau-is/grm/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Sat, 25 Dec 2021 06:01:10 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/fau-is/grm/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "fau-is/grm",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Install Anaconda\n- `conda env create -f environment.yml` \n- `conda env update --file environment.yml  --prune`\n- `conda activate grm`\n\nTo track the results of our experiments, we used [mlflow](https://github.com/mlflow/mlflow). If you want to execute any scripts in the [eval directory](eval/), you will have to [configure mlflow (with databricks)](https://databricks.com/blog/2019/10/17/managed-mlflow-now-available-on-databricks-community-edition.html) first :\n- `pip install mlflow`\n- `databricks configure`\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8628611910296781
      ],
      "excerpt": "+-- environment.yml             | environment file  . \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9282438396901176
      ],
      "excerpt": "|   +-- __init__.py                 | __init file for GRM. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8621882743635256
      ],
      "excerpt": "+-- .gitignore              | .gitignore file. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8621882743635256
      ],
      "excerpt": "+-- README.md               | README file. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/fau-is/grm/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Chair of Digital Industrial Service Systems, FAU\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "GRM (Graph Relevance Miner) <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/70/Friedrich-Alexander-Universit%C3%A4t_Erlangen-N%C3%BCrnberg_logo.svg/2000px-Friedrich-Alexander-Universit%C3%A4t_Erlangen-N%C3%BCrnberg_logo.svg.png\" height=\"35\">",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "grm",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "fau-is",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/fau-is/grm/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Sat, 25 Dec 2021 06:01:10 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The main functions are implemented in the class GRM in [GRM.py](/grm/GRM.py). \n\nTo use GRM with your own event log, you need to preprocess the data and then train your model before making any predictions. \nAn example for the usage can be found [here](/eval/simple_test.py).\n\n",
      "technique": "Header extraction"
    }
  ]
}