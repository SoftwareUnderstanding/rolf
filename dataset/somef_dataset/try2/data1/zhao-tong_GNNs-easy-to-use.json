{
  "citation": [
    {
      "confidence": [
        0.9061005469315193
      ],
      "excerpt": "Tong Zhao (tzhao2@nd.edu), \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zhao-tong/GNNs-easy-to-use",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-12-02T03:28:45Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-09-24T14:25:22Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.982341275079,
        0.9128582745354402
      ],
      "excerpt": "This package contains a easy-to-use PyTorch implementation of GCN, GraphSAGE, and Graph Attention Network. It can be easily imported and used like using logistic regression from sklearn. Two versions for supervised GNNs are provided: one implemented with only PyTorch, the other implemented with DGL and PyTorch. \nNote: The unsupervised version is built upon our GraphSAGE-pytorch implementation, and the DGL version is built upon the examples given by DGL. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "An PyTorch implementation of graph neural networks (GCN, GraphSAGE and GAT) that can be simply imported and used.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zhao-tong/GNNs-easy-to-use/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Fri, 24 Dec 2021 23:27:26 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zhao-tong/GNNs-easy-to-use/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "zhao-tong/GNNs-easy-to-use",
    "technique": "GitHub API"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zhao-tong/GNNs-easy-to-use/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# A PyTorch GNNs",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "GNNs-easy-to-use",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "zhao-tong",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zhao-tong/GNNs-easy-to-use/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "\r\n- python==3.6.8\r\n- pytorch==1.0.1.post2\r\n- dgl==0.4.2\r\n\r\n\r\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 25,
      "date": "Fri, 24 Dec 2021 23:27:26 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "\r\n**Parameters (GNNs_unsupervised):**\r\n```\r\nadj_matrix: scipy.sparse.csr_matrix\r\n    The adjacency matrix of the graph, where nonzero entries indicates edges.\r\n    The number of each nonzero entry indicates the number of edges between these two nodes.\r\n\r\nfeatures: numpy.ndarray, optional\r\n    The 2-dimension np array that stores given raw feature of each node, where the i-th row\r\n    is the raw feature vector of node i.\r\n    When raw features are not given, one-hot degree features will be used.\r\n\r\nlabels: list or 1-D numpy.ndarray, optional\r\n    The class label of each node. Used for supervised learning.\r\n\r\nsupervised: bool, optional, default False\r\n    Whether to use supervised learning.\r\n\r\nmodel: {'gat', 'graphsage'}, default 'gat'\r\n    The GNN model to be used.\r\n    - 'graphsage' is GraphSAGE: https://cs.stanford.edu/people/jure/pubs/graphsage-nips17.pdf\r\n    - 'gat' is graph attention network: https://arxiv.org/pdf/1710.10903.pdf\r\n\r\nn_layer: int, optional, default 2\r\n    Number of layers in the GNN\r\n\r\nemb_size: int, optional, default 128\r\n    Size of the node embeddings to be learnt\r\n\r\nrandom_state, int, optional, default 1234\r\n    Random seed\r\n\r\ndevice: {'cpu', 'cuda', 'auto'}, default 'auto'\r\n    The device to use.\r\n\r\nepochs: int, optional, default 5\r\n    Number of epochs for training\r\n\r\nbatch_size: int, optional, default 20\r\n    Number of node per batch for training\r\n\r\nlr: float, optional, default 0.7\r\n    Learning rate\r\n\r\nunsup_loss_type: {'margin', 'normal'}, default 'margin'\r\n    Loss function to be used for unsupervised learning\r\n    - 'margin' is a hinge loss with margin of 3\r\n    - 'normal' is the unsupervised loss function described in the paper of GraphSAGE\r\n\r\nprint_progress: bool, optional, default True\r\n    Whether to print the training progress\r\n```\r\n**Example Usage**\r\n\r\nA detailed example of usage for unsupervised GNNs under different settings on the Cora dataset can be found in `example_usage.py`\r\n\r\nTo run the unsupervised GraphSAGE on Cuda:\r\n```python\r\nfrom GNNs_unsupervised import GNN\r\ngnn = GNN(adj_matrix, features=raw_features, supervised=False, model='graphsage', device='cuda')\r\n#: train the model\r\ngnn.fit()\r\n#: get the node embeddings with the trained model\r\nembs = gnn.generate_embeddings()\r\n```\r\n\r\n**TODO**\r\nDocs and examples for supervised GNNs will be added soon.\r\n",
      "technique": "Header extraction"
    }
  ]
}