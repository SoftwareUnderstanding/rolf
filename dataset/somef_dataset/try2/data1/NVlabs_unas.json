{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1912.07651",
      "https://arxiv.org/abs/1806.09055",
      "https://arxiv.org/abs/1812.00332",
      "https://arxiv.org/abs/1912.07651"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{vahdat2019UNAS,\n  title={{UNAS}: Differentiable Architecture Search Meets Reinforcement Learning},\n  author={Vahdat, Arash and Mallya, Arun and Liu, Ming-Yu and  Kautz, Jan},\n  booktitle = {Computer Vision and Pattern Recognition (CVPR)},\n  year={2020}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8715509475085587,
        0.9991488571269037,
        0.8854398367006624
      ],
      "excerpt": "  <a href=\"https://arunmallya.github.io/\" target=\"_blank\">Arun&nbsp;Mallya</a> &emsp; <b>&middot;</b> &emsp; \n  <a href=\"http://mingyuliu.net/\" target=\"_blank\">Ming&#8209;Yu&nbsp;Liu</a> &emsp; <b>&middot;</b> &emsp; \n  <a href=\"http://jankautz.com/\" target=\"_blank\">Jan&nbsp;Kautz</a>  \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/NVlabs/unas",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-09T19:46:41Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-09T16:40:56Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This repository provides the official PyTorch implementation of UNAS that was presented at CVPR 2020. \nThe paper presents results in two search spaces including [DARTS](https://arxiv.org/abs/1806.09055) \nand [ProxylessNAS](https://arxiv.org/abs/1812.00332) spaces. Our paper\ncan be found [here](https://arxiv.org/abs/1912.07651).\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Official implementation of \"UNAS: Differentiable Architecture Search Meets Reinforcement Learning\", CVPR 2020 Oral",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/NVlabs/unas/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Tue, 28 Dec 2021 09:13:09 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/NVlabs/unas/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "NVlabs/unas",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/NVlabs/unas/master/commands.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "We examined UNAS on the CIFAR-10, CIFAR-100, and ImageNet datasets. The CIFAR datasets will be downloaded\nautomatically if you don't have a local copy. However, you may need to download the ImageNet 2012 dataset \nand structure the dataset under  train and val subfloders. You can \nfollow [this page](https://github.com/pytorch/examples/tree/master/imagenet#requirements) \nto structure the dataset. The data directory should be in the form:\n\n    data/\n        \u251c\u2500\u2500 train/\n            \u251c\u2500\u2500 n01440764/\n            \u251c\u2500\u2500 n01443537/\n            \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 val/\n            \u251c\u2500\u2500 n01440764/\n            \u251c\u2500\u2500 n01443537/\n            \u251c\u2500\u2500 ...        \n \n\n",
      "technique": "Header extraction"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/NVlabs/unas/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/NVlabs/unas/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'NVIDIA Source Code License for UNAS\\n\\n1. Definitions\\n\\n\\xe2\\x80\\x9cLicensor\\xe2\\x80\\x9d means any person or entity that distributes its Work.\\n\\n\\xe2\\x80\\x9cSoftware\\xe2\\x80\\x9d means the original work of authorship made available under this License.\\n\\n\\xe2\\x80\\x9cWork\\xe2\\x80\\x9d means the Software and any additions to or derivative works of the Software that are made available under\\nthis License.\\n\\n\\xe2\\x80\\x9cNVIDIA Processors\\xe2\\x80\\x9d means any central processing unit (CPU), graphics processing unit (GPU), field-programmable\\ngate array (FPGA), application-specific integrated circuit (ASIC) or any combination thereof designed, made, sold,\\nor provided by NVIDIA or its affiliates.\\n\\nThe terms \\xe2\\x80\\x9creproduce,\\xe2\\x80\\x9d \\xe2\\x80\\x9creproduction,\\xe2\\x80\\x9d \\xe2\\x80\\x9cderivative works,\\xe2\\x80\\x9d and \\xe2\\x80\\x9cdistribution\\xe2\\x80\\x9d have the meaning as provided under\\nU.S. copyright law; provided, however, that for the purposes of this License, derivative works shall not include\\nworks that remain separable from, or merely link (or bind by name) to the interfaces of, the Work.\\n\\nWorks, including the Software, are \\xe2\\x80\\x9cmade available\\xe2\\x80\\x9d under this License by including in or with the Work either (a)\\na copyright notice referencing the applicability of this License to the Work, or (b) a copy of this License.\\n\\n2. License Grant\\n\\n2.1 Copyright Grant. Subject to the terms and conditions of this License, each Licensor grants to you a perpetual,\\nworldwide, non-exclusive, royalty-free, copyright license to reproduce, prepare derivative works of, publicly\\ndisplay, publicly perform, sublicense and distribute its Work and any resulting derivative works in any form.\\n\\n3. Limitations\\n\\n3.1 Redistribution. You may reproduce or distribute the Work only if (a) you do so under this License, (b) you\\ninclude a complete copy of this License with your distribution, and (c) you retain without modification any\\ncopyright, patent, trademark, or attribution notices that are present in the Work.\\n\\n3.2 Derivative Works. You may specify that additional or different terms apply to the use, reproduction, and\\ndistribution of your derivative works of the Work (\\xe2\\x80\\x9cYour Terms\\xe2\\x80\\x9d) only if (a) Your Terms provide that the use\\nlimitation in Section 3.3 applies to your derivative works, and (b) you identify the specific derivative works\\nthat are subject to Your Terms. Notwithstanding Your Terms, this License (including the redistribution requirements\\nin Section 3.1) will continue to apply to the Work itself.\\n\\n3.3 Use Limitation. The Work and any derivative works thereof only may be used with NVIDIA Processors.\\n\\n3.4 Patent Claims. If you bring or threaten to bring a patent claim against any Licensor (including any claim,\\ncross-claim or counterclaim in a lawsuit) to enforce any patents that you allege are infringed by any Work, then\\nyour rights under this License from such Licensor (including the grant in Section 2.1) will terminate immediately.\\n\\n3.5 Trademarks. This License does not grant any rights to use any Licensor\\xe2\\x80\\x99s or its affiliates\\xe2\\x80\\x99 names, logos, or\\ntrademarks, except as necessary to reproduce the notices described in this License.\\n\\n3.6 Termination. If you violate any term of this License, then your rights under this License (including the grant\\nin Section 2.1) will terminate immediately.\\n\\n4. Disclaimer of Warranty.\\n\\nTHE WORK IS PROVIDED \\xe2\\x80\\x9cAS IS\\xe2\\x80\\x9d WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING\\nWARRANTIES OR CONDITIONS OF M ERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE OR NON-INFRINGEMENT. YOU\\nBEAR THE RISK OF UNDERTAKING ANY ACTIVITIES UNDER THIS LICENSE.\\n\\n5. Limitation of Liability.\\n\\nEXCEPT AS PROHIBITED BY APPLICABLE LAW, IN NO EVENT AND UNDER NO LEGAL THEORY, WHETHER IN TORT (INCLUDING\\nNEGLIGENCE), CONTRACT, OR OTHERWISE SHALL ANY LICENSOR BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY DIRECT,\\nINDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF OR RELATED TO THIS LICENSE, THE USE OR\\nINABILITY TO USE THE WORK (INCLUDING BUT NOT LIMITED TO LOSS OF GOODWILL, BUSINESS INTERRUPTION, LOST PROFITS\\nOR DATA, COMPUTER FAILURE OR MALFUNCTION, OR ANY OTHER COMM ERCIAL DAMAGES OR LOSSES), EVEN IF THE LICENSOR HAS\\nBEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\\n\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "UNAS: Differentiable Architecture Search Meets Reinforcement Learning, CVPR 2020 Oral [(Paper)](https://arxiv.org/abs/1912.07651)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "unas",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "NVlabs",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/NVlabs/unas/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "UNAS is examined using Python 3.5. To install the requirements, follow these steps:\n1. Run \n```\n$ pip install -r requirements.txt\n```\n2. Install [apex](https://github.com/NVIDIA/apex) using:\n```\n$ git clone https://github.com/NVIDIA/apex\n$ cd apex\n$ pip install -v --no-cache-dir ./\n```\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "In UNAS, in the search phase, we first search for either normal/reduction cells (in DARTS space) or the whole network architecture\n(in ProxylessNAS space). Then in the evaluation phase, in order to measure the performance of search, \nwe train the discovered cells or network architectures from scratch. The commands for performing\nboth search and evaluation are provided in `commands.sh`. Note that we use 4 GPUs for search on CIFAR-10\nand CIFAR-100, 1 GPU for evaluation on these datasets, and 8 GPUs for search and eval on ImageNet.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "In order to run the evaluation code with the cells discovered in our experiments, you can set `--genotype` to\n`UNAS_CIFAR10`, `UNAS_CIFAR100`, or `UNAS_IMAGENET` when evaluating in DARTS space. Similarly, you can\nset `--genotype` to `UNAS` when evaluating in ProxylessNAS space (check the example command in `commands.sh`.\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 45,
      "date": "Tue, 28 Dec 2021 09:13:09 GMT"
    },
    "technique": "GitHub API"
  }
}