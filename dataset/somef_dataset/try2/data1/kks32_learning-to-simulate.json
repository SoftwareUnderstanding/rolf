{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2002.09405"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{sanchezgonzalez2020learning,\n  title={Learning to Simulate Complex Physics with Graph Networks},\n  author={Alvaro Sanchez-Gonzalez and\n          Jonathan Godwin and\n          Tobias Pfaff and\n          Rex Ying and\n          Jure Leskovec and\n          Peter W. Battaglia},\n  booktitle={International Conference on Machine Learning},\n  year={2020}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8955886365383559
      ],
      "excerpt": "ICML poster: icml.cc/virtual/2020/poster/6849 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9989860164290408,
        0.9962581681182172
      ],
      "excerpt": "ArXiv: arxiv.org/abs/2002.09405 \nIf you use the code here please cite this paper: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9890131201201999
      ],
      "excerpt": "  author={Alvaro Sanchez-Gonzalez and \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9999774139351684,
        0.9664456561658856
      ],
      "excerpt": "  booktitle={International Conference on Machine Learning}, \n  year={2020} \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kks32/learning_to_simulate",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-09-30T16:59:59Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-04T09:53:16Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.908925214220865,
        0.908925214220865,
        0.908925214220865,
        0.908925214220865
      ],
      "excerpt": "          Jonathan Godwin and \n          Tobias Pfaff and \n          Rex Ying and \n          Jure Leskovec and \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9463501073575248
      ],
      "excerpt": "{DATASET_SPLIT} is one of: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9187111045218006
      ],
      "excerpt": "{DATASET_NAME} one of the datasets following the naming used in the paper: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8773101947537245
      ],
      "excerpt": "An additional smaller dataset WaterDropSample, which includes only the first two trajectories of WaterDrop for each split, is provided for debugging purposes. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9814056289710958,
        0.9940946921828132
      ],
      "excerpt": "learned_simulator.py: Implementation of the learnable one-step model that returns the next position of the particles given inputs. It includes data preprocessing, Euler integration, and a helper method for building normalized training outputs and targets. \ngraph_network.py: Implementation of the graph network used at the core of the learnable part of the model. \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kks32/learning-to-simulate/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 00:46:41 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/kks32/learning_to_simulate/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "kks32/learning_to_simulate",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/kks32/learning-to-simulate/main/tfrecord.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/kks32/learning-to-simulate/main/gns.sh",
      "https://raw.githubusercontent.com/kks32/learning-to-simulate/main/download_dataset.sh",
      "https://raw.githubusercontent.com/kks32/learning-to-simulate/main/run.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\nmodule load cuda/10.0\nmodule load cudnn/7.6.2\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8485412285437767
      ],
      "excerpt": "The provided script ./download_dataset.sh may be used to download all files from each dataset into a folder given its name. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8706740633980253
      ],
      "excerpt": "The provided script ./download_dataset.sh may be used to download all files from each dataset into a folder given its name. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8569379463179618
      ],
      "excerpt": "train.py: Script for training, evaluating and generating rollout trajectories. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9479674882370943
      ],
      "excerpt": "model_demo.py: example connecting the model to input dummy data. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/kks32/learning_to_simulate/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Learning to Simulate Complex Physics with Graph Networks (ICML 2020)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "learning_to_simulate",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "kks32",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/kks32/learning_to_simulate/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Sat, 25 Dec 2021 00:46:41 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "![WaterRamps rollout](images/water_ramps_rollout.gif)\n\nAfter downloading the repo, and from the parent directory. Install dependencies:\n\n    pip install -r learning_to_simulate/requirements.txt\n    mkdir -p /tmp/rollous\n\nDownload dataset (e.g. WaterRamps):\n\n    mkdir -p /tmp/datasets\n    bash ./learning_to_simulate/download_dataset.sh WaterRamps /tmp/datasets\n\nTrain a model:\n\n    mkdir -p /tmp/models\n    python -m learning_to_simulate.train \\\n        --data_path=/tmp/datasets/WaterRamps \\\n        --model_path=/tmp/models/WaterRamps\n\nGenerate some trajectory rollouts on the test set:\n\n    mkdir -p /tmp/rollouts\n    python -m learning_to_simulate.train \\\n        --mode=\"eval_rollout\" \\\n        --data_path=/tmp/datasets/WaterRamps \\\n        --model_path=/tmp/models/WaterRamps \\\n        --output_path=/tmp/rollouts/WaterRamps\n\nPlot a trajectory:\n\n    python -m learning_to_simulate.render_rollout \\\n        --rollout_path=/tmp/rollouts/WaterRamps/rollout_test_0.pkl\n\n\n",
      "technique": "Header extraction"
    }
  ]
}