{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1609.04802"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9869180224891899
      ],
      "excerpt": "<i><a href=\"https://arxiv.org/pdf/1501.00092v3.pdf\">Image Super-Resolution Using Deep Convolutional Networks</a></i>. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/titu1994/Image-Super-Resolution",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-06-24T14:35:12Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-17T21:29:16Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9796862867730552
      ],
      "excerpt": "Implementation of Image Super Resolution CNN in Keras from the paper  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9953125031776828
      ],
      "excerpt": "Also contains models that outperforms the above mentioned model, termed Expanded Super Resolution, Denoiseing Auto Encoder SRCNN which outperforms both of the above models and Deep Denoise SR, which with certain limitations, outperforms all of the above. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9950662944847131,
        0.8720060946891697
      ],
      "excerpt": "The model above is the simplest model of the ones described in the paper above, consisting of the 9-1-5 model. \nLarger architectures can be easily made, but come at the cost of execution time, especially on CPU. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9112866365134646,
        0.9898821704327775,
        0.9174616602378026
      ],
      "excerpt": "<br><b>[1]</b> Used the Adam optimizer instead of RMSProp. \n<br><b>[2]</b> This model contains some 21,000 parameters, more than the 8,400 of the original paper. \nIt is to be noted that the original models underperform compared to the results posted in the paper. This may be due to the only 91 images being the training set compared to the entire ILSVR 2013 image set. It still performs well, however images are slightly noisy. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9739763761546959,
        0.9264441428475844
      ],
      "excerpt": "The above is called \"Expanded SRCNN\", which performs slightly worse than the default SRCNN model on Set5 (PSNR 31.78 dB vs 32.4 dB). \nThe \"Expansion\" occurs in the intermediate hidden layer, in which instead of just 1x1 kernels, we also use 3x3 and 5x5 kernels in order to maximize information learned from the layer. The outputs of this layer are then averaged, in order to construct more robust upscaled images. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9367136920525565,
        0.9444013061736521
      ],
      "excerpt": "The above is the \"Denoiseing Auto Encoder SRCNN\", which performs even better than SRCNN on Set5 (PSNR 32.57 dB vs 32.4 dB). \nThis model uses bridge connections between the convolutional layers of the same level in order to speed up convergence and improve output results. The bridge connections are averaged to be more robust.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9909780831198707,
        0.8875750155884683
      ],
      "excerpt": "The above is the \"Deep Denoiseing SRCNN\", which is a modified form of the architecture described in the paper <a href=\"http://arxiv.org/abs/1606.08921\">\"Image Restoration Using Convolutional Auto-encoders with Symmetric Skip Connections\"</a> applied to image super-resolution. It can perform far better than even the Denoiseing SRCNN, but is currently not working properly. \nSimilar to the paper <a href=\"http://arxiv.org/abs/1606.08921\">Image Restoration Using Convolutional Auto-encoders with Symmetric Skip Connections</a>, this can be considered a highly simplified and shallow model compared to the 30 layer architecture used in the above paper.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9709642253599425,
        0.869112008561994,
        0.9255825518833705
      ],
      "excerpt": "The above is the \"ResNet SR\" model, derived from the \"SRResNet\" model of the paper Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network \nCurrently uses only 6 residual blocks and 2x upscaling rather than the 15 residual blocks and the 4x upscaling from the paper. \nThe above model is the Efficient Subpixel Convolution Neural Network which uses the Subpixel Convolution layers to upscale rather than UpSampling or Deconvolution. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9653284227169601
      ],
      "excerpt": "The above model is the GAN trained Image Super Resolution network based on the ResNet SR and the SRGAN from the paper above. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.933309705720217
      ],
      "excerpt": "The above model is a smaller ResNet SR that was trained using model distilation techniques from the \"teacher\" model - the original larger ResNet SR (with 6 residual blocks). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9197798675442436
      ],
      "excerpt": "The above model is a trial to see if Non-Local blocks can obtain better super resolution. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9673831289925234
      ],
      "excerpt": "1) They break the fully convolutional behaviour of the network. Due to the flatten and reshape parts of this module, you need to have a set size for the image when building it. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9881794541115794,
        0.9742508768107466,
        0.9689115800531749,
        0.8520172569387202
      ],
      "excerpt": "2) The non local blocks require vast amount of memory as their intermediate products. I think this is the reason they suggested to use this at the end of the network where the spatial dimension is just 14x14 or 7x7. \nI had consistent ooms when trying it on multiple positions of a super resolution network, and could only successfully place it at the last ResNet block without oom (on just 4 GB 980M). \nFinally, I was able to train a model anyway and it got pretty high psnr scores. I wasn't able to evaluate that, and was able to distill the model into ordinary ResNet. It got exactly same psnr score as the original non local model. \nEvaluating that, all the images were a little smoothed out. This is worse than a distilled ResNet which obtains a lower psnr score but sharper images. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9141204095172838
      ],
      "excerpt": "<br><b>[1]</b> Save all of your input images of any size in the <b>\"input_images\"</b> folder \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Implementation of Super Resolution CNN in Keras.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/titu1994/Image-Super-Resolution/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 267,
      "date": "Wed, 22 Dec 2021 00:29:05 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/titu1994/Image-Super-Resolution/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "titu1994/Image-Super-Resolution",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Supports Keras with Theano and Tensorflow backend. Due to recent report that Theano will no longer be updated, Tensorflow is the default backend for this project now.\n\nRequires Pillow, imageio, sklearn, scipy, keras 2.3.1, tensorflow 1.15.0\n",
      "technique": "Header extraction"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8797716100688102,
        0.8360801851718895,
        0.8355113657838207
      ],
      "excerpt": "<br><b>[2]</b> Run img_utils.py function, transform_images(input_path, scale_factor). By default, input_path is \"input_images\" path. \nNote: Unless you are training ESPCNN, set the variable true_upsampling to False and then run the img_utils.py script to generate the dataset. Only for ESPCNN training do you need to set true_upsampling to True. \n<br><b>[3]</b> Open <b>tests.py</b> and un-comment the lines at model.fit(...), where model can be sr, esr or dsr, ddsr.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8051681701500545
      ],
      "excerpt": "<br><b>[4]</b> Execute tests.py to begin training. GPU is recommended, although if small number of images are provided then GPU may not be required. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/titu1994/Image-Super-Resolution/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Image Super Resolution using in Keras 2+",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Image-Super-Resolution",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "titu1994",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/titu1994/Image-Super-Resolution/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "titu1994",
        "body": "Contains 91 images used for training the network, along with 5 validation images from Set5\n\nExtract the validation images to a folder named `input_images`, as that is the default directory used to search for input images which will be transformed via the `transform_images` function.\n\nThe validation images are already provided in the `val_images` directory\n",
        "dateCreated": "2016-09-30T05:55:26Z",
        "datePublished": "2016-10-12T05:39:37Z",
        "html_url": "https://github.com/titu1994/Image-Super-Resolution/releases/tag/v0.1",
        "name": "91 Images Dataset + Set5 Validation Images",
        "tag_name": "v0.1",
        "tarball_url": "https://api.github.com/repos/titu1994/Image-Super-Resolution/tarball/v0.1",
        "url": "https://api.github.com/repos/titu1994/Image-Super-Resolution/releases/4365763",
        "zipball_url": "https://api.github.com/repos/titu1994/Image-Super-Resolution/zipball/v0.1"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 755,
      "date": "Wed, 22 Dec 2021 00:29:05 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "**Note**: The project is going to be reworked. Therefore please refer to [Framework-Updates.md](https://github.com/titu1994/Image-Super-Resolution/blob/master/Framework-Update.md) to see the changes which will affect performance.\n\nThe model weights are already provided in the weights folder, therefore simply running :<br>\n`python main.py \"imgpath\"`, where imgpath is a full path to the image.\n\nThe default model is DDSRCNN (dsr), which outperforms the other three models. To switch models,<br>\n`python main.py \"imgpath\" --model=\"type\"`, where type = `sr`, `esr`, `dsr`, `ddsr`\n\nIf the scaling factor needs to be altered then :<br>\n`python main.py \"imgpath\" --scale=s`, where s can be any number. Default `s = 2`\n\nIf the intermediate step (bilinear scaled image) is needed, then:<br>\n`python main.py \"imgpath\" --scale=s --save_intermediate=\"True\"`\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "There are 14 extra images provided in results, 2 of which (Monarch Butterfly and Zebra) have been scaled using both bilinear, SRCNN, ESRCNN and DSRCNN.\n\n",
      "technique": "Header extraction"
    }
  ]
}