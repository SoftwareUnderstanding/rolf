{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2004.10934\n- Source code:https://github.com/AlexeyAB/darknet\n- More details: http://pjreddie.com/darknet/yolo/\n\n\n- [x] Inference\n- [x] Train\n    - [x] Mocaic\n\n```\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 dataset.py            dataset\n\u251c\u2500\u2500 demo.py               demo to run pytorch --> tool/darknet2pytorch\n\u251c\u2500\u2500 demo_darknet2onnx.py  tool to convert into onnx --> tool/darknet2pytorch\n\u251c\u2500\u2500 demo_pytorch2onnx.py  tool to convert into onnx\n\u251c\u2500\u2500 models.py             model for pytorch\n\u251c\u2500\u2500 train.py              train models.py\n\u251c\u2500\u2500 cfg.py                cfg.py for train\n\u251c\u2500\u2500 cfg                   cfg --> darknet2pytorch\n\u251c\u2500\u2500 data            \n\u251c\u2500\u2500 weight                --> darknet2pytorch\n\u251c\u2500\u2500 tool\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 camera.py           a demo camera\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 coco_annotation.py       coco dataset generator\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 darknet2pytorch.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 region_loss.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 utils.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 yolo_layer.py\n```\n\n![image](https://user-gold-cdn.xitu.io/2020/4/26/171b5a6c8b3bd513?w=768&h=576&f=jpeg&s=78882"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{yolov4,\n  title={YOLOv4: YOLOv4: Optimal Speed and Accuracy of Object Detection},\n  author={Alexey Bochkovskiy, Chien-Yao Wang, Hong-Yuan Mark Liao},\n  journal = {arXiv},\n  year={2020}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9977994744046882,
        0.9530284264815528
      ],
      "excerpt": "- Paper Yolo v4: https://arxiv.org/abs/2004.10934 \n- Source code:https://github.com/AlexeyAB/darknet \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8657468146982167
      ],
      "excerpt": "1: Thanks:github:https://github.com/onnx/onnx-tensorflow \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8568217992087697
      ],
      "excerpt": "For multi-batch,  \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sung0471/pytorch-YOLOv4",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-02-03T15:19:34Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-02-03T21:42:21Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9087100666227969
      ],
      "excerpt": "A minimal PyTorch implementation of YOLOv4. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.849608121757069
      ],
      "excerpt": "\u251c\u2500\u2500 models.py             model for pytorch \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "\u251c\u2500\u2500 data             \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8023327702238414
      ],
      "excerpt": "Transform data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.803574084165904,
        0.9733306831547753
      ],
      "excerpt": "ONNX and TensorRT models are converted from Pytorch (TianXiaomo): Pytorch->ONNX->TensorRT. \nSee following sections for more details of conversions. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9240709470221349
      ],
      "excerpt": "Image input size is NOT restricted in 320 * 320, 416 * 416, 512 * 512 and 608 * 608. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8873909486421065
      ],
      "excerpt": "Load the pretrained darknet model and darknet weights to do the inference (image size is configured in cfg file already) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9253698089782718,
        0.9793454678603115,
        0.9783558684461261
      ],
      "excerpt": "- The other one is scores of bounding boxes which is of shape [batch, num_boxes, num_classes] indicating scores of all classes for each bounding box. \nUntil now, still a small piece of post-processing including NMS is required. We are trying to minimize time and complexity of post-processing. \nThis script is to convert the official pretrained darknet model into ONNX \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.945446420731182,
        0.9609573126407317
      ],
      "excerpt": "Pytorch 1.4.0 for TensorRT 7.0 and higher \nPytorch 1.5.0 and 1.6.0 for TensorRT 7.1.2 and higher \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.945446420731182,
        0.9609573126407317
      ],
      "excerpt": "Pytorch 1.4.0 for TensorRT 7.0 and higher \nPytorch 1.5.0 and 1.6.0 for TensorRT 7.1.2 and higher \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8422674007296143
      ],
      "excerpt": "For single batch,  \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sung0471/pytorch-YOLOv4/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 09 Dec 2021 01:24:22 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/sung0471/pytorch-YOLOv4/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "sung0471/pytorch-YOLOv4",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9329873409733515
      ],
      "excerpt": "- Source code:https://github.com/AlexeyAB/darknet \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8096422022825122
      ],
      "excerpt": "Download weight \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8057592803380842
      ],
      "excerpt": "For coco dataset,you can use tool/coco_annotation.py. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.895607836065068
      ],
      "excerpt": "ONNX and TensorRT models are converted from Pytorch (TianXiaomo): Pytorch->ONNX->TensorRT. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9322609392449874
      ],
      "excerpt": "| Pytorch (TianXiaomo)|       0.466 |       0.704 |       0.505 |       0.267 |       0.524 |       0.629 | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9322609392449874
      ],
      "excerpt": "| Pytorch (TianXiaomo)|       0.404 |       0.615 |       0.436 |       0.196 |       0.438 |       0.552 | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9653163799526521
      ],
      "excerpt": "Pytorch version Recommended: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.999833231880651,
        0.999746712887969
      ],
      "excerpt": "Install onnxruntime \npip install onnxruntime \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9653163799526521
      ],
      "excerpt": "Pytorch version Recommended: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.999833231880651,
        0.999746712887969
      ],
      "excerpt": "Install onnxruntime \npip install onnxruntime \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8873851068555657
      ],
      "excerpt": "TensorRT version Recommended: 7.0, 7.1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8059574806712391,
        0.9952162258826005,
        0.9990540798301971,
        0.9867871088949034,
        0.9239347390865111,
        0.9906248903846466,
        0.8474895321345809
      ],
      "excerpt": "1: Thanks:github:https://github.com/onnx/onnx-tensorflow \n2: Run git clone https://github.com/onnx/onnx-tensorflow.git && cd onnx-tensorflow \nRun pip install -e . \nNote:Errors will occur when using \"pip install onnx-tf\", at least for me,it is recommended to use source code installation \n1. Compile the DeepStream Nvinfer Plugin  \ncd DeepStream \n      make \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8589534893990137
      ],
      "excerpt": "[x] Train \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8705832100376315
      ],
      "excerpt": "\u251c\u2500\u2500 dataset.py            dataset \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.816450823313032,
        0.806209063044227,
        0.9546832848779845,
        0.9242500490335889
      ],
      "excerpt": "\u251c\u2500\u2500 demo_pytorch2onnx.py  tool to convert into onnx \n\u251c\u2500\u2500 models.py             model for pytorch \n\u251c\u2500\u2500 train.py              train models.py \n\u251c\u2500\u2500 cfg.py                cfg.py for train \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8759955720239709,
        0.9336801098518991,
        0.9336801098518991,
        0.9586232994076559,
        0.9336801098518991
      ],
      "excerpt": "\u2502\u00a0\u00a0 \u251c\u2500\u2500 config.py \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 darknet2pytorch.py \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 region_loss.py \n\u2502\u00a0\u00a0 \u251c\u2500\u2500 utils.py \n\u2502\u00a0\u00a0 \u2514\u2500\u2500 yolo_layer.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.810870454768102
      ],
      "excerpt": "Download weight \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8454553703666403
      ],
      "excerpt": ": train.txt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8589534893990137
      ],
      "excerpt": "3. Train \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9032259886029311
      ],
      "excerpt": "python train.py -g [GPU_ID] -dir [Dataset direction] ... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8226763253166589
      ],
      "excerpt": "| Model type          | AP          | AP50        | AP75        |  APS        | APM         | APL         | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8303018676941034,
        0.8226763253166589
      ],
      "excerpt": "testdev2017 dataset (input size: 416x416) \n| Model type          | AP          | AP50        | AP75        |  APS        | APM         | APL         | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8892011196477896
      ],
      "excerpt": "Run python script to generate ONNX model and run the demo \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8616412815543169,
        0.8772588349130718,
        0.903642372553262
      ],
      "excerpt": "Positive batch size will generate ONNX model of static batch size, otherwise, batch size will be dynamic \nDynamic batch size will generate only one ONNX model \nStatic batch size will generate 2 ONNX models, one is for running the demo (batch_size=1) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8892011196477896
      ],
      "excerpt": "Run python script to generate ONNX model and run the demo \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8216270093103228
      ],
      "excerpt": "For example: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9482983808864931,
        0.8616412815543169,
        0.8772588349130718,
        0.903642372553262
      ],
      "excerpt": "python demo_pytorch2onnx.py yolov4.pth dog.jpg 8 80 416 416 \nPositive batch size will generate ONNX model of static batch size, otherwise, batch size will be dynamic \nDynamic batch size will generate only one ONNX model \nStatic batch size will generate 2 ONNX models, one is for running the demo (batch_size=1) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8216270093103228
      ],
      "excerpt": "- For example: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8233343338403479
      ],
      "excerpt": "First:Conversion to ONNX \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/sung0471/pytorch-YOLOv4/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "C++",
      "Cuda",
      "Makefile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Pytorch-YOLOv4",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pytorch-YOLOv4",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "sung0471",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sung0471/pytorch-YOLOv4/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```sh\npython demo_trt.py <tensorRT_engine_file> <input_image> <input_H> <input_W>\n```\n\n- This demo here only works when batchSize is dynamic (1 should be within dynamic range) or batchSize=1, but you can update this demo a little for other dynamic or static batch sizes.\n    \n- Note1: input_H and input_W should agree with the input size in the original ONNX file.\n    \n- Note2: extra NMS operations are needed for the tensorRT output. This demo uses python NMS code from `tool/utils.py`.\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Thu, 09 Dec 2021 01:24:22 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```sh\npython demo_trt.py <tensorRT_engine_file> <input_image> <input_H> <input_W>\n```\n\n- This demo here only works when batchSize is dynamic (1 should be within dynamic range) or batchSize=1, but you can update this demo a little for other dynamic or static batch sizes.\n    \n- Note1: input_H and input_W should agree with the input size in the original ONNX file.\n    \n- Note2: extra NMS operations are needed for the tensorRT output. This demo uses python NMS code from `tool/utils.py`.\n\n\n",
      "technique": "Header extraction"
    }
  ]
}