{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1405.0506 (2014)\n- Windle, J. (2013). Forecasting high-dimensional, time-varying variance-covariance matrices with high-frequency data and sampling Po\u0301lya-Gamma random variates for posterior distributions derived from logistic likelihoods.(PhD thesis). Retrieved from http://hdl.handle.net/2152/21842 .\n\n\n[1]: ./examples/c_polyagamma.c\n[2]: https://python-poetry.org/docs/pyproject/\n[3]: https://github.com/zoj613/polyagamma/releases\n[4]: https://img.shields.io/pypi/wheel/polyagamma?style=flat-square\n[5]: https://img.shields.io/github/v/release/zoj613/polyagamma?include_prereleases&label=pypi&style=flat-square\n[6]: https://img.shields.io/pypi/l/polyagamma?style=flat-square\n[7]: https://img.shields.io/github/workflow/status/zoj613/polyagamma/CI/main?style=flat-square\n[8]: https://img.shields.io/codecov/c/github/zoj613/polyagamma?style=flat-square\n[9]: https://github.com/slinderman/pypolyagamma\n[10]: https://github.com/python-poetry/poetry\n[11]: https://img.shields.io/conda/vn/conda-forge/polyagamma?style=flat-square"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Luc Devroye. \"On exact simulation algorithms for some distributions related to Jacobi theta functions.\" Statistics & Probability Letters, Volume 79, Issue 21, (2009): 2251-2259.\n- Polson, Nicholas G., James G. Scott, and Jesse Windle. \"Bayesian inference for logistic models using P\u00f3lya\u2013Gamma latent variables.\" Journal of the American statistical Association 108.504 (2013): 1339-1349.\n- J. Windle, N. G. Polson, and J. G. Scott. \"Improved Polya-gamma sampling\". Technical Report, University of Texas at Austin, 2013b.\n- Windle, Jesse, Nicholas G. Polson, and James G. Scott. \"Sampling Polya-Gamma random variates: alternate and approximate techniques.\" arXiv preprint arXiv:1405.0506 (2014)\n- Windle, J. (2013). Forecasting high-dimensional, time-varying variance-covariance matrices with high-frequency data and sampling Po\u0301lya-Gamma random variates for posterior distributions derived from logistic likelihoods.(PhD thesis). Retrieved from http://hdl.handle.net/2152/21842 .\n\n\n[1]: ./examples/c_polyagamma.c\n[2]: https://python-poetry.org/docs/pyproject/\n[3]: https://github.com/zoj613/polyagamma/releases\n[4]: https://img.shields.io/pypi/wheel/polyagamma?style=flat-square\n[5]: https://img.shields.io/github/v/release/zoj613/polyagamma?include_prereleases&label=pypi&style=flat-square\n[6]: https://img.shields.io/pypi/l/polyagamma?style=flat-square\n[7]: https://img.shields.io/github/workflow/status/zoj613/polyagamma/CI/main?style=flat-square\n[8]: https://img.shields.io/codecov/c/github/zoj613/polyagamma?style=flat-square\n[9]: https://github.com/slinderman/pypolyagamma\n[10]: https://github.com/python-poetry/poetry\n[11]: https://img.shields.io/conda/vn/conda-forge/polyagamma?style=flat-square\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9977903201658708
      ],
      "excerpt": "o = random_polyagamma([2, 1], [-10, 10], size=(10, 2)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8027235261558269
      ],
      "excerpt": "to 0, 2.5, 5, and 10. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zoj613/polyagamma",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-12-27T18:45:44Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-22T23:21:45Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9272478689689069,
        0.8522673403064354,
        0.9106341662529666
      ],
      "excerpt": "- Generating an array of samples is awkward because it requires using a list comprehension \n  if parameter values are scalars or have pre-allocated arrays of a known size to pass for both \n  the parameters and the output array. Moreover, broadcasting of input is not supported and thus \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8222627533918466,
        0.8963577758814298,
        0.9678149837237313
      ],
      "excerpt": "- It requires extra effort to be used in multiprocessing because pickling of the \n  sampler is not supported. \n- There is no parameter validation supported meaning it is easy to get the wrong samples if \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8114108686136521,
        0.9226345465090995
      ],
      "excerpt": "  making it harder to just \"plug-n-play\" in existing code bases. \n- It does not allow passing in an instance of a np.random.RandomState or np.random.Generator \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9508341458126224,
        0.8363403237620859,
        0.9769364437573363
      ],
      "excerpt": "- The C++ code wrapped by the package is GPLv3 licensed, making it difficult to \n  use the source code in a project that prefers licenses like MIT/Apache/BSD. \nThe above issues are the reason why this package exists. And the aim of polyagamma is to \"fix\" them. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8077580410138119,
        0.9643303847139189,
        0.9412551951537035
      ],
      "excerpt": "Input validation is done internally with clear error messages upon failure. \nIt is flexible and allows the user to sample using one of 4 available algorithms. \nImplements functions to compute the CDF and density of the distribution as well \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9456894487522428
      ],
      "excerpt": "The functional API resembles that of common numpy/scipy functions, therefore making it easy to plugin to \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9736997810280194
      ],
      "excerpt": "polyagamma is optimized for performance and tests show that it is faster \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8359124812996552
      ],
      "excerpt": ": Get a 5 by 1 array of PG(1, 2) variates. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8747688625349955,
        0.8150771532802734
      ],
      "excerpt": ": efficient method based on the input values. \no = random_polyagamma(method=\"saddle\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9500205975992106
      ],
      "excerpt": "Functions to compute the density and CDF are available. Broadcasting of input is supported.python \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8370352413730514
      ],
      "excerpt": "The package also provides functions that can be imported in cython modules. They are: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9295587183516414
      ],
      "excerpt": "Refer to the pgm_random.h header file for more info about the \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8674304908774112
      ],
      "excerpt": ": assuming there exists an instance of the Generator class called rng. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8524734814579917
      ],
      "excerpt": ": get pointer to the underlying bitgenerator struct \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8054371233140958
      ],
      "excerpt": ": get a memory view of the array to store samples in \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127
      ],
      "excerpt": "with bitgenerator.lock, nogil: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8998739653950295,
        0.9554165530859633,
        0.9275243990852102,
        0.9209479977864493,
        0.8537245594067635
      ],
      "excerpt": "For an example of how to use polyagamma in a C program, see [here][1]. \nBelow are runtime plots of 20000 samples generated for various values of h  \nand z, using each method. We restrict h to integer values to accomodate the  \ndevroye method, which cannot be used for non-integer h. The version of the \npackage used to generate them is v1.3.1. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9398534012497998,
        0.9808227668303101
      ],
      "excerpt": "- The gamma method is slowest and should be avoided in cases where speed is paramount. \n- For h &gt;= 8, the saddle method is the fastest for any value of z. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9263723725767901
      ],
      "excerpt": "- For h &gt; 50 (or any value large enough), the normal approximation to the distribution is  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8753473564355017,
        0.8733539532308048,
        0.9484133372183299,
        0.8362769772343547,
        0.9068959450275427,
        0.9657979731663393
      ],
      "excerpt": "method and also equally accurate). \nTherefore, we devise a \"hybrid/default\" sampler that picks a sampler based on the above guidelines. \nWe also benchmark the hybrid sampler runtime with the sampler found in the pypolyagamma  \npackage (version 1.2.3). The version of NumPy we use is 1.19.0. We compare our \nsampler to the pgdrawv functions provided by the package. Below are runtime plots of 20000 \nsamples for each value of h and z. Values of h range from 0.1 to 50, while z is set \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9429129309457261
      ],
      "excerpt": "It can be seen that when generating many samples at once for any given combination of  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9840817435002773,
        0.9335360704057817
      ],
      "excerpt": "The exception is when the scale parameter is very small (e.g h &lt; 1). It is also worth \nnoting that the pypolygamma package is on average faster than ours at generating exactly 1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8000576559009043
      ],
      "excerpt": "the bitgenerator + acquiring/releasing the thread lock + doing parameter validation checks at \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8530042669113933,
        0.8573120284545306,
        0.8978568989327586
      ],
      "excerpt": "generator instance at every call to the polyagamma function. To eliminate this overhead, \nit is best to use the Cython functions directly. Below is a timing example to demonstrate \nthe benefit of passing a generator explicitly: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9868209214679863,
        0.9732631479168334
      ],
      "excerpt": "is ran on. \nBelow is a visualization of the Cumulative distribution and density functions for \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9005830124493671,
        0.8975443768096927
      ],
      "excerpt": "We can compare these plots to the Kernel density estimate and empirical CDF plots \ngenerated from 20000 random samples using each of the available methods. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8490037945672047
      ],
      "excerpt": "1) Fork the repo. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "An efficient and flexible sampler of the P\u00f3lya-Gamma distribution with a NumPy/SciPy compatible interface.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zoj613/polya-gamma/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Fri, 10 Dec 2021 15:13:35 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zoj613/polyagamma/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "zoj613/polyagamma",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/zoj613/polya-gamma/main/build_wheels.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To get the latest version of the package, one can install it by downloading the wheel/source distribution \nfrom the [releases][3] page, or using `pip` with the following shell command:\n```shell\n$ pip install --pre -U polyagamma\n```\nor using `conda` with the following command:\n```shell\n$ conda install -c conda-forge polyagamma\n```\nAlternatively, once can install from source by cloning the repo. This requires an installation of [poetry][2]\nand the following shell commands:\n```shell\n$ git clone https://github.com/zoj613/polyagamma.git\n$ cd polya-gamma/\n#: install dependencies (make sure pip is up to date before hand)\n$ poetry install --no-root\n$ make install\n#: add package to python's path\n$ export PYTHONPATH=$PWD:$PYTHONPATH \n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8413859500120228
      ],
      "excerpt": "![PyPI - Wheel][4] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9561501562986521
      ],
      "excerpt": "Pre-built wheels are provided for easy installation on Linux, MacOS and Windows. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8127461164550926
      ],
      "excerpt": "The package also provides functions that can be imported in cython modules. They are: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8407384351603804
      ],
      "excerpt": "package (version 1.2.3). The version of NumPy we use is 1.19.0. We compare our \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8690400809972015
      ],
      "excerpt": "To submit a PR, follow the steps below: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9933026113942209
      ],
      "excerpt": "2) Install the [poetry][10] package and setup the dev environment with poetry install --no-root. All dependencies will be installed. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9517745169048472
      ],
      "excerpt": "3) Once finished, run make install to build the project with the new changes. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9276937404298063,
        0.9457175861910134,
        0.8801854956928516,
        0.8368911171772281
      ],
      "excerpt": "import array \nimport numpy as np \nfrom polyagamma import random_polyagamma \n: generate a PG(1, 0) sample \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8997243352845468,
        0.8184394336364812
      ],
      "excerpt": "numpy_out = np.empty(5) \narray_out = array.array('d', [0] * 5) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8737288687529231
      ],
      "excerpt": "rng = np.random.default_rng(12345) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8737288687529231
      ],
      "excerpt": "bit_gen = np.random.RandomState(12345)._bit_generator \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "o = random_polyagamma(large_h, disable_checks=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from polyagamma import polyagamma_pdf, polyagamma_cdf \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8184394336364812,
        0.8594142235991984,
        0.8184394336364812
      ],
      "excerpt": ": array([0.95637847, 0.99963397]) \npolyagamma_pdf([2, 0.1], h=[[1, 2], [3, 4]], return_log=True) \n: array([[   -8.03172733,  -489.17101125] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8774487611383154
      ],
      "excerpt": "polyagamma_cdf(4, z=[-100, 0, 2], return_log=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9457175861910134
      ],
      "excerpt": "import numpy as np \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8733336194087891
      ],
      "excerpt": "cdef double[:] out = np.empty(300) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8001376915794816
      ],
      "excerpt": "samples for each value of h and z. Values of h range from 0.1 to 50, while z is set \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8597923826624008
      ],
      "excerpt": "In [3]: rng = np.random.SFC64(1) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zoj613/polyagamma/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C",
      "Python",
      "Cython",
      "Shell",
      "Makefile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "BSD 3-Clause \"New\" or \"Revised\" License",
      "url": "https://api.github.com/licenses/bsd-3-clause"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'BSD 3-Clause License\\n\\nCopyright (c) 2020-2021, Zolisa Bleki\\nAll rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met:\\n\\n1. Redistributions of source code must retain the above copyright notice, this\\n   list of conditions and the following disclaimer.\\n\\n2. Redistributions in binary form must reproduce the above copyright notice,\\n   this list of conditions and the following disclaimer in the documentation\\n   and/or other materials provided with the distribution.\\n\\n3. Neither the name of the copyright holder nor the names of its\\n   contributors may be used to endorse or promote products derived from\\n   this software without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Polya-Gamma",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "polyagamma",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "zoj613",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zoj613/polyagamma/blob/main/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "- Fixes a type casting bug that occurs when passing the scale parameter h as a numpy array when the method is explicitly set to `devroye`. See #85.\r\n- Fixes a bug with the `devroye` method hanging unexpectedly in some corner cases. Details at #83\r\n- Non-scalar arguments for `h` and `z` can now be broadcasted together with a specified size value. This is consistent more with NumPy's random functions.\r\n- Adds support for Windows OS and adds wheels for both MacOS X and Windows.\r\n- Adds installation of the package via `conda-forge` for users who rely on `conda` to install packages.\r\n- the `-march=native` compiler option is removed when building the package to avoid problems with conda distributions of the package.",
        "dateCreated": "2021-09-20T23:06:18Z",
        "datePublished": "2021-09-20T23:11:56Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.3.2",
        "name": "v1.3.2",
        "tag_name": "v1.3.2",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.3.2",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/49946353",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.3.2"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "- Improves support for Windows build. It should build successfully on windows sever >=2016\r\n\r\n`pip install polyagamma==1.3.2b3`",
        "dateCreated": "2021-08-14T23:20:14Z",
        "datePublished": "2021-08-14T23:22:44Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.3.2-beta.3",
        "name": "v1.3.2-beta.3",
        "tag_name": "v1.3.2-beta.3",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.3.2-beta.3",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/47859739",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.3.2-beta.3"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "- Adds support for Windows 10 and adds wheels for MacOS X and Windows.\r\n\r\n`pip install polyagamma==1.3.2b2`",
        "dateCreated": "2021-07-02T11:48:29Z",
        "datePublished": "2021-07-02T11:51:03Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.3.2-beta.2",
        "name": "v1.3.2-beta.2",
        "tag_name": "v1.3.2-beta.2",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.3.2-beta.2",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/45618336",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.3.2-beta.2"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "- Non-scalar arguments for `h` and `z` can now be broadcasted together with a specified `size` value. This is consistent more with NumPy's random functions.",
        "dateCreated": "2021-06-22T16:49:54Z",
        "datePublished": "2021-06-22T16:58:06Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.3.2-beta.1",
        "name": "v1.3.2-beta.1",
        "tag_name": "v1.3.2-beta.1",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.3.2-beta.1",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/45044256",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.3.2-beta.1"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "- Extends patch #85 to other modules.",
        "dateCreated": "2021-06-13T17:39:40Z",
        "datePublished": "2021-06-13T17:45:46Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.3.2-beta.0",
        "name": "v1.3.2-beta.0",
        "tag_name": "v1.3.2-beta.0",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.3.2-beta.0",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/44540093",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.3.2-beta.0"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "- Fixes a type casting bug that occurs when passing the scale parameter `h` as a numpy array when the method is explicitly set to `devroye`. See #85 \r\n- Fixes a bug with the `devroye` method hanging unexpectedly in some corner cases. Details at #83 ",
        "dateCreated": "2021-06-13T07:42:17Z",
        "datePublished": "2021-06-13T08:01:31Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.3.2-alpha.0",
        "name": "v1.3.2-alpha.0",
        "tag_name": "v1.3.2-alpha.0",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.3.2-alpha.0",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/44532059",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.3.2-alpha.0"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "This minor release re-instates support for python 3.6. Changes include:\r\n- The samplers have improved performance when generating multiple samples using scalar parameter values for `h` and `z`. The speed boost using the default parameter values (`h=1`, `z=0`) are:\r\n\r\n     `devroye`: 8.67% boost\r\n     `alternate`: 50% boost\r\n     `saddle`: 159% boost\r\n     `gamma`: 0% boost\r\n\r\n     See https://github.com/zoj613/polyagamma/pull/76 for more details.\r\n- The hybrid sampler has thus been updated based on the benchmarks after #76 was merged.",
        "dateCreated": "2021-05-11T19:43:36Z",
        "datePublished": "2021-05-11T19:54:06Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.3.1",
        "name": "v1.3.1",
        "tag_name": "v1.3.1",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.3.1",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/42796726",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.3.1"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "- This release adds functions to compute the density and distribution function (cdf) of the Polya-Gamma distribution as well as their logarithms.\r\n- Adds type annotations for the python functions.\r\n- Samplers have been optimized a bit and gained a 10-20% speed boost.",
        "dateCreated": "2021-04-16T18:16:32Z",
        "datePublished": "2021-04-16T18:22:39Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.3.0",
        "name": "v1.3.0",
        "tag_name": "v1.3.0",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.3.0",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/41560899",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.3.0"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "- Unifies the interface of distribution functions.\r\n\r\n`pip install polyagamma==1.3.0rc2`",
        "dateCreated": "2021-04-10T15:08:57Z",
        "datePublished": "2021-04-10T15:14:19Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.3.0-rc.2",
        "name": "v1.3.0-rc.2",
        "tag_name": "v1.3.0-rc.2",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.3.0-rc.2",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/41223754",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.3.0-rc.2"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "- Adds type annotations and improves performance of distribution functions added in v1.3.0.beta.0.\r\n\r\n`pip install polyagamma==1.3.0rc1`",
        "dateCreated": "2021-04-10T13:21:36Z",
        "datePublished": "2021-04-10T13:29:14Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.3.0-rc.1",
        "name": "v1.3.0-rc.1",
        "tag_name": "v1.3.0-rc.1",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.3.0-rc.1",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/41222134",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.3.0-rc.1"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "- This beta release adds functions to compute the density and distribution function (cdf) of the Polya-Gamma distribution.\r\n`pip install polyagamma==1.3.0b0`",
        "dateCreated": "2021-03-28T10:07:38Z",
        "datePublished": "2021-03-29T22:45:33Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.3.0-beta.0",
        "name": "v1.3.0-beta.0",
        "tag_name": "v1.3.0-beta.0",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.3.0-beta.0",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/40663385",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.3.0-beta.0"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "- Adds ability to import sampling functions into third party cython modules.\r\n- pins numpy version of building from `sdist` to `1.19.0` to avoid numpy version incompatibilities.",
        "dateCreated": "2021-03-07T22:53:33Z",
        "datePublished": "2021-03-07T23:01:13Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.2.0",
        "name": "v1.2.0",
        "tag_name": "v1.2.0",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.2.0",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/39407056",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.2.0"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "- A bugfix release that addresses numerical instabilities present in v1.1.0 for the alternate method.\r\n- The minimum numpy version required for the build process is corrected.\r\n- Several other minor improvements.",
        "dateCreated": "2021-03-06T17:02:41Z",
        "datePublished": "2021-03-06T17:09:34Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.1.1",
        "name": "v1.1.1",
        "tag_name": "v1.1.1",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.1.1",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/39381373",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.1.1"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "- All methods runtime speed have been improved significantly, especially the `saddle` method.\r\n- A bug resulting when Passing a sequence for the shape parameter when methods `devroye` and `alternate` methods are specified has been fixed.\r\n- Python 3.6 support has been dropped, a la NEP29.\r\n- Most C-level function have been re-written to improve performance and to conform to the modern c99 standard.",
        "dateCreated": "2021-03-01T14:01:50Z",
        "datePublished": "2021-03-01T14:15:05Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.1.0",
        "name": "v1.1.0",
        "tag_name": "v1.1.0",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.1.0",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/39056073",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.1.0"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "`pip install polyagamma==1.1.0rc0`",
        "dateCreated": "2021-02-27T14:57:20Z",
        "datePublished": "2021-02-27T15:04:24Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.1.0-rc.0",
        "name": "v1.1.0-rc.0",
        "tag_name": "v1.1.0-rc.0",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.1.0-rc.0",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/38902556",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.1.0-rc.0"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "`pip install polyagamma==1.1.0b3`",
        "dateCreated": "2021-02-21T15:47:58Z",
        "datePublished": "2021-02-21T15:53:23Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.1.0-beta.3",
        "name": "v1.1.0-beta.3",
        "tag_name": "v1.1.0-beta.3",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.1.0-beta.3",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/38392235",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.1.0-beta.3"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "`pip install polyagamma==1.1.0b2`",
        "dateCreated": "2021-02-12T21:27:29Z",
        "datePublished": "2021-02-12T21:31:19Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.1.0-beta.2",
        "name": "v1.1.0-beta.2",
        "tag_name": "v1.1.0-beta.2",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.1.0-beta.2",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/37998413",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.1.0-beta.2"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "`pip install polyagamma==1.1.0b1`",
        "dateCreated": "2021-02-10T12:02:35Z",
        "datePublished": "2021-02-10T12:07:22Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.1.0-beta.1",
        "name": "v1.1.0-beta.1",
        "tag_name": "v1.1.0-beta.1",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.1.0-beta.1",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/37856846",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.1.0-beta.1"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "available on pypi via `pip install polyagamma==1.1.0b0`",
        "dateCreated": "2021-02-10T07:14:57Z",
        "datePublished": "2021-02-10T07:21:35Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.1.0-beta.0",
        "name": "v1.1.0-beta.0",
        "tag_name": "v1.1.0-beta.0",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.1.0-beta.0",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/37844563",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.1.0-beta.0"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "- The API has been changed from a class-based to a function-based one. See README file for more info,\r\n- A new \"Saddle Point Approximation\" sampling method has been added. It can be accessed using `method=\"saddle\"`.\r\n- The hybrid sampler has been updated.\r\n- A normal approximation sampler for when `h` is large is now available. This functionality is not directly available in the public API and only usable via the hybrid sampler.\r\n",
        "dateCreated": "2021-01-26T19:03:18Z",
        "datePublished": "2021-01-26T19:06:49Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.0.0",
        "name": "v1.0.0",
        "tag_name": "v1.0.0",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.0.0",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/36931699",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.0.0"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "- The hybrid sampler has been updated.\r\n- A normal approximation sampler for when `h` is large is now available. This functionality is not directly available in the public API and only usable via the hybrid sampler.\r\n- Speed of the `saddle` method has been improved with use of a different solver.",
        "dateCreated": "2021-01-26T15:08:15Z",
        "datePublished": "2021-01-26T15:14:45Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.0.0-rc1",
        "name": "v1.0.0-rc1",
        "tag_name": "v1.0.0-rc1",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.0.0-rc1",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/36919437",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.0.0-rc1"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "- The API has been changed from a class-based to a function-based one. See `README` file for more info,\r\n- A new \"Saddle Point Approximation\" sampling method has been added. It can be accessed using `method=\"saddle\"`.\r\n\r\nThis pre-release is available on PyPI and can be installed with `pip install polyagamma==1.0.0b1`",
        "dateCreated": "2021-01-20T21:23:06Z",
        "datePublished": "2021-01-20T21:34:47Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v1.0.0-beta.1",
        "name": "v1.0.0-beta.1",
        "tag_name": "v1.0.0-beta.1",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v1.0.0-beta.1",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/36681178",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v1.0.0-beta.1"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "First \"stable\" release. See README for Details.",
        "dateCreated": "2021-01-11T01:27:59Z",
        "datePublished": "2021-01-11T01:33:32Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v0.1.0",
        "name": "v0.1.0",
        "tag_name": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v0.1.0",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/36205735",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v0.1.0"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "- The alternate sampling method was added.\r\n- A new keyword argument `method` is available to select a sampling algorithm. Availble sampling methods are `devroye`, `gamma` and `alternate`.",
        "dateCreated": "2021-01-08T12:51:46Z",
        "datePublished": "2021-01-08T13:00:15Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v0.1.0-rc1",
        "name": "v0.1.0-rc1",
        "tag_name": "v0.1.0-rc1",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v0.1.0-rc1",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/36140899",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v0.1.0-rc1"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "",
        "dateCreated": "2021-01-06T12:26:20Z",
        "datePublished": "2021-01-06T14:17:23Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v0.1.0-alpha.4",
        "name": "v0.1.0-alpha.4",
        "tag_name": "v0.1.0-alpha.4",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v0.1.0-alpha.4",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/36048350",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v0.1.0-alpha.4"
      },
      {
        "authorType": "User",
        "author_name": "zoj613",
        "body": "minimal polya-gamma sampler using numpy's Generator API",
        "dateCreated": "2020-12-31T12:58:47Z",
        "datePublished": "2020-12-31T13:04:51Z",
        "html_url": "https://github.com/zoj613/polyagamma/releases/tag/v0.1-alpha",
        "name": "v0.1-alpha",
        "tag_name": "v0.1-alpha",
        "tarball_url": "https://api.github.com/repos/zoj613/polyagamma/tarball/v0.1-alpha",
        "url": "https://api.github.com/repos/zoj613/polyagamma/releases/35873188",
        "zipball_url": "https://api.github.com/repos/zoj613/polyagamma/zipball/v0.1-alpha"
      }
    ],
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Numpy >= 1.19.0\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 14,
      "date": "Fri, 10 Dec 2021 15:13:35 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "polya-gamma",
      "polyagamma",
      "polya-gamma-distribution",
      "data-augmentation"
    ],
    "technique": "GitHub API"
  }
}