{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The code for the DataSplit.py, DataLoad.py, DataSplitHGG.py, Group-UNetModel-LGG.py, Group-UNetModel-HGG.py, and Preprocessing.py was all adapted from the Multimodal Brain Tumour\nSegmentation GitHub repository by Aryaman Sinha (accessed July 1, 2020). The link to the repository can be found here: https://github.com/as791/Multimodal-Brain-Tumor-Segmentation/blob/master/Main_file.ipynb.\n\nThe code for the Individual-UNetModel-LGG.py and Individual-UNetModel-HGG.py files was based on the original Ronneberger et al. U-Net design [1], and the code is adapted from the Multimodal Brain Tumour Segmentation GitHub repository by Aryaman Sinha (accessed July 1, 2020) as well as from the UNET-TGS GitHub repository by Harshall Lamba (accessed July 20, 2020, from: https://github.com/hlamba28/UNET-TGS/blob/master/TGS%20UNET.ipynb).\n\nThe code for the Dice_functions.py was adapted from the brats_2019 GitHub repository, which can be found at: https://github.com/woodywff/brats_2019/blob/master/demo_task1/evaluate.py (accessed July 3, 2020).\n\n[1] Ronneberger O, Fischer P, Brox T. U-Net: Convolutional Networks for Biomedical Image Segmentation. CoRR. 2015;abs/1505.04597.  Available from:http://arxiv.org/abs/1505.04597.\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/carinanorre/Brain-Tumour-Segmentation-Dissertation",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-08-13T22:02:54Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-06-30T10:00:28Z",
    "technique": "GitHub API"
  },
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/carinanorre/Brain-Tumour-Segmentation-Dissertation/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 06 Dec 2021 22:31:39 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/carinanorre/Brain-Tumour-Segmentation-Dissertation/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "carinanorre/Brain-Tumour-Segmentation-Dissertation",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.8656515242468643,
        0.8699117953524769
      ],
      "excerpt": "To initially read in the LGG data and normalise the data, file DataLoad.py is used, where the relative path to the data is given. The file Preprocessing.py is required as an import into this file since it contains the pre-processing functions such as normalise, transpose_data, slice_crop, and ground_truth_4_to_3. DataLoad.py saves the MRI data as arrays, which can then be used as input into the DataSplit.py file. In the DataSplit.py file, the data is split into train, validate, and test sets by patient. The transpose_data, slice_crop, and ground_truth_4_to_3 functions are applied on the data to pre-process it further. \nAfter the LGG data has been read in and pre-processed, it can be applied to the group based U-Net model, contained in file Group-UNetModel-LGG.py. This U-Net model file contains the architecture of the model, as well as compiles and fits it to the LGG training and validation data. The model is compiled with a Dice coefficient loss function as well as Dice coefficient evaluation metric. These functions are found in the Dice_functions.py file, which is required as an import into the Group-UNetModel-LGG.py file. After the final version of the model is saved, the model can then be loaded into the LGG-UNetModel-Eval.py file. This file loads in the chosen LGG model and evaluates it on the training and validation datasets, returning the Dice scores per tumour region, confusion matrices, and example prediction images. It is best if the creation of the confusion matrix and segmentation images are conducted one at a time. Again, the Dice score functions are used for the evaluation. Then, once the best group model has been determined, the model can be applied to the LGG test data. The LGG-Test.py file first applies all the same pre-processing steps to the test data, then loads in the chosen model and predicts on the test data. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/carinanorre/Brain-Tumour-Segmentation-Dissertation/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Brain-Tumour-Segmentation-Dissertation",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Brain-Tumour-Segmentation-Dissertation",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "carinanorre",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/carinanorre/Brain-Tumour-Segmentation-Dissertation/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Mon, 06 Dec 2021 22:31:39 GMT"
    },
    "technique": "GitHub API"
  }
}