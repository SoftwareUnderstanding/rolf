{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1406.4729 . This code requires Keras version 2.0 or greater.\n\n![spp](http://i.imgur.com/SQWJVoD.png"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9999225570033484
      ],
      "excerpt": "(Image credit: Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition, K. He, X. Zhang, S. Ren, J. Sun) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "num_classes = 10 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "if dim_ordering == 'th': \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yhenon/keras-spp",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-11-15T18:51:15Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-09T06:34:51Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8001414653005751,
        0.8520977210497026
      ],
      "excerpt": "(Image credit: Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition, K. He, X. Zhang, S. Ren, J. Sun) \nThree types of pooling layers are currently available: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877,
        0.8520395328921014
      ],
      "excerpt": "model = Sequential() \n: uses theano ordering. Note that we leave the image size as None to allow multiple image sizes \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8341589559722501,
        0.8341589559722501
      ],
      "excerpt": "model.add(Convolution2D(32, 3, 3)) \nmodel.add(MaxPooling2D(pool_size=(2, 2))) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8341589559722501,
        0.8341589559722501
      ],
      "excerpt": "model.add(Convolution2D(64, 3, 3)) \nmodel.add(SpatialPyramidPooling([1, 2, 4])) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model.fit(np.random.rand(batch_size, num_channels, 64, 64), np.zeros((batch_size, num_classes))) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model.fit(np.random.rand(batch_size, num_channels, 32, 32), np.zeros((batch_size, num_classes))) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9841113848023872
      ],
      "excerpt": "RoiPooling: extract multiple rois from a single image. In roi pooling, the spatial pyramid pooling is applied at the specified subregions of the image. This is useful for object detection, and is used in fast-RCNN and faster-RCNN. Note that the batch_size is limited to 1 currently. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = Model([in_img, in_roi], out_roi_pool) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8685808794261264
      ],
      "excerpt": "RoiPoolingConv: like RoiPooling, but maintains spatial information. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Spatial pyramid pooling layers for keras",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yhenon/keras-spp/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 139,
      "date": "Mon, 13 Dec 2021 16:15:41 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yhenon/keras-spp/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "yhenon/keras-spp",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.9457175861910134,
        0.8900486270063179
      ],
      "excerpt": "import numpy as np \nfrom keras.models import Sequential \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from spp.SpatialPyramidPooling import SpatialPyramidPooling \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8004262088789489
      ],
      "excerpt": "model.add(Convolution2D(64, 3, 3, border_mode='same')) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8209647899959541,
        0.8985122690268423,
        0.8209647899959541,
        0.871738330399564
      ],
      "excerpt": ": train on 64x64x3 images \nmodel.fit(np.random.rand(batch_size, num_channels, 64, 64), np.zeros((batch_size, num_classes))) \n: train on 32x32x3 images \nmodel.fit(np.random.rand(batch_size, num_channels, 32, 32), np.zeros((batch_size, num_classes))) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8144338362021298
      ],
      "excerpt": "in_roi = Input(shape=(num_rois, 4)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8737288687529231
      ],
      "excerpt": "    X_img = np.random.rand(1, num_channels, img_size, img_size) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8123763140827432,
        0.8737288687529231
      ],
      "excerpt": "elif dim_ordering == 'tf': \n    X_img = np.random.rand(1, img_size, img_size, num_channels) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9241022411340848
      ],
      "excerpt": "X_roi = np.array([[0, 0, img_size / 1, img_size / 1], \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8475818561403651,
        0.8525645461651434
      ],
      "excerpt": "X_roi = np.reshape(X_roi, (1, num_rois, 4)) \nY = model.predict([X_img, X_roi]) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/yhenon/keras-spp/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2016 Yann Henon\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "keras-spp",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "keras-spp",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "yhenon",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/yhenon/keras-spp/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 386,
      "date": "Mon, 13 Dec 2021 16:15:41 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "keras",
      "keras-layer"
    ],
    "technique": "GitHub API"
  }
}