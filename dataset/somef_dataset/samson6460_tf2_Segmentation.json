{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1505.04597",
      "https://arxiv.org/abs/1802.02611"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.9973969878683023,
        0.9982089722635433,
        0.9972626277910148
      ],
      "excerpt": "U-Net: Convolutional Networks for Biomedical Image Segmentation by Olaf Ronneberger, Philipp Fischer, Thomas Brox (https://arxiv.org/abs/1505.04597). \nDeepLabV3+: Encoder-Decoder with Atrous Separable Convolution for Semantic Image Segmentation by Liang-Chieh Chen, Yukun Zhu, George Papandreou, Florian Schroff, Hartwig Adam (https://arxiv.org/abs/1802.02611). \nBESNet: Boundary-Enhanced Segmentation of Cells in Histopathological Images by Hirohisa Oda, Holger R. Roth et al. (https://link.springer.com/chapter/10.1007/978-3-030-00934-2_26). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "    thread_num=10) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "    thread_num=10) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9813161029725735
      ],
      "excerpt": "    title=None, xyLabel=[], \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9948774423825395
      ],
      "excerpt": "- title: A string, specifying the title text of the chart. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/samson6460/tf2_Segmentation",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-03-29T05:53:44Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-29T08:40:53Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9052759421637735
      ],
      "excerpt": "It's a framework of image segmentation implemented in tensorflow 2.x. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9968029537584643
      ],
      "excerpt": "Table of Contents \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8150771532802734,
        0.8150771532802734,
        0.8150771532802734,
        0.8150771532802734
      ],
      "excerpt": "labelme_json_to_dataset method \nimglayer_to_dataset method \nlabelme_json_to_sequence method \nimglayer_to_sequence method \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9144601125505957
      ],
      "excerpt": "The Cambridge-driving Labeled Video Database (CamVid) is the first collection of videos with object class semantic labels, complete with metadata. The database provides ground truth labels that associate each pixel with one of 32 semantic classes. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "    model, intput_tensor, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8948358864308289
      ],
      "excerpt": "Call model_predict() to predict and convert the prediction from probabilities to one-hot encoding or binary encoding. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8249430893704546
      ],
      "excerpt": "- model: tf.kears model instance. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8819203661130062
      ],
      "excerpt": "Prediction of one-hot encoding or binary encoding. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9428301859715258
      ],
      "excerpt": "- input_shape: A tuple of 3 integers, shape of input image. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "A tf.keras Model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9778194651457128
      ],
      "excerpt": "This model is available for TensorFlow only. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8252537072407032
      ],
      "excerpt": "- backbone: backbone to use. one of {'xception','mobilenetv2'} \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9184703449377993,
        0.8738482496160741,
        0.9201305029542665
      ],
      "excerpt": "    Used only for xception backbone. \n- alpha: controls the width of the MobileNetV2 network. \n    This is known as the width multiplier in the MobileNetV2 paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9184703449377993,
        0.9373306573188465,
        0.9467250594354212,
        0.8101943167978884
      ],
      "excerpt": "    Used only for mobilenetv2 backbone. \n    Pretrained is only available for alpha=1. \n- activation: optional activation to add to the top of the network. \n    One of 'softmax', 'sigmoid' or None. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9765403283469739
      ],
      "excerpt": "- ValueError: in case of invalid argument for backbone. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9428301859715258
      ],
      "excerpt": "input_shape: A tuple of 3 integers, shape of input image. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "A tf.keras Model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9428301859715258
      ],
      "excerpt": "- input_shape: A tuple of 3 integers, shape of input image. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "A tf.keras Model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9968029537584643,
        0.81892906468534
      ],
      "excerpt": "- input_shape: A tuple of 3 integers, \n    shape of input image. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8185725608225238
      ],
      "excerpt": "    number of repetitions of up-residual blocks. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "A tf.keras Model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.87127476162406,
        0.8391123319776381
      ],
      "excerpt": "- ce_binary_weight: Class weight of binary crossentropy. \n- binary_weight: Class weight of boundary enhanced binary crossentropy. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8705421099216564
      ],
      "excerpt": "- preprocessing: A function of data preprocessing, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8516996004204653
      ],
      "excerpt": "  The default is 1, which means no augmentation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8492274269869852,
        0.9191807323461455,
        0.8524414812536695,
        0.9846588437530929
      ],
      "excerpt": "- class_names: A list of string, the class names of the category in labelme. \n    For example: [\"g\", \"t\", \"v\", \"bg\"], the format of the returned label is one-hot, and the channel is the class. \n    For example, the channel is [1, 0, 0, 0, 0], which means the pixel is \"g\"; [0, 0, 0, 0, 1] means Nothing. \n    The following format is also acceptable: [\"g\", (\"t\", \"v\"), \"bg\"], which means to treat \"t\" and \"v\" as a group. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9279018594660094
      ],
      "excerpt": "- slice_id: A tuple or None, slice id of img_path. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8288384636384589,
        0.8979411005071259
      ],
      "excerpt": "A tuple of Numpy arrays: (img data, label data) \nimg data: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8852126684746883
      ],
      "excerpt": "        Check for more info about color string by the following url: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9279018594660094
      ],
      "excerpt": "slice_id: A tuple or None, slice id of img_path. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8288384636384589,
        0.8979411005071259
      ],
      "excerpt": "A tuple of Numpy arrays: (img data, label data) \nimg data: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.983465854520751,
        0.8492274269869852,
        0.9191807323461455,
        0.8524414812536695,
        0.9846588437530929
      ],
      "excerpt": "    size of the batches of data (default: 20). \n- class_names: A list of string, the class names of the category in labelme. \n    For example: [\"g\", \"t\", \"v\", \"bg\"], the format of the returned label is one-hot, and the channel is the class. \n    For example, the channel is [1, 0, 0, 0, 0], which means the pixel is \"g\"; [0, 0, 0, 0, 1] means Nothing. \n    The following format is also acceptable: [\"g\", (\"t\", \"v\"), \"bg\"], which means to treat \"t\" and \"v\" as a group. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "img data: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.983465854520751
      ],
      "excerpt": "    size of the batches of data (default: 20). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8852126684746883
      ],
      "excerpt": "        Check for more info about color string by the following url: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8979411005071259
      ],
      "excerpt": "img data: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9207160742802687
      ],
      "excerpt": "- size: A tuple of 2 integers, (heights, widths). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8705421099216564
      ],
      "excerpt": "- preprocessing: A function of data preprocessing, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8852126684746883
      ],
      "excerpt": "        check for more info about color string by the following url: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.876472681977316
      ],
      "excerpt": "    Example of RGB tuple of float: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9091117675683982
      ],
      "excerpt": "- label_alpha: A float, transparency of annotation mask. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8350360121109714
      ],
      "excerpt": "- return_array: A boolean, default is False. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8408673184353518
      ],
      "excerpt": "- history: A dictionary, containing one or more data to be drawn, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8931327514034427
      ],
      "excerpt": "- xyLabel: A tuple or list, specifying the description text of x, y axis, for example:('epoch', 'Accuracy'). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9382641488780127
      ],
      "excerpt": "- size: A tuple, specifying the size of the picture, the default is (6, 4) (representing width 6 and height 4 inches). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9769451748403016
      ],
      "excerpt": "Get the weight of the category. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8619089259402867,
        0.8590387026439664
      ],
      "excerpt": "- label_data: A ndarray of shape (batch_size, grid_num, grid_num, info). \n- method: A string, one of \"alpha\"\u3001\"log\"\u3001\"effective\"\u3001\"binary\". \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8139476459325237
      ],
      "excerpt": "A list containing the weight of each category. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Segmentation framework implemented by tensorflow 2.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/samson6460/tf2_Segmentation/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Wed, 08 Dec 2021 06:24:13 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/samson6460/tf2_Segmentation/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "samson6460/tf2_Segmentation",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9004133461935165
      ],
      "excerpt": "dataset from: https://github.com/PengKiKi/camvid \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370043855230743
      ],
      "excerpt": "    classifi_mode=\"one\", **kargs) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8520901180127161
      ],
      "excerpt": "Default: \"one\", which means one-hot encoding. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370043855230743
      ],
      "excerpt": "    classifi_mode='one') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370043855230743
      ],
      "excerpt": "    classifi_mode=\"one\") \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370043855230743
      ],
      "excerpt": "    classifi_mode='one') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370043855230743
      ],
      "excerpt": "    classifi_mode='one') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370043855230743
      ],
      "excerpt": "    classifi_mode=\"one\"): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370043855230743
      ],
      "excerpt": "    classifi_mode=\"one\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370043855230743
      ],
      "excerpt": "    classifi_mode=\"one\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8030605293664933
      ],
      "excerpt": "        https://matplotlib.org/tutorials/colors/colors.html \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370043855230743
      ],
      "excerpt": "    classifi_mode=\"one\", \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370043855230743
      ],
      "excerpt": "    classifi_mode=\"one\", thread_num=1): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8030605293664933
      ],
      "excerpt": "        https://matplotlib.org/tutorials/colors/colors.html \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8057675898656085
      ],
      "excerpt": "    path, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370043855230743
      ],
      "excerpt": "    classifi_mode='one', \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8030605293664933
      ],
      "excerpt": "        https://matplotlib.org/tutorials/colors/colors.html \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370043855230743
      ],
      "excerpt": "    classifi_mode='one') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.833782873776028
      ],
      "excerpt": "A pandas.Series. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370043855230743,
        0.8891401888405708
      ],
      "excerpt": "    classifi_mode='one') \nGet Dice coefficient table. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.833782873776028
      ],
      "excerpt": "A pandas.Series. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9370043855230743
      ],
      "excerpt": "    classifi_mode='one'): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9186966208461417
      ],
      "excerpt": "- confusion_mat: pandas.Dataframe, you can get this from create_confusion_mat(). \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.835777073051328,
        0.8123763140827432
      ],
      "excerpt": "- model: tf.kears model instance. \n- intput_tensor: tf.keras tensor. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8677510781457236
      ],
      "excerpt": "- pretrained_weights: A string, file path of pretrained model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8465251479594719
      ],
      "excerpt": "A tf.keras Model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8292900093139124
      ],
      "excerpt": "- pretrained_weights: one of 'pascal_voc' (pre-trained on pascal voc), 'cityscapes' (pre-trained on cityscape) or local file path of pretrained model or None (random initialization). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8197264287181099
      ],
      "excerpt": "- input_shape: shape of input image. format HxWxC PASCAL VOC model was trained on (512, 512, 3) images. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8336021332506143
      ],
      "excerpt": "A tf.keras model instance. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8677510781457236
      ],
      "excerpt": "pretrained_weights: A string, file path of pretrained model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8465251479594719
      ],
      "excerpt": "A tf.keras Model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8677510781457236
      ],
      "excerpt": "- pretrained_weights: A string, file path of pretrained model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8465251479594719
      ],
      "excerpt": "A tf.keras Model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8197741499508876
      ],
      "excerpt": "- pretrained_backbone: one of None (random initialization), 'imagenet' (pre-training on ImageNet), or the path to the weights file to be loaded. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8662464759631137
      ],
      "excerpt": "    file path of pretrained model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8465251479594719
      ],
      "excerpt": "A tf.keras Model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984,
        0.8390764544314498
      ],
      "excerpt": "    padding=True, line_thickness=5, \n    shuffle=True, seed=None, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8107762542429446
      ],
      "excerpt": "Convert the JSON file generated by labelme into ndarray. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8463376494446864,
        0.848732455506563,
        0.8637633300160297
      ],
      "excerpt": "- img_path: A string, file path of images. \n    If JSON files include images, just specify one of arg (img_path\u3001label_path) with JSON files path. \n- label_path: A string, file path of JSON files. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8581390369338854
      ],
      "excerpt": "- shuffle: Boolean, default: True. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8919601749916956
      ],
      "excerpt": "- encoding: A string, encoding format of JSON file, default: \"big5\". \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8435415944522741
      ],
      "excerpt": "A tuple of Numpy arrays: (img data, label data) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8605154170420835
      ],
      "excerpt": "    size=(512, 512), shuffle=True, seed=None, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8463376494446864,
        0.8654745828658463
      ],
      "excerpt": "img_path: A string, file path of images. \n    Or specify one of args (img_path\u3001label_path) with a folder path includes images folde (should name as img) and masks folder (should name as label). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8639908088946232
      ],
      "excerpt": "    Example of color string: ['r', 'b'](Default). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8581390369338854
      ],
      "excerpt": "shuffle: A boolean, default: True. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8435415944522741
      ],
      "excerpt": "A tuple of Numpy arrays: (img data, label data) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984,
        0.8390764544314498
      ],
      "excerpt": "    padding=True, line_thickness=5, \n    shuffle=True, seed=None, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8107762542429446
      ],
      "excerpt": "Convert the JSON file generated by labelme into ndarray. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8463376494446864,
        0.848732455506563,
        0.8637633300160297
      ],
      "excerpt": "- img_path: A string, file path of images. \n    If JSON files include images, just specify one of arg (img_path\u3001label_path) with JSON files path. \n- label_path: A string, file path of JSON files. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8581390369338854
      ],
      "excerpt": "- shuffle: Boolean, default: True. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8919601749916956
      ],
      "excerpt": "- encoding: A string, encoding format of JSON file, default: \"big5\". \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8605154170420835
      ],
      "excerpt": "    size=(512, 512), shuffle=True, seed=None, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8463376494446864,
        0.8654745828658463
      ],
      "excerpt": "img_path: A string, file path of images. \n    Or specify one of args (img_path\u3001label_path) with a folder path includes images folde (should name as img) and masks folder (should name as label). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8639908088946232
      ],
      "excerpt": "    Example of color string: ['r', 'b'](Default). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8581390369338854
      ],
      "excerpt": "shuffle: A boolean, default: True. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8634430977095434
      ],
      "excerpt": "Read images as ndarray \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.809925233494628
      ],
      "excerpt": "A tuple of Numpy arrays (batches, img heights, img widths, color channels). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8492574498819196
      ],
      "excerpt": "    Example of color string: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8470679898186767
      ],
      "excerpt": "- label_data: A ndarray of shape (batch_size, grid_num, grid_num, info). \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/samson6460/tf2_Segmentation/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "tf2_Segmentation",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "tf2_Segmentation",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "samson6460",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/samson6460/tf2_Segmentation/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 8,
      "date": "Wed, 08 Dec 2021 06:24:13 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "segmentation",
      "semantic-segmentation",
      "tensorflow",
      "tensorflow2",
      "keras",
      "unet",
      "u-net",
      "deeplabv3",
      "deeplab",
      "deep-learning",
      "python"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Clone or download\n    - Use the command bellow in terminal to git clone:    \n    ```git clone https://github.com/samson6460/tf2_Segmentation.git```\n\n    - Or just download whole files using the **[Code > Download ZIP]** button in the upper right corner.\n    \n2. Install dependent packages: \n    ```pip install -r requirements.txt```\n\n3. Import tf2_Segmentation:\n   ```import tf2_Segmentation```\n\n\n",
      "technique": "Header extraction"
    }
  ]
}