{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1805.08318\n\n[5] https://github.com/mgrankin/SimpleSelfAttention/blob/master/Imagenette%20Simple%20Symmetric%20Self%20Attention.ipynb"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[1] https://github.com/fastai/imagenette\n\n[2] https://github.com/fastai/fastai/blob/master/examples/train_imagenette.py\n\n[3] https://github.com/fastai/fastai/blob/5c51f9eabf76853a89a9bc5741804d2ed4407e49/fastai/layers.py\n\n[4] https://arxiv.org/abs/1805.08318\n\n[5] https://github.com/mgrankin/SimpleSelfAttention/blob/master/Imagenette%20Simple%20Symmetric%20Self%20Attention.ipynb\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9222383658450612
      ],
      "excerpt": "v0.3 (6/21/2019) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9222383658450612
      ],
      "excerpt": "v0.2 (5/31/2019) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8109194328925066
      ],
      "excerpt": "      self.key   = conv1d(n_channels, n_channels//8) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9869405348645832
      ],
      "excerpt": "      #Notation from https://arxiv.org/pdf/1805.08318.pdf \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sdoria/SimpleSelfAttention",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-05-14T16:07:56Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-02T14:00:20Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9850603942419306,
        0.8134679614372308,
        0.9621974846591045
      ],
      "excerpt": "The purpose of this repository is two-fold: \n- demonstrate improvements brought by the use of a self-attention layer in an image classification model. \n- introduce a new layer which I call SimpleSelfAttention, which is a modified version of the SelfAttention described in [4] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8532177402020334
      ],
      "excerpt": "We compare a baseline resnet model to the same model with an extra self-attention layer (SimpleSelfAttention, which I will describe further down). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9445100295409523,
        0.9789355133499027
      ],
      "excerpt": "The only difference between baseline and proposed model is the addition of a self-attention layer at a specific position in the architecture.  \nThe new layer, which I call SimpleSelfAttention, is a modified and simplified version of the fastai implementation ([3]) of the self attention layer described in the SAGAN paper ([4]). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8292848796765668
      ],
      "excerpt": "Edit (6/21/2019): order of operations matters to reduce complexity! Changed from x * (x^T * (conv(x))) to (x * x^T) * conv(x) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8958868770008036,
        0.9190812971100554,
        0.969973134899163,
        0.9876566362798151,
        0.981863945898846
      ],
      "excerpt": "Convergence can be an issue when adding a SimpleSelfAttention layer to an existing architecture. We've observed that, when placed within a Resnet block, the network converges if SimpleSelfAttention is placed right after a convolution layer that uses batch norm, and initializes the batchnorm weights to 0.  \nIn our code (xresnet.py), this is done by setting zero_bn=True for the conv_layer that precedes SImpleSelfAttention. \nAs described in the SAGAN paper ([4]), the original layer takes the image features x of shape (C,N) (where N = H * W), and transforms them into f(x) = Wf * x and g(x) = Wg * x, where Wf and Wg have shape (C,C'), and C' is chosen to be C/8. Those matrix multiplications can be expressed as (1 * 1) convolution layers. Then, we compute S = (f(x))^T * g(x). \nTherefore, S = (Wf * x)^T * (Wg * x) = x^T * (Wf ^T * Wg) * x. My first proposed simplification is to combine (Wf ^T * Wg) into a single (C * C) matrix W. So S = x^T * W * x.  S = S(x,x) (bilinear form) is of shape (N * N) and will represent the influence of each pixel on other pixels (\"the extent to which the model attends to the ith location when synthesizing the jth region\" [4]). Note that S(x,x) depends on the input, whereas W does not. (I suspect that having the same bilinear form for every input might be the reason we do better on Imagewoof = 10 dog breeds than Imagenette = 10 very different classes) \nThus, we only learn weights W for one convolution layer instead of weights Wf and Wg for two convolution layers. Advantages are: simplicity, removal of one design choice (C' = C/8), and a matrix W that offers more possibilities than Wf ^T * Wg. One possible drawback is that we have more parameters to learn (C^2 vs C^2/4). One option we haven't tried here is to force W to be a symmetrical matrix. This would reduce the number of parameters and force the influence of \"pixel\" j on pixel i to be the same as pixel i on pixel j. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A simpler version of the self-attention layer from SAGAN, and some image classification results.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sdoria/SimpleSelfAttention/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 26,
      "date": "Sun, 05 Dec 2021 15:49:31 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/sdoria/SimpleSelfAttention/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "sdoria/SimpleSelfAttention",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/sdoria/SimpleSelfAttention/master/Self%20Attention%20Time%20Complexity.ipynb",
      "https://raw.githubusercontent.com/sdoria/SimpleSelfAttention/master/Examples.ipynb",
      "https://raw.githubusercontent.com/sdoria/SimpleSelfAttention/master/v0.1/Imagenette%20Simple%20Self%20Attention.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9708119013170028
      ],
      "excerpt": "Python 3.7, Pytorch 1.0.0, fastai 1.0.52 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8357058953601897
      ],
      "excerpt": "Note: we recommend starting with a single GPU, as running multiple GPU will require additional hyperparameter tuning. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.813086910394054
      ],
      "excerpt": "- model is now in xresnet.py, training is done via train.py (both adapted from fastai repository) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/sdoria/SimpleSelfAttention/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'                                 Apache License\\n                           Version 2.0, January 2004\\n                        http://www.apache.org/licenses/\\n\\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n   1. Definitions.\\n\\n      \"License\" shall mean the terms and conditions for use, reproduction,\\n      and distribution as defined by Sections 1 through 9 of this document.\\n\\n      \"Licensor\" shall mean the copyright owner or entity authorized by\\n      the copyright owner that is granting the License.\\n\\n      \"Legal Entity\" shall mean the union of the acting entity and all\\n      other entities that control, are controlled by, or are under common\\n      control with that entity. For the purposes of this definition,\\n      \"control\" means (i) the power, direct or indirect, to cause the\\n      direction or management of such entity, whether by contract or\\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n      outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\\n      exercising permissions granted by this License.\\n\\n      \"Source\" form shall mean the preferred form for making modifications,\\n      including but not limited to software source code, documentation\\n      source, and configuration files.\\n\\n      \"Object\" form shall mean any form resulting from mechanical\\n      transformation or translation of a Source form, including but\\n      not limited to compiled object code, generated documentation,\\n      and conversions to other media types.\\n\\n      \"Work\" shall mean the work of authorship, whether in Source or\\n      Object form, made available under the License, as indicated by a\\n      copyright notice that is included in or attached to the work\\n      (an example is provided in the Appendix below).\\n\\n      \"Derivative Works\" shall mean any work, whether in Source or Object\\n      form, that is based on (or derived from) the Work and for which the\\n      editorial revisions, annotations, elaborations, or other modifications\\n      represent, as a whole, an original work of authorship. For the purposes\\n      of this License, Derivative Works shall not include works that remain\\n      separable from, or merely link (or bind by name) to the interfaces of,\\n      the Work and Derivative Works thereof.\\n\\n      \"Contribution\" shall mean any work of authorship, including\\n      the original version of the Work and any modifications or additions\\n      to that Work or Derivative Works thereof, that is intentionally\\n      submitted to Licensor for inclusion in the Work by the copyright owner\\n      or by an individual or Legal Entity authorized to submit on behalf of\\n      the copyright owner. For the purposes of this definition, \"submitted\"\\n      means any form of electronic, verbal, or written communication sent\\n      to the Licensor or its representatives, including but not limited to\\n      communication on electronic mailing lists, source code control systems,\\n      and issue tracking systems that are managed by, or on behalf of, the\\n      Licensor for the purpose of discussing and improving the Work, but\\n      excluding communication that is conspicuously marked or otherwise\\n      designated in writing by the copyright owner as \"Not a Contribution.\"\\n\\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\\n      on behalf of whom a Contribution has been received by Licensor and\\n      subsequently incorporated within the Work.\\n\\n   2. Grant of Copyright License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      copyright license to reproduce, prepare Derivative Works of,\\n      publicly display, publicly perform, sublicense, and distribute the\\n      Work and such Derivative Works in Source or Object form.\\n\\n   3. Grant of Patent License. Subject to the terms and conditions of\\n      this License, each Contributor hereby grants to You a perpetual,\\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n      (except as stated in this section) patent license to make, have made,\\n      use, offer to sell, sell, import, and otherwise transfer the Work,\\n      where such license applies only to those patent claims licensable\\n      by such Contributor that are necessarily infringed by their\\n      Contribution(s) alone or by combination of their Contribution(s)\\n      with the Work to which such Contribution(s) was submitted. If You\\n      institute patent litigation against any entity (including a\\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\\n      or a Contribution incorporated within the Work constitutes direct\\n      or contributory patent infringement, then any patent licenses\\n      granted to You under this License for that Work shall terminate\\n      as of the date such litigation is filed.\\n\\n   4. Redistribution. You may reproduce and distribute copies of the\\n      Work or Derivative Works thereof in any medium, with or without\\n      modifications, and in Source or Object form, provided that You\\n      meet the following conditions:\\n\\n      (a) You must give any other recipients of the Work or\\n          Derivative Works a copy of this License; and\\n\\n      (b) You must cause any modified files to carry prominent notices\\n          stating that You changed the files; and\\n\\n      (c) You must retain, in the Source form of any Derivative Works\\n          that You distribute, all copyright, patent, trademark, and\\n          attribution notices from the Source form of the Work,\\n          excluding those notices that do not pertain to any part of\\n          the Derivative Works; and\\n\\n      (d) If the Work includes a \"NOTICE\" text file as part of its\\n          distribution, then any Derivative Works that You distribute must\\n          include a readable copy of the attribution notices contained\\n          within such NOTICE file, excluding those notices that do not\\n          pertain to any part of the Derivative Works, in at least one\\n          of the following places: within a NOTICE text file distributed\\n          as part of the Derivative Works; within the Source form or\\n          documentation, if provided along with the Derivative Works; or,\\n          within a display generated by the Derivative Works, if and\\n          wherever such third-party notices normally appear. The contents\\n          of the NOTICE file are for informational purposes only and\\n          do not modify the License. You may add Your own attribution\\n          notices within Derivative Works that You distribute, alongside\\n          or as an addendum to the NOTICE text from the Work, provided\\n          that such additional attribution notices cannot be construed\\n          as modifying the License.\\n\\n      You may add Your own copyright statement to Your modifications and\\n      may provide additional or different license terms and conditions\\n      for use, reproduction, or distribution of Your modifications, or\\n      for any such Derivative Works as a whole, provided Your use,\\n      reproduction, and distribution of the Work otherwise complies with\\n      the conditions stated in this License.\\n\\n   5. Submission of Contributions. Unless You explicitly state otherwise,\\n      any Contribution intentionally submitted for inclusion in the Work\\n      by You to the Licensor shall be under the terms and conditions of\\n      this License, without any additional terms or conditions.\\n      Notwithstanding the above, nothing herein shall supersede or modify\\n      the terms of any separate license agreement you may have executed\\n      with Licensor regarding such Contributions.\\n\\n   6. Trademarks. This License does not grant permission to use the trade\\n      names, trademarks, service marks, or product names of the Licensor,\\n      except as required for reasonable and customary use in describing the\\n      origin of the Work and reproducing the content of the NOTICE file.\\n\\n   7. Disclaimer of Warranty. Unless required by applicable law or\\n      agreed to in writing, Licensor provides the Work (and each\\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n      implied, including, without limitation, any warranties or conditions\\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n      PARTICULAR PURPOSE. You are solely responsible for determining the\\n      appropriateness of using or redistributing the Work and assume any\\n      risks associated with Your exercise of permissions under this License.\\n\\n   8. Limitation of Liability. In no event and under no legal theory,\\n      whether in tort (including negligence), contract, or otherwise,\\n      unless required by applicable law (such as deliberate and grossly\\n      negligent acts) or agreed to in writing, shall any Contributor be\\n      liable to You for damages, including any direct, indirect, special,\\n      incidental, or consequential damages of any character arising as a\\n      result of this License or out of the use or inability to use the\\n      Work (including but not limited to damages for loss of goodwill,\\n      work stoppage, computer failure or malfunction, or any and all\\n      other commercial damages or losses), even if such Contributor\\n      has been advised of the possibility of such damages.\\n\\n   9. Accepting Warranty or Additional Liability. While redistributing\\n      the Work or Derivative Works thereof, You may choose to offer,\\n      and charge a fee for, acceptance of support, warranty, indemnity,\\n      or other liability obligations and/or rights consistent with this\\n      License. However, in accepting such obligations, You may act only\\n      on Your own behalf and on Your sole responsibility, not on behalf\\n      of any other Contributor, and only if You agree to indemnify,\\n      defend, and hold each Contributor harmless for any liability\\n      incurred by, or claims asserted against, such Contributor by reason\\n      of your accepting any such warranty or additional liability.\\n\\n   END OF TERMS AND CONDITIONS\\n\\n   APPENDIX: How to apply the Apache License to your work.\\n\\n      To apply the Apache License to your work, attach the following\\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\\n      replaced with your own identifying information. (Don\\'t include\\n      the brackets!)  The text should be enclosed in the appropriate\\n      comment syntax for the file format. We also recommend that a\\n      file or class name and description of purpose be included on the\\n      same \"printed page\" as the copyright notice for easier\\n      identification within third-party archives.\\n\\n   Copyright [yyyy] [name of copyright owner]\\n\\n   Licensed under the Apache License, Version 2.0 (the \"License\");\\n   you may not use this file except in compliance with the License.\\n   You may obtain a copy of the License at\\n\\n       http://www.apache.org/licenses/LICENSE-2.0\\n\\n   Unless required by applicable law or agreed to in writing, software\\n   distributed under the License is distributed on an \"AS IS\" BASIS,\\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n   See the License for the specific language governing permissions and\\n   limitations under the License.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "SimpleSelfAttention (Created 5/14/2019)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "SimpleSelfAttention",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "sdoria",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/sdoria/SimpleSelfAttention/blob/master/README.md",
    "technique": "GitHub API"
  },
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "%run train.py --woof 1 --size 256 --bs 64 --mixup 0.2 --sa 1 --epoch 5  --lr 3e-3\n\n- woof: 0 for Imagenette, 1 for Imagewoof (dataset will download automatically)\n- size: image size\n- bs: batch size\n- mixup: 0 for no mixup data augmentation\n- sa: 1 if we use SimpleSelfAttention, otherwise 0\n- sym: 1 if we add symmetry to SimpleSelfAttention (need to have sa=1)\n- epoch: number of epochs\n- lr: learning rate\n- lrfinder: 1 to run learning rate finder, don't train\n- dump: 1 to print model, don't train\n- arch: default is 'xresnet50'\n- gpu: gpu to train on (by default uses all available GPUs??)\n- log: name of csv file to save training log to (folder path is displayed when running)\n\n\nFor faster training on multiple GPUs, you can try running: python -m fastai.launch train.py (not tested much)\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "| Model | Dataset | Image Size | Epochs | Learning Rate | ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "|---|---|---|---|---|---|---|\n| xresnet18 | Imagewoof | 128 | 50 | 1e-3  | 10 | 0.821 |\n| xresnet18 | Imagewoof | 128 | 50 | 3e-3  | 30  | 0.845 |\n| xresnet18 | Imagewoof | 128 | 50 | 5e-3  | 10  | 0.846 |\n| xresnet18 | Imagewoof | 128 | 50 | **8e-3**  | 20  | **0.850** |\n| xresnet18 | Imagewoof | 128 | 50 | 1e-2 | 20 | 0.846 |\n| xresnet18 | Imagewoof | 128 | 50 | 12e-3  | 20 | 0.844 |\n| xresnet18 | Imagewoof | 128 | 50 | 14e-3 | 20 | 0.847 |\n\nNote: we are not using mixup.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "|---|---|---|---|---|---|---|---|---|\n| xresnet18 | Imagewoof | 128 | 50 | 8e-3  | 20 | 0.8498 | 0.00782 | 9:37 (4)|\n| xresnet18 + simple sa | Imagewoof | 128 | 47 | 8e-3  | 20  | **0.8567** | 0.00937 | 9:28 (4) |\n| xresnet18 + original sa | Imagewoof | 128 | 47 | 8e-3  | 20  | 0.8547 | 0.00652 | 11:20 (1) |\n\nThis is using a single RTX 2080 Ti GPU. We use the %%time function on Jupyter notebooks. \n\n\nParameters:\n\n%run train.py --woof 1 --size 128 --bs 64 --mixup 0 --sa 0 --epoch 50  --lr 8e-3 --arch 'xresnet18'\n\n%run train.py --woof 1 --size 128 --bs 64 --mixup 0 --sa 1 --epoch 47  --lr 8e-3 --arch 'xresnet18'\n\n\n\n\nWe can compare the results using an independent samples t-test (https://www.medcalc.org/calc/comparison_of_means.php):\n\n- Difference: 0.007\n- 95% confidence interval: 0.0014 to 0.0124\n- Significance level: P = 0.0157\n\n\nAdding a SimpleSelfAttention layer seems to provide a statistically significant boost in accuracy after training for ~50 epochs, without additional run time, and while using a learning rate optimized for the original model.\n\nSimpleSelfAttention provides similar results as the original SelfAttention, while decreasing run time.\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "We use the same parameters as for 50 epochs and double the number of epochs:\n\n\n\n| Model | Dataset | Image Size | Epochs | Learning Rate | ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "|---|---|---|---|---|---|---|---|---|\n| xresnet18 | Imagewoof | 128 | 100 | 8e-3  | 23 | 0.8576 | 0.00817 | 20:05 (4) |\n| xresnet18 + simple sa | Imagewoof | 128 | 94 | 8e-3  | 23  | **0.8634** | 0.00740 | 19:27 (4) |\n\n- Difference: 0.006\n- 95% CI\t0.0012 to 0.0104\n- Significance level\tP = 0.0153\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "|---|---|---|---|---|---|---|---|---|\n| xresnet18 | Imagewoof | 128 | 100 | 8e-3  | 15 | 0.8636 | 0.00585 | ? |\n| xresnet18 + simple sa | Imagewoof | 128 | 94 | 8e-3  | 15  | 0.87106 | 0.00726 | ? |\n| xresnet18 + original sa | Imagewoof | 128 | 94 | 8e-3  | 15  | 0.8697 | 0.00726 | ? |\n\nAgain here, SimpleSelfAttention performs as well as the original self-attention layer and beats the baseline model.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "|---|---|---|---|---|---|---|---|---|\n| xresnet18 | Imagewoof | 256 | 50 | 8e-3  | 15 | 0.9005 | 0.00595 | _ |\n| xresnet18 + simple sa | Imagewoof | 256 | 47 | 8e-3  | 15  | 0.9002 | 0.00478 | _ |\n\nSo far, no detected improvement when using 256px wide images.\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 197,
      "date": "Sun, 05 Dec 2021 15:49:31 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "%run train.py --woof 1 --size 256 --bs 64 --mixup 0.2 --sa 1 --epoch 5  --lr 3e-3\n\n- woof: 0 for Imagenette, 1 for Imagewoof (dataset will download automatically)\n- size: image size\n- bs: batch size\n- mixup: 0 for no mixup data augmentation\n- sa: 1 if we use SimpleSelfAttention, otherwise 0\n- sym: 1 if we add symmetry to SimpleSelfAttention (need to have sa=1)\n- epoch: number of epochs\n- lr: learning rate\n- lrfinder: 1 to run learning rate finder, don't train\n- dump: 1 to print model, don't train\n- arch: default is 'xresnet50'\n- gpu: gpu to train on (by default uses all available GPUs??)\n- log: name of csv file to save training log to (folder path is displayed when running)\n\n\nFor faster training on multiple GPUs, you can try running: python -m fastai.launch train.py (not tested much)\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Results using the original self-attention layer are added as a reference.\n\n\n\n| Model | Dataset | Image Size | Epochs | Learning Rate | ",
      "technique": "Header extraction"
    }
  ]
}