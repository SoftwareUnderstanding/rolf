{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1512.03385",
      "https://arxiv.org/abs/1612.03144",
      "https://arxiv.org/abs/1505.04597",
      "https://arxiv.org/abs/1512.03385, 2015.\n2. Tsung-Yi Lin, Piotr Doll\u00e1r, Ross Girshick, Kaiming He, Bharath Hariharan, Serge Belongie,\"[Feature Pyramid Networks for Object Detection](https://arxiv.org/abs/1612.03144),\" https://arxiv.org/abs/1612.03144,2016. \n3. Olaf Ronneberger, Philipp Fischer, Thomas Brox, \"[U-Net: Convolutional Networks for Biomedical Image Segmentation.]( https://arxiv.org/abs/1505.04597),\" https://arxiv.org/abs/1505.04597.",
      "https://arxiv.org/abs/1612.03144,2016. \n3. Olaf Ronneberger, Philipp Fischer, Thomas Brox, \"[U-Net: Convolutional Networks for Biomedical Image Segmentation.]( https://arxiv.org/abs/1505.04597),\" https://arxiv.org/abs/1505.04597.",
      "https://arxiv.org/abs/1505.04597."
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. K. He, X. Zhang, S. Ren, and J. Sun, \u201c[Deep Residual Learning for Image Recognition](https://arxiv.org/abs/1512.03385),\u201d arXiv:1512.03385, 2015.\n2. Tsung-Yi Lin, Piotr Doll\u00e1r, Ross Girshick, Kaiming He, Bharath Hariharan, Serge Belongie,\"[Feature Pyramid Networks for Object Detection](https://arxiv.org/abs/1612.03144),\" arXiv:1612.03144,2016. \n3. Olaf Ronneberger, Philipp Fischer, Thomas Brox, \"[U-Net: Convolutional Networks for Biomedical Image Segmentation.]( https://arxiv.org/abs/1505.04597),\" arXiv:1505.04597.\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/YudeWang/UNet-Satellite-Image-Segmentation",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-12-15T06:37:13Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-11T00:25:33Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.885357202077054
      ],
      "excerpt": "This network use Feature Pyramid Network architecture, each up-sampling layer use linear interpolation instead of de-convolution. Convolution structure we use residual-block, which including convolution and down-sampling (convolution with stride=2). A condition random field(CRF) is added at the end of network with size 256*256*512. The loss function is soft-max cross-entropy. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8093058274172295,
        0.8352577741501007
      ],
      "excerpt": "In BDCI-jiage-Semi folder, the labels are plane(1), building(2), water(3), road(4), and  the other(0). \nTo generate training dataset, we random select 1024*1024 patch of original map and scale it into 256*256. For data augmentation, four kinds of rotation transformation( 0, 90, 180, 270 degree) and minor transformation are applied. You can use following instruction to generate TFRecord format dataset. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A Tensorflow implentation of light UNet framework for remote sensing semantic segmentation task.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/YudeWang/UNet-Satellite-Image-Segmentation/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 43,
      "date": "Wed, 08 Dec 2021 00:13:11 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/YudeWang/UNet-Satellite-Image-Segmentation/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "YudeWang/UNet-Satellite-Image-Segmentation",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Clone the repository\n\n   ```shell\n   git clone https://github.com/YudeWang/UNet-Satellite-Image-Segmentation.git\n   ```\n\n2. Install PyDenseCRF\n\n   You can follow the install instruction of [PyDenseCRF](https://github.com/lucasb-eyer/pydensecrf)\n\n   If you **do not have the permission of sudo**, you can download the source code by:\n\n   ```shell\n   git clone https://github.com/lucasb-eyer/pydensecrf.git\n   ```\n\n   Follow the instruction and install:\n\n   ```shell\n   cd pydensecrf-master\n   python setup.py install\n   ```\n\n3. Download dataset and model\n\n   You can download 2017 CCF BDCI remote sensing challenge dataset and our pre-trained model from [here](https://drive.google.com/file/d/1FMRMe4qSI-JS6AzrO8kASO3BfHOLoUfM/view). Please unzip package in this repository folder and change the ckpt file name to **UNet_ResNet_itr100000.ckpt**(I used to call it FPN, while the structure of network is symmetrical and then rename it).\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9328061319193153
      ],
      "excerpt": "This project implement by gpu version of tensorflow1.3. Therefore a Nvidia GPU is needed. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9150649092163701
      ],
      "excerpt": "python train.py --gpu=0 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8646670442460052
      ],
      "excerpt": "python test.py --gpu=0 \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.921108411272225,
        0.8049466704188911
      ],
      "excerpt": "python dataset.py \nYou can run train.py for training, but please check training parameters at first. This code can run on single GPU by following instruction: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9477746282614931,
        0.9102902232893343
      ],
      "excerpt": "python train.py --gpu=0 \nTraining result model will be saved in model folder with name UNet_ResNet_itrxxxxxx.ckpt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.893436119133665
      ],
      "excerpt": "You can use test.py to generate segmentation result. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9487366164116504,
        0.8152736201568481
      ],
      "excerpt": "python test.py --gpu=0 \nThe test result picture can be found in BDCI2017-jiage-Semi/test/x_result.png \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/YudeWang/UNet-Satellite-Image-Segmentation/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Light UNet for Satellite Image Segmentation",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "UNet-Satellite-Image-Segmentation",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "YudeWang",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/YudeWang/UNet-Satellite-Image-Segmentation/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 98,
      "date": "Wed, 08 Dec 2021 00:13:11 GMT"
    },
    "technique": "GitHub API"
  }
}