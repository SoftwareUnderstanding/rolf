{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1301.3781"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8969248405447797
      ],
      "excerpt": "  - admissible values: empty or comma-separated list of org.qcri.rheem.core.optimizer.enumeration.LatentOperatorPruningStrategy (default), org.qcri.rheem.core.optimizer.enumeration.TopKPruningStrategy, org.qcri.rheem.core.optimizer.enumeration.RandomPruningStrategy, and org.qcri.rheem.core.optimizer.enumeration.SinglePlatformPruningStrategy (order-sensitive) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rheem-ecosystem/rheem-benchmark",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-04-27T08:36:05Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-04-20T19:27:56Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.988314950716355,
        0.9886918037088188,
        0.864083938063732
      ],
      "excerpt": "This repository provides example applications and further benchmarking tools to evaluate and get started with Rheem. \nBelow we provide detailed information on our various benchmark components, including running instructions. For the configuration of Rheem itself, please consult the Rheem repository or feel free to reach out on Gitter. \nDescription. This app takes a text input file and counts the number occurrences of each word in the text. This simple app has become some sort of \"Hello World\" program for data processing systems. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8403623083582314,
        0.8808149328828838
      ],
      "excerpt": "Even though this app is written in Scala, you can launch it in a regular JVM. Run the app without parameters to get a description of the required parameters. \nDatasets. Find below a list of datasets that can be used to benchmark Rheem in combination with this app: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9699298320647523
      ],
      "excerpt": "Description. Akin to Google's Word2Vec, this app creates vector representations of words from a corpus based on its neighbors. This app is a bit simpler in the sense that it calculates the average neighborhood of each word rather than determining a lower-dimensional representation. The resulting vectors can be used, e.g., to cluster words and find related terms. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8403623083582314,
        0.8808149328828838
      ],
      "excerpt": "Even though this app is written in Scala, you can launch it in a regular JVM. Run the app without parameters to get a description of the required parameters. \nDatasets. Find below a list of datasets that can be used to benchmark Rheem in combination with this app: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9429625331317781
      ],
      "excerpt": "Description. This app executes a query from the established TPC-H benchmark. We provide several variants that work either on data in databases, in files, or in a mixture of both. Thus, this app requires cross-platform execution. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9054056229062915
      ],
      "excerpt": "Even though this app is written in Scala, you can launch it in a regular JVM. Run the app without parameters to get a description of the required parameters. Note that you will have to configure Rheem, such that can access the database. Furthermore, this app depends on the following configuration keys: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9346951866247745,
        0.8389199634321556
      ],
      "excerpt": "Datasets. The datasets for this app can be generated with the TPC-H tools. The generated datasets can then be either put into a database and/or a filesystem. \nDescription. This app provides the data profiling algorithm SINDY that discovers inclusion dependencies in a relational database. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8403623083582314,
        0.8808149328828838
      ],
      "excerpt": "Even though this app is written in Scala, you can launch it in a regular JVM. Run the app without parameters to get a description of the required parameters. \nDatasets. Find below a list of datasets that can be used to benchmark Rheem in combination with this app: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9600239691183304
      ],
      "excerpt": "Description. This app implements the stochastic gradient descent algorithm. SGD is an optimization algorithm that minimizes a loss function and can be used in many tasks of supervised machine learning. The current implementation uses the logistic loss and can thus, be used for classification. As many other machine learning techniques, SGD is a highly iterative algorithm. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8403623083582314,
        0.8808149328828838
      ],
      "excerpt": "Even though this app is written in Scala, you can launch it in a regular JVM. Run the app without parameters to get a description of the required parameters. \nDatasets. Find below a list of datasets that can be used to benchmark Rheem in combination with this app: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9837486811647566
      ],
      "excerpt": "Description. Being a well-known method to cluster data points in a Euclidian space. As many other machine learning techniques, k-means is an iterative algorithm. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.974257035311774,
        0.8403623083582314
      ],
      "excerpt": "The latter assumes data to reside in a filesystem, while the other assumes data to reside in PostgreSQL. For the latter case, you will have to configure Rheem, such that it can access the database. \nEven though this app is written in Scala, you can launch it in a regular JVM. Run the app without parameters to get a description of the required parameters. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9313760639603018
      ],
      "excerpt": "Description. This app implements the cross-community PageRank: It takes as input two graphs, merges them, and runs a standard PageRank on the resulting graph. The preprocessing and PageRank steps typically lend themselves to be executed on different platforms. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8403623083582314,
        0.8931461032972025,
        0.9880203401851958
      ],
      "excerpt": "Even though this app is written in Scala, you can launch it in a regular JVM. Run the app without parameters to get a description of the required parameters. \nDatasets. This app works on RDF files, more specifically the Wikipedia pagelinks via DBpedia. Note that this app requires two input files. For the purpose of benchmarking, it is fine to use the same input file twice. \nDescription. This app generates Rheem plans with specific predefined topologies but of arbitrary size. This allows to experimentally determine the scalability of Rheem's optimizer to large plans. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8435183735072109,
        0.9142527222568301,
        0.8266822805479439,
        0.9435935913476652,
        0.9680093087237883
      ],
      "excerpt": "Even though this app is written in Scala, you can launch it in a regular JVM. Run the app without parameters to get a description of the required parameters. Furthermore, the following configuration can be interesting: \n- rheem.core.optimizer.pruning.strategies: controls the pruning strategy to be used when enumerating alternative plans \n  - admissible values: empty or comma-separated list of org.qcri.rheem.core.optimizer.enumeration.LatentOperatorPruningStrategy (default), org.qcri.rheem.core.optimizer.enumeration.TopKPruningStrategy, org.qcri.rheem.core.optimizer.enumeration.RandomPruningStrategy, and org.qcri.rheem.core.optimizer.enumeration.SinglePlatformPruningStrategy (order-sensitive) \n- rheem.core.optimizer.pruning.topk: controls the k for the top-k pruning \n- rheem.core.optimizer.enumeration.concatenationprio: controls the order of the enumeration \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8185390716859179
      ],
      "excerpt": "- rheem.core.optimizer.enumeration.invertconcatenations invert the above mentioned enumeration order \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Benchmark and example applications for Rheem.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rheem-ecosystem/rheem-benchmark/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Tue, 07 Dec 2021 02:04:23 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/rheem-ecosystem/rheem-benchmark/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "rheem-ecosystem/rheem-benchmark",
    "technique": "GitHub API"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/rheem-ecosystem/rheem-benchmark/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Scala",
      "Java",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Rheem Benchmarks <img align=\"right\" width=\"128px\" src=\"http://da.qcri.org/rheem/img/logo.png\" alt=\"Rheem logo\">",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "rheem-benchmark",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "rheem-ecosystem",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rheem-ecosystem/rheem-benchmark/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 07 Dec 2021 02:04:23 GMT"
    },
    "technique": "GitHub API"
  },
  "support_channel": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://gitter.im/rheem-ecosystem/Lobby",
    "technique": "Regular expression"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "rheem",
      "cross-platform",
      "data",
      "mining",
      "analytics"
    ],
    "technique": "GitHub API"
  }
}