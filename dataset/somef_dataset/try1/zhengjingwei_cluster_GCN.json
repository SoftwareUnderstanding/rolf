{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1801.10247",
      "https://arxiv.org/abs/1706.02216",
      "https://arxiv.org/abs/1710.10568",
      "https://arxiv.org/abs/1710.10903",
      "https://arxiv.org/abs/1803.07294",
      "https://arxiv.org/abs/1802.00910"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{clustergcn,\n  title = {Cluster-GCN: An Efficient Algorithm for Training Deep and Large Graph Convolutional Networks},\n  author = { Wei-Lin Chiang and Xuanqing Liu and Si Si and Yang Li and Samy Bengio and Cho-Jui Hsieh},\n  booktitle = {ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD)},\n  year = {2019},\n  url = {https://arxiv.org/pdf/1905.07953.pdf},\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zhengjingwei/cluster_GCN",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-20T08:04:40Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-07-15T11:09:53Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9794562376580126
      ],
      "excerpt": "This repository contains a TensorFlow implementation of \"Cluster-GCN: An Efficient Algorithm for Training Deep and Large Graph Convolutional Networks\" by Wei-Lin Chiang, Xuanqing Liu, Si Si, Yang Li, Samy Bengio, and Cho-Jui Hsieh (accepted as ORAL presentation in ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD) 2019). \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zhengjingwei/cluster_GCN/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Sat, 11 Dec 2021 21:41:26 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zhengjingwei/cluster_GCN/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "zhengjingwei/cluster_GCN",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/zhengjingwei/cluster_GCN/master/run_ppi.sh",
      "https://raw.githubusercontent.com/zhengjingwei/cluster_GCN/master/run_reddit.sh"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/zhengjingwei/cluster_GCN/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Gherkin",
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Cluster-GCN: An Efficient Algorithm for Training Deep and Large Graph Convolutional Networks",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "cluster_GCN",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "zhengjingwei",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/zhengjingwei/cluster_GCN/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "\r\n* install clustering toolkit: metis and its Python interface.\r\n\r\n  download and install metis: http://glaros.dtc.umn.edu/gkhome/metis/metis/download\r\n\r\n  METIS - Serial Graph Partitioning and Fill-reducing Matrix Ordering ([official website](http://glaros.dtc.umn.edu/gkhome/metis/metis/overview))\r\n\r\n```\r\n1) Download metis-5.1.0.tar.gz from http://glaros.dtc.umn.edu/gkhome/metis/metis/download and unpack it\r\n2) cd metis-5.1.0\r\n3) make config shared=1 prefix=~/.local/\r\n4) make install\r\n5) export METIS_DLL=~/.local/lib/libmetis.so\r\n```\r\n\r\n* install required Python packages\r\n\r\n```\r\n pip install -r requirements.txt\r\n```\r\n\r\nquick test to see whether you install metis correctly:\r\n\r\n```\r\n>>> import networkx as nx\r\n>>> import metis\r\n>>> G = metis.example_networkx()\r\n>>> (edgecuts, parts) = metis.part_graph(G, 3)\r\n```\r\n\r\n* We follow [GraphSAGE](https://github.com/williamleif/GraphSAGE#input-format)'s input format and its code for pre-processing the data.\r\n\r\n* This repository includes scripts for reproducing our experimental results on PPI and Reddit. Both datasets can be downloaded from this [website](http://snap.stanford.edu/graphsage/).\r\n\r\n",
      "technique": "Header extraction"
    }
  ],
  "run": [
    {
      "confidence": [
        1
      ],
      "excerpt": "\r\n* After metis and networkx are set up, and datasets are ready, we can try the scripts.\r\n\r\n* We assume data files are stored under './data/{data-name}/' directory.\r\n\r\n  For example, the path of PPI data files should be: data/ppi/ppi-{G.json, feats.npy, class_map.json, id_map.json}\r\n\r\n* For PPI data, you may run the following scripts to reproduce results in our paper\r\n\r\n```\r\n./run_ppi.sh\r\n```\r\n\r\n  For reference, with a V100 GPU, running time per epoch on PPI is about 1 second.\r\n\r\n```\r\nThe test F1 score will be around 0.9935 depending on different initialization.\r\n\r\n```\r\n\r\n* For reddit data (need change the data_prefix path in .sh to point to the data):\r\n\r\n```\r\n./run_reddit.sh\r\n```\r\n\r\nIn the experiment section of the paper, we show how to generate Amazon2M dataset. There is an external implementation for generating Amazon2M data following the same procedure in the paper ([code and data](http://web.cs.ucla.edu/~chohsieh/data/Amazon2M.tar.gz)).\r\n\r\nBelow shows a table of state-of-the-art performance from recent papers.\r\n\r\n|               | PPI         | Reddit    |\r\n| ------------- |:-----------:| ---------:|\r\n| [FastGCN](https://arxiv.org/abs/1801.10247) ([code](https://github.com/matenure/FastGCN))           | N/A         | 93.7      |\r\n| [GraphSAGE](https://arxiv.org/abs/1706.02216) ([code](https://github.com/williamleif/GraphSAGE))    | 61.2        | 95.4      |\r\n| [VR-GCN](https://arxiv.org/abs/1710.10568) ([code](https://github.com/thu-ml/stochastic_gcn))       | 97.8        | 96.3      |\r\n| [GAT](https://arxiv.org/abs/1710.10903) ([code](https://github.com/PetarV-/GAT))                    | 97.3        | N/A       |\r\n| [GaAN](https://arxiv.org/abs/1803.07294)                                                     | 98.71       | 96.36     |\r\n| [GeniePath](https://arxiv.org/abs/1802.00910)                                                | 98.5        | N/A       |\r\n| Cluster-GCN                                                  | **99.36**   | **96.60** |\r\n\r\nIf you use any of the materials, please cite the following paper.\r\n\r\n```\r\n@inproceedings{clustergcn,\r\n  title = {Cluster-GCN: An Efficient Algorithm for Training Deep and Large Graph Convolutional Networks},\r\n  author = { Wei-Lin Chiang and Xuanqing Liu and Si Si and Yang Li and Samy Bengio and Cho-Jui Hsieh},\r\n  booktitle = {ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD)},\r\n  year = {2019},\r\n  url = {https://arxiv.org/pdf/1905.07953.pdf},\r\n}\r\n\r\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Sat, 11 Dec 2021 21:41:26 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "graph-convolutional-networks"
    ],
    "technique": "GitHub API"
  }
}