{
  "citation": [
    {
      "confidence": [
        0.9345709139347155
      ],
      "excerpt": "- Original code: https://github.com/szagoruyko/wide-residual-networks \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8251022327183287
      ],
      "excerpt": "WRN-28-10 no dropout: \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/asmith26/wide_resnets_keras",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-06-01T16:44:46Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-01T16:57:07Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9192099561673182
      ],
      "excerpt": "- Paper (v1): http://arxiv.org/abs/1605.07146v1 (the authors have since published a v2 of the paper, which introduces slightly different preprocessing and improves the accuracy a little). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.843193700853559,
        0.9226678585078001,
        0.8314975498200176,
        0.8430599709552918
      ],
      "excerpt": "There are three configuration sections at the top of main.py: \n- DATA CONFIGURATION: Containing data details. \n- NETWORK/TRAINING CONFIGURATION: Includes the main parameters the authors experimented with. \n- OUTPUT CONFIGURATION: Defines paths regarding where to save model/checkpoint weights and plots. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8155444595141926
      ],
      "excerpt": "Note: I have not followed the exact same preprocessing and data augmentation steps used in the paper, in particular: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8912851331526745
      ],
      "excerpt": "\"random crops from image padded by 4 pixels on each side, filling missing pixels with reflections of original image\", which appears to be implemented in this file. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Keras implementation + pretrained weights for \"Wide Residual Networks\"",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/asmith26/wide_resnets_keras/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 49,
      "date": "Wed, 08 Dec 2021 20:41:21 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/asmith26/wide_resnets_keras/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "asmith26/wide_resnets_keras",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.9333384803827206
      ],
      "excerpt": "$ python main.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8489868939884648,
        0.8032027976857384
      ],
      "excerpt": "Using these values in main.py, I obtained a test loss = 0.31 and test accuracy = 0.93. This test error (i.e. 1 - 0.93 = 7%) is a little higher than the reported result (Table 4 states the same model obtains a test error of 4.97%); see the note below for a likely explanation. \nYou can find the trained weights for this model at models/WRN-28-10.h5, whilst models/test.py provides an example of running these weights against the test set. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/asmith26/wide_resnets_keras/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Keras implementation of \"Wide Residual Networks\"",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "wide_resnets_keras",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "asmith26",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/asmith26/wide_resnets_keras/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- `pip install -r requirements.txt`\n- To plot the architecture of the model used (like the plot of the WRN-16-2 architecture plotted [below](#example-plot)), you need to install `pydot` and `graphviz`. I recommend installing with `conda install -c conda-forge python-graphviz`:\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 141,
      "date": "Wed, 08 Dec 2021 20:41:21 GMT"
    },
    "technique": "GitHub API"
  }
}