{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1807.03748",
      "https://arxiv.org/abs/1807.03748"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- [Representation Learning with Contrastive Predictive Coding](https://arxiv.org/abs/1807.03748)\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/davidtellez/contrastive-predictive-coding",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-09-14T14:48:54Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-06T09:14:43Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9920608623602073,
        0.9915628369659708,
        0.9757901019101846
      ],
      "excerpt": "This repository contains a Keras implementation of the algorithm presented in the paper Representation Learning with Contrastive Predictive Coding. \nThe goal of unsupervised representation learning is to capture semantic information about the world, recognizing patterns in the data without using annotations. This paper presents a new method called Contrastive Predictive Coding (CPC) that can do so across multiple applications. The main ideas of the paper are: \n* Contrastive: it is trained using a contrastive approach, that is, the main model has to discern between right and wrong data sequences. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9602980609726944,
        0.9717272549314403
      ],
      "excerpt": "* Coding: the model performs this prediction in a latent space, transforming code vectors into other code vectors (in contrast with predicting high-dimensional data directly). \nCPC has to predict the next item in a sequence using only an embedded representation of the data, provided by an encoder. In order to solve the task, this encoder has to learn a meaningful representation of the data space. After training, this encoder can be used for other downstream tasks like supervised classification. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8068986024471655
      ],
      "excerpt": "To train the CPC algorithm, I have created a toy dataset. This dataset consists of sequences of modified MNIST numbers (64x64 RGB). Positive sequence samples contain sorted numbers, and negative ones random numbers. For example, let's assume that the context sequence length is S=4, and CPC is asked to predict the next P=2 numbers. A positive sample could look like [2, 3, 4, 5]-&gt;[6, 7], whereas a negative one could be [1, 2, 3, 4]-&gt;[0, 8]. Of course CPC will only see the patches, not the actual numbers. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8682363847107861
      ],
      "excerpt": "After 10 training epochs, CPC reports a 99% accuracy on the contrastive task. After training, I froze the encoder and trained a MLP on top of it to perform supervised digit classification on the same MNIST data. It achieved 90% accuracy after 10 epochs, demonstrating the effectiveness of CPC for unsupervised feature extraction. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Keras implementation of Representation Learning with Contrastive Predictive Coding",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/davidtellez/contrastive-predictive-coding/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 105,
      "date": "Wed, 08 Dec 2021 05:11:40 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/davidtellez/contrastive-predictive-coding/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "davidtellez/contrastive-predictive-coding",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8544015989238236
      ],
      "excerpt": "Anaconda Python 3.5.3 \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8671059642066085
      ],
      "excerpt": "<img src=\"/resources/figure.png\" alt=\"CPC algorithm\" height=\"350\"> \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/davidtellez/contrastive-predictive-coding/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "## Representation Learning with Contrastive Predictive Coding",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "contrastive-predictive-coding",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "davidtellez",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/davidtellez/contrastive-predictive-coding/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 429,
      "date": "Wed, 08 Dec 2021 05:11:40 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "deep-learning",
      "representation-learning",
      "unsupervised-learning",
      "contrastive-loss",
      "predictive-modeling"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Execute ```python train_model.py``` to train the CPC model.\n- Execute ```python benchmark_model.py``` to train the MLP on top of the CPC encoder.\n\n",
      "technique": "Header extraction"
    }
  ]
}