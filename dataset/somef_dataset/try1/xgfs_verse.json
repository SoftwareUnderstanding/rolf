{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you use the code or the datasets, please consider citing the paper:\n```bibtex\n@inproceedings{Tsitsulin:2018:VVG:3178876.3186120,\n    author = {Tsitsulin, Anton and Mottin, Davide and Karras, Panagiotis and M\\\"{u}ller, Emmanuel},\n    title = {VERSE: Versatile Graph Embeddings from Similarity Measures},\n    booktitle = {Proceedings of the 2018 World Wide Web Conference},\n    series = {WWW '18},\n    year = {2018},\n    isbn = {978-1-4503-5639-8},\n    location = {Lyon, France},\n    pages = {539--548},\n    numpages = {10},\n    url = {https://doi.org/10.1145/3178876.3186120},\n    doi = {10.1145/3178876.3186120},\n    acmid = {3186120},\n    publisher = {International World Wide Web Conferences Steering Committee},\n    address = {Republic and Canton of Geneva, Switzerland},\n    keywords = {feature learning, graph embedding, graph representations, information networks, node embedding, vertex similarity},\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{Tsitsulin:2018:VVG:3178876.3186120,\n    author = {Tsitsulin, Anton and Mottin, Davide and Karras, Panagiotis and M\\\"{u}ller, Emmanuel},\n    title = {VERSE: Versatile Graph Embeddings from Similarity Measures},\n    booktitle = {Proceedings of the 2018 World Wide Web Conference},\n    series = {WWW '18},\n    year = {2018},\n    isbn = {978-1-4503-5639-8},\n    location = {Lyon, France},\n    pages = {539--548},\n    numpages = {10},\n    url = {https://doi.org/10.1145/3178876.3186120},\n    doi = {10.1145/3178876.3186120},\n    acmid = {3186120},\n    publisher = {International World Wide Web Conferences Steering Committee},\n    address = {Republic and Canton of Geneva, Switzerland},\n    keywords = {feature learning, graph embedding, graph representations, information networks, node embedding, vertex similarity},\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9811934373974328
      ],
      "excerpt": "1 2 3 4 5 6 7 8 9 11 12 13 14 18 20 22 32 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9372151656983196
      ],
      "excerpt": "3 1 2 4 8 9 10 14 28 29 33 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8283216015784888
      ],
      "excerpt": "audi_embedding = embeddings['http://dbpedia.org/resource/Audi'] \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/xgfs/verse",
    "technique": "GitHub API"
  },
  "contact": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```bash\necho \"%7=87@=<2=<>5.27\" | tr '#:-)/->' '_-|'\n```\n",
      "technique": "Header extraction"
    }
  ],
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-02-23T08:45:00Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-05T12:45:41Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9929399193352558,
        0.9224697209330422
      ],
      "excerpt": "This repository provides a reference implementation of VERSE as well as links to the data. \nThis implementation uses a custom graph format, namely binary compressed sparse row (BCSR) format for efficiency and reduced memory usage. Converter for three common graph formats (MATLAB sparse matrix, adjacency list, edge list) can be found in the python directory of the project. Usage: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8261854834218285,
        0.8285425096405467
      ],
      "excerpt": "Converter for three common graph formats (MATLAB sparse matrix, adjacency \n  list, edge list) can be found in the root directory of the project. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8016068558788977
      ],
      "excerpt": "  --undirected / --directed       Treat graph as undirected. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8488774965944276
      ],
      "excerpt": "  --help                          Show this message and exit. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9340267231157986
      ],
      "excerpt": ": The binary file that is the output of the compiled verse binary. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8037479029491027
      ],
      "excerpt": ": An optional csv that should contain the mapping of id to some string key. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Reference implementation of the paper VERSE: Versatile Graph Embeddings from Similarity Measures",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/xgfs/verse/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 18,
      "date": "Mon, 13 Dec 2021 02:10:05 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/xgfs/verse/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "xgfs/verse",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/xgfs/verse/master/example.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "We make VERSE available in two forms: fast, optimized C++ code that was used in the experiments, and more convenient python wrapper. Note that wrapper is still experimental and may not provide optimal performance.\n\nFor C++ executables:\n```bash\ncd src && make;\n```\nshould be enough on most platforms. If you need to change the default compiler (i.e. to Intel), use:\n```bash\nmake CXX=icpc\n```\n\nVERSE is able to encompass diverse similarity measures under its model. For performance reasons, we have implemented three different similarities separately.\n\nUse the command\n```bash\nverse -input data/karate.bcsr -output karate.bin -dim 128 -alpha 0.85 -threads 4 -nsamples 3\n```\nto run the default version (that corresponds to PPR similarity) with 128 embedding dimension, PPR alpha 0.85, using 3 negative samples.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8622888558449026
      ],
      "excerpt": "1 2 3 4 5 6 7 8 9 11 12 13 14 18 20 22 32 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8774242426417121
      ],
      "excerpt": "    (note, you must also specify the variable name of the adjacency matrix --matfile-variable-name) \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9311958406520341
      ],
      "excerpt": "Usage: convert-bcsr [OPTIONS] INPUT OUTPUT \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8875201177955222
      ],
      "excerpt": "                                  File format of input file \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8621882743635256
      ],
      "excerpt": "                                  .mat file. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8890415002484309
      ],
      "excerpt": "  --sep TEXT                      Separator of input file \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/xgfs/verse/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "Python",
      "Makefile",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 \\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "VERSE: Versatile Graph Embeddings from Similarity Measures",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "verse",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "xgfs",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/xgfs/verse/blob/master/readme.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 109,
      "date": "Mon, 13 Dec 2021 02:10:05 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "graph",
      "similarity-measures",
      "embeddings",
      "machine-learning",
      "machine-learning-algorithms",
      "graph-algorithms"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "We make VERSE available in two forms: fast, optimized C++ code that was used in the experiments, and more convenient python wrapper. Note that wrapper is still experimental and may not provide optimal performance.\n\nFor C++ executables:\n```bash\ncd src && make;\n```\nshould be enough on most platforms. If you need to change the default compiler (i.e. to Intel), use:\n```bash\nmake CXX=icpc\n```\n\nVERSE is able to encompass diverse similarity measures under its model. For performance reasons, we have implemented three different similarities separately.\n\nUse the command\n```bash\nverse -input data/karate.bcsr -output karate.bin -dim 128 -alpha 0.85 -threads 4 -nsamples 3\n```\nto run the default version (that corresponds to PPR similarity) with 128 embedding dimension, PPR alpha 0.85, using 3 negative samples.\n\n",
      "technique": "Header extraction"
    }
  ]
}