{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1908.02265",
      "https://arxiv.org/abs/1908.02265"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "If you find this code is useful for your research, please cite our paper\n\n```\n@article{lu2019vilbert,\n  title={ViLBERT: Pretraining Task-Agnostic Visiolinguistic Representations for Vision-and-Language Tasks},\n  author={Lu, Jiasen and Batra, Dhruv and Parikh, Devi and Lee, Stefan},\n  journal={arXiv preprint arXiv:1908.02265},\n  year={2019}\n}\n```\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{lu2019vilbert,\n  title={ViLBERT: Pretraining Task-Agnostic Visiolinguistic Representations for Vision-and-Language Tasks},\n  author={Lu, Jiasen and Batra, Dhruv and Parikh, Devi and Lee, Stefan},\n  journal={arXiv preprint arXiv:1908.02265},\n  year={2019}\n}",
      "technique": "Regular expression"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Mehrab-Tanjim/enforce-reasoning",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "How to contribute to transformers?\nEveryone is welcome to contribute, and we value everybody's contribution. Code\nis thus not the only way to help the community. Answering questions, helping\nothers, reaching out and improving the documentations are immensely valuable to\nthe community.\nIt also helps us if you spread the word: reference the library from blog posts\non the awesome projects it made possible, shout out on Twitter every time it has\nhelped you, or simply star the repo to say \"thank you\".\nYou can contribute in so many ways!\nThere are 4 ways you can contribute to transformers:\n* Fixing outstanding issues with the existing code;\n* Implementing new models;\n* Contributing to the examples or to the documentation;\n* Submitting issues related to bugs or desired new features.\nAll are equally valuable to the community.\nSubmitting a new issue or feature request\nDo your best to follow these guidelines when submitting an issue or a feature\nrequest. It will make it easier for us to come back to you quickly and with good\nfeedback.\nDid you find a bug?\nThe transformers are robust and reliable thanks to the users who notify us of\nthe problems they encounter. So thank you for reporting an issue.\nFirst, we would really appreciate it if you could make sure the bug was not\nalready reported (use the search bar on Github under Issues).\nDid not find it? :( So we can act quickly on it, please follow these steps:\n\nInclude your OS type and version, the versions of Python, PyTorch and\n  Tensorflow when applicable;\nA short, self-contained, code snippet that allows us to reproduce the bug in\n  less than 30s;\nProvide the full traceback if an exception is raised.\n\nTo get the OS and software versions, execute the following code and copy-paste\nthe output:\nimport platform; print(\"Platform\", platform.platform())\nimport sys; print(\"Python\", sys.version)\nimport torch; print(\"PyTorch\", torch.__version__)\nimport tensorflow; print(\"Tensorflow\", tensorflow.__version__)\nDo you want to implement a new model?\nAwesome! Please provide the following information:\n\nShort description of the model and link to the paper;\nLink to the implementation if it is open-source;\nLink to the model weights if they are available.\n\nIf you are willing to contribute the model yourself, let us know so we can best\nguide you.\nDo you want a new feature (that is not a model)?\nA world-class feature request addresses the following points:\n\nMotivation first:\nIs it related to a problem/frustration with the library? If so, please explain\n    why. Providing a code snippet that demonstrates the problem is best.\nIs it related to something you would need for a project? We'd love to hear\n    about it!\nIs it something you worked on and think could benefit the community?\n    Awesome! Tell us what problem it solved for you.\nWrite a full paragraph describing the feature;\nProvide a code snippet that demonstrates its future use;\nIn case this is related to a paper, please attach a link;\nAttach any additional information (drawings, screenshots, etc.) you think may help.\n\nIf your issue is well written we're already 80% of the way there by the time you\npost it.\nStart contributing! (Pull Requests)\nBefore writing code, we strongly advise you to search through the exising PRs or\nissues to make sure that nobody is already working on the same thing. If you are\nunsure, it is always a good idea to open an issue to get some feedback.\nYou will need basic git proficiency to be able to contribute to\ntransformers. git is not the easiest tool to use but it has the greatest\nmanual. Type git --help in a shell and enjoy. If you prefer books, Pro\nGit is a very good reference.\nFollow these steps to start contributing:\n\nFork the repository by\n   clicking on the 'Fork' button on the repository's page. This creates a copy of the code\n   under your github user account.\nClone your fork to your local disk, and add the base repository as a remote:\n\nbash\n   $ git clone git@github.com:&lt;your Github handle&gt;/transformers.git\n   $ cd transformers\n   $ git remote add upstream git@github.com:huggingface/transformers.git\n\nCreate a new branch to hold your development changes:\n\nbash\n   $ git checkout -b a-descriptive-name-for-my-changes\ndo not work on the master branch.\n\nSet up a development environment by running the following command in a virtual environment:\n\nbash\n   $ pip install -r requirements-dev.txt\n\nDevelop the features on your branch. Add changed files using git add and\n   then git commit to record your changes locally:\n\nbash\n   $ git add modified_file.py\n   $ git commit\nPlease write good commit\n   messages. It\n   is a good idea to sync your copy of the code with the original repository\n   regularly. This way you can quickly account for changes:\nbash\n   $ git fetch upstream\n   $ git rebase upstream/master\nPush the changes to your account using:\nbash\n   $ git push -u origin a-descriptive-name-for-my-changes\n\n\nOnce you are satisfied (and the checklist below is happy too), go to the\n   webpage of your fork on Github. Click on 'Pull request' to send your changes\n   to the project maintainers for review.\n\n\nIt's ok if maintainers ask you for changes. It happens to core contributors\n   too! So everyone can see the changes in the Pull request, work in your local\n   branch and push the changes to your fork. They will automatically appear in\n   the pull request.\n\n\nChecklist\n\nThe title of your pull request should be a summary of its contribution;\nIf your pull request adresses an issue, please mention the issue number in\n   the pull request description to make sure they are linked (and people\n   consulting the issue know you are working on it);\nTo indicate a work in progress please prefix the title with [WIP]. These\n   are useful to avoid duplicated work, and to differentiate it from PRs ready\n   to be merged;\nMake sure pre-existing tests still pass;\nAdd high-coverage tests. No quality test, no merge;\nAll public methods must have informative doctrings;\n\nStyle guide\nFor documentation strings, transformers follows the google\nstyle.\nThis guide was heavily inspired by the awesome scikit-learn guide to contributing",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-03-16T05:05:23Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-04-01T16:56:07Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8156024153123562,
        0.8416503884449552,
        0.860059181823877
      ],
      "excerpt": "Code and pre-trained models for ViLBERT: Pretraining Task-Agnostic VisiolinguisticRepresentations for Vision-and-Language Tasks. \n<span style=\"color:blue\"> *Note: This codebase is still in beta release to replicate the paper's preformance. * </span> \n| Model | Objective | Link | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8902275249940715
      ],
      "excerpt": "2: Update featyres_h5path1 and val_annotations_jsonpath in  vlbert_task.yml to load the Flickr30k testset image feature and jsonfile (defualt is training feature).  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8902275249940715
      ],
      "excerpt": "2: Update featyres_h5path1 and val_annotations_jsonpath in  vlbert_task.yml to load the Flickr30k testset image feature and jsonfile (defualt is training feature).  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9416518459095269
      ],
      "excerpt": "2: We use the Pre-computed detections/masks from MAttNet for fully-automatic comprehension task, Check the MAttNet repository for more details.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8163004491204304
      ],
      "excerpt": "Once you extracted all the image features, to train a 6-layer ViLBERT model on conceptual caption: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.913324085930547
      ],
      "excerpt": "To fintune a 6-layer ViLBERT model for VQA with 8 GPU. --tasks 0 means VQA tasks. Check vlbert_tasks.yml for more settings for VQA tasks.   \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Mehrab-Tanjim/enforce-reasoning/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1,
      "date": "Sun, 12 Dec 2021 01:11:30 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Mehrab-Tanjim/enforce-reasoning/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Mehrab-Tanjim/enforce-reasoning",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Mehrab-Tanjim/enforce-reasoning/master/gpt2/docker/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/Mehrab-Tanjim/enforce-reasoning/tree/master/gpt2/docs"
    ],
    "technique": "File Exploration"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Mehrab-Tanjim/enforce-reasoning/master/gpt2/notebooks/Comparing-TF-and-PT-models-SQuAD.ipynb",
      "https://raw.githubusercontent.com/Mehrab-Tanjim/enforce-reasoning/master/gpt2/notebooks/Comparing-TF-and-PT-models.ipynb",
      "https://raw.githubusercontent.com/Mehrab-Tanjim/enforce-reasoning/master/gpt2/notebooks/Comparing-PT-and-TF-models.ipynb",
      "https://raw.githubusercontent.com/Mehrab-Tanjim/enforce-reasoning/master/gpt2/notebooks/Comparing-TF-and-PT-models-MLM-NSP.ipynb",
      "https://raw.githubusercontent.com/Mehrab-Tanjim/enforce-reasoning/master/tools/refer/pyReferDemo.ipynb",
      "https://raw.githubusercontent.com/Mehrab-Tanjim/enforce-reasoning/master/tools/refer/pyEvalDemo.ipynb",
      "https://raw.githubusercontent.com/Mehrab-Tanjim/enforce-reasoning/master/tools/DownloadConcptualCaption/downloaded_report.ipynb"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Mehrab-Tanjim/enforce-reasoning/master/train_vcr.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Check `README.md` under `data` for more details.  Check  `vlbert_tasks.yml` for more details. \n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Create a fresh conda environment, and install all dependencies.\n\n```text\nconda create -n vilbert python=3.6\nconda activate vilbert\ngit clone https://github.com/jiasenlu/vilbert_beta\ncd vilbert_beta\npip install -r requirements.txt\n```\n\n2. Install pytorch\n```\nconda install pytorch torchvision cudatoolkit=10.0 -c pytorch\n```\n\n3. Install apx, follows https://github.com/NVIDIA/apex\n\n4. compile tools\n\n```\ncd tools/refer\nmake\n```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8649798973105185
      ],
      "excerpt": "2: To test on held out validation split, use the following command:  \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8502997220680211
      ],
      "excerpt": "1: Download the pretrained model with objective Conceptual Caption and put it under save \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.922646472797422,
        0.8274010807557309
      ],
      "excerpt": "python eval_retrieval.py --bert_model bert-base-uncased --from_pretrained save/bert_base_6_layer_6_connect/pytorch_model_9.bin --config_file config/bert_base_6layer_6conect.json --task 3 --split test --batch_size 1 --zero_shot \n1: Download the pretrained model with objective Image Retrieval and put it under save \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9363623258345442,
        0.8502997220680211
      ],
      "excerpt": "python eval_retrieval.py --bert_model bert-base-uncased --from_pretrained save/RetrievalFlickr30k_bert_base_6layer_6conect-pretrained/pytorch_model_19.bin --config_file config/bert_base_6layer_6conect.json --task 3 --split test --batch_size 1 \n1: Download the pretrained model with objective VQA and put it under save \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9049066590064228,
        0.8502997220680211
      ],
      "excerpt": "python eval_tasks.py --bert_model bert-base-uncased --from_pretrained save/VQA_bert_base_6layer_6conect-pretrained/pytorch_model_19.bin --config_file config/bert_base_6layer_6conect.json --task 0 --split minval \n1: Download the pretrained model with objective VCR and put it under save \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9042117822751213
      ],
      "excerpt": "python eval_tasks.py --bert_model bert-base-uncased --from_pretrained save/VCR_Q-A-VCR_QA-R_bert_base_6layer_6conect-pretrained/pytorch_model_19.bin --config_file config/bert_base_6layer_6conect.json --task 1 --split val \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9042117822751213,
        0.8502997220680211
      ],
      "excerpt": "python eval_tasks.py --bert_model bert-base-uncased --from_pretrained save/VCR_Q-A-VCR_QA-R_bert_base_6layer_6conect-pretrained/pytorch_model_19.bin --config_file config/bert_base_6layer_6conect.json --task 2 --split val \n1: Download the pretrained model with objective RefCOCO+ and put it under save \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9049066590064228
      ],
      "excerpt": "python eval_tasks.py --bert_model bert-base-uncased --from_pretrained save/refcoco+_bert_base_6layer_6conect-pretrained/pytorch_model_19.bin --config_file config/bert_base_6layer_6conect.json --task 4 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8416776857140243
      ],
      "excerpt": "ig_file config/bert_base_6layer_6conect.json --learning_rate 1e-4 --train_batch_size 512 --save_name pretrained \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8604759490408824
      ],
      "excerpt": "python -m torch.distributed.launch --nproc_per_node=8 --nnodes=1 --node_rank=0 train_tasks.py --bert_model bert-base-uncased --from_pretrained save/bert_base_6_layer_6_connect_freeze_0/pytorch_model_8.bin  --config_file config/bert_base_6layer_6conect.json  --learning_rate 4e-5 --num_workers 16 --tasks 0 --save_name pretrained \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8604759490408824
      ],
      "excerpt": "python -m torch.distributed.launch --nproc_per_node=8 --nnodes=1 --node_rank=0 train_tasks.py --bert_model bert-base-uncased --from_pretrained save/bert_base_6_layer_6_connect_freeze_0/pytorch_model_8.bin  --config_file config/bert_base_6layer_6conect.json  --learning_rate 2e-5 --num_workers 16 --tasks 1-2 --save_name pretrained \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8499900699336334
      ],
      "excerpt": "python -m torch.distributed.launch --nproc_per_node=8 --nnodes=1 --node_rank=0 train_tasks.py --bert_model bert-base-uncased --from_pretrained save/bert_base_6_layer_6_connect_freeze_0/pytorch_model_8.bin  --config_file config/bert_base_6layer_6conect.json  --learning_rate 4e-5 --num_workers 9 --tasks 3 --save_name pretrained \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8604759490408824
      ],
      "excerpt": "python -m torch.distributed.launch --nproc_per_node=8 --nnodes=1 --node_rank=0 train_tasks.py --bert_model bert-base-uncased --from_pretrained save/bert_base_6_layer_6_connect_freeze_0/pytorch_model_8.bin  --config_file config/bert_base_6layer_6conect.json  --learning_rate 4e-5 --num_workers 16 --tasks 4 --save_name pretrained \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9216236187889036
      ],
      "excerpt": "<img src=\"fig/vilbert.png\" width=\"400\" > \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Mehrab-Tanjim/enforce-reasoning/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jupyter Notebook",
      "CSS",
      "Shell",
      "Makefile",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Igor Brigadir\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "ViLBERT <img src=\"fig/vilbert_trim.png\" width=\"45\">",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "enforce-reasoning",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Mehrab-Tanjim",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Mehrab-Tanjim/enforce-reasoning/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Sun, 12 Dec 2021 01:11:30 GMT"
    },
    "technique": "GitHub API"
  }
}