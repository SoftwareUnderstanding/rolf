{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[image1]: ./imgs/Capstone_Ros_Graph.png\n[image2]: ./imgs/Waypoint_Updater_Node.png\n[image3]: ./imgs/DBW_Node.png\n[image4]: ./imgs/Traffic_Light_Detection_Node.png\n[image5]: ./imgs/move.png\n[image6]: ./imgs/Decelerate.png\n[image7]: ./imgs/stop.png\n[image8]: ./imgs/Accelerate.png\n\n",
      "technique": "Header extraction"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/KarimDahawy/CapStone-Project",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-09-07T15:18:32Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-09-07T18:05:38Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "--------------------------------------------------------------\nIn order to design a fully autonomous Vehicle the following techniques have been used:\n    \n    1. Waypoint Following techniques\n    2. Control\n    3. Traffic Light Detection and Classification\n    \nThe Waypoint Following technique would take information from the traffic light detection and classification with the current waypoints in order to update the target velocities for each waypoint based on this information.\n\nFor Control part, I have designed a drive-by-wire (dbw) node that could take the target linear and angular velocities and publish commands for the throttle, brake, and steering of the car. \n\nFor Traffic Light Detection and classification, I have designed a classification node that would take the current waypoints of the car and an image taken from the car and determine if the closest traffic light was red or green.\n \n![alt text][image1]\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "--------------------------------------------------------------\nThis is the project repo for the final project of the Udacity Self-Driving Car Nanodegree-Capstone Project: Programming a Real Self-Driving Car. \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.9133421831638991
      ],
      "excerpt": "This project is done by: Karim Dahawy (karim.dahawy@valeo.com) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9862423899403834
      ],
      "excerpt": "This is considered as a ROS Node that listens or subscribes to (/base_waypoint), (/current_pose), and (/traffic_waypoint) topics in order to generate or publishes (/final_waypoint). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.969711526997891,
        0.8137600048376332,
        0.9598787605899751,
        0.8067117394807718,
        0.9139840399083128
      ],
      "excerpt": "This technique is excuted based on the following: \nGenerating the final waypoints to make the vehicle moves on straight lines. \nUse the Controller part in order to control throttle, steering and brake actions of the Autonomous Vehicle. \nIntegrating the traffic light detection and classification, so this node subscribes to (/traffic_waypoint) topic. \nThe (/final_waypoint) is updated based on the traffic light color: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9924183728671504
      ],
      "excerpt": "This is considered as a ROS Node that subscribes to (/twist_cmd), (/current_velocity), and (/dbw_enabled) topics in order to publishes (/vehicle/steering_cmd), (/vehicle/throttle_cmd), and (/vehicle/brake_cmd). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9266201232945279,
        0.9936881194036131,
        0.9902687318673195
      ],
      "excerpt": "This Part is responsible to control the vehicles (throttle, steering, and brake) action commands. \nA PID controller is built with parameters (KP = 0.3, KI = 0.1, KD = 0). This part is called Drive by Wire (dbw) which can be defined as having electric control signal for the main control actions of the vehicle. The brake value is functional of the vehicle mass and the wheel radius calculating the vehcile Torque. \nThis is considered as a ROS Node that subscribes to (/base_waypoints), (/image_color), and (/current_pose) in order to publishes (/traffic_waypoints). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.981177598621722
      ],
      "excerpt": "The Purpose of this part is to build a deep learning model to detect the position of the traffic light in the image sent by Carla Simulator, then classify its color if it is RED or GREEN.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.955625418785063
      ],
      "excerpt": "The vehicle is oving Normally on the Simulator: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9343772096790598
      ],
      "excerpt": "The vehicle is able to decelerate if the traffic light is RED: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9104188893574221
      ],
      "excerpt": "The vehicle stops while the traffic light is RED:  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9343772096790598
      ],
      "excerpt": "The vehicle is able to accelerate if the traffic light is GREEN: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9665278466631726
      ],
      "excerpt": "To set up port forwarding, please refer to the \"uWebSocketIO Starter Guide\" found in the classroom (see Extended Kalman Filter Project lesson). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8929369226942205,
        0.8196270908508396
      ],
      "excerpt": "Outside of requirements.txt, here is information on other driver/library versions used in the simulator and Carla: \nSpecific to these libraries, the simulator grader and Carla use the following: \n",
      "technique": "Supervised classification"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/KarimDahawy/CapStone-Project/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 06 Dec 2021 19:00:15 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/KarimDahawy/CapStone-Project/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "KarimDahawy/CapStone-Project",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/KarimDahawy/CapStone-Project/master/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/KarimDahawy/CapStone-Project/master/ros/src/styx/unity_simulator_launcher.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "[Install Docker](https://docs.docker.com/engine/installation/)\n\nBuild the docker container\n```bash\ndocker build . -t capstone\n```\n\nRun the docker file\n```bash\ndocker run -p 4567:4567 -v $PWD:/capstone -v /tmp/log:/root/.ros/ --rm -it capstone\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "* Be sure that your workstation is running Ubuntu 16.04 Xenial Xerus or Ubuntu 14.04 Trusty Tahir. [Ubuntu downloads can be found here](https://www.ubuntu.com/download/desktop).\n* If using a Virtual Machine to install Ubuntu, use the following configuration as minimum:\n  * 2 CPU\n  * 2 GB system memory\n  * 25 GB of free hard drive space\n\n  The Udacity provided virtual machine has ROS and Dataspeed DBW already installed, so you can skip the next two steps if you are using this.\n\n* Follow these instructions to install ROS\n  * [ROS Kinetic](http://wiki.ros.org/kinetic/Installation/Ubuntu) if you have Ubuntu 16.04.\n  * [ROS Indigo](http://wiki.ros.org/indigo/Installation/Ubuntu) if you have Ubuntu 14.04.\n* [Dataspeed DBW](https://bitbucket.org/DataspeedInc/dbw_mkz_ros)\n  * Use this option to install the SDK on a workstation that already has ROS installed: [One Line SDK Install (binary)](https://bitbucket.org/DataspeedInc/dbw_mkz_ros/src/81e63fcc335d7b64139d7482017d6a97b405e250/ROS_SETUP.md?fileviewer=file-view-default)\n* Download the [Udacity Simulator](https://github.com/udacity/CarND-Capstone/releases).\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Please use **one** of the two installation options, either native **or** docker installation.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.965343433759893
      ],
      "excerpt": "cd CarND-Capstone/ros \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8048372261297083
      ],
      "excerpt": "| OpenCV | 3.2.0-dev | 2.4.8 | \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8359299706379749
      ],
      "excerpt": "![alt text][image2] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8359299706379749
      ],
      "excerpt": "![alt text][image3] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8359299706379749
      ],
      "excerpt": "![alt text][image4] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8359299706379749
      ],
      "excerpt": "![alt text][image5] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8359299706379749
      ],
      "excerpt": "![alt text][image6] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8359299706379749
      ],
      "excerpt": "![alt text][image7] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8359299706379749
      ],
      "excerpt": "![alt text][image8] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8181233066980516
      ],
      "excerpt": "Unzip the file \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8082022887640018
      ],
      "excerpt": "unzip traffic_light_bag_file.zip \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/KarimDahawy/CapStone-Project/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "CMake",
      "Python",
      "C++",
      "Dockerfile",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2017-2018 Udacity, Inc.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Capstone Project",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "CapStone-Project",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "KarimDahawy",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/KarimDahawy/CapStone-Project/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 06 Dec 2021 19:00:15 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Clone the project repository\n```bash\ngit clone https://github.com/udacity/CarND-Capstone.git\n```\n\n2. Install python dependencies\n```bash\ncd CarND-Capstone\npip install -r requirements.txt\n```\n3. Make and run styx\n```bash\ncd ros\ncatkin_make\nsource devel/setup.sh\nroslaunch launch/styx.launch\n```\n4. Run the simulator\n\n",
      "technique": "Header extraction"
    }
  ]
}