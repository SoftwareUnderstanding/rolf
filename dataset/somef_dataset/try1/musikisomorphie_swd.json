{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This code borrows from WGAN-GP (https://github.com/igul222/improved_wgan_training) and PGGAN (https://github.com/tkarras/progressive_growing_of_gans). We would like to thank them for the contribution.\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* If you use this code for your research, please cite our papers.\n```\n@inproceedings{jqwu&zwhuang2019swgm,\n  title={Sliced Wasserstein Generative Models},  \n  author={Jiqing Wu, Zhiwu Huang, Dinesh Acharya, Wen Li, Janine Thoma, Danda Pani Paudel, Luc Van Gool},\n  booktitle={Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition},\n  year={2019}  \n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{jqwu&amp;zwhuang2019swgm,\n  title={Sliced Wasserstein Generative Models},  \n  author={Jiqing Wu, Zhiwu Huang, Dinesh Acharya, Wen Li, Janine Thoma, Danda Pani Paudel, Luc Van Gool},\n  booktitle={Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition},\n  year={2019}  \n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9843832974096692
      ],
      "excerpt": "Towards High Resolution Video Generation with Progressive Growing of Sliced Wasserstein GANs (Arxiv) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/musikisomorphie/swd",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-04-01T07:03:18Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-04T13:18:19Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8562692450647588
      ],
      "excerpt": "Alternatively, you could also use the binary files directly, which is compiled with cuda8.0. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9169949528912503
      ],
      "excerpt": "We trained our model with 1 TitanXp GPU for roughly 7 days, since our code is built upon progressive growing GAN (https://arxiv.org/pdf/1710.10196.pdf), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.85893604978743
      ],
      "excerpt": "Here are some sample frames generated by PG-SWGAN-3D: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "unsupervised video and image generation",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/musikisomorphie/swd/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 5,
      "date": "Sat, 11 Dec 2021 04:09:50 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/musikisomorphie/swd/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "musikisomorphie/swd",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9956981474312724
      ],
      "excerpt": "Following the instructions in install, you could compile them by yourself. If you install tensorflow by pip, one potential error can be some source files of tensorflow set the wrong relative path of cuda.h, you just need to manually change them according to your cuda path. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "cd standard_training/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "cd standard_training/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906248903846466
      ],
      "excerpt": "cd progressive_training/ \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8453631403516504
      ],
      "excerpt": "More video comparison, see the following youtube links: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8622264864959698
      ],
      "excerpt": "Specify DATA_DIR, LOG_DIR and DIR in standard_training/swae_64x64.py, then run \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091,
        0.8622264864959698
      ],
      "excerpt": "python swae_64x64.py \nSpecify DATA_DIR, LOG_DIR and DIR in standard_training/swgan_64x64.py, then run \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9246227682586091,
        0.882252966342506
      ],
      "excerpt": "python swgan_64x64.py \nSpecify data_dir, result_dir in progressive_training/config.py, then run \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9503189345333785
      ],
      "excerpt": "python train.py    \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/musikisomorphie/swd/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "C++"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Sliced Wasserstein Generative Models<br><i>-- and the application on unsupervised video generation</i>",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "swd",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "musikisomorphie",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/musikisomorphie/swd/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "This repo has been successfully tested on **tensorflow 1.10, cuda 9.0**. \n\n* Please check the [requirements.txt](https://github.com/musikisomorphie/swd/blob/master/requirements.txt) for more details.\n\n* For the training data such as Cifar10, CelebA, CelebA-HQ, LSUN etc download them on the official website accordingly.\n\n* [TrailerFaces](https://data.vision.ee.ethz.ch/zzhiwu/trailerFaces-tfrecords.zip) (**Note that we tentatively release the tfrecord data to avoid the copyright issue.**)\n  * The dataset contains approximately 200,000 individual clips of various facial expressions, where the faces are cropped with 256x256 resolution from about 6,000 high resolution movie trailers on YouTube. We convert them to tfrecord with resolutions range from 4x4 to 256x256. More about the data processing please see [Towards high resolution video generation (Arxiv)](https://arxiv.org/pdf/1810.02419.pdf). \n  \n\nTrailerFaces sample:\n![Trailerfaces sample](https://github.com/musikisomorphie/swd/blob/master/progressive_training/trailer_faces_samples.png)\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 48,
      "date": "Sat, 11 Dec 2021 04:09:50 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "tensorflow",
      "generative-model",
      "video-generation",
      "image-generation"
    ],
    "technique": "GitHub API"
  }
}