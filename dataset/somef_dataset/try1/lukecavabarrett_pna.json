{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The authors would like to thank Saro Passaro for running some of the tests presented in this repository and \nGiorgos Bouritsas, Fabrizio Frasca, Leonardo Cotta, Zhanghao Wu and Zhanqiu Zhang for pointing out some issues with the code.\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2004.05718"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "```\n@inproceedings{corso2020pna,\n title = {Principal Neighbourhood Aggregation for Graph Nets},\n author = {Corso, Gabriele and Cavalleri, Luca and Beaini, Dominique and Li\\`{o}, Pietro and Veli\\v{c}kovi\\'{c}, Petar},\n booktitle = {Advances in Neural Information Processing Systems},\n year = {2020}\n}\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{corso2020pna,\n title = {Principal Neighbourhood Aggregation for Graph Nets},\n author = {Corso, Gabriele and Cavalleri, Luca and Beaini, Dominique and Li\\`{o}, Pietro and Veli\\v{c}kovi\\'{c}, Petar},\n booktitle = {Advances in Neural Information Processing Systems},\n year = {2020}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.916845004776823
      ],
      "excerpt": "Implementation of Principal Neighbourhood Aggregation for Graph Nets arxiv.org/abs/2004.05718 in PyTorch, DGL and PyTorch Geometric. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lukecavabarrett/pna",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-04-01T22:11:12Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-08T09:46:43Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8977387883423397,
        0.9898587714221788,
        0.8105087110549728,
        0.8657342817956396,
        0.9599273990045118,
        0.923083184470862,
        0.9836147449995669,
        0.8867774197459999,
        0.8931120735149147
      ],
      "excerpt": "Implementation of Principal Neighbourhood Aggregation for Graph Nets arxiv.org/abs/2004.05718 in PyTorch, DGL and PyTorch Geometric. \nWe provide the implementation of the Principal Neighbourhood Aggregation (PNA) in PyTorch, DGL and PyTorch Geometric frameworks, along with scripts to generate and run the multitask benchmarks, scripts for running real-world benchmarks, a flexible PyTorch GNN framework and implementations of the other models used for comparison. The repository is organised as follows: \nmodels contains: \npytorch contains the various GNN models implemented in PyTorch: \nthe implementation of the aggregators, the scalers and the PNA layer (pna) \nthe flexible GNN framework that can be used with any type of graph convolutions (gnn_framework.py) \nimplementations of the other GNN models used for comparison in the paper, namely GCN, GAT, GIN and MPNN \ndgl contains the PNA model implemented via the DGL library: aggregators, scalers, and layer. \npytorch_geometric contains the PNA model implemented via the PyTorch Geometric library: aggregators, scalers, and layer. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Implementation of Principal Neighbourhood Aggregation for Graph Neural Networks in PyTorch, DGL and PyTorch Geometric",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lukecavabarrett/pna/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 37,
      "date": "Thu, 09 Dec 2021 07:24:44 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lukecavabarrett/pna/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "lukecavabarrett/pna",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/lukecavabarrett/pna/tree/master/realworld_benchmark/docs"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/lukecavabarrett/pna/master/realworld_benchmark/data/download_datasets.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8101618119556218
      ],
      "excerpt": "pytorch contains the various GNN models implemented in PyTorch: \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/lukecavabarrett/pna/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Gabriele Corso, Luca Cavalleri\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Principal Neighbourhood Aggregation",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pna",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "lukecavabarrett",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/lukecavabarrett/pna/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 210,
      "date": "Thu, 09 Dec 2021 07:24:44 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "graph-machine-learning",
      "graph-neural-networks",
      "pytorch",
      "dgl",
      "pytorch-geometric"
    ],
    "technique": "GitHub API"
  }
}