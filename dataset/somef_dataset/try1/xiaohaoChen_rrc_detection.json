{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1704.05776",
      "https://arxiv.org/abs/1512.02325"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Please cite RRC in your publications if it helps your research:\n\n@inproceedings{Ren17CVPR,    \n  author = {Jimmy Ren and Xiaohao Chen and Jianbo Liu and Wenxiu Sun and Jiahao Pang and Qiong Yan and Yu-Wing Tai and Li Xu},       \n  title = {Accurate Single Stage Detector Using Recurrent Rolling Convolution},      \n  booktitle = {CVPR},         \n  year = {2017}     \n}\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{Ren17CVPR,  \n  author = {Jimmy Ren and Xiaohao Chen and Jianbo Liu and Wenxiu Sun and Jiahao Pang and Qiong Yan and Yu-Wing Tai and Li Xu},     \n  title = {Accurate Single Stage Detector Using Recurrent Rolling Convolution},    \n  booktitle = {CVPR},       \n  year = {2017}   \n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9999507637426613
      ],
      "excerpt": "By Jimmy Ren, Xiaohao Chen, Jianbo Liu, Wenxiu Sun, Jiahao Pang, Qiong Yan, Yu-Wing Tai, Li Xu. \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/xiaohaoChen/rrc_detection",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing\nIssues\nSpecific Caffe design and development issues, bugs, and feature requests are maintained by GitHub Issues.\nPlease do not post usage, installation, or modeling questions, or other requests for help to Issues.\nUse the caffe-users list instead. This helps developers maintain a clear, uncluttered, and efficient view of the state of Caffe.\nWhen reporting a bug, it's most helpful to provide the following information, where applicable:\n\nWhat steps reproduce the bug?\nCan you reproduce the bug using the latest master, compiled with the DEBUG make option?\nWhat hardware and operating system/distribution are you running?\nIf the bug is a crash, provide the backtrace (usually printed by Caffe; always obtainable with gdb).\n\nTry to give your issue a title that is succinct and specific. The devs will rename issues as needed to keep track of them.\nPull Requests\nCaffe welcomes all contributions.\nSee the contributing guide for details.\nBriefly: read commit by commit, a PR should tell a clean, compelling story of one improvement to Caffe. In particular:\n\nA PR should do one clear thing that obviously improves Caffe, and nothing more. Making many smaller PRs is better than making one large PR; review effort is superlinear in the amount of code involved.\nSimilarly, each commit should be a small, atomic change representing one step in development. PRs should be made of many commits where appropriate.\nPlease do rewrite PR history to be clean rather than chronological. Within-PR bugfixes, style cleanups, reversions, etc. should be squashed and should not appear in merged PR history.\nAnything nonobvious from the code should be explained in comments, commit messages, or the PR description, as appropriate.",
    "technique": "File Exploration"
  },
  "contributors": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributors\nCaffe is developed by a core set of BVLC members and the open-source community.\nWe thank all of our contributors!\nFor the detailed history of contributions of a given file, try\ngit blame file\n\nto see line-by-line credits and\ngit log --follow file\n\nto see the change log even across renames and rewrites.\nPlease refer to the acknowledgements on the Caffe site for further details.\nCopyright is held by the original contributor according to the versioning history; see LICENSE.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-04-05T08:28:03Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-03T03:05:44Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "High localization accuracy is crucial in many real-world applications. We propose a novel\nsingle stage end-to-end object detection network (RRC) to produce high accuracy detection results. You can use the code to train/evaluate a network for object detection task. For more details, please refer to our paper (https://arxiv.org/abs/1704.05776).\n\n| method | KITTI test *mAP* car (moderate)|\n| :-------: | :-----: |\n| [Mono3D](http://3dimage.ee.tsinghua.edu.cn/cxz/mono3d)| 88.66% |\n| [SDP+RPN](http://www.cv-foundation.org/openaccess/content_cvpr_2016/papers/Yang_Exploit_All_the_CVPR_2016_paper.pdf)| 88.85% |\n| [MS-CNN](https://github.com/zhaoweicai/mscnn) | 89.02% |\n| [Sub-CNN](https://arxiv.org/pdf/1604.04693.pdf) | 89.04% |\n| RRC (single model) | **89.85%** |  \n\n[KITTI ranking](http://www.jimmyren.com/papers/rrc_kitti.pdf)\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8588222804783706
      ],
      "excerpt": "   #: After 60k iterations, we can get the model as we said in the paper (mAP 89.*% in KITTI). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Accurate Single Stage Detector Using Recurrent Rolling Convolution",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/xiaohaoChen/rrc_detection/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 135,
      "date": "Mon, 13 Dec 2021 05:39:42 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/xiaohaoChen/rrc_detection/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "xiaohaoChen/rrc_detection",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/xiaohaoChen/rrc_detection/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/xiaohaoChen/rrc_detection/master/scripts/deploy_docs.sh",
      "https://raw.githubusercontent.com/xiaohaoChen/rrc_detection/master/scripts/build_docs.sh",
      "https://raw.githubusercontent.com/xiaohaoChen/rrc_detection/master/scripts/download_model_from_gist.sh",
      "https://raw.githubusercontent.com/xiaohaoChen/rrc_detection/master/scripts/upload_model_to_gist.sh",
      "https://raw.githubusercontent.com/xiaohaoChen/rrc_detection/master/scripts/gather_examples.sh",
      "https://raw.githubusercontent.com/xiaohaoChen/rrc_detection/master/scripts/travis/travis_setup_makefile_config.sh",
      "https://raw.githubusercontent.com/xiaohaoChen/rrc_detection/master/scripts/travis/travis_build_and_test.sh",
      "https://raw.githubusercontent.com/xiaohaoChen/rrc_detection/master/scripts/travis/travis_install.sh",
      "https://raw.githubusercontent.com/xiaohaoChen/rrc_detection/master/data/KITTI-val/create_data.sh",
      "https://raw.githubusercontent.com/xiaohaoChen/rrc_detection/master/data/KITTI-val/create_list.sh",
      "https://raw.githubusercontent.com/xiaohaoChen/rrc_detection/master/data/KITTI-val/extract_car_label.sh",
      "https://raw.githubusercontent.com/xiaohaoChen/rrc_detection/master/data/KITTI-car/create_data.sh",
      "https://raw.githubusercontent.com/xiaohaoChen/rrc_detection/master/data/KITTI-car/create_list.sh",
      "https://raw.githubusercontent.com/xiaohaoChen/rrc_detection/master/data/KITTI-car/extract_car_label.sh",
      "https://raw.githubusercontent.com/xiaohaoChen/rrc_detection/master/tools/extra/parse_log.sh",
      "https://raw.githubusercontent.com/xiaohaoChen/rrc_detection/master/tools/extra/launch_resize_and_crop_images.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Download [fully convolutional reduced (atrous) VGGNet](https://gist.github.com/weiliu89/2ed6e13bfd5b57cf81d6).\n   By default, we assume the model is stored in `$CAFFE_ROOT/models/VGGNet/`.\n\n2. Download the KITTI dataset(http://www.cvlibs.net/datasets/kitti/eval_object.php).\n   By default, we assume the data is stored in `$HOME/data/KITTI/`       \n \u00a0 Unzip the training images, testing images and the labels in `$HOME/data/KITTI/`.\n\n3. Create the LMDB file.\n   For training .\n   As only the images contain cars are adopted as training set for car detection,  the labels for cars should be extracted.      \n   We have provided the list of images contain cars in `$CAFFE_ROOT/data/KITTI-car/`.\n   ```Shell\n   #: extract the labels for cars\n   cd $CAFFE_ROOT/data/KITTI-car/\n   ./extract_car_label.sh\n   ```\n\n   Before create the LMDB files. The labels should be converted to VOC type. We provide some matlab scripts.     \n   The scripts are in `$CAFFE_ROOT/data/convert_labels/`. Just modify `converlabels.m`.\n   ```Shell\n   line 4: root_dir = '/your/path/to/KITTI/';\n   ```\n   VOC type labels will be generated in `$KITTI_ROOT/training/labels_2car/xml/`.\n   ```Shell\n   cd $CAFFE_ROOT/data/KITTI-car/\n   #: Create the trainval.txt, test.txt, and test_name_size.txt in data/KITTI-car/\n   ./create_list.sh\n   #: You can modify the parameters in create_data.sh if needed.\n   #: It will create lmdb files for trainval and test with encoded original image:\n   #:   - $HOME/data/KITTI/lmdb/KITTI-car_training_lmdb/\n   #:   - $HOME/data/KITTI/lmdb/KITTI-car_testing_lmdb/\n   #: and make soft links at data/KITTI-car/lmdb\n    ./data/KITTI-car/create_data.sh\n   ```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "1. Get the code. We will call the directory that you cloned Caffe into `$CAFFE_ROOT`\n   ```Shell\n   https://github.com/xiaohaoChen/rrc_detection.git\n   cd rrc_detection\n   ```\n2. Build the code. Please follow [Caffe instruction](http://caffe.berkeleyvision.org/installation.html) to install all necessary packages and build it.\n   Before build it, you should install CUDA and CUDNN(v5.0).    \n   CUDA 7.5 and CUDNN v5.0 were adapted in our computer.\n   ```Shell\n   #: Modify Makefile.config according to your Caffe installation.\n   cp Makefile.config.example Makefile.config\n   make -j8\n   #: Make sure to include $CAFFE_ROOT/python to your PYTHONPATH.\n   make py\n   make test -j8\n   make runtest -j8\n   ```\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8415536687385797
      ],
      "excerpt": "   If you only have one TITAN X card, you should modify the script rrc_kitti.py.   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8100034427877438,
        0.9906248903846466
      ],
      "excerpt": "   #: Make sure that the work directory is caffe_root \n   cd $caffe_root \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8196533672200333
      ],
      "excerpt": "   #: and job file, log file in: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9563277988753164,
        0.8726504100909153,
        0.9563277988753164
      ],
      "excerpt": "   python examples/car/rrc_kitti_car.py \n   #: Before run the testing script. You should modify [line 10: img_dir] to [your path to kitti testing images]. \n   python examples/car/rrc_test.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8141118458558133
      ],
      "excerpt": "   line 123: batch_size = 4   -&gt; batch_size = 1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8141118458558133
      ],
      "excerpt": "   line 123: batch_size = 4   -&gt; batch_size = 2 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8468458708429659
      ],
      "excerpt": "   Unzip the files in $caffe_root/models/VGGNet/KITTI/, and run the testing script rrc_test.py, you will get the same result as the single model result we showed in the  paper. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8045087517075961
      ],
      "excerpt": "   #: before run the script, you should modify the kitti_root at line 10. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9198202277843369
      ],
      "excerpt": "   python models/VGGNet/KITTI/RRC_2560x768_kitti_4r4b_max_size/rrc_test.py \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8693263054498666
      ],
      "excerpt": "   For testing a model you trained, you show modify the path in rrc_test.py. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/xiaohaoChen/rrc_detection/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "Python",
      "Cuda",
      "CMake",
      "Protocol Buffer",
      "MATLAB",
      "Makefile",
      "Shell",
      "M",
      "Objective-C"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/xiaohaoChen/rrc_detection/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Copyright (c) 2016 Wei Liu\\n\\n***********\\nCOPYRIGHT\\n\\nAll contributions by the University of California:\\nCopyright (c) 2014, 2015, The Regents of the University of California (Regents)\\nAll rights reserved.\\n\\nAll other contributions:\\nCopyright (c) 2014, 2015, the respective contributors\\nAll rights reserved.\\n\\nCaffe uses a shared copyright model: each contributor holds copyright over\\ntheir contributions to Caffe. The project versioning records all such\\ncontribution and copyright details. If a contributor wants to further mark\\ntheir specific copyright on a particular contribution, they should indicate\\ntheir copyright solely in the commit message of the change when it is\\ncommitted.\\n\\nLICENSE\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met: \\n\\n1. Redistributions of source code must retain the above copyright notice, this\\n   list of conditions and the following disclaimer. \\n2. Redistributions in binary form must reproduce the above copyright notice,\\n   this list of conditions and the following disclaimer in the documentation\\n   and/or other materials provided with the distribution. \\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\nCONTRIBUTION AGREEMENT\\n\\nBy contributing to the BVLC/caffe repository through pull-request, comment,\\nor otherwise, the contributor releases their content to the\\nlicense and copyright terms herein.\\n***********\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Accurate Single Stage Detector Using Recurrent Rolling Convolution",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "rrc_detection",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "xiaohaoChen",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/xiaohaoChen/rrc_detection/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 363,
      "date": "Mon, 13 Dec 2021 05:39:42 GMT"
    },
    "technique": "GitHub API"
  }
}