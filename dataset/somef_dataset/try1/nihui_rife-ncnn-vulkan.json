{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2011.06294\n\n## Usages\n\nInput two frame images, output one interpolated frame image.\n\n### Example Commands\n\n```shell\n./rife-ncnn-vulkan -0 0.jpg -1 1.jpg -o 01.jpg\n./rife-ncnn-vulkan -i input_frames/ -o output_frames/\n```\n\nExample below runs on CPU, Discrete GPU, and Integrated GPU all at the same time. Uses 2 threads for image decoding, 4 threads for one CPU worker, 4 threads for another CPU worker, 2 threads for discrete GPU, 1 thread for integrated GPU, and 4 threads for image encoding.\n```shell\n./rife-ncnn-vulkan -i input_frames/ -o output_frames/ -g -1,-1,0,1 -j 2:4,4,2,1:4\n```\n\n### Video Interpolation with FFmpeg\n\n```shell\nmkdir input_frames\nmkdir output_frames\n\n# find the source fps and format with ffprobe, for example 24fps, AAC\nffprobe input.mp4\n\n# extract audio\nffmpeg -i input.mp4 -vn -acodec copy audio.m4a\n\n# decode all frames\nffmpeg -i input.mp4 input_frames/frame_%08d.png\n\n# interpolate 2x frame count\n./rife-ncnn-vulkan -i input_frames -o output_frames\n\n# encode interpolated frames in 48fps with audio\nffmpeg -framerate 48 -i output_frames/%08d.png -i audio.m4a -c:a copy -crf 20 -c:v libx264 -pix_fmt yuv420p output.mp4\n```\n\n### Full Usages\n\n```console\nUsage: rife-ncnn-vulkan -0 infile -1 infile1 -o outfile [options]...\n       rife-ncnn-vulkan -i indir -o outdir [options]...\n\n  -h                   show this help\n  -v                   verbose output\n  -0 input0-path       input image0 path (jpg/png/webp"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.999567306443547
      ],
      "excerpt": "Huang, Zhewei and Zhang, Tianyuan and Heng, Wen and Shi, Boxin and Zhou, Shuchang \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.887385302378835
      ],
      "excerpt": "https://github.com/nothings/stb for decoding and encoding image on Linux / MacOS \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nihui/rife-ncnn-vulkan",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-11-22T13:27:33Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-08T12:38:23Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8746046504662388,
        0.9649088081217456
      ],
      "excerpt": "ncnn implementation of RIFE, Real-Time Intermediate Flow Estimation for Video Frame Interpolation. \nrife-ncnn-vulkan uses ncnn project as the universal neural network inference framework. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9227933118362635
      ],
      "excerpt": "This package includes all the binaries and models required. It is portable, so no CUDA or PyTorch runtime environment is needed :) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8009512079859675
      ],
      "excerpt": ": decode all frames \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.947564376955922
      ],
      "excerpt": "Clone this project with all submodules \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "RIFE, Real-Time Intermediate Flow Estimation for Video Frame Interpolation implemented with ncnn library",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nihui/rife-ncnn-vulkan/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 19,
      "date": "Thu, 09 Dec 2021 17:56:29 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "nihui/rife-ncnn-vulkan",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.9867305521848811,
        0.9451802190949735
      ],
      "excerpt": "Download Windows/Linux/MacOS Executable for Intel/AMD/Nvidia GPU \nThis package includes all the binaries and models required. It is portable, so no CUDA or PyTorch runtime environment is needed :) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8902627162932362,
        0.8902627162932362
      ],
      "excerpt": "mkdir input_frames \nmkdir output_frames \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8609482310924759
      ],
      "excerpt": "ffmpeg -framerate 48 -i output_frames/%08d.png -i audio.m4a -c:a copy -crf 20 -c:v libx264 -pix_fmt yuv420p output.mp4 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9055606193708864,
        0.9853777878890755
      ],
      "excerpt": "Download and setup the Vulkan SDK from https://vulkan.lunarg.com/ \nFor Linux distributions, you can either get the essential build requirements from package manager \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9627742574236658
      ],
      "excerpt": "dnf install vulkan-headers vulkan-loader-devel \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9912104959780188
      ],
      "excerpt": "apt-get install libvulkan-dev \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9893272198983933,
        0.9906248903846466,
        0.8270538936472002,
        0.8886675472745439,
        0.8308360239091499
      ],
      "excerpt": "git clone https://github.com/nihui/rife-ncnn-vulkan.git \ncd rife-ncnn-vulkan \ngit submodule update --init --recursive \nBuild with CMake \nYou can pass -DUSE_STATIC_MOLTENVK=ON option to avoid linking the vulkan loader library on MacOS \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9620406150340135,
        0.9944375700570437
      ],
      "excerpt": "mkdir build \ncd build \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8698200166289988
      ],
      "excerpt": "cmake --build . -j 4 \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8694260331581133
      ],
      "excerpt": "ffmpeg -framerate 48 -i output_frames/%08d.png -i audio.m4a -c:a copy -crf 20 -c:v libx264 -pix_fmt yuv420p output.mp4 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8188557397137404
      ],
      "excerpt": "rife-ncnn-vulkan.exe -m models/rife-anime -0 0.png -1 1.png -o out.png \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8188557397137404
      ],
      "excerpt": "rife-ncnn-vulkan.exe -m models/rife-anime -x -0 0.png -1 1.png -o out.png \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C",
      "C++",
      "CMake"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'The MIT License (MIT)\\n\\nCopyright (c) 2020 nihui\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "RIFE ncnn Vulkan",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "rife-ncnn-vulkan",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "nihui",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/nihui/rife-ncnn-vulkan/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "Bot",
        "author_name": "github-actions[bot]",
        "body": "add rife v3.1 model\r\nfix crash on intel graphics on macos",
        "dateCreated": "2021-05-20T15:21:42Z",
        "datePublished": "2021-05-20T15:37:51Z",
        "html_url": "https://github.com/nihui/rife-ncnn-vulkan/releases/tag/20210520",
        "name": "Release 20210520",
        "tag_name": "20210520",
        "tarball_url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/tarball/20210520",
        "url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/releases/43296593",
        "zipball_url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/zipball/20210520"
      },
      {
        "authorType": "Bot",
        "author_name": "github-actions[bot]",
        "body": "",
        "dateCreated": "2021-05-16T02:34:57Z",
        "datePublished": "2021-05-16T02:48:56Z",
        "html_url": "https://github.com/nihui/rife-ncnn-vulkan/releases/tag/20210516",
        "name": "Release 20210516",
        "tag_name": "20210516",
        "tarball_url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/tarball/20210516",
        "url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/releases/43008562",
        "zipball_url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/zipball/20210516"
      },
      {
        "authorType": "Bot",
        "author_name": "github-actions[bot]",
        "body": "",
        "dateCreated": "2021-02-27T04:12:00Z",
        "datePublished": "2021-02-27T04:26:20Z",
        "html_url": "https://github.com/nihui/rife-ncnn-vulkan/releases/tag/20210227",
        "name": "Release 20210227",
        "tag_name": "20210227",
        "tarball_url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/tarball/20210227",
        "url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/releases/38840423",
        "zipball_url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/zipball/20210227"
      },
      {
        "authorType": "Bot",
        "author_name": "github-actions[bot]",
        "body": "",
        "dateCreated": "2021-02-10T07:34:48Z",
        "datePublished": "2021-02-10T07:53:42Z",
        "html_url": "https://github.com/nihui/rife-ncnn-vulkan/releases/tag/20210210",
        "name": "Release 20210210",
        "tag_name": "20210210",
        "tarball_url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/tarball/20210210",
        "url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/releases/37845502",
        "zipball_url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/zipball/20210210"
      },
      {
        "authorType": "Bot",
        "author_name": "github-actions[bot]",
        "body": "runs on cpu via ```-g -1```",
        "dateCreated": "2021-01-06T15:06:27Z",
        "datePublished": "2021-01-06T15:24:03Z",
        "html_url": "https://github.com/nihui/rife-ncnn-vulkan/releases/tag/20210106",
        "name": "Release 20210106",
        "tag_name": "20210106",
        "tarball_url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/tarball/20210106",
        "url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/releases/36051776",
        "zipball_url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/zipball/20210106"
      },
      {
        "authorType": "Bot",
        "author_name": "github-actions[bot]",
        "body": "add the UHD mode option \"-u\"\r\nupstream v1.8 model update\r\n",
        "dateCreated": "2021-01-04T15:16:32Z",
        "datePublished": "2021-01-04T15:34:40Z",
        "html_url": "https://github.com/nihui/rife-ncnn-vulkan/releases/tag/20210104",
        "name": "Release 20210104",
        "tag_name": "20210104",
        "tarball_url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/tarball/20210104",
        "url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/releases/35955898",
        "zipball_url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/zipball/20210104"
      },
      {
        "authorType": "Bot",
        "author_name": "github-actions[bot]",
        "body": "add rife-uhd rife-anime model\r\nadd tta option\r\nupdate ncnn\r\nenable lto build",
        "dateCreated": "2021-01-03T03:20:56Z",
        "datePublished": "2021-01-03T04:11:01Z",
        "html_url": "https://github.com/nihui/rife-ncnn-vulkan/releases/tag/20210103",
        "name": "Release 20210103",
        "tag_name": "20210103",
        "tarball_url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/tarball/20210103",
        "url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/releases/35918645",
        "zipball_url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/zipball/20210103"
      },
      {
        "authorType": "Bot",
        "author_name": "github-actions[bot]",
        "body": "",
        "dateCreated": "2020-12-20T09:32:50Z",
        "datePublished": "2020-12-20T09:46:09Z",
        "html_url": "https://github.com/nihui/rife-ncnn-vulkan/releases/tag/20201220",
        "name": "Release 20201220",
        "tag_name": "20201220",
        "tarball_url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/tarball/20201220",
        "url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/releases/35537134",
        "zipball_url": "https://api.github.com/repos/nihui/rife-ncnn-vulkan/zipball/20201220"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 242,
      "date": "Thu, 09 Dec 2021 17:56:29 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "ncnn",
      "gpu",
      "video-interpolation",
      "vulkan",
      "rife"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Input two frame images, output one interpolated frame image.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```shell\n./rife-ncnn-vulkan -0 0.jpg -1 1.jpg -o 01.jpg\n./rife-ncnn-vulkan -i input_frames/ -o output_frames/\n```\n\nExample below runs on CPU, Discrete GPU, and Integrated GPU all at the same time. Uses 2 threads for image decoding, 4 threads for one CPU worker, 4 threads for another CPU worker, 2 threads for discrete GPU, 1 thread for integrated GPU, and 4 threads for image encoding.\n```shell\n./rife-ncnn-vulkan -i input_frames/ -o output_frames/ -g -1,-1,0,1 -j 2:4,4,2,1:4\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```console\nUsage: rife-ncnn-vulkan -0 infile -1 infile1 -o outfile [options]...\n       rife-ncnn-vulkan -i indir -o outdir [options]...\n\n  -h                   show this help\n  -v                   verbose output\n  -0 input0-path       input image0 path (jpg/png/webp)\n  -1 input1-path       input image1 path (jpg/png/webp)\n  -i input-path        input image directory (jpg/png/webp)\n  -o output-path       output image path (jpg/png/webp) or directory\n  -m model-path        rife model path (default=rife-HD)\n  -g gpu-id            gpu device to use (-1=cpu, default=auto) can be 0,1,2 for multi-gpu\n  -j load:proc:save    thread count for load/proc/save (default=1:2:2) can be 1:2,2,2:2 for multi-gpu\n  -x                   enable tta mode\n  -u                   enable UHD mode\n  -f pattern-format    output image filename pattern format (%08d.jpg/png/webp, default=ext/%08d.png)\n```\n\n- `input0-path`, `input1-path` and `output-path` accept file path\n- `input-path` and `output-path` accept file directory\n- `load:proc:save` = thread count for the three stages (image decoding + rife interpolation + image encoding), using larger values may increase GPU usage and consume more GPU memory. You can tune this configuration with \"4:4:4\" for many small-size images, and \"2:2:2\" for large-size images. The default setting usually works fine for most situations. If you find that your GPU is hungry, try increasing thread count to achieve faster processing.\n- `pattern-format` = the filename pattern and format of the image to be output, png is better supported, however webp generally yields smaller file sizes, both are losslessly encoded\n\nIf you encounter a crash or error, try upgrading your GPU driver:\n\n- Intel: https://downloadcenter.intel.com/product/80939/Graphics-Drivers\n- AMD: https://www.amd.com/en/support\n- NVIDIA: https://www.nvidia.com/Download/index.aspx\n\n",
      "technique": "Header extraction"
    }
  ]
}