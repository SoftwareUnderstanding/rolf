{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1512.03385\n\nDocumentation for how OpenCV NN was trained: https://github.com/opencv/opencv/blob/master/samples/dnn/face_detector/how_to_train_face_detector.txt\n\nSqueezeNet: https://arxiv.org/pdf/1602.07360.pdf   https://github.com/forresti/SqueezeNet  TF Implement: https://github.com/vonclites/squeezenet\n\nEdgeNet is a small sized SqueezeNet-like architecture with FPGA implementation. Sort of useless other than proof of concept. Used on drones for edge computing. https://ieeexplore-ieee-org.proxy.lib.umich.edu/document/8617876\n\nZynqNet seems like a different variant of EdgeNet. https://arxiv.org/pdf/2005.06892.pdf\n\nDataset Used: WIDER Face: A Face Detection Benchmark (Yang, Shuo and Luo, Ping and Loy, Chen Change and Tang, Xiaoou, IEEE Conference on Computer Vision and Pattern Recognition (CVPR"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Residual NN for Images: https://arxiv.org/abs/1512.03385\n\nDocumentation for how OpenCV NN was trained: https://github.com/opencv/opencv/blob/master/samples/dnn/face_detector/how_to_train_face_detector.txt\n\nSqueezeNet: https://arxiv.org/pdf/1602.07360.pdf   https://github.com/forresti/SqueezeNet  TF Implement: https://github.com/vonclites/squeezenet\n\nEdgeNet is a small sized SqueezeNet-like architecture with FPGA implementation. Sort of useless other than proof of concept. Used on drones for edge computing. https://ieeexplore-ieee-org.proxy.lib.umich.edu/document/8617876\n\nZynqNet seems like a different variant of EdgeNet. https://arxiv.org/pdf/2005.06892.pdf\n\nDataset Used: WIDER Face: A Face Detection Benchmark (Yang, Shuo and Luo, Ping and Loy, Chen Change and Tang, Xiaoou, IEEE Conference on Computer Vision and Pattern Recognition (CVPR), 2016\n\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8567500060633548
      ],
      "excerpt": "project:  Facial Anonymization in Video  \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/johngear/eecs504",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-12-03T02:09:28Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-12-14T09:44:28Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Our project will process videos that contain human faces and return video with all facial features removed, either by performing a blur with randomized parameters, or by omitting facial pixels all together. We will likely do this by training a convolution neural network with a dataset used for video facial recognition, such as \u2018Youtube Faces with Facial Keypoints\u2019 found here. \n\nExisting video editing software has blurring functionality, but the user often has to select the features, and it\u2019s unclear whether deblurring could reveal the identity after-the-fact. There are a few papers and similar projects available online that have demonstrated such work, such as this research paper, the following two articles, and the work of Terrance Boult and Walter Schierer.\n\nIf time and project complexity allow, an additional portion of the project could be examining feasibility of an on-device-algorithm that could be used on a camera so there was no back-door to deanonymize the data. \n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.818261439659164
      ],
      "excerpt": "project:  Facial Anonymization in Video  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "team Privacy Advocates ",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/johngear/eecs504/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 07 Dec 2021 02:04:41 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/johngear/eecs504/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "johngear/eecs504",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/johngear/eecs504/main/project_starter_code.ipynb",
      "https://raw.githubusercontent.com/johngear/eecs504/main/validation_clean.ipynb",
      "https://raw.githubusercontent.com/johngear/eecs504/main/lightface.ipynb",
      "https://raw.githubusercontent.com/johngear/eecs504/main/Detection%20Accuracy.ipynb"
    ],
    "technique": "File Exploration"
  },
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/johngear/eecs504/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "EECS504 Final Project",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "eecs504",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "johngear",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/johngear/eecs504/blob/main/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Tue, 07 Dec 2021 02:04:41 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "We hope to provide side-by-side video of before and after the algorithm runs on a variety of scenes containing people. It would be cool to implement it so that we could run it on live video, but achieving this level of efficiency with our methods may not be feasible. \n",
      "technique": "Header extraction"
    }
  ]
}