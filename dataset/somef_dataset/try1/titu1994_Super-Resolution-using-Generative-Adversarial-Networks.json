{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/titu1994/Super-Resolution-using-Generative-Adversarial-Networks",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2016-10-12T10:14:51Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-25T23:56:13Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9802937378368206,
        0.9613748256912624
      ],
      "excerpt": "This is an implementation of the SRGAN model proposed in the paper Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial \nNetwork in Keras. Note that this project is a work in progress. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9930729161914414,
        0.8658471183360725
      ],
      "excerpt": "The SRGAN model is built in stages within models.py. Initially, only the SR-ResNet model is created, to which the VGG network is appended  \nto create the pre-training model. The VGG weights are freezed as we will not update these weights. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9549642616069177
      ],
      "excerpt": "The discriminator model is not attached to the entire network. Therefore it is only the SR + VGG model that will be pretrained first. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8740304962568667
      ],
      "excerpt": "During discriminator pretraining, model is Generaor + Discriminator. Only binary cross entropy loss is used to train the Discriminator network. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9702339950198502,
        0.9489770973987744,
        0.9434709940883208
      ],
      "excerpt": "The discriminator model is attached to the entire network. Therefore it creates the SR + GAN + VGG model (SRGAN) \nDiscriminator loss is also added to the VGGContentLoss and TVLoss. \nContent regularizer loss is applied to the VGG Convolution 5-3 layer. (VGG 16 is used instead of 19 for now) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8474943683925791
      ],
      "excerpt": "Since keras has internal checks for batch size, we have to bypass an internal keras check called check_array_length(), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8656276512494143
      ],
      "excerpt": "This causes an assertion error in internal keras code. For now, we rewrite the fit logic of keras in keras_training_ops.py and use  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9406613572891844,
        0.9731342584470344,
        0.9847630928429014
      ],
      "excerpt": "For some reason, the Deconvolution networks are not learning the upscaling function properly. This causes grids to form throughout the  \nupscaled image. This is possibly due to the large (4x) upscaling procedure, but the Twitter team was able to do it. \nThe codebase is currently very chaotic, since I am focusing on correct implementation before making the project better. Therefore, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8038145266308908
      ],
      "excerpt": "Some things I am currently trying out: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8193460424077282
      ],
      "excerpt": "- [x] Fix the pixel grid formation when upscaling the image. (With Nearest Neighbour Upscaling). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9420144165984942
      ],
      "excerpt": "There is an ongoing discussion at https://github.com/fchollet/keras/issues/3940 where I detail some of the outputs and attempts to correct  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "An implementation of SRGAN model in Keras",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 85,
      "date": "Sun, 05 Dec 2021 05:10:10 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "titu1994/Super-Resolution-using-Generative-Adversarial-Networks",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.8001587245208726
      ],
      "excerpt": "In the pre-train mode: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8892730866272616
      ],
      "excerpt": "Currently supports validation agains Set5, Set14 and BSD 100 dataset images. To download the images, each of the 3 dataset have scripts called download_*.py which must be run before running benchmark_test.py test. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8138062357130023,
        0.833085573298931,
        0.806063713589532
      ],
      "excerpt": "- Set5 : Average PSNR of Set5 validation images : 22.1211430348 \n- Set14 : Average PSNR of Set5 validation images : 20.3971611357 \n- BSD100 : Average PSNR of BSD100 validation images : 20.9544390316 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Super Resolution using Generative Adversarial Networks",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Super-Resolution-using-Generative-Adversarial-Networks",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "titu1994",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "titu1994",
        "body": "Contains validation images from the following sets:\n- Set5\n- Set14\n- BSD100\n",
        "dateCreated": "2016-10-12T11:18:19Z",
        "datePublished": "2016-10-13T10:41:57Z",
        "html_url": "https://github.com/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/releases/tag/v0.1",
        "name": "Set5, Set14, BSD 100 Images",
        "tag_name": "v0.1",
        "tarball_url": "https://api.github.com/repos/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/tarball/v0.1",
        "url": "https://api.github.com/repos/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/releases/4378280",
        "zipball_url": "https://api.github.com/repos/titu1994/Super-Resolution-using-Generative-Adversarial-Networks/zipball/v0.1"
      }
    ],
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "- Theano (master branch)\n- Keras 1.2.0 +\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 281,
      "date": "Sun, 05 Dec 2021 05:10:10 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Currently, models.py contains most of the code to train and create the models. To use different modes, uncomment the parts of the code that you need.\n\nNote the difference between the *_network objects and *_model objects. \n- The *_network objects refer to the helper classes which create and manage the Keras models, load and save weights and \nset whether the model can be trained or not.\n- The *_models objects refer to the underlying Keras model. \n\n**Note**: The training images need to be stored in a subdirectory. Assume the path to the images is `/path-to-dir/path-to-sub-dir/*.png`, then simply write the path as `coco_path = /path-to-dir`. If this does not work, try `coco_path = /path-to-dir/` with a trailing slash (/)\n\nTo just create the pretrain model:\n```\nsrgan_network = SRGANNetwork(img_width=32, img_height=32, batch_size=1)\nsrgan_model = srgan_network.build_srgan_pretrain_model()\n\n#: Plot the model\nfrom keras.utils.visualize_util import plot\nplot(srgan_model, to_file='SRGAN.png', show_shapes=True)\n```\n\nTo pretrain the SR network:\n```\nsrgan_network = SRGANNetwork(img_width=32, img_height=32, batch_size=1)\nsrgan_network.pre_train_srgan(iamges_path, nb_epochs=1, nb_images=50000)\n```\n\n** NOTE **: There may be many cases where generator initializations may lead to completely solid validation images.\n Please check the first few iterations to see if the validation images are not solid images.\n\nTo counteract this, a pretrained generator model has been provided, from which you can restart training.\nTherefore the model can continue learning without hitting a bad initialization.\n\nTo pretrain the Discriminator  network:\n```\nsrgan_network = SRGANNetwork(img_width=32, img_height=32, batch_size=1)\nsrgan_network.pre_train_discriminator(iamges_path, nb_epochs=1, nb_images=50000, batchsize=16)\n```\n\nTo train the full network (Does NOT work properly right now, Discriminator is not correctly trained):\n```\nsrgan_network = SRGANNetwork(img_width=32, img_height=32, batch_size=1)\nsrgan_network.train_full_model(coco_path, nb_images=80000, nb_epochs=10)\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}