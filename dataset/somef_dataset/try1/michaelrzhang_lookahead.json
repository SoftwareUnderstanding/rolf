{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1907.08610",
      "https://arxiv.org/abs/1907.08610"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{zhang2019lookahead,\n  title={Lookahead Optimizer: k steps forward, 1 step back},\n  author={Zhang, Michael R and Lucas, James and Hinton, Geoffrey and Ba, Jimmy},\n  journal={arXiv preprint arXiv:1907.08610},\n  year={2019}\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "CIFAR-10/100: Cutout \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8511535834563841
      ],
      "excerpt": "Neural Machine Translation: tensor2tensor \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9811312325503209
      ],
      "excerpt": "If you have questions or suggestions, please feel free to open an issue. Please cite as: \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/michaelrzhang/lookahead",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-08-08T16:46:06Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-29T09:16:16Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9616587791232186,
        0.9855976711069672
      ],
      "excerpt": "This repository contains implementations for Lookahead Optimizer: k steps forward, 1 step back in TensorFlow and PyTorch. \nLookahead improves the learning stability and lowers the variance of its inner optimizer with negligible computation and memory cost. It is simple to incorporate into an existing machine learning pipeline. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Implementation for the Lookahead Optimizer.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/michaelrzhang/lookahead/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 24,
      "date": "Thu, 09 Dec 2021 07:25:10 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/michaelrzhang/lookahead/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "michaelrzhang/lookahead",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.8088415786788381
      ],
      "excerpt": "CIFAR-10/100: Cutout \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/michaelrzhang/lookahead/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2020 Michael Zhang, James Lucas, Geoffrey Hinton, Jimmy Ba\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Lookahead Optimizer",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "lookahead",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "michaelrzhang",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/michaelrzhang/lookahead/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 199,
      "date": "Thu, 09 Dec 2021 07:25:10 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "In PyTorch:\n```python\noptimizer = #: {any optimizer} e.g. torch.optim.Adam\nif args.lookahead:\n    optimizer = Lookahead(optimizer, la_steps=args.la_steps, la_alpha=args.la_alpha)\n```\n\nIn TensorFlow:\n```python\noptimizer = #: {any optimizer} e.g. tf.train.AdamOptimizer\nif args.lookahead:\n    optimizer = Lookahead(optimizer, la_steps=args.la_steps, la_alpha=args.la_alpha)\n```\n\nWe found that evaluation performance is typically better using the slow weights.\nThis can be done in PyTorch with something like this in your eval loop:\n```python\nif args.lookahead:\n    optimizer._backup_and_load_cache()\n    val_loss = eval_func(model)\n    optimizer._clear_and_load_backup()\n```\n\n",
      "technique": "Header extraction"
    }
  ]
}