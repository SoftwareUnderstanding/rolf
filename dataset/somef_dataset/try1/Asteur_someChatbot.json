{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* Some basic material on sequence to sequence NMT models came from these sources. The first link is to Jason Brownlee's masterful blog series. The second is to Francois Chollet's Keras blog.\n  * https://machinelearningmastery.com/develop-encoder-decoder-model-sequence-sequence-prediction-keras/\n  * https://blog.keras.io/a-ten-minute-introduction-to-sequence-to-sequence-learning-in-keras.html\n* Specifically regarding attention decoders and a special hand written Keras layer designed just for that purpose. The author of the layer is Zafarali Ahmed. The code was designed for an earlier version of Keras and Tensorflow. Zafarali's software is provided with the ['GNU Affero General Public License v3.0'](https://github.com/datalogue/keras-attention/blob/master/LICENSE) \n  * https://medium.com/datalogue/attention-in-keras-1892773a4f22\n  * https://machinelearningmastery.com/encoder-decoder-attention-sequence-to-sequence-prediction-keras/\n* Pytorch code was originally written by Sean Robertson for the Pytorch demo and example site. He uses the [MIT license.](https://github.com/spro/practical-pytorch/blob/master/LICENSE)\n  * http://pytorch.org/tutorials/intermediate/seq2seq_translation_tutorial.html#sphx-glr-intermediate-seq2seq-translation-tutorial-py\n* Additional Pytorch code was written by Austin Jacobson. A link to his NMT project is included here. He uses the [MIT license.](https://github.com/A-Jacobson/minimal-nmt/blob/master/LICENSE.md)\n  * https://github.com/A-Jacobson/minimal-nmt\n* Some code was originally written by Yerevann Research Lab. This theano code implements the DMN Network Model. They use the [MIT License.](https://github.com/YerevaNN/Dynamic-memory-networks-in-Theano/blob/master/LICENSE)\n  * https://github.com/YerevaNN/Dynamic-memory-networks-in-Theano\n* The original paper on Dynamic Memory Networks, by Kumar et al., can be found here:\n  * http://arxiv.org/abs/1506.07285\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "The goal of this part of the project is to provide for comprehensive speech-to-text and text-to-speech for the use of the chatbot when it is installed on a Raspberry Pi. For this purpose we use the excellent google api. The google api 'Cloud Speech API' costs money to operate. If you want to use it you must sign up for Google Cloud services and enable the Speech API for the project. This document will attempt to direct a developer how to setup the account, but may not go into intimate detail. Use this document as a guide, but not necessarily the last word. After everything is set up the project will require internet access to perform speech recognition.\n\nAs of this writing the Keras model does not work on the Raspberry Pi because Tensorflow is so difficult to compile for Pi. Tensorflow is the Keras backend that we use in this project.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "The Google Cloud api is complicated and not all of the things you need to do are covered in this document. I will be as detailed as possible if I can. The basic idea is to install the software on a regular computer to establish your account and permissions. You will need to create a special json authentication file and tell google where to find it on your computer. Then install as much software as possible on the Raspberry Pi along with another special authentication json file. This second file will refer to the same account and will allow google to charge you normally as it would for a regular x86 or x86_64 computer. The speech recognition code in this project should run on the regular computer before you proceed to testing it on the Raspberry Pi.\n\nInstall all the recommended python packages on both computers and make sure they install without error. This includes `gtts`, `google-api-python-client`, and `google-cloud-speech`. Install the Google Cloud SDK on the regular computer. The following link shows where to download the SDK. \n* https://cloud.google.com/sdk/docs/\n\n",
      "technique": "Header extraction"
    }
  ],
  "citation": [
    {
      "confidence": [
        0.9105368110547479
      ],
      "excerpt": "* https://gist.github.com/fgolemo/b973a3fa1aaa67ac61c480ae8440e754 \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Asteur/someChatbot",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-06-21T12:46:35Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-06-21T12:47:39Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9894891118467799,
        0.9710339998759618,
        0.9856192926206929,
        0.9814089085851637,
        0.9466510597009224
      ],
      "excerpt": "Keras or pytorch implementation of a chatbot. The basic idea is to start by setting up your training environment as described below and then training with or without autoencoding. The inspiration for this project is the tensorflow NMT project found at the following link: https://github.com/tensorflow/nmt Also, this was inspiring: https://pythonprogramming.net/chatbot-deep-learning-python-tensorflow/ Finally there was a great deep learning youtube series from Siraj Raval. A link for that is here \nThe folders and files in the project are organized in the following manor. The root directory of the project is called awesome-chatbot. In that folder are sub folders named data,  model, raw and saved. There are several script files in the main folder along side the folders mentioned above. These scripts all have names that start with the word do_ . This is so that when the files are listed by the computer the scripts will all appear together. Below is a folder by folder breakdown of the project. \n* data This folder holds the training data that the model uses during the fit and predict operations. The contents of this folder are generally processed to some degree by the project scripts. This pre-processing is described below. This folder also holds the vocab files that the program uses for training and inference. The modified word embeddings are also located here. \n* model This folder holds the python code for the project. Though some of the setup scripts are also written in python, this folder holds the special python code that maintains the keras model. This model is the framework for the neural network that is at the center of this project. There are also two setup scripts in this folder. \n* bot This folder is the home of programs that are meant to help the chatbot run. This includes speech-to-text code and speech-recognition code. Ultimately this directory will be the home of a loop of code that monitors audio input from a microphone and decides what to do with it. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8963238680105063,
        0.8752082006104406,
        0.8915837294074508,
        0.8214713740700332
      ],
      "excerpt": "* stats This folder holds code for creating tables that show training results for various model configuration. \nDescription of the individual setup scripts is included below. \nThis is a script for running the model.py python file located in the model folder. There are several commandline options available for the script. Type ./do_launch_model.sh --help to see them all. Some options are listed below. There is also a do_launch_babi.sh file. It works with similar commandline options. \n* --help This prints the help text for the program. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.825304839537279,
        0.9467354331807668,
        0.9037147361644586
      ],
      "excerpt": "  * train This is for training the model for one pass of the selected training file. \n  * long This is for training the model for several epochs on the selected training files. It is the preferred method for doing extended training. \n  * infer This just runs the program's infer method once so that the state of the model's training might be determined from observation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9523831133059383,
        0.9546379546040261,
        0.9799702294790779
      ],
      "excerpt": "  * interactive This allows for interactive input with the predict part of the program. \n  * plot This runs the review code but also plots a rudimentary graph at the end. This option is only found in the pytorch code. \n* --printable=STRING This parameter allows you to set a string that is printed on the screen with every call of the fit function. It allows the do_launch_series_model.py script to inform the user what stage training is at, if for example the user looks at the screen between the switching of input files. (see description of do_launch_series_model.py below.) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8622926255902359
      ],
      "excerpt": "* --autoencode=FLOAT This option turns on auto encoding during training. It overrides the model/settings.py hyper parameter. 0.0 is no autoencoding and 1.0 is total autoencoding. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9434474680435686,
        0.9342638522873202
      ],
      "excerpt": "* embed_name This is the name of the embed file that is found in the data folder. \n* vocab_name This is the name of the primary vocabulary list file. It is found in the data folder. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9466784384816996
      ],
      "excerpt": "* test_size This is the size of the test file in lines. It is not used. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9097425286156126,
        0.9385513743109927,
        0.9494622602614894
      ],
      "excerpt": "* base_filename This is the base filename for when the program saves the network weights and biases. \n* base_file_num This is a number that is part of the final filename for the saved weights from the network. \n* num_vocab_total This number is the size of the vocabulary. It is also read by the do_make_vocab.py file. It can only be chhanged when the vocabulary is being created before training. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9481485544951771
      ],
      "excerpt": "* steps_to_stats Number representing how many times the fit method is called before the stats are printed to the screen. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.902803128356671,
        0.9558421541931142,
        0.9512063027249454,
        0.8221209542430774,
        0.9958265993866241,
        0.9532424245940679
      ],
      "excerpt": "* embed_size Dimensionality of the basic word vector length. Each word is represented by a vector of numbers and this vector is as long as embed_size. This can only take certain values. The GloVe download, mentioned above, has word embedding in only certain sizes. These sizes are: None, 50, 100, 200, and 300. If 'None' is specified then the GloVe vectors are not used. Note: GloVe vectors do not contain contractions, so contractions do not appear in the generated vocabulary files if embed_size is not None. \n* embed_train This is a True/False parameter that determines whether the model will allow the loaded word vector values to be modified at the time of training. \n* autoencode This is a True/False parameter that determines whether the model is set up for regular encoding or autoencoding during the training phase. \n* infer_repeat This parameter is a number higher than zero that determines how many times the program will run the infer method when stats are being printed. \n* embed_mode This is a string. Accepted values are 'mod' and 'normal' and only the keras model is effected. This originally allowed the development of code that used different testing scenarios. 'mod' is not supported at the time of this writing. Use 'normal' at all times. \n* dense_activation There is a dense layer in the model and this parameter tells that layer how to perform its activations. If the value None or 'none' is passed to the program the dense layer is skipped entirely. The value 'softmax' was used initially but produced poor results. The value 'tanh' produces some reasonable results. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.941996696678928,
        0.9778435294322264,
        0.9105872662177337,
        0.9162799238733889,
        0.9895869611375994,
        0.910986004325908
      ],
      "excerpt": "* eol This is the symbol used for the 'end of line' token. \n* unk This is the symbol used for the 'unknown word' token. \n* units This is the initial value for hidden units in the first LSTM cell in the keras model. In the pytorch model this is the hidden units value used by both the encoder and the decoder. For the pytorch model GRU cells are used. \n* layers This is the number of layers for both the encoder and decoder in the pytorch model. \n* learning_rate This is the learning rate for the 'adam' optimizer. In the pytorch model SGD is used. \n* tokens_per_sentence This is the number of tokens per sentence. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8209268677797056,
        0.8634877144727277
      ],
      "excerpt": "* teacher_forcing_ratio This number tells the pytorch version of the model exactly how often to use teacher forcing during training. \n* dropout This number tells the pytorch version of the model how much dropout to use. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8324088193595851,
        0.9932236917217873
      ],
      "excerpt": "* zero_start True/False variable that tells the pytorch model to start at the beginning of the training corpus files every time the program is restarted. Overrides the saved line number that allows the pytorch model to start training where it left off after each restart. \nAn important part of the process of porting this project to the Raspberry Pi is compiling Pytorch for the Pi. At the time of this writing the compiling of Pytorch is possible following the urls below. You do not need to compile Pytorch before you test the speech recognition, but it is required for later steps. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8952936142200802,
        0.8282467876529059
      ],
      "excerpt": "You may need to set up a billing account with Google for yourself. Here are some resources for using the Google Cloud Platform. \n* https://cloud.google.com/sdk/docs/quickstart-linux See this url for details. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9083547478231253
      ],
      "excerpt": "Setup a google cloud platform account and project. For a project name I used awesome-sr.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9259847863362826
      ],
      "excerpt": "Use the Google Cloud Platform Console to create a second project json file for the Raspberry Pi. Go to the Downloads folder and identify the Raspberry Pi json file. Transfer the file to the Pi with a command like scp. \n",
      "technique": "Supervised classification"
    }
  ],
  "download": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* This link brings you to a page where you can download W2V embeddings that google makes available. At the time of this writing this project does not use w2v embeddings, but uses GloVe instead.\n  * https://code.google.com/archive/p/word2vec/\n* This link starts a download of the GloVe vectors in the `glove.6B` collection. The download takes a while and uses 823M.\n  * http://nlp.stanford.edu/data/glove.6B.zip\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "* This link starts a download that takes several hours for the Reddit Comments file from November of 2017. The file is several gigabytes.\n  * http://files.pushshift.io/reddit/comments/RC_2017-11.bz2\n",
      "technique": "Header extraction"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Asteur/someChatbot/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 13 Dec 2021 15:05:44 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Asteur/someChatbot/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Asteur/someChatbot",
    "technique": "GitHub API"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Asteur/someChatbot/master/do_tensorboard.sh",
      "https://raw.githubusercontent.com/Asteur/someChatbot/master/do_launch_babi.sh",
      "https://raw.githubusercontent.com/Asteur/someChatbot/master/do_make_reddit_download.sh",
      "https://raw.githubusercontent.com/Asteur/someChatbot/master/do_make_glove_download.sh",
      "https://raw.githubusercontent.com/Asteur/someChatbot/master/do_make_movie_download.sh",
      "https://raw.githubusercontent.com/Asteur/someChatbot/master/do_make_rename_train.sh",
      "https://raw.githubusercontent.com/Asteur/someChatbot/master/do_launch_game.sh",
      "https://raw.githubusercontent.com/Asteur/someChatbot/master/do_make_unpack_text.sh",
      "https://raw.githubusercontent.com/Asteur/someChatbot/master/do_make_french_download.sh",
      "https://raw.githubusercontent.com/Asteur/someChatbot/master/do_make_babi_download.sh",
      "https://raw.githubusercontent.com/Asteur/someChatbot/master/do_make_sr_test.sh",
      "https://raw.githubusercontent.com/Asteur/someChatbot/master/do_make_vocab_copy.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "* This guide assumes you are using a linux computer. It also assumes that if you downloaded the json file from the internet and it was stored in your `Downloads` folder, that you have moved it to the root of your home directory. \n* For convenience I made a folder in my home directory called `bin`. This will be the folder for the json file on my  regular computer.\n* On the Raspberry Pi I navigated to the `/opt` directory and made a folder called `bot`. I placed the json file at `/opt/bot/`.\n* For simplicity I will refer to the json file on my regular computer as `awesome-sr-XXXXXX.json`. In this scheme `awesome-sr` is the name of my project and `XXXXXX` is the hexadecimal number that google appends to the json file name. Because this name is long and the hex digits are hard to type I will copy and paste them when possible as I set up the Bash shell variable.\n* Edit the `.bashrc` file with your favorite editor.\n* Add the following to the  last line of the `.bashrc` file: `export GOOGLE_APPLICATION_CREDENTIALS=/path/to/json/awesome-sr-XXXXXX.json` A link follows that might be helpful: https://cloud.google.com/docs/authentication/getting-started#setting_the_environment_variable\n* Save the changes.\n* You must exit and re-enter the bash shell in a new terminal for the changes to take effect. After that you should be able to run the `game_sr.py` file. You will be charged for the service.\n* On the Raspberry Pi use the same general technique as above. Edit the `.basshrc` file to contain the line `export GOOGLE_APPLICATION_CREDENTIALS=/opt/bot/awesome-sr-XXXXXX.json` where `XXXXXX` is the hexadecimal label on the json file on the Rapberry Pi. This number will be different from the one on your regular computer.",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "Here is a list of scripts and their description and possibly their location. You must execute them in order. It is recommended that you install all the packages in the `requirements.txt` file. You can do this with the command `pip3 install -r requirements.txt`\n1. `do_make_glove_download.sh` This script is located in the root folder of the repository. It takes no arguments. Execute this command and the GloVe word embeddings will be downloaded on your computer. This download could take several minutes. The file is found in the `raw` folder. In order to continue to later steps you must unpack the file. In the `raw` directory, execute the command `unzip glove.6B.zip`. \n2. `do_make_reddit_download.sh` This script is located in the root folder of the repository. It takes no arguments. Execute this command and the Reddit Comments JSON file will be downloaded on your computer. This download could take several hours and requires several gigabytes of space. The file is found in the `raw` folder. In order to continue to later steps you must unpack the file. In the `raw` directory execute the command `bunzip2 RC_2017-11.bz2`. Unzipping this file takes hours and consumes 30 to 50 gigabytes of space on your hard drive.\n3. `do_make_db_from_reddit.py` This script is located in the root folder of the repository. It takes one argument, a specification of the location of the uunpacked Reddit Comments JSON file. Typically you would execute the command as `./do_make_db_from_reddit.py raw/RC_2017-11`. Executing this file takes several hours and outputs a sqlite data base called `input.db` in the root directory or your repository. There should be 5.9 Million paired rows of comments in the final db file. You can move the file or rename it for convenience. I typically put it in the `raw` folder. This python script uses `sqlite3`.\n4. `do_make_train_test_from_db.py` This file is not located in the root folder of the repository. It is in the subfolder that the `model.py` file is found in. Execute this file with one argument, the location of the `input.db` file. The script takes several hours and creates many files in the `data` folder that the `model.py` file will later use for training. These data files are also used to create the vocabulary files that are essential for the model.\n5. `do_make_vocab.py` This file is located in the directory  that the `do_make_train_test_from_db.py` is found in. It takes no arguments. It proceeds to find the most popular words in the training files and makes them into a list of vocabulary words of the size specified by the `settings.py` file. It also adds a token for unknown words and for the start and end of each sentence. If word embeddings are enabled, it will prepare the word embeddings from the GloVe download. The GloVe download does not include contractions, so if it is used no contractions will appear in the `vocab.big.txt` file. The embeddings can be disabled by specifying 'None' for `embed_size` in the `model/settings.py` file. Embeddings can be enabled with some versions of the keras model. The pytorch model is to be used without pre-set embeddings. This script could take hours to run. It puts its vocabulary list in the `data` folder, along with a modified GloVe word embeddings file.\n6. `do_make_rename_train.sh` This file should be called once after the data folder is set up to create some important symbolic links that will allow the `model.py` file to find the training data. If your computer has limited resources this method can be called with a single integer, `n`, as the first argument. This sets up the symbolic links to piont the `model.py` file at the `n`th training file. It should be noted that there are about 80 training files in the `RC_2017-11` download, but these training files are simply copies of the larger training file, called `train.big.from` and `train.big.to`, split up into smaller pieces. When strung together they are identical to the bigger file. If your computer can use the bigger file it is recommended that you do so. If you are going to use the larger file, call the script withhout any arguments. If you are going to use the smaller files, call the script with the number associated with the file you are interested in. This call woudl look like this: `./do_make_rename_train.sh 1`\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8131618427237692
      ],
      "excerpt": "* --mode=MODENAME This sets the mode for the program. It can be one of the following: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8636253863183455
      ],
      "excerpt": "* https://gist.github.com/fgolemo/b973a3fa1aaa67ac61c480ae8440e754 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8298924944749909
      ],
      "excerpt": "Download and install the Google-Cloud-Sdk. This package has the gcloud command.  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9463710404121645
      ],
      "excerpt": "You must also restart your terminal. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.834226674447473
      ],
      "excerpt": "This is a script for running the model.py python file located in the model folder. There are several commandline options available for the script. Type ./do_launch_model.sh --help to see them all. Some options are listed below. There is also a do_launch_babi.sh file. It works with similar commandline options. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8042011493713749
      ],
      "excerpt": "  * train This is for training the model for one pass of the selected training file. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8277693943372827
      ],
      "excerpt": "* --autoencode=FLOAT This option turns on auto encoding during training. It overrides the model/settings.py hyper parameter. 0.0 is no autoencoding and 1.0 is total autoencoding. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8239792124366854
      ],
      "excerpt": "* tgt_ending This is the filename ending for the target test and training files. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8009316597474688
      ],
      "excerpt": "* batch_size Training batch size. May be replaced by batch_constant. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8187756456177225
      ],
      "excerpt": "Use the Google Cloud Platform Console to create a second project json file for the Raspberry Pi. Go to the Downloads folder and identify the Raspberry Pi json file. Transfer the file to the Pi with a command like scp. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Asteur/someChatbot/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'Copyright 2018 David Liebman\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "`awesome-chatbot`",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "someChatbot",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Asteur",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Asteur/someChatbot/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Mon, 13 Dec 2021 15:05:44 GMT"
    },
    "technique": "GitHub API"
  }
}