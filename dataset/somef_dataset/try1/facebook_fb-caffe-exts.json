{
  "citation": [
    {
      "confidence": [
        0.8550101043698384
      ],
      "excerpt": "  config.numThreads_ = 10; \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8354091794473172,
        0.9877739206401956
      ],
      "excerpt": "converted end to end. \nFor example, complex CNNs ([[http://arxiv.org/abs/1409.4842][GoogLeNet]], etc), deep LSTMs (created in [[https://github.com/torch/nngraph][nngraph]]), \n",
      "technique": "Supervised classification"
    }
  ],
  "codeOfConduct": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://raw.githubusercontent.com/facebook/fb-caffe-exts/master/CODE_OF_CONDUCT.md",
    "technique": "File Exploration"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/facebookarchive/fb-caffe-exts",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing to fb-caffe-exts\nWe want to make contributing to this project as easy and transparent as\npossible.\nCode of Conduct\nThe code of conduct is described in CODE_OF_CONDUCT.md.\nOur Development Process\nWe sync from an internal codebase, which is the source of truth for this\nproject. We will apply pull requests to this codebase.\nPull Requests\nWe actively welcome your pull requests.\n\nFork the repo and create your branch from master.\nIf you've added code that should be tested, add tests.\nIf you've changed APIs, update the documentation.\nEnsure the test suite passes.\nMake sure your code lints.\nIf you haven't already, complete the Contributor License Agreement (\"CLA\").\n\nContributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\nComplete your CLA here: https://code.facebook.com/cla\nIssues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\nFacebook has a bounty program for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\nCoding Style\n\n2 spaces for indentation rather than tabs\n80 character line length\nLua files should pass luacheck\nPython files should pass flake8\nC++ files should be run through clang-format\n\nLicense\nBy contributing to fb-caffe-exts you agree that your contributions will be licensed\nunder its BSD license.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2015-11-18T18:00:24Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-10-31T13:10:51Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8626598551383922
      ],
      "excerpt": "=fb-caffe-exts= is a collection of extensions developed at FB while using Caffe \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8588028771822752,
        0.890701749851723,
        0.8261976370896261
      ],
      "excerpt": "A simple C++ library that wraps the common pattern of running a =caffe::Net= in \nmultiple threads while sharing weights. It also provides a slightly more \nconvenient usage API for the inference case. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8721010293317755
      ],
      "excerpt": "// When calling in a worker thread \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9664956234382955,
        0.8690822838275212,
        0.8898919391580239
      ],
      "excerpt": "Of note is the =predictor/Optimize.{h,cpp}=, which optimizes memory \nusage by automatically reusing the intermediate activations when this is safe. \nThis reduces the amount of memory required for intermediate activations by \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8136033413636696,
        0.9452480414604643,
        0.9857361965795706,
        0.8740332762752682
      ],
      "excerpt": "We can plot each set of activations in the topological ordering of the network, \nwith a unique color for each reused activation buffer, with the height of the \nblob proportional to the size of the buffer. \nFor example, in an AlexNet-like model, the allocation looks like \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9259735101958548,
        0.8722009730234567
      ],
      "excerpt": "The idea is essentially linear scan register allocation. We \ncompute a set of \"live ranges\" for each =caffe::SyncedMemory= (due to sharing, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.831189394354485
      ],
      "excerpt": "compute a set of live intervals, and schedule each =caffe::SyncedMemory= in a \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9005976140087468,
        0.9632215650352285
      ],
      "excerpt": "Update the blob internal pointers to point to the canonical buffer \nDepending on the model, the buffer reuse can also lead to some non-trivial \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9210989717234799
      ],
      "excerpt": "To enable this just pass =Predictor::Optimization::MEMORY= to the =Predictor= \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9347070550767251,
        0.9626185996761668,
        0.8854880716238088,
        0.8082472734218077,
        0.9473550038657746
      ],
      "excerpt": "=predictor/PooledPredictor{.h,cpp}= maintains a thread-pool with thread-local \ninstances of =caffe::Net=. Calls to =PooledPredictor::forward()= are added to a \n=folly::MPMCQueue=, which are then dequeued by the thread-pool for processing. \nCalls to =forward()= are non-blocking and return a =folly::Future= that will be \nsatisfied when the forward pass job finishes. =PooledPredictor= also supports \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8677358560931656,
        0.9075758937963097,
        0.9451178816272985,
        0.9227977301475628
      ],
      "excerpt": "=caffe::Net= (one for each model), and the =netId= param in =forward()= \nspecifies the model to run. =PinnedPooledPredictor= is an abstraction over \n=PooledPredictor= when used with multiple models to pin the =forward()= calls \nto a specific model. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8513511479851942
      ],
      "excerpt": "converted end to end. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8217019814056905
      ],
      "excerpt": "  --preprocessing (default \"\") Preprocess the model \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9555720980663825,
        0.8850642115702628,
        0.9047464375266662
      ],
      "excerpt": "walking the Torch module graph of the model provide in =--input=, \nconverting it to the equivalent Caffe module graph, \ncopying the weights into the Caffe model, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8488774965944276
      ],
      "excerpt": "    --help                    Show this message and exit. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8282401110594442
      ],
      "excerpt": "and a =CMake= based solution. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8557453120420023
      ],
      "excerpt": "Feel free to open issues on this repo for requests/bugs, or contact [[mailto:tulloch@fb.com][Andrew \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Some handy utility libraries and tools for the Caffe deep learning framework.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/facebook/fb-caffe-exts/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 152,
      "date": "Fri, 10 Dec 2021 23:28:19 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/facebookarchive/fb-caffe-exts/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "facebookarchive/fb-caffe-exts",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        0.8620132316823396
      ],
      "excerpt": "// In your setup phase \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8620132316823396
      ],
      "excerpt": "// In your setup phase \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9458219006660845,
        0.9458219006660845,
        0.9333753136382583,
        0.9333753136382583
      ],
      "excerpt": "    --prototxt TEXT           [required] \n    --caffemodel TEXT         [required] \n    --output-prototxt TEXT    [required] \n    --output-caffemodel TEXT  [required] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8245618074525309
      ],
      "excerpt": "The main usage at the moment is automating the [[https://github.com/BVLC/caffe/blob/master/examples/net_surgery.ipynb][Net Surgery]] notebook. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8111526850018087
      ],
      "excerpt": "convert, and =test.lua= shows some examples of more complex models being \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8162491326475126,
        0.8611145067081853
      ],
      "excerpt": "\u2234 th torch2caffe/torch2caffe.lua --help \n  --input (default \"\") Input model file \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8666807212814659,
        0.8838955368329131,
        0.8493947582199818
      ],
      "excerpt": "  --prototxt (default \"\") Output prototxt model file \n  --caffemodel (default \"\") Output model weights file \n  --format (default \"lua\") Format: lua | luathrift \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8265866963069578
      ],
      "excerpt": "  Usage: conversions.py vision [OPTIONS] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.818395596346655,
        0.818395596346655
      ],
      "excerpt": "    --output-prototxt TEXT    [required] \n    --output-caffemodel TEXT  [required] \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/facebookarchive/fb-caffe-exts/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "C++",
      "Lua",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Other",
      "url": "https://raw.githubusercontent.com/facebook/fb-caffe-exts/master/LICENSE"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'BSD License\\n\\nFor fb-caffe-exts software\\n\\nCopyright (c) 2015-present, Facebook, Inc. All rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without modification,\\nare permitted provided that the following conditions are met:\\n\\n * Redistributions of source code must retain the above copyright notice, this\\n   list of conditions and the following disclaimer.\\n\\n * Redistributions in binary form must reproduce the above copyright notice,\\n   this list of conditions and the following disclaimer in the documentation\\n   and/or other materials provided with the distribution.\\n\\n * Neither the name Facebook nor the names of its contributors may be used to\\n   endorse or promote products derived from this software without specific\\n   prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "+BEGIN_SRC c++",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "fb-caffe-exts",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "facebookarchive",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/facebookarchive/fb-caffe-exts/blob/master/README.org",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 458,
      "date": "Fri, 10 Dec 2021 23:28:19 GMT"
    },
    "technique": "GitHub API"
  }
}