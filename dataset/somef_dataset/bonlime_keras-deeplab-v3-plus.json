{
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/bonlime/keras-deeplab-v3-plus",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2018-03-16T11:29:25Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-23T15:23:19Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8822839015097701,
        0.9793877016913912,
        0.9641559382791355
      ],
      "excerpt": "This repo is not longer maintained. I won't respond to issues but will merge PR \nDeepLab is a state-of-art deep learning model for semantic image segmentation.   \nModel is based on the original TF frozen graph. It is possible to load pretrained weights into this model. Weights are directly imported from original TF checkpoint.   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9600544768250886,
        0.9715308172818872
      ],
      "excerpt": "Segmentation results of this repo model with loaded weights and OS = 8 \nResults are identical to the TF model   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9320940931896837
      ],
      "excerpt": "Segmentation results of this repo model with loaded weights and OS = 16 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9059237411098783,
        0.8628649988245268,
        0.8704255074560794,
        0.9735196096156987,
        0.8248902978090009
      ],
      "excerpt": "1. This model doesn\u2019t provide default weight decay, user needs to add it themselves. \n2. Due to huge memory use with OS=8, Xception backbone should be trained with OS=16 and only inferenced with OS=8. \n3. User can freeze feature extractor for Xception backbone (first 356 layers) and only fine-tune decoder. Right now (March 2019), there is a problem with finetuning Keras models with BN. You can read more about it here. \nThis model can be retrained check this notebook. Finetuning is tricky and difficult because of the confusion between training and trainable in Keras. See this issue for a discussion and possible alternatives. \nIn order to load model after using model.save() use this code: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Keras implementation of Deeplab v3+ with pretrained weights",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/bonlime/keras-deeplab-v3-plus/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 426,
      "date": "Sun, 05 Dec 2021 05:09:21 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/bonlime/keras-deeplab-v3-plus/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "bonlime/keras-deeplab-v3-plus",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/bonlime/keras-deeplab-v3-plus/master/.ipynb_checkpoints/test-checkpoint.ipynb",
      "https://raw.githubusercontent.com/bonlime/keras-deeplab-v3-plus/master/.ipynb_checkpoints/Untitled-checkpoint.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8002045434544925
      ],
      "excerpt": "2. Due to huge memory use with OS=8, Xception backbone should be trained with OS=16 and only inferenced with OS=8. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8781016483555044
      ],
      "excerpt": "Segmentation results of original TF model. Output Stride = 8 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8882747530828131,
        0.8882747530828131,
        0.8882747530828131
      ],
      "excerpt": "    <img src=\"imgs/seg_results1.png\" width=600></br> \n    <img src=\"imgs/seg_results2.png\" width=600></br> \n    <img src=\"imgs/seg_results3.png\" width=600></br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8176472557840468
      ],
      "excerpt": "Results are identical to the TF model   \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8882747530828131,
        0.8882747530828131,
        0.8882747530828131
      ],
      "excerpt": "    <img src=\"imgs/my_seg_results1_OS8.png\" width=600></br> \n    <img src=\"imgs/my_seg_results2_OS8.png\" width=600></br> \n    <img src=\"imgs/my_seg_results3_OS8.png\" width=600></br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8882747530828131,
        0.8882747530828131,
        0.8882747530828131
      ],
      "excerpt": "    <img src=\"imgs/my_seg_results1_OS16.png\" width=600></br> \n    <img src=\"imgs/my_seg_results2_OS16.png\" width=600></br> \n    <img src=\"imgs/my_seg_results3_OS16.png\" width=600></br> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8934477375241742,
        0.8778487586960795
      ],
      "excerpt": "from model import relu6 \ndeeplab_model = load_model('example.h5') \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/bonlime/keras-deeplab-v3-plus/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2018 Emil Zakirov\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Keras implementation of Deeplabv3+",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "keras-deeplab-v3-plus",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "bonlime",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/bonlime/keras-deeplab-v3-plus/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "bonlime",
        "body": "Thanks @rdiazgar  for adding Cityscapes weights. To use them just pass `weights=cityscapes` while initializing the model. ",
        "dateCreated": "2019-03-19T22:09:12Z",
        "datePublished": "2019-03-19T22:18:52Z",
        "html_url": "https://github.com/bonlime/keras-deeplab-v3-plus/releases/tag/1.2",
        "name": "Weights pretrained at Cityscapes dataset",
        "tag_name": "1.2",
        "tarball_url": "https://api.github.com/repos/bonlime/keras-deeplab-v3-plus/tarball/1.2",
        "url": "https://api.github.com/repos/bonlime/keras-deeplab-v3-plus/releases/16214879",
        "zipball_url": "https://api.github.com/repos/bonlime/keras-deeplab-v3-plus/zipball/1.2"
      },
      {
        "authorType": "User",
        "author_name": "bonlime",
        "body": "Weights for keras models pretrained on PASCAL VOC train&val sets  \r\nThis files don't have models definition, so you need to load them into existing model with:\r\n\r\ndeeplab_model.load_weights('deeplabv3_xception_tf_dim_ordering_tf_kernels.h5', by_name = True)",
        "dateCreated": "2018-05-07T08:16:02Z",
        "datePublished": "2018-04-04T13:11:26Z",
        "html_url": "https://github.com/bonlime/keras-deeplab-v3-plus/releases/tag/1.1",
        "name": "Pretrain on PASCAL VOC train&val sets",
        "tag_name": "1.1",
        "tarball_url": "https://api.github.com/repos/bonlime/keras-deeplab-v3-plus/tarball/1.1",
        "url": "https://api.github.com/repos/bonlime/keras-deeplab-v3-plus/releases/10390057",
        "zipball_url": "https://api.github.com/repos/bonlime/keras-deeplab-v3-plus/zipball/1.1"
      }
    ],
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The latest vesrion  of this repo uses TF Keras, so you only need TF 2.0+ installed  \ntensorflow-gpu==2.0.0a0  \nCUDA==9.0   \n\n-------- \nIf you want to use older version, use following commands:\n```bash\ngit clone https://github.com/bonlime/keras-deeplab-v3-plus/\ncd keras-deeplab-v3-plus/\ngit checkout 714a6b7d1a069a07547c5c08282f1a706db92e20\n```\ntensorflow-gpu==1.13  \nKeras==2.2.4  \n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1282,
      "date": "Sun, 05 Dec 2021 05:09:21 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Model will return tensor of shape `(batch_size, height, width, num_classes)`. To obtain labels, you need to apply argmax to logits at exit layer. Example of predicting on `image1.jpg`:  \n\n```python\nimport numpy as np\nfrom PIL import Image\nfrom matplotlib import pyplot as plt\n\nfrom model import Deeplabv3\n\n#: Generates labels using most basic setup.  Supports various image sizes.  Returns image labels in same format\n#: as original image.  Normalization matches MobileNetV2\n\ntrained_image_width=512 \nmean_subtraction_value=127.5\nimage = np.array(Image.open('imgs/image1.jpg'))\n\n#: resize to max dimension of images from training dataset\nw, h, _ = image.shape\nratio = float(trained_image_width) / np.max([w, h])\nresized_image = np.array(Image.fromarray(image.astype('uint8')).resize((int(ratio * h), int(ratio * w))))\n\n#: apply normalization for trained dataset images\nresized_image = (resized_image / mean_subtraction_value) - 1.\n\n#: pad array to square image to match training images\npad_x = int(trained_image_width - resized_image.shape[0])\npad_y = int(trained_image_width - resized_image.shape[1])\nresized_image = np.pad(resized_image, ((0, pad_x), (0, pad_y), (0, 0)), mode='constant')\n\n#: make prediction\ndeeplab_model = Deeplabv3()\nres = deeplab_model.predict(np.expand_dims(resized_image, 0))\nlabels = np.argmax(res.squeeze(), -1)\n\n#: remove padding and resize back to original image\nif pad_x > 0:\n    labels = labels[:-pad_x]\nif pad_y > 0:\n    labels = labels[:, :-pad_y]\nlabels = np.array(Image.fromarray(labels.astype('uint8')).resize((h, w)))\n\nplt.imshow(labels)\nplt.waitforbuttonpress()\n```\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "```python\nfrom model import Deeplabv3\ndeeplab_model = Deeplabv3(input_shape=(384, 384, 3), classes=4)\u00a0 \n#:or you can use None as shape\ndeeplab_model = Deeplabv3(input_shape=(None, None, 3), classes=4)\n```\nAfter that you will get a usual Keras model which you can train using `.fit` and `.fit_generator` methods.\n\n",
      "technique": "Header extraction"
    }
  ]
}