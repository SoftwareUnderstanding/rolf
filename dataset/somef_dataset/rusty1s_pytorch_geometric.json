{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1903.02428",
      "https://arxiv.org/abs/1801.07829",
      "https://arxiv.org/abs/1609.02907",
      "https://arxiv.org/abs/1606.09375",
      "https://arxiv.org/abs/1710.10903",
      "https://arxiv.org/abs/2007.02133",
      "https://arxiv.org/abs/1711.08920",
      "https://arxiv.org/abs/1704.01212",
      "https://arxiv.org/abs/1704.02901",
      "https://arxiv.org/abs/2104.01481",
      "https://arxiv.org/abs/2105.14491",
      "https://arxiv.org/abs/2009.03509",
      "https://arxiv.org/abs/1706.02216",
      "https://arxiv.org/abs/1810.02244",
      "https://arxiv.org/abs/1511.05493",
      "https://arxiv.org/abs/1711.07553",
      "https://arxiv.org/abs/1810.00826",
      "https://arxiv.org/abs/1905.12265",
      "https://arxiv.org/abs/1901.01343",
      "https://arxiv.org/abs/1902.07153",
      "https://arxiv.org/abs/1810.05997",
      "https://arxiv.org/abs/1509.09292",
      "https://arxiv.org/abs/1803.03735",
      "https://arxiv.org/abs/1710.10370",
      "https://arxiv.org/abs/2004.05718",
      "https://arxiv.org/abs/2101.00797",
      "https://arxiv.org/abs/2010.12878",
      "https://arxiv.org/abs/1703.06103",
      "https://arxiv.org/abs/1906.12192",
      "https://arxiv.org/abs/1808.06354",
      "https://arxiv.org/abs/1904.04849",
      "https://arxiv.org/abs/2006.16811",
      "https://arxiv.org/abs/1612.00593",
      "https://arxiv.org/abs/1706.02413",
      "https://arxiv.org/abs/1801.07829",
      "https://arxiv.org/abs/1801.07791",
      "https://arxiv.org/abs/1802.02669",
      "https://arxiv.org/abs/1611.08402",
      "https://arxiv.org/abs/1706.05206",
      "https://arxiv.org/abs/2012.09164",
      "https://arxiv.org/abs/1901.08150",
      "https://arxiv.org/abs/1902.07987",
      "https://arxiv.org/abs/2003.01332",
      "https://arxiv.org/abs/2106.07161",
      "https://arxiv.org/abs/1806.01261",
      "https://arxiv.org/abs/1905.05178",
      "https://arxiv.org/abs/1811.01287",
      "https://arxiv.org/abs/1905.02850",
      "https://arxiv.org/abs/1806.08804",
      "https://arxiv.org/abs/1511.05493",
      "https://arxiv.org/abs/1511.06391",
      "https://arxiv.org/abs/1907.00481",
      "https://arxiv.org/abs/1704.02901",
      "https://arxiv.org/abs/1904.08082",
      "https://arxiv.org/abs/1905.02850",
      "https://arxiv.org/abs/1905.10990",
      "https://arxiv.org/abs/1911.07979",
      "https://arxiv.org/abs/2006.16811",
      "https://arxiv.org/abs/2002.09518",
      "https://arxiv.org/abs/2102.11533",
      "https://arxiv.org/abs/1706.08566",
      "https://arxiv.org/abs/2003.03123",
      "https://arxiv.org/abs/1607.00653",
      "https://arxiv.org/abs/1809.10341",
      "https://arxiv.org/abs/1806.03536",
      "https://arxiv.org/abs/1611.07308",
      "https://arxiv.org/abs/1802.04407",
      "https://arxiv.org/abs/2001.07614",
      "https://arxiv.org/abs/1904.05530",
      "https://arxiv.org/abs/1905.05178",
      "https://arxiv.org/abs/1904.03751",
      "https://arxiv.org/abs/2006.07739",
      "https://arxiv.org/abs/1903.03894",
      "https://arxiv.org/abs/1802.09691",
      "https://arxiv.org/abs/2110.08727",
      "https://arxiv.org/abs/2110.14446",
      "https://arxiv.org/abs/1911.05485",
      "https://arxiv.org/abs/2003.00982",
      "https://arxiv.org/abs/1909.12223",
      "https://arxiv.org/abs/2006.06972",
      "https://arxiv.org/abs/1802.04364",
      "https://arxiv.org/abs/2006.10637",
      "https://arxiv.org/abs/1811.03508",
      "https://arxiv.org/abs/2010.13993",
      "https://arxiv.org/abs/2105.04854",
      "https://arxiv.org/abs/1706.02216",
      "https://arxiv.org/abs/1905.07953",
      "https://arxiv.org/abs/1907.04931",
      "https://arxiv.org/abs/2012.01380",
      "https://arxiv.org/abs/2004.11198",
      "https://arxiv.org/abs/2003.01332",
      "https://arxiv.org/abs/1903.02428"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Please cite [our paper](https://arxiv.org/abs/1903.02428) (and the respective papers of the methods used) if you use this code in your own work:\n\n```\n@inproceedings{Fey/Lenssen/2019,\n  title={Fast Graph Representation Learning with {PyTorch Geometric}},\n  author={Fey, Matthias and Lenssen, Jan E.},\n  booktitle={ICLR Workshop on Representation Learning on Graphs and Manifolds},\n  year={2019},\n}\n```\n\nFeel free to [email us](mailto:matthias.fey@tu-dortmund.de) if you wish your work to be listed in the [external resources](https://pytorch-geometric.readthedocs.io/en/latest/notes/resources.html).\nIf you notice anything unexpected, please open an [issue](https://github.com/pyg-team/pytorch_geometric/issues) and let us know.\nIf you have any questions or are missing a specific feature, feel free [to discuss them with us](https://github.com/pyg-team/pytorch_geometric/discussions).\nWe are motivated to constantly make PyG even better.\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "cff-version: 1.2.0\nmessage: \"Please cite our paper if you use this code in your own work.\"\ntitle: \"Fast Graph Representation Learning with PyTorch Geometric\"\nauthors:\n- family-names: \"Fey\"\n  given-names: \"Matthias\"\n- family-names: \"Lenssen\"\n  given-names: \"Jan Eric\"\ndate-released: 2019-05-06\nversion: 2.0.2\nlicense: MIT\nurl: \"https://github.com/pyg-team/pytorch_geometric\"",
      "technique": "File Exploration"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@inproceedings{Fey/Lenssen/2019,\n  title={Fast Graph Representation Learning with {PyTorch Geometric}},\n  author={Fey, Matthias and Lenssen, Jan E.},\n  booktitle={ICLR Workshop on Representation Learning on Graphs and Manifolds},\n  year={2019},\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.9061005469315193
      ],
      "excerpt": "        super().init(aggr=\"max\")  #: \"Max\" aggregation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9408513096603768,
        0.9093508677876494
      ],
      "excerpt": "ChebConv from Defferrard et al.: Convolutional Neural Networks on Graphs with Fast Localized Spectral Filtering (NIPS 2016) [Example] \nGATConv from Veli\u010dkovi\u0107 et al.: Graph Attention Networks (ICLR 2018) [Example] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.843913282744388,
        0.9936986034744933,
        0.9887450219383802,
        0.8955021755665358,
        0.9997914188835476,
        0.9390144779767221,
        0.9624718803385536,
        0.9647593804665807,
        0.9930549253821178,
        0.9999134923300821,
        0.9997986883830972,
        0.9953536575380425,
        0.9487049634188134,
        0.9891736960071701
      ],
      "excerpt": "* **[GCN2Conv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GCN2Conv)** from Chen *et al.*: [Simple and Deep Graph Convolutional Networks](https://arxiv.org/abs/2007.02133) (ICML 2020) [[**Example1**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/gcn2_cora.py), [**Example2**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/gcn2_ppi.py)] \n* **[SplineConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.SplineConv)** from Fey *et al.*: [SplineCNN: Fast Geometric Deep Learning with Continuous B-Spline Kernels](https://arxiv.org/abs/1711.08920) (CVPR 2018) [[**Example1**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/cora.py), [**Example2**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/faust.py)] \n* **[NNConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.NNConv)** from Gilmer *et al.*: [Neural Message Passing for Quantum Chemistry](https://arxiv.org/abs/1704.01212) (ICML 2017) [[**Example1**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/qm9_nn_conv.py), [**Example2**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/mnist_nn_conv.py)] \n* **[CGConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.CGConv)** from Xie and Grossman: [Crystal Graph Convolutional Neural Networks for an Accurate and Interpretable Prediction of Material Properties](https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.120.145301) (Physical Review Letters 120, 2018) \n* **[ECConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.ECConv)** from Simonovsky and Komodakis: [Edge-Conditioned Convolution on Graphs](https://arxiv.org/abs/1704.02901) (CVPR 2017) \n* **[EGConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.EGConv)** from Tailor *et al.*: [Adaptive Filters and Aggregator Fusion for Efficient Graph Convolutions](https://arxiv.org/abs/2104.01481) (GNNSys 2021) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/egc.py)] \n* **[GATv2Conv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GATv2Conv)** from Brody *et al.*: [How Attentive are Graph Attention Networks?](https://arxiv.org/abs/2105.14491) (CoRR 2021) \n* **[TransformerConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.TransformerConv)** from Shi *et al.*: [Masked Label Prediction: Unified Message Passing Model for Semi-Supervised Classification](https://arxiv.org/abs/2009.03509) (CoRR 2020) \n* **[SAGEConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.SAGEConv)** from Hamilton *et al.*: [Inductive Representation Learning on Large Graphs](https://arxiv.org/abs/1706.02216) (NIPS 2017) [[**Example1**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/reddit.py), [**Example2**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/ogbn_products_sage.py), [**Example3**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/graph_sage_unsup.py)] \n* **[GraphConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GraphConv)** from, *e.g.*, Morris *et al.*: [Weisfeiler and Leman Go Neural: Higher-order Graph Neural Networks](https://arxiv.org/abs/1810.02244) (AAAI 2019) \n* **[GatedGraphConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GatedGraphConv)** from Li *et al.*: [Gated Graph Sequence Neural Networks](https://arxiv.org/abs/1511.05493) (ICLR 2016) \n* **[ResGatedGraphConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.ResGatedGraphConv)** from Bresson and Laurent: [Residual Gated Graph ConvNets](https://arxiv.org/abs/1711.07553) (CoRR 2017) \n* **[GINConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GINConv)** from Xu *et al.*: [How Powerful are Graph Neural Networks?](https://arxiv.org/abs/1810.00826) (ICLR 2019) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/mutag_gin.py)] \n* **[GINEConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GINEConv)** from Hu *et al.*: [Strategies for Pre-training Graph Neural Networks](https://arxiv.org/abs/1905.12265) (ICLR 2020) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9884885263367339,
        0.9977686194911765,
        0.9996943765262207,
        0.9642347906747094,
        0.9582867839697129,
        0.969038662290801,
        0.9173217685557278,
        0.991857938097958
      ],
      "excerpt": "* **[SGConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.SGConv)** from Wu *et al.*: [Simplifying Graph Convolutional Networks](https://arxiv.org/abs/1902.07153) (CoRR 2019) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/sgc.py)] \n* **[APPNP](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.APPNP)** from Klicpera *et al.*: [Predict then Propagate: Graph Neural Networks meet Personalized PageRank](https://arxiv.org/abs/1810.05997) (ICLR 2019) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/benchmark/citation/appnp.py)] \n* **[MFConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.MFConv)** from Duvenaud *et al.*: [Convolutional Networks on Graphs for Learning Molecular Fingerprints](https://arxiv.org/abs/1509.09292) (NIPS 2015) \n* **[AGNNConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.AGNNConv)** from Thekumparampil *et al.*: [Attention-based Graph Neural Network for Semi-Supervised Learning](https://arxiv.org/abs/1803.03735) (CoRR 2017) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/agnn.py)] \n* **[TAGConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.TAGConv)** from Du *et al.*: [Topology Adaptive Graph Convolutional Networks](https://arxiv.org/abs/1710.10370) (CoRR 2017) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/tagcn.py)] \n* **[PNAConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.PNAConv)** from Corso *et al.*: [Principal Neighbourhood Aggregation for Graph Nets](https://arxiv.org/abs/2004.05718) (CoRR 2020) [**[Example](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/pna.py)**] \n* **[FAConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.FAConv)** from Bo *et al.*: [Beyond Low-Frequency Information in Graph Convolutional Networks](https://arxiv.org/abs/2101.00797) (AAAI 2021) \n* **[PDNConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.nn.conv.PDNConv)** from Rozemberczki *et al.*: [Pathfinder Discovery Networks for Neural Message Passing](https://arxiv.org/abs/2010.12878) (WWW 2021) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9315713340112508
      ],
      "excerpt": "* **[SignedConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.SignedConv)** from Derr *et al.*: [Signed Graph Convolutional Network](https://arxiv.org/abs/1808.06354) (ICDM 2018) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/signed_gcn.py)] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9953918116831576
      ],
      "excerpt": "* **[PANConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.PANConv)** from Ma *et al.*: [Path Integral Based Convolution and Pooling for Graph Neural Networks](https://arxiv.org/abs/2006.16811) (NeurIPS 2020) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.986674961991292,
        0.9987407237944324,
        0.9974474120011377,
        0.9999884168137603,
        0.9997976030920911,
        0.9939136163752627,
        0.9993335827315615,
        0.9999104757941796
      ],
      "excerpt": "* **[EdgeConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.EdgeConv)** from Wang *et al.*: [Dynamic Graph CNN for Learning on Point Clouds](https://arxiv.org/abs/1801.07829) (CoRR, 2018) [[**Example1**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/dgcnn_classification.py), [**Example2**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/dgcnn_segmentation.py)] \n* **[XConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.XConv)** from Li *et al.*: [PointCNN: Convolution On X-Transformed Points](https://arxiv.org/abs/1801.07791) (NeurIPS 2018) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/benchmark/points/point_cnn.py)] \n* **[PPFConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.PPFConv)** from Deng *et al.*: [PPFNet: Global Context Aware Local Features for Robust 3D Point Matching](https://arxiv.org/abs/1802.02669) (CVPR 2018) \n* **[GMMConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GMMConv)** from Monti *et al.*: [Geometric Deep Learning on Graphs and Manifolds using Mixture Model CNNs](https://arxiv.org/abs/1611.08402) (CVPR 2017) \n* **[FeaStConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.FeaStConv)** from Verma *et al.*: [FeaStNet: Feature-Steered Graph Convolutions for 3D Shape Analysis](https://arxiv.org/abs/1706.05206) (CVPR 2018) \n* **[PointTransformerConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.PointTransformerConv)** from Zhao *et al.*: [Point Transformer](https://arxiv.org/abs/2012.09164) (2020) \n* **[HypergraphConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.HypergraphConv)** from Bai *et al.*: [Hypergraph Convolution and Hypergraph Attention](https://arxiv.org/abs/1901.08150) (CoRR 2019) \n* **[GravNetConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GravNetConv)** from Qasim *et al.*: [Learning Representations of Irregular Particle-detector Geometry with Distance-weighted Graph Networks](https://arxiv.org/abs/1902.07987) (European Physics Journal C, 2019) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8615572643612818,
        0.9989018012145296
      ],
      "excerpt": "* **[HGTConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.HGTConv)** from Hu *et al.*: [Heterogeneous Graph Transformer](https://arxiv.org/abs/2003.01332) (WWW 2020) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/hetero/hgt_dblp.py)] \n* **[HEATConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.HEATonv)** from Mo *et al.*: [Heterogeneous Edge-Enhanced Graph Attention Network For Multi-Agent Trajectory Prediction](https://arxiv.org/abs/2106.07161) (CoRR 2021) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9999837616588486
      ],
      "excerpt": "Top-K Pooling from Gao and Ji: Graph U-Nets (ICML 2019), Cangea et al.: Towards Sparse Hierarchical Graph Classifiers (NeurIPS-W 2018) and Knyazev et al.: Understanding Attention and Generalization in Graph Neural Networks (ICLR-W 2019) [Example] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9977758483358454,
        0.9629824447775296
      ],
      "excerpt": "* **[GlobalAttention](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.glob.GlobalAttention)** from Li *et al.*: [Gated Graph Sequence Neural Networks](https://arxiv.org/abs/1511.05493) (ICLR 2016) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/benchmark/kernel/global_attention.py)] \n* **[Set2Set](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.glob.Set2Set)** from Vinyals *et al.*: [Order Matters: Sequence to Sequence for Sets](https://arxiv.org/abs/1511.06391) (ICLR 2016) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/benchmark/kernel/set2set.py)] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9633447744935616
      ],
      "excerpt": "* **[Dense MinCUT Pooling](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.dense.mincut_pool.dense_mincut_pool)** from Bianchi *et al.*: [MinCUT Pooling in Graph Neural Networks](https://arxiv.org/abs/1907.00481) (CoRR 2019) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/proteins_mincut_pool.py)] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9875538401027627,
        0.9999992404946496,
        0.9987134967910744,
        0.8991259262110224,
        0.9953918116831576
      ],
      "excerpt": "* **[Voxel Grid Pooling](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.pool.voxel_grid)** from, *e.g.*, Simonovsky and Komodakis: [Dynamic Edge-Conditioned Filters in Convolutional Neural Networks on Graphs](https://arxiv.org/abs/1704.02901) (CVPR 2017) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/mnist_voxel_grid.py)] \n* **[SAG Pooling](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.pool.SAGPooling)** from Lee *et al.*: [Self-Attention Graph Pooling](https://arxiv.org/abs/1904.08082) (ICML 2019) and Knyazev *et al.*: [Understanding Attention and Generalization in Graph Neural Networks](https://arxiv.org/abs/1905.02850) (ICLR-W 2019) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/benchmark/kernel/sag_pool.py)] \n* **[Edge Pooling](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.pool.EdgePooling)** from Diehl *et al.*: [Towards Graph Pooling by Edge Contraction](https://graphreason.github.io/papers/17.pdf) (ICML-W 2019) and Diehl: [Edge Contraction Pooling for Graph Neural Networks](https://arxiv.org/abs/1905.10990) (CoRR 2019) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/benchmark/kernel/edge_pool.py)] \n* **[ASAPooling](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.pool.ASAPooling)** from Ranjan *et al.*: [ASAP: Adaptive Structure Aware Pooling for Learning Hierarchical Graph Representations](https://arxiv.org/abs/1911.07979) (AAAI 2020) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/benchmark/kernel/asap.py)] \n* **[PANPooling](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.pool.PANPooling)** from Ma *et al.*: [Path Integral Based Convolution and Pooling for Graph Neural Networks](https://arxiv.org/abs/2006.16811) (NeurIPS 2020) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9295826264520044
      ],
      "excerpt": "SchNet from Sch\u00fctt et al.: SchNet: A Continuous-filter Convolutional Neural Network for Modeling Quantum Interactions (NIPS 2017) [Example] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9978763935235837
      ],
      "excerpt": "* **[Jumping Knowledge](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.JumpingKnowledge)** from Xu *et al.*: [Representation Learning on Graphs with Jumping Knowledge Networks](https://arxiv.org/abs/1806.03536) (ICML 2018) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/benchmark/kernel/gin.py#L54-L106)] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9932546116248896,
        0.989039450946341
      ],
      "excerpt": "    * [Variational Graph Auto-Encoders](https://arxiv.org/abs/1611.07308) from Kipf and Welling (NIPS-W 2016) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/autoencoder.py)] \n    * [Adversarially Regularized Graph Autoencoder for Graph Embedding](https://arxiv.org/abs/1802.04407) from Pan *et al.* (IJCAI 2018) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/argva_node_clustering.py)] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9999900206235276,
        0.9984215102163034,
        0.9742480800529159
      ],
      "excerpt": "* **[SEAL](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/seal_link_pred.py)** from Zhang and Chen: [Link Prediction Based on Graph Neural Networks](https://arxiv.org/pdf/1802.09691.pdf) (NeurIPS 2018) \n* **[RENet](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.RENet)** from Jin *et al.*: [Recurrent Event Network for Reasoning over Temporal Knowledge Graphs](https://arxiv.org/abs/1904.05530) (ICLR-W 2019) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/renet.py)] \n* **[GraphUNet](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GraphUNet)** from Gao and Ji: [Graph U-Nets](https://arxiv.org/abs/1905.05178) (ICML 2019) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/graph_unet.py)] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9213165032800995
      ],
      "excerpt": "* **[DeepGCN](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.DeepGCNLayer)** and the **[GENConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GENConv)** from Li *et al.*: [DeepGCNs: Can GCNs Go as Deep as CNNs?](https://arxiv.org/abs/1904.03751) (ICCV 2019) and [DeeperGCN: All You Need to Train Deeper GCNs](https://arxiv.org/abs/2006.07739) (CoRR 2020) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/ogbn_proteins_deepgcn.py)] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9617299176198826,
        0.9999684620845318,
        0.9248545993625413
      ],
      "excerpt": "* **[GNNExplainer](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GNNExplainer)** from Ying *et al.*: [GNNExplainer: Generating Explanations for Graph Neural Networks](https://arxiv.org/abs/1903.03894) (NeurIPS 2019) [[**Example1**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/gnn_explainer.py), [**Example2**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/gnn_explainer_ba_shapes.py)] \n* **SEAL** from Zhang and Chen: [Link Prediction Based on Graph Neural Networks](https://arxiv.org/abs/1802.09691) (NeurIPS 2018) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/seal_link_pred.py)] \n* **Graph-less Neural Networks** from Zhang *et al.*: [Graph-less Neural Networks: Teaching Old MLPs New Tricks via Distillation](https://arxiv.org/abs/2110.08727) (CoRR 2021) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/glnn.py)] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8517424717901281
      ],
      "excerpt": "New Benchmarks and Strong Simple Methods](https://arxiv.org/abs/2110.14446) (NeurIPS 2021) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/linkx.py)] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9770961165212665
      ],
      "excerpt": "GDC from Klicpera et al.: Diffusion Improves Graph Learning (NeurIPS 2019) [Example] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9828804311943758,
        0.9567128870401874,
        0.9548828391346469,
        0.9981791887881212,
        0.9196644509899022
      ],
      "excerpt": "* **[GraphSizeNorm](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.norm.GraphSizeNorm)** from Dwivedi *et al.*: [Benchmarking Graph Neural Networks](https://arxiv.org/abs/2003.00982) (CoRR 2020) \n* **[PairNorm](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.norm.PairNorm)** from Zhao and Akoglu: [PairNorm: Tackling Oversmoothing in GNNs](https://arxiv.org/abs/1909.12223) (ICLR 2020) \n* **[DiffGroupNorm](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.norm.DiffGroupNorm)** from Zhou *et al.*: [Towards Deeper Graph Neural Networks with Differentiable Group Normalization](https://arxiv.org/abs/2006.06972) (NeurIPS 2020) \n* **[Tree Decomposition](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.tree_decomposition)** from Jin *et al.*: [Junction Tree Variational Autoencoder for Molecular Graph Generation](https://arxiv.org/abs/1802.04364) (ICML 2018) \n* **[TGN](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.TGNMemory)** from Rossi *et al.*: [Temporal Graph Networks for Deep Learning on Dynamic Graphs](https://arxiv.org/abs/2006.10637) (GRL+ 2020) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/tgn.py)] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8592042527451763
      ],
      "excerpt": "* **[Local Degree Profile](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.transforms.LocalDegreeProfile)** from Cai and Wang: [A Simple yet Effective Baseline for Non-attribute Graph Classification](https://arxiv.org/abs/1811.03508) (CoRR 2018) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8380726314114488
      ],
      "excerpt": "* **[Gini](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.functional.gini)** and **[BRO](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.functional.bro)** regularization from Henderson *et al.*: [Improving Molecular Graph Neural Network Explainability with Orthonormalization and Induced Sparsity](https://arxiv.org/abs/2105.04854) (ICML 2021) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9982285528141691
      ],
      "excerpt": "NeighborSampler and NeighborLoader from Hamilton et al.: Inductive Representation Learning on Large Graphs (NIPS 2017) [Example1, Example2, Example3, Example4] \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/pyg-team/pytorch_geometric",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Contributing to PyG\nIf you are interested in contributing to PyG, your contributions will likely fall into one of the following two categories:\n\nYou want to implement a new feature:\nIn general, we accept any features as long as they fit the scope of this package. If you are unsure about this or need help on the design/implementation of your feature, post about it in an issue.\n\n\nYou want to fix a bug:\nFeel free to send a Pull Request any time you encounter a bug. Please provide a clear and concise description of what the bug was. If you are unsure about if this is a bug at all or how to fix, post about it in an issue.\n\n\n\nOnce you finish implementing a feature or bug-fix, please send a Pull Request to https://github.com/pyg-team/pytorch_geometric.\nDeveloping PyG\nTo develop PyG on your machine, here are some tips:\n\nUninstall all existing PyG installations:\n\npip uninstall torch-geometric\npip uninstall torch-geometric  # run this command twice\n\nClone a copy of PyG from source:\n\ngit clone https://github.com/pyg-team/pytorch_geometric\ncd pytorch_geometric\n\nIf you already cloned PyG from source, update it:\n\ngit pull\n\nInstall PyG in editable mode:\n\npython -m pip install -e .\nThis mode will symlink the Python files from the current local source tree into the Python install.\nHence, if you modify a Python file, you do not need to reinstall PyG again and again.\n\nEnsure that you have a working PyG installation by running the entire test suite with\n\npython -m pytest\nIn case an error occurs, please first check if all sub-packages (torch-scatter, torch-sparse, torch-cluster and torch-spline-conv) are on its latest reported version.\nUnit Testing\nThe PyG testing suite is located under test/.\nRun the entire test suite with\npython -m pytest\nor run individual test files, like python -m pytest --no-cov test/utils/test_convert.py, for individual test suites.\nContinuous Integration\nPyG uses GitHub Actions in combination with CodeCov for continuous integration.\nEverytime you send a Pull Request, your commit will be built and checked against the PyG guidelines:\n\nEnsure that your code is formatted correctly by testing against the styleguides of flake8 and pycodestyle:\n\npycodestyle torch_geometric test examples\nflake8 torch_geometric test examples\nIf you do not want to format your code manually, we recommend to use yapf.\n\nEnsure that the entire test suite passes and that code coverage roughly stays the same. Please feel encouraged to provide a test with your submitted code.\n\npython -m pytest\nBuilding Documentation\nTo build the documentation:\n\nBuild and install PyG from source.\nInstall Sphinx via pip install sphinx sphinx_rtd_theme.\nGenerate the documentation via:\n\ncd docs\nmake html\nThe documentation is now available to view by opening docs/build/html/index.html.",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2017-10-06T16:03:03Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-12T21:36:50Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.93610891610534
      ],
      "excerpt": "Whether you are a machine learning researcher or first-time user of machine learning toolkits, here are some reasons to try out PyG for machine learning on graph-structured data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9841863201552985,
        0.9685886657709513
      ],
      "excerpt": "  All it takes is 10-20 lines of code to get started with training a GNN model (see the next section for a quick tour). \n  PyG is PyTorch-on-the-rocks: It utilizes a tensor-centric API and keeps design principles close to vanilla PyTorch. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8024900866397584,
        0.9785500536382538
      ],
      "excerpt": "Comprehensive and well-maintained GNN models: \n  Most of the state-of-the-art Graph Neural Network architectures have been implemented by library developers or authors of research papers and are ready to be applied. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9799426586769445
      ],
      "excerpt": "  Making modifications to existing models or creating new architectures is simple, thanks to its easy-to-use message passing API, and a variety of operators and utility functions. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9883939105061484,
        0.9863983370238223,
        0.960415714686906,
        0.9048914783709132,
        0.8731705669251238
      ],
      "excerpt": "  We focus on the need of GNN applications in challenging real-world scenarios, and support learning on diverse types of graphs, including but not limited to: scalable GNNs for graphs with millions of nodes; dynamic GNNs for node predictions over time; heterogeneous GNNs with multiple node types and edge types. \nGraphGym integration: GraphGym lets users easily reproduce GNN experiments, is able to launch and analyze thousands of different GNN configurations, and is customizable by registering new modules to a GNN learning pipeline. \nIn this quick tour, we highlight the ease of creating and training a GNN model with only a few lines of code. \nIn the first glimpse of PyG, we implement the training of a GNN for classifying papers in a citation graph. \nFor this, we load the Cora dataset, and create a simple 2-layer GCN model using the pre-defined GCNConv: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8417699761456031,
        0.8510800543142539
      ],
      "excerpt": "    #: x: Node feature matrix of shape [num_nodes, in_channels] \n    #: edge_index: Graph connectivity matrix of shape [2, num_edges] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9531263896881546,
        0.8585045599104792
      ],
      "excerpt": "    pred = model(data.x, data.edge_index) \n    loss = F.cross_entropy(pred[data.train_mask], data.y[data.train_mask]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9899057426563476,
        0.8002722428089333
      ],
      "excerpt": "In addition to the easy application of existing GNNs, PyG makes it simple to implement custom Graph Neural Networks (see here for the accompanying tutorial). \nFor example, this is all it takes to implement the edge convolutional layer from Wang et al.: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8417699761456031,
        0.8510800543142539
      ],
      "excerpt": "    #: x: Node feature matrix of shape [num_nodes, in_channels] \n    #: edge_index: Graph connectivity matrix of shape [2, num_edges] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8748735339049636,
        0.92947435583347
      ],
      "excerpt": "    #: x_j: Source node features of shape [num_edges, in_channels] \n    #: x_i: Target node features of shape [num_edges, in_channels] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9974971358274796
      ],
      "excerpt": "Users are highly encouraged to check out the documentation, which contains additional tutorials on the essential functionalities of PyG, including data handling, creation of datasets and a full list of implemented methods, transforms, and datasets. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8538582335651342,
        0.9051252038347051,
        0.903371147083806,
        0.9859127517280235,
        0.9785257755980529,
        0.9364145212053303
      ],
      "excerpt": "PyG provides a multi-layer framework that enables users to build Graph Neural Network solutions on both low and high levels. \nIt comprises of the following components: \nThe PyG engine utilizes the powerful PyTorch deep learning framework, as well as additions of efficient CUDA libraries for operating on sparse data, e.g., torch-scatter, torch-sparse and torch-cluster. \nThe PyG storage handles data processing, transformation and loading pipelines. It is capable of handling and processing large-scale graph datasets, and provides effective solutions for heterogeneous graphs. It further provides a variety of sampling solutions, which enable training of GNNs on large-scale graphs. \nThe PyG operators bundle essential functionalities for implementing Graph Neural Networks. PyG supports important GNN building blocks that can be combined and applied to various parts of a GNN model, ensuring rich flexibility of GNN design. \nFinally, PyG provides an abundant set of GNN models, and examples that showcase GNN models on standard graph benchmarks. Thanks to its flexibility, users can easily build and modify custom GNN models to fit their specific needs. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9069431246035584
      ],
      "excerpt": "We list currently supported PyG models, layers and operators according to category: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8908742164459456
      ],
      "excerpt": "<summary><b>Expand to see all implemented GNN layers...</b></summary> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9626294075464483,
        0.976422947550182
      ],
      "excerpt": "Graph pooling layers combine the vectorial representations of a set of nodes in a graph (or a subgraph) into a single vector representation that summarizes its properties of nodes. \nIt is commonly applied to graph-level tasks, which require combining node features into a single graph representation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8507980841221007
      ],
      "excerpt": "<summary><b>Expand to see all implemented pooling layers...</b></summary> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8937592655025447
      ],
      "excerpt": "Unlike simple stacking of GNN layers, these models could involve pre-processing, additional learnable parameters, skip connections, graph coarsening, etc. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9576812267358109
      ],
      "excerpt": "<summary><b>Expand to see all implemented GNN models...</b></summary> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9366529675923345,
        0.9824583556215729
      ],
      "excerpt": "PyG comes with a rich set of neural network operators that are commonly used in many GNN models. \nThey follow an extensible design: It is easy to apply these operators and graph utilities to existing GNN layers and models to further enhance model performance. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9577483406181735
      ],
      "excerpt": "<summary><b>Expand to see all implemented GNN operators and utilities...</b></summary> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9612548032489732,
        0.9569047062122604,
        0.9500635488345188
      ],
      "excerpt": "PyG supports the implementation of Graph Neural Networks that can scale to large-scale graphs. \nSuch application is challenging since the entire graph, its associated features and the GNN parameters cannot fit into GPU memory. \nMany state-of-the-art scalability approaches tackle this challenge by sampling neighborhoods for mini-batch training, graph clustering and partitioning, or by using simplified GNN models. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8254502024218389
      ],
      "excerpt": "ClusterGCN from Chiang et al.: Cluster-GCN: An Efficient Algorithm for Training Deep and Large Graph Convolutional Networks (KDD 2019) [Example1, Example2] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.938297049548576
      ],
      "excerpt": "<summary><b>Expand to see all implemented scalable GNNs...</b></summary> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8094641855513587
      ],
      "excerpt": "Note: Binaries of older versions are also provided for PyTorch 1.4.0, PyTorch 1.5.0, PyTorch 1.6.0, PyTorch 1.7.0/1.7.1 and PyTorch 1.8.0/1.8.1 (following the same procedure). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Graph Neural Network Library for PyTorch",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/rusty1s/pytorch_geometric/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2295,
      "date": "Sun, 12 Dec 2021 22:36:20 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/pyg-team/pytorch_geometric/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "pyg-team/pytorch_geometric",
    "technique": "GitHub API"
  },
  "hasBuildFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/rusty1s/pytorch_geometric/master/docker/Dockerfile"
    ],
    "technique": "File Exploration"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/rusty1s/pytorch_geometric/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/rusty1s/pytorch_geometric/master/graphgym/run_batch.sh",
      "https://raw.githubusercontent.com/rusty1s/pytorch_geometric/master/graphgym/parallel.sh",
      "https://raw.githubusercontent.com/rusty1s/pytorch_geometric/master/graphgym/run_single.sh",
      "https://raw.githubusercontent.com/rusty1s/pytorch_geometric/master/conda/pytorch-geometric/build_conda.sh",
      "https://raw.githubusercontent.com/rusty1s/pytorch_geometric/master/conda/pyg/build_conda.sh",
      "https://raw.githubusercontent.com/rusty1s/pytorch_geometric/master/benchmark/citation/run.sh",
      "https://raw.githubusercontent.com/rusty1s/pytorch_geometric/master/docs/source/_figures/build.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8751666990581586
      ],
      "excerpt": "  If you are already familiar with PyTorch, utilizing PyG is straightforward. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9708693304104107,
        0.9906248903846466
      ],
      "excerpt": "git clone https://github.com/pyg-team/pytorch_geometric.git \ncd pytorch_geometric/graphgym \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8059070039141149
      ],
      "excerpt": "* **[SuperGAT](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.SuperGATConv)** from Kim and Oh: [How To Find Your Friendly Neighborhood: Graph Attention Design With Self-Supervision](https://openreview.net/forum?id=Wi5KUNlqWty) (ICLR 2021) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/super_gat.py)] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8735182262978313
      ],
      "excerpt": "* All variants of **[Graph Autoencoders](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GAE)** and **[Variational Autoencoders](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.VGAE)** from: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8182553539944044
      ],
      "excerpt": "* **[DeepGCN](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.DeepGCNLayer)** and the **[GENConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GENConv)** from Li *et al.*: [DeepGCNs: Can GCNs Go as Deep as CNNs?](https://arxiv.org/abs/1904.03751) (ICCV 2019) and [DeeperGCN: All You Need to Train Deeper GCNs](https://arxiv.org/abs/2006.07739) (CoRR 2020) [[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/ogbn_proteins_deepgcn.py)] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9953865740382201,
        0.9589030763475357,
        0.996714160028586,
        0.9650831590317516,
        0.9774924437005043
      ],
      "excerpt": "Update: You can now install PyG via Anaconda for all major OS/PyTorch/CUDA combinations \ud83e\udd17 \nGiven that you have PyTorch >= 1.8.0 installed, simply run \nconda install pyg -c pyg -c conda-forge \nWe alternatively provide pip wheels for all major OS/PyTorch/CUDA combinations, see here. \nTo install the binaries for PyTorch 1.10.0, simply run \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9389153030957631,
        0.9813992917238068
      ],
      "excerpt": "pip install torch-geometric \nwhere ${CUDA} should be replaced by either cpu, cu102, or cu113 depending on your PyTorch installation (torch.version.cuda). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8506852711490298,
        0.9401400739544492,
        0.8184747637333865
      ],
      "excerpt": "| Linux   | \u2705    | \u2705      | \u2705      | \n| Windows | \u2705    | \u2705      | \u2705      | \n| macOS   | \u2705    |         |         | \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8133367358507827,
        0.8133367358507827,
        0.9810906619337405,
        0.8362833379634937,
        0.8246805808180162,
        0.9389153030957631,
        0.9813992917238068
      ],
      "excerpt": "pip install torch-cluster -f https://data.pyg.org/whl/torch-1.10.0+${CUDA}.html \npip install torch-spline-conv -f https://data.pyg.org/whl/torch-1.10.0+${CUDA}.html \nTo install the binaries for PyTorch 1.9.0 and 1.9.1, simply run \npip install torch-scatter -f https://data.pyg.org/whl/torch-1.9.0+${CUDA}.html \npip install torch-sparse -f https://data.pyg.org/whl/torch-1.9.0+${CUDA}.html \npip install torch-geometric \nwhere ${CUDA} should be replaced by either cpu, cu102, or cu111 depending on your PyTorch installation (torch.version.cuda). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8506852711490298,
        0.9401400739544492,
        0.8184747637333865
      ],
      "excerpt": "| Linux   | \u2705    | \u2705      | \u2705      | \n| Windows | \u2705    | \u2705      | \u2705      | \n| macOS   | \u2705    |         |         | \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8093904984720357
      ],
      "excerpt": "  All it takes is 10-20 lines of code to get started with training a GNN model (see the next section for a quick tour). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516,
        0.8757982359298006
      ],
      "excerpt": "from torch_geometric.nn import GCNConv \nfrom torch_geometric.datasets import Planetoid \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8148957873087646
      ],
      "excerpt": "model = GCN(dataset.num_features, 16, dataset.num_classes) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8260169322483399
      ],
      "excerpt": "data = dataset[0] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8320969526222075
      ],
      "excerpt": "    pred = model(data.x, data.edge_index) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from torch_geometric.nn import MessagePassing \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8933006259275146
      ],
      "excerpt": "For a quick start, check out our examples in examples/. \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/pyg-team/pytorch_geometric/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Jinja",
      "Shell",
      "Dockerfile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "library-highlights)",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "pytorch_geometric",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "pyg-team",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/pyg-team/pytorch_geometric/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "A new minor version release, including further **bugfixes**, official **PyTorch 1.10** support, as well as additional **features** and **operators**:\r\n\r\n## Features\r\n\r\n* Added [video tutorials and Colabs](https://pytorch-geometric.readthedocs.io/en/latest/notes/colabs.html) from the [PyTorch Geometric Tutorial](https://antoniolonga.github.io/Pytorch_geometric_tutorials/index.html) project (thanks to @AntonioLonga)\r\n* Added the [`GraphMultisetTransformer`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.glob.GraphMultisetTransformer) operator (thanks to @JinheonBaek)\r\n* Added the [`PointTransformerConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.PointTransformerConv) operator (thanks to @QuanticDisaster)\r\n* Added the [`HEATConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.HEATConv) operator (thanks to @Xiaoyu006)\r\n* Added the [`PNA`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.PNA) GNN model (thanks to @RBendias)\r\n* Added the [`AddMetaPaths`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.AddMetaPaths) transform, which will add additional edge types to a [`HeteroData`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.HeteroData) object based on a list of metapaths (thanks to @wsad1)\r\n* Added the [`Data.to_heterogeneous`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data.to_heterogeneous) method to allow for the conversion from [`Data`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data) to [`HeteroData`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.HeteroData) objects\r\n* Added the [`AttributedGraphDataset`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.AttributedGraphDataset), containing a variety of attributes graphs\r\n* Added the [`Airports`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.Airports) datasets\r\n* Added the [`structured_negative_sampling_feasible`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.structured_negative_sampling_feasible) method, which checks if [`structured_negative_sampling`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.structured_negative_sampling) is feasible (thanks to @WuliangHuang)\r\n* [`GATConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GATConv) can now make use of multi-dimensional edge features to compute attention scores (thanks to @dongkwan-kim)\r\n* [`RandomNodeSplit`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.RandomNodeSplit) and [`RandomLinkSplit`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.RandomLinkSplit) now support [`HeteroData`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.HeteroData) as input\r\n* [`MessagePassing`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.message_passing.MessagePassing) inference can now be sped up via the `decomposed_layers` argument (thanks to @ZhouAo-ZA)\r\n* [`negative_sampling`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.negative_sampling) and [`batched_negative_sampling`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.batched_negative_sampling) now support negative sampling in bipartite graphs\r\n* [`HeteroConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.HeteroConv) now supports the inclusion of arbitrary node-level or edge-level information for the underlying `MessagePassing` operators\r\n* [`GNNExplainer`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GNNExplainer) now supports multiple node-level masks and explaining regression problems (thanks to @gregorkrz)\r\n\r\n## Minor Changes\r\n\r\n* [`Data.to_homogeneous`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.HeteroData.to_homogeneous) will now add `node_type` information to the homogeneous [`Data`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data) object\r\n* [`GINEConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GINEConv) now allows to transform edge features automatically in case their dimensionalities do not match (thanks to @CaypoH) \r\n* [`OGB_MAG`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.OGB_MAG) will now add `node_year` information to paper nodes \r\n* [`Entities`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.Entities) datasets do now allow the processing of [`HeteroData`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.HeteroData) objects via the `hetero=True` option\r\n* [`Batch`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Batch) objects can now be batched together to form super batches\r\n* Added heterogeneous graph support for [`Center`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.Center), [`Constant`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.Constant) and [`LinearTransformation`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.LinearTransformation) transformations\r\n* [`HeteroConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.HeteroConv) now allows to return \"stacked\" embeddings\r\n* The `batch` vector of a [`Batch`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Batch) object will now be initialized on the GPU in case other attributes are held in GPU memory\r\n\r\n## Bugfixes\r\n\r\n* Fixed the `num_neighbors` argument of [`NeighborLoader`](https://pytorch-geometric.readthedocs.io/en/latest/modules/loader.html#torch_geometric.loader.NeighborLoader) in order to specify an edge-type specific number of neighbors\r\n* Fixed the `collate` policy of lists of integers/strings to return nested lists\r\n* Fixed the [`Delaunay`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.Delaunay) transformation in case the `face` attribute is not present in the data\r\n* Fixed the [`TGNMemory`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.TGNMemory) module to only read from the latest update (thanks to @cwh104504)\r\n* Fixed the `pickle.PicklingError` when [`Batch`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Batch) objects are used in a `torch.multiprocessing.manager.Queue()` (thanks to @RasmusOrsoe)\r\n* Fixed an issue with `_parent` state changing after pickling of [`Data`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data) objects (thanks to @zepx)\r\n* Fixed the [`ToUndirected`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.ToUndirected) transformation in case the number of edges and nodes are equal (thanks to @lmkmkrcc)\r\n* Fixed the [`from_networkx`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.from_networkx) routine in case node-level and edge-level features share the same names\r\n* Removed the `num_nodes` warning when creating [`PairData`](https://pytorch-geometric.readthedocs.io/en/latest/notes/batching.html#pairs-of-graphs) objects\r\n* Fixed the initialization of the `GeneralMultiLayer` module in GraphGym (thanks to @fjulian)\r\n* Fixed custom model registration in GraphGym\r\n* Fixed a clash in the `run_dir` naming of GraphGym (thanks to @fjulian)\r\n* Includes a fix to prevent a GraphGym crash in case ROC-score is undefined (thanks to @fjulian)\r\n* Fixed the [`Batch.from_data_list`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Batch.from_data_list) routine on dataset slices (thanks to @dtortorella)\r\n* Fixed the [`MetaPath2Vec`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.MetaPath2Vec) model in case there exists isolated nodes\r\n* Fixed [`torch_geometric.utils.coalesce`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.coalesce) with CUDA tensors",
        "dateCreated": "2021-10-26T11:10:29Z",
        "datePublished": "2021-10-26T12:41:58Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/2.0.2",
        "name": "2.0.2",
        "tag_name": "2.0.2",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/2.0.2",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/52053822",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/2.0.2"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "# PyG 2.0.1\r\n\r\nThis is a minor release, bringing some emergency fixes to PyG 2.0.\r\n\r\n## Bugfixes\r\n\r\n* Fixed a bug in [`loader.DataLoader`](https://pytorch-geometric.readthedocs.io/en/latest/modules/loader.html#torch_geometric.loader.DataLoader) that raised a `PicklingError` for `num_workers > 0` (thanks to @r-echeveste, @arglog and @RishabhPandit-00)\r\n* Fixed a bug in the creation of [`data.Batch`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Batch) objects in case customized [`data.Data`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data) objects expect non-default arguments (thanks to @Emiyalzn)\r\n* Fixed a bug in which `SparseTensor` attributes could not be batched along single dimensions (thanks to @rubenwiersma)",
        "dateCreated": "2021-09-16T06:34:43Z",
        "datePublished": "2021-09-16T07:22:57Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/2.0.1",
        "name": "2.0.1",
        "tag_name": "2.0.1",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/2.0.1",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/49653095",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/2.0.1"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "# PyG 2.0 :tada: :tada: :tada:\r\n\r\n**PyG** *(PyTorch Geometric)* has been moved from my own personal account [`rusty1s`](https://github.com/rusty1s) to its own organization account [`pyg-team`](https://github.com/pyg-team) to emphasize the ongoing collaboration between TU Dortmund University, Stanford University and many great external contributors. With this, we are releasing **PyG 2.0**, a new major release that brings sophisticated [**heterogeneous graph support**](#heterogeneous-graph-support), [**GraphGym integration**](#managing-experiments-with-graphgym) and [**many other exciting features**](#additional-features) to PyG.\r\n\r\n<p align=\"center\">\r\n  <img height=\"150\" src=\"https://raw.githubusercontent.com/pyg-team/pytorch_geometric/master/docs/source/_static/img/pyg1.svg?sanitize=true\" />\r\n</p>\r\n\r\nIf you encounter any bugs in this new release, please do not hesitate to [create an issue](https://github.com/pyg-team/pytorch_geometric/issues/new/choose).\r\n\r\n## Heterogeneous Graph Support\r\n\r\nWe finally provide full **heterogeneous graph support** in PyG 2.0. See [here](https://pytorch-geometric.readthedocs.io/en/latest/notes/heterogeneous.html) for the accompanying tutorial.\r\n\r\n### Highlights\r\n\r\n* **Heterogeneous Graph Storage:** Heterogeneous graphs can now be stored in their own dedicated [**`data.HeteroData`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.HeteroData) class (thanks to @yaoyaowd):\r\n  ```python\r\n  from torch_geometric.data import HeteroData\r\n  \r\n  data = HeteroData()\r\n\r\n  # Create two node types \"paper\" and \"author\" holding a single feature matrix:\r\n  data['paper'].x = torch.randn(num_papers, num_paper_features)\r\n  data['author'].x = torch.randn(num_authors, num_authors_features)\r\n\r\n  # Create an edge type (\"paper\", \"written_by\", \"author\") holding its graph connectivity:\r\n  data['paper', 'written_by', 'author'].edge_index = ...  # [2, num_edges]\r\n  ```\r\n  \r\n  [`data.HeteroData`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.HeteroData) behaves similar to a regular homgeneous [`data.Data`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data) object:\r\n  \r\n  ```python\r\n  print(data['paper'].num_nodes)\r\n  print(data['paper', 'written_by', 'author'].num_edges)\r\n  data = data.to('cuda')\r\n  ```\r\n  \r\n* **Heterogeneous Mini-Batch Loading:** Heterogeneous graphs can be converted to mini-batches for many small and single giant graphs via the [`loader.DataLoader`](https://pytorch-geometric.readthedocs.io/en/latest/modules/loader.html#torch_geometric.loader.DataLoader) and [`loader.NeighborLoader`](https://pytorch-geometric.readthedocs.io/en/latest/modules/loader.html#torch_geometric.loader.NeighborLoader) loaders, respectively. These loaders can now handle both homogeneous and heterogeneous graphs:\r\n  ```python\r\n  from torch_geometric.loader import DataLoader\r\n\r\n  loader = DataLoader(heterogeneous_graph_dataset, batch_size=32, shuffle=True)\r\n\r\n  from torch_geometric.loader import NeighborLoader\r\n\r\n  loader = NeighborLoader(heterogeneous_graph, num_neighbors=[30, 30], batch_size=128,\r\n                          input_nodes=('paper', data['paper'].train_mask), shuffle=True)\r\n  ```\r\n\r\n* **Heterogeneous Graph Neural Networks:** Heterogeneous GNNs can now easily be created from homogeneous ones via [`nn.to_hetero`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.to_hetero_transformer.to_hetero) and [`nn.to_hetero_with_bases`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.to_hetero_with_bases_transformer.to_hetero_with_bases). These processes take an existing GNN model and duplicate their message functions to account for different node and edge types:\r\n  ```python\r\n  from torch_geometric.nn import SAGEConv, to_hetero\r\n\r\n  class GNN(torch.nn.Module):\r\n      def __init__(hidden_channels, out_channels):\r\n          super().__init__()\r\n          self.conv1 = SAGEConv((-1, -1), hidden_channels)\r\n          self.conv2 = SAGEConv((-1, -1), out_channels)\r\n\r\n      def forward(self, x, edge_index):\r\n          x = self.conv1(x, edge_index).relu()\r\n          x = self.conv2(x, edge_index)\r\n          return x\r\n\r\n  model = GNN(hidden_channels=64, out_channels=dataset.num_classes)\r\n  model = to_hetero(model, data.metadata(), aggr='sum')\r\n  ```\r\n  \r\n  <p align=\"center\">\r\n    <img height=\"400px\" src=\"https://raw.githubusercontent.com/pyg-team/pytorch_geometric/master/docs/source/_figures/to_hetero.svg?sanitize=true\" />\r\n  </p>\r\n  \r\n### Additional Features\r\n\r\n* A [heterogeneous graph tutorial](https://pytorch-geometric.readthedocs.io/en/latest/notes/heterogeneous.html) describing all newly released features (thanks to @mrjel)\r\n* A variety of [heterogeneous GNN examples](https://github.com/pyg-team/pytorch_geometric/tree/master/examples/hetero)\r\n* Support for lazy initialization of GNN operators by passing `-1` to the `in_channels` argument (implemented via [`nn.dense.Linear`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.dense.Linear)).\r\n  This allows to avoid calculating and keeping track of input tensor sizes, simplyfing the creation of heterogeneous graph models with varying feature dimensionalities across different node and edge types. Lazy initialization is supported for all existing PyG operators (thanks to @yaoyaowd):\r\n  ```python\r\n  from torch_geometric.nn import GATConv\r\n  \r\n  conv = GATConv(-1, 64)\r\n  \r\n  # We can initialize the model\u2019s parameters by calling it once:\r\n  conv(x, edge_index)\r\n  ```\r\n* [`nn.conv.HeteroConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.HeteroConv): A generic wrapper for computing graph convolution on heterogeneous graphs (thanks to @RexYing)\r\n* [`nn.conv.HGTConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.HGTConv): The heterogeneous graph transformer operator from the [\"Heterogeneous Graph Transformer\"](https://arxiv.org/abs/2003.01332) paper\r\n* [`loader.HGTLoader`](https://pytorch-geometric.readthedocs.io/en/latest/modules/loader.html#torch_geometric.loader.HGTLoader): The heterogeneous graph sampler from the [\"Heterogeneous Graph Transformer\"](https://arxiv.org/abs/2003.01332) paper for learning on large-scale heterogeneous graphs (thanks to @chantat)\r\n* Support for heterogeneous graph transformations in [`transforms.AddSelfLoops`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.AddSelfLoops), [`transforms.ToSparseTensor`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.ToSparseTensor), [`transforms.NormalizeFeatures`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.NormalizeFeatures) and [`transforms.ToUndirected`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.ToUndirected)\r\n* New heterogeneous graph datasets: [`datasets.OGB_MAG`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.OGB_MAG), [`datasets.IMDB`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.IMDB), [`datasets.DBLP`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.DBLP) and [`datasets.LastFM`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.LastFM)\r\n* Support for converting heterogeneous graphs to \"typed\" homogeneous ones via [`data.HeteroData.to_homogeneous`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.HeteroData.to_homogeneous) (thanks to @yzhao062)\r\n* A [tutorial](https://pytorch-geometric.readthedocs.io/en/latest/notes/load_csv.html) on creating a [`data.HeteroData`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.HeteroData) object from raw `*.csv` files (thanks to @yaoyaowd and @mrjel)\r\n* An [example](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/pytorch_lightning/relational_gnn.py) to scale heterogeneous graph models via [PyTorch Lightning](https://www.pytorchlightning.ai/)\r\n\r\n## Managing Experiments with GraphGym\r\n\r\n**GraphGym** is now officially supported in PyG 2.0 via [`torch_geometric.graphgym`](https://pytorch-geometric.readthedocs.io/en/latest/modules/graphgym.html). See [here](https://pytorch-geometric.readthedocs.io/en/latest/notes/graphgym.html) for the accompanying tutorial. Overall, GraphGym is a platform for designing and evaluating Graph Neural Networks from configuration files via a highly modularized pipeline (thanks to @JiaxuanYou):\r\n\r\n1. GraphGym is the perfect place to start learning about *standardized GNN implementation and evaluation*\r\n2. GraphGym provides a *simple interface to try out thousands of GNN architectures in parallel* to find the best design for your specific task\r\n3. GraphGym lets you easily do *hyper-parameter search* and *visualize what design choices are better*\r\n\r\n<img width=100% src=\"https://raw.githubusercontent.com/pyg-team/pytorch_geometric/master/docs/source/_figures/graphgym_results.png\" />\r\n\r\n## Breaking Changes\r\n\r\n* The [`datasets.AMiner`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.AMiner) dataset now returns a [`data.HeteroData`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.HeteroData) object. See [here](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/hetero/metapath2vec.py) for our updated `MetaPath2Vec` example on `AMiner`.\r\n* `transforms.AddTrainValTestMask` has been replaced in favour of [`transforms.RandomNodeSplit`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.RandomNodeSplit)\r\n* Since the storage layout of [`data.Data`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data) significantly changed in order to support heterogenous graphs, already processed datasets need to be re-processed by deleting the `root/processed` folder.\r\n* [`data.Data.__cat_dim__`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data.__cat_dim__) and [`data.Data.__inc__`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data.__inc__) now expect additional input arguments:\r\n  ```python\r\n  def __cat_dim__(self, key, value, *args, **kwargs):\r\n      pass\r\n    \r\n  def __inc__(self, key, value, *args, **kwargs):\r\n      pass\r\n  ```\r\n  In case you modified [`__cat_dim__`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data.__cat_dim__) or [`__inc__`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data.__inc__) functionality in a customized [`data.Data`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data) object, please ensure to apply the above changes.\r\n  \r\n## Deprecations\r\n\r\n* [`nn.conv.PointConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.PointConv) is deprecated in favour of [`nn.conv.PointNetConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.PointNetConv) (thanks to @lelouedec and @QuanticDisaster)\r\n* [`utils.train_test_split_edges`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.train_test_split_edges) is deprecated in favour of the new [`transforms.RandomLinkSplit`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.RandomLinkSplit) transform\r\n* All data loaders were moved from `torch_geometric.data` to `torch_geometric.loader`, *e.g.*:\r\n  ```python\r\n  from torch_geometric.loader import DataLoader\r\n  ```\r\n* [`loader.NeighborSampler`](https://pytorch-geometric.readthedocs.io/en/latest/modules/loader.html#torch_geometric.loader.NeighborSampler) is deprecated in favour of [`loader.NeighborLoader`](https://pytorch-geometric.readthedocs.io/en/latest/modules/loader.html#torch_geometric.loader.NeighborLoader) in order to simplify the application of neighbor sampling and to support both neighbor sampling in homogeneous and heterogeneous graphs\r\n* `Data.contains_isolated_nodes` and `Data.contains_self_loops` are deprecated in favour of [`Data.has_isolated_nodes`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data.has_isolated_nodes) and [`Data.has_self_loops`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data.has_self_loops), respectively\r\n\r\n## Additional Features\r\n\r\n* [`torch-scatter`](https://github.com/rusty1s/pytorch_scatter) and [`torch-sparse`](https://github.com/rusty1s/pytorch_sparse) now support half-precision computation via `torch.half`, bringing half-precision support to PyG\r\n* Added a [GNN cheatsheet](https://pytorch-geometric.readthedocs.io/en/latest/notes/cheatsheet.html) to the documentation, which lets you more easily choose a GNN operator for your specific need\r\n* Added the [`transforms.RandomLinkSplit`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.RandomLinkSplit) transform to easily perform a random edge-level split (thanks to @RexYing)\r\n* Added the [`torch_geometric.profile`](https://pytorch-geometric.readthedocs.io/en/latest/modules/profile.html) package which provides a variety of utility functions for benchmarking runtimes and memory consumptions of GNN models (thanks to @yzhao062)\r\n* [`nn.conv.MessagePassing`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.message_passing.MessagePassing) now supports hooks for `propagate`, `message`, `aggregate` and `update` functions, *e.g.* via [`nn.conv.MessagePassing.register_propagate_forward_hook`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.message_passing.MessagePassing.register_propagate_forward_pre_hook)\r\n* Added the [`nn.conv.GeneralConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GeneralConv) operator that can handle most GNN use-cases (*e.g.*, w/ or w/o edge features, ...) and has enough design options to be tuned (*e.g.*, attention, skip-connections, ...) (thanks to @JiaxuanYou)\r\n* Added the [`nn.models.RECT_L`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.RECT_L) model for learning with completely-imbalanced labels (thanks to @Fizyhsp)\r\n* Added the Pathfinder Discovery Network Convolutional operator [`nn.conv.PDNConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.PDNConv) (thanks to @benedekrozemberczki)\r\n* Added basic GNN model support as part of the `nn.models` package, *e.g.*, [`nn.model.GCN`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GCN), [`nn.models.GraphSAGE`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GraphSAGE), [`nn.models.GAT`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GAT) and [`nn.models.GIN`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GIN). Pre-defined models support customizing hidden feature dimensionality, number of layers, activation, normalization and jumping knowledge (thanks to @PabloAMC)\r\n* Added the [`datasets.MD17`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.MD17) datasets (thanks to @M-R-Schaefer)\r\n* Added a link-prediction [example](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/rgcn_link_pred.py) of [`nn.conv.RGCNConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.RGCNConv)  (thanks to @moritzblum)\r\n* Added an [example](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/mem_pool.py) of [`nn.pool.MemPooling`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.pool.MemPooling) (thanks to @wsad1)\r\n* Added a `return_attention_weights` argument for [`nn.conv.TransformerConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.TransformerConv) (thanks to @wsad1)\r\n* Batch support for [`utils.homophily`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.homophily) (thanks to @wsad1)\r\n* Added a `batch_size` argument to [`utils.to_dense_batch`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.to_dense_batch) (thanks to @jimmiebtlr)\r\n\r\n## Minor Changes\r\n\r\n* Heavily improved loading times of `import torch_geometric`\r\n* [`nn.Sequential`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.sequential.Sequential) is now fully jittable\r\n* [`nn.conv.LEConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.LEConv) is now fully jittable (thanks to @lucagrementieri)\r\n* [`nn.conv.GENConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GENConv) can now make use of `\"add\"`, `\"mean\"` or `\"max\"` aggregations (thanks to @riskiem)\r\n* Attributes of type `torch.nn.utils.rnn.PackedSequence` are now correctly handled by [`data.Data`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.HeteroData) and [`data.HeteroData`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data) (thanks to @WuliangHuang)\r\n* Added support for [`data.record_stream()`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data.record_stream) in order to allow for data prefetching (thanks to @FarzanT)\r\n* Added a `max_num_neighbors` attribute to [`nn.models.SchNet`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.SchNet) and [`nn.models.DimeNet`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.DimeNet) (thanks to @nec4)\r\n* [`nn.conv.MessagePassing`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.message_passing.MessagePassing) is now jittable in case `message`, `aggregate` and `update` return multiple arguments (thanks to @PhilippThoelke)\r\n* [`utils.from_networkx`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.from_networkx) now supports grouping of node-level and edge-level features (thanks to @PabloAMC)\r\n* Transforms now inherit from `transforms.BaseTransform` to ease type checking (thanks to @CCInc)\r\n* Added support for the deletion of data attributes via `del data[key]` (thanks to @Linux-cpp-lisp)\r\n\r\n## Bugfixes\r\n\r\n* The [`transforms.LinearTransformation`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.LinearTransformation) transform now correctly transposes the input matrix before applying the transformation (thanks to @beneisner)\r\n* Fixed a bug in [`benchmark/kernel`](https://github.com/pyg-team/pytorch_geometric/tree/master/benchmark/kernel) that prevented the application of `DiffPool` on the `IMDB-BINARY` dataset (thanks to @dongZheX)\r\n* Feature dimensionalities of [`datasets.WikipediaNetwork`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.WikipediaNetwork) do now match which the official reported ones in case `geom_gcn_preprocess=True` (thanks to @ZhuYun97 and @GitEventhandler)\r\n* Fixed a bug in the [`datasets.DynamicFAUST`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.DynamicFAUST) dataset in which `data.num_nodes` was undefined (thanks to @koustav123)\r\n* Fixed a bug in which [`nn.models.GNNExplainer`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GNNExplainer) could not handle GNN operators that add self-loops to the graph in case self-loops were already present (thanks to @tw200464tw and @NithyaBhasker)\r\n* [`nn.norm.LayerNorm`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.norm.LayerNorm) may no longer produce NaN gradients (thanks to @fbragman)\r\n* Fixed a bug in which it was not possible to customize `networkx` drawing arguments in [`nn.models.GNNExplainer.visualize_subgraph()`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GNNExplainer.visualize_subgraph) (thanks to @jvansan)\r\n* [`transforms.RemoveIsolatedNodes`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.RemoveIsolatedNodes) now correctly removes isolated nodes in case `data.num_nodes` is explicitely set (thanks to @blakechi)",
        "dateCreated": "2021-09-13T07:00:32Z",
        "datePublished": "2021-09-13T07:48:54Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/2.0.0",
        "name": "2.0.0",
        "tag_name": "2.0.0",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/2.0.0",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/49435574",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/2.0.0"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "## Datasets\r\n\r\n* The [`GitHub`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.GitHub) Web and ML developer dataset (thanks to @benedekrozemberczki)\r\n* The [`FacebookPagePage`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.FacebookPagePage) dataset (thanks to @benedekrozemberczki)\r\n* The [`Twitch`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.Twitch) gamer datasets (thanks to @benedekrozemberczki)\r\n* The [`DeezerEurope`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.DeezerEurope) dataset (thanks to @benedekrozemberczki)\r\n* The [`GemsecDeezer`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.GemsecDeezer) dataset (thanks to @benedekrozemberczki)\r\n* The [`LastFMAsia`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.LastFMAsia) dataset (thanks to @benedekrozemberczki)\r\n* The [`WikipediaNetwork`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.WikipediaNetwork) datasets does now allow usage of the raw dataset as introduced in [Multi-scale Attributed Node Embedding](https://arxiv.org/abs/1909.13021) (thanks to @benedekrozemberczki)\r\n\r\n## Bugfixes\r\n\r\n* Fixed an error in [`DeepGCNLayer`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html?#torch_geometric.nn.models.DeepGCNLayer) in case no normalization layer is provided (thanks to @lukasfolle)\r\n* Fixed a bug in [`GNNExplainer`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html?#torch_geometric.nn.models.GNNExplainer) which mixed the loss computation for graph-level and node-level predictions (thanks to @panisson and @wsad1)",
        "dateCreated": "2021-06-26T08:25:09Z",
        "datePublished": "2021-06-26T08:50:08Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.7.2",
        "name": "1.7.2",
        "tag_name": "1.7.2",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.7.2",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/45271128",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.7.2"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "A minor release that brings **PyTorch 1.9.0** and **Python 3.9** support to PyTorch Geometric. In case you are in the process of updating to PyTorch 1.9.0, please re-install the external dependencies for PyTorch 1.9.0 as well (`torch-scatter` and `torch-sparse`).\r\n\r\n## Features\r\n\r\n* **[`EGConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.EGConv)** (thanks to @shyam196)\r\n* **[`GATv2Conv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GATv2Conv)** (thanks to @shakedbr)\r\n* **[`GraphNorm`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.norm.GraphNorm)** normalization layer\r\n* **[`GNNExplainer`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GNNExplainer)** now supports explaining graph-level predictions (thanks to @wsad1)\r\n* **[`bro`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.functional.bro)** and **[`gini`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.functional.gini)** regularization (thanks to @rhsimplex)\r\n* [`train_test_split_edges()`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.train_test_split_edges) and [`to_undirected()`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.to_undirected) can now edge features (thanks to @saiden89 and @SherylHYX)\r\n* Datasets can now be accessed with `np.ndarray` as well (thanks to @josephenguehard)\r\n* [`dense_to_sparse`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.dense_to_sparse) can now handle batched adjacency matrices\r\n* `numba` is now an optional dependency\r\n\r\n## Datasets\r\n\r\n* The tree-structured fake news propagation **[`UPFD`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.UPFD)** dataset (thanks to @YingtongDou)\r\n* The large-scale [`AmazonProducts`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.AmazonProducts) graph from the [GraphSAINT](https://arxiv.org/abs/1907.04931) paper\r\n* Added support for two more datasets in the [`SNAPDataset`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.SNAPDataset) benchmark suite (thanks to @SherylHYX)\r\n\r\n## Issues\r\n\r\n* Fixed an issue in which [`SuperGATConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.SuperGATConv) used all positive edges for computing the auxiliary loss (thanks to @anniekmyatt)\r\n* Fixed a bug in which [`MemPooling`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.pool.MemPooling) produced NaN gradients (thanks to @wsad1)\r\n* Fixed an issue in which the `schnetpack` package was required for training [`SchNet`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.SchNet) (thanks to @mshuaibii)\r\n* Modfied [`XConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.XConv) to sample without replacement in case `dilation > 1` (thanks to @mayur-ag)\r\n* [`GraphSAINTSampler`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.GraphSAINTSampler) can now be used in combination with PyTorch Lightning\r\n* Fixed a bug in [`HypergraphConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.HypergraphConv) in case `num_nodes > num_edges` (thanks to @THinnerichs)",
        "dateCreated": "2021-06-17T07:40:29Z",
        "datePublished": "2021-06-17T08:19:28Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.7.1",
        "name": "1.7.1",
        "tag_name": "1.7.1",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.7.1",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/44778127",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.7.1"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "## Major Features\r\n\r\n* **[Temporal Graph Network](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.TGNMemory)** and an [example utilizing graph attention](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/tgn.py),  (thanks to @emalgorithm)\r\n* **[CorrectAndSmooth](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.CorrectAndSmooth)** and an [example on `ogbn-products`](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/correct_and_smooth.py)\r\n* **PyTorch Lightning support**, see [here](https://github.com/rusty1s/pytorch_geometric/tree/master/examples/pytorch_lightning) for the accompanying examples (thanks to @tchaton)\r\n* **[`Sequential`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.sequential.Sequential)** API, see [here](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.sequential.Sequential) for the accompanying example\r\n* **[FiLMConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.FiLMConv)** and an [example on `PPI`](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/film.py) (thanks to @ldv1)\r\n* **[SuperGAT](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.SuperGATConv)** and an [example on `Cora`](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/super_gat.py) (thanks to @dongkwan-kim)\r\n* **[MemPooling](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.pool.MemPooling)** (thanks to @wsad1)\r\n* **[PANConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.PANConv)** (thanks to @YuGuangWang)\r\n* **[DiffGroupNorm](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.norm.DiffGroupNorm)** (thanks to @wsad1)\r\n* **[ResGatedGraphConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.ResGatedGraphConv)** (thanks to @ldv1)\r\n* **[FAConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.FAConv)** (thanks to @wsad1)\r\n* **[AttentiveFP](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.AttentiveFP)** model for molecular graph learning and an [example on `ESOL`](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/attentive_fp.py) (thanks to @thegodone)\r\n* **[`Shadow` k-hop Sampler](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.ShaDowKHopSampler)** (currently requires `torch-sparse` from master)\r\n\r\n## Additional Features\r\n\r\n* **[Inductive Deep Graph Infomax example](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/infomax_inductive.py)** (thanks to @harrygcoppock)\r\n* **[WLConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.WLConv)** and an example of the [Weisfeiler-Lehman subtree kernel](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/wl_kernel.py) (thanks to @chrsmrrs)\r\n* **[LabelPropagation](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.LabelPropagation)**\r\n* [`AddTrainValTestMask`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.AddTrainValTestMask) transform for creating various splitting strategies (thanks to @dongkwan-kim)\r\n* [`homophily`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.homophily) measurement (thanks to @ldv1)\r\n* [`to_cugraph`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.to_cugraph) conversion\r\n\r\n## Minor Changes\r\n\r\n* More memory-efficient implementation of [`GCN2Conv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GCN2Conv)\r\n* Improved [`TransformerConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.TransformerConv) with the `beta` argument being input and message dependent (thanks to @ldv1)\r\n* [`NeighborSampler`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.NeighborSampler) now works with `SparseTensor` and supports an additional `transform` argument\r\n* [`Batch.from_data_list`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Batch.from_data_list) now supports batching along a new dimension via returning `None` in [`Data.__cat_dim__`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.Data.__cat_dim__), see [here](https://pytorch-geometric.readthedocs.io/en/latest/notes/batching.html#batching-along-new-dimensions) for the accompanying tutorial (thanks to @Linux-cpp-lisp)\r\n* [`MetaLayer`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.meta.MetaLayer) is now \"jittable\"\r\n* Lazy loading of `torch_geometric.nn` and `torch_geometric.datasets`, leading to faster imports (thanks to @Linux-cpp-lisp)\r\n* [`GNNExplainer`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GNNExplainer) now supports various output formats of the underlying GNN model (thanks to @wsad1)\r\n\r\n## Datasets\r\n\r\n* [`JODIE` datasets](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.JODIEDataset) for temporal graph learning\r\n* [`WordNet18RR`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.WordNet18RR) (thanks to @minhtriet)\r\n* [`Reddit2`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.Reddit2)\r\n* [`MixHopSyntheticDataset`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.MixHopSyntheticDataset) (thanks to @ldv1)\r\n* [`NELL`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.NELL)\r\n\r\n## Bugfixes\r\n\r\n* Fixed `SparseAdam` usage in [`examples/metapath2vec.py`](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/metapath2vec.py#L31) (thanks to @declanmillar)\r\n* Fixed [`from_networkx`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.from_networkx) to support empty edge lists (thanks to @shakedbr)\r\n* Fixed a numerical issue in `softmax`\r\n* Fixed an issue in [`DenseGraphConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.dense.DenseGraphConv) with `aggr=\"max\"` (thanks to @quqixun)\r\n* Fixed the norm computation in [GraphSAINTSampler](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.GraphSAINTSampler) (thanks to @austintwang)\r\n* [`Cartesian`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.Cartesian) and [`LocalCartesian`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.LocalCartesian) now compute Cartesian coordinates from target to source nodes (thanks to @ldv1)\r\n",
        "dateCreated": "2021-04-09T07:47:10Z",
        "datePublished": "2021-04-09T08:44:51Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.7.0",
        "name": "1.7.0",
        "tag_name": "1.7.0",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.7.0",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/41169533",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.7.0"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "* Fixed a crucial bug in which `InMemoryDataset`s with the usage of `pre_transform` led to an error\r\n* New datasets: [`WikipediaNetwork`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.WikipediaNetwork) and [`Actor`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.Actor)\r\n* Added homophily ratio utility function: [`torch_geometric.utils.homophily_ratio`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.homophily_ratio)",
        "dateCreated": "2020-12-02T14:53:23Z",
        "datePublished": "2020-12-02T14:57:09Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.6.3",
        "name": "1.6.3",
        "tag_name": "1.6.3",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.6.3",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/34696414",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.6.3"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "## Features\r\n\r\n* [**`GCN2Conv`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GCN2Conv) [[Cora example](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/gcn2_cora.py), [PPI example](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/gcn2_ppi.py)]\r\n* [**`TransformerConv`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.TransformerConv)\r\n* New Dataset: [**`WebKB`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.WebKB)\r\n* New Google Colab: [**Explaining GNN Model Predictions using Captum**](https://pytorch-geometric.readthedocs.io/en/latest/notes/colabs.html) (thanks to @m30m)\r\n* **Distributed training examples** for [node classification](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/multi_gpu/distributed_sampling.py) and [graph classification](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/multi_gpu/distributed_sampling.py) (thanks to @maqy1995)\r\n* **`Node2Vec`** can now handle *different* `p` and `q` values other than `1` (`torch-cluster` update required)\r\n* [**`GraphSAGE`** *unsupervised* training example](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/graph_sage_unsup.py) (thanks to @yuanx749)\r\n* [**Linear `GAE`** example](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/autoencoder.py#L12) (thanks to @GuillaumeSalha)\r\n\r\n## Minor improvements\r\n\r\n* The [`SIGN` example](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/sign.py) now operates on mini-batches of nodes\r\n* Improved data loading runtime of `InMemoryDataset`s\r\n* [`NeighborSampler`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.NeighborSampler) does now work with `SparseTensor` as input\r\n* [`ToUndirected`](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.ToUndirected) transform in order to convert directed graphs to undirected ones\r\n* [`GNNExplainer`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GNNExplainer) does now allow for customizable edge and node feature loss reduction\r\n* `aggr` can now passed to any GNN based on the `MessagePassing` interface (thanks to @m30m) \r\n* Runtime improvements in [`SEAL`](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/seal_link_pred.py) (thanks to @muhanzhang)\r\n* Runtime improvements in `torch_geometric.utils.softmax` (thanks to @Book1996)\r\n* [`GAE.recon_loss`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GAE) now supports custom negative edge indices (thanks to @reshinthadithyan)\r\n* Faster `spmm` computation and `random_walk` sampling on CPU (`torch-sparse` and `torch-cluster` updates required)\r\n* [`DataParallel`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.data_parallel.DataParallel) does now support the `follow_batch` argument\r\n* Parallel approximate PPR computation in the [`GDC` transform](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.GDC) (thanks to @klicperajo)\r\n* Improved documentation by providing an autosummary of all subpackages (thanks to @m30m)\r\n* Improved documentation on how edge weights are handled in various GNNs (thanks to @m30m)\r\n\r\n## Bugfixes\r\n\r\n* Fixed a bug in `GATConv` when computing attention coefficients in bipartite graphs\r\n* Fixed a bug in `GraphSAINTSampler` that led to wrong edge feature sampling\r\n* Fixed the `DimeNet` pretraining link\r\n* Fixed a bug in processing `ego-twitter` and `ego-gplus` of the `SNAPDataset` collection\r\n* Fixed a number of broken dataset URLs (`ICEWS18`, `QM9`, `QM7b`, `MoleculeNet`, `Entities`, `PPI`, `Reddit`, `MNISTSuperpixels`, `ShapeNet`)\r\n* Fixed a bug in which `MessagePassing.jittable()` tried to write to a file without permission (thanks to @twoertwein)\r\n* `GCNConv` does not require `edge_weight` in case `normalize=False`\r\n* `Batch.num_graphs` will now report the correct amount of graphs in case of zero-sized graphs",
        "dateCreated": "2020-11-27T06:54:10Z",
        "datePublished": "2020-11-27T07:18:21Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.6.2",
        "name": "1.6.2",
        "tag_name": "1.6.2",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.6.2",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/34491739",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.6.2"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "This is a **minor release**, mostly focusing on **PyTorch 1.6.0 support**. All external wheels are now also available for PyTorch 1.6.0.\r\n\r\n## New Features\r\n\r\n* **[`WikiCS`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.WikiCS)** dataset\r\n* **DeepGCN** via [`GENConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GENConv) and [`DeepGCNLayer`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.DeepGCNLayer) (thanks to @lightaime)\r\n* **[`PairNorm`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.norm.PairNorm)** (thanks to @gupta-abhay)\r\n* **[`LayerNorm`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.norm.LayerNorm)** (thanks to @aluo-x)\r\n\r\n## Bugfixes\r\n\r\n* Fixed a bug which prevented [`GNNExplainer`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GNNExplainer) to work with [`GATConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GATConv)\r\n* Fixed the [`MessagePassing.jittable`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.message_passing.MessagePassing.jittable) call when installing PyG via `pip`\r\n* Fixed a bug in `torch-sparse` where reduce functions with `dim=0` did not yield the correct result\r\n* Fixed a bug in `torch-sparse` which suppressed all warnings",
        "dateCreated": "2020-08-05T13:19:58Z",
        "datePublished": "2020-08-05T13:22:26Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.6.1",
        "name": "1.6.1",
        "tag_name": "1.6.1",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.6.1",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/29363271",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.6.1"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "**A new major release, introducing TorchScript support, memory-efficient aggregations, bipartite GNN modules, static graphs and much more!**\r\n\r\n## Major Features\r\n\r\n* **TorchScript support**, see [here](https://pytorch-geometric.readthedocs.io/en/latest/notes/jit.html) for the accompanying tutorial (thanks to @lgray and @liaopeiyuan)\r\n* **Memory-efficient aggregations** via `torch_sparse.SparseTensor`, see [here](https://pytorch-geometric.readthedocs.io/en/latest/notes/sparse_tensor.html) for the accompanying tutorial\r\n* Most GNN modules can now operate on **bipartite graphs** (and some of them can also operate on *different feature dimensionalities* for source and target nodes), useful for neighbor sampling or heterogeneous graphs:\r\n```python\r\nconv = SAGEConv(in_channels=(32, 64), out_channels=64)\r\nout = conv((x_src, x_dst), edge_index)\r\n```\r\n* **Static graph support**:\r\n```python\r\nconv = GCNConv(in_channels=32, out_channels=64)\r\n\r\nx = torch.randn(batch_size, num_nodes, in_channels)\r\nout = conv(x, edge_index)\r\nprint(out.size())\r\n>>> torch.Size([batch_size, num_nodes, out_channels])\r\n```\r\n\r\n## Additional Features\r\n\r\n* [**`PNAConv`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.PNAConv) (thanks to @lukecavabarrett and @gcorso)\r\n* [**Pre-Trained `DimeNet`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.DimeNet) on QM9\r\n* [**SEAL**](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/seal_link_pred.py) link prediction example (thanks to @muhanzhang)\r\n* [**`ClusterGCNConv`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.ClusterGCNConv)\r\n* [**Cluster-GCN PPI**](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/cluster_gcn_ppi.py) example (thanks to @CFF-Dream)\r\n* [**`WeightedEdgeSampler`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.GraphSAINTEdgeSampler) for GraphSAINT (thanks to @KiddoZhu)\r\n* Better `num_workers` support for [**`GraphSAINT`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.GraphSAINTSampler)\r\n* The automatic addition of self-loops can now be disabled via the **`add_self_loops`** argument, *e.g.*, for [GCNConv](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GCNConv)\r\n\r\n## Breaking Changes\r\n\r\n* **Memory-efficient [`RGCNConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.RGCNConv)**: The old `RGCNConv` implementation has been moved to [`FastRGCNConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.FastRGCNConv)\r\n\r\n## Complementary Frameworks\r\n\r\n* [**DeepSNAP**](https://github.com/snap-stanford/deepsnap): A PyTorch library that bridges between graph libraries such as NetworkX and PyTorch Geometric\r\n* [**PyTorch Geometric Temporal**](https://github.com/benedekrozemberczki/pytorch_geometric_temporal): A temporal GNN library built upon PyTorch Geometric\r\n\r\n## Datasets\r\n\r\n* [**`GNNBenchmarkDataset`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.GNNBenchmarkDataset) suite from the [Benchmarking Graph Neural Networks](https://arxiv.org/abs/2003.00982) paper\r\n* [**`WordNet18`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.WordNet18)\r\n\r\n## Bugfixes\r\n\r\n* Fixed a bug in the [`VGAE`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.VGAE) KL-loss computation (thanks to @GuillaumeSalha)",
        "dateCreated": "2020-07-07T06:24:14Z",
        "datePublished": "2020-07-07T06:27:50Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.6.0",
        "name": "1.6.0",
        "tag_name": "1.6.0",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.6.0",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/28297934",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.6.0"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "This release is a big one thanks to many wonderful contributors. You guys are awesome!\r\n\r\n## Breaking Changes and Highlights\r\n\r\n* [**`NeighborSampler`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.NeighborSampler) got completely revamped: it's now much faster, allows for parallel sampling, and allows to easily apply skip-connections or self-loops. See [`examples/reddit.py`](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/reddit.py) or the newly introduced OGB examples ([`examples/ogbn_products_sage.py`](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/ogbn_products_sage.py) and [`examples/ogbn_products_gat.py`](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/ogbn_products_gat.py)). The latter also sets a new SOTA on the [OGB leaderboards](https://ogb.stanford.edu/docs/leader_nodeprop/) (reaching **0.7945 \u00b1 0.0059 test accuracy**)\r\n* [**`SAGEConv`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.SAGEConv) now uses `concat=True` by default, and there is no option to disable it anymore\r\n* [**`Node2Vec`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.Node2Vec) got enhanced by a parallel sampling mechanism, and as a result, its API slightly changed\r\n* [**`MetaPath2Vec`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.MetaPath2Vec): The first model in PyG that is able to operate on heteregenous graphs\r\n* [**`GNNExplainer`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.GNNExplainer): Generating explanations for graph neural networks\r\n* [**`GraphSAINT`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.GraphSAINTSampler): A graph sampling based inductive learning method\r\n* [**`SchNet`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.SchNet) model for learning on molecular graphs, comes with **pre-trained weights** for each target of the [`QM9`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.QM9) dataset (thanks to @Nyuten)\r\n\r\n## Additional Features\r\n\r\n* [**`ASAPooling`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.pool.ASAPooling): Adaptive structure aware pooling for learning hierarchical graph representations (thanks to @ekagra-ranjan)\r\n* [**`ARGVA`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.ARGVA) node clustering example, see [`examples/argva_node_clustering.py`](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/argva_node_clustering.py) (thanks to @gsoosk)\r\n* [**`MFConv`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.MFConv): Molecular fingerprint graph convolution operator (thanks to @rhsimplex)\r\n* [**`GIN-E-Conv`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GINEConv) that extends the [`GINConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GINConv) to also account for edge features\r\n* [**`DimeNet`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.models.DimeNet): Directional message passing for molecular graphs\r\n* [**`SIGN`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.SIGN): Scalable inception graph neural networks\r\n* [**`GravNetConv`**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GravNetConv) (thanks to @jkiesele)\r\n\r\n## Datasets\r\n\r\n* [`Yelp`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.Yelp)\r\n* [`Flickr`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.Flickr)\r\n* [`AMiner`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.AMiner) (first real heterogeneous graph)\r\n\r\n## Minor changes\r\n\r\n* [`GATConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.GATConv) can now return attention weights via the `return_attention_weights` argument (thanks to @douglasrizzo)\r\n* [`InMemoryDataset`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.InMemoryDataset) now has a `copy` method that converts sliced datasets back into a contiguous memory layout\r\n* [`Planetoid`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.Planetoid) got enhanced by the ability to let users choose between different splitting methods (thanks to @dongkwan-kim)\r\n* [`k_hop_subgraph`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.k_hop_subgraph): Computes the `k`-hop subgraph around a subset of nodes\r\n* [`geodesic_distance`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.geodesic_distance): Geodesic distances can now be computed in parallel (thanks to @jannessm)\r\n* [`tree_decomposition`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.tree_decomposition): The tree decompostion algorithm for generating junction trees from molecules\r\n* [`SortPool`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.glob.global_sort_pool) benchmark script now uses 1-D convolutions after pooling, leading to better performance (thanks to @muhanzhang)\r\n\r\n## Bugfixes\r\n\r\n* Fixed a bug in [`write_off`](https://pytorch-geometric.readthedocs.io/en/latest/modules/io.html#torch_geometric.io.write_off)\r\n* Fixed a bug in the processing of the [`GEDDataset`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.GEDDataset) dataset\r\n* [`to_networkx`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.to_networkx) conversion can now also properly handle non-tensor attributes\r\n* Fixed a bug in [`read_obj`](https://pytorch-geometric.readthedocs.io/en/latest/modules/io.html#torch_geometric.io.read_obj) (thanks to @mwussow)",
        "dateCreated": "2020-05-25T05:02:23Z",
        "datePublished": "2020-05-25T05:31:41Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.5.0",
        "name": "1.5.0",
        "tag_name": "1.5.0",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.5.0",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/26849773",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.5.0"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "## Features\r\n\r\n* [**Cluster-GCN**](https://arxiv.org/abs/1905.07953) via [`ClusterData`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.ClusterData) and [`ClusterLoader`](https://pytorch-geometric.readthedocs.io/en/latest/modules/data.html#torch_geometric.data.ClusterLoader) for operating on large-scale graphs, see [`examples/cluster_gcn.py`](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/cluster_gcn.py) for an example on how to use\r\n* Added a tutorial about [advanced mini-batching scenarios](https://pytorch-geometric.readthedocs.io/en/latest/notes/batching.html)\r\n* Added a [`tensorboard`](https://github.com/rusty1s/pytorch_geometric/blob/master/examples/tensorboard_logging.py) logging example\r\n\r\n## Datasets\r\n\r\n* [`CitationFull`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.CitationFull): The full citation network dataset suite\r\n* [`SNAPDataset`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.SNAPDataset): A subset of graph datasets from the SNAP dataset collection\r\n* [`SuiteSparseMatrixCollection`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.SuiteSparseMatrixCollection)\r\n* [`TrackMLParticleTrackingDataset`](https://pytorch-geometric.readthedocs.io/en/latest/modules/datasets.html#torch_geometric.datasets.TrackMLParticleTrackingDataset)\r\n\r\n## Minor Changes\r\n\r\n* Added the `concat` argument to [`SAGEConv`](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.SAGEConv)\r\n* Outsourced the [`train_test_split_edges`](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.train_test_split_edges) method of the graph autoencoder `GAE` class to `torch_geometric.utils`\r\n\r\n## Bugfixes\r\n\r\n* Fixed `SplineConv` compatibility with latest `torch-spline-conv` package\r\n* `trimesh` conversion utilities do not longer result in a permutation of the input data",
        "dateCreated": "2020-03-17T17:55:20Z",
        "datePublished": "2020-03-17T18:05:42Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.4.3",
        "name": "1.4.3",
        "tag_name": "1.4.3",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.4.3",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/24605964",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.4.3"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "## Minor Changes\r\n\r\n* There are now Python wheels available for `torch-scatter` and `torch-sparse` which should make the installation procedure much more user-friendly. Simply run\r\n```\r\npip install torch-scatter==latest+${CUDA} torch-sparse==latest+${CUDA} -f https://pytorch-geometric.com/whl/torch-1.4.0.html\r\npip install torch-geometric\r\n```\r\nwhere `${CUDA}` should be replaced by either `cpu`, `cu92`, `cu100` or `cu101` depending on your PyTorch installation.\r\n* `torch-cluster` is now an optional dependency. All methods that rely on `torch-cluster` will result in an error requesting you to install `torch-cluster`.\r\n* `torch_geometric.data.Dataset` can now also be indexed and shuffled:\r\n```python\r\ndataset.shuffle()[:50]\r\n```\r\n## Bugfixes\r\n\r\n* Fixed a bug that prevented the user from saving `MessagePassing` modules.\r\n* Fixed a bug in `RGCNConv` when using `root_weight=False`.",
        "dateCreated": "2020-02-18T15:18:01Z",
        "datePublished": "2020-02-18T15:26:06Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.4.2",
        "name": "1.4.2",
        "tag_name": "1.4.2",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.4.2",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/23771049",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.4.2"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "This release mainly focuses on `torch-scatter=2.0` support. As a result, PyTorch Geometric now **requires PyTorch 1.4**. If you are in the process of updating to PyTorch 1.4, please ensure that you also re-install all related external packages.\r\n\r\n## Features\r\n\r\n* [**Graph Diffusion Convolution**](https://pytorch-geometric.readthedocs.io/en/latest/modules/transforms.html#torch_geometric.transforms.GDC)\r\n* [**MinCUT Pooling**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.dense.mincut_pool.dense_mincut_pool)\r\n* [**CGCNNConv**](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.CGConv)\r\n* `TUDataset` cleaned versions, containing only non-isomorphic graphs\r\n* `GridSampling` transform\r\n* `ShapeNet` dataset now comes with normals and better split options\r\n* TriMesh conversion utilities\r\n* `ToSLIC` transform for superpixel generation from images\r\n* Re-writing of `MessagePassing` interface with custom `aggregate` methods (no API changes)\r\n\r\n## Bugfixes\r\n\r\n* Fixed some failure modes of `from_networkx`.",
        "dateCreated": "2020-02-04T12:02:53Z",
        "datePublished": "2020-02-04T11:57:21Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.4.1",
        "name": "1.4.1",
        "tag_name": "1.4.1",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.4.1",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/23371117",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.4.1"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "This release focuses on Pytorch 1.2 support and removes all `torch.bool` deprecation warnings. As a result, this release now **requires PyTorch 1.2**. If you are in the process of updating to PyTorch 1.2, please ensure that you also re-install all related external packages.\r\n\r\nOverall, this release brings the following new features/bugfixes:\r\n\r\n## Features\r\n\r\n* Prints out a warning in case the `pre_transform` and `pre_filter` arguments differ from an already processed version\r\n\r\n## Bugfixes\r\n\r\n* Removed all `torch.bool` deprecation warnings\r\n* Fixed `ARGA` initialization bug\r\n* Fixed a pre-processing bug in `QM9`",
        "dateCreated": "2019-10-04T08:07:55Z",
        "datePublished": "2019-10-04T08:18:31Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.3.2",
        "name": "1.3.2",
        "tag_name": "1.3.2",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.3.2",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/20467243",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.3.2"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "This is a minor release which is mostly distributed for official PyTorch 1.2 support. In addition, it provides minor bugfixes and the following new features:\r\n\r\n## Modules\r\n\r\n* Non-normalized `ChebConv` in combination with a largest eigenvalue transform\r\n* `TAGCN`\r\n* Graph U-Net\r\n* `Node2Vec`\r\n* `EdgePooling`\r\n* Alternative `GMMConv` formulation with separate kernels\r\n* Alternative Top-K pooling formulation based on thresholds with examples on synthetic `COLORS` and `TRIANGLES` datasets\r\n\r\n## Datasets\r\n\r\n* Pascal VOC 2011 with Berkeley keypoint annotations (`PascalVOCKeypoints`)\r\n* `DBP15K` dataset\r\n* `WILLOWObjectClass` dataset\r\n\r\nPlease also update related external packages via, *e.g.*:\r\n```\r\n$ pip install --upgrade torch-cluster\r\n```\r\n",
        "dateCreated": "2019-08-29T07:39:05Z",
        "datePublished": "2019-08-29T07:41:53Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.3.1",
        "name": "1.3.1",
        "tag_name": "1.3.1",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.3.1",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/19613998",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.3.1"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "* Support for giant graph handling using `NeighborSampler` and bipartite message passing operators\r\n* Debugging support using the new `debug` API\r\n* Fixed `TUDataset` download errors\r\n* Added `FeasStConv` module\r\n* Improved `networkx` conversion functionality\r\n* Improved `Data` and `DataLoader` handling with customizable `number_of_nodes` (*e.g.* for holding two graphs in a single `Data` object)\r\n* Added `GeniePath` example\r\n* Added `SAGPool` module\r\n* Added geodesic distance computation using `gdist` (optional)\r\n* Improved `PointNet` and `DGCNN` classification and segmentation examples\r\n* Added `subgraph` functionality\r\n* Fixed `GMMConv`\r\n* Added a bunch of new datasets\r\n* Added fast implementations for random graph generation\r\n* Improved `loop` API\r\n* Minor bugfixes\r\n\r\nThanks to all contributors!",
        "dateCreated": "2019-06-29T14:18:13Z",
        "datePublished": "2019-06-29T14:25:42Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.3.0",
        "name": "1.3.0",
        "tag_name": "1.3.0",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.3.0",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/18310273",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.3.0"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "* More convenient self-loop API (including addition of edge weights)\r\n* Small bugfixes, *.e.g.*, DiffPool NaNs and empty edge indices treatment\r\n* New datasets have been added:\r\n  * `GEDDataset`\r\n  * `DynamicFAUST`\r\n  * `TOSCA`\r\n  * `SHREC2016`",
        "dateCreated": "2019-05-22T07:58:54Z",
        "datePublished": "2019-05-22T08:01:24Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.2.1",
        "name": "1.2.1",
        "tag_name": "1.2.1",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.2.1",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/17508233",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.2.1"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "* New models and operators, e.g., RENet, Signed Graph Convolution, Deep Graph Infomax, PPFNet, ...\r\n* Minor bugfixes\r\n* New converts\r\n\r\n",
        "dateCreated": "2019-04-29T07:25:35Z",
        "datePublished": "2019-04-29T07:29:13Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.2.0",
        "name": "1.2.0",
        "tag_name": "1.2.0",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.2.0",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/17033078",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.2.0"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "* bugfixes for bipartite message passing API",
        "dateCreated": "2019-04-05T05:26:38Z",
        "datePublished": "2019-04-05T05:28:39Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.1.2",
        "name": "1.1.2",
        "tag_name": "1.1.2",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.1.2",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/16572534",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.1.2"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "`PointConv` bugfix for bipartite graphs.",
        "dateCreated": "2019-04-02T05:28:34Z",
        "datePublished": "2019-04-02T05:33:38Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.1.1",
        "name": "1.1.1",
        "tag_name": "1.1.1",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.1.1",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/16492693",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.1.1"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "This release includes:\r\n\r\n* All Variants of Graph Autoencoders\r\n* Gated Graph Conv\r\n* `DataParallel` bugfixes\r\n* New transforms (Line Graph Transformation, Local Degree Profile, Sample Points with Normals)\r\n* PointNet++ example",
        "dateCreated": "2019-04-01T06:41:32Z",
        "datePublished": "2019-04-01T06:46:16Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.1.0",
        "name": "1.1.0",
        "tag_name": "1.1.0",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.1.0",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/16467293",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.1.0"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "* SGC and APPNP layer",
        "dateCreated": "2019-03-07T17:13:50Z",
        "datePublished": "2019-03-07T17:14:50Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.0.3",
        "name": "1.0.3",
        "tag_name": "1.0.3",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.0.3",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/15976912",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.0.3"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "* Added `remove_faces` parameter for face transforms",
        "dateCreated": "2019-01-25T13:32:07Z",
        "datePublished": "2019-01-25T13:33:00Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.0.2",
        "name": "1.0.2",
        "tag_name": "1.0.2",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.0.2",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/15181895",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.0.2"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "* Finally completed documentation\r\n* Finally achieved 100% code coverage (every single line is tested)\r\n* Fixed a few minor bugs\r\n* Added the GlobalAttention layer from Li et al.",
        "dateCreated": "2019-01-15T19:02:02Z",
        "datePublished": "2019-01-15T19:03:23Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.0.1",
        "name": "1.0.1",
        "tag_name": "1.0.1",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.0.1",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/14990623",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.0.1"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "We made a bunch of improvements to PyTorch Geometric and added various new convolution and pooling operators, e.g., top_k pooling, PointCNN, Iterative Farthest Point Sampling, PointNet++, ...",
        "dateCreated": "2018-12-18T12:35:15Z",
        "datePublished": "2018-12-18T12:45:06Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/1.0.0",
        "name": "1.0.0",
        "tag_name": "1.0.0",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/1.0.0",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/14591483",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/1.0.0"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "* minor bug fixes (e.g. calls to `torch-sparse` had wrong argument order)\r\n* new operators and examples (GINConv and Infomax example)\r\n* added helpful evaluation functions",
        "dateCreated": "2018-10-20T03:58:11Z",
        "datePublished": "2018-10-20T04:00:16Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/0.3.1",
        "name": "0.3.1",
        "tag_name": "0.3.1",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/0.3.1",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/13555241",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/0.3.1"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "PyTorch 0.4.1 compatibility",
        "dateCreated": "2018-08-13T13:09:00Z",
        "datePublished": "2018-08-13T13:16:56Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/0.3.0",
        "name": "0.3.0",
        "tag_name": "0.3.0",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/0.3.0",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/12376630",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/0.3.0"
      },
      {
        "authorType": "User",
        "author_name": "rusty1s",
        "body": "",
        "dateCreated": "2018-05-25T08:32:36Z",
        "datePublished": "2018-05-25T08:33:33Z",
        "html_url": "https://github.com/pyg-team/pytorch_geometric/releases/tag/0.1.1",
        "name": "0.1.1",
        "tag_name": "0.1.1",
        "tarball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/tarball/0.1.1",
        "url": "https://api.github.com/repos/pyg-team/pytorch_geometric/releases/11173568",
        "zipball_url": "https://api.github.com/repos/pyg-team/pytorch_geometric/zipball/0.1.1"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 13302,
      "date": "Sun, 12 Dec 2021 22:36:20 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "pytorch",
      "geometric-deep-learning",
      "graph-neural-networks",
      "deep-learning",
      "graph-convolutional-networks"
    ],
    "technique": "GitHub API"
  }
}