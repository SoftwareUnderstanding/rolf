{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1804.02767](https://arxiv.org/abs/1804.02767",
      "https://arxiv.org/abs/1804.02767"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8298595258759821
      ],
      "excerpt": "2020-05-12 00:11:35 [INFO]  5800 samples in file ./VOC2012/train_list.txt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8298595258759821
      ],
      "excerpt": "2020-05-12 00:11:35 [INFO]  200 samples in file ./VOC2012/val_list.txt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9598596565459202
      ],
      "excerpt": "anchors (list|tuple): anchor\u6846\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u4e3aNone\u65f6\u8868\u793a\u4f7f\u7528\u9ed8\u8ba4\u503c [[10, 13], [16, 30], [33, 23], [30, 61], [62, 45], [59, 119], [116, 90], [156, 198], [373, 326]]\u3002 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8187756947909643,
        0.8232969498734352
      ],
      "excerpt": "tree = ET.parse(filename) \nsize = tree.find('size') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8232969498734352,
        0.8232969498734352,
        0.8232969498734352,
        0.8232969498734352,
        0.8232969498734352
      ],
      "excerpt": "    bbox = obj.find('bndbox') \n    x_min = float(bbox.find('xmin').text) - 1 \n    y_min = float(bbox.find('ymin').text) - 1 \n    x_max = float(bbox.find('xmax').text) - 1 \n    y_max = float(bbox.find('ymax').text) - 1 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9030859728368266,
        0.9030859728368266
      ],
      "excerpt": "                      cluster_area - intersection + 1e-10) \n#: iou_ = intersection / (box_area + cluster_area - intersection + 1e-10) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8714162992508173
      ],
      "excerpt": "anchors = sorted(anchors, key=lambda x: x[0] * x[1]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8968592401678916
      ],
      "excerpt": "13,11, 17,15, 23,17, 29,23, 41,29, 68,33, 51,46, 93,57, 135,95 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8665716475375693
      ],
      "excerpt": "    if score < threshold: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8090016440670298
      ],
      "excerpt": "class LaneFinder(object): \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Sharpiless/paddlex-vehicle-detection-with-YOLOv3",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-06-11T10:58:55Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-06T01:21:47Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9270387729422259
      ],
      "excerpt": "for i, obj in enumerate(Objects): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for anchor in anchors: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9160101096309535
      ],
      "excerpt": "the average iou is: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.807631595615733
      ],
      "excerpt": "model.evaluate(eval_dataset, batch_size=1, epoch_id=None, metric=None, return_details=False) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8304436466355067
      ],
      "excerpt": "    \"\"\"Kernels used for image processing\"\"\" \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8308591183485566
      ],
      "excerpt": "    them as a square.  M transforms x,y from trapezoid to square for \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9016592443775179
      ],
      "excerpt": "    \"\"\"These are verticies used for clipping the image. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9211468609766289,
        0.9835783074627923
      ],
      "excerpt": "    and produces a new video with the traffic lanes highlighted and statistics about where \n    the car is relative to the center of the lane shown. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8222514974627967
      ],
      "excerpt": "    self.thresholder   = tools.ImageThresholder() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8222514974627967,
        0.8222514974627967
      ],
      "excerpt": "    self.histFitter    = tools.HistogramLineFitter() \n    self.laneDrawer    = tools.LaneDrawer() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9906597985212068
      ],
      "excerpt": "    Image is resized to the selected size for the project. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "\uff08\u8f66\u8f86\u68c0\u6d4b\u548c\u8f66\u9053\u5206\u5272\uff09vehicle detection and lane segmentation based on YOLOv3 with paddlex",
      "technique": "GitHub API"
    }
  ],
  "documentation": [
    {
      "confidence": [
        1.0
      ],
      "excerpt": "https://paddlex.readthedocs.io/",
      "technique": "Regular expression"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Sharpiless/paddlex-vehicle-detection-with-YOLOv3/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 3,
      "date": "Sat, 11 Dec 2021 18:11:45 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Sharpiless/paddlex-vehicle-detection-with-YOLOv3/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "Sharpiless/paddlex-vehicle-detection-with-YOLOv3",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/Sharpiless/paddlex-vehicle-detection-with-YOLOv3/master/main.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.9959352415988416,
        0.9959352415988416
      ],
      "excerpt": "pip install paddlex -i https://mirror.baidu.com/pypi/simple \n!pip install paddlex -i https://mirror.baidu.com/pypi/simple \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8896371557457118
      ],
      "excerpt": "matplotlib.use('Agg')  \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "def load_one_info(name): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9074133485246737
      ],
      "excerpt": "    #: Use one slash for paths. \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8347306400897082
      ],
      "excerpt": "import matplotlib \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8401558704798054
      ],
      "excerpt": "import os \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9012248701992861
      ],
      "excerpt": "import paddlex as pdx \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9456634955950556,
        0.8071572586203638
      ],
      "excerpt": "print('total:', len(imgs)) \nwith open('./VOC2012/train_list.txt', 'w') as f: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8537231978439938,
        0.8071572586203638
      ],
      "excerpt": "        f.write(info) \nwith open('./VOC2012/val_list.txt', 'w') as f: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8537231978439938
      ],
      "excerpt": "        f.write(info) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.853492186136904
      ],
      "excerpt": "total: 6000 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8146618291309999
      ],
      "excerpt": "from paddlex.det import transforms \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "    shuffle=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8071932098443445
      ],
      "excerpt": "2020-05-12 00:11:34 [INFO]  Starting to read file list from dataset... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8163008977744467
      ],
      "excerpt": "2020-05-12 00:11:35 [INFO]  200 samples in file ./VOC2012/val_list.txt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8111740807498238
      ],
      "excerpt": "anchors (list|tuple): anchor\u6846\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u4e3aNone\u65f6\u8868\u793a\u4f7f\u7528\u9ed8\u8ba4\u503c [[10, 13], [16, 30], [33, 23], [30, 61], [62, 45], [59, 119], [116, 90], [156, 198], [373, 326]]\u3002 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8435099147497722
      ],
      "excerpt": "nms_score_threshold (float): \u68c0\u6d4b\u6846\u7684\u7f6e\u4fe1\u5ea6\u5f97\u5206\u9608\u503c\uff0c\u7f6e\u4fe1\u5ea6\u5f97\u5206\u4f4e\u4e8e\u9608\u503c\u7684\u6846\u5e94\u8be5\u88ab\u5ffd\u7565\u3002\u9ed8\u8ba4\u4e3a0.01\u3002 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8311891900888545
      ],
      "excerpt": "nms_iou_threshold (float): \u8fdb\u884cNMS\u65f6\uff0c\u7528\u4e8e\u5254\u9664\u68c0\u6d4b\u6846IOU\u7684\u9608\u503c\u3002\u9ed8\u8ba4\u4e3a0.45\u3002 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9457175861910134
      ],
      "excerpt": "import numpy as np \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8226147965700719
      ],
      "excerpt": "filename = os.path.join(base, 'Annotations', name) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8845324900540819,
        0.9094150935015075,
        0.8102780086823556
      ],
      "excerpt": "Boxes = np.zeros((objs_num, 4), dtype=np.float32) \nTrue_classes = np.zeros((objs_num), dtype=np.float32) \nresult = [] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8997243352845468
      ],
      "excerpt": "iou_ = np.true_divide(intersection, box_area + \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8381641486303337
      ],
      "excerpt": "return np.mean([np.max(iou(boxes[i], clusters)) for i in range(boxes.shape[0])]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8854961224545562
      ],
      "excerpt": "return np.delete(new_boxes, [0, 1], axis=1) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8997243352845468,
        0.8826917448272372
      ],
      "excerpt": "distances = np.empty((rows, k)) \nlast_clusters = np.zeros((rows,)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.809726610547402
      ],
      "excerpt": "while True: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8973933083440926
      ],
      "excerpt": "    nearest_clusters = np.argmin(distances, axis=1) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8102780086823556
      ],
      "excerpt": "result = [] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.924396417587599,
        0.8102780086823556
      ],
      "excerpt": "result = np.array(result) \nanchors, ave_iou = get_kmeans(result, 9) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8918249975510519,
        0.8047888771473891
      ],
      "excerpt": "print('anchors are:') \nprint('the average iou is:') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9029894123539411
      ],
      "excerpt": "print('class num:', num_classes) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8594142235991984
      ],
      "excerpt": "    use_vdl=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.822409348312729,
        0.8088272077872427
      ],
      "excerpt": "model.evaluate(eval_dataset, batch_size=1, epoch_id=None, metric=None, return_details=False) \n2020-05-12 07:21:25 [INFO]  Start to evaluating(total_samples=200, total_steps=200)... \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9133368656218674,
        0.8396948529258378,
        0.9068127677393759
      ],
      "excerpt": "import cv2 \nimport time \nimport matplotlib.pyplot as plt \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8630683149142536,
        0.829588080561269,
        0.8153663030348224,
        0.9535881759531688
      ],
      "excerpt": "result = model.predict(image_name, eval_transforms) \n: pdx.det.visualize(image_name, result, threshold=0.5, save_dir='./output/') \nprint('infer time:{:.6f}s'.format(time.time()-start)) \nprint('detected num:', len(result)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8652862896330521,
        0.9458282386987262
      ],
      "excerpt": "for value in result: \n    xmin, ymin, w, h = np.array(value['bbox']).astype(np.int) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9016815326902492,
        0.8310159060815993
      ],
      "excerpt": "cv2.imwrite('result.jpg', im) \nplt.imshow(im[:, :, [2,1,0]]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8006149163042007
      ],
      "excerpt": "import pickle, glob, os \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8801854956928516
      ],
      "excerpt": "from moviepy.editor import VideoFileClip \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8055120325662588
      ],
      "excerpt": "    \"\"\"The src points draw a persepective trapezoid, the dst points draw \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8472228291763051
      ],
      "excerpt": "    src = np.float32([[(.42 * self.img_shape[1],.65 * self.img_shape[0] ), \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9341064091516971
      ],
      "excerpt": "    dst = np.float32([[0,0], \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8999421166419836,
        0.8999421166419836
      ],
      "excerpt": "    self.M = cv2.getPerspectiveTransform(src, dst) \n    self.M_inv = cv2.getPerspectiveTransform(dst, src) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8744650889514408,
        0.8744650889514408
      ],
      "excerpt": "    self.bottom_clip = np.int32(np.int32([[[60,0], [1179,0], [1179,650], [60,650]]])) \n    self.roi_clip =  np.int32(np.int32([[[640, 425], [1179,550], [979,719], \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8155620370713799
      ],
      "excerpt": "    result      = self.__draw_lane_lines(undistorted, thresholded, include_stats=False) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8330103418528659
      ],
      "excerpt": "    return True \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8750356969093698
      ],
      "excerpt": "    mask = np.zeros_like(img)    \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8344490608535728,
        0.9389009117450714
      ],
      "excerpt": "result = obj.test_one_image('./result.jpg') \nprint(type(result), result.shape) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/Sharpiless/paddlex-vehicle-detection-with-YOLOv3/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook",
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "PaddleX\u52a9\u529b\u65e0\u4eba\u9a7e\u9a76\uff08\u57fa\u4e8eYOLOv3\u7684\u8f66\u8f86\u68c0\u6d4b\u548c\u8f66\u9053\u7ebf\u5206\u5272\uff09",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "paddlex-vehicle-detection-with-YOLOv3",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "Sharpiless",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/Sharpiless/paddlex-vehicle-detection-with-YOLOv3/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 8,
      "date": "Sat, 11 Dec 2021 18:11:45 GMT"
    },
    "technique": "GitHub API"
  }
}