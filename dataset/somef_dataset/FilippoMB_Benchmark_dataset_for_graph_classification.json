{
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "\\[1\\] Defferrard, M., Bresson, X., & Vandergheynst, P. (2016). Convolutional neural networks on graphs with fast localized spectral filtering. In Advances in neural information processing systems\n\n\\[2\\] Dhillon, I. S., Guan, Y., & Kulis, B. (2007). Weighted graph cuts without eigenvectors a multilevel approach. IEEE transactions on pattern analysis and machine intelligence\n\n\\[3\\] Bianchi, F. M., Grattarola, D., Livi, L., & Alippi, C. (2019). Hierarchical Representation Learning in Graph Neural Networks with Node Decimation Pooling\n\n\\[4\\] Ying, Z., You, J., Morris, C., Ren, X., Hamilton, W., & Leskovec, J. (2018). Hierarchical graph representation learning with differentiable pooling. In Advances in neural information processing systems\n\n\\[5\\] Gao, H., & Ji, S., Graph u-nets, ICML 2019\n\n\\[6\\] Lee, J., Lee, I., & Kang, J., Self-attention graph pooling, ICML 2019\n\n\\[7\\] F. M. Bianchi, D. Grattarola, C. Alippi, Spectral Clustering with Graph Neural Networks for Graph Pooling, ICML 2020\n\n\\[8\\] Martino A, Giuliani A, Rizzi A., (Hyper) Graph Embedding and Classification via Simplicial Complexes. Algorithms. 2019 Nov; 12(11):223\n\n\\[9\\] Martino A. and Rizzi A., (Hyper)graph kernels over simplicial complexes. 2020. Pattern Recognition\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8500473387232257
      ],
      "excerpt": "small_easy: 100 graphs per class, number of nodes varying in 40 and 80. Highly connected graphs. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8356013927728488,
        0.8109194328925066,
        0.8444342525991423,
        0.8955886365383559
      ],
      "excerpt": "| easy_small | 3         | 300      | 239     | 30       | 31        | 58.25     | 358.8     | 5                 | \n| hard_small | 3         | 300      | 245     | 29       | 26        | 58.64     | 224.94    | 5                 | \n| easy       | 3         | 1800     | 1475    | 162      | 163       | 147.82    | 922.66    | 5                 | \n| hard       | 3         | 1800     | 1451    | 159      | 190       | 148.32    | 572.32    | 5                 | \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/FilippoMB/Benchmark_dataset_for_graph_classification",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-06-20T13:24:22Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-02-05T22:27:22Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9512253908685095,
        0.9682608203820199,
        0.9725070559668334,
        0.9915479507348028
      ],
      "excerpt": "This repository contains datasets to quickly test graph classification algorithms, such as Graph Kernels and Graph Neural Networks. \nThe purpose of this dataset is to make the features on the nodes and the adjacency matrix to be completely uninformative if considered alone. \nTherefore, an algorithm that relies only on the node features or on the graph structure will fail to achieve good classification results. \nThe dataset consists of graphs belonging to 3 different classes. The number of nodes in each graph is variable and the feature vector on each node is a one-hot vector of size 5, which encodes the color of the node. The class is determined by the relative position of the colors on the graph. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8309574342983764
      ],
      "excerpt": "There are 4 versions of the dataset \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8243423170310837
      ],
      "excerpt": "In the hard dataset, it is necessary to consider higher order neighborhoods to understand the correct class and the graphs might be disconnected. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8569260825340816,
        0.9111333269052515
      ],
      "excerpt": "- the list of adjacency matrices in csr_matrix format, \n- the list of node features as numpy arrays, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8228986957499398
      ],
      "excerpt": "The following code snippet shows how to load the data \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8761284566855562
      ],
      "excerpt": "X_train = loaded['tr_feat'] #: node features \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8761284566855562
      ],
      "excerpt": "X_val = loaded['val_feat'] #: node features \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8761284566855562
      ],
      "excerpt": "X_test = loaded['te_feat'] #: node features \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for a, x in zip(A_train, X_train): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8930901044020226
      ],
      "excerpt": "    nx.set_node_attributes(G, dict(enumerate(x_tuple)), 'features') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for a, x in zip(A_val, X_val): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8930901044020226
      ],
      "excerpt": "    nx.set_node_attributes(G, dict(enumerate(x_tuple)), 'features') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for a, x in zip(A_test, X_test): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8930901044020226
      ],
      "excerpt": "    nx.set_node_attributes(G, dict(enumerate(x_tuple)), 'features') \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9007566787509509
      ],
      "excerpt": "Classification results obtained by using Graph Kernels and other techniques are reported below. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9446750474665494
      ],
      "excerpt": "The Graph Kernels are computed with the GraKeL library. After each kernel is computed, an SVM that uses as precomputed kernel the Graph Kernel is trained and then evaluated on the test data. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9827941683957636
      ],
      "excerpt": "The code used to generate the results can be found in the notebook of this repository. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8711580500325781
      ],
      "excerpt": "Results obtained with the following GNN architecture: MP(32)-Pool-MP(32)-Pool-MP(32)-GlobalPool-Dense(Softmax). MP is a message-passing architecture. A Chebyshev convolutional layer [1] with K=1 and 32 hidden units was used here. Results refer to different graph pooling layers: Graclus [2], Node Decimation Pooling (NDP) [3], DiffPool [4], Top-K pooling [5], SAGpool [6] and MinCutPool [7]. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "This repository contains a dataset for testing graph classification algorithms, such as Graph Kernels and Graph Neural Networks.",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/FilippoMB/Benchmark_dataset_for_graph_classification/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 4,
      "date": "Wed, 08 Dec 2021 12:18:20 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/FilippoMB/Benchmark_dataset_for_graph_classification/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "FilippoMB/Benchmark_dataset_for_graph_classification",
    "technique": "GitHub API"
  },
  "hasExecutableNotebook": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/FilippoMB/Benchmark_dataset_for_graph_classification/master/Example.ipynb"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        0.8458839845347723,
        0.999746712887969,
        0.999746712887969,
        0.9957782838553803
      ],
      "excerpt": "Dependecies to run the notebook: \n- scikitlearn pip install sklearn \n- networkx pip install networkx \n- grakel pip install grakel-dev \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.9457175861910134,
        0.8761588828039139
      ],
      "excerpt": "import numpy as np \nloaded = np.load('datasets/hard.npz', allow_pickle=True) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8092985625878927,
        0.9012248701992861
      ],
      "excerpt": ": OPTIONAL - Convert to networkx format \nimport networkx as nx \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.808215285415942
      ],
      "excerpt": "Dependecies to run the notebook: \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/FilippoMB/Benchmark_dataset_for_graph_classification/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Jupyter Notebook"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Filippo Bianchi\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Benchmark dataset for graph classification",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "Benchmark_dataset_for_graph_classification",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "FilippoMB",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/FilippoMB/Benchmark_dataset_for_graph_classification/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 30,
      "date": "Wed, 08 Dec 2021 12:18:20 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "graph-database",
      "graphkernel",
      "graphneuralnetwork",
      "graphclassification"
    ],
    "technique": "GitHub API"
  }
}