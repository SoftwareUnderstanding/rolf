{
  "citation": [
    {
      "confidence": [
        0.9030859728368266
      ],
      "excerpt": "          .fully_connected(10, activation_fn=None) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8109194328925066
      ],
      "excerpt": "    towers[2].conv2d(1, 32).conv2d(5, 64) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/google/prettytensor",
    "technique": "GitHub API"
  },
  "contributingGuidelines": {
    "confidence": [
      1.0
    ],
    "excerpt": "Want to contribute? Great! First, read this page (including the small print at the end).\nBefore you contribute\nBefore we can use your code, you must sign the\n[Google Individual Contributor License Agreement]\n(https://cla.developers.google.com/about/google-individual)\n(CLA), which you can do online. The CLA is necessary mainly because you own the\ncopyright to your changes, even after your contribution becomes part of our\ncodebase, so we need your permission to use and distribute your code. We also\nneed to be sure of various other things\u2014for instance that you'll tell us if you\nknow that your code infringes on other people's patents. You don't have to sign\nthe CLA until after you've submitted your code for review and a member has\napproved it, but you must do it before we can put your code into our codebase.\nBefore you start working on a larger contribution, you should get in touch with\nus first through the issue tracker with your idea so that we can help out and\npossibly guide you. Coordinating up front makes it much easier to avoid\nfrustration later on.\nCode reviews\nAll submissions, including submissions by project members, require review. We\nuse Github pull requests for this purpose.\nThe small print\nContributions made by corporations are covered by a different agreement than\nthe one above, the\n[Software Grant and Corporate Contributor License Agreement]\n(https://cla.developers.google.com/about/google-corporate).",
    "technique": "File Exploration"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2015-11-02T18:19:46Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-07T06:29:19Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8751052811582356
      ],
      "excerpt": "Pretty Tensor provides a high level builder API for TensorFlow. It provides \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9395202462563272
      ],
      "excerpt": "Pretty Tensor provides a set of objects that behave likes Tensors, but also \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.897526365151249
      ],
      "excerpt": "and other layered architectures in TensorFlow. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9305558662419013
      ],
      "excerpt": "Please look here for full documentation of the PrettyTensor object for all \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9319708861235405
      ],
      "excerpt": "with tf.Session() as sess: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9235634051333341
      ],
      "excerpt": "It also uses standard TensorFlow idioms so that it plays well with other \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.808274215371622
      ],
      "excerpt": "(see with_update_ops). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8388543509591306
      ],
      "excerpt": "that it takes care of handling the input shape.  One other feature worth noting \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127
      ],
      "excerpt": "with pt.defaults_scope(activation_fn=tf.nn.relu): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.912857959085063
      ],
      "excerpt": "Check out the documentation to see \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9502128829371483
      ],
      "excerpt": "the subdivide syntactic sugar that makes it easy to define and understand \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127
      ],
      "excerpt": "with pretty_tensor.defaults_scope(activation_fn=tf.nn.relu): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9319708861235405
      ],
      "excerpt": "  with seq.subdivide(4) as towers: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9560187895509076
      ],
      "excerpt": "for x in pretty_input_array: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9401642655597154
      ],
      "excerpt": "There are also some convenient shorthands for LSTMs and GRUs: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8008593181705677,
        0.9405722591916533
      ],
      "excerpt": "mechanisms to add your own functions. @Register() allows you to create a \nmethod on PrettyTensor that operates on the Tensors and returns either a loss or \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9500808987616733
      ],
      "excerpt": "The following method adds the leaky_relu method to every Pretty Tensor: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9845419909160935,
        0.8862902408297538
      ],
      "excerpt": "@RegisterCompoundOp() is like adding a macro, it is designed to group together \ncommon sets of operations. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.857119059373572,
        0.885619633465013,
        0.8540538893408635,
        0.8019781658873217,
        0.9018111272703966,
        0.9687525024222361
      ],
      "excerpt": "just like a regular graph except that some variables are left unbound. \nSee more details in PrettyTensor class. \nPretty Tensor uses the standard graph collections from TensorFlow to store variables.  These can be accessed using tf.get_collection(key) with the following keys: \ntf.GraphKeys.VARIABLES: all variables that should be saved (including some statistics). \ntf.GraphKeys.TRAINABLE_VARIABLES: all variables that can be trained (including those before astop_gradients` call). These are what would typically be called parameters of the model in ML parlance. \npt.GraphKeys.TEST_VARIABLES: variables used to evaluate a model. These are typically not saved and are reset by the LocalRunner.evaluate method to get a fresh evaluation. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Pretty Tensor: Fluent Networks in TensorFlow",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/google/prettytensor/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 148,
      "date": "Fri, 10 Dec 2021 19:54:41 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/google/prettytensor/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "google/prettytensor",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/google/prettytensor/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "hasScriptFile": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://raw.githubusercontent.com/google/prettytensor/master/test_pip_install.sh"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "    my_inputs = ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "The easiest installation is just to use pip:\n\n1. Follow the instructions at\n    [tensorflow.org](https://www.tensorflow.org/versions/master/get_started/os_setup.html#pip_install)\n2. `pip install prettytensor`\n\n\n**Note:** Head is tested against the TensorFlow nightly builds and pip is tested against TensorFlow release.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.8661176197453521
      ],
      "excerpt": "          .softmax(labels, name=softmax_name)) \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8111013344888326
      ],
      "excerpt": "result = (pretty_tensor.wrap(input_data, m) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8194171391332469
      ],
      "excerpt": "          .fully_connected(200, activation_fn=tf.nn.relu) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9012248701992861,
        0.925671696398174
      ],
      "excerpt": "import prettytensor as pt \nimport tensorflow as tf \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.920675044038725,
        0.9027045194191377
      ],
      "excerpt": "input_tensor = tf.placeholder(np.float32, shape=(BATCH_SIZE, DATA_SIZE)) \nlabel_tensor = tf.placeholder(np.float32, shape=(BATCH_SIZE, CLASSES)) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8936954105699045
      ],
      "excerpt": "optimizer = tf.train.GradientDescentOptimizer(0.1) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8123763140827432,
        0.8135654125968134,
        0.8008331685760428
      ],
      "excerpt": "init_op = tf.initialize_all_variables() \nwith tf.Session() as sess: \n    sess.run(init_op) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8778139448333059
      ],
      "excerpt": "output = [], s = tf.zeros([BATCH, 256 * 2]) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8923472275060038
      ],
      "excerpt": "  return tf.select(tf.greater(input_pt, 0.0), input_pt, 0.01 * input_pt) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/google/prettytensor/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Shell"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "Apache License 2.0",
      "url": "https://api.github.com/licenses/apache-2.0"
    },
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Pretty Tensor - Fluent Neural Networks in TensorFlow",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "prettytensor",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "google",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/google/prettytensor/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1247,
      "date": "Fri, 10 Dec 2021 19:54:41 GMT"
    },
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Pretty Tensors can be used (almost) everywhere that a tensor can.  Just call\n`pt.wrap` to make a tensor pretty.\n\nYou can also add any existing TensorFlow function to the chain using `apply`.\n`apply` applies the current Tensor as the first argument and takes all the other\narguments as normal.\n\n*Note:* because apply is so generic, Pretty Tensor doesn't try to wrap the\nworld.\n\n",
      "technique": "Header extraction"
    }
  ]
}