{
  "acknowledgement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "1. [TorchMeta](https://github.com/tristandeleu/pytorch-meta) is similar library, with a focus on datasets for supervised meta-learning. \n2. [higher](https://github.com/facebookresearch/higher) is a PyTorch library that enables differentiating through optimization inner-loops. While they monkey-patch `nn.Module` to be stateless, learn2learn retains the stateful PyTorch look-and-feel. For more information, refer to [their ArXiv paper](https://arxiv.org/abs/1910.01727).\n3. We are thankful to the following open-source implementations which helped guide the design of learn2learn:\n    * Tristan Deleu's [pytorch-maml-rl](https://github.com/tristandeleu/pytorch-maml-rl)\n    * Jonas Rothfuss' [ProMP](https://github.com/jonasrothfuss/ProMP/)\n    * Kwonjoon Lee's [MetaOptNet](https://github.com/kjunelee/MetaOptNet)\n    * Han-Jia Ye's and Hexiang Hu's [FEAT](https://github.com/Sha-Lab/FEAT)\n",
      "technique": "Header extraction"
    }
  ],
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/2008.12284",
      "https://arxiv.org/abs/2008.12284",
      "https://arxiv.org/abs/1910.01727",
      "https://arxiv.org/abs/2008.12284](https://arxiv.org/abs/2008.12284)\n\n**Overview**\n\n* [`learn2learn.data`](http://learn2learn.net/docs/learn2learn.data/): `TaskDataset` and transforms to create few-shot tasks from any PyTorch dataset.\n* [`learn2learn.vision`](http://learn2learn.net/docs/learn2learn.vision/): Models, datasets, and benchmarks for computer vision and few-shot learning.\n* [`learn2learn.gym`](http://learn2learn.net/docs/learn2learn.gym/): Environment and utilities for meta-reinforcement learning.\n* [`learn2learn.algorithms`](http://learn2learn.net/docs/learn2learn.algorithms/): High-level wrappers for existing meta-learning algorithms.\n* [`learn2learn.optim`](http://learn2learn.net/docs/learn2learn.optim/): Utilities and algorithms for differentiable optimization and meta-descent.\n\n**Resources**\n\n* Website: [http://learn2learn.net/](http://learn2learn.net/)\n* Documentation: [http://learn2learn.net/docs/learn2learn](http://learn2learn.net/docs/learn2learn)\n* Tutorials: [http://learn2learn.net/tutorials/getting_started/](http://learn2learn.net/tutorials/getting_started/)\n* Examples: [https://github.com/learnables/learn2learn/tree/master/examples](https://github.com/learnables/learn2learn/tree/master/examples)\n* GitHub: [https://github.com/learnables/learn2learn/](https://github.com/learnables/learn2learn/)\n* Slack: [http://slack.learn2learn.net/](http://slack.learn2learn.net/)\n\n## Installation\n\n~~~bash\npip install learn2learn\n~~~\n\n## Snippets & Examples\n\nThe following snippets provide a sneak peek at the functionalities of learn2learn.\n\n### High-level Wrappers\n\n<details>\n<summary><b>Few-Shot Learning with MAML</b></summary>\n\nFor more algorithms (ProtoNets, ANIL, Meta-SGD, Reptile, Meta-Curvature, KFO) refer to the <a href=\"https://github.com/learnables/learn2learn/tree/master/examples/vision\">examples</a> folder.\nMost of them can be implemented with with the `GBML` wrapper. (<a href=\"http://learn2learn.net/docs/learn2learn.algorithms/#gbml\">documentation</a>).\n    \n~~~python\nmaml = l2l.algorithms.MAML(model, lr=0.1)\nopt = torch.optim.SGD(maml.parameters(), lr=0.001)\nfor iteration in range(10):\n    opt.zero_grad()\n    task_model = maml.clone()  # torch.clone() for nn.Modules\n    adaptation_loss = compute_loss(task_model)\n    task_model.adapt(adaptation_loss)  # computes gradient, update task_model in-place\n    evaluation_loss = compute_loss(task_model)\n    evaluation_loss.backward()  # gradients w.r.t. maml.parameters()\n    opt.step()\n~~~\n</details>\n\n<details>\n<summary><b>Meta-Descent with Hypergradient</b></summary>\n    \nLearn any kind of optimization algorithm with the `LearnableOptimizer`. (<a href=\"https://github.com/learnables/learn2learn/tree/master/examples/optimization\">example</a> and <a href=\"http://learn2learn.net/docs/learn2learn.optim/#learnableoptimizer\">documentation</a>)\n\n~~~python\nlinear = nn.Linear(784, 10)\ntransform = l2l.optim.ModuleTransform(l2l.nn.Scale)\nmetaopt = l2l.optim.LearnableOptimizer(linear, transform, lr=0.01)  # metaopt has .step()\nopt = torch.optim.SGD(metaopt.parameters(), lr=0.001)  # metaopt also has .parameters()\n\nmetaopt.zero_grad()\nopt.zero_grad()\nerror = loss(linear(X), y)\nerror.backward()\nopt.step()  #\u00a0update metaopt\nmetaopt.step()  # update linear\n~~~\n</details>\n\n### Learning Domains\n\n<details>\n<summary><b>Custom Few-Shot Dataset</b></summary>\n\nMany standardized datasets (Omniglot, mini-/tiered-ImageNet, FC100, CIFAR-FS) are readily available in `learn2learn.vision.datasets`.\n(<a href=\"http://learn2learn.net/docs/learn2learn.vision/#learn2learnvisiondatasets\">documentation</a>)\n\n~~~python\ndataset = l2l.data.MetaDataset(MyDataset())  # any PyTorch dataset\ntransforms = [  # Easy to define your own transform\n    l2l.data.transforms.NWays(dataset, n=5),\n    l2l.data.transforms.KShots(dataset, k=1),\n    l2l.data.transforms.LoadData(dataset),\n]\ntaskset = TaskDataset(dataset, transforms, num_tasks=20000)\nfor task in taskset:\n    X, y = task\n    # Meta-train on the task\n~~~\n</details>\n\n\n<details>\n<summary><b>Environments and Utilities for Meta-RL</b></summary>\n\nParallelize your own meta-environments with `AsyncVectorEnv`, or use the standardized ones.\n(<a href=\"http://learn2learn.net/docs/learn2learn.gym/#metaenv\">documentation</a>)\n\n~~~python\ndef make_env():\n    env = l2l.gym.HalfCheetahForwardBackwardEnv()\n    env = cherry.envs.ActionSpaceScaler(env)\n    return env\n\nenv = l2l.gym.AsyncVectorEnv([make_env for _ in range(16)])  # uses 16 threads\nfor task_config in env.sample_tasks(20):\n    env.set_task(task)  # all threads receive the same task\n    state = env.reset()  # use standard Gym API\n    action = my_policy(env)\n    env.step(action)\n~~~\n</details>\n\n### Low-Level Utilities\n\n<details>\n<summary><b>Differentiable Optimization</b></summary>\n\nLearn and differentiate through updates of PyTorch Modules.\n(<a href=\"http://learn2learn.net/docs/learn2learn.optim/#parameterupdate\">documentation</a>)\n    \n~~~python\n\nmodel = MyModel()\ntransform = l2l.optim.KroneckerTransform(l2l.nn.KroneckerLinear)\nlearned_update = l2l.optim.ParameterUpdate(  # learnable update function\n        model.parameters(), transform)\nclone = l2l.clone_module(model)  # torch.clone() for nn.Modules\nerror = loss(clone(X), y)\nupdates = learned_update(  # similar API as torch.autograd.grad\n    error,\n    clone.parameters(),\n    create_graph=True,\n)\nl2l.update_module(clone, updates=updates)\nloss(clone(X), y).backward()  # Gradients w.r.t model.parameters() and learned_update.parameters()\n~~~\n</details>\n\n## Changelog\n\nA human-readable changelog is available in the [CHANGELOG.md](CHANGELOG.md) file.\n\n## Citation\n\nTo cite the `learn2learn` repository in your academic publications, please use the following reference.\n\n> Arnold, Sebastien M. R., Praateek Mahajan, Debajyoti Datta, Ian Bunner, and Konstantinos Saitas Zarkias. 2020. \u201clearn2learn: A Library for Meta-Learning Research.\u201d arXiv [cs.LG]. http://arxiv.org/abs/2008.12284.\n\nYou can also use the following Bibtex entry.\n\n~~~bib\n@article{Arnold2020-ss,\n  title         = \"learn2learn: A Library for {Meta-Learning"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To cite the `learn2learn` repository in your academic publications, please use the following reference.\n\n> Arnold, Sebastien M. R., Praateek Mahajan, Debajyoti Datta, Ian Bunner, and Konstantinos Saitas Zarkias. 2020. \u201clearn2learn: A Library for Meta-Learning Research.\u201d arXiv [cs.LG]. http://arxiv.org/abs/2008.12284.\n\nYou can also use the following Bibtex entry.\n\n~~~bib\n@article{Arnold2020-ss,\n  title         = \"learn2learn: A Library for {Meta-Learning} Research\",\n  author        = \"Arnold, S{\\'e}bastien M R and Mahajan, Praateek and Datta,\n                   Debajyoti and Bunner, Ian and Zarkias, Konstantinos Saitas\",\n  month         =  aug,\n  year          =  2020,\n  url           = \"http://arxiv.org/abs/2008.12284\",\n  archivePrefix = \"arXiv\",\n  primaryClass  = \"cs.LG\",\n  eprint        = \"2008.12284\"\n}\n\n~~~\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n- family-names: \"Arnold\"\n  given-names: \"Sebastien M. R.\"\n- family-names: \"Mahajan\"\n  given-names: \"Praateek\"\n- family-names: \"Datta\"\n  given-names: \"Debajyoti\"\n- family-names: \"Bunner\"\n  given-names: \"Ian\"\n- family-names: \"Saitas Zarkias\"\n  given-names: \"Konstantinos\"\ntitle: \"learn2learn: A Library for Meta-Learning Research\"\nversion: 0.1.5\ndate-released: 2020-08-27\nurl: \"https://github.com/learnables/learn2learn\"",
      "technique": "File Exploration"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "@article{Arnold2020-ss,\n  title         = \"learn2learn: A Library for {Meta-Learning} Research\",\n  author        = \"Arnold, S{\\'e}bastien M R and Mahajan, Praateek and Datta,\n                   Debajyoti and Bunner, Ian and Zarkias, Konstantinos Saitas\",\n  month         =  aug,\n  year          =  2020,\n  url           = \"http://arxiv.org/abs/2008.12284\",\n  archivePrefix = \"arXiv\",\n  primaryClass  = \"cs.LG\",\n  eprint        = \"2008.12284\"\n}",
      "technique": "Regular expression"
    },
    {
      "confidence": [
        0.8088275851153562
      ],
      "excerpt": "for iteration in range(10): \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9358945334453493
      ],
      "excerpt": "(<a href=\"http://learn2learn.net/docs/learn2learn.vision/#learn2learnvisiondatasets\">documentation</a>) \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/learnables/learn2learn",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2019-08-08T18:22:41Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-12-10T13:24:17Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8600819973373731
      ],
      "excerpt": "Most of them can be implemented with with the `GBML` wrapper. (<a href=\"http://learn2learn.net/docs/learn2learn.algorithms/#gbml\">documentation</a>). \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9567588029116127,
        0.8781619646764581
      ],
      "excerpt": "<summary><b>Meta-Descent with Hypergradient</b></summary> \nLearn any kind of optimization algorithm with the `LearnableOptimizer`. (<a href=\"https://github.com/learnables/learn2learn/tree/master/examples/optimization\">example</a> and <a href=\"http://learn2learn.net/docs/learn2learn.optim/#learnableoptimizer\">documentation</a>) \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8699483869102234
      ],
      "excerpt": "for task in taskset: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.978027802044922
      ],
      "excerpt": "<summary><b>Environments and Utilities for Meta-RL</b></summary> \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9259490291139122
      ],
      "excerpt": "Learn and differentiate through updates of PyTorch Modules. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.860059181823877
      ],
      "excerpt": "model = MyModel() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "A PyTorch Library for Meta-learning Research",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/learnables/learn2learn/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 226,
      "date": "Fri, 10 Dec 2021 19:56:27 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/learnables/learn2learn/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "learnables/learn2learn",
    "technique": "GitHub API"
  },
  "hasDocumentation": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://github.com/learnables/learn2learn/tree/master/docs"
    ],
    "technique": "File Exploration"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "~~~bash\npip install learn2learn\n~~~\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.933538006273495
      ],
      "excerpt": "    task_model = maml.clone() \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.933538006273495
      ],
      "excerpt": "l2l.update_module(clone, updates=updates) \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8260169322483399
      ],
      "excerpt": "dataset = l2l.data.MetaDataset(MyDataset()) \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/learnables/learn2learn/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "Cython",
      "Makefile"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit"
    },
    "technique": "GitHub API"
  },
  "licenseText": {
    "confidence": [
      1.0
    ],
    "excerpt": "b'MIT License\\n\\nCopyright (c) 2019 Debajyoti Datta, Ian Bunner, Praateek Mahajan, Sebastien Arnold\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \"Software\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n'",
    "technique": "File Exploration"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "# Installation",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "learn2learn",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "learnables",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "Organization",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/learnables/learn2learn/blob/master/README.md",
    "technique": "GitHub API"
  },
  "releases": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      {
        "authorType": "User",
        "author_name": "seba-1511",
        "body": "v0.1.6\r\n======\r\n\r\nAdded\r\n-----\r\n\r\n* PyTorch Lightning interface to MAML, ANIL, ProtoNet, MetaOptNet.\r\n* Automatic batcher for Lightning: `l2l.data.EpisodicBatcher`.\r\n* `l2l.nn.PrototypicalClassifier` and `l2l.nn.SVMClassifier`.\r\n* Add `l2l.vision.models.WRN28`.\r\n* Separate modules for `CNN4Backbone`, `ResNet12Backbone`, `WRN28Backbones` w/ pretrained weights.\r\n* Add `l2l.data.OnDeviceDataset` and implement `device` parameter for benchmarks.\r\n* (Beta) Add `l2l.data.partition_task` and `l2l.data.InfiniteIterator`.\r\n\r\nChanged\r\n-------\r\n\r\n* Renamed and clarify dropout parameters for `ResNet12`.\r\n\r\nFixed\r\n-----\r\n\r\n* Improved support for 1D inputs in `l2l.nn.KroneckerLinear`. (@timweiland)",
        "dateCreated": "2021-09-07T06:52:44Z",
        "datePublished": "2021-09-07T06:56:10Z",
        "html_url": "https://github.com/learnables/learn2learn/releases/tag/v0.1.6",
        "name": "Add Lightning interface, Backbone classes, new classifiers, and data utils.",
        "tag_name": "v0.1.6",
        "tarball_url": "https://api.github.com/repos/learnables/learn2learn/tarball/v0.1.6",
        "url": "https://api.github.com/repos/learnables/learn2learn/releases/49105941",
        "zipball_url": "https://api.github.com/repos/learnables/learn2learn/zipball/v0.1.6"
      },
      {
        "authorType": "User",
        "author_name": "seba-1511",
        "body": "## v0.1.5\r\n\r\n### Fixed\r\n\r\n* Fix setup.py for windows installs.",
        "dateCreated": "2020-12-05T17:59:08Z",
        "datePublished": "2020-12-05T18:02:25Z",
        "html_url": "https://github.com/learnables/learn2learn/releases/tag/v0.1.5",
        "name": "Fix windows installation.",
        "tag_name": "v0.1.5",
        "tarball_url": "https://api.github.com/repos/learnables/learn2learn/tarball/v0.1.5",
        "url": "https://api.github.com/repos/learnables/learn2learn/releases/34880560",
        "zipball_url": "https://api.github.com/repos/learnables/learn2learn/zipball/v0.1.5"
      },
      {
        "authorType": "User",
        "author_name": "seba-1511",
        "body": "v0.1.4\r\n======\r\n\r\nAdded\r\n-----\r\n\r\n* `FilteredMetaDatasest` filter the classes used to sample tasks.\r\n* `UnionMetaDatasest` to get the union of multiple MetaDatasets.\r\n* Alias `MiniImageNetCNN` to `CNN4` and add `embedding_size` argument.\r\n* Optional data augmentation schemes for vision benchmarks.\r\n* `l2l.vision.models.ResNet12`\r\n* `l2l.vision.datasets.DescribableTextures`\r\n* `l2l.vision.datasets.Quickdraw`\r\n* `l2l.vision.datasets.FGVCFungi`\r\n* Add `labels_to_indices` and `indices_to_labels` as optional arguments to `l2l.data.MetaDataset`.\r\n\r\nChanged\r\n-------\r\n\r\n* Updated reference for citations.",
        "dateCreated": "2020-11-24T18:43:07Z",
        "datePublished": "2020-11-24T18:46:32Z",
        "html_url": "https://github.com/learnables/learn2learn/releases/tag/v0.1.4",
        "name": "Add new datasets, new models, and dataset utilities.",
        "tag_name": "v0.1.4",
        "tarball_url": "https://api.github.com/repos/learnables/learn2learn/tarball/v0.1.4",
        "url": "https://api.github.com/repos/learnables/learn2learn/releases/34378788",
        "zipball_url": "https://api.github.com/repos/learnables/learn2learn/zipball/v0.1.4"
      },
      {
        "authorType": "User",
        "author_name": "seba-1511",
        "body": "Added\r\n-----\r\n\r\n* `l2l.vision.datasets.CUBirds200`.\r\n\r\nChanged\r\n-------\r\n\r\n* Optimization transforms can be accessed directly through `l2l.optim`, e.g. `l2l.optim.KroneckerTransform`.\r\n* All vision models adhere to the `.features` and `.classifier` interface.\r\n\r\nFixed\r\n-----\r\n\r\n* Fix `clone_module` for Modules whose submodules share parameters.",
        "dateCreated": "2020-08-30T19:56:52Z",
        "datePublished": "2020-08-30T20:01:19Z",
        "html_url": "https://github.com/learnables/learn2learn/releases/tag/v0.1.3",
        "name": "Add CUBirds200, new vision model interface, fix clone_module for shared parameters",
        "tag_name": "v0.1.3",
        "tarball_url": "https://api.github.com/repos/learnables/learn2learn/tarball/v0.1.3",
        "url": "https://api.github.com/repos/learnables/learn2learn/releases/30401853",
        "zipball_url": "https://api.github.com/repos/learnables/learn2learn/zipball/v0.1.3"
      },
      {
        "authorType": "User",
        "author_name": "seba-1511",
        "body": "Added\r\n-----\r\n\r\n* New example: [Meta-World](https://github.com/rlworkgroup/metaworld) example with MAML-TRPO with it's own env wrapper. (@[Kostis-S-Z](https://github.com/Kostis-S-Z))\r\n* `l2l.vision.benchmarks` interface.\r\n* Differentiable optimization utilities in `l2l.optim`. (including `l2l.optim.LearnableOptimizer` for meta-descent)\r\n* General gradient-based meta-learning wrapper in `l2l.algorithms.GBML`.\r\n* Various `nn.Modules` in `l2l.nn`.\r\n* `l2l.update_module` as a more general alternative to `l2l.algorithms.maml_update`.\r\n\r\nFixed\r\n-----\r\n\r\n* clone_module supports non-Module objects.\r\n* VGG flowers now relies on tarfile.open() instead of tarfile.TarFile().",
        "dateCreated": "2020-07-08T03:07:06Z",
        "datePublished": "2020-07-08T03:11:32Z",
        "html_url": "https://github.com/learnables/learn2learn/releases/tag/v0.1.2",
        "name": "Add Meta-World, l2l.optim, l2l.vision.benchmarks.",
        "tag_name": "v0.1.2",
        "tarball_url": "https://api.github.com/repos/learnables/learn2learn/tarball/v0.1.2",
        "url": "https://api.github.com/repos/learnables/learn2learn/releases/28339676",
        "zipball_url": "https://api.github.com/repos/learnables/learn2learn/zipball/v0.1.2"
      },
      {
        "authorType": "User",
        "author_name": "seba-1511",
        "body": "",
        "dateCreated": "2020-04-24T16:57:28Z",
        "datePublished": "2020-04-24T16:59:07Z",
        "html_url": "https://github.com/learnables/learn2learn/releases/tag/v0.1.1",
        "name": "Fix clone_module and MAML for RNN modules",
        "tag_name": "v0.1.1",
        "tarball_url": "https://api.github.com/repos/learnables/learn2learn/tarball/v0.1.1",
        "url": "https://api.github.com/repos/learnables/learn2learn/releases/25859347",
        "zipball_url": "https://api.github.com/repos/learnables/learn2learn/zipball/v0.1.1"
      },
      {
        "authorType": "User",
        "author_name": "seba-1511",
        "body": "",
        "dateCreated": "2020-03-02T03:15:39Z",
        "datePublished": "2020-03-02T03:16:51Z",
        "html_url": "https://github.com/learnables/learn2learn/releases/tag/v0.1.0.1",
        "name": "Clean up package for PyPI distribution",
        "tag_name": "v0.1.0.1",
        "tarball_url": "https://api.github.com/repos/learnables/learn2learn/tarball/v0.1.0.1",
        "url": "https://api.github.com/repos/learnables/learn2learn/releases/24117252",
        "zipball_url": "https://api.github.com/repos/learnables/learn2learn/zipball/v0.1.0.1"
      },
      {
        "authorType": "User",
        "author_name": "seba-1511",
        "body": "## v0.1.0\r\n\r\n### Added\r\n\r\n* A CHANGELOG.md file.\r\n* New vision datasets: FC100, tiered-Imagenet, FGVCAircraft, VGGFlowers102.\r\n* New vision examples: Reptile & ANIL.\r\n* Extensive benchmarks of all vision examples.\r\n\r\n### Changed\r\n\r\n* Re-wrote TaskDataset and task transforms in Cython, for a 20x speed-up.\r\n* Travis testing with different versions of Python (3.6, 3.7), torch (1.1, 1.2, 1.3, 1.4), and torchvision (0.3, 0.4, 0.5).\r\n* New Material doc theme with links to changelog and examples.\r\n\r\n### Fixed\r\n\r\n* Support for `RandomClassRotation` with newer versions of torchvision.\r\n* Various minor fixes in the examples.\r\n* Add Dropbox download if GDrive fails for FC100.\r\n",
        "dateCreated": "2020-03-01T08:42:53Z",
        "datePublished": "2020-03-01T08:46:22Z",
        "html_url": "https://github.com/learnables/learn2learn/releases/tag/v0.1.0",
        "name": "Faster TaskDataset, new vision datasets & examples",
        "tag_name": "v0.1.0",
        "tarball_url": "https://api.github.com/repos/learnables/learn2learn/tarball/v0.1.0",
        "url": "https://api.github.com/repos/learnables/learn2learn/releases/24107251",
        "zipball_url": "https://api.github.com/repos/learnables/learn2learn/zipball/v0.1.0"
      }
    ],
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 1583,
      "date": "Fri, 10 Dec 2021 19:56:27 GMT"
    },
    "technique": "GitHub API"
  },
  "topics": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "pytorch",
      "maml",
      "meta-learning",
      "learning2learn",
      "learn2learn",
      "metalearning",
      "few-shot",
      "meta-rl",
      "meta-descent",
      "meta-optimization"
    ],
    "technique": "GitHub API"
  },
  "usage": [
    {
      "confidence": [
        1
      ],
      "excerpt": "The following snippets provide a sneak peek at the functionalities of learn2learn.\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "for task_config in env.sample_tasks(20):\n    env.set_task(task)  ",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        1
      ],
      "excerpt": "    action = my_policy(env)\n    env.step(action)\n~~~\n</details>\n\n",
      "technique": "Header extraction"
    }
  ]
}