{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1709.01507"
    ],
    "technique": "Regular expression"
  },
  "citation": [
    {
      "confidence": [
        0.8444342525991423,
        0.8444342525991423,
        0.8444342525991423,
        0.8444342525991423,
        0.8444342525991423,
        0.8444342525991423,
        0.8444342525991423,
        0.8444342525991423,
        0.8444342525991423
      ],
      "excerpt": "conv2d (Conv2D)                (None, 64, 64, 32)  288        input_1[0][0]                    \nbatch_normalization (BatchNorm (None, 64, 64, 32)  128        conv2d[0][0]                     \nre_lu (ReLU)                   (None, 64, 64, 32)  0          batch_normalization[0][0]        \nconv2d_1 (Conv2D)              (None, 64, 64, 32)  9216       re_lu[0][0]                      \nbatch_normalization_1 (BatchNo (None, 64, 64, 32)  128        conv2d_1[0][0]                   \nre_lu_1 (ReLU)                 (None, 64, 64, 32)  0          batch_normalization_1[0][0]      \nconv2d_2 (Conv2D)              (None, 64, 64, 32)  9216       re_lu_1[0][0]                    \nbatch_normalization_2 (BatchNo (None, 64, 64, 32)  128        conv2d_2[0][0]                   \nre_lu_2 (ReLU)                 (None, 64, 64, 32)  0          batch_normalization_2[0][0]      \n",
      "technique": "Supervised classification"
    }
  ],
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ifrit98/bengaliai",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-01-03T01:44:03Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-02-23T22:39:01Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.8577302739126875,
        0.8577302739126875
      ],
      "excerpt": "grapheme_root (Dense)          (None, 168)         86184      dropout[0][0]                    \nconsonant (Dense)              (None, 7)           3591       dropout[0][0] \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "Classification of Bengali handwritten graphemes",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ifrit98/bengaliai/releases",
    "technique": "GitHub API"
  },
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 08 Dec 2021 19:25:25 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ifrit98/bengaliai/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "ifrit98/bengaliai",
    "technique": "GitHub API"
  },
  "invocation": [
    {
      "confidence": [
        0.8155282724802132
      ],
      "excerpt": "add (Add)                      (None, 31, 31, 64)  0          multiply[0][0]                 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8366657942264955
      ],
      "excerpt": "multiply_3 (Multiply)          (None, 31, 31, 128) 0          activation_3[0][0]             \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.810637040383011
      ],
      "excerpt": "add_3 (Add)                    (None, 31, 31, 128) 0          multiply_3[0][0]               \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8366657942264955
      ],
      "excerpt": "multiply_4 (Multiply)          (None, 31, 31, 128) 0          activation_4[0][0]             \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.810637040383011
      ],
      "excerpt": "add_4 (Add)                    (None, 31, 31, 128) 0          multiply_4[0][0]               \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8366657942264955
      ],
      "excerpt": "multiply_5 (Multiply)          (None, 31, 31, 128) 0          activation_5[0][0]             \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.810637040383011
      ],
      "excerpt": "add_5 (Add)                    (None, 31, 31, 128) 0          multiply_5[0][0]               \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8934745846565956
      ],
      "excerpt": "Total params: 3,651,662 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/ifrit98/bengaliai/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python",
      "R",
      "Rebol"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "## Bengali Handwritten Grapheme Classification\n\nBengali is the 5th most spoken language in the world with hundreds of million of speakers. It\u2019s the official language of Bangladesh and the second most spoken language in India. Considering its reach, there\u2019s significant business and educational interest in developing AI that can optically recognize images of the language handwritten. This challenge hopes to improve on approaches to Bengali recognition.\n\nOptical character recognition is particularly challenging for Bengali. While Bengali has 49 letters (to be more specific 11 vowels and 38 consonants) in its alphabet, there are also 18 potential diacritics, or accents. This means that there are many more graphemes, or the smallest units in a written language. The added complexity results in ~13,000 different grapheme variations (compared to English\u2019s 250 graphemic units).\n\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/ifrit98/bengaliai/master/bengali.png\" alt=\"alt text\" width=\"550\" height=\"550\"></p>\n\n\nThis dataset comes from [Bengali.AI](https://bengali.ai/learn/), which hopes to democratize and accelerate research in Bengali language technologies and promote machine learning education.  The dataset contains the image of a handwritten Bengali grapheme and this model separately classifies the three constituent elements in the image: grapheme root, vowel diacritics, and consonant diacritics.\n\n### Load and predict with trained model\nSimply clone this repo and run the /eval.R script \n```\ngit clone https://github.com/ifrit98/bengaliai.git\ncd bengaliai\nchmod +x eval.R\n./eval.R\n```\n\n\n\n### Data Preprocessing Pipeline\n```\n | parquet (.pq) files (32332,)  |  # Images come in compressed format as 1D vectors\n              -> \n | invert(img) { 255 - img }     |  # Simple intensity inversion\n              -> \n | Crop & Resize (128, 128)      |  # Makes the images square, and slightly smaller\n              -> \n | augment(img, op) { op(img) }  |  # Randomly samples from one (or more) impairments to apply\n              ->                  \n | normalize(img) {              |\n |   (img - mean(img)) / sd(img) |  # normalize image to unit mean, variance\n |  }                            | \n              ->\n | scale(img) { img / max(img) } |  # Scale values to (0,1)\n```\n- We ultimately end up with an image that has been impaired with one (or more) of the following augmentations.\n`Augment ops = [autocontrast, equalize, posterize, rotate, solarize, shear_x, shear_y, translate_x, translate_y, color, contrast, brightness, sharpness]\n`\n![Impairments](https://raw.githubusercontent.com/ifrit98/bengaliai/master/impairments.png \"side-by-side impairments\")\n\n### Results\n#### History over ~180 epochs\n- Trained on ~100k examples, with 50% impaired, and 50% minimally cropped and resized.\n![alt text](https://raw.githubusercontent.com/ifrit98/bengaliai/master/plots/history.png \"Fit Call History ~180 epochs\")\n\n \n### Model Architecture\n#### Squeeze and Excitation Networks\nSE networks adaptively recalibrate channel-wise feature responses by explicitly modelling interdependencies between channels. \n\n![alt_text](https://raw.githubusercontent.com/ifrit98/bengaliai/master/SEGraph.png \"Diagram of a Squeeze-and-Excitation building block\")\n![alt_text](https://github.com/ifrit98/bengaliai/blob/master/SEResnet.png \"Schema of SE-Inception and SE-ResNet modules\")\n[arXiv 1709.01507](https://arxiv.org/abs/1709.01507)\n\n#### Model Summary (Keras)\n```\nModel: \"SEResnetVariant\"\n______________________________________________________________________________________________\nLayer (type)                   Output Shape        Param #    Connected to",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "bengaliai",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "ifrit98",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/ifrit98/bengaliai/blob/master/README.md",
    "technique": "GitHub API"
  },
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 08 Dec 2021 19:25:25 GMT"
    },
    "technique": "GitHub API"
  }
}