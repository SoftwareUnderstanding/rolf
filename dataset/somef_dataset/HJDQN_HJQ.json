{
  "arxivLinks": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "https://arxiv.org/abs/1509.02971\n\n\n[gymlink]: https://gym.openai.com/\n[pytorchlink]: https://pytorch.org/\n[mujocolink]: http://www.mujoco.org/\n[mujocopylink]: https://github.com/openai/mujoco-py"
    ],
    "technique": "Regular expression"
  },
  "codeRepository": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/HJDQN/HJQ",
    "technique": "GitHub API"
  },
  "dateCreated": {
    "confidence": [
      1.0
    ],
    "excerpt": "2020-10-22T13:07:48Z",
    "technique": "GitHub API"
  },
  "dateModified": {
    "confidence": [
      1.0
    ],
    "excerpt": "2021-11-08T21:23:35Z",
    "technique": "GitHub API"
  },
  "description": [
    {
      "confidence": [
        0.9455459619418357
      ],
      "excerpt": " For example, to set the size of control constraint and the learning rate, \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.949439043573685
      ],
      "excerpt": "Evaluation of the agent is done every 2000 steps of interactions by default. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8949640203125567,
        0.8822932464942987
      ],
      "excerpt": "We also tested our novel algorithm on high-dimensional Linear Quadratic Regulator(LQR) problems. \nSince the default experimental setting of our code is MuJoCo-oriented, you need to adjust extra experiment-related parameters to successfully reproduce LQR experiments. \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        1.0
      ],
      "excerpt": "PyTorch Implementation of Hamilton-Jacobi DQN",
      "technique": "GitHub API"
    }
  ],
  "downloadUrl": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/HJDQN/HJQ/releases",
    "technique": "GitHub API"
  },
  "faq": [
    {
      "confidence": [
        1
      ],
      "excerpt": "We provide a summary of the experimental results on MuJoCo benchmark problems. \nFor each task, we run HJ DQN for 1 million steps across 5 random seeds, and compared the score with that of DDPG.\nTo generate these plots, evaluation are done over 5 episodes every 2000 steps. \nMore concrete discussion and analysis of the result can be found in the paper.\n![main](./figures/main.png)\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "forks_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 0,
      "date": "Wed, 08 Dec 2021 21:51:24 GMT"
    },
    "technique": "GitHub API"
  },
  "forks_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/HJDQN/HJQ/forks",
    "technique": "GitHub API"
  },
  "fullName": {
    "confidence": [
      1.0
    ],
    "excerpt": "HJDQN/HJQ",
    "technique": "GitHub API"
  },
  "installation": [
    {
      "confidence": [
        1
      ],
      "excerpt": "Once you have completed installation of all required packages, \nrun the following command within a shell.\n```\n$ cd hjdqn && pip install -e .\n```\nIt is recommended that you activate a separate virtual environment during installation.\n\nWe also provide custom gym environment to test algorithms on LQR tasks. To install these environments, move to `gym_lqr` folder and install the package as follows:\n```\n$ cd gym_lqr && pip install -e .\n```\nBy doing so, you register these new environments to gym registry, which enables you to create LQR environment instances by simply calling `make` function. The following code will make a 20-dimensional LQR environment:\n```\nenv = gym.make('LinearQuadraticRegulator20D-v0')\n```\n\n\n",
      "technique": "Header extraction"
    },
    {
      "confidence": [
        0.973880353126948
      ],
      "excerpt": " you may run the following command: \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.859639825684702
      ],
      "excerpt": "For instance, to reproduce the result over 20-dimensional LQR with HJ DQN, run the following command: \n",
      "technique": "Supervised classification"
    }
  ],
  "invocation": [
    {
      "confidence": [
        0.8677861801226081
      ],
      "excerpt": "$ python main.py --algo=hjdqn --env=HalfCheetah-v2 --max_iter=1e6 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.8855464601509394
      ],
      "excerpt": "$ python main.py --algo=hjdqn --env=HalfCheetah-v2 --max_iter=1e6 --lr=5e-4 --L=30 \n",
      "technique": "Supervised classification"
    },
    {
      "confidence": [
        0.9117819847277844
      ],
      "excerpt": "$ python main.py --env=LinearQuadraticRegulator20D-v0 --algo=hjdqn --L=10 --lr=1e-3 --max_iter=2e4 --ep_len=1 --eval_interval=50 --fill_buffer=0 --start_train=400 --batch_size=512 --gamma=0.99999 \n",
      "technique": "Supervised classification"
    }
  ],
  "issueTracker": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://api.github.com/repos/HJDQN/HJQ/issues{/number}",
    "technique": "GitHub API"
  },
  "languages": {
    "confidence": [
      1.0
    ],
    "excerpt": [
      "Python"
    ],
    "technique": "GitHub API"
  },
  "license": {
    "confidence": [
      1.0
    ],
    "technique": "GitHub API"
  },
  "long_title": {
    "confidence": [
      1.0
    ],
    "excerpt": "Hamilton-Jacobi DQN",
    "technique": "Regular expression"
  },
  "name": {
    "confidence": [
      1.0
    ],
    "excerpt": "HJQ",
    "technique": "GitHub API"
  },
  "owner": {
    "confidence": [
      1.0
    ],
    "excerpt": "HJDQN",
    "technique": "GitHub API"
  },
  "ownerType": {
    "confidence": [
      1.0
    ],
    "excerpt": "User",
    "technique": "GitHub API"
  },
  "readme_url": {
    "confidence": [
      1.0
    ],
    "excerpt": "https://github.com/HJDQN/HJQ/blob/master/README.md",
    "technique": "GitHub API"
  },
  "requirement": [
    {
      "confidence": [
        1
      ],
      "excerpt": "To run our code, the followings must be installed:\n\n- **Python**\n\n- **[Gym][gymlink]**\n\n- **[Pytorch][pytorchlink]**\n\n- **[MuJoCo][mujocolink]**\n\n- **[mujoco-py][mujocopylink]**\n\n\nFor complete installation of mujoco-py, make sure you already have a MuJoCo activation key under `~/.mujoco`.\nWe successfully run the codes with Python 3.6, Gym 0.15, Pytorch 1.4, and mujoco-py 2.0.2.\n\n\n",
      "technique": "Header extraction"
    }
  ],
  "stargazers_count": {
    "confidence": [
      1.0
    ],
    "excerpt": {
      "count": 2,
      "date": "Wed, 08 Dec 2021 21:51:24 GMT"
    },
    "technique": "GitHub API"
  }
}